
FIND_EQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080058b8  080058b8  000158b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005a64  08005a64  00015a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005a68  08005a68  00015a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000098  20000000  08005a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000477c  20000098  08005b04  00020098  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20004814  08005b04  00024814  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  9 .debug_info   00024356  00000000  00000000  000200c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003c39  00000000  00000000  0004441c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000c3f5  00000000  00000000  00048055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e40  00000000  00000000  00054450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d78  00000000  00000000  00055290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002faa3  00000000  00000000  00056008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019288  00000000  00000000  00085aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010fd2a  00000000  00000000  0009ed33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001aea5d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002fcc  00000000  00000000  001aeab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         0000006c  00000000  00000000  001b1a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000e3  00000000  00000000  001b1ae8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000098 	.word	0x20000098
 800021c:	00000000 	.word	0x00000000
 8000220:	080058a0 	.word	0x080058a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000009c 	.word	0x2000009c
 800023c:	080058a0 	.word	0x080058a0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80002e0:	b508      	push	{r3, lr}
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80002e2:	f000 feb9 	bl	8001058 <AUDIO_IO_Write>
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
}
 80002e6:	2000      	movs	r0, #0
 80002e8:	bd08      	pop	{r3, pc}
	...

080002ec <wm8994_SetMute>:
{
 80002ec:	b538      	push	{r3, r4, r5, lr}
 80002ee:	4603      	mov	r3, r0
  if (outputEnabled != 0)
 80002f0:	4a13      	ldr	r2, [pc, #76]	; (8000340 <wm8994_SetMute+0x54>)
 80002f2:	6810      	ldr	r0, [r2, #0]
 80002f4:	b180      	cbz	r0, 8000318 <wm8994_SetMute+0x2c>
    if(Cmd == AUDIO_MUTE_ON)
 80002f6:	2901      	cmp	r1, #1
 80002f8:	d00f      	beq.n	800031a <wm8994_SetMute+0x2e>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80002fa:	b2dd      	uxtb	r5, r3
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000302:	4628      	mov	r0, r5
 8000304:	f7ff ffec 	bl	80002e0 <CODEC_IO_Write>
 8000308:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 800030a:	2200      	movs	r2, #0
 800030c:	f240 4122 	movw	r1, #1058	; 0x422
 8000310:	4628      	mov	r0, r5
 8000312:	f7ff ffe5 	bl	80002e0 <CODEC_IO_Write>
 8000316:	4420      	add	r0, r4
}
 8000318:	bd38      	pop	{r3, r4, r5, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800031a:	b2dd      	uxtb	r5, r3
 800031c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000320:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000324:	4628      	mov	r0, r5
 8000326:	f7ff ffdb 	bl	80002e0 <CODEC_IO_Write>
 800032a:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800032c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000330:	f240 4122 	movw	r1, #1058	; 0x422
 8000334:	4628      	mov	r0, r5
 8000336:	f7ff ffd3 	bl	80002e0 <CODEC_IO_Write>
 800033a:	4420      	add	r0, r4
 800033c:	e7ec      	b.n	8000318 <wm8994_SetMute+0x2c>
 800033e:	bf00      	nop
 8000340:	200000b4 	.word	0x200000b4

08000344 <wm8994_Play>:
{
 8000344:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000346:	2100      	movs	r1, #0
 8000348:	f7ff ffd0 	bl	80002ec <wm8994_SetMute>
}
 800034c:	bd08      	pop	{r3, pc}

0800034e <wm8994_Resume>:
{
 800034e:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000350:	2100      	movs	r1, #0
 8000352:	f7ff ffcb 	bl	80002ec <wm8994_SetMute>
}
 8000356:	bd08      	pop	{r3, pc}

08000358 <wm8994_Pause>:
{  
 8000358:	b538      	push	{r3, r4, r5, lr}
 800035a:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800035c:	2101      	movs	r1, #1
 800035e:	f7ff ffc5 	bl	80002ec <wm8994_SetMute>
 8000362:	4604      	mov	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8000364:	2201      	movs	r2, #1
 8000366:	2102      	movs	r1, #2
 8000368:	b2e8      	uxtb	r0, r5
 800036a:	f7ff ffb9 	bl	80002e0 <CODEC_IO_Write>
}
 800036e:	4420      	add	r0, r4
 8000370:	bd38      	pop	{r3, r4, r5, pc}
	...

08000374 <wm8994_Stop>:
{
 8000374:	b570      	push	{r4, r5, r6, lr}
  if (outputEnabled != 0)
 8000376:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <wm8994_Stop+0x78>)
 8000378:	681c      	ldr	r4, [r3, #0]
 800037a:	b90c      	cbnz	r4, 8000380 <wm8994_Stop+0xc>
}
 800037c:	4620      	mov	r0, r4
 800037e:	bd70      	pop	{r4, r5, r6, pc}
 8000380:	4605      	mov	r5, r0
 8000382:	460e      	mov	r6, r1
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000384:	2101      	movs	r1, #1
 8000386:	f7ff ffb1 	bl	80002ec <wm8994_SetMute>
 800038a:	4604      	mov	r4, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 800038c:	2e02      	cmp	r6, #2
 800038e:	d0f5      	beq.n	800037c <wm8994_Stop+0x8>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8000390:	b2ed      	uxtb	r5, r5
 8000392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000396:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800039a:	4628      	mov	r0, r5
 800039c:	f7ff ffa0 	bl	80002e0 <CODEC_IO_Write>
 80003a0:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80003a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a6:	f240 4122 	movw	r1, #1058	; 0x422
 80003aa:	4628      	mov	r0, r5
 80003ac:	f7ff ff98 	bl	80002e0 <CODEC_IO_Write>
 80003b0:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80003b2:	2200      	movs	r2, #0
 80003b4:	212d      	movs	r1, #45	; 0x2d
 80003b6:	4628      	mov	r0, r5
 80003b8:	f7ff ff92 	bl	80002e0 <CODEC_IO_Write>
 80003bc:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 80003be:	2200      	movs	r2, #0
 80003c0:	212e      	movs	r1, #46	; 0x2e
 80003c2:	4628      	mov	r0, r5
 80003c4:	f7ff ff8c 	bl	80002e0 <CODEC_IO_Write>
 80003c8:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2105      	movs	r1, #5
 80003ce:	4628      	mov	r0, r5
 80003d0:	f7ff ff86 	bl	80002e0 <CODEC_IO_Write>
 80003d4:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80003d6:	2200      	movs	r2, #0
 80003d8:	4611      	mov	r1, r2
 80003da:	4628      	mov	r0, r5
 80003dc:	f7ff ff80 	bl	80002e0 <CODEC_IO_Write>
 80003e0:	4404      	add	r4, r0
      outputEnabled = 0;
 80003e2:	4b02      	ldr	r3, [pc, #8]	; (80003ec <wm8994_Stop+0x78>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
  return counter;
 80003e8:	e7c8      	b.n	800037c <wm8994_Stop+0x8>
 80003ea:	bf00      	nop
 80003ec:	200000b4 	.word	0x200000b4

080003f0 <wm8994_SetVolume>:
{
 80003f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003f4:	4606      	mov	r6, r0
 80003f6:	460c      	mov	r4, r1
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80003f8:	2964      	cmp	r1, #100	; 0x64
 80003fa:	d809      	bhi.n	8000410 <wm8994_SetVolume+0x20>
 80003fc:	ebc1 1381 	rsb	r3, r1, r1, lsl #6
 8000400:	4a46      	ldr	r2, [pc, #280]	; (800051c <wm8994_SetVolume+0x12c>)
 8000402:	fb82 1203 	smull	r1, r2, r2, r3
 8000406:	17df      	asrs	r7, r3, #31
 8000408:	ebc7 1762 	rsb	r7, r7, r2, asr #5
 800040c:	b2ff      	uxtb	r7, r7
 800040e:	e000      	b.n	8000412 <wm8994_SetVolume+0x22>
 8000410:	2764      	movs	r7, #100	; 0x64
  if (outputEnabled != 0)
 8000412:	4b43      	ldr	r3, [pc, #268]	; (8000520 <wm8994_SetVolume+0x130>)
 8000414:	681d      	ldr	r5, [r3, #0]
 8000416:	b13d      	cbz	r5, 8000428 <wm8994_SetVolume+0x38>
    if(convertedvol > 0x3E)
 8000418:	2f3e      	cmp	r7, #62	; 0x3e
 800041a:	d816      	bhi.n	800044a <wm8994_SetVolume+0x5a>
    else if (Volume == 0)
 800041c:	bbc4      	cbnz	r4, 8000490 <wm8994_SetVolume+0xa0>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800041e:	2101      	movs	r1, #1
 8000420:	4630      	mov	r0, r6
 8000422:	f7ff ff63 	bl	80002ec <wm8994_SetMute>
 8000426:	4605      	mov	r5, r0
  if (inputEnabled != 0)
 8000428:	4b3d      	ldr	r3, [pc, #244]	; (8000520 <wm8994_SetVolume+0x130>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d071      	beq.n	8000514 <wm8994_SetVolume+0x124>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8000430:	2c63      	cmp	r4, #99	; 0x63
 8000432:	d84f      	bhi.n	80004d4 <wm8994_SetVolume+0xe4>
 8000434:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8000438:	0124      	lsls	r4, r4, #4
 800043a:	4b38      	ldr	r3, [pc, #224]	; (800051c <wm8994_SetVolume+0x12c>)
 800043c:	fb83 2304 	smull	r2, r3, r3, r4
 8000440:	17e4      	asrs	r4, r4, #31
 8000442:	ebc4 1463 	rsb	r4, r4, r3, asr #5
 8000446:	b2e4      	uxtb	r4, r4
 8000448:	e045      	b.n	80004d6 <wm8994_SetVolume+0xe6>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800044a:	2100      	movs	r1, #0
 800044c:	4630      	mov	r0, r6
 800044e:	f7ff ff4d 	bl	80002ec <wm8994_SetMute>
 8000452:	4605      	mov	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8000454:	b2f7      	uxtb	r7, r6
 8000456:	f240 127f 	movw	r2, #383	; 0x17f
 800045a:	211c      	movs	r1, #28
 800045c:	4638      	mov	r0, r7
 800045e:	f7ff ff3f 	bl	80002e0 <CODEC_IO_Write>
 8000462:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8000464:	f240 127f 	movw	r2, #383	; 0x17f
 8000468:	211d      	movs	r1, #29
 800046a:	4638      	mov	r0, r7
 800046c:	f7ff ff38 	bl	80002e0 <CODEC_IO_Write>
 8000470:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8000472:	f240 127f 	movw	r2, #383	; 0x17f
 8000476:	2126      	movs	r1, #38	; 0x26
 8000478:	4638      	mov	r0, r7
 800047a:	f7ff ff31 	bl	80002e0 <CODEC_IO_Write>
 800047e:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8000480:	f240 127f 	movw	r2, #383	; 0x17f
 8000484:	2127      	movs	r1, #39	; 0x27
 8000486:	4638      	mov	r0, r7
 8000488:	f7ff ff2a 	bl	80002e0 <CODEC_IO_Write>
 800048c:	4405      	add	r5, r0
 800048e:	e7cb      	b.n	8000428 <wm8994_SetVolume+0x38>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000490:	2100      	movs	r1, #0
 8000492:	4630      	mov	r0, r6
 8000494:	f7ff ff2a 	bl	80002ec <wm8994_SetMute>
 8000498:	4605      	mov	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800049a:	fa5f f886 	uxtb.w	r8, r6
 800049e:	f447 77a0 	orr.w	r7, r7, #320	; 0x140
 80004a2:	463a      	mov	r2, r7
 80004a4:	211c      	movs	r1, #28
 80004a6:	4640      	mov	r0, r8
 80004a8:	f7ff ff1a 	bl	80002e0 <CODEC_IO_Write>
 80004ac:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80004ae:	463a      	mov	r2, r7
 80004b0:	211d      	movs	r1, #29
 80004b2:	4640      	mov	r0, r8
 80004b4:	f7ff ff14 	bl	80002e0 <CODEC_IO_Write>
 80004b8:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 80004ba:	463a      	mov	r2, r7
 80004bc:	2126      	movs	r1, #38	; 0x26
 80004be:	4640      	mov	r0, r8
 80004c0:	f7ff ff0e 	bl	80002e0 <CODEC_IO_Write>
 80004c4:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80004c6:	463a      	mov	r2, r7
 80004c8:	2127      	movs	r1, #39	; 0x27
 80004ca:	4640      	mov	r0, r8
 80004cc:	f7ff ff08 	bl	80002e0 <CODEC_IO_Write>
 80004d0:	4405      	add	r5, r0
 80004d2:	e7a9      	b.n	8000428 <wm8994_SetVolume+0x38>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80004d4:	24ef      	movs	r4, #239	; 0xef
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80004d6:	b2f6      	uxtb	r6, r6
 80004d8:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80004dc:	4622      	mov	r2, r4
 80004de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e2:	4630      	mov	r0, r6
 80004e4:	f7ff fefc 	bl	80002e0 <CODEC_IO_Write>
 80004e8:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80004ea:	4622      	mov	r2, r4
 80004ec:	f240 4101 	movw	r1, #1025	; 0x401
 80004f0:	4630      	mov	r0, r6
 80004f2:	f7ff fef5 	bl	80002e0 <CODEC_IO_Write>
 80004f6:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80004f8:	4622      	mov	r2, r4
 80004fa:	f240 4104 	movw	r1, #1028	; 0x404
 80004fe:	4630      	mov	r0, r6
 8000500:	f7ff feee 	bl	80002e0 <CODEC_IO_Write>
 8000504:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8000506:	4622      	mov	r2, r4
 8000508:	f240 4105 	movw	r1, #1029	; 0x405
 800050c:	4630      	mov	r0, r6
 800050e:	f7ff fee7 	bl	80002e0 <CODEC_IO_Write>
 8000512:	4405      	add	r5, r0
}
 8000514:	4628      	mov	r0, r5
 8000516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800051a:	bf00      	nop
 800051c:	51eb851f 	.word	0x51eb851f
 8000520:	200000b4 	.word	0x200000b4

08000524 <wm8994_Init>:
{
 8000524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000528:	4680      	mov	r8, r0
 800052a:	4691      	mov	r9, r2
 800052c:	469a      	mov	sl, r3
  uint16_t output_device = OutputInputDevice & 0xFF;
 800052e:	b2cf      	uxtb	r7, r1
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8000530:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
  AUDIO_IO_Init();
 8000534:	f000 fd86 	bl	8001044 <AUDIO_IO_Init>
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8000538:	fa5f f488 	uxtb.w	r4, r8
 800053c:	2203      	movs	r2, #3
 800053e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000542:	4620      	mov	r0, r4
 8000544:	f7ff fecc 	bl	80002e0 <CODEC_IO_Write>
 8000548:	4606      	mov	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 800054a:	2200      	movs	r2, #0
 800054c:	f640 0117 	movw	r1, #2071	; 0x817
 8000550:	4620      	mov	r0, r4
 8000552:	f7ff fec5 	bl	80002e0 <CODEC_IO_Write>
 8000556:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800055e:	4620      	mov	r0, r4
 8000560:	f7ff febe 	bl	80002e0 <CODEC_IO_Write>
 8000564:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8000566:	226c      	movs	r2, #108	; 0x6c
 8000568:	2139      	movs	r1, #57	; 0x39
 800056a:	4620      	mov	r0, r4
 800056c:	f7ff feb8 	bl	80002e0 <CODEC_IO_Write>
 8000570:	4406      	add	r6, r0
  if (input_device > 0)
 8000572:	b3c5      	cbz	r5, 80005e6 <wm8994_Init+0xc2>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8000574:	2213      	movs	r2, #19
 8000576:	2101      	movs	r1, #1
 8000578:	4620      	mov	r0, r4
 800057a:	f7ff feb1 	bl	80002e0 <CODEC_IO_Write>
 800057e:	4406      	add	r6, r0
  AUDIO_IO_Delay(50);
 8000580:	2032      	movs	r0, #50	; 0x32
 8000582:	f000 fd9d 	bl	80010c0 <AUDIO_IO_Delay>
  if (output_device > 0)
 8000586:	2f00      	cmp	r7, #0
 8000588:	f000 80c7 	beq.w	800071a <wm8994_Init+0x1f6>
    outputEnabled = 1;
 800058c:	4be6      	ldr	r3, [pc, #920]	; (8000928 <wm8994_Init+0x404>)
 800058e:	2201      	movs	r2, #1
 8000590:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8000592:	2f02      	cmp	r7, #2
 8000594:	d052      	beq.n	800063c <wm8994_Init+0x118>
 8000596:	2f03      	cmp	r7, #3
 8000598:	d074      	beq.n	8000684 <wm8994_Init+0x160>
 800059a:	4297      	cmp	r7, r2
 800059c:	d02a      	beq.n	80005f4 <wm8994_Init+0xd0>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800059e:	f240 3203 	movw	r2, #771	; 0x303
 80005a2:	2105      	movs	r1, #5
 80005a4:	4620      	mov	r0, r4
 80005a6:	f7ff fe9b 	bl	80002e0 <CODEC_IO_Write>
 80005aa:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f240 6101 	movw	r1, #1537	; 0x601
 80005b2:	4620      	mov	r0, r4
 80005b4:	f7ff fe94 	bl	80002e0 <CODEC_IO_Write>
 80005b8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80005ba:	2201      	movs	r2, #1
 80005bc:	f240 6102 	movw	r1, #1538	; 0x602
 80005c0:	4620      	mov	r0, r4
 80005c2:	f7ff fe8d 	bl	80002e0 <CODEC_IO_Write>
 80005c6:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f240 6104 	movw	r1, #1540	; 0x604
 80005ce:	4620      	mov	r0, r4
 80005d0:	f7ff fe86 	bl	80002e0 <CODEC_IO_Write>
 80005d4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f240 6105 	movw	r1, #1541	; 0x605
 80005dc:	4620      	mov	r0, r4
 80005de:	f7ff fe7f 	bl	80002e0 <CODEC_IO_Write>
 80005e2:	4406      	add	r6, r0
      break;
 80005e4:	e09c      	b.n	8000720 <wm8994_Init+0x1fc>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80005e6:	2203      	movs	r2, #3
 80005e8:	2101      	movs	r1, #1
 80005ea:	4620      	mov	r0, r4
 80005ec:	f7ff fe78 	bl	80002e0 <CODEC_IO_Write>
 80005f0:	4406      	add	r6, r0
 80005f2:	e7c5      	b.n	8000580 <wm8994_Init+0x5c>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80005f4:	f640 420c 	movw	r2, #3084	; 0xc0c
 80005f8:	2105      	movs	r1, #5
 80005fa:	4620      	mov	r0, r4
 80005fc:	f7ff fe70 	bl	80002e0 <CODEC_IO_Write>
 8000600:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8000602:	2200      	movs	r2, #0
 8000604:	f240 6101 	movw	r1, #1537	; 0x601
 8000608:	4620      	mov	r0, r4
 800060a:	f7ff fe69 	bl	80002e0 <CODEC_IO_Write>
 800060e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8000610:	2200      	movs	r2, #0
 8000612:	f240 6102 	movw	r1, #1538	; 0x602
 8000616:	4620      	mov	r0, r4
 8000618:	f7ff fe62 	bl	80002e0 <CODEC_IO_Write>
 800061c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800061e:	2202      	movs	r2, #2
 8000620:	f240 6104 	movw	r1, #1540	; 0x604
 8000624:	4620      	mov	r0, r4
 8000626:	f7ff fe5b 	bl	80002e0 <CODEC_IO_Write>
 800062a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800062c:	2202      	movs	r2, #2
 800062e:	f240 6105 	movw	r1, #1541	; 0x605
 8000632:	4620      	mov	r0, r4
 8000634:	f7ff fe54 	bl	80002e0 <CODEC_IO_Write>
 8000638:	4406      	add	r6, r0
      break;
 800063a:	e071      	b.n	8000720 <wm8994_Init+0x1fc>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800063c:	f240 3203 	movw	r2, #771	; 0x303
 8000640:	2105      	movs	r1, #5
 8000642:	4620      	mov	r0, r4
 8000644:	f7ff fe4c 	bl	80002e0 <CODEC_IO_Write>
 8000648:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800064a:	2201      	movs	r2, #1
 800064c:	f240 6101 	movw	r1, #1537	; 0x601
 8000650:	4620      	mov	r0, r4
 8000652:	f7ff fe45 	bl	80002e0 <CODEC_IO_Write>
 8000656:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000658:	2201      	movs	r2, #1
 800065a:	f240 6102 	movw	r1, #1538	; 0x602
 800065e:	4620      	mov	r0, r4
 8000660:	f7ff fe3e 	bl	80002e0 <CODEC_IO_Write>
 8000664:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000666:	2200      	movs	r2, #0
 8000668:	f240 6104 	movw	r1, #1540	; 0x604
 800066c:	4620      	mov	r0, r4
 800066e:	f7ff fe37 	bl	80002e0 <CODEC_IO_Write>
 8000672:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000674:	2200      	movs	r2, #0
 8000676:	f240 6105 	movw	r1, #1541	; 0x605
 800067a:	4620      	mov	r0, r4
 800067c:	f7ff fe30 	bl	80002e0 <CODEC_IO_Write>
 8000680:	4406      	add	r6, r0
      break;
 8000682:	e04d      	b.n	8000720 <wm8994_Init+0x1fc>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000684:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000688:	d023      	beq.n	80006d2 <wm8994_Init+0x1ae>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800068a:	f640 720f 	movw	r2, #3855	; 0xf0f
 800068e:	2105      	movs	r1, #5
 8000690:	4620      	mov	r0, r4
 8000692:	f7ff fe25 	bl	80002e0 <CODEC_IO_Write>
 8000696:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000698:	2201      	movs	r2, #1
 800069a:	f240 6101 	movw	r1, #1537	; 0x601
 800069e:	4620      	mov	r0, r4
 80006a0:	f7ff fe1e 	bl	80002e0 <CODEC_IO_Write>
 80006a4:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80006a6:	2201      	movs	r2, #1
 80006a8:	f240 6102 	movw	r1, #1538	; 0x602
 80006ac:	4620      	mov	r0, r4
 80006ae:	f7ff fe17 	bl	80002e0 <CODEC_IO_Write>
 80006b2:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80006b4:	2202      	movs	r2, #2
 80006b6:	f240 6104 	movw	r1, #1540	; 0x604
 80006ba:	4620      	mov	r0, r4
 80006bc:	f7ff fe10 	bl	80002e0 <CODEC_IO_Write>
 80006c0:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80006c2:	2202      	movs	r2, #2
 80006c4:	f240 6105 	movw	r1, #1541	; 0x605
 80006c8:	4620      	mov	r0, r4
 80006ca:	f7ff fe09 	bl	80002e0 <CODEC_IO_Write>
 80006ce:	4406      	add	r6, r0
 80006d0:	e026      	b.n	8000720 <wm8994_Init+0x1fc>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80006d2:	f640 720f 	movw	r2, #3855	; 0xf0f
 80006d6:	2105      	movs	r1, #5
 80006d8:	4620      	mov	r0, r4
 80006da:	f7ff fe01 	bl	80002e0 <CODEC_IO_Write>
 80006de:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80006e0:	2203      	movs	r2, #3
 80006e2:	f240 6101 	movw	r1, #1537	; 0x601
 80006e6:	4620      	mov	r0, r4
 80006e8:	f7ff fdfa 	bl	80002e0 <CODEC_IO_Write>
 80006ec:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80006ee:	2203      	movs	r2, #3
 80006f0:	f240 6102 	movw	r1, #1538	; 0x602
 80006f4:	4620      	mov	r0, r4
 80006f6:	f7ff fdf3 	bl	80002e0 <CODEC_IO_Write>
 80006fa:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80006fc:	2203      	movs	r2, #3
 80006fe:	f240 6104 	movw	r1, #1540	; 0x604
 8000702:	4620      	mov	r0, r4
 8000704:	f7ff fdec 	bl	80002e0 <CODEC_IO_Write>
 8000708:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 800070a:	2203      	movs	r2, #3
 800070c:	f240 6105 	movw	r1, #1541	; 0x605
 8000710:	4620      	mov	r0, r4
 8000712:	f7ff fde5 	bl	80002e0 <CODEC_IO_Write>
 8000716:	4406      	add	r6, r0
 8000718:	e002      	b.n	8000720 <wm8994_Init+0x1fc>
    outputEnabled = 0;
 800071a:	4b83      	ldr	r3, [pc, #524]	; (8000928 <wm8994_Init+0x404>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
  if (input_device > 0)
 8000720:	2d00      	cmp	r5, #0
 8000722:	f000 80e8 	beq.w	80008f6 <wm8994_Init+0x3d2>
    inputEnabled = 1;
 8000726:	4b80      	ldr	r3, [pc, #512]	; (8000928 <wm8994_Init+0x404>)
 8000728:	2201      	movs	r2, #1
 800072a:	605a      	str	r2, [r3, #4]
    switch (input_device)
 800072c:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8000730:	d077      	beq.n	8000822 <wm8994_Init+0x2fe>
 8000732:	d832      	bhi.n	800079a <wm8994_Init+0x276>
 8000734:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000738:	f000 80b0 	beq.w	800089c <wm8994_Init+0x378>
 800073c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8000740:	f040 80d7 	bne.w	80008f2 <wm8994_Init+0x3ce>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8000744:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8000748:	2104      	movs	r1, #4
 800074a:	4620      	mov	r0, r4
 800074c:	f7ff fdc8 	bl	80002e0 <CODEC_IO_Write>
 8000750:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8000752:	22db      	movs	r2, #219	; 0xdb
 8000754:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000758:	4620      	mov	r0, r4
 800075a:	f7ff fdc1 	bl	80002e0 <CODEC_IO_Write>
 800075e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8000760:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000764:	2102      	movs	r1, #2
 8000766:	4620      	mov	r0, r4
 8000768:	f7ff fdba 	bl	80002e0 <CODEC_IO_Write>
 800076c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800076e:	2202      	movs	r2, #2
 8000770:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000774:	4620      	mov	r0, r4
 8000776:	f7ff fdb3 	bl	80002e0 <CODEC_IO_Write>
 800077a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800077c:	2202      	movs	r2, #2
 800077e:	f240 6109 	movw	r1, #1545	; 0x609
 8000782:	4620      	mov	r0, r4
 8000784:	f7ff fdac 	bl	80002e0 <CODEC_IO_Write>
 8000788:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800078a:	220e      	movs	r2, #14
 800078c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000790:	4620      	mov	r0, r4
 8000792:	f7ff fda5 	bl	80002e0 <CODEC_IO_Write>
 8000796:	4406      	add	r6, r0
      break;
 8000798:	e0b0      	b.n	80008fc <wm8994_Init+0x3d8>
    switch (input_device)
 800079a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800079e:	f040 80a8 	bne.w	80008f2 <wm8994_Init+0x3ce>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80007a2:	f640 723c 	movw	r2, #3900	; 0xf3c
 80007a6:	2104      	movs	r1, #4
 80007a8:	4620      	mov	r0, r4
 80007aa:	f7ff fd99 	bl	80002e0 <CODEC_IO_Write>
 80007ae:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80007b0:	22db      	movs	r2, #219	; 0xdb
 80007b2:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80007b6:	4620      	mov	r0, r4
 80007b8:	f7ff fd92 	bl	80002e0 <CODEC_IO_Write>
 80007bc:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80007be:	22db      	movs	r2, #219	; 0xdb
 80007c0:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80007c4:	4620      	mov	r0, r4
 80007c6:	f7ff fd8b 	bl	80002e0 <CODEC_IO_Write>
 80007ca:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80007cc:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80007d0:	2102      	movs	r1, #2
 80007d2:	4620      	mov	r0, r4
 80007d4:	f7ff fd84 	bl	80002e0 <CODEC_IO_Write>
 80007d8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80007da:	2202      	movs	r2, #2
 80007dc:	f240 6106 	movw	r1, #1542	; 0x606
 80007e0:	4620      	mov	r0, r4
 80007e2:	f7ff fd7d 	bl	80002e0 <CODEC_IO_Write>
 80007e6:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80007e8:	2202      	movs	r2, #2
 80007ea:	f240 6107 	movw	r1, #1543	; 0x607
 80007ee:	4620      	mov	r0, r4
 80007f0:	f7ff fd76 	bl	80002e0 <CODEC_IO_Write>
 80007f4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80007f6:	2202      	movs	r2, #2
 80007f8:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80007fc:	4620      	mov	r0, r4
 80007fe:	f7ff fd6f 	bl	80002e0 <CODEC_IO_Write>
 8000802:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8000804:	2202      	movs	r2, #2
 8000806:	f240 6109 	movw	r1, #1545	; 0x609
 800080a:	4620      	mov	r0, r4
 800080c:	f7ff fd68 	bl	80002e0 <CODEC_IO_Write>
 8000810:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8000812:	220d      	movs	r2, #13
 8000814:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000818:	4620      	mov	r0, r4
 800081a:	f7ff fd61 	bl	80002e0 <CODEC_IO_Write>
 800081e:	4406      	add	r6, r0
      break;    
 8000820:	e06c      	b.n	80008fc <wm8994_Init+0x3d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8000822:	2211      	movs	r2, #17
 8000824:	2128      	movs	r1, #40	; 0x28
 8000826:	4620      	mov	r0, r4
 8000828:	f7ff fd5a 	bl	80002e0 <CODEC_IO_Write>
 800082c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 800082e:	2220      	movs	r2, #32
 8000830:	2129      	movs	r1, #41	; 0x29
 8000832:	4620      	mov	r0, r4
 8000834:	f7ff fd54 	bl	80002e0 <CODEC_IO_Write>
 8000838:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 800083a:	2220      	movs	r2, #32
 800083c:	212a      	movs	r1, #42	; 0x2a
 800083e:	4620      	mov	r0, r4
 8000840:	f7ff fd4e 	bl	80002e0 <CODEC_IO_Write>
 8000844:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8000846:	f240 3203 	movw	r2, #771	; 0x303
 800084a:	2104      	movs	r1, #4
 800084c:	4620      	mov	r0, r4
 800084e:	f7ff fd47 	bl	80002e0 <CODEC_IO_Write>
 8000852:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8000854:	22db      	movs	r2, #219	; 0xdb
 8000856:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800085a:	4620      	mov	r0, r4
 800085c:	f7ff fd40 	bl	80002e0 <CODEC_IO_Write>
 8000860:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8000862:	f246 3250 	movw	r2, #25424	; 0x6350
 8000866:	2102      	movs	r1, #2
 8000868:	4620      	mov	r0, r4
 800086a:	f7ff fd39 	bl	80002e0 <CODEC_IO_Write>
 800086e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8000870:	2202      	movs	r2, #2
 8000872:	f240 6106 	movw	r1, #1542	; 0x606
 8000876:	4620      	mov	r0, r4
 8000878:	f7ff fd32 	bl	80002e0 <CODEC_IO_Write>
 800087c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800087e:	2202      	movs	r2, #2
 8000880:	f240 6107 	movw	r1, #1543	; 0x607
 8000884:	4620      	mov	r0, r4
 8000886:	f7ff fd2b 	bl	80002e0 <CODEC_IO_Write>
 800088a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800088c:	220d      	movs	r2, #13
 800088e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000892:	4620      	mov	r0, r4
 8000894:	f7ff fd24 	bl	80002e0 <CODEC_IO_Write>
 8000898:	4406      	add	r6, r0
      break;
 800089a:	e02f      	b.n	80008fc <wm8994_Init+0x3d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 800089c:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80008a0:	2104      	movs	r1, #4
 80008a2:	4620      	mov	r0, r4
 80008a4:	f7ff fd1c 	bl	80002e0 <CODEC_IO_Write>
 80008a8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80008aa:	22db      	movs	r2, #219	; 0xdb
 80008ac:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80008b0:	4620      	mov	r0, r4
 80008b2:	f7ff fd15 	bl	80002e0 <CODEC_IO_Write>
 80008b6:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80008b8:	f246 3250 	movw	r2, #25424	; 0x6350
 80008bc:	2102      	movs	r1, #2
 80008be:	4620      	mov	r0, r4
 80008c0:	f7ff fd0e 	bl	80002e0 <CODEC_IO_Write>
 80008c4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80008c6:	2202      	movs	r2, #2
 80008c8:	f240 6106 	movw	r1, #1542	; 0x606
 80008cc:	4620      	mov	r0, r4
 80008ce:	f7ff fd07 	bl	80002e0 <CODEC_IO_Write>
 80008d2:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80008d4:	2202      	movs	r2, #2
 80008d6:	f240 6107 	movw	r1, #1543	; 0x607
 80008da:	4620      	mov	r0, r4
 80008dc:	f7ff fd00 	bl	80002e0 <CODEC_IO_Write>
 80008e0:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80008e2:	220d      	movs	r2, #13
 80008e4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80008e8:	4620      	mov	r0, r4
 80008ea:	f7ff fcf9 	bl	80002e0 <CODEC_IO_Write>
 80008ee:	4406      	add	r6, r0
      break; 
 80008f0:	e004      	b.n	80008fc <wm8994_Init+0x3d8>
      counter++;
 80008f2:	3601      	adds	r6, #1
      break;
 80008f4:	e002      	b.n	80008fc <wm8994_Init+0x3d8>
    inputEnabled = 0;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <wm8994_Init+0x404>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
  switch (AudioFreq)
 80008fc:	f5ba 4ffa 	cmp.w	sl, #32000	; 0x7d00
 8000900:	f000 8089 	beq.w	8000a16 <wm8994_Init+0x4f2>
 8000904:	d821      	bhi.n	800094a <wm8994_Init+0x426>
 8000906:	f5ba 5f7a 	cmp.w	sl, #16000	; 0x3e80
 800090a:	d07c      	beq.n	8000a06 <wm8994_Init+0x4e2>
 800090c:	d90e      	bls.n	800092c <wm8994_Init+0x408>
 800090e:	f245 6322 	movw	r3, #22050	; 0x5622
 8000912:	459a      	cmp	sl, r3
 8000914:	f040 808f 	bne.w	8000a36 <wm8994_Init+0x512>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8000918:	2243      	movs	r2, #67	; 0x43
 800091a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800091e:	4620      	mov	r0, r4
 8000920:	f7ff fcde 	bl	80002e0 <CODEC_IO_Write>
 8000924:	4406      	add	r6, r0
    break;
 8000926:	e032      	b.n	800098e <wm8994_Init+0x46a>
 8000928:	200000b4 	.word	0x200000b4
  switch (AudioFreq)
 800092c:	f5ba 5ffa 	cmp.w	sl, #8000	; 0x1f40
 8000930:	d026      	beq.n	8000980 <wm8994_Init+0x45c>
 8000932:	f642 3311 	movw	r3, #11025	; 0x2b11
 8000936:	459a      	cmp	sl, r3
 8000938:	d17d      	bne.n	8000a36 <wm8994_Init+0x512>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800093a:	2213      	movs	r2, #19
 800093c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000940:	4620      	mov	r0, r4
 8000942:	f7ff fccd 	bl	80002e0 <CODEC_IO_Write>
 8000946:	4406      	add	r6, r0
    break;
 8000948:	e021      	b.n	800098e <wm8994_Init+0x46a>
  switch (AudioFreq)
 800094a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800094e:	459a      	cmp	sl, r3
 8000950:	d069      	beq.n	8000a26 <wm8994_Init+0x502>
 8000952:	4bb5      	ldr	r3, [pc, #724]	; (8000c28 <wm8994_Init+0x704>)
 8000954:	459a      	cmp	sl, r3
 8000956:	d107      	bne.n	8000968 <wm8994_Init+0x444>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8000958:	22a3      	movs	r2, #163	; 0xa3
 800095a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800095e:	4620      	mov	r0, r4
 8000960:	f7ff fcbe 	bl	80002e0 <CODEC_IO_Write>
 8000964:	4406      	add	r6, r0
    break;
 8000966:	e012      	b.n	800098e <wm8994_Init+0x46a>
  switch (AudioFreq)
 8000968:	f64a 4344 	movw	r3, #44100	; 0xac44
 800096c:	459a      	cmp	sl, r3
 800096e:	d162      	bne.n	8000a36 <wm8994_Init+0x512>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8000970:	2273      	movs	r2, #115	; 0x73
 8000972:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000976:	4620      	mov	r0, r4
 8000978:	f7ff fcb2 	bl	80002e0 <CODEC_IO_Write>
 800097c:	4406      	add	r6, r0
    break; 
 800097e:	e006      	b.n	800098e <wm8994_Init+0x46a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8000980:	2203      	movs	r2, #3
 8000982:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000986:	4620      	mov	r0, r4
 8000988:	f7ff fcaa 	bl	80002e0 <CODEC_IO_Write>
 800098c:	4406      	add	r6, r0
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800098e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000992:	d058      	beq.n	8000a46 <wm8994_Init+0x522>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8000994:	f244 0210 	movw	r2, #16400	; 0x4010
 8000998:	f44f 7140 	mov.w	r1, #768	; 0x300
 800099c:	4620      	mov	r0, r4
 800099e:	f7ff fc9f 	bl	80002e0 <CODEC_IO_Write>
 80009a2:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f240 3102 	movw	r1, #770	; 0x302
 80009aa:	4620      	mov	r0, r4
 80009ac:	f7ff fc98 	bl	80002e0 <CODEC_IO_Write>
 80009b0:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80009b2:	220a      	movs	r2, #10
 80009b4:	f44f 7102 	mov.w	r1, #520	; 0x208
 80009b8:	4620      	mov	r0, r4
 80009ba:	f7ff fc91 	bl	80002e0 <CODEC_IO_Write>
 80009be:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c6:	4620      	mov	r0, r4
 80009c8:	f7ff fc8a 	bl	80002e0 <CODEC_IO_Write>
 80009cc:	4406      	add	r6, r0
  if (output_device > 0)  /* Audio output selected */
 80009ce:	2f00      	cmp	r7, #0
 80009d0:	d142      	bne.n	8000a58 <wm8994_Init+0x534>
  if (input_device > 0) /* Audio input selected */
 80009d2:	b1ad      	cbz	r5, 8000a00 <wm8994_Init+0x4dc>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80009d4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80009d8:	bf18      	it	ne
 80009da:	f5b5 7f80 	cmpne.w	r5, #256	; 0x100
 80009de:	f000 80d7 	beq.w	8000b90 <wm8994_Init+0x66c>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80009e2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80009e6:	f000 80ea 	beq.w	8000bbe <wm8994_Init+0x69a>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80009ea:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80009ee:	bf18      	it	ne
 80009f0:	f5b5 7f40 	cmpne.w	r5, #768	; 0x300
 80009f4:	f000 8102 	beq.w	8000bfc <wm8994_Init+0x6d8>
    wm8994_SetVolume(DeviceAddr, Volume);
 80009f8:	4649      	mov	r1, r9
 80009fa:	4640      	mov	r0, r8
 80009fc:	f7ff fcf8 	bl	80003f0 <wm8994_SetVolume>
}
 8000a00:	4630      	mov	r0, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8000a06:	2233      	movs	r2, #51	; 0x33
 8000a08:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a0c:	4620      	mov	r0, r4
 8000a0e:	f7ff fc67 	bl	80002e0 <CODEC_IO_Write>
 8000a12:	4406      	add	r6, r0
    break;
 8000a14:	e7bb      	b.n	800098e <wm8994_Init+0x46a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8000a16:	2263      	movs	r2, #99	; 0x63
 8000a18:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	f7ff fc5f 	bl	80002e0 <CODEC_IO_Write>
 8000a22:	4406      	add	r6, r0
    break;
 8000a24:	e7b3      	b.n	800098e <wm8994_Init+0x46a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000a26:	2283      	movs	r2, #131	; 0x83
 8000a28:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a2c:	4620      	mov	r0, r4
 8000a2e:	f7ff fc57 	bl	80002e0 <CODEC_IO_Write>
 8000a32:	4406      	add	r6, r0
    break;
 8000a34:	e7ab      	b.n	800098e <wm8994_Init+0x46a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000a36:	2283      	movs	r2, #131	; 0x83
 8000a38:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	f7ff fc4f 	bl	80002e0 <CODEC_IO_Write>
 8000a42:	4406      	add	r6, r0
    break; 
 8000a44:	e7a3      	b.n	800098e <wm8994_Init+0x46a>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8000a46:	f244 0218 	movw	r2, #16408	; 0x4018
 8000a4a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000a4e:	4620      	mov	r0, r4
 8000a50:	f7ff fc46 	bl	80002e0 <CODEC_IO_Write>
 8000a54:	4406      	add	r6, r0
 8000a56:	e7a5      	b.n	80009a4 <wm8994_Init+0x480>
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8000a58:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a5c:	2103      	movs	r1, #3
 8000a5e:	4620      	mov	r0, r4
 8000a60:	f7ff fc3e 	bl	80002e0 <CODEC_IO_Write>
 8000a64:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2122      	movs	r1, #34	; 0x22
 8000a6a:	4620      	mov	r0, r4
 8000a6c:	f7ff fc38 	bl	80002e0 <CODEC_IO_Write>
 8000a70:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2123      	movs	r1, #35	; 0x23
 8000a76:	4620      	mov	r0, r4
 8000a78:	f7ff fc32 	bl	80002e0 <CODEC_IO_Write>
 8000a7c:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8000a7e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a82:	2136      	movs	r1, #54	; 0x36
 8000a84:	4620      	mov	r0, r4
 8000a86:	f7ff fc2b 	bl	80002e0 <CODEC_IO_Write>
 8000a8a:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8000a8c:	f243 0203 	movw	r2, #12291	; 0x3003
 8000a90:	2101      	movs	r1, #1
 8000a92:	4620      	mov	r0, r4
 8000a94:	f7ff fc24 	bl	80002e0 <CODEC_IO_Write>
 8000a98:	4406      	add	r6, r0
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000a9a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000a9e:	d06f      	beq.n	8000b80 <wm8994_Init+0x65c>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8000aa0:	2205      	movs	r2, #5
 8000aa2:	2151      	movs	r1, #81	; 0x51
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f7ff fc1b 	bl	80002e0 <CODEC_IO_Write>
 8000aaa:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000aac:	f243 3203 	movw	r2, #13059	; 0x3303
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	f7ff fc14 	bl	80002e0 <CODEC_IO_Write>
 8000ab8:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8000aba:	2222      	movs	r2, #34	; 0x22
 8000abc:	2160      	movs	r1, #96	; 0x60
 8000abe:	4620      	mov	r0, r4
 8000ac0:	f7ff fc0e 	bl	80002e0 <CODEC_IO_Write>
 8000ac4:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8000ac6:	f649 7225 	movw	r2, #40741	; 0x9f25
 8000aca:	214c      	movs	r1, #76	; 0x4c
 8000acc:	4620      	mov	r0, r4
 8000ace:	f7ff fc07 	bl	80002e0 <CODEC_IO_Write>
 8000ad2:	4406      	add	r6, r0
    AUDIO_IO_Delay(15);
 8000ad4:	200f      	movs	r0, #15
 8000ad6:	f000 faf3 	bl	80010c0 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8000ada:	2201      	movs	r2, #1
 8000adc:	212d      	movs	r1, #45	; 0x2d
 8000ade:	4620      	mov	r0, r4
 8000ae0:	f7ff fbfe 	bl	80002e0 <CODEC_IO_Write>
 8000ae4:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	212e      	movs	r1, #46	; 0x2e
 8000aea:	4620      	mov	r0, r4
 8000aec:	f7ff fbf8 	bl	80002e0 <CODEC_IO_Write>
 8000af0:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8000af2:	f44f 724c 	mov.w	r2, #816	; 0x330
 8000af6:	2103      	movs	r1, #3
 8000af8:	4620      	mov	r0, r4
 8000afa:	f7ff fbf1 	bl	80002e0 <CODEC_IO_Write>
 8000afe:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8000b00:	2233      	movs	r2, #51	; 0x33
 8000b02:	2154      	movs	r1, #84	; 0x54
 8000b04:	4620      	mov	r0, r4
 8000b06:	f7ff fbeb 	bl	80002e0 <CODEC_IO_Write>
 8000b0a:	4406      	add	r6, r0
    AUDIO_IO_Delay(250);
 8000b0c:	20fa      	movs	r0, #250	; 0xfa
 8000b0e:	f000 fad7 	bl	80010c0 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8000b12:	22ee      	movs	r2, #238	; 0xee
 8000b14:	2160      	movs	r1, #96	; 0x60
 8000b16:	4620      	mov	r0, r4
 8000b18:	f7ff fbe2 	bl	80002e0 <CODEC_IO_Write>
 8000b1c:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8000b1e:	22c0      	movs	r2, #192	; 0xc0
 8000b20:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8000b24:	4620      	mov	r0, r4
 8000b26:	f7ff fbdb 	bl	80002e0 <CODEC_IO_Write>
 8000b2a:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8000b2c:	22c0      	movs	r2, #192	; 0xc0
 8000b2e:	f240 6111 	movw	r1, #1553	; 0x611
 8000b32:	4620      	mov	r0, r4
 8000b34:	f7ff fbd4 	bl	80002e0 <CODEC_IO_Write>
 8000b38:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000b40:	4620      	mov	r0, r4
 8000b42:	f7ff fbcd 	bl	80002e0 <CODEC_IO_Write>
 8000b46:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8000b48:	22c0      	movs	r2, #192	; 0xc0
 8000b4a:	f240 6112 	movw	r1, #1554	; 0x612
 8000b4e:	4620      	mov	r0, r4
 8000b50:	f7ff fbc6 	bl	80002e0 <CODEC_IO_Write>
 8000b54:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8000b56:	22c0      	movs	r2, #192	; 0xc0
 8000b58:	f240 6113 	movw	r1, #1555	; 0x613
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	f7ff fbbf 	bl	80002e0 <CODEC_IO_Write>
 8000b62:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f240 4122 	movw	r1, #1058	; 0x422
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	f7ff fbb8 	bl	80002e0 <CODEC_IO_Write>
 8000b70:	4406      	add	r6, r0
    wm8994_SetVolume(DeviceAddr, Volume);
 8000b72:	4649      	mov	r1, r9
 8000b74:	4640      	mov	r0, r8
 8000b76:	f7ff fc3b 	bl	80003f0 <wm8994_SetVolume>
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8000b7a:	f243 3703 	movw	r7, #13059	; 0x3303
 8000b7e:	e728      	b.n	80009d2 <wm8994_Init+0x4ae>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8000b80:	f240 2205 	movw	r2, #517	; 0x205
 8000b84:	2151      	movs	r1, #81	; 0x51
 8000b86:	4620      	mov	r0, r4
 8000b88:	f7ff fbaa 	bl	80002e0 <CODEC_IO_Write>
 8000b8c:	4406      	add	r6, r0
 8000b8e:	e78d      	b.n	8000aac <wm8994_Init+0x588>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000b90:	f047 0213 	orr.w	r2, r7, #19
 8000b94:	2101      	movs	r1, #1
 8000b96:	4620      	mov	r0, r4
 8000b98:	f7ff fba2 	bl	80002e0 <CODEC_IO_Write>
 8000b9c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000ba4:	4620      	mov	r0, r4
 8000ba6:	f7ff fb9b 	bl	80002e0 <CODEC_IO_Write>
 8000baa:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8000bac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000bb0:	f240 4111 	movw	r1, #1041	; 0x411
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f7ff fb93 	bl	80002e0 <CODEC_IO_Write>
 8000bba:	4406      	add	r6, r0
 8000bbc:	e71c      	b.n	80009f8 <wm8994_Init+0x4d4>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000bbe:	f047 0213 	orr.w	r2, r7, #19
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f7ff fb8b 	bl	80002e0 <CODEC_IO_Write>
 8000bca:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8000bcc:	2202      	movs	r2, #2
 8000bce:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	f7ff fb84 	bl	80002e0 <CODEC_IO_Write>
 8000bd8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8000bda:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000bde:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000be2:	4620      	mov	r0, r4
 8000be4:	f7ff fb7c 	bl	80002e0 <CODEC_IO_Write>
 8000be8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8000bea:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000bee:	f240 4111 	movw	r1, #1041	; 0x411
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	f7ff fb74 	bl	80002e0 <CODEC_IO_Write>
 8000bf8:	4406      	add	r6, r0
 8000bfa:	e6fd      	b.n	80009f8 <wm8994_Init+0x4d4>
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8000bfc:	220b      	movs	r2, #11
 8000bfe:	2118      	movs	r1, #24
 8000c00:	4620      	mov	r0, r4
 8000c02:	f7ff fb6d 	bl	80002e0 <CODEC_IO_Write>
 8000c06:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8000c08:	220b      	movs	r2, #11
 8000c0a:	211a      	movs	r1, #26
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f7ff fb67 	bl	80002e0 <CODEC_IO_Write>
 8000c12:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8000c14:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000c18:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f7ff fb5f 	bl	80002e0 <CODEC_IO_Write>
 8000c22:	4406      	add	r6, r0
 8000c24:	e6e8      	b.n	80009f8 <wm8994_Init+0x4d4>
 8000c26:	bf00      	nop
 8000c28:	00017700 	.word	0x00017700

08000c2c <wm8994_SetOutputMode>:
{
 8000c2c:	b538      	push	{r3, r4, r5, lr}
  switch (Output) 
 8000c2e:	2902      	cmp	r1, #2
 8000c30:	d04d      	beq.n	8000cce <wm8994_SetOutputMode+0xa2>
 8000c32:	2903      	cmp	r1, #3
 8000c34:	d070      	beq.n	8000d18 <wm8994_SetOutputMode+0xec>
 8000c36:	2901      	cmp	r1, #1
 8000c38:	d024      	beq.n	8000c84 <wm8994_SetOutputMode+0x58>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000c3a:	b2c4      	uxtb	r4, r0
 8000c3c:	f240 3203 	movw	r2, #771	; 0x303
 8000c40:	2105      	movs	r1, #5
 8000c42:	4620      	mov	r0, r4
 8000c44:	f7ff fb4c 	bl	80002e0 <CODEC_IO_Write>
 8000c48:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f240 6101 	movw	r1, #1537	; 0x601
 8000c50:	4620      	mov	r0, r4
 8000c52:	f7ff fb45 	bl	80002e0 <CODEC_IO_Write>
 8000c56:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f240 6102 	movw	r1, #1538	; 0x602
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f7ff fb3e 	bl	80002e0 <CODEC_IO_Write>
 8000c64:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f240 6104 	movw	r1, #1540	; 0x604
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f7ff fb37 	bl	80002e0 <CODEC_IO_Write>
 8000c72:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f240 6105 	movw	r1, #1541	; 0x605
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	f7ff fb30 	bl	80002e0 <CODEC_IO_Write>
 8000c80:	4428      	add	r0, r5
  return counter;
 8000c82:	e023      	b.n	8000ccc <wm8994_SetOutputMode+0xa0>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8000c84:	b2c4      	uxtb	r4, r0
 8000c86:	f640 420c 	movw	r2, #3084	; 0xc0c
 8000c8a:	2105      	movs	r1, #5
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f7ff fb27 	bl	80002e0 <CODEC_IO_Write>
 8000c92:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f240 6101 	movw	r1, #1537	; 0x601
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f7ff fb20 	bl	80002e0 <CODEC_IO_Write>
 8000ca0:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f240 6102 	movw	r1, #1538	; 0x602
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f7ff fb19 	bl	80002e0 <CODEC_IO_Write>
 8000cae:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	f240 6104 	movw	r1, #1540	; 0x604
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	f7ff fb12 	bl	80002e0 <CODEC_IO_Write>
 8000cbc:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	f240 6105 	movw	r1, #1541	; 0x605
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f7ff fb0b 	bl	80002e0 <CODEC_IO_Write>
 8000cca:	4428      	add	r0, r5
}
 8000ccc:	bd38      	pop	{r3, r4, r5, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000cce:	b2c4      	uxtb	r4, r0
 8000cd0:	f240 3203 	movw	r2, #771	; 0x303
 8000cd4:	2105      	movs	r1, #5
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f7ff fb02 	bl	80002e0 <CODEC_IO_Write>
 8000cdc:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f240 6101 	movw	r1, #1537	; 0x601
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f7ff fafb 	bl	80002e0 <CODEC_IO_Write>
 8000cea:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f240 6102 	movw	r1, #1538	; 0x602
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	f7ff faf4 	bl	80002e0 <CODEC_IO_Write>
 8000cf8:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f240 6104 	movw	r1, #1540	; 0x604
 8000d00:	4620      	mov	r0, r4
 8000d02:	f7ff faed 	bl	80002e0 <CODEC_IO_Write>
 8000d06:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f240 6105 	movw	r1, #1541	; 0x605
 8000d0e:	4620      	mov	r0, r4
 8000d10:	f7ff fae6 	bl	80002e0 <CODEC_IO_Write>
 8000d14:	4428      	add	r0, r5
    break;
 8000d16:	e7d9      	b.n	8000ccc <wm8994_SetOutputMode+0xa0>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8000d18:	b2c4      	uxtb	r4, r0
 8000d1a:	f640 720f 	movw	r2, #3855	; 0xf0f
 8000d1e:	2105      	movs	r1, #5
 8000d20:	4620      	mov	r0, r4
 8000d22:	f7ff fadd 	bl	80002e0 <CODEC_IO_Write>
 8000d26:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f240 6101 	movw	r1, #1537	; 0x601
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f7ff fad6 	bl	80002e0 <CODEC_IO_Write>
 8000d34:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f240 6102 	movw	r1, #1538	; 0x602
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	f7ff facf 	bl	80002e0 <CODEC_IO_Write>
 8000d42:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000d44:	2202      	movs	r2, #2
 8000d46:	f240 6104 	movw	r1, #1540	; 0x604
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	f7ff fac8 	bl	80002e0 <CODEC_IO_Write>
 8000d50:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000d52:	2202      	movs	r2, #2
 8000d54:	f240 6105 	movw	r1, #1541	; 0x605
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f7ff fac1 	bl	80002e0 <CODEC_IO_Write>
 8000d5e:	4428      	add	r0, r5
    break;
 8000d60:	e7b4      	b.n	8000ccc <wm8994_SetOutputMode+0xa0>
	...

08000d64 <wm8994_SetFrequency>:
{
 8000d64:	b508      	push	{r3, lr}
  switch (AudioFreq)
 8000d66:	f245 6322 	movw	r3, #22050	; 0x5622
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	d03f      	beq.n	8000dee <wm8994_SetFrequency+0x8a>
 8000d6e:	d817      	bhi.n	8000da0 <wm8994_SetFrequency+0x3c>
 8000d70:	f642 3311 	movw	r3, #11025	; 0x2b11
 8000d74:	4299      	cmp	r1, r3
 8000d76:	d033      	beq.n	8000de0 <wm8994_SetFrequency+0x7c>
 8000d78:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 8000d7c:	d106      	bne.n	8000d8c <wm8994_SetFrequency+0x28>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8000d7e:	2233      	movs	r2, #51	; 0x33
 8000d80:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d84:	b2c0      	uxtb	r0, r0
 8000d86:	f7ff faab 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000d8a:	e008      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 8000d8c:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 8000d90:	d134      	bne.n	8000dfc <wm8994_SetFrequency+0x98>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8000d92:	2203      	movs	r2, #3
 8000d94:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d98:	b2c0      	uxtb	r0, r0
 8000d9a:	f7ff faa1 	bl	80002e0 <CODEC_IO_Write>
}
 8000d9e:	bd08      	pop	{r3, pc}
  switch (AudioFreq)
 8000da0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8000da4:	4299      	cmp	r1, r3
 8000da6:	d014      	beq.n	8000dd2 <wm8994_SetFrequency+0x6e>
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <wm8994_SetFrequency+0xa8>)
 8000daa:	4299      	cmp	r1, r3
 8000dac:	d106      	bne.n	8000dbc <wm8994_SetFrequency+0x58>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8000dae:	22a3      	movs	r2, #163	; 0xa3
 8000db0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000db4:	b2c0      	uxtb	r0, r0
 8000db6:	f7ff fa93 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000dba:	e7f0      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 8000dbc:	f64a 4344 	movw	r3, #44100	; 0xac44
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d11b      	bne.n	8000dfc <wm8994_SetFrequency+0x98>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8000dc4:	2273      	movs	r2, #115	; 0x73
 8000dc6:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000dca:	b2c0      	uxtb	r0, r0
 8000dcc:	f7ff fa88 	bl	80002e0 <CODEC_IO_Write>
    break; 
 8000dd0:	e7e5      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000dd2:	2283      	movs	r2, #131	; 0x83
 8000dd4:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000dd8:	b2c0      	uxtb	r0, r0
 8000dda:	f7ff fa81 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000dde:	e7de      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8000de0:	2213      	movs	r2, #19
 8000de2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000de6:	b2c0      	uxtb	r0, r0
 8000de8:	f7ff fa7a 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000dec:	e7d7      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8000dee:	2243      	movs	r2, #67	; 0x43
 8000df0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000df4:	b2c0      	uxtb	r0, r0
 8000df6:	f7ff fa73 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000dfa:	e7d0      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000dfc:	2283      	movs	r2, #131	; 0x83
 8000dfe:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000e02:	b2c0      	uxtb	r0, r0
 8000e04:	f7ff fa6c 	bl	80002e0 <CODEC_IO_Write>
  return counter;
 8000e08:	e7c9      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
 8000e0a:	bf00      	nop
 8000e0c:	00017700 	.word	0x00017700

08000e10 <wm8994_Reset>:
{
 8000e10:	b508      	push	{r3, lr}
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8000e12:	2200      	movs	r2, #0
 8000e14:	4611      	mov	r1, r2
 8000e16:	b2c0      	uxtb	r0, r0
 8000e18:	f7ff fa62 	bl	80002e0 <CODEC_IO_Write>
  outputEnabled = 0;
 8000e1c:	4b02      	ldr	r3, [pc, #8]	; (8000e28 <wm8994_Reset+0x18>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8000e22:	605a      	str	r2, [r3, #4]
}
 8000e24:	bd08      	pop	{r3, pc}
 8000e26:	bf00      	nop
 8000e28:	200000b4 	.word	0x200000b4

08000e2c <wm8994_DeInit>:
{
 8000e2c:	b508      	push	{r3, lr}
  AUDIO_IO_DeInit();
 8000e2e:	f000 f911 	bl	8001054 <AUDIO_IO_DeInit>
}
 8000e32:	bd08      	pop	{r3, pc}

08000e34 <wm8994_ReadID>:
{
 8000e34:	b510      	push	{r4, lr}
 8000e36:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 8000e38:	f000 f904 	bl	8001044 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	b2e0      	uxtb	r0, r4
 8000e40:	f000 f922 	bl	8001088 <AUDIO_IO_Read>
}
 8000e44:	bd10      	pop	{r4, pc}
	...

08000e48 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000e48:	b570      	push	{r4, r5, r6, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e4c:	4b49      	ldr	r3, [pc, #292]	; (8000f74 <I2Cx_MspInit+0x12c>)
 8000e4e:	4283      	cmp	r3, r0
 8000e50:	d043      	beq.n	8000eda <I2Cx_MspInit+0x92>
  }
  else
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e52:	4c49      	ldr	r4, [pc, #292]	; (8000f78 <I2Cx_MspInit+0x130>)
 8000e54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	6323      	str	r3, [r4, #48]	; 0x30
 8000e5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	9303      	str	r3, [sp, #12]
 8000e64:	9b03      	ldr	r3, [sp, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e6a:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e6c:	2312      	movs	r3, #18
 8000e6e:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000e70:	2500      	movs	r5, #0
 8000e72:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000e74:	2302      	movs	r3, #2
 8000e76:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e7c:	4e3f      	ldr	r6, [pc, #252]	; (8000f7c <I2Cx_MspInit+0x134>)
 8000e7e:	a905      	add	r1, sp, #20
 8000e80:	4630      	mov	r0, r6
 8000e82:	f000 fcdd 	bl	8001840 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000e86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e8a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e8c:	a905      	add	r1, sp, #20
 8000e8e:	4630      	mov	r0, r6
 8000e90:	f000 fcd6 	bl	8001840 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000e94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e9a:	6423      	str	r3, [r4, #64]	; 0x40
 8000e9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea2:	9304      	str	r3, [sp, #16]
 8000ea4:	9b04      	ldr	r3, [sp, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000ea6:	6a23      	ldr	r3, [r4, #32]
 8000ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eac:	6223      	str	r3, [r4, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000eae:	6a23      	ldr	r3, [r4, #32]
 8000eb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000eb4:	6223      	str	r3, [r4, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000eb6:	462a      	mov	r2, r5
 8000eb8:	210f      	movs	r1, #15
 8000eba:	201f      	movs	r0, #31
 8000ebc:	f000 fa30 	bl	8001320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000ec0:	201f      	movs	r0, #31
 8000ec2:	f000 fa5f 	bl	8001384 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000ec6:	462a      	mov	r2, r5
 8000ec8:	210f      	movs	r1, #15
 8000eca:	2020      	movs	r0, #32
 8000ecc:	f000 fa28 	bl	8001320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000ed0:	2020      	movs	r0, #32
 8000ed2:	f000 fa57 	bl	8001384 <HAL_NVIC_EnableIRQ>
  }
}
 8000ed6:	b00a      	add	sp, #40	; 0x28
 8000ed8:	bd70      	pop	{r4, r5, r6, pc}
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000eda:	4c27      	ldr	r4, [pc, #156]	; (8000f78 <I2Cx_MspInit+0x130>)
 8000edc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ede:	f043 0308 	orr.w	r3, r3, #8
 8000ee2:	6323      	str	r3, [r4, #48]	; 0x30
 8000ee4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	9b00      	ldr	r3, [sp, #0]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000eee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	6323      	str	r3, [r4, #48]	; 0x30
 8000ef6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f04:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000f06:	2312      	movs	r3, #18
 8000f08:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000f0a:	2500      	movs	r5, #0
 8000f0c:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000f12:	2304      	movs	r3, #4
 8000f14:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000f16:	a905      	add	r1, sp, #20
 8000f18:	4819      	ldr	r0, [pc, #100]	; (8000f80 <I2Cx_MspInit+0x138>)
 8000f1a:	f000 fc91 	bl	8001840 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000f22:	230b      	movs	r3, #11
 8000f24:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000f26:	a905      	add	r1, sp, #20
 8000f28:	4814      	ldr	r0, [pc, #80]	; (8000f7c <I2Cx_MspInit+0x134>)
 8000f2a:	f000 fc89 	bl	8001840 <HAL_GPIO_Init>
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000f2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f34:	6423      	str	r3, [r4, #64]	; 0x40
 8000f36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000f40:	6a23      	ldr	r3, [r4, #32]
 8000f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f46:	6223      	str	r3, [r4, #32]
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000f48:	6a23      	ldr	r3, [r4, #32]
 8000f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f4e:	6223      	str	r3, [r4, #32]
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000f50:	462a      	mov	r2, r5
 8000f52:	210f      	movs	r1, #15
 8000f54:	205f      	movs	r0, #95	; 0x5f
 8000f56:	f000 f9e3 	bl	8001320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000f5a:	205f      	movs	r0, #95	; 0x5f
 8000f5c:	f000 fa12 	bl	8001384 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000f60:	462a      	mov	r2, r5
 8000f62:	210f      	movs	r1, #15
 8000f64:	2060      	movs	r0, #96	; 0x60
 8000f66:	f000 f9db 	bl	8001320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000f6a:	2060      	movs	r0, #96	; 0x60
 8000f6c:	f000 fa0a 	bl	8001384 <HAL_NVIC_EnableIRQ>
 8000f70:	e7b1      	b.n	8000ed6 <I2Cx_MspInit+0x8e>
 8000f72:	bf00      	nop
 8000f74:	200000bc 	.word	0x200000bc
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	40020c00 	.word	0x40020c00

08000f84 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000f84:	b510      	push	{r4, lr}
 8000f86:	4604      	mov	r4, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000f88:	f001 f900 	bl	800218c <HAL_I2C_GetState>
 8000f8c:	b9a0      	cbnz	r0, 8000fb8 <I2Cx_Init+0x34>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <I2Cx_Init+0x3c>)
 8000f90:	429c      	cmp	r4, r3
 8000f92:	d012      	beq.n	8000fba <I2Cx_Init+0x36>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <I2Cx_Init+0x40>)
 8000f96:	6023      	str	r3, [r4, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <I2Cx_Init+0x44>)
 8000f9a:	6063      	str	r3, [r4, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60a3      	str	r3, [r4, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	60e2      	str	r2, [r4, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000fa4:	6123      	str	r3, [r4, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000fa6:	6163      	str	r3, [r4, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000fa8:	61e3      	str	r3, [r4, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000faa:	6223      	str	r3, [r4, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000fac:	4620      	mov	r0, r4
 8000fae:	f7ff ff4b 	bl	8000e48 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f000 fea0 	bl	8001cf8 <HAL_I2C_Init>
  }
}
 8000fb8:	bd10      	pop	{r4, pc}
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <I2Cx_Init+0x48>)
 8000fbc:	6023      	str	r3, [r4, #0]
 8000fbe:	e7eb      	b.n	8000f98 <I2Cx_Init+0x14>
 8000fc0:	200000bc 	.word	0x200000bc
 8000fc4:	40005400 	.word	0x40005400
 8000fc8:	40912732 	.word	0x40912732
 8000fcc:	40006000 	.word	0x40006000

08000fd0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	4604      	mov	r4, r0
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000fd4:	f000 feef 	bl	8001db6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f7ff ffd3 	bl	8000f84 <I2Cx_Init>
}
 8000fde:	bd10      	pop	{r4, pc}

08000fe0 <I2Cx_WriteMultiple>:
{
 8000fe0:	b570      	push	{r4, r5, r6, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	4605      	mov	r5, r0
 8000fe6:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fe8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fec:	9102      	str	r1, [sp, #8]
 8000fee:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8000ff2:	9101      	str	r1, [sp, #4]
 8000ff4:	9908      	ldr	r1, [sp, #32]
 8000ff6:	9100      	str	r1, [sp, #0]
 8000ff8:	4621      	mov	r1, r4
 8000ffa:	f000 fef5 	bl	8001de8 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8000ffe:	4606      	mov	r6, r0
 8001000:	b910      	cbnz	r0, 8001008 <I2Cx_WriteMultiple+0x28>
}
 8001002:	4630      	mov	r0, r6
 8001004:	b004      	add	sp, #16
 8001006:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 8001008:	4621      	mov	r1, r4
 800100a:	4628      	mov	r0, r5
 800100c:	f7ff ffe0 	bl	8000fd0 <I2Cx_Error>
 8001010:	e7f7      	b.n	8001002 <I2Cx_WriteMultiple+0x22>

08001012 <I2Cx_ReadMultiple>:
{
 8001012:	b570      	push	{r4, r5, r6, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	4605      	mov	r5, r0
 8001018:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800101a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800101e:	9102      	str	r1, [sp, #8]
 8001020:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8001024:	9101      	str	r1, [sp, #4]
 8001026:	9908      	ldr	r1, [sp, #32]
 8001028:	9100      	str	r1, [sp, #0]
 800102a:	4621      	mov	r1, r4
 800102c:	f000 ffc6 	bl	8001fbc <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001030:	4606      	mov	r6, r0
 8001032:	b910      	cbnz	r0, 800103a <I2Cx_ReadMultiple+0x28>
}
 8001034:	4630      	mov	r0, r6
 8001036:	b004      	add	sp, #16
 8001038:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 800103a:	4621      	mov	r1, r4
 800103c:	4628      	mov	r0, r5
 800103e:	f7ff ffc7 	bl	8000fd0 <I2Cx_Error>
 8001042:	e7f7      	b.n	8001034 <I2Cx_ReadMultiple+0x22>

08001044 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 8001044:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cAudioHandler);
 8001046:	4802      	ldr	r0, [pc, #8]	; (8001050 <AUDIO_IO_Init+0xc>)
 8001048:	f7ff ff9c 	bl	8000f84 <I2Cx_Init>
}
 800104c:	bd08      	pop	{r3, pc}
 800104e:	bf00      	nop
 8001050:	200000bc 	.word	0x200000bc

08001054 <AUDIO_IO_DeInit>:
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{

}
 8001054:	4770      	bx	lr
	...

08001058 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001058:	b500      	push	{lr}
 800105a:	b085      	sub	sp, #20
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800105c:	0213      	lsls	r3, r2, #8
 800105e:	b21b      	sxth	r3, r3
 8001060:	ea43 2212 	orr.w	r2, r3, r2, lsr #8
 8001064:	f8ad 200e 	strh.w	r2, [sp, #14]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001068:	2302      	movs	r3, #2
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	f10d 020e 	add.w	r2, sp, #14
 8001070:	9200      	str	r2, [sp, #0]
 8001072:	460a      	mov	r2, r1
 8001074:	4601      	mov	r1, r0
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <AUDIO_IO_Write+0x2c>)
 8001078:	f7ff ffb2 	bl	8000fe0 <I2Cx_WriteMultiple>
}
 800107c:	b005      	add	sp, #20
 800107e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001082:	bf00      	nop
 8001084:	200000bc 	.word	0x200000bc

08001088 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8001088:	b500      	push	{lr}
 800108a:	b085      	sub	sp, #20
 800108c:	460a      	mov	r2, r1
  uint16_t read_value = 0, tmp = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	f8ad 300e 	strh.w	r3, [sp, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001094:	2302      	movs	r3, #2
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	f10d 010e 	add.w	r1, sp, #14
 800109c:	9100      	str	r1, [sp, #0]
 800109e:	4601      	mov	r1, r0
 80010a0:	4806      	ldr	r0, [pc, #24]	; (80010bc <AUDIO_IO_Read+0x34>)
 80010a2:	f7ff ffb6 	bl	8001012 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80010a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80010aa:	0218      	lsls	r0, r3, #8
 80010ac:	b200      	sxth	r0, r0
 80010ae:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
  
  read_value = tmp;
  
  return read_value;
}
 80010b2:	b280      	uxth	r0, r0
 80010b4:	b005      	add	sp, #20
 80010b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80010ba:	bf00      	nop
 80010bc:	200000bc 	.word	0x200000bc

080010c0 <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80010c0:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 80010c2:	f000 f90d 	bl	80012e0 <HAL_Delay>
}
 80010c6:	bd08      	pop	{r3, pc}

080010c8 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Manages the DMA full Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
}
 80010c8:	4770      	bx	lr

080010ca <HAL_SAI_TxCpltCallback>:
{
 80010ca:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 80010cc:	f7ff fffc 	bl	80010c8 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80010d0:	bd08      	pop	{r3, pc}

080010d2 <HAL_SAI_TxHalfCpltCallback>:
{
 80010d2:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80010d4:	f003 f896 	bl	8004204 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80010d8:	bd08      	pop	{r3, pc}

080010da <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
}
 80010da:	4770      	bx	lr

080010dc <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 80010dc:	b530      	push	{r4, r5, lr}
 80010de:	b08b      	sub	sp, #44	; 0x2c
 80010e0:	4605      	mov	r5, r0
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  
  
  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80010e2:	4c3a      	ldr	r4, [pc, #232]	; (80011cc <BSP_AUDIO_OUT_MspInit+0xf0>)
 80010e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ea:	6463      	str	r3, [r4, #68]	; 0x44
 80010ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	9b01      	ldr	r3, [sp, #4]
  
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 80010f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010fc:	6323      	str	r3, [r4, #48]	; 0x30
 80010fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 8001108:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800110a:	f043 0310 	orr.w	r3, r3, #16
 800110e:	6323      	str	r3, [r4, #48]	; 0x30
 8001110:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	9303      	str	r3, [sp, #12]
 8001118:	9b03      	ldr	r3, [sp, #12]
  
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 800111a:	2370      	movs	r3, #112	; 0x70
 800111c:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 800112a:	2306      	movs	r3, #6
 800112c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 800112e:	a905      	add	r1, sp, #20
 8001130:	4827      	ldr	r0, [pc, #156]	; (80011d0 <BSP_AUDIO_OUT_MspInit+0xf4>)
 8001132:	f000 fb85 	bl	8001840 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800113a:	a905      	add	r1, sp, #20
 800113c:	4825      	ldr	r0, [pc, #148]	; (80011d4 <BSP_AUDIO_OUT_MspInit+0xf8>)
 800113e:	f000 fb7f 	bl	8001840 <HAL_GPIO_Init>
  
  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001142:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001144:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001148:	6323      	str	r3, [r4, #48]	; 0x30
 800114a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800114c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001150:	9304      	str	r3, [sp, #16]
 8001152:	9b04      	ldr	r3, [sp, #16]
  
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001154:	682a      	ldr	r2, [r5, #0]
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <BSP_AUDIO_OUT_MspInit+0xfc>)
 8001158:	429a      	cmp	r2, r3
 800115a:	d009      	beq.n	8001170 <BSP_AUDIO_OUT_MspInit+0x94>
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	210e      	movs	r1, #14
 8001160:	2039      	movs	r0, #57	; 0x39
 8001162:	f000 f8dd 	bl	8001320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8001166:	2039      	movs	r0, #57	; 0x39
 8001168:	f000 f90c 	bl	8001384 <HAL_NVIC_EnableIRQ>
}
 800116c:	b00b      	add	sp, #44	; 0x2c
 800116e:	bd30      	pop	{r4, r5, pc}
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <BSP_AUDIO_OUT_MspInit+0x100>)
 8001172:	2200      	movs	r2, #0
 8001174:	665a      	str	r2, [r3, #100]	; 0x64
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001176:	2140      	movs	r1, #64	; 0x40
 8001178:	6699      	str	r1, [r3, #104]	; 0x68
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800117a:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800117c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001180:	6719      	str	r1, [r3, #112]	; 0x70
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001182:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001186:	6759      	str	r1, [r3, #116]	; 0x74
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8001188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118c:	6799      	str	r1, [r3, #120]	; 0x78
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 800118e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001192:	67d9      	str	r1, [r3, #124]	; 0x7c
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001194:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001198:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 800119c:	2104      	movs	r1, #4
 800119e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80011a2:	2103      	movs	r1, #3
 80011a4:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80011a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80011ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80011b0:	461c      	mov	r4, r3
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <BSP_AUDIO_OUT_MspInit+0x104>)
 80011b4:	f844 2f60 	str.w	r2, [r4, #96]!
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80011b8:	66ec      	str	r4, [r5, #108]	; 0x6c
 80011ba:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    HAL_DMA_DeInit(&hdma_sai_tx);
 80011be:	4620      	mov	r0, r4
 80011c0:	f000 f9e6 	bl	8001590 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);
 80011c4:	4620      	mov	r0, r4
 80011c6:	f000 f97d 	bl	80014c4 <HAL_DMA_Init>
 80011ca:	e7c7      	b.n	800115c <BSP_AUDIO_OUT_MspInit+0x80>
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40021800 	.word	0x40021800
 80011d8:	40015804 	.word	0x40015804
 80011dc:	20000154 	.word	0x20000154
 80011e0:	40026428 	.word	0x40026428

080011e4 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 80011e4:	b510      	push	{r4, lr}
 80011e6:	b0a4      	sub	sp, #144	; 0x90
 80011e8:	460c      	mov	r4, r1
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80011ea:	4668      	mov	r0, sp
 80011ec:	f001 ff60 	bl	80030b0 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 80011f0:	f642 3211 	movw	r2, #11025	; 0x2b11
 80011f4:	f245 6322 	movw	r3, #22050	; 0x5622
 80011f8:	429c      	cmp	r4, r3
 80011fa:	bf18      	it	ne
 80011fc:	4294      	cmpne	r4, r2
 80011fe:	d003      	beq.n	8001208 <BSP_AUDIO_OUT_ClockConfig+0x24>
 8001200:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001204:	429c      	cmp	r4, r3
 8001206:	d111      	bne.n	800122c <BSP_AUDIO_OUT_ClockConfig+0x48>
  {
    /* Configure PLLSAI prescalers */
    /* PLLSAI_VCO: VCO_429M 
    SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 214.5/19 = 11.289 Mhz */ 
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001208:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800120c:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 800120e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001212:	930f      	str	r3, [sp, #60]	; 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8001214:	f240 13ad 	movw	r3, #429	; 0x1ad
 8001218:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800121a:	2302      	movs	r3, #2
 800121c:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800121e:	2313      	movs	r3, #19
 8001220:	9309      	str	r3, [sp, #36]	; 0x24
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001222:	4668      	mov	r0, sp
 8001224:	f001 fb42 	bl	80028ac <HAL_RCCEx_PeriphCLKConfig>
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
  }
}
 8001228:	b024      	add	sp, #144	; 0x90
 800122a:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800122c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001230:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8001232:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001236:	930f      	str	r3, [sp, #60]	; 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344; 
 8001238:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800123c:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
 800123e:	2307      	movs	r3, #7
 8001240:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
 8001242:	2301      	movs	r3, #1
 8001244:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001246:	4668      	mov	r0, sp
 8001248:	f001 fb30 	bl	80028ac <HAL_RCCEx_PeriphCLKConfig>
}
 800124c:	e7ec      	b.n	8001228 <BSP_AUDIO_OUT_ClockConfig+0x44>

0800124e <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai : SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800124e:	b508      	push	{r3, lr}
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001250:	f002 ffde 	bl	8004210 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001254:	bd08      	pop	{r3, pc}

08001256 <HAL_SAI_RxHalfCpltCallback>:
{
 8001256:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8001258:	f002 ffe0 	bl	800421c <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 800125c:	bd08      	pop	{r3, pc}
	...

08001260 <HAL_SAI_ErrorCallback>:
{
 8001260:	b508      	push	{r3, lr}
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001262:	6802      	ldr	r2, [r0, #0]
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <HAL_SAI_ErrorCallback+0x18>)
 8001266:	429a      	cmp	r2, r3
 8001268:	d002      	beq.n	8001270 <HAL_SAI_ErrorCallback+0x10>
    BSP_AUDIO_IN_Error_CallBack();
 800126a:	f002 ffdd 	bl	8004228 <BSP_AUDIO_IN_Error_CallBack>
}
 800126e:	bd08      	pop	{r3, pc}
  BSP_AUDIO_OUT_Error_CallBack();
 8001270:	f7ff ff33 	bl	80010da <BSP_AUDIO_OUT_Error_CallBack>
 8001274:	e7fb      	b.n	800126e <HAL_SAI_ErrorCallback+0xe>
 8001276:	bf00      	nop
 8001278:	40015804 	.word	0x40015804

0800127c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800127c:	4770      	bx	lr
	...

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b510      	push	{r4, lr}
 8001282:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <HAL_InitTick+0x24>)
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <HAL_InitTick+0x28>)
 800128a:	fba3 3000 	umull	r3, r0, r3, r0
 800128e:	0980      	lsrs	r0, r0, #6
 8001290:	f000 f884 	bl	800139c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001294:	2200      	movs	r2, #0
 8001296:	4621      	mov	r1, r4
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f840 	bl	8001320 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80012a0:	2000      	movs	r0, #0
 80012a2:	bd10      	pop	{r4, pc}
 80012a4:	20000030 	.word	0x20000030
 80012a8:	10624dd3 	.word	0x10624dd3

080012ac <HAL_Init>:
{
 80012ac:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ae:	2003      	movs	r0, #3
 80012b0:	f000 f824 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff ffe3 	bl	8001280 <HAL_InitTick>
  HAL_MspInit();
 80012ba:	f7ff ffdf 	bl	800127c <HAL_MspInit>
}
 80012be:	2000      	movs	r0, #0
 80012c0:	bd08      	pop	{r3, pc}
	...

080012c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80012c4:	4a02      	ldr	r2, [pc, #8]	; (80012d0 <HAL_IncTick+0xc>)
 80012c6:	6813      	ldr	r3, [r2, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2000078c 	.word	0x2000078c

080012d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80012d4:	4b01      	ldr	r3, [pc, #4]	; (80012dc <HAL_GetTick+0x8>)
 80012d6:	6818      	ldr	r0, [r3, #0]
}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	2000078c 	.word	0x2000078c

080012e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80012e0:	b510      	push	{r4, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80012e6:	f7ff fff5 	bl	80012d4 <HAL_GetTick>
 80012ea:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80012ec:	f7ff fff2 	bl	80012d4 <HAL_GetTick>
 80012f0:	1b00      	subs	r0, r0, r4
 80012f2:	9b01      	ldr	r3, [sp, #4]
 80012f4:	4298      	cmp	r0, r3
 80012f6:	d3f9      	bcc.n	80012ec <HAL_Delay+0xc>
  {
  }
}
 80012f8:	b002      	add	sp, #8
 80012fa:	bd10      	pop	{r4, pc}

080012fc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4906      	ldr	r1, [pc, #24]	; (8001318 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80012fe:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001300:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001304:	041b      	lsls	r3, r3, #16
 8001306:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001308:	0200      	lsls	r0, r0, #8
 800130a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001310:	4a02      	ldr	r2, [pc, #8]	; (800131c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001312:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8001314:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00
 800131c:	05fa0000 	.word	0x05fa0000

08001320 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001320:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_NVIC_SetPriority+0x58>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132a:	f1c3 0407 	rsb	r4, r3, #7
 800132e:	2c04      	cmp	r4, #4
 8001330:	bf28      	it	cs
 8001332:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001334:	1d1d      	adds	r5, r3, #4
 8001336:	2d06      	cmp	r5, #6
 8001338:	d914      	bls.n	8001364 <HAL_NVIC_SetPriority+0x44>
 800133a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 35ff 	mov.w	r5, #4294967295
 8001340:	fa05 f404 	lsl.w	r4, r5, r4
 8001344:	ea21 0104 	bic.w	r1, r1, r4
 8001348:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134a:	fa05 f303 	lsl.w	r3, r5, r3
 800134e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001352:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8001354:	2800      	cmp	r0, #0
 8001356:	db07      	blt.n	8001368 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	0109      	lsls	r1, r1, #4
 800135a:	b2c9      	uxtb	r1, r1
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <HAL_NVIC_SetPriority+0x5c>)
 800135e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001360:	bc30      	pop	{r4, r5}
 8001362:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001364:	2300      	movs	r3, #0
 8001366:	e7e9      	b.n	800133c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001368:	f000 000f 	and.w	r0, r0, #15
 800136c:	0109      	lsls	r1, r1, #4
 800136e:	b2c9      	uxtb	r1, r1
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_NVIC_SetPriority+0x60>)
 8001372:	5419      	strb	r1, [r3, r0]
 8001374:	e7f4      	b.n	8001360 <HAL_NVIC_SetPriority+0x40>
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00
 800137c:	e000e400 	.word	0xe000e400
 8001380:	e000ed14 	.word	0xe000ed14

08001384 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001384:	f000 021f 	and.w	r2, r0, #31
 8001388:	0940      	lsrs	r0, r0, #5
 800138a:	2301      	movs	r3, #1
 800138c:	4093      	lsls	r3, r2
 800138e:	4a02      	ldr	r2, [pc, #8]	; (8001398 <HAL_NVIC_EnableIRQ+0x14>)
 8001390:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e100 	.word	0xe000e100

0800139c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	3801      	subs	r0, #1
 800139e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013a2:	d20a      	bcs.n	80013ba <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_SYSTICK_Config+0x24>)
 80013a6:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <HAL_SYSTICK_Config+0x28>)
 80013aa:	21f0      	movs	r1, #240	; 0xf0
 80013ac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b0:	2000      	movs	r0, #0
 80013b2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b4:	2207      	movs	r2, #7
 80013b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013ba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000e010 	.word	0xe000e010
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013c8:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80013ca:	6805      	ldr	r5, [r0, #0]
 80013cc:	682c      	ldr	r4, [r5, #0]
 80013ce:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80013d2:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80013d4:	6804      	ldr	r4, [r0, #0]
 80013d6:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013d8:	6883      	ldr	r3, [r0, #8]
 80013da:	2b40      	cmp	r3, #64	; 0x40
 80013dc:	d005      	beq.n	80013ea <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80013de:	6803      	ldr	r3, [r0, #0]
 80013e0:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80013e2:	6803      	ldr	r3, [r0, #0]
 80013e4:	60da      	str	r2, [r3, #12]
  }
}
 80013e6:	bc30      	pop	{r4, r5}
 80013e8:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80013ea:	6803      	ldr	r3, [r0, #0]
 80013ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80013ee:	6803      	ldr	r3, [r0, #0]
 80013f0:	60d9      	str	r1, [r3, #12]
 80013f2:	e7f8      	b.n	80013e6 <DMA_SetConfig+0x1e>

080013f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013f4:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013f6:	6801      	ldr	r1, [r0, #0]
 80013f8:	b2ca      	uxtb	r2, r1
 80013fa:	3a10      	subs	r2, #16
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <DMA_CalcBaseAndBitshift+0x34>)
 80013fe:	fba3 4302 	umull	r4, r3, r3, r2
 8001402:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001404:	4c09      	ldr	r4, [pc, #36]	; (800142c <DMA_CalcBaseAndBitshift+0x38>)
 8001406:	5ce3      	ldrb	r3, [r4, r3]
 8001408:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 800140a:	2a5f      	cmp	r2, #95	; 0x5f
 800140c:	d907      	bls.n	800141e <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <DMA_CalcBaseAndBitshift+0x3c>)
 8001410:	400b      	ands	r3, r1
 8001412:	3304      	adds	r3, #4
 8001414:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001416:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001418:	f85d 4b04 	ldr.w	r4, [sp], #4
 800141c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <DMA_CalcBaseAndBitshift+0x3c>)
 8001420:	400b      	ands	r3, r1
 8001422:	6583      	str	r3, [r0, #88]	; 0x58
 8001424:	e7f7      	b.n	8001416 <DMA_CalcBaseAndBitshift+0x22>
 8001426:	bf00      	nop
 8001428:	aaaaaaab 	.word	0xaaaaaaab
 800142c:	080058b8 	.word	0x080058b8
 8001430:	fffffc00 	.word	0xfffffc00

08001434 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001434:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001436:	6982      	ldr	r2, [r0, #24]
 8001438:	b992      	cbnz	r2, 8001460 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800143a:	2b01      	cmp	r3, #1
 800143c:	d00a      	beq.n	8001454 <DMA_CheckFifoParam+0x20>
 800143e:	2b02      	cmp	r3, #2
 8001440:	d002      	beq.n	8001448 <DMA_CheckFifoParam+0x14>
 8001442:	b10b      	cbz	r3, 8001448 <DMA_CheckFifoParam+0x14>
 8001444:	2000      	movs	r0, #0
 8001446:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001448:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800144a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800144e:	d128      	bne.n	80014a2 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001450:	2000      	movs	r0, #0
 8001452:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001454:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001456:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800145a:	d024      	beq.n	80014a6 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 800145c:	2000      	movs	r0, #0
 800145e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001460:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001464:	d009      	beq.n	800147a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001466:	2b02      	cmp	r3, #2
 8001468:	d925      	bls.n	80014b6 <DMA_CheckFifoParam+0x82>
 800146a:	2b03      	cmp	r3, #3
 800146c:	d125      	bne.n	80014ba <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800146e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001470:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001474:	d123      	bne.n	80014be <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001476:	2000      	movs	r0, #0
 8001478:	4770      	bx	lr
    switch (tmp)
 800147a:	2b03      	cmp	r3, #3
 800147c:	d803      	bhi.n	8001486 <DMA_CheckFifoParam+0x52>
 800147e:	e8df f003 	tbb	[pc, r3]
 8001482:	0414      	.short	0x0414
 8001484:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001486:	2000      	movs	r0, #0
 8001488:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800148a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800148c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001490:	d10d      	bne.n	80014ae <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001492:	2000      	movs	r0, #0
 8001494:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001496:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001498:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800149c:	d009      	beq.n	80014b2 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800149e:	2000      	movs	r0, #0
 80014a0:	4770      	bx	lr
        status = HAL_ERROR;
 80014a2:	2001      	movs	r0, #1
 80014a4:	4770      	bx	lr
        status = HAL_ERROR;
 80014a6:	2001      	movs	r0, #1
 80014a8:	4770      	bx	lr
      status = HAL_ERROR;
 80014aa:	2001      	movs	r0, #1
 80014ac:	4770      	bx	lr
        status = HAL_ERROR;
 80014ae:	2001      	movs	r0, #1
 80014b0:	4770      	bx	lr
        status = HAL_ERROR;
 80014b2:	2001      	movs	r0, #1
 80014b4:	4770      	bx	lr
      status = HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
 80014b8:	4770      	bx	lr
    switch (tmp)
 80014ba:	2000      	movs	r0, #0
 80014bc:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80014be:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80014c0:	4770      	bx	lr
	...

080014c4 <HAL_DMA_Init>:
{
 80014c4:	b570      	push	{r4, r5, r6, lr}
 80014c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014c8:	f7ff ff04 	bl	80012d4 <HAL_GetTick>
  if(hdma == NULL)
 80014cc:	2c00      	cmp	r4, #0
 80014ce:	d05b      	beq.n	8001588 <HAL_DMA_Init+0xc4>
 80014d0:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80014d2:	2300      	movs	r3, #0
 80014d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80014d8:	2302      	movs	r3, #2
 80014da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80014de:	6822      	ldr	r2, [r4, #0]
 80014e0:	6813      	ldr	r3, [r2, #0]
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	f012 0f01 	tst.w	r2, #1
 80014f0:	d00a      	beq.n	8001508 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014f2:	f7ff feef 	bl	80012d4 <HAL_GetTick>
 80014f6:	1b43      	subs	r3, r0, r5
 80014f8:	2b05      	cmp	r3, #5
 80014fa:	d9f5      	bls.n	80014e8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014fc:	2320      	movs	r3, #32
 80014fe:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001500:	2003      	movs	r0, #3
 8001502:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001506:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001508:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800150a:	4820      	ldr	r0, [pc, #128]	; (800158c <HAL_DMA_Init+0xc8>)
 800150c:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800150e:	6861      	ldr	r1, [r4, #4]
 8001510:	68a2      	ldr	r2, [r4, #8]
 8001512:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001514:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001516:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001518:	6921      	ldr	r1, [r4, #16]
 800151a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800151c:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001520:	69a1      	ldr	r1, [r4, #24]
 8001522:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001524:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001526:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001528:	6a21      	ldr	r1, [r4, #32]
 800152a:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800152c:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800152e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001530:	2904      	cmp	r1, #4
 8001532:	d01e      	beq.n	8001572 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001534:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001536:	6826      	ldr	r6, [r4, #0]
 8001538:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800153a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800153e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001540:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001542:	2b04      	cmp	r3, #4
 8001544:	d107      	bne.n	8001556 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001548:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800154a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800154c:	b11b      	cbz	r3, 8001556 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800154e:	4620      	mov	r0, r4
 8001550:	f7ff ff70 	bl	8001434 <DMA_CheckFifoParam>
 8001554:	b990      	cbnz	r0, 800157c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001556:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001558:	4620      	mov	r0, r4
 800155a:	f7ff ff4b 	bl	80013f4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800155e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001560:	233f      	movs	r3, #63	; 0x3f
 8001562:	4093      	lsls	r3, r2
 8001564:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001566:	2000      	movs	r0, #0
 8001568:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800156a:	2301      	movs	r3, #1
 800156c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001570:	e7c9      	b.n	8001506 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001572:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001574:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001576:	4301      	orrs	r1, r0
 8001578:	430a      	orrs	r2, r1
 800157a:	e7db      	b.n	8001534 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800157c:	2340      	movs	r3, #64	; 0x40
 800157e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001580:	2001      	movs	r0, #1
 8001582:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001586:	e7be      	b.n	8001506 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001588:	2001      	movs	r0, #1
 800158a:	e7bc      	b.n	8001506 <HAL_DMA_Init+0x42>
 800158c:	e010803f 	.word	0xe010803f

08001590 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8001590:	b338      	cbz	r0, 80015e2 <HAL_DMA_DeInit+0x52>
{
 8001592:	b538      	push	{r3, r4, r5, lr}
 8001594:	4605      	mov	r5, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001596:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 800159a:	b2c0      	uxtb	r0, r0
 800159c:	2802      	cmp	r0, #2
 800159e:	d01f      	beq.n	80015e0 <HAL_DMA_DeInit+0x50>
  __HAL_DMA_DISABLE(hdma);
 80015a0:	682a      	ldr	r2, [r5, #0]
 80015a2:	6813      	ldr	r3, [r2, #0]
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 80015aa:	682b      	ldr	r3, [r5, #0]
 80015ac:	2400      	movs	r4, #0
 80015ae:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80015b0:	682b      	ldr	r3, [r5, #0]
 80015b2:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80015b4:	682b      	ldr	r3, [r5, #0]
 80015b6:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80015b8:	682b      	ldr	r3, [r5, #0]
 80015ba:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80015bc:	682b      	ldr	r3, [r5, #0]
 80015be:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80015c0:	682b      	ldr	r3, [r5, #0]
 80015c2:	2221      	movs	r2, #33	; 0x21
 80015c4:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015c6:	4628      	mov	r0, r5
 80015c8:	f7ff ff14 	bl	80013f4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015cc:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80015ce:	233f      	movs	r3, #63	; 0x3f
 80015d0:	4093      	lsls	r3, r2
 80015d2:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d4:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 80015d6:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80015da:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  return HAL_OK;
 80015de:	4620      	mov	r0, r4
}
 80015e0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80015e2:	2001      	movs	r0, #1
}
 80015e4:	4770      	bx	lr

080015e6 <HAL_DMA_Start_IT>:
{
 80015e6:	b538      	push	{r3, r4, r5, lr}
 80015e8:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ea:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80015ec:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80015f0:	2801      	cmp	r0, #1
 80015f2:	d030      	beq.n	8001656 <HAL_DMA_Start_IT+0x70>
 80015f4:	2001      	movs	r0, #1
 80015f6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80015fa:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80015fe:	b2c0      	uxtb	r0, r0
 8001600:	2801      	cmp	r0, #1
 8001602:	d004      	beq.n	800160e <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001604:	2300      	movs	r3, #0
 8001606:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 800160a:	2002      	movs	r0, #2
}
 800160c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800160e:	2002      	movs	r0, #2
 8001610:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001614:	2000      	movs	r0, #0
 8001616:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001618:	4620      	mov	r0, r4
 800161a:	f7ff fed5 	bl	80013c8 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800161e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001620:	233f      	movs	r3, #63	; 0x3f
 8001622:	4093      	lsls	r3, r2
 8001624:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001626:	6822      	ldr	r2, [r4, #0]
 8001628:	6813      	ldr	r3, [r2, #0]
 800162a:	f043 0316 	orr.w	r3, r3, #22
 800162e:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001630:	6822      	ldr	r2, [r4, #0]
 8001632:	6953      	ldr	r3, [r2, #20]
 8001634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001638:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800163a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800163c:	b123      	cbz	r3, 8001648 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 800163e:	6822      	ldr	r2, [r4, #0]
 8001640:	6813      	ldr	r3, [r2, #0]
 8001642:	f043 0308 	orr.w	r3, r3, #8
 8001646:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001648:	6822      	ldr	r2, [r4, #0]
 800164a:	6813      	ldr	r3, [r2, #0]
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001652:	2000      	movs	r0, #0
 8001654:	e7da      	b.n	800160c <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001656:	2002      	movs	r0, #2
 8001658:	e7d8      	b.n	800160c <HAL_DMA_Start_IT+0x26>
	...

0800165c <HAL_DMA_IRQHandler>:
{
 800165c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165e:	b083      	sub	sp, #12
 8001660:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8001666:	4b72      	ldr	r3, [pc, #456]	; (8001830 <HAL_DMA_IRQHandler+0x1d4>)
 8001668:	681d      	ldr	r5, [r3, #0]
 800166a:	4b72      	ldr	r3, [pc, #456]	; (8001834 <HAL_DMA_IRQHandler+0x1d8>)
 800166c:	fba3 3505 	umull	r3, r5, r3, r5
 8001670:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001672:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001674:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001676:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001678:	2308      	movs	r3, #8
 800167a:	4093      	lsls	r3, r2
 800167c:	4233      	tst	r3, r6
 800167e:	d010      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001680:	6803      	ldr	r3, [r0, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	f012 0f04 	tst.w	r2, #4
 8001688:	d00b      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	f022 0204 	bic.w	r2, r2, #4
 8001690:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001692:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001694:	2308      	movs	r3, #8
 8001696:	4093      	lsls	r3, r2
 8001698:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800169a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016a2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80016a4:	4b64      	ldr	r3, [pc, #400]	; (8001838 <HAL_DMA_IRQHandler+0x1dc>)
 80016a6:	4093      	lsls	r3, r2
 80016a8:	4233      	tst	r3, r6
 80016aa:	d009      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016ac:	6822      	ldr	r2, [r4, #0]
 80016ae:	6952      	ldr	r2, [r2, #20]
 80016b0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80016b4:	d004      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016b6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80016ba:	f043 0302 	orr.w	r3, r3, #2
 80016be:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016c0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80016c2:	4b5e      	ldr	r3, [pc, #376]	; (800183c <HAL_DMA_IRQHandler+0x1e0>)
 80016c4:	4093      	lsls	r3, r2
 80016c6:	4233      	tst	r3, r6
 80016c8:	d009      	beq.n	80016de <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016ca:	6822      	ldr	r2, [r4, #0]
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	f012 0f02 	tst.w	r2, #2
 80016d2:	d004      	beq.n	80016de <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016d4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80016e0:	2310      	movs	r3, #16
 80016e2:	4093      	lsls	r3, r2
 80016e4:	4233      	tst	r3, r6
 80016e6:	d024      	beq.n	8001732 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016e8:	6822      	ldr	r2, [r4, #0]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	f012 0f08 	tst.w	r2, #8
 80016f0:	d01f      	beq.n	8001732 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016f2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80016fc:	d00d      	beq.n	800171a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001704:	d104      	bne.n	8001710 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001708:	b19b      	cbz	r3, 8001732 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800170a:	4620      	mov	r0, r4
 800170c:	4798      	blx	r3
 800170e:	e010      	b.n	8001732 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001710:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001712:	b173      	cbz	r3, 8001732 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001714:	4620      	mov	r0, r4
 8001716:	4798      	blx	r3
 8001718:	e00b      	b.n	8001732 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001720:	d103      	bne.n	800172a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	f022 0208 	bic.w	r2, r2, #8
 8001728:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800172a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800172c:	b10b      	cbz	r3, 8001732 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800172e:	4620      	mov	r0, r4
 8001730:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001732:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001734:	2320      	movs	r3, #32
 8001736:	4093      	lsls	r3, r2
 8001738:	4233      	tst	r3, r6
 800173a:	d055      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800173c:	6822      	ldr	r2, [r4, #0]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	f012 0f10 	tst.w	r2, #16
 8001744:	d050      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001746:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001748:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b05      	cmp	r3, #5
 8001750:	d00e      	beq.n	8001770 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800175a:	d033      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001762:	d12a      	bne.n	80017ba <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001764:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001766:	2b00      	cmp	r3, #0
 8001768:	d03e      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800176a:	4620      	mov	r0, r4
 800176c:	4798      	blx	r3
 800176e:	e03b      	b.n	80017e8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001770:	6822      	ldr	r2, [r4, #0]
 8001772:	6813      	ldr	r3, [r2, #0]
 8001774:	f023 0316 	bic.w	r3, r3, #22
 8001778:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800177a:	6822      	ldr	r2, [r4, #0]
 800177c:	6953      	ldr	r3, [r2, #20]
 800177e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001782:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001784:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001786:	b1a3      	cbz	r3, 80017b2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001788:	6822      	ldr	r2, [r4, #0]
 800178a:	6813      	ldr	r3, [r2, #0]
 800178c:	f023 0308 	bic.w	r3, r3, #8
 8001790:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001792:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001794:	233f      	movs	r3, #63	; 0x3f
 8001796:	4093      	lsls	r3, r2
 8001798:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800179a:	2300      	movs	r3, #0
 800179c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80017a0:	2301      	movs	r3, #1
 80017a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80017a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d03f      	beq.n	800182c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80017ac:	4620      	mov	r0, r4
 80017ae:	4798      	blx	r3
        return;
 80017b0:	e03c      	b.n	800182c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1e7      	bne.n	8001788 <HAL_DMA_IRQHandler+0x12c>
 80017b8:	e7eb      	b.n	8001792 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80017ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017bc:	b1a3      	cbz	r3, 80017e8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80017be:	4620      	mov	r0, r4
 80017c0:	4798      	blx	r3
 80017c2:	e011      	b.n	80017e8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80017ca:	d109      	bne.n	80017e0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	f022 0210 	bic.w	r2, r2, #16
 80017d2:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80017d4:	2300      	movs	r3, #0
 80017d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80017da:	2301      	movs	r3, #1
 80017dc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80017e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017e2:	b10b      	cbz	r3, 80017e8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80017e4:	4620      	mov	r0, r4
 80017e6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80017ea:	b1fb      	cbz	r3, 800182c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80017ee:	f013 0f01 	tst.w	r3, #1
 80017f2:	d017      	beq.n	8001824 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80017f4:	2305      	movs	r3, #5
 80017f6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80017fa:	6822      	ldr	r2, [r4, #0]
 80017fc:	6813      	ldr	r3, [r2, #0]
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001804:	9b01      	ldr	r3, [sp, #4]
 8001806:	3301      	adds	r3, #1
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	42ab      	cmp	r3, r5
 800180c:	d804      	bhi.n	8001818 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f013 0f01 	tst.w	r3, #1
 8001816:	d1f5      	bne.n	8001804 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8001818:	2300      	movs	r3, #0
 800181a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800181e:	2301      	movs	r3, #1
 8001820:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001824:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001826:	b10b      	cbz	r3, 800182c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001828:	4620      	mov	r0, r4
 800182a:	4798      	blx	r3
}
 800182c:	b003      	add	sp, #12
 800182e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001830:	20000030 	.word	0x20000030
 8001834:	1b4e81b5 	.word	0x1b4e81b5
 8001838:	00800001 	.word	0x00800001
 800183c:	00800004 	.word	0x00800004

08001840 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001840:	2300      	movs	r3, #0
 8001842:	2b0f      	cmp	r3, #15
 8001844:	f200 80e3 	bhi.w	8001a0e <HAL_GPIO_Init+0x1ce>
{
 8001848:	b4f0      	push	{r4, r5, r6, r7}
 800184a:	b082      	sub	sp, #8
 800184c:	e039      	b.n	80018c2 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800184e:	2209      	movs	r2, #9
 8001850:	e000      	b.n	8001854 <HAL_GPIO_Init+0x14>
 8001852:	2200      	movs	r2, #0
 8001854:	40b2      	lsls	r2, r6
 8001856:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001858:	3402      	adds	r4, #2
 800185a:	4e6d      	ldr	r6, [pc, #436]	; (8001a10 <HAL_GPIO_Init+0x1d0>)
 800185c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001860:	4a6c      	ldr	r2, [pc, #432]	; (8001a14 <HAL_GPIO_Init+0x1d4>)
 8001862:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001864:	43ea      	mvns	r2, r5
 8001866:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800186a:	684f      	ldr	r7, [r1, #4]
 800186c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001870:	d001      	beq.n	8001876 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001872:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001876:	4c67      	ldr	r4, [pc, #412]	; (8001a14 <HAL_GPIO_Init+0x1d4>)
 8001878:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800187a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800187c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001880:	684f      	ldr	r7, [r1, #4]
 8001882:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001886:	d001      	beq.n	800188c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001888:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 800188c:	4c61      	ldr	r4, [pc, #388]	; (8001a14 <HAL_GPIO_Init+0x1d4>)
 800188e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001890:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001892:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001896:	684f      	ldr	r7, [r1, #4]
 8001898:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800189c:	d001      	beq.n	80018a2 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 800189e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80018a2:	4c5c      	ldr	r4, [pc, #368]	; (8001a14 <HAL_GPIO_Init+0x1d4>)
 80018a4:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80018a6:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80018a8:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018aa:	684e      	ldr	r6, [r1, #4]
 80018ac:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80018b0:	d001      	beq.n	80018b6 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80018b2:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80018b6:	4c57      	ldr	r4, [pc, #348]	; (8001a14 <HAL_GPIO_Init+0x1d4>)
 80018b8:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80018ba:	3301      	adds	r3, #1
 80018bc:	2b0f      	cmp	r3, #15
 80018be:	f200 80a3 	bhi.w	8001a08 <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
 80018c2:	2201      	movs	r2, #1
 80018c4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c6:	680c      	ldr	r4, [r1, #0]
 80018c8:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80018cc:	ea32 0404 	bics.w	r4, r2, r4
 80018d0:	d1f3      	bne.n	80018ba <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018d2:	684c      	ldr	r4, [r1, #4]
 80018d4:	2c12      	cmp	r4, #18
 80018d6:	bf18      	it	ne
 80018d8:	2c02      	cmpne	r4, #2
 80018da:	d110      	bne.n	80018fe <HAL_GPIO_Init+0xbe>
        temp = GPIOx->AFR[position >> 3];
 80018dc:	08de      	lsrs	r6, r3, #3
 80018de:	3608      	adds	r6, #8
 80018e0:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018e4:	f003 0407 	and.w	r4, r3, #7
 80018e8:	00a7      	lsls	r7, r4, #2
 80018ea:	240f      	movs	r4, #15
 80018ec:	40bc      	lsls	r4, r7
 80018ee:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018f2:	690c      	ldr	r4, [r1, #16]
 80018f4:	40bc      	lsls	r4, r7
 80018f6:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 80018fa:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80018fe:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001902:	005e      	lsls	r6, r3, #1
 8001904:	2403      	movs	r4, #3
 8001906:	40b4      	lsls	r4, r6
 8001908:	43e7      	mvns	r7, r4
 800190a:	ea2c 0c04 	bic.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800190e:	684c      	ldr	r4, [r1, #4]
 8001910:	f004 0403 	and.w	r4, r4, #3
 8001914:	40b4      	lsls	r4, r6
 8001916:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800191a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800191c:	684c      	ldr	r4, [r1, #4]
 800191e:	f104 3cff 	add.w	ip, r4, #4294967295
 8001922:	2c11      	cmp	r4, #17
 8001924:	bf18      	it	ne
 8001926:	f1bc 0f01 	cmpne.w	ip, #1
 800192a:	d901      	bls.n	8001930 <HAL_GPIO_Init+0xf0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800192c:	2c12      	cmp	r4, #18
 800192e:	d110      	bne.n	8001952 <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8001930:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001932:	ea07 0c04 	and.w	ip, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001936:	68cc      	ldr	r4, [r1, #12]
 8001938:	40b4      	lsls	r4, r6
 800193a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 800193e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001940:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001942:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001946:	684c      	ldr	r4, [r1, #4]
 8001948:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800194c:	409c      	lsls	r4, r3
 800194e:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8001950:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8001952:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001954:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001956:	688a      	ldr	r2, [r1, #8]
 8001958:	40b2      	lsls	r2, r6
 800195a:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 800195c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800195e:	684a      	ldr	r2, [r1, #4]
 8001960:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001964:	d0a9      	beq.n	80018ba <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	4a2c      	ldr	r2, [pc, #176]	; (8001a18 <HAL_GPIO_Init+0x1d8>)
 8001968:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800196a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800196e:	6454      	str	r4, [r2, #68]	; 0x44
 8001970:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001972:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001976:	9201      	str	r2, [sp, #4]
 8001978:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800197a:	089c      	lsrs	r4, r3, #2
 800197c:	1ca6      	adds	r6, r4, #2
 800197e:	4a24      	ldr	r2, [pc, #144]	; (8001a10 <HAL_GPIO_Init+0x1d0>)
 8001980:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001984:	f003 0203 	and.w	r2, r3, #3
 8001988:	0096      	lsls	r6, r2, #2
 800198a:	220f      	movs	r2, #15
 800198c:	40b2      	lsls	r2, r6
 800198e:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001992:	4a22      	ldr	r2, [pc, #136]	; (8001a1c <HAL_GPIO_Init+0x1dc>)
 8001994:	4290      	cmp	r0, r2
 8001996:	f43f af5c 	beq.w	8001852 <HAL_GPIO_Init+0x12>
 800199a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800199e:	4290      	cmp	r0, r2
 80019a0:	d022      	beq.n	80019e8 <HAL_GPIO_Init+0x1a8>
 80019a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019a6:	4290      	cmp	r0, r2
 80019a8:	d020      	beq.n	80019ec <HAL_GPIO_Init+0x1ac>
 80019aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019ae:	4290      	cmp	r0, r2
 80019b0:	d01e      	beq.n	80019f0 <HAL_GPIO_Init+0x1b0>
 80019b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019b6:	4290      	cmp	r0, r2
 80019b8:	d01c      	beq.n	80019f4 <HAL_GPIO_Init+0x1b4>
 80019ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019be:	4290      	cmp	r0, r2
 80019c0:	d01a      	beq.n	80019f8 <HAL_GPIO_Init+0x1b8>
 80019c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019c6:	4290      	cmp	r0, r2
 80019c8:	d018      	beq.n	80019fc <HAL_GPIO_Init+0x1bc>
 80019ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019ce:	4290      	cmp	r0, r2
 80019d0:	d016      	beq.n	8001a00 <HAL_GPIO_Init+0x1c0>
 80019d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019d6:	4290      	cmp	r0, r2
 80019d8:	d014      	beq.n	8001a04 <HAL_GPIO_Init+0x1c4>
 80019da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019de:	4290      	cmp	r0, r2
 80019e0:	f43f af35 	beq.w	800184e <HAL_GPIO_Init+0xe>
 80019e4:	220a      	movs	r2, #10
 80019e6:	e735      	b.n	8001854 <HAL_GPIO_Init+0x14>
 80019e8:	2201      	movs	r2, #1
 80019ea:	e733      	b.n	8001854 <HAL_GPIO_Init+0x14>
 80019ec:	2202      	movs	r2, #2
 80019ee:	e731      	b.n	8001854 <HAL_GPIO_Init+0x14>
 80019f0:	2203      	movs	r2, #3
 80019f2:	e72f      	b.n	8001854 <HAL_GPIO_Init+0x14>
 80019f4:	2204      	movs	r2, #4
 80019f6:	e72d      	b.n	8001854 <HAL_GPIO_Init+0x14>
 80019f8:	2205      	movs	r2, #5
 80019fa:	e72b      	b.n	8001854 <HAL_GPIO_Init+0x14>
 80019fc:	2206      	movs	r2, #6
 80019fe:	e729      	b.n	8001854 <HAL_GPIO_Init+0x14>
 8001a00:	2207      	movs	r2, #7
 8001a02:	e727      	b.n	8001854 <HAL_GPIO_Init+0x14>
 8001a04:	2208      	movs	r2, #8
 8001a06:	e725      	b.n	8001854 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001a08:	b002      	add	sp, #8
 8001a0a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	4770      	bx	lr
 8001a10:	40013800 	.word	0x40013800
 8001a14:	40013c00 	.word	0x40013c00
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020000 	.word	0x40020000

08001a20 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a20:	6803      	ldr	r3, [r0, #0]
 8001a22:	699a      	ldr	r2, [r3, #24]
 8001a24:	f012 0f02 	tst.w	r2, #2
 8001a28:	d001      	beq.n	8001a2e <I2C_Flush_TXDR+0xe>
  {
     hi2c->Instance->TXDR = 0x00U;
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a2e:	6803      	ldr	r3, [r0, #0]
 8001a30:	699a      	ldr	r2, [r3, #24]
 8001a32:	f012 0f01 	tst.w	r2, #1
 8001a36:	d103      	bne.n	8001a40 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a38:	699a      	ldr	r2, [r3, #24]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	619a      	str	r2, [r3, #24]
  }
}
 8001a40:	4770      	bx	lr

08001a42 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001a42:	b410      	push	{r4}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8001a44:	6804      	ldr	r4, [r0, #0]
 8001a46:	6860      	ldr	r0, [r4, #4]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001a48:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 8001a4c:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
 8001a50:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8001a54:	f020 0003 	bic.w	r0, r0, #3

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8001a58:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001a5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001a60:	4319      	orrs	r1, r3
 8001a62:	9b01      	ldr	r3, [sp, #4]
 8001a64:	4319      	orrs	r1, r3
 8001a66:	4301      	orrs	r1, r0
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8001a68:	6061      	str	r1, [r4, #4]
}
 8001a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <I2C_IsAcknowledgeFailed>:
{
 8001a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a72:	4605      	mov	r5, r0
 8001a74:	460e      	mov	r6, r1
 8001a76:	4617      	mov	r7, r2
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a78:	6803      	ldr	r3, [r0, #0]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f013 0f10 	tst.w	r3, #16
 8001a80:	d101      	bne.n	8001a86 <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8001a82:	2000      	movs	r0, #0
}
 8001a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a86:	682b      	ldr	r3, [r5, #0]
 8001a88:	699c      	ldr	r4, [r3, #24]
 8001a8a:	f014 0f20 	tst.w	r4, #32
 8001a8e:	d112      	bne.n	8001ab6 <I2C_IsAcknowledgeFailed+0x46>
      if(Timeout != HAL_MAX_DELAY)
 8001a90:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001a94:	d0f7      	beq.n	8001a86 <I2C_IsAcknowledgeFailed+0x16>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001a96:	b126      	cbz	r6, 8001aa2 <I2C_IsAcknowledgeFailed+0x32>
 8001a98:	f7ff fc1c 	bl	80012d4 <HAL_GetTick>
 8001a9c:	1bc0      	subs	r0, r0, r7
 8001a9e:	42b0      	cmp	r0, r6
 8001aa0:	d9f1      	bls.n	8001a86 <I2C_IsAcknowledgeFailed+0x16>
          hi2c->State= HAL_I2C_STATE_READY;
 8001aa2:	2320      	movs	r3, #32
 8001aa4:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8001aae:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_TIMEOUT;
 8001ab2:	2003      	movs	r0, #3
 8001ab4:	e7e6      	b.n	8001a84 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ab6:	2210      	movs	r2, #16
 8001ab8:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aba:	682b      	ldr	r3, [r5, #0]
 8001abc:	2420      	movs	r4, #32
 8001abe:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	f7ff ffad 	bl	8001a20 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001ac6:	682a      	ldr	r2, [r5, #0]
 8001ac8:	6853      	ldr	r3, [r2, #4]
 8001aca:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001ace:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001ad2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001adc:	2304      	movs	r3, #4
 8001ade:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 8001ae0:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001aea:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8001aee:	2001      	movs	r0, #1
 8001af0:	e7c8      	b.n	8001a84 <I2C_IsAcknowledgeFailed+0x14>

08001af2 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001af2:	b570      	push	{r4, r5, r6, lr}
 8001af4:	4604      	mov	r4, r0
 8001af6:	460d      	mov	r5, r1
 8001af8:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001afa:	6823      	ldr	r3, [r4, #0]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f013 0f02 	tst.w	r3, #2
 8001b02:	d11c      	bne.n	8001b3e <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b04:	4632      	mov	r2, r6
 8001b06:	4629      	mov	r1, r5
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f7ff ffb1 	bl	8001a70 <I2C_IsAcknowledgeFailed>
 8001b0e:	b9c0      	cbnz	r0, 8001b42 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8001b10:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001b14:	d0f1      	beq.n	8001afa <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001b16:	b125      	cbz	r5, 8001b22 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8001b18:	f7ff fbdc 	bl	80012d4 <HAL_GetTick>
 8001b1c:	1b80      	subs	r0, r0, r6
 8001b1e:	42a8      	cmp	r0, r5
 8001b20:	d9eb      	bls.n	8001afa <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b24:	f043 0320 	orr.w	r3, r3, #32
 8001b28:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 8001b2a:	2320      	movs	r3, #32
 8001b2c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001b36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8001b3a:	2003      	movs	r0, #3
 8001b3c:	e000      	b.n	8001b40 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001b3e:	2000      	movs	r0, #0
}
 8001b40:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001b42:	2001      	movs	r0, #1
 8001b44:	e7fc      	b.n	8001b40 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

08001b46 <I2C_WaitOnFlagUntilTimeout>:
{
 8001b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b4a:	4606      	mov	r6, r0
 8001b4c:	4688      	mov	r8, r1
 8001b4e:	4617      	mov	r7, r2
 8001b50:	461d      	mov	r5, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b52:	6834      	ldr	r4, [r6, #0]
 8001b54:	69a4      	ldr	r4, [r4, #24]
 8001b56:	ea38 0304 	bics.w	r3, r8, r4
 8001b5a:	bf0c      	ite	eq
 8001b5c:	2401      	moveq	r4, #1
 8001b5e:	2400      	movne	r4, #0
 8001b60:	42bc      	cmp	r4, r7
 8001b62:	d113      	bne.n	8001b8c <I2C_WaitOnFlagUntilTimeout+0x46>
    if(Timeout != HAL_MAX_DELAY)
 8001b64:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001b68:	d0f3      	beq.n	8001b52 <I2C_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001b6a:	b12d      	cbz	r5, 8001b78 <I2C_WaitOnFlagUntilTimeout+0x32>
 8001b6c:	f7ff fbb2 	bl	80012d4 <HAL_GetTick>
 8001b70:	9b06      	ldr	r3, [sp, #24]
 8001b72:	1ac0      	subs	r0, r0, r3
 8001b74:	42a8      	cmp	r0, r5
 8001b76:	d9ec      	bls.n	8001b52 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->State= HAL_I2C_STATE_READY;
 8001b78:	2320      	movs	r3, #32
 8001b7a:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001b84:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_TIMEOUT;
 8001b88:	2003      	movs	r0, #3
 8001b8a:	e000      	b.n	8001b8e <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8001b8c:	2000      	movs	r0, #0
}
 8001b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001b92 <I2C_RequestMemoryWrite>:
{
 8001b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	4604      	mov	r4, r0
 8001b9a:	4690      	mov	r8, r2
 8001b9c:	461d      	mov	r5, r3
 8001b9e:	9e08      	ldr	r6, [sp, #32]
 8001ba0:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ba2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bac:	b2ea      	uxtb	r2, r5
 8001bae:	f7ff ff48 	bl	8001a42 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bb2:	463a      	mov	r2, r7
 8001bb4:	4631      	mov	r1, r6
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f7ff ff9b 	bl	8001af2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bbc:	b130      	cbz	r0, 8001bcc <I2C_RequestMemoryWrite+0x3a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d001      	beq.n	8001bc8 <I2C_RequestMemoryWrite+0x36>
      return HAL_TIMEOUT;
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	e00f      	b.n	8001be8 <I2C_RequestMemoryWrite+0x56>
      return HAL_ERROR;
 8001bc8:	2001      	movs	r0, #1
 8001bca:	e00d      	b.n	8001be8 <I2C_RequestMemoryWrite+0x56>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bcc:	2d01      	cmp	r5, #1
 8001bce:	d10e      	bne.n	8001bee <I2C_RequestMemoryWrite+0x5c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bd0:	6823      	ldr	r3, [r4, #0]
 8001bd2:	fa5f f288 	uxtb.w	r2, r8
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001bd8:	9700      	str	r7, [sp, #0]
 8001bda:	4633      	mov	r3, r6
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2180      	movs	r1, #128	; 0x80
 8001be0:	4620      	mov	r0, r4
 8001be2:	f7ff ffb0 	bl	8001b46 <I2C_WaitOnFlagUntilTimeout>
 8001be6:	b9c0      	cbnz	r0, 8001c1a <I2C_RequestMemoryWrite+0x88>
}
 8001be8:	b002      	add	sp, #8
 8001bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bf6:	463a      	mov	r2, r7
 8001bf8:	4631      	mov	r1, r6
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f7ff ff79 	bl	8001af2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c00:	b130      	cbz	r0, 8001c10 <I2C_RequestMemoryWrite+0x7e>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d001      	beq.n	8001c0c <I2C_RequestMemoryWrite+0x7a>
        return HAL_TIMEOUT;
 8001c08:	2003      	movs	r0, #3
 8001c0a:	e7ed      	b.n	8001be8 <I2C_RequestMemoryWrite+0x56>
        return HAL_ERROR;
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	e7eb      	b.n	8001be8 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	fa5f f288 	uxtb.w	r2, r8
 8001c16:	629a      	str	r2, [r3, #40]	; 0x28
 8001c18:	e7de      	b.n	8001bd8 <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 8001c1a:	2003      	movs	r0, #3
 8001c1c:	e7e4      	b.n	8001be8 <I2C_RequestMemoryWrite+0x56>

08001c1e <I2C_RequestMemoryRead>:
{
 8001c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	4604      	mov	r4, r0
 8001c26:	4690      	mov	r8, r2
 8001c28:	461d      	mov	r5, r3
 8001c2a:	9e08      	ldr	r6, [sp, #32]
 8001c2c:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2300      	movs	r3, #0
 8001c36:	b2ea      	uxtb	r2, r5
 8001c38:	f7ff ff03 	bl	8001a42 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c3c:	463a      	mov	r2, r7
 8001c3e:	4631      	mov	r1, r6
 8001c40:	4620      	mov	r0, r4
 8001c42:	f7ff ff56 	bl	8001af2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c46:	b130      	cbz	r0, 8001c56 <I2C_RequestMemoryRead+0x38>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d001      	beq.n	8001c52 <I2C_RequestMemoryRead+0x34>
      return HAL_TIMEOUT;
 8001c4e:	2003      	movs	r0, #3
 8001c50:	e00f      	b.n	8001c72 <I2C_RequestMemoryRead+0x54>
      return HAL_ERROR;
 8001c52:	2001      	movs	r0, #1
 8001c54:	e00d      	b.n	8001c72 <I2C_RequestMemoryRead+0x54>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c56:	2d01      	cmp	r5, #1
 8001c58:	d10e      	bne.n	8001c78 <I2C_RequestMemoryRead+0x5a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c5a:	6823      	ldr	r3, [r4, #0]
 8001c5c:	fa5f f288 	uxtb.w	r2, r8
 8001c60:	629a      	str	r2, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001c62:	9700      	str	r7, [sp, #0]
 8001c64:	4633      	mov	r3, r6
 8001c66:	2200      	movs	r2, #0
 8001c68:	2140      	movs	r1, #64	; 0x40
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f7ff ff6b 	bl	8001b46 <I2C_WaitOnFlagUntilTimeout>
 8001c70:	b9c0      	cbnz	r0, 8001ca4 <I2C_RequestMemoryRead+0x86>
}
 8001c72:	b002      	add	sp, #8
 8001c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c80:	463a      	mov	r2, r7
 8001c82:	4631      	mov	r1, r6
 8001c84:	4620      	mov	r0, r4
 8001c86:	f7ff ff34 	bl	8001af2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c8a:	b130      	cbz	r0, 8001c9a <I2C_RequestMemoryRead+0x7c>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d001      	beq.n	8001c96 <I2C_RequestMemoryRead+0x78>
        return HAL_TIMEOUT;
 8001c92:	2003      	movs	r0, #3
 8001c94:	e7ed      	b.n	8001c72 <I2C_RequestMemoryRead+0x54>
        return HAL_ERROR;
 8001c96:	2001      	movs	r0, #1
 8001c98:	e7eb      	b.n	8001c72 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	fa5f f288 	uxtb.w	r2, r8
 8001ca0:	629a      	str	r2, [r3, #40]	; 0x28
 8001ca2:	e7de      	b.n	8001c62 <I2C_RequestMemoryRead+0x44>
    return HAL_TIMEOUT;
 8001ca4:	2003      	movs	r0, #3
 8001ca6:	e7e4      	b.n	8001c72 <I2C_RequestMemoryRead+0x54>

08001ca8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001ca8:	b570      	push	{r4, r5, r6, lr}
 8001caa:	4605      	mov	r5, r0
 8001cac:	460c      	mov	r4, r1
 8001cae:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cb0:	682b      	ldr	r3, [r5, #0]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f013 0f20 	tst.w	r3, #32
 8001cb8:	d119      	bne.n	8001cee <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cba:	4632      	mov	r2, r6
 8001cbc:	4621      	mov	r1, r4
 8001cbe:	4628      	mov	r0, r5
 8001cc0:	f7ff fed6 	bl	8001a70 <I2C_IsAcknowledgeFailed>
 8001cc4:	b9a8      	cbnz	r0, 8001cf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001cc6:	b124      	cbz	r4, 8001cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
 8001cc8:	f7ff fb04 	bl	80012d4 <HAL_GetTick>
 8001ccc:	1b80      	subs	r0, r0, r6
 8001cce:	42a0      	cmp	r0, r4
 8001cd0:	d9ee      	bls.n	8001cb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cd2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001cd4:	f043 0320 	orr.w	r3, r3, #32
 8001cd8:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001ce6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_TIMEOUT;
 8001cea:	2003      	movs	r0, #3
}
 8001cec:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001cee:	2000      	movs	r0, #0
 8001cf0:	e7fc      	b.n	8001cec <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
      return HAL_ERROR;
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	e7fa      	b.n	8001cec <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

08001cf6 <HAL_I2C_MspInit>:
}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_I2C_Init>:
  if(hi2c == NULL)
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	d057      	beq.n	8001dac <HAL_I2C_Init+0xb4>
{
 8001cfc:	b510      	push	{r4, lr}
 8001cfe:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001d00:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d041      	beq.n	8001d8c <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d08:	2324      	movs	r3, #36	; 0x24
 8001d0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001d0e:	6822      	ldr	r2, [r4, #0]
 8001d10:	6813      	ldr	r3, [r2, #0]
 8001d12:	f023 0301 	bic.w	r3, r3, #1
 8001d16:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d18:	6863      	ldr	r3, [r4, #4]
 8001d1a:	6822      	ldr	r2, [r4, #0]
 8001d1c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001d20:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d22:	6822      	ldr	r2, [r4, #0]
 8001d24:	6893      	ldr	r3, [r2, #8]
 8001d26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d2a:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d2c:	68e3      	ldr	r3, [r4, #12]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d031      	beq.n	8001d96 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d32:	68a3      	ldr	r3, [r4, #8]
 8001d34:	6822      	ldr	r2, [r4, #0]
 8001d36:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001d3a:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d3c:	68e3      	ldr	r3, [r4, #12]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d02f      	beq.n	8001da2 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d42:	6822      	ldr	r2, [r4, #0]
 8001d44:	6851      	ldr	r1, [r2, #4]
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <HAL_I2C_Init+0xb8>)
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d4c:	6822      	ldr	r2, [r4, #0]
 8001d4e:	68d3      	ldr	r3, [r2, #12]
 8001d50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d54:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d56:	6923      	ldr	r3, [r4, #16]
 8001d58:	6962      	ldr	r2, [r4, #20]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	69a1      	ldr	r1, [r4, #24]
 8001d5e:	6822      	ldr	r2, [r4, #0]
 8001d60:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d64:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d66:	69e3      	ldr	r3, [r4, #28]
 8001d68:	6a21      	ldr	r1, [r4, #32]
 8001d6a:	6822      	ldr	r2, [r4, #0]
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001d70:	6822      	ldr	r2, [r4, #0]
 8001d72:	6813      	ldr	r3, [r2, #0]
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d7e:	2320      	movs	r3, #32
 8001d80:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d84:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d86:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001d8a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001d8c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001d90:	f7ff ffb1 	bl	8001cf6 <HAL_I2C_MspInit>
 8001d94:	e7b8      	b.n	8001d08 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d96:	68a3      	ldr	r3, [r4, #8]
 8001d98:	6822      	ldr	r2, [r4, #0]
 8001d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d9e:	6093      	str	r3, [r2, #8]
 8001da0:	e7cc      	b.n	8001d3c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	e7ca      	b.n	8001d42 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001dac:	2001      	movs	r0, #1
}
 8001dae:	4770      	bx	lr
 8001db0:	02008000 	.word	0x02008000

08001db4 <HAL_I2C_MspDeInit>:
}
 8001db4:	4770      	bx	lr

08001db6 <HAL_I2C_DeInit>:
  if(hi2c == NULL)
 8001db6:	b1a8      	cbz	r0, 8001de4 <HAL_I2C_DeInit+0x2e>
{
 8001db8:	b510      	push	{r4, lr}
 8001dba:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dbc:	2324      	movs	r3, #36	; 0x24
 8001dbe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001dc2:	6802      	ldr	r2, [r0, #0]
 8001dc4:	6813      	ldr	r3, [r2, #0]
 8001dc6:	f023 0301 	bic.w	r3, r3, #1
 8001dca:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8001dcc:	f7ff fff2 	bl	8001db4 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001dd4:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dd8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dda:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 8001dde:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8001de2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001de4:	2001      	movs	r0, #1
}
 8001de6:	4770      	bx	lr

08001de8 <HAL_I2C_Mem_Write>:
{
 8001de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dec:	b083      	sub	sp, #12
 8001dee:	460d      	mov	r5, r1
 8001df0:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8001df4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001df6:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8001dfa:	b2c9      	uxtb	r1, r1
 8001dfc:	2920      	cmp	r1, #32
 8001dfe:	f040 80d1 	bne.w	8001fa4 <HAL_I2C_Mem_Write+0x1bc>
 8001e02:	4604      	mov	r4, r0
 8001e04:	4690      	mov	r8, r2
 8001e06:	4699      	mov	r9, r3
    if((pData == NULL) || (Size == 0U))
 8001e08:	faba f38a 	clz	r3, sl
 8001e0c:	095b      	lsrs	r3, r3, #5
 8001e0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001e10:	2a00      	cmp	r2, #0
 8001e12:	bf08      	it	eq
 8001e14:	2301      	moveq	r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f040 80c8 	bne.w	8001fac <HAL_I2C_Mem_Write+0x1c4>
    __HAL_LOCK(hi2c);
 8001e1c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	f000 80c5 	beq.w	8001fb0 <HAL_I2C_Mem_Write+0x1c8>
 8001e26:	f04f 0b01 	mov.w	fp, #1
 8001e2a:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001e2e:	f7ff fa51 	bl	80012d4 <HAL_GetTick>
 8001e32:	4606      	mov	r6, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e34:	9000      	str	r0, [sp, #0]
 8001e36:	2319      	movs	r3, #25
 8001e38:	465a      	mov	r2, fp
 8001e3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e3e:	4620      	mov	r0, r4
 8001e40:	f7ff fe81 	bl	8001b46 <I2C_WaitOnFlagUntilTimeout>
 8001e44:	2800      	cmp	r0, #0
 8001e46:	f040 80b5 	bne.w	8001fb4 <HAL_I2C_Mem_Write+0x1cc>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e4a:	2321      	movs	r3, #33	; 0x21
 8001e4c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e50:	2340      	movs	r3, #64	; 0x40
 8001e52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001e5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001e5c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e5e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e62:	6363      	str	r3, [r4, #52]	; 0x34
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e64:	9601      	str	r6, [sp, #4]
 8001e66:	9700      	str	r7, [sp, #0]
 8001e68:	464b      	mov	r3, r9
 8001e6a:	4642      	mov	r2, r8
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	4620      	mov	r0, r4
 8001e70:	f7ff fe8f 	bl	8001b92 <I2C_RequestMemoryWrite>
 8001e74:	b160      	cbz	r0, 8001e90 <HAL_I2C_Mem_Write+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d004      	beq.n	8001e86 <HAL_I2C_Mem_Write+0x9e>
        __HAL_UNLOCK(hi2c);
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8001e82:	2003      	movs	r0, #3
 8001e84:	e08f      	b.n	8001fa6 <HAL_I2C_Mem_Write+0x1be>
        __HAL_UNLOCK(hi2c);
 8001e86:	2300      	movs	r3, #0
 8001e88:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001e8c:	4658      	mov	r0, fp
 8001e8e:	e08a      	b.n	8001fa6 <HAL_I2C_Mem_Write+0x1be>
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2bff      	cmp	r3, #255	; 0xff
 8001e96:	d90a      	bls.n	8001eae <HAL_I2C_Mem_Write+0xc6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e98:	22ff      	movs	r2, #255	; 0xff
 8001e9a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	f7ff fdcb 	bl	8001a42 <I2C_TransferConfig>
 8001eac:	e023      	b.n	8001ef6 <HAL_I2C_Mem_Write+0x10e>
      hi2c->XferSize = hi2c->XferCount;
 8001eae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001eb0:	b292      	uxth	r2, r2
 8001eb2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	f7ff fdbe 	bl	8001a42 <I2C_TransferConfig>
 8001ec6:	e016      	b.n	8001ef6 <HAL_I2C_Mem_Write+0x10e>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ec8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Mem_Write+0xea>
          return HAL_TIMEOUT;
 8001ece:	2003      	movs	r0, #3
 8001ed0:	e069      	b.n	8001fa6 <HAL_I2C_Mem_Write+0x1be>
          return HAL_ERROR;
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	e067      	b.n	8001fa6 <HAL_I2C_Mem_Write+0x1be>
          hi2c->XferSize = hi2c->XferCount;
 8001ed6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ed8:	b292      	uxth	r2, r2
 8001eda:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001edc:	2300      	movs	r3, #0
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f7ff fdaa 	bl	8001a42 <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 8001eee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d033      	beq.n	8001f5e <HAL_I2C_Mem_Write+0x176>
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ef6:	4632      	mov	r2, r6
 8001ef8:	4639      	mov	r1, r7
 8001efa:	4620      	mov	r0, r4
 8001efc:	f7ff fdf9 	bl	8001af2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f00:	2800      	cmp	r0, #0
 8001f02:	d1e1      	bne.n	8001ec8 <HAL_I2C_Mem_Write+0xe0>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001f04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	6262      	str	r2, [r4, #36]	; 0x24
 8001f0a:	6822      	ldr	r2, [r4, #0]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8001f10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001f1a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	8523      	strh	r3, [r4, #40]	; 0x28
      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1e3      	bne.n	8001eee <HAL_I2C_Mem_Write+0x106>
 8001f26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0df      	beq.n	8001eee <HAL_I2C_Mem_Write+0x106>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f2e:	9600      	str	r6, [sp, #0]
 8001f30:	463b      	mov	r3, r7
 8001f32:	2200      	movs	r2, #0
 8001f34:	2180      	movs	r1, #128	; 0x80
 8001f36:	4620      	mov	r0, r4
 8001f38:	f7ff fe05 	bl	8001b46 <I2C_WaitOnFlagUntilTimeout>
 8001f3c:	2800      	cmp	r0, #0
 8001f3e:	d13b      	bne.n	8001fb8 <HAL_I2C_Mem_Write+0x1d0>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	2bff      	cmp	r3, #255	; 0xff
 8001f46:	d9c6      	bls.n	8001ed6 <HAL_I2C_Mem_Write+0xee>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f48:	22ff      	movs	r2, #255	; 0xff
 8001f4a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f54:	4629      	mov	r1, r5
 8001f56:	4620      	mov	r0, r4
 8001f58:	f7ff fd73 	bl	8001a42 <I2C_TransferConfig>
 8001f5c:	e7c7      	b.n	8001eee <HAL_I2C_Mem_Write+0x106>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f5e:	4632      	mov	r2, r6
 8001f60:	4639      	mov	r1, r7
 8001f62:	4620      	mov	r0, r4
 8001f64:	f7ff fea0 	bl	8001ca8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f68:	b130      	cbz	r0, 8001f78 <HAL_I2C_Mem_Write+0x190>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d001      	beq.n	8001f74 <HAL_I2C_Mem_Write+0x18c>
        return HAL_TIMEOUT;
 8001f70:	2003      	movs	r0, #3
 8001f72:	e018      	b.n	8001fa6 <HAL_I2C_Mem_Write+0x1be>
        return HAL_ERROR;
 8001f74:	2001      	movs	r0, #1
 8001f76:	e016      	b.n	8001fa6 <HAL_I2C_Mem_Write+0x1be>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001f7e:	6821      	ldr	r1, [r4, #0]
 8001f80:	684b      	ldr	r3, [r1, #4]
 8001f82:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001f86:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001f8a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f94:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001f9e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8001fa2:	e000      	b.n	8001fa6 <HAL_I2C_Mem_Write+0x1be>
    return HAL_BUSY;
 8001fa4:	2002      	movs	r0, #2
}
 8001fa6:	b003      	add	sp, #12
 8001fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 8001fac:	2001      	movs	r0, #1
 8001fae:	e7fa      	b.n	8001fa6 <HAL_I2C_Mem_Write+0x1be>
    __HAL_LOCK(hi2c);
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	e7f8      	b.n	8001fa6 <HAL_I2C_Mem_Write+0x1be>
      return HAL_TIMEOUT;
 8001fb4:	2003      	movs	r0, #3
 8001fb6:	e7f6      	b.n	8001fa6 <HAL_I2C_Mem_Write+0x1be>
          return HAL_TIMEOUT;
 8001fb8:	2003      	movs	r0, #3
 8001fba:	e7f4      	b.n	8001fa6 <HAL_I2C_Mem_Write+0x1be>

08001fbc <HAL_I2C_Mem_Read>:
{
 8001fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	460d      	mov	r5, r1
 8001fc4:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8001fc8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001fca:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8001fce:	b2c9      	uxtb	r1, r1
 8001fd0:	2920      	cmp	r1, #32
 8001fd2:	f040 80cd 	bne.w	8002170 <HAL_I2C_Mem_Read+0x1b4>
 8001fd6:	4604      	mov	r4, r0
 8001fd8:	4690      	mov	r8, r2
 8001fda:	4699      	mov	r9, r3
    if((pData == NULL) || (Size == 0U))
 8001fdc:	faba f38a 	clz	r3, sl
 8001fe0:	095b      	lsrs	r3, r3, #5
 8001fe2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001fe4:	2a00      	cmp	r2, #0
 8001fe6:	bf08      	it	eq
 8001fe8:	2301      	moveq	r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f040 80c4 	bne.w	8002178 <HAL_I2C_Mem_Read+0x1bc>
    __HAL_LOCK(hi2c);
 8001ff0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	f000 80c1 	beq.w	800217c <HAL_I2C_Mem_Read+0x1c0>
 8001ffa:	f04f 0b01 	mov.w	fp, #1
 8001ffe:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002002:	f7ff f967 	bl	80012d4 <HAL_GetTick>
 8002006:	4606      	mov	r6, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002008:	9000      	str	r0, [sp, #0]
 800200a:	2319      	movs	r3, #25
 800200c:	465a      	mov	r2, fp
 800200e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002012:	4620      	mov	r0, r4
 8002014:	f7ff fd97 	bl	8001b46 <I2C_WaitOnFlagUntilTimeout>
 8002018:	2800      	cmp	r0, #0
 800201a:	f040 80b1 	bne.w	8002180 <HAL_I2C_Mem_Read+0x1c4>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800201e:	2322      	movs	r3, #34	; 0x22
 8002020:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002024:	2340      	movs	r3, #64	; 0x40
 8002026:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800202a:	2300      	movs	r3, #0
 800202c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800202e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002030:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002032:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002036:	6363      	str	r3, [r4, #52]	; 0x34
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002038:	9601      	str	r6, [sp, #4]
 800203a:	9700      	str	r7, [sp, #0]
 800203c:	464b      	mov	r3, r9
 800203e:	4642      	mov	r2, r8
 8002040:	4629      	mov	r1, r5
 8002042:	4620      	mov	r0, r4
 8002044:	f7ff fdeb 	bl	8001c1e <I2C_RequestMemoryRead>
 8002048:	b160      	cbz	r0, 8002064 <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800204a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800204c:	2b04      	cmp	r3, #4
 800204e:	d004      	beq.n	800205a <HAL_I2C_Mem_Read+0x9e>
        __HAL_UNLOCK(hi2c);
 8002050:	2300      	movs	r3, #0
 8002052:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8002056:	2003      	movs	r0, #3
 8002058:	e08b      	b.n	8002172 <HAL_I2C_Mem_Read+0x1b6>
        __HAL_UNLOCK(hi2c);
 800205a:	2300      	movs	r3, #0
 800205c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002060:	4658      	mov	r0, fp
 8002062:	e086      	b.n	8002172 <HAL_I2C_Mem_Read+0x1b6>
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002064:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002066:	b29b      	uxth	r3, r3
 8002068:	2bff      	cmp	r3, #255	; 0xff
 800206a:	d90b      	bls.n	8002084 <HAL_I2C_Mem_Read+0xc8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800206c:	22ff      	movs	r2, #255	; 0xff
 800206e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002070:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800207a:	4629      	mov	r1, r5
 800207c:	4620      	mov	r0, r4
 800207e:	f7ff fce0 	bl	8001a42 <I2C_TransferConfig>
 8002082:	e01d      	b.n	80020c0 <HAL_I2C_Mem_Read+0x104>
      hi2c->XferSize = hi2c->XferCount;
 8002084:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002086:	b292      	uxth	r2, r2
 8002088:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800208a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	4629      	mov	r1, r5
 8002098:	4620      	mov	r0, r4
 800209a:	f7ff fcd2 	bl	8001a42 <I2C_TransferConfig>
 800209e:	e00f      	b.n	80020c0 <HAL_I2C_Mem_Read+0x104>
          hi2c->XferSize = hi2c->XferCount;
 80020a0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80020a2:	b292      	uxth	r2, r2
 80020a4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020a6:	2300      	movs	r3, #0
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	4629      	mov	r1, r5
 80020b2:	4620      	mov	r0, r4
 80020b4:	f7ff fcc5 	bl	8001a42 <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 80020b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d034      	beq.n	800212a <HAL_I2C_Mem_Read+0x16e>
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80020c0:	9600      	str	r6, [sp, #0]
 80020c2:	463b      	mov	r3, r7
 80020c4:	2200      	movs	r2, #0
 80020c6:	2104      	movs	r1, #4
 80020c8:	4620      	mov	r0, r4
 80020ca:	f7ff fd3c 	bl	8001b46 <I2C_WaitOnFlagUntilTimeout>
 80020ce:	2800      	cmp	r0, #0
 80020d0:	d158      	bne.n	8002184 <HAL_I2C_Mem_Read+0x1c8>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020d8:	1c59      	adds	r1, r3, #1
 80020da:	6261      	str	r1, [r4, #36]	; 0x24
 80020dc:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80020de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80020e0:	3a01      	subs	r2, #1
 80020e2:	b292      	uxth	r2, r2
 80020e4:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80020e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	3b01      	subs	r3, #1
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80020f0:	2a00      	cmp	r2, #0
 80020f2:	d1e1      	bne.n	80020b8 <HAL_I2C_Mem_Read+0xfc>
 80020f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0dd      	beq.n	80020b8 <HAL_I2C_Mem_Read+0xfc>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020fc:	9600      	str	r6, [sp, #0]
 80020fe:	463b      	mov	r3, r7
 8002100:	2180      	movs	r1, #128	; 0x80
 8002102:	4620      	mov	r0, r4
 8002104:	f7ff fd1f 	bl	8001b46 <I2C_WaitOnFlagUntilTimeout>
 8002108:	2800      	cmp	r0, #0
 800210a:	d13d      	bne.n	8002188 <HAL_I2C_Mem_Read+0x1cc>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800210c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800210e:	b29b      	uxth	r3, r3
 8002110:	2bff      	cmp	r3, #255	; 0xff
 8002112:	d9c5      	bls.n	80020a0 <HAL_I2C_Mem_Read+0xe4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002114:	22ff      	movs	r2, #255	; 0xff
 8002116:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002118:	2300      	movs	r3, #0
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002120:	4629      	mov	r1, r5
 8002122:	4620      	mov	r0, r4
 8002124:	f7ff fc8d 	bl	8001a42 <I2C_TransferConfig>
 8002128:	e7c6      	b.n	80020b8 <HAL_I2C_Mem_Read+0xfc>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800212a:	4632      	mov	r2, r6
 800212c:	4639      	mov	r1, r7
 800212e:	4620      	mov	r0, r4
 8002130:	f7ff fdba 	bl	8001ca8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002134:	b130      	cbz	r0, 8002144 <HAL_I2C_Mem_Read+0x188>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002136:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002138:	2b04      	cmp	r3, #4
 800213a:	d001      	beq.n	8002140 <HAL_I2C_Mem_Read+0x184>
        return HAL_TIMEOUT;
 800213c:	2003      	movs	r0, #3
 800213e:	e018      	b.n	8002172 <HAL_I2C_Mem_Read+0x1b6>
        return HAL_ERROR;
 8002140:	2001      	movs	r0, #1
 8002142:	e016      	b.n	8002172 <HAL_I2C_Mem_Read+0x1b6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	2220      	movs	r2, #32
 8002148:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800214a:	6821      	ldr	r1, [r4, #0]
 800214c:	684b      	ldr	r3, [r1, #4]
 800214e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002152:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002156:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002160:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002164:	2300      	movs	r3, #0
 8002166:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800216a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800216e:	e000      	b.n	8002172 <HAL_I2C_Mem_Read+0x1b6>
    return HAL_BUSY;
 8002170:	2002      	movs	r0, #2
}
 8002172:	b003      	add	sp, #12
 8002174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 8002178:	2001      	movs	r0, #1
 800217a:	e7fa      	b.n	8002172 <HAL_I2C_Mem_Read+0x1b6>
    __HAL_LOCK(hi2c);
 800217c:	2002      	movs	r0, #2
 800217e:	e7f8      	b.n	8002172 <HAL_I2C_Mem_Read+0x1b6>
      return HAL_TIMEOUT;
 8002180:	2003      	movs	r0, #3
 8002182:	e7f6      	b.n	8002172 <HAL_I2C_Mem_Read+0x1b6>
        return HAL_TIMEOUT;
 8002184:	2003      	movs	r0, #3
 8002186:	e7f4      	b.n	8002172 <HAL_I2C_Mem_Read+0x1b6>
          return HAL_TIMEOUT;
 8002188:	2003      	movs	r0, #3
 800218a:	e7f2      	b.n	8002172 <HAL_I2C_Mem_Read+0x1b6>

0800218c <HAL_I2C_GetState>:
  return hi2c->State;
 800218c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8002190:	4770      	bx	lr
	...

08002194 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002194:	b510      	push	{r4, lr}
 8002196:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_PWREx_EnableOverDrive+0x74>)
 800219a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800219c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021a0:	641a      	str	r2, [r3, #64]	; 0x40
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021ac:	4a17      	ldr	r2, [pc, #92]	; (800220c <HAL_PWREx_EnableOverDrive+0x78>)
 80021ae:	6813      	ldr	r3, [r2, #0]
 80021b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021b6:	f7ff f88d 	bl	80012d4 <HAL_GetTick>
 80021ba:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <HAL_PWREx_EnableOverDrive+0x78>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80021c4:	d108      	bne.n	80021d8 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021c6:	f7ff f885 	bl	80012d4 <HAL_GetTick>
 80021ca:	1b00      	subs	r0, r0, r4
 80021cc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80021d0:	d9f4      	bls.n	80021bc <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80021d2:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80021d4:	b002      	add	sp, #8
 80021d6:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021d8:	4a0c      	ldr	r2, [pc, #48]	; (800220c <HAL_PWREx_EnableOverDrive+0x78>)
 80021da:	6813      	ldr	r3, [r2, #0]
 80021dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80021e2:	f7ff f877 	bl	80012d4 <HAL_GetTick>
 80021e6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_PWREx_EnableOverDrive+0x78>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80021f0:	d107      	bne.n	8002202 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021f2:	f7ff f86f 	bl	80012d4 <HAL_GetTick>
 80021f6:	1b00      	subs	r0, r0, r4
 80021f8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80021fc:	d9f4      	bls.n	80021e8 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 80021fe:	2003      	movs	r0, #3
 8002200:	e7e8      	b.n	80021d4 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8002202:	2000      	movs	r0, #0
 8002204:	e7e6      	b.n	80021d4 <HAL_PWREx_EnableOverDrive+0x40>
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	40007000 	.word	0x40007000

08002210 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002210:	b570      	push	{r4, r5, r6, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002216:	6803      	ldr	r3, [r0, #0]
 8002218:	f013 0f01 	tst.w	r3, #1
 800221c:	d029      	beq.n	8002272 <HAL_RCC_OscConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800221e:	4ba8      	ldr	r3, [pc, #672]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b04      	cmp	r3, #4
 8002228:	d01a      	beq.n	8002260 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800222a:	4ba5      	ldr	r3, [pc, #660]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b08      	cmp	r3, #8
 8002234:	d00f      	beq.n	8002256 <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002236:	6863      	ldr	r3, [r4, #4]
 8002238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223c:	d040      	beq.n	80022c0 <HAL_RCC_OscConfig+0xb0>
 800223e:	2b00      	cmp	r3, #0
 8002240:	d154      	bne.n	80022ec <HAL_RCC_OscConfig+0xdc>
 8002242:	4b9f      	ldr	r3, [pc, #636]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	e039      	b.n	80022ca <HAL_RCC_OscConfig+0xba>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002256:	4b9a      	ldr	r3, [pc, #616]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800225e:	d0ea      	beq.n	8002236 <HAL_RCC_OscConfig+0x26>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	4b97      	ldr	r3, [pc, #604]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002268:	d003      	beq.n	8002272 <HAL_RCC_OscConfig+0x62>
 800226a:	6863      	ldr	r3, [r4, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 81d1 	beq.w	8002614 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	f013 0f02 	tst.w	r3, #2
 8002278:	d07a      	beq.n	8002370 <HAL_RCC_OscConfig+0x160>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800227a:	4b91      	ldr	r3, [pc, #580]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f013 0f0c 	tst.w	r3, #12
 8002282:	d05e      	beq.n	8002342 <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002284:	4b8e      	ldr	r3, [pc, #568]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b08      	cmp	r3, #8
 800228e:	d053      	beq.n	8002338 <HAL_RCC_OscConfig+0x128>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002290:	68e3      	ldr	r3, [r4, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8096 	beq.w	80023c4 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002298:	4a89      	ldr	r2, [pc, #548]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 800229a:	6813      	ldr	r3, [r2, #0]
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7ff f817 	bl	80012d4 <HAL_GetTick>
 80022a6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	4b85      	ldr	r3, [pc, #532]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f013 0f02 	tst.w	r3, #2
 80022b0:	d179      	bne.n	80023a6 <HAL_RCC_OscConfig+0x196>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b2:	f7ff f80f 	bl	80012d4 <HAL_GetTick>
 80022b6:	1b40      	subs	r0, r0, r5
 80022b8:	2802      	cmp	r0, #2
 80022ba:	d9f5      	bls.n	80022a8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80022bc:	2003      	movs	r0, #3
 80022be:	e1ae      	b.n	800261e <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c0:	4a7f      	ldr	r2, [pc, #508]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 80022c2:	6813      	ldr	r3, [r2, #0]
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ca:	6863      	ldr	r3, [r4, #4]
 80022cc:	b32b      	cbz	r3, 800231a <HAL_RCC_OscConfig+0x10a>
        tickstart = HAL_GetTick();
 80022ce:	f7ff f801 	bl	80012d4 <HAL_GetTick>
 80022d2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d4:	4b7a      	ldr	r3, [pc, #488]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80022dc:	d1c9      	bne.n	8002272 <HAL_RCC_OscConfig+0x62>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022de:	f7fe fff9 	bl	80012d4 <HAL_GetTick>
 80022e2:	1b40      	subs	r0, r0, r5
 80022e4:	2864      	cmp	r0, #100	; 0x64
 80022e6:	d9f5      	bls.n	80022d4 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 80022e8:	2003      	movs	r0, #3
 80022ea:	e198      	b.n	800261e <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f0:	d009      	beq.n	8002306 <HAL_RCC_OscConfig+0xf6>
 80022f2:	4b73      	ldr	r3, [pc, #460]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	e7e1      	b.n	80022ca <HAL_RCC_OscConfig+0xba>
 8002306:	4b6e      	ldr	r3, [pc, #440]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	e7d7      	b.n	80022ca <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 800231a:	f7fe ffdb 	bl	80012d4 <HAL_GetTick>
 800231e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002320:	4b67      	ldr	r3, [pc, #412]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002328:	d0a3      	beq.n	8002272 <HAL_RCC_OscConfig+0x62>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800232a:	f7fe ffd3 	bl	80012d4 <HAL_GetTick>
 800232e:	1b40      	subs	r0, r0, r5
 8002330:	2864      	cmp	r0, #100	; 0x64
 8002332:	d9f5      	bls.n	8002320 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8002334:	2003      	movs	r0, #3
 8002336:	e172      	b.n	800261e <HAL_RCC_OscConfig+0x40e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002338:	4b61      	ldr	r3, [pc, #388]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002340:	d1a6      	bne.n	8002290 <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	4b5f      	ldr	r3, [pc, #380]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f013 0f02 	tst.w	r3, #2
 800234a:	d003      	beq.n	8002354 <HAL_RCC_OscConfig+0x144>
 800234c:	68e3      	ldr	r3, [r4, #12]
 800234e:	2b01      	cmp	r3, #1
 8002350:	f040 8162 	bne.w	8002618 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002354:	485a      	ldr	r0, [pc, #360]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 8002356:	6803      	ldr	r3, [r0, #0]
 8002358:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800235c:	6921      	ldr	r1, [r4, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	22f8      	movs	r2, #248	; 0xf8
 8002360:	fa92 f2a2 	rbit	r2, r2
 8002364:	fab2 f282 	clz	r2, r2
 8002368:	fa01 f202 	lsl.w	r2, r1, r2
 800236c:	4313      	orrs	r3, r2
 800236e:	6003      	str	r3, [r0, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002370:	6823      	ldr	r3, [r4, #0]
 8002372:	f013 0f08 	tst.w	r3, #8
 8002376:	d04d      	beq.n	8002414 <HAL_RCC_OscConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002378:	6963      	ldr	r3, [r4, #20]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d036      	beq.n	80023ec <HAL_RCC_OscConfig+0x1dc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237e:	4a50      	ldr	r2, [pc, #320]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 8002380:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002388:	f7fe ffa4 	bl	80012d4 <HAL_GetTick>
 800238c:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238e:	4b4c      	ldr	r3, [pc, #304]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 8002390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002392:	f013 0f02 	tst.w	r3, #2
 8002396:	d13d      	bne.n	8002414 <HAL_RCC_OscConfig+0x204>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002398:	f7fe ff9c 	bl	80012d4 <HAL_GetTick>
 800239c:	1b40      	subs	r0, r0, r5
 800239e:	2802      	cmp	r0, #2
 80023a0:	d9f5      	bls.n	800238e <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 80023a2:	2003      	movs	r0, #3
 80023a4:	e13b      	b.n	800261e <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a6:	4846      	ldr	r0, [pc, #280]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 80023a8:	6803      	ldr	r3, [r0, #0]
 80023aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80023ae:	6921      	ldr	r1, [r4, #16]
 80023b0:	22f8      	movs	r2, #248	; 0xf8
 80023b2:	fa92 f2a2 	rbit	r2, r2
 80023b6:	fab2 f282 	clz	r2, r2
 80023ba:	fa01 f202 	lsl.w	r2, r1, r2
 80023be:	4313      	orrs	r3, r2
 80023c0:	6003      	str	r3, [r0, #0]
 80023c2:	e7d5      	b.n	8002370 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_DISABLE();
 80023c4:	4a3e      	ldr	r2, [pc, #248]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 80023c6:	6813      	ldr	r3, [r2, #0]
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80023ce:	f7fe ff81 	bl	80012d4 <HAL_GetTick>
 80023d2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d4:	4b3a      	ldr	r3, [pc, #232]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f013 0f02 	tst.w	r3, #2
 80023dc:	d0c8      	beq.n	8002370 <HAL_RCC_OscConfig+0x160>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023de:	f7fe ff79 	bl	80012d4 <HAL_GetTick>
 80023e2:	1b40      	subs	r0, r0, r5
 80023e4:	2802      	cmp	r0, #2
 80023e6:	d9f5      	bls.n	80023d4 <HAL_RCC_OscConfig+0x1c4>
            return HAL_TIMEOUT;
 80023e8:	2003      	movs	r0, #3
 80023ea:	e118      	b.n	800261e <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ec:	4a34      	ldr	r2, [pc, #208]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 80023ee:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f6:	f7fe ff6d 	bl	80012d4 <HAL_GetTick>
 80023fa:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fc:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 80023fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002400:	f013 0f02 	tst.w	r3, #2
 8002404:	d006      	beq.n	8002414 <HAL_RCC_OscConfig+0x204>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002406:	f7fe ff65 	bl	80012d4 <HAL_GetTick>
 800240a:	1b40      	subs	r0, r0, r5
 800240c:	2802      	cmp	r0, #2
 800240e:	d9f5      	bls.n	80023fc <HAL_RCC_OscConfig+0x1ec>
        {
          return HAL_TIMEOUT;
 8002410:	2003      	movs	r0, #3
 8002412:	e104      	b.n	800261e <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	f013 0f04 	tst.w	r3, #4
 800241a:	d07d      	beq.n	8002518 <HAL_RCC_OscConfig+0x308>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241c:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002424:	d10b      	bne.n	800243e <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 8002428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800242a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800242e:	641a      	str	r2, [r3, #64]	; 0x40
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800243a:	2501      	movs	r5, #1
 800243c:	e000      	b.n	8002440 <HAL_RCC_OscConfig+0x230>
  FlagStatus pwrclkchanged = RESET;
 800243e:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002440:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <HAL_RCC_OscConfig+0x2b4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002448:	d00e      	beq.n	8002468 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800244a:	68a3      	ldr	r3, [r4, #8]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d01f      	beq.n	8002490 <HAL_RCC_OscConfig+0x280>
 8002450:	2b00      	cmp	r3, #0
 8002452:	d139      	bne.n	80024c8 <HAL_RCC_OscConfig+0x2b8>
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 8002456:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002458:	f022 0201 	bic.w	r2, r2, #1
 800245c:	671a      	str	r2, [r3, #112]	; 0x70
 800245e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002460:	f022 0204 	bic.w	r2, r2, #4
 8002464:	671a      	str	r2, [r3, #112]	; 0x70
 8002466:	e018      	b.n	800249a <HAL_RCC_OscConfig+0x28a>
      PWR->CR1 |= PWR_CR1_DBP;
 8002468:	4a16      	ldr	r2, [pc, #88]	; (80024c4 <HAL_RCC_OscConfig+0x2b4>)
 800246a:	6813      	ldr	r3, [r2, #0]
 800246c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002470:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002472:	f7fe ff2f 	bl	80012d4 <HAL_GetTick>
 8002476:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_RCC_OscConfig+0x2b4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002480:	d1e3      	bne.n	800244a <HAL_RCC_OscConfig+0x23a>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002482:	f7fe ff27 	bl	80012d4 <HAL_GetTick>
 8002486:	1b80      	subs	r0, r0, r6
 8002488:	2864      	cmp	r0, #100	; 0x64
 800248a:	d9f5      	bls.n	8002478 <HAL_RCC_OscConfig+0x268>
          return HAL_TIMEOUT;
 800248c:	2003      	movs	r0, #3
 800248e:	e0c6      	b.n	800261e <HAL_RCC_OscConfig+0x40e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002490:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 8002492:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800249a:	68a3      	ldr	r3, [r4, #8]
 800249c:	b353      	cbz	r3, 80024f4 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7fe ff19 	bl	80012d4 <HAL_GetTick>
 80024a2:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 80024a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a8:	f013 0f02 	tst.w	r3, #2
 80024ac:	d133      	bne.n	8002516 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7fe ff11 	bl	80012d4 <HAL_GetTick>
 80024b2:	1b80      	subs	r0, r0, r6
 80024b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80024b8:	4298      	cmp	r0, r3
 80024ba:	d9f3      	bls.n	80024a4 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 80024bc:	2003      	movs	r0, #3
 80024be:	e0ae      	b.n	800261e <HAL_RCC_OscConfig+0x40e>
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c8:	2b05      	cmp	r3, #5
 80024ca:	d009      	beq.n	80024e0 <HAL_RCC_OscConfig+0x2d0>
 80024cc:	4b56      	ldr	r3, [pc, #344]	; (8002628 <HAL_RCC_OscConfig+0x418>)
 80024ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024d0:	f022 0201 	bic.w	r2, r2, #1
 80024d4:	671a      	str	r2, [r3, #112]	; 0x70
 80024d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024d8:	f022 0204 	bic.w	r2, r2, #4
 80024dc:	671a      	str	r2, [r3, #112]	; 0x70
 80024de:	e7dc      	b.n	800249a <HAL_RCC_OscConfig+0x28a>
 80024e0:	4b51      	ldr	r3, [pc, #324]	; (8002628 <HAL_RCC_OscConfig+0x418>)
 80024e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024e4:	f042 0204 	orr.w	r2, r2, #4
 80024e8:	671a      	str	r2, [r3, #112]	; 0x70
 80024ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	671a      	str	r2, [r3, #112]	; 0x70
 80024f2:	e7d2      	b.n	800249a <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f4:	f7fe feee 	bl	80012d4 <HAL_GetTick>
 80024f8:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fa:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <HAL_RCC_OscConfig+0x418>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	f013 0f02 	tst.w	r3, #2
 8002502:	d008      	beq.n	8002516 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002504:	f7fe fee6 	bl	80012d4 <HAL_GetTick>
 8002508:	1b80      	subs	r0, r0, r6
 800250a:	f241 3388 	movw	r3, #5000	; 0x1388
 800250e:	4298      	cmp	r0, r3
 8002510:	d9f3      	bls.n	80024fa <HAL_RCC_OscConfig+0x2ea>
        {
          return HAL_TIMEOUT;
 8002512:	2003      	movs	r0, #3
 8002514:	e083      	b.n	800261e <HAL_RCC_OscConfig+0x40e>
        }       
      }
    }
    
    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002516:	b9f5      	cbnz	r5, 8002556 <HAL_RCC_OscConfig+0x346>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002518:	69a3      	ldr	r3, [r4, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d07e      	beq.n	800261c <HAL_RCC_OscConfig+0x40c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800251e:	4a42      	ldr	r2, [pc, #264]	; (8002628 <HAL_RCC_OscConfig+0x418>)
 8002520:	6892      	ldr	r2, [r2, #8]
 8002522:	f002 020c 	and.w	r2, r2, #12
 8002526:	2a08      	cmp	r2, #8
 8002528:	d07b      	beq.n	8002622 <HAL_RCC_OscConfig+0x412>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252a:	2b02      	cmp	r3, #2
 800252c:	d019      	beq.n	8002562 <HAL_RCC_OscConfig+0x352>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252e:	4a3e      	ldr	r2, [pc, #248]	; (8002628 <HAL_RCC_OscConfig+0x418>)
 8002530:	6813      	ldr	r3, [r2, #0]
 8002532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002536:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe fecc 	bl	80012d4 <HAL_GetTick>
 800253c:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	4b3a      	ldr	r3, [pc, #232]	; (8002628 <HAL_RCC_OscConfig+0x418>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002546:	d063      	beq.n	8002610 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002548:	f7fe fec4 	bl	80012d4 <HAL_GetTick>
 800254c:	1b00      	subs	r0, r0, r4
 800254e:	2802      	cmp	r0, #2
 8002550:	d9f5      	bls.n	800253e <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8002552:	2003      	movs	r0, #3
 8002554:	e063      	b.n	800261e <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002556:	4a34      	ldr	r2, [pc, #208]	; (8002628 <HAL_RCC_OscConfig+0x418>)
 8002558:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800255a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800255e:	6413      	str	r3, [r2, #64]	; 0x40
 8002560:	e7da      	b.n	8002518 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8002562:	4a31      	ldr	r2, [pc, #196]	; (8002628 <HAL_RCC_OscConfig+0x418>)
 8002564:	6813      	ldr	r3, [r2, #0]
 8002566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800256a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800256c:	f7fe feb2 	bl	80012d4 <HAL_GetTick>
 8002570:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002572:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <HAL_RCC_OscConfig+0x418>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800257a:	d006      	beq.n	800258a <HAL_RCC_OscConfig+0x37a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257c:	f7fe feaa 	bl	80012d4 <HAL_GetTick>
 8002580:	1b40      	subs	r0, r0, r5
 8002582:	2802      	cmp	r0, #2
 8002584:	d9f5      	bls.n	8002572 <HAL_RCC_OscConfig+0x362>
            return HAL_TIMEOUT;
 8002586:	2003      	movs	r0, #3
 8002588:	e049      	b.n	800261e <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800258a:	69e3      	ldr	r3, [r4, #28]
 800258c:	6a22      	ldr	r2, [r4, #32]
 800258e:	4313      	orrs	r3, r2
 8002590:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002592:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002596:	fa92 f2a2 	rbit	r2, r2
 800259a:	fab2 f282 	clz	r2, r2
 800259e:	fa01 f202 	lsl.w	r2, r1, r2
 80025a2:	4313      	orrs	r3, r2
 80025a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80025a6:	0852      	lsrs	r2, r2, #1
 80025a8:	3a01      	subs	r2, #1
 80025aa:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80025ae:	fa91 f1a1 	rbit	r1, r1
 80025b2:	fab1 f181 	clz	r1, r1
 80025b6:	408a      	lsls	r2, r1
 80025b8:	4313      	orrs	r3, r2
 80025ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80025bc:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80025c0:	fa92 f2a2 	rbit	r2, r2
 80025c4:	fab2 f282 	clz	r2, r2
 80025c8:	fa01 f202 	lsl.w	r2, r1, r2
 80025cc:	4313      	orrs	r3, r2
 80025ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80025d0:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80025d4:	fa92 f2a2 	rbit	r2, r2
 80025d8:	fab2 f282 	clz	r2, r2
 80025dc:	fa01 f202 	lsl.w	r2, r1, r2
 80025e0:	4313      	orrs	r3, r2
 80025e2:	4a11      	ldr	r2, [pc, #68]	; (8002628 <HAL_RCC_OscConfig+0x418>)
 80025e4:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80025e6:	6813      	ldr	r3, [r2, #0]
 80025e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ec:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80025ee:	f7fe fe71 	bl	80012d4 <HAL_GetTick>
 80025f2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <HAL_RCC_OscConfig+0x418>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80025fc:	d106      	bne.n	800260c <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fe:	f7fe fe69 	bl	80012d4 <HAL_GetTick>
 8002602:	1b00      	subs	r0, r0, r4
 8002604:	2802      	cmp	r0, #2
 8002606:	d9f5      	bls.n	80025f4 <HAL_RCC_OscConfig+0x3e4>
            return HAL_TIMEOUT;
 8002608:	2003      	movs	r0, #3
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x40e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800260c:	2000      	movs	r0, #0
 800260e:	e006      	b.n	800261e <HAL_RCC_OscConfig+0x40e>
 8002610:	2000      	movs	r0, #0
 8002612:	e004      	b.n	800261e <HAL_RCC_OscConfig+0x40e>
        return HAL_ERROR;
 8002614:	2001      	movs	r0, #1
 8002616:	e002      	b.n	800261e <HAL_RCC_OscConfig+0x40e>
        return HAL_ERROR;
 8002618:	2001      	movs	r0, #1
 800261a:	e000      	b.n	800261e <HAL_RCC_OscConfig+0x40e>
  return HAL_OK;
 800261c:	2000      	movs	r0, #0
}
 800261e:	b002      	add	sp, #8
 8002620:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002622:	2001      	movs	r0, #1
 8002624:	e7fb      	b.n	800261e <HAL_RCC_OscConfig+0x40e>
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800

0800262c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800262c:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x88>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b04      	cmp	r3, #4
 8002636:	d038      	beq.n	80026aa <HAL_RCC_GetSysClockFreq+0x7e>
 8002638:	2b08      	cmp	r3, #8
 800263a:	d138      	bne.n	80026ae <HAL_RCC_GetSysClockFreq+0x82>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800263c:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x88>)
 800263e:	6858      	ldr	r0, [r3, #4]
 8002640:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800264a:	d01e      	beq.n	800268a <HAL_RCC_GetSysClockFreq+0x5e>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800264c:	4a1a      	ldr	r2, [pc, #104]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x8c>)
 800264e:	fbb2 f2f0 	udiv	r2, r2, r0
 8002652:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x88>)
 8002654:	6858      	ldr	r0, [r3, #4]
 8002656:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800265a:	4018      	ands	r0, r3
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	fab3 f383 	clz	r3, r3
 8002664:	40d8      	lsrs	r0, r3
 8002666:	fb00 f002 	mul.w	r0, r0, r2
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 800266a:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x88>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002672:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002676:	fa92 f2a2 	rbit	r2, r2
 800267a:	fab2 f282 	clz	r2, r2
 800267e:	40d3      	lsrs	r3, r2
 8002680:	3301      	adds	r3, #1
 8002682:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 8002684:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002688:	4770      	bx	lr
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800268a:	4a0c      	ldr	r2, [pc, #48]	; (80026bc <HAL_RCC_GetSysClockFreq+0x90>)
 800268c:	fbb2 f2f0 	udiv	r2, r2, r0
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x88>)
 8002692:	6858      	ldr	r0, [r3, #4]
 8002694:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002698:	4018      	ands	r0, r3
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	40d8      	lsrs	r0, r3
 80026a4:	fb00 f002 	mul.w	r0, r0, r2
 80026a8:	e7df      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x3e>
      sysclockfreq = HSE_VALUE;
 80026aa:	4803      	ldr	r0, [pc, #12]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x8c>)
 80026ac:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ae:	4803      	ldr	r0, [pc, #12]	; (80026bc <HAL_RCC_GetSysClockFreq+0x90>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	017d7840 	.word	0x017d7840
 80026bc:	00f42400 	.word	0x00f42400

080026c0 <HAL_RCC_ClockConfig>:
{
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	4604      	mov	r4, r0
 80026c4:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80026c6:	4b5c      	ldr	r3, [pc, #368]	; (8002838 <HAL_RCC_ClockConfig+0x178>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	428b      	cmp	r3, r1
 80026d0:	d20b      	bcs.n	80026ea <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4a59      	ldr	r2, [pc, #356]	; (8002838 <HAL_RCC_ClockConfig+0x178>)
 80026d4:	6813      	ldr	r3, [r2, #0]
 80026d6:	f023 030f 	bic.w	r3, r3, #15
 80026da:	430b      	orrs	r3, r1
 80026dc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026de:	6813      	ldr	r3, [r2, #0]
 80026e0:	f003 030f 	and.w	r3, r3, #15
 80026e4:	428b      	cmp	r3, r1
 80026e6:	f040 80a0 	bne.w	800282a <HAL_RCC_ClockConfig+0x16a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	f013 0f02 	tst.w	r3, #2
 80026f0:	d006      	beq.n	8002700 <HAL_RCC_ClockConfig+0x40>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f2:	4a52      	ldr	r2, [pc, #328]	; (800283c <HAL_RCC_ClockConfig+0x17c>)
 80026f4:	6893      	ldr	r3, [r2, #8]
 80026f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026fa:	68a1      	ldr	r1, [r4, #8]
 80026fc:	430b      	orrs	r3, r1
 80026fe:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	f013 0f01 	tst.w	r3, #1
 8002706:	d052      	beq.n	80027ae <HAL_RCC_ClockConfig+0xee>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002708:	6863      	ldr	r3, [r4, #4]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d023      	beq.n	8002756 <HAL_RCC_ClockConfig+0x96>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800270e:	2b02      	cmp	r3, #2
 8002710:	d028      	beq.n	8002764 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002712:	4a4a      	ldr	r2, [pc, #296]	; (800283c <HAL_RCC_ClockConfig+0x17c>)
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	f012 0f02 	tst.w	r2, #2
 800271a:	f000 8088 	beq.w	800282e <HAL_RCC_ClockConfig+0x16e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800271e:	4947      	ldr	r1, [pc, #284]	; (800283c <HAL_RCC_ClockConfig+0x17c>)
 8002720:	688a      	ldr	r2, [r1, #8]
 8002722:	f022 0203 	bic.w	r2, r2, #3
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800272a:	f7fe fdd3 	bl	80012d4 <HAL_GetTick>
 800272e:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002730:	6863      	ldr	r3, [r4, #4]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d01d      	beq.n	8002772 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002736:	2b02      	cmp	r3, #2
 8002738:	d02a      	beq.n	8002790 <HAL_RCC_ClockConfig+0xd0>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800273a:	4b40      	ldr	r3, [pc, #256]	; (800283c <HAL_RCC_ClockConfig+0x17c>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f013 0f0c 	tst.w	r3, #12
 8002742:	d034      	beq.n	80027ae <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002744:	f7fe fdc6 	bl	80012d4 <HAL_GetTick>
 8002748:	1b83      	subs	r3, r0, r6
 800274a:	f241 3288 	movw	r2, #5000	; 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d9f3      	bls.n	800273a <HAL_RCC_ClockConfig+0x7a>
          return HAL_TIMEOUT;
 8002752:	2003      	movs	r0, #3
 8002754:	e068      	b.n	8002828 <HAL_RCC_ClockConfig+0x168>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	4a39      	ldr	r2, [pc, #228]	; (800283c <HAL_RCC_ClockConfig+0x17c>)
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800275e:	d1de      	bne.n	800271e <HAL_RCC_ClockConfig+0x5e>
        return HAL_ERROR;
 8002760:	2001      	movs	r0, #1
 8002762:	e061      	b.n	8002828 <HAL_RCC_ClockConfig+0x168>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	4a35      	ldr	r2, [pc, #212]	; (800283c <HAL_RCC_ClockConfig+0x17c>)
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800276c:	d1d7      	bne.n	800271e <HAL_RCC_ClockConfig+0x5e>
        return HAL_ERROR;
 800276e:	2001      	movs	r0, #1
 8002770:	e05a      	b.n	8002828 <HAL_RCC_ClockConfig+0x168>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002772:	4b32      	ldr	r3, [pc, #200]	; (800283c <HAL_RCC_ClockConfig+0x17c>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b04      	cmp	r3, #4
 800277c:	d017      	beq.n	80027ae <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277e:	f7fe fda9 	bl	80012d4 <HAL_GetTick>
 8002782:	1b83      	subs	r3, r0, r6
 8002784:	f241 3288 	movw	r2, #5000	; 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d9f2      	bls.n	8002772 <HAL_RCC_ClockConfig+0xb2>
          return HAL_TIMEOUT;
 800278c:	2003      	movs	r0, #3
 800278e:	e04b      	b.n	8002828 <HAL_RCC_ClockConfig+0x168>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002790:	4b2a      	ldr	r3, [pc, #168]	; (800283c <HAL_RCC_ClockConfig+0x17c>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b08      	cmp	r3, #8
 800279a:	d008      	beq.n	80027ae <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279c:	f7fe fd9a 	bl	80012d4 <HAL_GetTick>
 80027a0:	1b80      	subs	r0, r0, r6
 80027a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80027a6:	4298      	cmp	r0, r3
 80027a8:	d9f2      	bls.n	8002790 <HAL_RCC_ClockConfig+0xd0>
          return HAL_TIMEOUT;
 80027aa:	2003      	movs	r0, #3
 80027ac:	e03c      	b.n	8002828 <HAL_RCC_ClockConfig+0x168>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80027ae:	4b22      	ldr	r3, [pc, #136]	; (8002838 <HAL_RCC_ClockConfig+0x178>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	42ab      	cmp	r3, r5
 80027b8:	d90a      	bls.n	80027d0 <HAL_RCC_ClockConfig+0x110>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ba:	4a1f      	ldr	r2, [pc, #124]	; (8002838 <HAL_RCC_ClockConfig+0x178>)
 80027bc:	6813      	ldr	r3, [r2, #0]
 80027be:	f023 030f 	bic.w	r3, r3, #15
 80027c2:	432b      	orrs	r3, r5
 80027c4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027c6:	6813      	ldr	r3, [r2, #0]
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	42ab      	cmp	r3, r5
 80027ce:	d130      	bne.n	8002832 <HAL_RCC_ClockConfig+0x172>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	f013 0f04 	tst.w	r3, #4
 80027d6:	d006      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d8:	4a18      	ldr	r2, [pc, #96]	; (800283c <HAL_RCC_ClockConfig+0x17c>)
 80027da:	6893      	ldr	r3, [r2, #8]
 80027dc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80027e0:	68e1      	ldr	r1, [r4, #12]
 80027e2:	430b      	orrs	r3, r1
 80027e4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e6:	6823      	ldr	r3, [r4, #0]
 80027e8:	f013 0f08 	tst.w	r3, #8
 80027ec:	d007      	beq.n	80027fe <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ee:	4a13      	ldr	r2, [pc, #76]	; (800283c <HAL_RCC_ClockConfig+0x17c>)
 80027f0:	6893      	ldr	r3, [r2, #8]
 80027f2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80027f6:	6921      	ldr	r1, [r4, #16]
 80027f8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027fc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80027fe:	f7ff ff15 	bl	800262c <HAL_RCC_GetSysClockFreq>
 8002802:	4b0e      	ldr	r3, [pc, #56]	; (800283c <HAL_RCC_ClockConfig+0x17c>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800280a:	22f0      	movs	r2, #240	; 0xf0
 800280c:	fa92 f2a2 	rbit	r2, r2
 8002810:	fab2 f282 	clz	r2, r2
 8002814:	40d3      	lsrs	r3, r2
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <HAL_RCC_ClockConfig+0x180>)
 8002818:	5cd3      	ldrb	r3, [r2, r3]
 800281a:	40d8      	lsrs	r0, r3
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_RCC_ClockConfig+0x184>)
 800281e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002820:	2000      	movs	r0, #0
 8002822:	f7fe fd2d 	bl	8001280 <HAL_InitTick>
  return HAL_OK;
 8002826:	2000      	movs	r0, #0
}
 8002828:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800282a:	2001      	movs	r0, #1
 800282c:	e7fc      	b.n	8002828 <HAL_RCC_ClockConfig+0x168>
        return HAL_ERROR;
 800282e:	2001      	movs	r0, #1
 8002830:	e7fa      	b.n	8002828 <HAL_RCC_ClockConfig+0x168>
      return HAL_ERROR;
 8002832:	2001      	movs	r0, #1
 8002834:	e7f8      	b.n	8002828 <HAL_RCC_ClockConfig+0x168>
 8002836:	bf00      	nop
 8002838:	40023c00 	.word	0x40023c00
 800283c:	40023800 	.word	0x40023800
 8002840:	080058c0 	.word	0x080058c0
 8002844:	20000030 	.word	0x20000030

08002848 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002848:	4b01      	ldr	r3, [pc, #4]	; (8002850 <HAL_RCC_GetHCLKFreq+0x8>)
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000030 	.word	0x20000030

08002854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8002854:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002856:	f7ff fff7 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 800285a:	4b07      	ldr	r3, [pc, #28]	; (8002878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002862:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002866:	fa92 f2a2 	rbit	r2, r2
 800286a:	fab2 f282 	clz	r2, r2
 800286e:	40d3      	lsrs	r3, r2
 8002870:	4a02      	ldr	r2, [pc, #8]	; (800287c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002872:	5cd3      	ldrb	r3, [r2, r3]
}
 8002874:	40d8      	lsrs	r0, r3
 8002876:	bd08      	pop	{r3, pc}
 8002878:	40023800 	.word	0x40023800
 800287c:	080058d0 	.word	0x080058d0

08002880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002880:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002882:	f7ff ffe1 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 8002886:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800288e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002892:	fa92 f2a2 	rbit	r2, r2
 8002896:	fab2 f282 	clz	r2, r2
 800289a:	40d3      	lsrs	r3, r2
 800289c:	4a02      	ldr	r2, [pc, #8]	; (80028a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800289e:	5cd3      	ldrb	r3, [r2, r3]
} 
 80028a0:	40d8      	lsrs	r0, r3
 80028a2:	bd08      	pop	{r3, pc}
 80028a4:	40023800 	.word	0x40023800
 80028a8:	080058d0 	.word	0x080058d0

080028ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ae:	b083      	sub	sp, #12
 80028b0:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028b2:	6806      	ldr	r6, [r0, #0]
 80028b4:	f016 0601 	ands.w	r6, r6, #1
 80028b8:	d00d      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028ba:	4bb5      	ldr	r3, [pc, #724]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80028c8:	430a      	orrs	r2, r1
 80028ca:	609a      	str	r2, [r3, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8155 	beq.w	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  uint32_t plli2sused = 0;
 80028d4:	2600      	movs	r6, #0
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028d6:	6825      	ldr	r5, [r4, #0]
 80028d8:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 80028dc:	d011      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028de:	4aac      	ldr	r2, [pc, #688]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028e0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80028e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80028e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80028ea:	430b      	orrs	r3, r1
 80028ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f6:	f000 8144 	beq.w	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 8143 	beq.w	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  uint32_t pllsaiused = 0;
 8002900:	2500      	movs	r5, #0
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002908:	d00f      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800290a:	4aa1      	ldr	r2, [pc, #644]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800290c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002910:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002914:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002916:	430b      	orrs	r3, r1
 8002918:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800291c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800291e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002922:	f000 8132 	beq.w	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002926:	b903      	cbnz	r3, 800292a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1; 
 8002928:	2501      	movs	r5, #1
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800292a:	6823      	ldr	r3, [r4, #0]
 800292c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002930:	d000      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {    
      plli2sused = 1; 
 8002932:	2601      	movs	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002934:	f013 0f20 	tst.w	r3, #32
 8002938:	f040 812c 	bne.w	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800293c:	6823      	ldr	r3, [r4, #0]
 800293e:	f013 0f10 	tst.w	r3, #16
 8002942:	d00c      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002944:	4b92      	ldr	r3, [pc, #584]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002946:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800294a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800294e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8002952:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002956:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002958:	430a      	orrs	r2, r1
 800295a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002964:	d008      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002966:	4a8a      	ldr	r2, [pc, #552]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002968:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800296c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002970:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002972:	430b      	orrs	r3, r1
 8002974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002978:	6823      	ldr	r3, [r4, #0]
 800297a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800297e:	d008      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002980:	4a83      	ldr	r2, [pc, #524]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002982:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002986:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800298a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800298c:	430b      	orrs	r3, r1
 800298e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002998:	d008      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800299a:	4a7d      	ldr	r2, [pc, #500]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800299c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80029a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80029a4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80029a6:	430b      	orrs	r3, r1
 80029a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80029b2:	d008      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029b4:	4a76      	ldr	r2, [pc, #472]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029b6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80029ba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80029be:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80029c0:	430b      	orrs	r3, r1
 80029c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80029cc:	d008      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029ce:	4a70      	ldr	r2, [pc, #448]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029d0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80029d4:	f023 0303 	bic.w	r3, r3, #3
 80029d8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80029da:	430b      	orrs	r3, r1
 80029dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80029e6:	d008      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029e8:	4a69      	ldr	r2, [pc, #420]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80029ee:	f023 030c 	bic.w	r3, r3, #12
 80029f2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80029f4:	430b      	orrs	r3, r1
 80029f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a00:	d008      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a02:	4a63      	ldr	r2, [pc, #396]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a04:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002a08:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a0c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002a0e:	430b      	orrs	r3, r1
 8002a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002a1a:	d008      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a1c:	4a5c      	ldr	r2, [pc, #368]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a1e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002a22:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a26:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002a34:	d008      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a36:	4a56      	ldr	r2, [pc, #344]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a38:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a40:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002a42:	430b      	orrs	r3, r1
 8002a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002a4e:	d008      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a50:	4a4f      	ldr	r2, [pc, #316]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a52:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002a56:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002a5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002a68:	d008      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a6a:	4a49      	ldr	r2, [pc, #292]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a6c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002a70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002a76:	430b      	orrs	r3, r1
 8002a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002a82:	d008      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a84:	4a42      	ldr	r2, [pc, #264]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a86:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002a8a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a8e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002a90:	430b      	orrs	r3, r1
 8002a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002a9c:	d008      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a9e:	4a3c      	ldr	r2, [pc, #240]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002aa0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002aa4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002aa8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ab0:	6823      	ldr	r3, [r4, #0]
 8002ab2:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002ab6:	d00d      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ab8:	4a35      	ldr	r2, [pc, #212]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002aba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002abe:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002ac2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002aca:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002acc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ad0:	f000 80c6 	beq.w	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	f013 0f08 	tst.w	r3, #8
 8002ada:	d000      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1; 
 8002adc:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ade:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002ae2:	d008      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ae4:	4a2a      	ldr	r2, [pc, #168]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ae6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002aea:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002aee:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002af0:	430b      	orrs	r3, r1
 8002af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002af6:	6823      	ldr	r3, [r4, #0]
 8002af8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8002afc:	d009      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002afe:	4a24      	ldr	r2, [pc, #144]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b00:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b08:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b12:	6823      	ldr	r3, [r4, #0]
 8002b14:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8002b18:	d009      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002b1a:	4a1d      	ldr	r2, [pc, #116]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b1c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002b20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002b24:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002b34:	d009      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b36:	4a16      	ldr	r2, [pc, #88]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b38:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002b3c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002b40:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8002b44:	430b      	orrs	r3, r1
 8002b46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002b50:	d009      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b52:	4a0f      	ldr	r2, [pc, #60]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b54:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002b58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b5c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002b60:	430b      	orrs	r3, r1
 8002b62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002b66:	2e00      	cmp	r6, #0
 8002b68:	d17c      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b70:	d078      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b72:	2d01      	cmp	r5, #1
 8002b74:	f000 819e 	beq.w	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x608>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002b78:	2000      	movs	r0, #0
}
 8002b7a:	b003      	add	sp, #12
 8002b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1; 
 8002b7e:	2601      	movs	r6, #1
 8002b80:	e6a9      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1; 
 8002b82:	2601      	movs	r6, #1
 8002b84:	e6b9      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1; 
 8002b86:	2501      	movs	r5, #1
 8002b88:	e6bb      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1; 
 8002b8a:	2601      	movs	r6, #1
 8002b8c:	e6cb      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b94:	4bc4      	ldr	r3, [pc, #784]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002ba8:	4ac0      	ldr	r2, [pc, #768]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8002baa:	6813      	ldr	r3, [r2, #0]
 8002bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002bb2:	f7fe fb8f 	bl	80012d4 <HAL_GetTick>
 8002bb6:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bb8:	4bbc      	ldr	r3, [pc, #752]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002bc0:	d106      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc2:	f7fe fb87 	bl	80012d4 <HAL_GetTick>
 8002bc6:	1bc0      	subs	r0, r0, r7
 8002bc8:	2864      	cmp	r0, #100	; 0x64
 8002bca:	d9f5      	bls.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
 8002bcc:	2003      	movs	r0, #3
 8002bce:	e7d4      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bd0:	4bb5      	ldr	r3, [pc, #724]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bd4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002bd8:	d015      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002bda:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002bdc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d010      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002be4:	4bb0      	ldr	r3, [pc, #704]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002be6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002be8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002bee:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002bf2:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002bf6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002bfa:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002bfc:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c00:	f013 0f01 	tst.w	r3, #1
 8002c04:	d112      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x380>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c08:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002c0c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002c10:	d01d      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8002c12:	4aa5      	ldr	r2, [pc, #660]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002c14:	6893      	ldr	r3, [r2, #8]
 8002c16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c1a:	6093      	str	r3, [r2, #8]
 8002c1c:	49a2      	ldr	r1, [pc, #648]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002c1e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8002c20:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002c22:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002c26:	4313      	orrs	r3, r2
 8002c28:	670b      	str	r3, [r1, #112]	; 0x70
 8002c2a:	e687      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fb52 	bl	80012d4 <HAL_GetTick>
 8002c30:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c32:	4b9d      	ldr	r3, [pc, #628]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	f013 0f02 	tst.w	r3, #2
 8002c3a:	d1e4      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fe fb4a 	bl	80012d4 <HAL_GetTick>
 8002c40:	1bc0      	subs	r0, r0, r7
 8002c42:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c46:	4298      	cmp	r0, r3
 8002c48:	d9f3      	bls.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x386>
            return HAL_TIMEOUT;
 8002c4a:	2003      	movs	r0, #3
 8002c4c:	e795      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c4e:	4896      	ldr	r0, [pc, #600]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002c50:	6882      	ldr	r2, [r0, #8]
 8002c52:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002c56:	4996      	ldr	r1, [pc, #600]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8002c58:	4019      	ands	r1, r3
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	6082      	str	r2, [r0, #8]
 8002c5e:	e7dd      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x370>
      pllsaiused = 1; 
 8002c60:	2501      	movs	r5, #1
 8002c62:	e737      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_PLLI2S_DISABLE();  
 8002c64:	4a90      	ldr	r2, [pc, #576]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002c66:	6813      	ldr	r3, [r2, #0]
 8002c68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c6c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002c6e:	f7fe fb31 	bl	80012d4 <HAL_GetTick>
 8002c72:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c74:	4b8c      	ldr	r3, [pc, #560]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002c7c:	d006      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c7e:	f7fe fb29 	bl	80012d4 <HAL_GetTick>
 8002c82:	1b80      	subs	r0, r0, r6
 8002c84:	2864      	cmp	r0, #100	; 0x64
 8002c86:	d9f5      	bls.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
 8002c88:	2003      	movs	r0, #3
 8002c8a:	e776      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c8c:	6823      	ldr	r3, [r4, #0]
 8002c8e:	f013 0f01 	tst.w	r3, #1
 8002c92:	d03a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8002c94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c96:	bbc3      	cbnz	r3, 8002d0a <HAL_RCCEx_PeriphCLKConfig+0x45e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8002c98:	4e83      	ldr	r6, [pc, #524]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002c9a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8002c9e:	f403 3c40 	and.w	ip, r3, #196608	; 0x30000
 8002ca2:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8002ca6:	fa90 f3a0 	rbit	r3, r0
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	fa2c fc03 	lsr.w	ip, ip, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8002cb2:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8002cb6:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002cba:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8002cbe:	fa91 f3a1 	rbit	r3, r1
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cc8:	6863      	ldr	r3, [r4, #4]
 8002cca:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8002cce:	fa97 f7a7 	rbit	r7, r7
 8002cd2:	fab7 f787 	clz	r7, r7
 8002cd6:	40bb      	lsls	r3, r7
 8002cd8:	fa90 f0a0 	rbit	r0, r0
 8002cdc:	fab0 f080 	clz	r0, r0
 8002ce0:	fa0c f000 	lsl.w	r0, ip, r0
 8002ce4:	4303      	orrs	r3, r0
 8002ce6:	fa91 f1a1 	rbit	r1, r1
 8002cea:	fab1 f181 	clz	r1, r1
 8002cee:	408a      	lsls	r2, r1
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	68a1      	ldr	r1, [r4, #8]
 8002cf4:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002cf8:	fa92 f2a2 	rbit	r2, r2
 8002cfc:	fab2 f282 	clz	r2, r2
 8002d00:	fa01 f202 	lsl.w	r2, r1, r2
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002d10:	d003      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x46e>
 8002d12:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002d14:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002d18:	d006      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002d1a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002d1e:	d045      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x500>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8002d20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d26:	d141      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x500>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8002d28:	4e5f      	ldr	r6, [pc, #380]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002d2a:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
 8002d2e:	f400 3c40 	and.w	ip, r0, #196608	; 0x30000
 8002d32:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8002d36:	fa90 f3a0 	rbit	r3, r0
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	fa2c fc03 	lsr.w	ip, ip, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8002d42:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8002d46:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8002d4a:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8002d4e:	fa91 f3a1 	rbit	r3, r1
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d58:	6863      	ldr	r3, [r4, #4]
 8002d5a:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8002d5e:	fa97 f7a7 	rbit	r7, r7
 8002d62:	fab7 f787 	clz	r7, r7
 8002d66:	40bb      	lsls	r3, r7
 8002d68:	fa90 f0a0 	rbit	r0, r0
 8002d6c:	fab0 f080 	clz	r0, r0
 8002d70:	fa0c f000 	lsl.w	r0, ip, r0
 8002d74:	4303      	orrs	r3, r0
 8002d76:	68e7      	ldr	r7, [r4, #12]
 8002d78:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8002d7c:	fa90 f0a0 	rbit	r0, r0
 8002d80:	fab0 f080 	clz	r0, r0
 8002d84:	fa07 f000 	lsl.w	r0, r7, r0
 8002d88:	4303      	orrs	r3, r0
 8002d8a:	fa91 f1a1 	rbit	r1, r1
 8002d8e:	fab1 f181 	clz	r1, r1
 8002d92:	408a      	lsls	r2, r1
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8002d9a:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8002d9e:	f023 031f 	bic.w	r3, r3, #31
 8002da2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002da4:	3a01      	subs	r2, #1
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dac:	6823      	ldr	r3, [r4, #0]
 8002dae:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002db2:	d037      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x578>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8002db4:	4e3c      	ldr	r6, [pc, #240]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002db6:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
 8002dba:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002dbe:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 8002dc2:	fa9c f3ac 	rbit	r3, ip
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	40d9      	lsrs	r1, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8002dcc:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8002dd0:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8002dd4:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 8002dd8:	fa90 f3a0 	rbit	r3, r0
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002de2:	6863      	ldr	r3, [r4, #4]
 8002de4:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8002de8:	fa97 f7a7 	rbit	r7, r7
 8002dec:	fab7 f787 	clz	r7, r7
 8002df0:	40bb      	lsls	r3, r7
 8002df2:	6927      	ldr	r7, [r4, #16]
 8002df4:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
 8002df8:	fa9e feae 	rbit	lr, lr
 8002dfc:	fabe fe8e 	clz	lr, lr
 8002e00:	fa07 f70e 	lsl.w	r7, r7, lr
 8002e04:	433b      	orrs	r3, r7
 8002e06:	fa9c fcac 	rbit	ip, ip
 8002e0a:	fabc fc8c 	clz	ip, ip
 8002e0e:	fa01 f10c 	lsl.w	r1, r1, ip
 8002e12:	430b      	orrs	r3, r1
 8002e14:	fa90 f0a0 	rbit	r0, r0
 8002e18:	fab0 f080 	clz	r0, r0
 8002e1c:	4082      	lsls	r2, r0
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e2a:	d028      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e2c:	6863      	ldr	r3, [r4, #4]
 8002e2e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002e32:	fa92 f2a2 	rbit	r2, r2
 8002e36:	fab2 f282 	clz	r2, r2
 8002e3a:	4093      	lsls	r3, r2
 8002e3c:	6921      	ldr	r1, [r4, #16]
 8002e3e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e42:	fa92 f2a2 	rbit	r2, r2
 8002e46:	fab2 f282 	clz	r2, r2
 8002e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	68e1      	ldr	r1, [r4, #12]
 8002e52:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8002e56:	fa92 f2a2 	rbit	r2, r2
 8002e5a:	fab2 f282 	clz	r2, r2
 8002e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e62:	4313      	orrs	r3, r2
 8002e64:	68a1      	ldr	r1, [r4, #8]
 8002e66:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002e6a:	fa92 f2a2 	rbit	r2, r2
 8002e6e:	fab2 f282 	clz	r2, r2
 8002e72:	fa01 f202 	lsl.w	r2, r1, r2
 8002e76:	4313      	orrs	r3, r2
 8002e78:	4a0b      	ldr	r2, [pc, #44]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002e7a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002e80:	6813      	ldr	r3, [r2, #0]
 8002e82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e86:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002e88:	f7fe fa24 	bl	80012d4 <HAL_GetTick>
 8002e8c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e8e:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002e96:	f47f ae6c 	bne.w	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e9a:	f7fe fa1b 	bl	80012d4 <HAL_GetTick>
 8002e9e:	1b80      	subs	r0, r0, r6
 8002ea0:	2864      	cmp	r0, #100	; 0x64
 8002ea2:	d9f4      	bls.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x5e2>
        return HAL_TIMEOUT;
 8002ea4:	2003      	movs	r0, #3
 8002ea6:	e668      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40007000 	.word	0x40007000
 8002eb0:	0ffffcff 	.word	0x0ffffcff
    __HAL_RCC_PLLSAI_DISABLE(); 
 8002eb4:	4a7d      	ldr	r2, [pc, #500]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002eb6:	6813      	ldr	r3, [r2, #0]
 8002eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002ebe:	f7fe fa09 	bl	80012d4 <HAL_GetTick>
 8002ec2:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ec4:	4b79      	ldr	r3, [pc, #484]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002ecc:	d006      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x630>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ece:	f7fe fa01 	bl	80012d4 <HAL_GetTick>
 8002ed2:	1b40      	subs	r0, r0, r5
 8002ed4:	2864      	cmp	r0, #100	; 0x64
 8002ed6:	d9f5      	bls.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x618>
        return HAL_TIMEOUT;
 8002ed8:	2003      	movs	r0, #3
 8002eda:	e64e      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8002ee4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ee6:	b12a      	cbz	r2, 8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8002ee8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002eec:	d044      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d141      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8002ef4:	4d6d      	ldr	r5, [pc, #436]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002ef6:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
 8002efa:	f407 3740 	and.w	r7, r7, #196608	; 0x30000
 8002efe:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8002f02:	fa90 f3a0 	rbit	r3, r0
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	40df      	lsrs	r7, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8002f0c:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8002f10:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8002f14:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8002f18:	fa91 f3a1 	rbit	r3, r1
 8002f1c:	fab3 f383 	clz	r3, r3
 8002f20:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f22:	6963      	ldr	r3, [r4, #20]
 8002f24:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 8002f28:	fa96 f6a6 	rbit	r6, r6
 8002f2c:	fab6 f686 	clz	r6, r6
 8002f30:	40b3      	lsls	r3, r6
 8002f32:	fa90 f0a0 	rbit	r0, r0
 8002f36:	fab0 f080 	clz	r0, r0
 8002f3a:	fa07 f000 	lsl.w	r0, r7, r0
 8002f3e:	4303      	orrs	r3, r0
 8002f40:	69a6      	ldr	r6, [r4, #24]
 8002f42:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8002f46:	fa90 f0a0 	rbit	r0, r0
 8002f4a:	fab0 f080 	clz	r0, r0
 8002f4e:	fa06 f000 	lsl.w	r0, r6, r0
 8002f52:	4303      	orrs	r3, r0
 8002f54:	fa91 f1a1 	rbit	r1, r1
 8002f58:	fab1 f181 	clz	r1, r1
 8002f5c:	408a      	lsls	r2, r1
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f64:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8002f68:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002f6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002f6e:	3a01      	subs	r2, #1
 8002f70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f74:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f78:	6823      	ldr	r3, [r4, #0]
 8002f7a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002f7e:	d003      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8002f80:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002f82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f86:	d056      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	f013 0f08 	tst.w	r3, #8
 8002f8e:	d03e      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x762>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8002f90:	4d46      	ldr	r5, [pc, #280]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002f92:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8002f96:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002f9a:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8002f9e:	fa90 f3a0 	rbit	r3, r0
 8002fa2:	fab3 f383 	clz	r3, r3
 8002fa6:	40da      	lsrs	r2, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8002fa8:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8002fac:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8002fb0:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 8002fb4:	fa96 f3a6 	rbit	r3, r6
 8002fb8:	fab3 f383 	clz	r3, r3
 8002fbc:	40d9      	lsrs	r1, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fbe:	6963      	ldr	r3, [r4, #20]
 8002fc0:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8002fc4:	fa97 f7a7 	rbit	r7, r7
 8002fc8:	fab7 f787 	clz	r7, r7
 8002fcc:	40bb      	lsls	r3, r7
 8002fce:	fa96 f6a6 	rbit	r6, r6
 8002fd2:	fab6 f686 	clz	r6, r6
 8002fd6:	40b1      	lsls	r1, r6
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	fa90 f1a0 	rbit	r1, r0
 8002fde:	fab1 f181 	clz	r1, r1
 8002fe2:	408a      	lsls	r2, r1
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	69e1      	ldr	r1, [r4, #28]
 8002fe8:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002fec:	fa92 f2a2 	rbit	r2, r2
 8002ff0:	fab2 f282 	clz	r2, r2
 8002ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ffe:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8003002:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003006:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800300e:	4a27      	ldr	r2, [pc, #156]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003010:	6813      	ldr	r3, [r2, #0]
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003016:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003018:	f7fe f95c 	bl	80012d4 <HAL_GetTick>
 800301c:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800301e:	4b23      	ldr	r3, [pc, #140]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003026:	d13e      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003028:	f7fe f954 	bl	80012d4 <HAL_GetTick>
 800302c:	1b00      	subs	r0, r0, r4
 800302e:	2864      	cmp	r0, #100	; 0x64
 8003030:	d9f5      	bls.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x772>
        return HAL_TIMEOUT;
 8003032:	2003      	movs	r0, #3
 8003034:	e5a1      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8003036:	4e1d      	ldr	r6, [pc, #116]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003038:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 800303c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003040:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 8003044:	fa95 f3a5 	rbit	r3, r5
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	40d9      	lsrs	r1, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 800304e:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 8003052:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8003056:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 800305a:	fa90 f3a0 	rbit	r3, r0
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003064:	6963      	ldr	r3, [r4, #20]
 8003066:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 800306a:	fa97 f7a7 	rbit	r7, r7
 800306e:	fab7 f787 	clz	r7, r7
 8003072:	40bb      	lsls	r3, r7
 8003074:	6a27      	ldr	r7, [r4, #32]
 8003076:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 800307a:	fa9c fcac 	rbit	ip, ip
 800307e:	fabc fc8c 	clz	ip, ip
 8003082:	fa07 f70c 	lsl.w	r7, r7, ip
 8003086:	433b      	orrs	r3, r7
 8003088:	fa95 f5a5 	rbit	r5, r5
 800308c:	fab5 f585 	clz	r5, r5
 8003090:	40a9      	lsls	r1, r5
 8003092:	430b      	orrs	r3, r1
 8003094:	fa90 f1a0 	rbit	r1, r0
 8003098:	fab1 f181 	clz	r1, r1
 800309c:	408a      	lsls	r2, r1
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
 80030a4:	e770      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  return HAL_OK;
 80030a6:	2000      	movs	r0, #0
 80030a8:	e567      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800

080030b0 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit: pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tempreg = 0;
  
  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 80030b2:	4b80      	ldr	r3, [pc, #512]	; (80032b4 <HAL_RCCEx_GetPeriphCLKConfig+0x204>)
 80030b4:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 80030b6:	4b80      	ldr	r3, [pc, #512]	; (80032b8 <HAL_RCCEx_GetPeriphCLKConfig+0x208>)
 80030b8:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80030bc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80030c0:	4011      	ands	r1, r2
 80030c2:	fa92 f4a2 	rbit	r4, r2
 80030c6:	fab4 f484 	clz	r4, r4
 80030ca:	40e1      	lsrs	r1, r4
 80030cc:	6041      	str	r1, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80030ce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80030d2:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
 80030d6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80030da:	fa91 f5a1 	rbit	r5, r1
 80030de:	fab5 f585 	clz	r5, r5
 80030e2:	40ec      	lsrs	r4, r5
 80030e4:	6104      	str	r4, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80030e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80030ea:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
 80030ee:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 80030f2:	fa95 f6a5 	rbit	r6, r5
 80030f6:	fab6 f686 	clz	r6, r6
 80030fa:	40f4      	lsrs	r4, r6
 80030fc:	60c4      	str	r4, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80030fe:	f8d3 6084 	ldr.w	r6, [r3, #132]	; 0x84
 8003102:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8003106:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
 800310a:	fa94 f7a4 	rbit	r7, r4
 800310e:	fab7 f787 	clz	r7, r7
 8003112:	40fe      	lsrs	r6, r7
 8003114:	6086      	str	r6, [r0, #8]
  
  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
 8003116:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 800311a:	4016      	ands	r6, r2
 800311c:	fa92 f2a2 	rbit	r2, r2
 8003120:	fab2 f282 	clz	r2, r2
 8003124:	fa26 f202 	lsr.w	r2, r6, r2
 8003128:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800312a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800312e:	400a      	ands	r2, r1
 8003130:	fa91 f6a1 	rbit	r6, r1
 8003134:	fab6 f686 	clz	r6, r6
 8003138:	40f2      	lsrs	r2, r6
 800313a:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
 800313c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003140:	402a      	ands	r2, r5
 8003142:	fa95 f5a5 	rbit	r5, r5
 8003146:	fab5 f585 	clz	r5, r5
 800314a:	fa22 f505 	lsr.w	r5, r2, r5
 800314e:	6185      	str	r5, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR)); 
 8003150:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003154:	4022      	ands	r2, r4
 8003156:	fa94 f4a4 	rbit	r4, r4
 800315a:	fab4 f484 	clz	r4, r4
 800315e:	fa22 f404 	lsr.w	r4, r2, r4
 8003162:	61c4      	str	r4, [r0, #28]
  
  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLI2SDIVQ));
 8003164:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003168:	f002 021f 	and.w	r2, r2, #31
 800316c:	241f      	movs	r4, #31
 800316e:	fa94 f4a4 	rbit	r4, r4
 8003172:	fab4 f484 	clz	r4, r4
 8003176:	40e2      	lsrs	r2, r4
 8003178:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVQ));
 800317a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800317e:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 8003182:	f44f 54f8 	mov.w	r4, #7936	; 0x1f00
 8003186:	fa94 f4a4 	rbit	r4, r4
 800318a:	fab4 f484 	clz	r4, r4
 800318e:	40e2      	lsrs	r2, r4
 8003190:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVR));
 8003192:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003196:	400a      	ands	r2, r1
 8003198:	fa91 f1a1 	rbit	r1, r1
 800319c:	fab1 f181 	clz	r1, r1
 80031a0:	fa22 f101 	lsr.w	r1, r2, r1
 80031a4:	62c1      	str	r1, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80031a6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80031aa:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80031ae:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80031b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80031b4:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 80031b8:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80031c0:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 80031c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80031c6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80031ca:	6642      	str	r2, [r0, #100]	; 0x64
  
  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 80031cc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80031d0:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80031d4:	6682      	str	r2, [r0, #104]	; 0x68
  
  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 80031d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80031da:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80031de:	66c2      	str	r2, [r0, #108]	; 0x6c
  
  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 80031e0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80031e4:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 80031e8:	6702      	str	r2, [r0, #112]	; 0x70
  
  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 80031ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80031ee:	f002 0203 	and.w	r2, r2, #3
 80031f2:	6442      	str	r2, [r0, #68]	; 0x44
  
  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 80031f4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80031f8:	f002 020c 	and.w	r2, r2, #12
 80031fc:	6482      	str	r2, [r0, #72]	; 0x48
  
  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80031fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003202:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8003206:	64c2      	str	r2, [r0, #76]	; 0x4c
  
  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8003208:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800320c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8003210:	6502      	str	r2, [r0, #80]	; 0x50
  
  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8003212:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003216:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800321a:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800321c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003220:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8003224:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8003226:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800322a:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800322e:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8003230:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003234:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8003238:	6602      	str	r2, [r0, #96]	; 0x60
  
  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800323a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800323e:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 8003242:	6742      	str	r2, [r0, #116]	; 0x74
  
  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8003244:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003248:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800324c:	6782      	str	r2, [r0, #120]	; 0x78
  
  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800324e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003252:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003256:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8003258:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800325c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003260:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 8003264:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003268:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800326c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
	
  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 8003270:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003274:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003278:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
 800327c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003280:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8003284:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8003288:	6899      	ldr	r1, [r3, #8]
 800328a:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800328e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003290:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003294:	430a      	orrs	r2, r1
 8003296:	6302      	str	r2, [r0, #48]	; 0x30
  
  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8003298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800329c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80032a0:	d103      	bne.n	80032aa <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80032a2:	2300      	movs	r3, #0
 80032a4:	6383      	str	r3, [r0, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80032a6:	bcf0      	pop	{r4, r5, r6, r7}
 80032a8:	4770      	bx	lr
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80032aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032ae:	6383      	str	r3, [r0, #56]	; 0x38
}
 80032b0:	e7f9      	b.n	80032a6 <HAL_RCCEx_GetPeriphCLKConfig+0x1f6>
 80032b2:	bf00      	nop
 80032b4:	1cfffff1 	.word	0x1cfffff1
 80032b8:	40023800 	.word	0x40023800

080032bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80032bc:	b410      	push	{r4}
 80032be:	4603      	mov	r3, r0
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
  
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80032c0:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80032c4:	d006      	beq.n	80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
  uint32_t frequency = 0;
 80032c6:	2000      	movs	r0, #0
        break;
      }
    }
  }
  
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80032c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032cc:	d073      	beq.n	80033b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
      }
    }
  }
  
  return frequency;
}
 80032ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032d2:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;   
 80032d4:	4a6f      	ldr	r2, [pc, #444]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80032d6:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80032da:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 80032de:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80032e2:	d064      	beq.n	80033ae <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80032e4:	d826      	bhi.n	8003334 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 80032e6:	b38a      	cbz	r2, 800334c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 80032e8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80032ec:	d120      	bne.n	8003330 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80032ee:	4a69      	ldr	r2, [pc, #420]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80032f0:	6852      	ldr	r2, [r2, #4]
 80032f2:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80032f6:	d152      	bne.n	800339e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80032f8:	4a66      	ldr	r2, [pc, #408]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80032fa:	6852      	ldr	r2, [r2, #4]
 80032fc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003300:	4865      	ldr	r0, [pc, #404]	; (8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8003302:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003306:	4a63      	ldr	r2, [pc, #396]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8003308:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 800330c:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003310:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
 8003314:	f3c4 1488 	ubfx	r4, r4, #6, #9
 8003318:	fb00 f004 	mul.w	r0, r0, r4
 800331c:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8003320:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8003324:	f002 021f 	and.w	r2, r2, #31
 8003328:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 800332a:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 800332e:	e7cb      	b.n	80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
    switch (saiclocksource)
 8003330:	2000      	movs	r0, #0
 8003332:	e7c9      	b.n	80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
 8003334:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8003338:	d106      	bne.n	8003348 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800333a:	4a56      	ldr	r2, [pc, #344]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800333c:	6852      	ldr	r2, [r2, #4]
 800333e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8003342:	d136      	bne.n	80033b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
          frequency = HSI_VALUE;
 8003344:	4854      	ldr	r0, [pc, #336]	; (8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8003346:	e7bf      	b.n	80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
    switch (saiclocksource)
 8003348:	2000      	movs	r0, #0
 800334a:	e7bd      	b.n	80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800334c:	4a51      	ldr	r2, [pc, #324]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800334e:	6852      	ldr	r2, [r2, #4]
 8003350:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8003354:	d11b      	bne.n	800338e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003356:	4a4f      	ldr	r2, [pc, #316]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8003358:	6852      	ldr	r2, [r2, #4]
 800335a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800335e:	484e      	ldr	r0, [pc, #312]	; (8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8003360:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003364:	4a4b      	ldr	r2, [pc, #300]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8003366:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 800336a:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800336e:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
 8003372:	f3c4 1488 	ubfx	r4, r4, #6, #9
 8003376:	fb00 f004 	mul.w	r0, r0, r4
 800337a:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800337e:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8003382:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8003386:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg); 
 8003388:	fbb0 f0f2 	udiv	r0, r0, r2
        break;       
 800338c:	e79c      	b.n	80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800338e:	4a41      	ldr	r2, [pc, #260]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8003390:	6852      	ldr	r2, [r2, #4]
 8003392:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003396:	4841      	ldr	r0, [pc, #260]	; (800349c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8003398:	fbb0 f0f2 	udiv	r0, r0, r2
 800339c:	e7e2      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800339e:	4a3d      	ldr	r2, [pc, #244]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80033a0:	6852      	ldr	r2, [r2, #4]
 80033a2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80033a6:	483d      	ldr	r0, [pc, #244]	; (800349c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 80033a8:	fbb0 f0f2 	udiv	r0, r0, r2
 80033ac:	e7ab      	b.n	8003306 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
        frequency = EXTERNAL_CLOCK_VALUE;
 80033ae:	483c      	ldr	r0, [pc, #240]	; (80034a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 80033b0:	e78a      	b.n	80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
          frequency = HSE_VALUE;
 80033b2:	483a      	ldr	r0, [pc, #232]	; (800349c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 80033b4:	e788      	b.n	80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
    saiclocksource = RCC->DCKCFGR1;   
 80033b6:	4b37      	ldr	r3, [pc, #220]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80033b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80033bc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (saiclocksource)
 80033c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033c4:	d062      	beq.n	800348c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80033c6:	d825      	bhi.n	8003414 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80033c8:	b37b      	cbz	r3, 800342a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 80033ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ce:	f47f af7e 	bne.w	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x12>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80033d2:	4b30      	ldr	r3, [pc, #192]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80033da:	d14f      	bne.n	800347c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80033dc:	4b2d      	ldr	r3, [pc, #180]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033e4:	482c      	ldr	r0, [pc, #176]	; (8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80033e6:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80033ea:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80033ec:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80033f0:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80033f4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80033f8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80033fc:	fb00 f001 	mul.w	r0, r0, r1
 8003400:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8003404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 800340e:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8003412:	e75c      	b.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x12>
    switch (saiclocksource)
 8003414:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003418:	f47f af59 	bne.w	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x12>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800341c:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003424:	d134      	bne.n	8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
          frequency = HSI_VALUE;
 8003426:	481c      	ldr	r0, [pc, #112]	; (8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8003428:	e751      	b.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x12>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800342a:	4b1a      	ldr	r3, [pc, #104]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003432:	d11b      	bne.n	800346c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003434:	4b17      	ldr	r3, [pc, #92]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800343c:	4816      	ldr	r0, [pc, #88]	; (8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800343e:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003442:	4b14      	ldr	r3, [pc, #80]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8003444:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003448:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800344c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003450:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003454:	fb00 f001 	mul.w	r0, r0, r1
 8003458:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800345c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003460:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8003464:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg); 
 8003466:	fbb0 f0f3 	udiv	r0, r0, r3
        break;       
 800346a:	e730      	b.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x12>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800346c:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003474:	4809      	ldr	r0, [pc, #36]	; (800349c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8003476:	fbb0 f0f3 	udiv	r0, r0, r3
 800347a:	e7e2      	b.n	8003442 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003484:	4805      	ldr	r0, [pc, #20]	; (800349c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8003486:	fbb0 f0f3 	udiv	r0, r0, r3
 800348a:	e7ae      	b.n	80033ea <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
        frequency = EXTERNAL_CLOCK_VALUE;
 800348c:	4804      	ldr	r0, [pc, #16]	; (80034a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 800348e:	e71e      	b.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x12>
          frequency = HSE_VALUE;
 8003490:	4802      	ldr	r0, [pc, #8]	; (800349c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
  return frequency;
 8003492:	e71c      	b.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8003494:	40023800 	.word	0x40023800
 8003498:	00f42400 	.word	0x00f42400
 800349c:	017d7840 	.word	0x017d7840
 80034a0:	00bb8000 	.word	0x00bb8000

080034a4 <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
  
  if(mode == SAI_MODE_IT)
 80034a4:	2901      	cmp	r1, #1
 80034a6:	d00a      	beq.n	80034be <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80034a8:	2301      	movs	r3, #1
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80034aa:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80034ac:	2a08      	cmp	r2, #8
 80034ae:	d008      	beq.n	80034c2 <SAI_InterruptFlag+0x1e>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT|= SAI_IT_CNRDY;
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80034b0:	6842      	ldr	r2, [r0, #4]
 80034b2:	3a02      	subs	r2, #2
 80034b4:	2a01      	cmp	r2, #1
 80034b6:	d90c      	bls.n	80034d2 <SAI_InterruptFlag+0x2e>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 80034b8:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 80034bc:	4770      	bx	lr
    tmpIT|= SAI_IT_FREQ;
 80034be:	2309      	movs	r3, #9
 80034c0:	e7f3      	b.n	80034aa <SAI_InterruptFlag+0x6>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80034c2:	6842      	ldr	r2, [r0, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80034c4:	2a01      	cmp	r2, #1
 80034c6:	bf18      	it	ne
 80034c8:	2a03      	cmpne	r2, #3
 80034ca:	d1f1      	bne.n	80034b0 <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_CNRDY;
 80034cc:	f043 0310 	orr.w	r3, r3, #16
 80034d0:	e7ee      	b.n	80034b0 <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80034d2:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 80034d6:	4770      	bx	lr

080034d8 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <SAI_Disable+0x3c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a0e      	ldr	r2, [pc, #56]	; (8003518 <SAI_Disable+0x40>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	0b1b      	lsrs	r3, r3, #12
 80034e4:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80034e6:	6801      	ldr	r1, [r0, #0]
 80034e8:	680a      	ldr	r2, [r1, #0]
 80034ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034ee:	600a      	str	r2, [r1, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80034f0:	461a      	mov	r2, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b132      	cbz	r2, 8003504 <SAI_Disable+0x2c>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80034f6:	6802      	ldr	r2, [r0, #0]
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80034fe:	d1f7      	bne.n	80034f0 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8003500:	2000      	movs	r0, #0

  return status;
}
 8003502:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003504:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8003508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800350c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 8003510:	2003      	movs	r0, #3
      break;
 8003512:	4770      	bx	lr
 8003514:	20000030 	.word	0x20000030
 8003518:	95cbec1b 	.word	0x95cbec1b

0800351c <HAL_SAI_MspInit>:
}
 800351c:	4770      	bx	lr
	...

08003520 <HAL_SAI_Init>:
  if(hsai == NULL)
 8003520:	2800      	cmp	r0, #0
 8003522:	f000 80eb 	beq.w	80036fc <HAL_SAI_Init+0x1dc>
{
 8003526:	b570      	push	{r4, r5, r6, lr}
 8003528:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_RESET)
 800352a:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80b9 	beq.w	80036a6 <HAL_SAI_Init+0x186>
  hsai->State = HAL_SAI_STATE_BUSY;
 8003534:	2302      	movs	r3, #2
 8003536:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 800353a:	4620      	mov	r0, r4
 800353c:	f7ff ffcc 	bl	80034d8 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 8003540:	68e3      	ldr	r3, [r4, #12]
 8003542:	2b01      	cmp	r3, #1
 8003544:	f000 80b4 	beq.w	80036b0 <HAL_SAI_Init+0x190>
 8003548:	2b02      	cmp	r3, #2
 800354a:	f040 80b3 	bne.w	80036b4 <HAL_SAI_Init+0x194>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800354e:	2220      	movs	r2, #32
  switch(hsai->Init.Synchro)
 8003550:	68a3      	ldr	r3, [r4, #8]
 8003552:	2b02      	cmp	r3, #2
 8003554:	f000 80b8 	beq.w	80036c8 <HAL_SAI_Init+0x1a8>
 8003558:	2b03      	cmp	r3, #3
 800355a:	f000 80b0 	beq.w	80036be <HAL_SAI_Init+0x19e>
 800355e:	2b01      	cmp	r3, #1
 8003560:	f000 80aa 	beq.w	80036b8 <HAL_SAI_Init+0x198>
 8003564:	2500      	movs	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	4865      	ldr	r0, [pc, #404]	; (8003700 <HAL_SAI_Init+0x1e0>)
 800356a:	4966      	ldr	r1, [pc, #408]	; (8003704 <HAL_SAI_Init+0x1e4>)
 800356c:	428b      	cmp	r3, r1
 800356e:	bf18      	it	ne
 8003570:	4283      	cmpne	r3, r0
 8003572:	f040 80ac 	bne.w	80036ce <HAL_SAI_Init+0x1ae>
    SAI1->GCR = tmpregisterGCR;
 8003576:	4b64      	ldr	r3, [pc, #400]	; (8003708 <HAL_SAI_Init+0x1e8>)
 8003578:	601a      	str	r2, [r3, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800357a:	69e3      	ldr	r3, [r4, #28]
 800357c:	b323      	cbz	r3, 80035c8 <HAL_SAI_Init+0xa8>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	495f      	ldr	r1, [pc, #380]	; (8003700 <HAL_SAI_Init+0x1e0>)
 8003582:	4a60      	ldr	r2, [pc, #384]	; (8003704 <HAL_SAI_Init+0x1e4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	bf18      	it	ne
 8003588:	428b      	cmpne	r3, r1
 800358a:	f000 80a3 	beq.w	80036d4 <HAL_SAI_Init+0x1b4>
    uint32_t freq = 0;
 800358e:	2000      	movs	r0, #0
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	495e      	ldr	r1, [pc, #376]	; (800370c <HAL_SAI_Init+0x1ec>)
 8003594:	4a5e      	ldr	r2, [pc, #376]	; (8003710 <HAL_SAI_Init+0x1f0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	bf18      	it	ne
 800359a:	428b      	cmpne	r3, r1
 800359c:	f000 809f 	beq.w	80036de <HAL_SAI_Init+0x1be>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80035a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80035a4:	0040      	lsls	r0, r0, #1
 80035a6:	69e3      	ldr	r3, [r4, #28]
 80035a8:	025b      	lsls	r3, r3, #9
 80035aa:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 80035ae:	4b59      	ldr	r3, [pc, #356]	; (8003714 <HAL_SAI_Init+0x1f4>)
 80035b0:	fba3 2300 	umull	r2, r3, r3, r0
 80035b4:	08db      	lsrs	r3, r3, #3
 80035b6:	6223      	str	r3, [r4, #32]
    if((tmpval % 10) > 8)
 80035b8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80035bc:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 80035c0:	2808      	cmp	r0, #8
 80035c2:	d901      	bls.n	80035c8 <HAL_SAI_Init+0xa8>
      hsai->Init.Mckdiv+= 1;
 80035c4:	3301      	adds	r3, #1
 80035c6:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80035c8:	6862      	ldr	r2, [r4, #4]
 80035ca:	2a02      	cmp	r2, #2
 80035cc:	bf14      	ite	ne
 80035ce:	2300      	movne	r3, #0
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2a00      	cmp	r2, #0
 80035d4:	bf08      	it	eq
 80035d6:	2301      	moveq	r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 8087 	beq.w	80036ec <HAL_SAI_Init+0x1cc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80035de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	f000 8081 	beq.w	80036e8 <HAL_SAI_Init+0x1c8>
 80035e6:	f44f 7600 	mov.w	r6, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80035ea:	6821      	ldr	r1, [r4, #0]
 80035ec:	680b      	ldr	r3, [r1, #0]
 80035ee:	4a4a      	ldr	r2, [pc, #296]	; (8003718 <HAL_SAI_Init+0x1f8>)
 80035f0:	401a      	ands	r2, r3
 80035f2:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80035f4:	6822      	ldr	r2, [r4, #0]
 80035f6:	6811      	ldr	r1, [r2, #0]
 80035f8:	6863      	ldr	r3, [r4, #4]
 80035fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80035fc:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80035fe:	6b60      	ldr	r0, [r4, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003600:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003602:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003604:	4303      	orrs	r3, r0
 8003606:	4333      	orrs	r3, r6
                        ckstr_bits | syncen_bits |                               \
 8003608:	432b      	orrs	r3, r5
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800360a:	6a60      	ldr	r0, [r4, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 800360c:	4303      	orrs	r3, r0
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800360e:	6920      	ldr	r0, [r4, #16]
 8003610:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003612:	6960      	ldr	r0, [r4, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003614:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003616:	6a20      	ldr	r0, [r4, #32]
 8003618:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800361c:	430b      	orrs	r3, r1
 800361e:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003620:	6822      	ldr	r2, [r4, #0]
 8003622:	6851      	ldr	r1, [r2, #4]
 8003624:	4b3d      	ldr	r3, [pc, #244]	; (800371c <HAL_SAI_Init+0x1fc>)
 8003626:	400b      	ands	r3, r1
 8003628:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800362a:	6821      	ldr	r1, [r4, #0]
 800362c:	684a      	ldr	r2, [r1, #4]
 800362e:	69a3      	ldr	r3, [r4, #24]
 8003630:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003632:	4303      	orrs	r3, r0
 8003634:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003636:	4303      	orrs	r3, r0
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800363c:	6822      	ldr	r2, [r4, #0]
 800363e:	6891      	ldr	r1, [r2, #8]
 8003640:	4b37      	ldr	r3, [pc, #220]	; (8003720 <HAL_SAI_Init+0x200>)
 8003642:	400b      	ands	r3, r1
 8003644:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8003646:	6820      	ldr	r0, [r4, #0]
 8003648:	6882      	ldr	r2, [r0, #8]
 800364a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800364c:	3b01      	subs	r3, #1
                          hsai->FrameInit.FSOffset |
 800364e:	6d21      	ldr	r1, [r4, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8003650:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSDefinition |
 8003652:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8003654:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSPolarity   |
 8003656:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8003658:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800365a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800365c:	3901      	subs	r1, #1
                          hsai->FrameInit.FSPolarity   |
 800365e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8003662:	4313      	orrs	r3, r2
 8003664:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8003666:	6822      	ldr	r2, [r4, #0]
 8003668:	68d3      	ldr	r3, [r2, #12]
 800366a:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 800366e:	f023 030f 	bic.w	r3, r3, #15
 8003672:	041b      	lsls	r3, r3, #16
 8003674:	0c1b      	lsrs	r3, r3, #16
 8003676:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003678:	6820      	ldr	r0, [r4, #0]
 800367a:	68c2      	ldr	r2, [r0, #12]
 800367c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800367e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003680:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8003682:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003684:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003688:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800368a:	3901      	subs	r1, #1
 800368c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003690:	4313      	orrs	r3, r2
 8003692:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003694:	2000      	movs	r0, #0
 8003696:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  hsai->State= HAL_SAI_STATE_READY;
 800369a:	2301      	movs	r3, #1
 800369c:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 80036a0:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80036a4:	bd70      	pop	{r4, r5, r6, pc}
    hsai->Lock = HAL_UNLOCKED;
 80036a6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 80036aa:	f7ff ff37 	bl	800351c <HAL_SAI_MspInit>
 80036ae:	e741      	b.n	8003534 <HAL_SAI_Init+0x14>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80036b0:	2210      	movs	r2, #16
 80036b2:	e74d      	b.n	8003550 <HAL_SAI_Init+0x30>
  switch(hsai->Init.SynchroExt)
 80036b4:	2200      	movs	r2, #0
 80036b6:	e74b      	b.n	8003550 <HAL_SAI_Init+0x30>
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80036b8:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80036bc:	e753      	b.n	8003566 <HAL_SAI_Init+0x46>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80036be:	f042 0201 	orr.w	r2, r2, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80036c2:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 80036c6:	e74e      	b.n	8003566 <HAL_SAI_Init+0x46>
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80036c8:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80036cc:	e74b      	b.n	8003566 <HAL_SAI_Init+0x46>
    SAI2->GCR = tmpregisterGCR;
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_SAI_Init+0x204>)
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	e752      	b.n	800357a <HAL_SAI_Init+0x5a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80036d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80036d8:	f7ff fdf0 	bl	80032bc <HAL_RCCEx_GetPeriphCLKFreq>
 80036dc:	e758      	b.n	8003590 <HAL_SAI_Init+0x70>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80036de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80036e2:	f7ff fdeb 	bl	80032bc <HAL_RCCEx_GetPeriphCLKFreq>
 80036e6:	e75b      	b.n	80035a0 <HAL_SAI_Init+0x80>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80036e8:	2600      	movs	r6, #0
 80036ea:	e77e      	b.n	80035ea <HAL_SAI_Init+0xca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80036ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d001      	beq.n	80036f6 <HAL_SAI_Init+0x1d6>
 80036f2:	2600      	movs	r6, #0
 80036f4:	e779      	b.n	80035ea <HAL_SAI_Init+0xca>
 80036f6:	f44f 7600 	mov.w	r6, #512	; 0x200
 80036fa:	e776      	b.n	80035ea <HAL_SAI_Init+0xca>
    return HAL_ERROR;
 80036fc:	2001      	movs	r0, #1
}
 80036fe:	4770      	bx	lr
 8003700:	40015804 	.word	0x40015804
 8003704:	40015824 	.word	0x40015824
 8003708:	40015800 	.word	0x40015800
 800370c:	40015c04 	.word	0x40015c04
 8003710:	40015c24 	.word	0x40015c24
 8003714:	cccccccd 	.word	0xcccccccd
 8003718:	ff05c010 	.word	0xff05c010
 800371c:	ffff1ff0 	.word	0xffff1ff0
 8003720:	fff88000 	.word	0xfff88000
 8003724:	40015c00 	.word	0x40015c00

08003728 <HAL_SAI_MspDeInit>:
}
 8003728:	4770      	bx	lr

0800372a <HAL_SAI_DeInit>:
  if(hsai == NULL)
 800372a:	b1e8      	cbz	r0, 8003768 <HAL_SAI_DeInit+0x3e>
{
 800372c:	b538      	push	{r3, r4, r5, lr}
 800372e:	4604      	mov	r4, r0
  hsai->State = HAL_SAI_STATE_BUSY;
 8003730:	2302      	movs	r3, #2
 8003732:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  hsai->Instance->IMR = 0;
 8003736:	6803      	ldr	r3, [r0, #0]
 8003738:	2500      	movs	r5, #0
 800373a:	611d      	str	r5, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800373c:	6803      	ldr	r3, [r0, #0]
 800373e:	f04f 32ff 	mov.w	r2, #4294967295
 8003742:	619a      	str	r2, [r3, #24]
  SAI_Disable(hsai);
 8003744:	f7ff fec8 	bl	80034d8 <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8003748:	6822      	ldr	r2, [r4, #0]
 800374a:	6853      	ldr	r3, [r2, #4]
 800374c:	f043 0308 	orr.w	r3, r3, #8
 8003750:	6053      	str	r3, [r2, #4]
  HAL_SAI_MspDeInit(hsai);
 8003752:	4620      	mov	r0, r4
 8003754:	f7ff ffe8 	bl	8003728 <HAL_SAI_MspDeInit>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003758:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  hsai->State = HAL_SAI_STATE_RESET;
 800375c:	f884 507d 	strb.w	r5, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8003760:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
  return HAL_OK;
 8003764:	4628      	mov	r0, r5
}
 8003766:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003768:	2001      	movs	r0, #1
}
 800376a:	4770      	bx	lr

0800376c <HAL_SAI_Transmit_DMA>:
{
 800376c:	b570      	push	{r4, r5, r6, lr}
  if((pData == NULL) || (Size == 0))
 800376e:	4613      	mov	r3, r2
 8003770:	fab2 f282 	clz	r2, r2
 8003774:	0952      	lsrs	r2, r2, #5
 8003776:	2900      	cmp	r1, #0
 8003778:	bf08      	it	eq
 800377a:	2201      	moveq	r2, #1
 800377c:	2a00      	cmp	r2, #0
 800377e:	d14b      	bne.n	8003818 <HAL_SAI_Transmit_DMA+0xac>
 8003780:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_READY)
 8003782:	f894 507d 	ldrb.w	r5, [r4, #125]	; 0x7d
 8003786:	b2ed      	uxtb	r5, r5
 8003788:	2d01      	cmp	r5, #1
 800378a:	d148      	bne.n	800381e <HAL_SAI_Transmit_DMA+0xb2>
    __HAL_LOCK(hsai);
 800378c:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 8003790:	2a01      	cmp	r2, #1
 8003792:	d046      	beq.n	8003822 <HAL_SAI_Transmit_DMA+0xb6>
 8003794:	2201      	movs	r2, #1
 8003796:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 800379a:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 800379c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 80037a0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80037a4:	2300      	movs	r3, #0
 80037a6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80037aa:	2212      	movs	r2, #18
 80037ac:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80037b0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80037b2:	491d      	ldr	r1, [pc, #116]	; (8003828 <HAL_SAI_Transmit_DMA+0xbc>)
 80037b4:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80037b6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80037b8:	491c      	ldr	r1, [pc, #112]	; (800382c <HAL_SAI_Transmit_DMA+0xc0>)
 80037ba:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80037bc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80037be:	491c      	ldr	r1, [pc, #112]	; (8003830 <HAL_SAI_Transmit_DMA+0xc4>)
 80037c0:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 80037c2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80037c4:	6513      	str	r3, [r2, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80037c6:	6822      	ldr	r2, [r4, #0]
 80037c8:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80037cc:	321c      	adds	r2, #28
 80037ce:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80037d0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80037d2:	f7fd ff08 	bl	80015e6 <HAL_DMA_Start_IT>
 80037d6:	4606      	mov	r6, r0
 80037d8:	b118      	cbz	r0, 80037e2 <HAL_SAI_Transmit_DMA+0x76>
      __HAL_UNLOCK(hsai);
 80037da:	2300      	movs	r3, #0
 80037dc:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
      return  HAL_ERROR;
 80037e0:	e01b      	b.n	800381a <HAL_SAI_Transmit_DMA+0xae>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80037ea:	d103      	bne.n	80037f4 <HAL_SAI_Transmit_DMA+0x88>
      __HAL_SAI_ENABLE(hsai);
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80037f2:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80037f4:	2100      	movs	r1, #0
 80037f6:	4620      	mov	r0, r4
 80037f8:	f7ff fe54 	bl	80034a4 <SAI_InterruptFlag>
 80037fc:	6822      	ldr	r2, [r4, #0]
 80037fe:	6913      	ldr	r3, [r2, #16]
 8003800:	4303      	orrs	r3, r0
 8003802:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8003804:	6822      	ldr	r2, [r4, #0]
 8003806:	6813      	ldr	r3, [r2, #0]
 8003808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800380c:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 800380e:	2300      	movs	r3, #0
 8003810:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8003814:	4635      	mov	r5, r6
 8003816:	e000      	b.n	800381a <HAL_SAI_Transmit_DMA+0xae>
    return  HAL_ERROR;
 8003818:	2501      	movs	r5, #1
}
 800381a:	4628      	mov	r0, r5
 800381c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800381e:	2502      	movs	r5, #2
 8003820:	e7fb      	b.n	800381a <HAL_SAI_Transmit_DMA+0xae>
    __HAL_LOCK(hsai);
 8003822:	2502      	movs	r5, #2
 8003824:	e7f9      	b.n	800381a <HAL_SAI_Transmit_DMA+0xae>
 8003826:	bf00      	nop
 8003828:	08003939 	.word	0x08003939
 800382c:	080038fd 	.word	0x080038fd
 8003830:	08003989 	.word	0x08003989

08003834 <HAL_SAI_Receive_DMA>:
{
 8003834:	b570      	push	{r4, r5, r6, lr}
  if((pData == NULL) || (Size == 0))
 8003836:	4613      	mov	r3, r2
 8003838:	fab2 f282 	clz	r2, r2
 800383c:	0952      	lsrs	r2, r2, #5
 800383e:	2900      	cmp	r1, #0
 8003840:	bf08      	it	eq
 8003842:	2201      	moveq	r2, #1
 8003844:	2a00      	cmp	r2, #0
 8003846:	d14b      	bne.n	80038e0 <HAL_SAI_Receive_DMA+0xac>
 8003848:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_READY)
 800384a:	f894 507d 	ldrb.w	r5, [r4, #125]	; 0x7d
 800384e:	b2ed      	uxtb	r5, r5
 8003850:	2d01      	cmp	r5, #1
 8003852:	d148      	bne.n	80038e6 <HAL_SAI_Receive_DMA+0xb2>
    __HAL_LOCK(hsai);
 8003854:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 8003858:	2a01      	cmp	r2, #1
 800385a:	d046      	beq.n	80038ea <HAL_SAI_Receive_DMA+0xb6>
 800385c:	2201      	movs	r2, #1
 800385e:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 8003862:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 8003864:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 8003868:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800386c:	2300      	movs	r3, #0
 800386e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8003872:	2222      	movs	r2, #34	; 0x22
 8003874:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8003878:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800387a:	491d      	ldr	r1, [pc, #116]	; (80038f0 <HAL_SAI_Receive_DMA+0xbc>)
 800387c:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800387e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8003880:	491c      	ldr	r1, [pc, #112]	; (80038f4 <HAL_SAI_Receive_DMA+0xc0>)
 8003882:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8003884:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8003886:	491c      	ldr	r1, [pc, #112]	; (80038f8 <HAL_SAI_Receive_DMA+0xc4>)
 8003888:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 800388a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800388c:	6513      	str	r3, [r2, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800388e:	6821      	ldr	r1, [r4, #0]
 8003890:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8003894:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003896:	311c      	adds	r1, #28
 8003898:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800389a:	f7fd fea4 	bl	80015e6 <HAL_DMA_Start_IT>
 800389e:	4606      	mov	r6, r0
 80038a0:	b118      	cbz	r0, 80038aa <HAL_SAI_Receive_DMA+0x76>
      __HAL_UNLOCK(hsai);
 80038a2:	2300      	movs	r3, #0
 80038a4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
      return  HAL_ERROR;
 80038a8:	e01b      	b.n	80038e2 <HAL_SAI_Receive_DMA+0xae>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80038b2:	d103      	bne.n	80038bc <HAL_SAI_Receive_DMA+0x88>
      __HAL_SAI_ENABLE(hsai);
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80038ba:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80038bc:	2100      	movs	r1, #0
 80038be:	4620      	mov	r0, r4
 80038c0:	f7ff fdf0 	bl	80034a4 <SAI_InterruptFlag>
 80038c4:	6822      	ldr	r2, [r4, #0]
 80038c6:	6913      	ldr	r3, [r2, #16]
 80038c8:	4303      	orrs	r3, r0
 80038ca:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80038cc:	6822      	ldr	r2, [r4, #0]
 80038ce:	6813      	ldr	r3, [r2, #0]
 80038d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d4:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 80038d6:	2300      	movs	r3, #0
 80038d8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 80038dc:	4635      	mov	r5, r6
 80038de:	e000      	b.n	80038e2 <HAL_SAI_Receive_DMA+0xae>
    return  HAL_ERROR;
 80038e0:	2501      	movs	r5, #1
}
 80038e2:	4628      	mov	r0, r5
 80038e4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80038e6:	2502      	movs	r5, #2
 80038e8:	e7fb      	b.n	80038e2 <HAL_SAI_Receive_DMA+0xae>
    __HAL_LOCK(hsai);
 80038ea:	2502      	movs	r5, #2
 80038ec:	e7f9      	b.n	80038e2 <HAL_SAI_Receive_DMA+0xae>
 80038ee:	bf00      	nop
 80038f0:	0800397f 	.word	0x0800397f
 80038f4:	08003943 	.word	0x08003943
 80038f8:	08003989 	.word	0x08003989

080038fc <SAI_DMATxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80038fc:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 80038fe:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8003900:	6803      	ldr	r3, [r0, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003908:	d112      	bne.n	8003930 <SAI_DMATxCplt+0x34>
  {
    hsai->XferCount = 0;
 800390a:	2100      	movs	r1, #0
 800390c:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    
    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003910:	6822      	ldr	r2, [r4, #0]
 8003912:	6813      	ldr	r3, [r2, #0]
 8003914:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003918:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800391a:	4620      	mov	r0, r4
 800391c:	f7ff fdc2 	bl	80034a4 <SAI_InterruptFlag>
 8003920:	6822      	ldr	r2, [r4, #0]
 8003922:	6913      	ldr	r3, [r2, #16]
 8003924:	ea23 0300 	bic.w	r3, r3, r0
 8003928:	6113      	str	r3, [r2, #16]
    
    hsai->State= HAL_SAI_STATE_READY;
 800392a:	2301      	movs	r3, #1
 800392c:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_TxCpltCallback(hsai);
 8003930:	4620      	mov	r0, r4
 8003932:	f7fd fbca 	bl	80010ca <HAL_SAI_TxCpltCallback>
}
 8003936:	bd10      	pop	{r4, pc}

08003938 <SAI_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003938:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_TxHalfCpltCallback(hsai);
 800393a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800393c:	f7fd fbc9 	bl	80010d2 <HAL_SAI_TxHalfCpltCallback>
}
 8003940:	bd08      	pop	{r3, pc}

08003942 <SAI_DMARxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003942:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003944:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8003946:	6803      	ldr	r3, [r0, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800394e:	d112      	bne.n	8003976 <SAI_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003950:	6822      	ldr	r2, [r4, #0]
 8003952:	6813      	ldr	r3, [r2, #0]
 8003954:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003958:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 800395a:	2100      	movs	r1, #0
 800395c:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003960:	4620      	mov	r0, r4
 8003962:	f7ff fd9f 	bl	80034a4 <SAI_InterruptFlag>
 8003966:	6822      	ldr	r2, [r4, #0]
 8003968:	6913      	ldr	r3, [r2, #16]
 800396a:	ea23 0300 	bic.w	r3, r3, r0
 800396e:	6113      	str	r3, [r2, #16]
    
    hsai->State = HAL_SAI_STATE_READY;
 8003970:	2301      	movs	r3, #1
 8003972:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_RxCpltCallback(hsai);
 8003976:	4620      	mov	r0, r4
 8003978:	f7fd fc69 	bl	800124e <HAL_SAI_RxCpltCallback>
}
 800397c:	bd10      	pop	{r4, pc}

0800397e <SAI_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800397e:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_RxHalfCpltCallback(hsai);
 8003980:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003982:	f7fd fc68 	bl	8001256 <HAL_SAI_RxHalfCpltCallback>
}
 8003986:	bd08      	pop	{r3, pc}

08003988 <SAI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003988:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800398a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800398c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8003990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003994:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8003998:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800399a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399c:	2b01      	cmp	r3, #1
 800399e:	d007      	beq.n	80039b0 <SAI_DMAError+0x28>
 80039a0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d003      	beq.n	80039b0 <SAI_DMAError+0x28>

    /* Initialize XferCount */
    hsai->XferCount = 0U;
  }
  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 80039a8:	4620      	mov	r0, r4
 80039aa:	f7fd fc59 	bl	8001260 <HAL_SAI_ErrorCallback>
}
 80039ae:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80039b0:	6822      	ldr	r2, [r4, #0]
 80039b2:	6813      	ldr	r3, [r2, #0]
 80039b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80039b8:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 80039ba:	4620      	mov	r0, r4
 80039bc:	f7ff fd8c 	bl	80034d8 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 80039c0:	2301      	movs	r3, #1
 80039c2:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    hsai->XferCount = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 80039cc:	e7ec      	b.n	80039a8 <SAI_DMAError+0x20>

080039ce <HAL_SAI_GetState>:
  return hsai->State;
 80039ce:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 80039d2:	4770      	bx	lr

080039d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039d8:	4605      	mov	r5, r0
 80039da:	460f      	mov	r7, r1
 80039dc:	4616      	mov	r6, r2
 80039de:	4699      	mov	r9, r3
 80039e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e4:	682c      	ldr	r4, [r5, #0]
 80039e6:	69e4      	ldr	r4, [r4, #28]
 80039e8:	ea37 0304 	bics.w	r3, r7, r4
 80039ec:	bf0c      	ite	eq
 80039ee:	2401      	moveq	r4, #1
 80039f0:	2400      	movne	r4, #0
 80039f2:	42b4      	cmp	r4, r6
 80039f4:	d11f      	bne.n	8003a36 <UART_WaitOnFlagUntilTimeout+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80039f6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80039fa:	d0f3      	beq.n	80039e4 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80039fc:	f1b8 0f00 	cmp.w	r8, #0
 8003a00:	d005      	beq.n	8003a0e <UART_WaitOnFlagUntilTimeout+0x3a>
 8003a02:	f7fd fc67 	bl	80012d4 <HAL_GetTick>
 8003a06:	eba0 0009 	sub.w	r0, r0, r9
 8003a0a:	4540      	cmp	r0, r8
 8003a0c:	d3ea      	bcc.n	80039e4 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a0e:	682a      	ldr	r2, [r5, #0]
 8003a10:	6813      	ldr	r3, [r2, #0]
 8003a12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a16:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a18:	682a      	ldr	r2, [r5, #0]
 8003a1a:	6893      	ldr	r3, [r2, #8]
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a22:	2320      	movs	r3, #32
 8003a24:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003a28:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8003a32:	2003      	movs	r0, #3
 8003a34:	e000      	b.n	8003a38 <UART_WaitOnFlagUntilTimeout+0x64>
      }
    }
  }
  return HAL_OK;
 8003a36:	2000      	movs	r0, #0
}
 8003a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003a3c <HAL_UART_Transmit>:
{
 8003a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8003a44:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d152      	bne.n	8003af4 <HAL_UART_Transmit+0xb8>
 8003a4e:	4604      	mov	r4, r0
 8003a50:	460d      	mov	r5, r1
 8003a52:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8003a54:	fab2 f382 	clz	r3, r2
 8003a58:	095b      	lsrs	r3, r3, #5
 8003a5a:	2900      	cmp	r1, #0
 8003a5c:	bf08      	it	eq
 8003a5e:	2301      	moveq	r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d14b      	bne.n	8003afc <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8003a64:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d049      	beq.n	8003b00 <HAL_UART_Transmit+0xc4>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a72:	2300      	movs	r3, #0
 8003a74:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a76:	2321      	movs	r3, #33	; 0x21
 8003a78:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8003a7c:	f7fd fc2a 	bl	80012d4 <HAL_GetTick>
 8003a80:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003a82:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a86:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8003a8a:	e003      	b.n	8003a94 <HAL_UART_Transmit+0x58>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003a8c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	629a      	str	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8003a94:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	b1e3      	cbz	r3, 8003ad6 <HAL_UART_Transmit+0x9a>
      huart->TxXferCount--;
 8003a9c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8003aa0:	b292      	uxth	r2, r2
 8003aa2:	3a01      	subs	r2, #1
 8003aa4:	b292      	uxth	r2, r2
 8003aa6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aaa:	9600      	str	r6, [sp, #0]
 8003aac:	463b      	mov	r3, r7
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2180      	movs	r1, #128	; 0x80
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f7ff ff8e 	bl	80039d4 <UART_WaitOnFlagUntilTimeout>
 8003ab8:	bb20      	cbnz	r0, 8003b04 <HAL_UART_Transmit+0xc8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aba:	68a3      	ldr	r3, [r4, #8]
 8003abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac0:	d1e4      	bne.n	8003a8c <HAL_UART_Transmit+0x50>
 8003ac2:	6923      	ldr	r3, [r4, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e1      	bne.n	8003a8c <HAL_UART_Transmit+0x50>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003ac8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003acc:	6822      	ldr	r2, [r4, #0]
 8003ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad2:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 8003ad4:	e7de      	b.n	8003a94 <HAL_UART_Transmit+0x58>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ad6:	9600      	str	r6, [sp, #0]
 8003ad8:	463b      	mov	r3, r7
 8003ada:	2200      	movs	r2, #0
 8003adc:	2140      	movs	r1, #64	; 0x40
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f7ff ff78 	bl	80039d4 <UART_WaitOnFlagUntilTimeout>
 8003ae4:	b980      	cbnz	r0, 8003b08 <HAL_UART_Transmit+0xcc>
    huart->gState = HAL_UART_STATE_READY;
 8003ae6:	2320      	movs	r3, #32
 8003ae8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8003aec:	2300      	movs	r3, #0
 8003aee:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    return HAL_OK;
 8003af2:	e000      	b.n	8003af6 <HAL_UART_Transmit+0xba>
    return HAL_BUSY;
 8003af4:	2002      	movs	r0, #2
}
 8003af6:	b002      	add	sp, #8
 8003af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003afc:	2001      	movs	r0, #1
 8003afe:	e7fa      	b.n	8003af6 <HAL_UART_Transmit+0xba>
    __HAL_LOCK(huart);
 8003b00:	2002      	movs	r0, #2
 8003b02:	e7f8      	b.n	8003af6 <HAL_UART_Transmit+0xba>
        return HAL_TIMEOUT;
 8003b04:	2003      	movs	r0, #3
 8003b06:	e7f6      	b.n	8003af6 <HAL_UART_Transmit+0xba>
      return HAL_TIMEOUT;
 8003b08:	2003      	movs	r0, #3
 8003b0a:	e7f4      	b.n	8003af6 <HAL_UART_Transmit+0xba>

08003b0c <HAL_UART_Receive>:
{
 8003b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8003b14:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d176      	bne.n	8003c0c <HAL_UART_Receive+0x100>
 8003b1e:	4604      	mov	r4, r0
 8003b20:	460d      	mov	r5, r1
 8003b22:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8003b24:	fab2 f382 	clz	r3, r2
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	2900      	cmp	r1, #0
 8003b2c:	bf08      	it	eq
 8003b2e:	2301      	moveq	r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d16f      	bne.n	8003c14 <HAL_UART_Receive+0x108>
    __HAL_LOCK(huart);
 8003b34:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d06d      	beq.n	8003c18 <HAL_UART_Receive+0x10c>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b46:	2322      	movs	r3, #34	; 0x22
 8003b48:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 8003b4c:	f7fd fbc2 	bl	80012d4 <HAL_GetTick>
 8003b50:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8003b52:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8003b56:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8003b5a:	68a3      	ldr	r3, [r4, #8]
 8003b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b60:	d006      	beq.n	8003b70 <HAL_UART_Receive+0x64>
 8003b62:	b9a3      	cbnz	r3, 8003b8e <HAL_UART_Receive+0x82>
 8003b64:	6923      	ldr	r3, [r4, #16]
 8003b66:	b973      	cbnz	r3, 8003b86 <HAL_UART_Receive+0x7a>
 8003b68:	23ff      	movs	r3, #255	; 0xff
 8003b6a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8003b6e:	e011      	b.n	8003b94 <HAL_UART_Receive+0x88>
 8003b70:	6923      	ldr	r3, [r4, #16]
 8003b72:	b923      	cbnz	r3, 8003b7e <HAL_UART_Receive+0x72>
 8003b74:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003b78:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8003b7c:	e00a      	b.n	8003b94 <HAL_UART_Receive+0x88>
 8003b7e:	23ff      	movs	r3, #255	; 0xff
 8003b80:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8003b84:	e006      	b.n	8003b94 <HAL_UART_Receive+0x88>
 8003b86:	237f      	movs	r3, #127	; 0x7f
 8003b88:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8003b8c:	e002      	b.n	8003b94 <HAL_UART_Receive+0x88>
 8003b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b92:	d002      	beq.n	8003b9a <HAL_UART_Receive+0x8e>
    uhMask = huart->Mask;
 8003b94:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 8003b98:	e010      	b.n	8003bbc <HAL_UART_Receive+0xb0>
    UART_MASK_COMPUTATION(huart);
 8003b9a:	6923      	ldr	r3, [r4, #16]
 8003b9c:	b91b      	cbnz	r3, 8003ba6 <HAL_UART_Receive+0x9a>
 8003b9e:	237f      	movs	r3, #127	; 0x7f
 8003ba0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8003ba4:	e7f6      	b.n	8003b94 <HAL_UART_Receive+0x88>
 8003ba6:	233f      	movs	r3, #63	; 0x3f
 8003ba8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8003bac:	e7f2      	b.n	8003b94 <HAL_UART_Receive+0x88>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bb2:	fa5f f388 	uxtb.w	r3, r8
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	f805 3b01 	strb.w	r3, [r5], #1
    while(huart->RxXferCount > 0U)
 8003bbc:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	b1e3      	cbz	r3, 8003bfe <HAL_UART_Receive+0xf2>
      huart->RxXferCount--;
 8003bc4:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8003bc8:	b292      	uxth	r2, r2
 8003bca:	3a01      	subs	r2, #1
 8003bcc:	b292      	uxth	r2, r2
 8003bce:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003bd2:	9600      	str	r6, [sp, #0]
 8003bd4:	463b      	mov	r3, r7
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2120      	movs	r1, #32
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f7ff fefa 	bl	80039d4 <UART_WaitOnFlagUntilTimeout>
 8003be0:	b9e0      	cbnz	r0, 8003c1c <HAL_UART_Receive+0x110>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be2:	68a3      	ldr	r3, [r4, #8]
 8003be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be8:	d1e1      	bne.n	8003bae <HAL_UART_Receive+0xa2>
 8003bea:	6923      	ldr	r3, [r4, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1de      	bne.n	8003bae <HAL_UART_Receive+0xa2>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	ea08 0303 	and.w	r3, r8, r3
 8003bf8:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8003bfc:	e7de      	b.n	8003bbc <HAL_UART_Receive+0xb0>
    huart->RxState = HAL_UART_STATE_READY;
 8003bfe:	2320      	movs	r3, #32
 8003c00:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8003c04:	2000      	movs	r0, #0
 8003c06:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8003c0a:	e000      	b.n	8003c0e <HAL_UART_Receive+0x102>
    return HAL_BUSY;
 8003c0c:	2002      	movs	r0, #2
}
 8003c0e:	b002      	add	sp, #8
 8003c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003c14:	2001      	movs	r0, #1
 8003c16:	e7fa      	b.n	8003c0e <HAL_UART_Receive+0x102>
    __HAL_LOCK(huart);
 8003c18:	2002      	movs	r0, #2
 8003c1a:	e7f8      	b.n	8003c0e <HAL_UART_Receive+0x102>
        return HAL_TIMEOUT;
 8003c1c:	2003      	movs	r0, #3
 8003c1e:	e7f6      	b.n	8003c0e <HAL_UART_Receive+0x102>

08003c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c24:	6883      	ldr	r3, [r0, #8]
 8003c26:	6902      	ldr	r2, [r0, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	6942      	ldr	r2, [r0, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	69c2      	ldr	r2, [r0, #28]
 8003c30:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003c32:	6801      	ldr	r1, [r0, #0]
 8003c34:	6808      	ldr	r0, [r1, #0]
 8003c36:	4aa0      	ldr	r2, [pc, #640]	; (8003eb8 <UART_SetConfig+0x298>)
 8003c38:	4002      	ands	r2, r0
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c3e:	6822      	ldr	r2, [r4, #0]
 8003c40:	6853      	ldr	r3, [r2, #4]
 8003c42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c46:	68e1      	ldr	r1, [r4, #12]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003c4c:	69a3      	ldr	r3, [r4, #24]
 8003c4e:	6a22      	ldr	r2, [r4, #32]
 8003c50:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003c52:	6821      	ldr	r1, [r4, #0]
 8003c54:	688b      	ldr	r3, [r1, #8]
 8003c56:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	4a96      	ldr	r2, [pc, #600]	; (8003ebc <UART_SetConfig+0x29c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d019      	beq.n	8003c9a <UART_SetConfig+0x7a>
 8003c66:	4a96      	ldr	r2, [pc, #600]	; (8003ec0 <UART_SetConfig+0x2a0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d02a      	beq.n	8003cc2 <UART_SetConfig+0xa2>
 8003c6c:	4a95      	ldr	r2, [pc, #596]	; (8003ec4 <UART_SetConfig+0x2a4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d040      	beq.n	8003cf4 <UART_SetConfig+0xd4>
 8003c72:	4a95      	ldr	r2, [pc, #596]	; (8003ec8 <UART_SetConfig+0x2a8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d065      	beq.n	8003d44 <UART_SetConfig+0x124>
 8003c78:	4a94      	ldr	r2, [pc, #592]	; (8003ecc <UART_SetConfig+0x2ac>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d075      	beq.n	8003d6a <UART_SetConfig+0x14a>
 8003c7e:	4a94      	ldr	r2, [pc, #592]	; (8003ed0 <UART_SetConfig+0x2b0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	f000 8088 	beq.w	8003d96 <UART_SetConfig+0x176>
 8003c86:	4a93      	ldr	r2, [pc, #588]	; (8003ed4 <UART_SetConfig+0x2b4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	f000 809a 	beq.w	8003dc2 <UART_SetConfig+0x1a2>
 8003c8e:	4a92      	ldr	r2, [pc, #584]	; (8003ed8 <UART_SetConfig+0x2b8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	f000 80ac 	beq.w	8003dee <UART_SetConfig+0x1ce>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003c96:	2510      	movs	r5, #16
 8003c98:	e03d      	b.n	8003d16 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c9a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003c9e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003ca2:	f002 0203 	and.w	r2, r2, #3
 8003ca6:	2a03      	cmp	r2, #3
 8003ca8:	d803      	bhi.n	8003cb2 <UART_SetConfig+0x92>
 8003caa:	e8df f002 	tbb	[pc, r2]
 8003cae:	06b5      	.short	0x06b5
 8003cb0:	0804      	.short	0x0804
 8003cb2:	2510      	movs	r5, #16
 8003cb4:	e02f      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003cb6:	2502      	movs	r5, #2
 8003cb8:	e02d      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003cba:	2504      	movs	r5, #4
 8003cbc:	e02b      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003cbe:	2508      	movs	r5, #8
 8003cc0:	e029      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003cc2:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8003cc6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003cca:	f002 020c 	and.w	r2, r2, #12
 8003cce:	2a0c      	cmp	r2, #12
 8003cd0:	d808      	bhi.n	8003ce4 <UART_SetConfig+0xc4>
 8003cd2:	e8df f002 	tbb	[pc, r2]
 8003cd6:	07a3      	.short	0x07a3
 8003cd8:	070b0707 	.word	0x070b0707
 8003cdc:	07090707 	.word	0x07090707
 8003ce0:	0707      	.short	0x0707
 8003ce2:	0d          	.byte	0x0d
 8003ce3:	00          	.byte	0x00
 8003ce4:	2510      	movs	r5, #16
 8003ce6:	e016      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003ce8:	2502      	movs	r5, #2
 8003cea:	e014      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003cec:	2504      	movs	r5, #4
 8003cee:	e012      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003cf0:	2508      	movs	r5, #8
 8003cf2:	e010      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003cf4:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8003cf8:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003cfc:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8003d00:	2a20      	cmp	r2, #32
 8003d02:	f000 808d 	beq.w	8003e20 <UART_SetConfig+0x200>
 8003d06:	d819      	bhi.n	8003d3c <UART_SetConfig+0x11c>
 8003d08:	2a00      	cmp	r2, #0
 8003d0a:	f000 808b 	beq.w	8003e24 <UART_SetConfig+0x204>
 8003d0e:	2a10      	cmp	r2, #16
 8003d10:	f040 808a 	bne.w	8003e28 <UART_SetConfig+0x208>
 8003d14:	2504      	movs	r5, #4

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d16:	69e2      	ldr	r2, [r4, #28]
 8003d18:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003d1c:	f000 80b0 	beq.w	8003e80 <UART_SetConfig+0x260>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8003d20:	2d08      	cmp	r5, #8
 8003d22:	f200 813d 	bhi.w	8003fa0 <UART_SetConfig+0x380>
 8003d26:	e8df f015 	tbh	[pc, r5, lsl #1]
 8003d2a:	0104      	.short	0x0104
 8003d2c:	011b010f 	.word	0x011b010f
 8003d30:	0125013b 	.word	0x0125013b
 8003d34:	013b013b 	.word	0x013b013b
 8003d38:	0131013b 	.word	0x0131013b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d3c:	2a30      	cmp	r2, #48	; 0x30
 8003d3e:	d175      	bne.n	8003e2c <UART_SetConfig+0x20c>
 8003d40:	2508      	movs	r5, #8
 8003d42:	e7e8      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003d44:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8003d48:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003d4c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8003d50:	2a80      	cmp	r2, #128	; 0x80
 8003d52:	d06d      	beq.n	8003e30 <UART_SetConfig+0x210>
 8003d54:	d805      	bhi.n	8003d62 <UART_SetConfig+0x142>
 8003d56:	2a00      	cmp	r2, #0
 8003d58:	d06c      	beq.n	8003e34 <UART_SetConfig+0x214>
 8003d5a:	2a40      	cmp	r2, #64	; 0x40
 8003d5c:	d16c      	bne.n	8003e38 <UART_SetConfig+0x218>
 8003d5e:	2504      	movs	r5, #4
 8003d60:	e7d9      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003d62:	2ac0      	cmp	r2, #192	; 0xc0
 8003d64:	d16a      	bne.n	8003e3c <UART_SetConfig+0x21c>
 8003d66:	2508      	movs	r5, #8
 8003d68:	e7d5      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003d6a:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8003d6e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003d72:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003d76:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003d7a:	d061      	beq.n	8003e40 <UART_SetConfig+0x220>
 8003d7c:	d806      	bhi.n	8003d8c <UART_SetConfig+0x16c>
 8003d7e:	2a00      	cmp	r2, #0
 8003d80:	d060      	beq.n	8003e44 <UART_SetConfig+0x224>
 8003d82:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003d86:	d15f      	bne.n	8003e48 <UART_SetConfig+0x228>
 8003d88:	2504      	movs	r5, #4
 8003d8a:	e7c4      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003d8c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003d90:	d15c      	bne.n	8003e4c <UART_SetConfig+0x22c>
 8003d92:	2508      	movs	r5, #8
 8003d94:	e7bf      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003d96:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8003d9a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003d9e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8003da2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003da6:	d053      	beq.n	8003e50 <UART_SetConfig+0x230>
 8003da8:	d806      	bhi.n	8003db8 <UART_SetConfig+0x198>
 8003daa:	2a00      	cmp	r2, #0
 8003dac:	d052      	beq.n	8003e54 <UART_SetConfig+0x234>
 8003dae:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003db2:	d151      	bne.n	8003e58 <UART_SetConfig+0x238>
 8003db4:	2504      	movs	r5, #4
 8003db6:	e7ae      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003db8:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8003dbc:	d14e      	bne.n	8003e5c <UART_SetConfig+0x23c>
 8003dbe:	2508      	movs	r5, #8
 8003dc0:	e7a9      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003dc2:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8003dc6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003dca:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8003dce:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003dd2:	d045      	beq.n	8003e60 <UART_SetConfig+0x240>
 8003dd4:	d806      	bhi.n	8003de4 <UART_SetConfig+0x1c4>
 8003dd6:	2a00      	cmp	r2, #0
 8003dd8:	d044      	beq.n	8003e64 <UART_SetConfig+0x244>
 8003dda:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003dde:	d143      	bne.n	8003e68 <UART_SetConfig+0x248>
 8003de0:	2504      	movs	r5, #4
 8003de2:	e798      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003de4:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8003de8:	d140      	bne.n	8003e6c <UART_SetConfig+0x24c>
 8003dea:	2508      	movs	r5, #8
 8003dec:	e793      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003dee:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8003df2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003df6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8003dfa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003dfe:	d037      	beq.n	8003e70 <UART_SetConfig+0x250>
 8003e00:	d805      	bhi.n	8003e0e <UART_SetConfig+0x1ee>
 8003e02:	b3ba      	cbz	r2, 8003e74 <UART_SetConfig+0x254>
 8003e04:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003e08:	d136      	bne.n	8003e78 <UART_SetConfig+0x258>
 8003e0a:	2504      	movs	r5, #4
 8003e0c:	e783      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e0e:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8003e12:	d133      	bne.n	8003e7c <UART_SetConfig+0x25c>
 8003e14:	2508      	movs	r5, #8
 8003e16:	e77e      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e18:	2501      	movs	r5, #1
 8003e1a:	e77c      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e1c:	2500      	movs	r5, #0
 8003e1e:	e77a      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e20:	2502      	movs	r5, #2
 8003e22:	e778      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e24:	2500      	movs	r5, #0
 8003e26:	e776      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e28:	2510      	movs	r5, #16
 8003e2a:	e774      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e2c:	2510      	movs	r5, #16
 8003e2e:	e772      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e30:	2502      	movs	r5, #2
 8003e32:	e770      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e34:	2500      	movs	r5, #0
 8003e36:	e76e      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e38:	2510      	movs	r5, #16
 8003e3a:	e76c      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e3c:	2510      	movs	r5, #16
 8003e3e:	e76a      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e40:	2502      	movs	r5, #2
 8003e42:	e768      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e44:	2500      	movs	r5, #0
 8003e46:	e766      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e48:	2510      	movs	r5, #16
 8003e4a:	e764      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e4c:	2510      	movs	r5, #16
 8003e4e:	e762      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e50:	2502      	movs	r5, #2
 8003e52:	e760      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e54:	2501      	movs	r5, #1
 8003e56:	e75e      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e58:	2510      	movs	r5, #16
 8003e5a:	e75c      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e5c:	2510      	movs	r5, #16
 8003e5e:	e75a      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e60:	2502      	movs	r5, #2
 8003e62:	e758      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e64:	2500      	movs	r5, #0
 8003e66:	e756      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e68:	2510      	movs	r5, #16
 8003e6a:	e754      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e6c:	2510      	movs	r5, #16
 8003e6e:	e752      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e70:	2502      	movs	r5, #2
 8003e72:	e750      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e74:	2500      	movs	r5, #0
 8003e76:	e74e      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e78:	2510      	movs	r5, #16
 8003e7a:	e74c      	b.n	8003d16 <UART_SetConfig+0xf6>
 8003e7c:	2510      	movs	r5, #16
 8003e7e:	e74a      	b.n	8003d16 <UART_SetConfig+0xf6>
    switch (clocksource)
 8003e80:	2d08      	cmp	r5, #8
 8003e82:	d853      	bhi.n	8003f2c <UART_SetConfig+0x30c>
 8003e84:	e8df f005 	tbb	[pc, r5]
 8003e88:	52352a05 	.word	0x52352a05
 8003e8c:	5252523e 	.word	0x5252523e
 8003e90:	49          	.byte	0x49
 8003e91:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003e92:	f7fe fcdf 	bl	8002854 <HAL_RCC_GetPCLK1Freq>
 8003e96:	6862      	ldr	r2, [r4, #4]
 8003e98:	0853      	lsrs	r3, r2, #1
 8003e9a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003e9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ea2:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8003ea4:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ea8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003eac:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8003eae:	6822      	ldr	r2, [r4, #0]
 8003eb0:	60d3      	str	r3, [r2, #12]
    }
  }

  return ret;

}
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	bd38      	pop	{r3, r4, r5, pc}
 8003eb6:	bf00      	nop
 8003eb8:	efff69f3 	.word	0xefff69f3
 8003ebc:	40011000 	.word	0x40011000
 8003ec0:	40004400 	.word	0x40004400
 8003ec4:	40004800 	.word	0x40004800
 8003ec8:	40004c00 	.word	0x40004c00
 8003ecc:	40005000 	.word	0x40005000
 8003ed0:	40011400 	.word	0x40011400
 8003ed4:	40007800 	.word	0x40007800
 8003ed8:	40007c00 	.word	0x40007c00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003edc:	f7fe fcd0 	bl	8002880 <HAL_RCC_GetPCLK2Freq>
 8003ee0:	6862      	ldr	r2, [r4, #4]
 8003ee2:	0853      	lsrs	r3, r2, #1
 8003ee4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003ee8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eec:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003eee:	2500      	movs	r5, #0
      break;
 8003ef0:	e7d8      	b.n	8003ea4 <UART_SetConfig+0x284>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003ef2:	6862      	ldr	r2, [r4, #4]
 8003ef4:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <UART_SetConfig+0x384>)
 8003ef6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003efa:	fbb3 f3f2 	udiv	r3, r3, r2
 8003efe:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f00:	2500      	movs	r5, #0
      break;
 8003f02:	e7cf      	b.n	8003ea4 <UART_SetConfig+0x284>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f04:	f7fe fb92 	bl	800262c <HAL_RCC_GetSysClockFreq>
 8003f08:	6862      	ldr	r2, [r4, #4]
 8003f0a:	0853      	lsrs	r3, r2, #1
 8003f0c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003f10:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f14:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f16:	2500      	movs	r5, #0
      break;
 8003f18:	e7c4      	b.n	8003ea4 <UART_SetConfig+0x284>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003f1a:	6862      	ldr	r2, [r4, #4]
 8003f1c:	0853      	lsrs	r3, r2, #1
 8003f1e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003f22:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f26:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f28:	2500      	movs	r5, #0
      break;
 8003f2a:	e7bb      	b.n	8003ea4 <UART_SetConfig+0x284>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f2c:	2501      	movs	r5, #1
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e7b8      	b.n	8003ea4 <UART_SetConfig+0x284>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003f32:	f7fe fc8f 	bl	8002854 <HAL_RCC_GetPCLK1Freq>
 8003f36:	6862      	ldr	r2, [r4, #4]
 8003f38:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f40:	6822      	ldr	r2, [r4, #0]
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	60d3      	str	r3, [r2, #12]
      break;
 8003f46:	e7b4      	b.n	8003eb2 <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003f48:	f7fe fc9a 	bl	8002880 <HAL_RCC_GetPCLK2Freq>
 8003f4c:	6862      	ldr	r2, [r4, #4]
 8003f4e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003f52:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f56:	6822      	ldr	r2, [r4, #0]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f5c:	2500      	movs	r5, #0
      break;
 8003f5e:	e7a8      	b.n	8003eb2 <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003f60:	6861      	ldr	r1, [r4, #4]
 8003f62:	4a11      	ldr	r2, [pc, #68]	; (8003fa8 <UART_SetConfig+0x388>)
 8003f64:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8003f68:	fbb2 f2f1 	udiv	r2, r2, r1
 8003f6c:	b292      	uxth	r2, r2
 8003f6e:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f70:	2500      	movs	r5, #0
      break;
 8003f72:	e79e      	b.n	8003eb2 <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f74:	f7fe fb5a 	bl	800262c <HAL_RCC_GetSysClockFreq>
 8003f78:	6862      	ldr	r2, [r4, #4]
 8003f7a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003f7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f82:	6822      	ldr	r2, [r4, #0]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f88:	2500      	movs	r5, #0
      break;
 8003f8a:	e792      	b.n	8003eb2 <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003f8c:	6861      	ldr	r1, [r4, #4]
 8003f8e:	084a      	lsrs	r2, r1, #1
 8003f90:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8003f94:	fbb2 f2f1 	udiv	r2, r2, r1
 8003f98:	b292      	uxth	r2, r2
 8003f9a:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f9c:	2500      	movs	r5, #0
      break;
 8003f9e:	e788      	b.n	8003eb2 <UART_SetConfig+0x292>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fa0:	2501      	movs	r5, #1
 8003fa2:	e786      	b.n	8003eb2 <UART_SetConfig+0x292>
 8003fa4:	01e84800 	.word	0x01e84800
 8003fa8:	00f42400 	.word	0x00f42400

08003fac <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fae:	f013 0f01 	tst.w	r3, #1
 8003fb2:	d006      	beq.n	8003fc2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fb4:	6802      	ldr	r2, [r0, #0]
 8003fb6:	6853      	ldr	r3, [r2, #4]
 8003fb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003fbc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003fbe:	430b      	orrs	r3, r1
 8003fc0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fc2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fc4:	f013 0f02 	tst.w	r3, #2
 8003fc8:	d006      	beq.n	8003fd8 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fca:	6802      	ldr	r2, [r0, #0]
 8003fcc:	6853      	ldr	r3, [r2, #4]
 8003fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fd8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fda:	f013 0f04 	tst.w	r3, #4
 8003fde:	d006      	beq.n	8003fee <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fe0:	6802      	ldr	r2, [r0, #0]
 8003fe2:	6853      	ldr	r3, [r2, #4]
 8003fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003fea:	430b      	orrs	r3, r1
 8003fec:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003ff0:	f013 0f08 	tst.w	r3, #8
 8003ff4:	d006      	beq.n	8004004 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ff6:	6802      	ldr	r2, [r0, #0]
 8003ff8:	6853      	ldr	r3, [r2, #4]
 8003ffa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ffe:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004000:	430b      	orrs	r3, r1
 8004002:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004004:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004006:	f013 0f10 	tst.w	r3, #16
 800400a:	d006      	beq.n	800401a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800400c:	6802      	ldr	r2, [r0, #0]
 800400e:	6893      	ldr	r3, [r2, #8]
 8004010:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004014:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004016:	430b      	orrs	r3, r1
 8004018:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800401a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800401c:	f013 0f20 	tst.w	r3, #32
 8004020:	d006      	beq.n	8004030 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004022:	6802      	ldr	r2, [r0, #0]
 8004024:	6893      	ldr	r3, [r2, #8]
 8004026:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800402a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800402c:	430b      	orrs	r3, r1
 800402e:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004030:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004032:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004036:	d00a      	beq.n	800404e <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004038:	6802      	ldr	r2, [r0, #0]
 800403a:	6853      	ldr	r3, [r2, #4]
 800403c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004040:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004042:	430b      	orrs	r3, r1
 8004044:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004046:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800404c:	d00b      	beq.n	8004066 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800404e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004050:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004054:	d006      	beq.n	8004064 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004056:	6802      	ldr	r2, [r0, #0]
 8004058:	6853      	ldr	r3, [r2, #4]
 800405a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800405e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004060:	430b      	orrs	r3, r1
 8004062:	6053      	str	r3, [r2, #4]
  }
}
 8004064:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004066:	6802      	ldr	r2, [r0, #0]
 8004068:	6853      	ldr	r3, [r2, #4]
 800406a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800406e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004070:	430b      	orrs	r3, r1
 8004072:	6053      	str	r3, [r2, #4]
 8004074:	e7eb      	b.n	800404e <UART_AdvFeatureConfig+0xa2>

08004076 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004076:	b510      	push	{r4, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407c:	2300      	movs	r3, #0
 800407e:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004080:	f7fd f928 	bl	80012d4 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f013 0f08 	tst.w	r3, #8
 800408c:	d109      	bne.n	80040a2 <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800408e:	2320      	movs	r3, #32
 8004090:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8004094:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004098:	2000      	movs	r0, #0
 800409a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return HAL_OK;
}
 800409e:	b002      	add	sp, #8
 80040a0:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	4603      	mov	r3, r0
 80040aa:	2200      	movs	r2, #0
 80040ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040b0:	4620      	mov	r0, r4
 80040b2:	f7ff fc8f 	bl	80039d4 <UART_WaitOnFlagUntilTimeout>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	d0e9      	beq.n	800408e <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80040ba:	2003      	movs	r0, #3
 80040bc:	e7ef      	b.n	800409e <UART_CheckIdleState+0x28>

080040be <HAL_UART_Init>:
  if(huart == NULL)
 80040be:	b378      	cbz	r0, 8004120 <HAL_UART_Init+0x62>
{
 80040c0:	b510      	push	{r4, lr}
 80040c2:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80040c4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80040c8:	b30b      	cbz	r3, 800410e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80040ca:	2324      	movs	r3, #36	; 0x24
 80040cc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80040d0:	6822      	ldr	r2, [r4, #0]
 80040d2:	6813      	ldr	r3, [r2, #0]
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040da:	4620      	mov	r0, r4
 80040dc:	f7ff fda0 	bl	8003c20 <UART_SetConfig>
 80040e0:	2801      	cmp	r0, #1
 80040e2:	d013      	beq.n	800410c <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040e6:	b9bb      	cbnz	r3, 8004118 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e8:	6822      	ldr	r2, [r4, #0]
 80040ea:	6853      	ldr	r3, [r2, #4]
 80040ec:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80040f0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f2:	6822      	ldr	r2, [r4, #0]
 80040f4:	6893      	ldr	r3, [r2, #8]
 80040f6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80040fa:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80040fc:	6822      	ldr	r2, [r4, #0]
 80040fe:	6813      	ldr	r3, [r2, #0]
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004106:	4620      	mov	r0, r4
 8004108:	f7ff ffb5 	bl	8004076 <UART_CheckIdleState>
}
 800410c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800410e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8004112:	f000 fad3 	bl	80046bc <HAL_UART_MspInit>
 8004116:	e7d8      	b.n	80040ca <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8004118:	4620      	mov	r0, r4
 800411a:	f7ff ff47 	bl	8003fac <UART_AdvFeatureConfig>
 800411e:	e7e3      	b.n	80040e8 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8004120:	2001      	movs	r0, #1
}
 8004122:	4770      	bx	lr

08004124 <AUDIO_LOOPBACK>:

#include "audio.h"


void AUDIO_LOOPBACK(void)
     {
 8004124:	b508      	push	{r3, lr}

	 /* Initialize Audio Recorder with 4 channels to be used */
	 if (BSP_AUDIO_IN_OUT_Init(BSP_AUDIO_FREQUENCY_48K) == AUDIO_OK)
 8004126:	f64b 3080 	movw	r0, #48000	; 0xbb80
 800412a:	f000 f99b 	bl	8004464 <BSP_AUDIO_IN_OUT_Init>
 800412e:	bb00      	cbnz	r0, 8004172 <AUDIO_LOOPBACK+0x4e>
	 {
		 printf("Audio I/O initialization OK\r\n");
 8004130:	4825      	ldr	r0, [pc, #148]	; (80041c8 <AUDIO_LOOPBACK+0xa4>)
 8004132:	f000 fc41 	bl	80049b8 <puts>
	 } else {
		 printf("Audio I/O initialization failed.\r\n");
	 }

	 /* Start Recording */
	 HAL_StatusTypeDef res = HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)audio_in_buffer, RECORD_BUFFER_SIZE);
 8004136:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800413a:	4924      	ldr	r1, [pc, #144]	; (80041cc <AUDIO_LOOPBACK+0xa8>)
 800413c:	4824      	ldr	r0, [pc, #144]	; (80041d0 <AUDIO_LOOPBACK+0xac>)
 800413e:	f7ff fb79 	bl	8003834 <HAL_SAI_Receive_DMA>
	 if (HAL_OK == res)
 8004142:	4601      	mov	r1, r0
 8004144:	b9c8      	cbnz	r0, 800417a <AUDIO_LOOPBACK+0x56>
	 {
		 printf("SAI receive begin OK\r\n");
 8004146:	4823      	ldr	r0, [pc, #140]	; (80041d4 <AUDIO_LOOPBACK+0xb0>)
 8004148:	f000 fc36 	bl	80049b8 <puts>
	 } else {
		 printf("SAI receive error: %d\r\n", res);
	 }

	 printf("Copying Record buffer to Playback buffer\r\n");
 800414c:	4822      	ldr	r0, [pc, #136]	; (80041d8 <AUDIO_LOOPBACK+0xb4>)
 800414e:	f000 fc33 	bl	80049b8 <puts>

	 /* Play the recorded buffer */
	 if (_BSP_AUDIO_OUT_Play((uint16_t *) &audio_out_buffer[0], RECORD_BUFFER_SIZE) == AUDIO_OK)
 8004152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004156:	4821      	ldr	r0, [pc, #132]	; (80041dc <AUDIO_LOOPBACK+0xb8>)
 8004158:	f000 f9c8 	bl	80044ec <_BSP_AUDIO_OUT_Play>
 800415c:	b988      	cbnz	r0, 8004182 <AUDIO_LOOPBACK+0x5e>
	 {
		 printf("Audio output OK\r\n");
 800415e:	4820      	ldr	r0, [pc, #128]	; (80041e0 <AUDIO_LOOPBACK+0xbc>)
 8004160:	f000 fc2a 	bl	80049b8 <puts>
	 } else {
		 printf("Audio output error\r\n");
	 }
	 printf("\r\n");
 8004164:	481f      	ldr	r0, [pc, #124]	; (80041e4 <AUDIO_LOOPBACK+0xc0>)
 8004166:	f000 fc27 	bl	80049b8 <puts>

	 audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 800416a:	4b1f      	ldr	r3, [pc, #124]	; (80041e8 <AUDIO_LOOPBACK+0xc4>)
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	e01a      	b.n	80041a8 <AUDIO_LOOPBACK+0x84>
		 printf("Audio I/O initialization failed.\r\n");
 8004172:	481e      	ldr	r0, [pc, #120]	; (80041ec <AUDIO_LOOPBACK+0xc8>)
 8004174:	f000 fc20 	bl	80049b8 <puts>
 8004178:	e7dd      	b.n	8004136 <AUDIO_LOOPBACK+0x12>
		 printf("SAI receive error: %d\r\n", res);
 800417a:	481d      	ldr	r0, [pc, #116]	; (80041f0 <AUDIO_LOOPBACK+0xcc>)
 800417c:	f000 fb96 	bl	80048ac <iprintf>
 8004180:	e7e4      	b.n	800414c <AUDIO_LOOPBACK+0x28>
		 printf("Audio output error\r\n");
 8004182:	481c      	ldr	r0, [pc, #112]	; (80041f4 <AUDIO_LOOPBACK+0xd0>)
 8004184:	f000 fc18 	bl	80049b8 <puts>
 8004188:	e7ec      	b.n	8004164 <AUDIO_LOOPBACK+0x40>
			 if (audio_rec_buffer_state == BUFFER_OFFSET_HALF)
			 {
				 CopyBuffer(&audio_out_buffer[0], &audio_in_buffer[0], RECORD_BUFFER_SIZE / 2);
			 } else {
				 /* if(audio_rec_buffer_state == BUFFER_OFFSET_FULL)*/
				 CopyBuffer(&audio_out_buffer[RECORD_BUFFER_SIZE / 2],
 800418a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800418e:	491a      	ldr	r1, [pc, #104]	; (80041f8 <AUDIO_LOOPBACK+0xd4>)
 8004190:	481a      	ldr	r0, [pc, #104]	; (80041fc <AUDIO_LOOPBACK+0xd8>)
 8004192:	f000 fb25 	bl	80047e0 <CopyBuffer>
							  &audio_in_buffer[RECORD_BUFFER_SIZE / 2],
											RECORD_BUFFER_SIZE / 2);
			 }
			 /* Wait for next data */
			 audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8004196:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <AUDIO_LOOPBACK+0xc4>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
		 }
		 if (audio_tx_buffer_state)
 800419c:	4b18      	ldr	r3, [pc, #96]	; (8004200 <AUDIO_LOOPBACK+0xdc>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	b113      	cbz	r3, 80041a8 <AUDIO_LOOPBACK+0x84>
		 {
			 audio_tx_buffer_state = 0;
 80041a2:	4b17      	ldr	r3, [pc, #92]	; (8004200 <AUDIO_LOOPBACK+0xdc>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
		 if (audio_rec_buffer_state != BUFFER_OFFSET_NONE)
 80041a8:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <AUDIO_LOOPBACK+0xc4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f5      	beq.n	800419c <AUDIO_LOOPBACK+0x78>
			 if (audio_rec_buffer_state == BUFFER_OFFSET_HALF)
 80041b0:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <AUDIO_LOOPBACK+0xc4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d1e8      	bne.n	800418a <AUDIO_LOOPBACK+0x66>
				 CopyBuffer(&audio_out_buffer[0], &audio_in_buffer[0], RECORD_BUFFER_SIZE / 2);
 80041b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041bc:	4903      	ldr	r1, [pc, #12]	; (80041cc <AUDIO_LOOPBACK+0xa8>)
 80041be:	4807      	ldr	r0, [pc, #28]	; (80041dc <AUDIO_LOOPBACK+0xb8>)
 80041c0:	f000 fb0e 	bl	80047e0 <CopyBuffer>
 80041c4:	e7e7      	b.n	8004196 <AUDIO_LOOPBACK+0x72>
 80041c6:	bf00      	nop
 80041c8:	080058d8 	.word	0x080058d8
 80041cc:	20002790 	.word	0x20002790
 80041d0:	2000031c 	.word	0x2000031c
 80041d4:	0800591c 	.word	0x0800591c
 80041d8:	0800594c 	.word	0x0800594c
 80041dc:	20000790 	.word	0x20000790
 80041e0:	08005978 	.word	0x08005978
 80041e4:	08005918 	.word	0x08005918
 80041e8:	20004790 	.word	0x20004790
 80041ec:	080058f8 	.word	0x080058f8
 80041f0:	08005934 	.word	0x08005934
 80041f4:	0800598c 	.word	0x0800598c
 80041f8:	20003790 	.word	0x20003790
 80041fc:	20001790 	.word	0x20001790
 8004200:	20000254 	.word	0x20000254

08004204 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:



 void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
 {
	 audio_tx_buffer_state = 1;
 8004204:	4b01      	ldr	r3, [pc, #4]	; (800420c <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x8>)
 8004206:	2201      	movs	r2, #1
 8004208:	601a      	str	r2, [r3, #0]
 }
 800420a:	4770      	bx	lr
 800420c:	20000254 	.word	0x20000254

08004210 <BSP_AUDIO_IN_TransferComplete_CallBack>:
   * @param None
   * @retval None
   */
 void BSP_AUDIO_IN_TransferComplete_CallBack(void)
 {
	 audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8004210:	4b01      	ldr	r3, [pc, #4]	; (8004218 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8>)
 8004212:	2202      	movs	r2, #2
 8004214:	601a      	str	r2, [r3, #0]
 }
 8004216:	4770      	bx	lr
 8004218:	20004790 	.word	0x20004790

0800421c <BSP_AUDIO_IN_HalfTransfer_CallBack>:
   * @param  None
   * @retval None
   */
 void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
 {
	 audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 800421c:	4b01      	ldr	r3, [pc, #4]	; (8004224 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8>)
 800421e:	2201      	movs	r2, #1
 8004220:	601a      	str	r2, [r3, #0]
 }
 8004222:	4770      	bx	lr
 8004224:	20004790 	.word	0x20004790

08004228 <BSP_AUDIO_IN_Error_CallBack>:
	 }
	 */

	 /* could also generate a system reset to recover from the error */
	 /* .... */
 }
 8004228:	4770      	bx	lr
	...

0800422c <SAIx_In_DeInit>:
     /**
       * @brief  Deinitializes the output Audio Codec audio interface (SAI).
       * @retval None
       */
     static void SAIx_In_DeInit(void)
     {
 800422c:	b510      	push	{r4, lr}
         /* Initialize the haudio_in_sai Instance parameter */
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800422e:	4808      	ldr	r0, [pc, #32]	; (8004250 <SAIx_In_DeInit+0x24>)
 8004230:	4b08      	ldr	r3, [pc, #32]	; (8004254 <SAIx_In_DeInit+0x28>)
 8004232:	6003      	str	r3, [r0, #0]
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004234:	4c08      	ldr	r4, [pc, #32]	; (8004258 <SAIx_In_DeInit+0x2c>)
 8004236:	4a09      	ldr	r2, [pc, #36]	; (800425c <SAIx_In_DeInit+0x30>)
 8004238:	6022      	str	r2, [r4, #0]
         /* Disable SAI peripheral */
         __HAL_SAI_DISABLE(&haudio_in_sai);
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004240:	601a      	str	r2, [r3, #0]

         HAL_SAI_DeInit(&haudio_in_sai);
 8004242:	f7ff fa72 	bl	800372a <HAL_SAI_DeInit>
         HAL_SAI_DeInit(&haudio_out_sai);
 8004246:	4620      	mov	r0, r4
 8004248:	f7ff fa6f 	bl	800372a <HAL_SAI_DeInit>
     }
 800424c:	bd10      	pop	{r4, pc}
 800424e:	bf00      	nop
 8004250:	2000031c 	.word	0x2000031c
 8004254:	40015824 	.word	0x40015824
 8004258:	20000400 	.word	0x20000400
 800425c:	40015804 	.word	0x40015804

08004260 <SAI_AUDIO_IN_MspInit>:
       * @brief  Initializes SAI Audio IN MSP.
       * @param  hsai: SAI handle
       * @retval None
       */
     static void SAI_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
     {
 8004260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004262:	b08b      	sub	sp, #44	; 0x2c
 8004264:	4605      	mov	r5, r0
         static DMA_HandleTypeDef hdma_sai_rx;
         GPIO_InitTypeDef  gpio_init_structure;

         /* Enable SAI clock */
         AUDIO_IN_SAIx_CLK_ENABLE();
 8004266:	4c3b      	ldr	r4, [pc, #236]	; (8004354 <SAI_AUDIO_IN_MspInit+0xf4>)
 8004268:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800426a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800426e:	6463      	str	r3, [r4, #68]	; 0x44
 8004270:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004276:	9301      	str	r3, [sp, #4]
 8004278:	9b01      	ldr	r3, [sp, #4]

         /* Enable SD GPIO clock */
         AUDIO_IN_SAIx_SD_ENABLE();
 800427a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800427c:	f043 0310 	orr.w	r3, r3, #16
 8004280:	6323      	str	r3, [r4, #48]	; 0x30
 8004282:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	9302      	str	r3, [sp, #8]
 800428a:	9b02      	ldr	r3, [sp, #8]
         /* CODEC_SAI pin configuration: SD pin */
         gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800428c:	2308      	movs	r3, #8
 800428e:	9305      	str	r3, [sp, #20]
         gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004290:	2602      	movs	r6, #2
 8004292:	9606      	str	r6, [sp, #24]
         gpio_init_structure.Pull = GPIO_NOPULL;
 8004294:	2700      	movs	r7, #0
 8004296:	9707      	str	r7, [sp, #28]
         gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004298:	9608      	str	r6, [sp, #32]
         gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 800429a:	2306      	movs	r3, #6
 800429c:	9309      	str	r3, [sp, #36]	; 0x24
         HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800429e:	a905      	add	r1, sp, #20
 80042a0:	482d      	ldr	r0, [pc, #180]	; (8004358 <SAI_AUDIO_IN_MspInit+0xf8>)
 80042a2:	f7fd facd 	bl	8001840 <HAL_GPIO_Init>

         /* Enable Audio INT GPIO clock */
         AUDIO_IN_INT_GPIO_ENABLE();
 80042a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80042a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ac:	6323      	str	r3, [r4, #48]	; 0x30
 80042ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80042b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042b4:	9303      	str	r3, [sp, #12]
 80042b6:	9b03      	ldr	r3, [sp, #12]
         /* Audio INT pin configuration: input */
         gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80042b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042bc:	9305      	str	r3, [sp, #20]
         gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80042be:	9706      	str	r7, [sp, #24]
         gpio_init_structure.Pull = GPIO_NOPULL;
 80042c0:	9707      	str	r7, [sp, #28]
         gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80042c2:	9608      	str	r6, [sp, #32]
         HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80042c4:	a905      	add	r1, sp, #20
 80042c6:	4825      	ldr	r0, [pc, #148]	; (800435c <SAI_AUDIO_IN_MspInit+0xfc>)
 80042c8:	f7fd faba 	bl	8001840 <HAL_GPIO_Init>

         /* Enable the DMA clock */
         AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80042cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80042ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042d2:	6323      	str	r3, [r4, #48]	; 0x30
 80042d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80042d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042da:	9304      	str	r3, [sp, #16]
 80042dc:	9b04      	ldr	r3, [sp, #16]

         if (hsai->Instance == AUDIO_IN_SAIx)
 80042de:	682a      	ldr	r2, [r5, #0]
 80042e0:	4b1f      	ldr	r3, [pc, #124]	; (8004360 <SAI_AUDIO_IN_MspInit+0x100>)
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d011      	beq.n	800430a <SAI_AUDIO_IN_MspInit+0xaa>
             /* Configure the DMA Stream */
             HAL_DMA_Init(&hdma_sai_rx);
         }

         /* SAI DMA IRQ Channel configuration */
         HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80042e6:	2200      	movs	r2, #0
 80042e8:	210f      	movs	r1, #15
 80042ea:	203c      	movs	r0, #60	; 0x3c
 80042ec:	f7fd f818 	bl	8001320 <HAL_NVIC_SetPriority>
         HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 80042f0:	203c      	movs	r0, #60	; 0x3c
 80042f2:	f7fd f847 	bl	8001384 <HAL_NVIC_EnableIRQ>

         /* Audio INT IRQ Channel configuration */
         HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80042f6:	2200      	movs	r2, #0
 80042f8:	210f      	movs	r1, #15
 80042fa:	2028      	movs	r0, #40	; 0x28
 80042fc:	f7fd f810 	bl	8001320 <HAL_NVIC_SetPriority>
         HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8004300:	2028      	movs	r0, #40	; 0x28
 8004302:	f7fd f83f 	bl	8001384 <HAL_NVIC_EnableIRQ>
     }
 8004306:	b00b      	add	sp, #44	; 0x2c
 8004308:	bdf0      	pop	{r4, r5, r6, r7, pc}
             hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 800430a:	4c16      	ldr	r4, [pc, #88]	; (8004364 <SAI_AUDIO_IN_MspInit+0x104>)
 800430c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004310:	6063      	str	r3, [r4, #4]
             hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8004312:	60a7      	str	r7, [r4, #8]
             hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004314:	60e7      	str	r7, [r4, #12]
             hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8004316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800431a:	6122      	str	r2, [r4, #16]
             hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800431c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004320:	6162      	str	r2, [r4, #20]
             hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8004322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004326:	61a2      	str	r2, [r4, #24]
             hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8004328:	f44f 7280 	mov.w	r2, #256	; 0x100
 800432c:	61e2      	str	r2, [r4, #28]
             hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800432e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004332:	6222      	str	r2, [r4, #32]
             hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004334:	6267      	str	r7, [r4, #36]	; 0x24
             hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004336:	2203      	movs	r2, #3
 8004338:	62a2      	str	r2, [r4, #40]	; 0x28
             hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800433a:	62e7      	str	r7, [r4, #44]	; 0x2c
             hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800433c:	6327      	str	r7, [r4, #48]	; 0x30
             hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800433e:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <SAI_AUDIO_IN_MspInit+0x108>)
 8004340:	6023      	str	r3, [r4, #0]
             __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8004342:	672c      	str	r4, [r5, #112]	; 0x70
 8004344:	63a5      	str	r5, [r4, #56]	; 0x38
             HAL_DMA_DeInit(&hdma_sai_rx);
 8004346:	4620      	mov	r0, r4
 8004348:	f7fd f922 	bl	8001590 <HAL_DMA_DeInit>
             HAL_DMA_Init(&hdma_sai_rx);
 800434c:	4620      	mov	r0, r4
 800434e:	f7fd f8b9 	bl	80014c4 <HAL_DMA_Init>
 8004352:	e7c8      	b.n	80042e6 <SAI_AUDIO_IN_MspInit+0x86>
 8004354:	40023800 	.word	0x40023800
 8004358:	40021000 	.word	0x40021000
 800435c:	40022400 	.word	0x40022400
 8004360:	40015824 	.word	0x40015824
 8004364:	20000258 	.word	0x20000258
 8004368:	40026470 	.word	0x40026470

0800436c <SAIx_In_Init>:
     {
 800436c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004370:	b083      	sub	sp, #12
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004372:	4c38      	ldr	r4, [pc, #224]	; (8004454 <SAIx_In_Init+0xe8>)
 8004374:	4b38      	ldr	r3, [pc, #224]	; (8004458 <SAIx_In_Init+0xec>)
 8004376:	6023      	str	r3, [r4, #0]
         __HAL_SAI_DISABLE(&haudio_out_sai);
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800437e:	601a      	str	r2, [r3, #0]
         haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8004380:	2600      	movs	r6, #0
 8004382:	6266      	str	r6, [r4, #36]	; 0x24
         haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8004384:	9001      	str	r0, [sp, #4]
 8004386:	61e0      	str	r0, [r4, #28]
         haudio_out_sai.Init.AudioMode      = SAI_MODEMASTER_TX;
 8004388:	6066      	str	r6, [r4, #4]
         haudio_out_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 800438a:	6166      	str	r6, [r4, #20]
         haudio_out_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 800438c:	6326      	str	r6, [r4, #48]	; 0x30
         haudio_out_sai.Init.DataSize       = SAI_DATASIZE_16;
 800438e:	f04f 0b80 	mov.w	fp, #128	; 0x80
 8004392:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
         haudio_out_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8004396:	63a6      	str	r6, [r4, #56]	; 0x38
         haudio_out_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004398:	63e6      	str	r6, [r4, #60]	; 0x3c
         haudio_out_sai.Init.Synchro        = SAI_ASYNCHRONOUS;
 800439a:	60a6      	str	r6, [r4, #8]
         haudio_out_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 800439c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043a0:	6123      	str	r3, [r4, #16]
         haudio_out_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 80043a2:	2701      	movs	r7, #1
 80043a4:	61a7      	str	r7, [r4, #24]
         haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 80043a6:	60e6      	str	r6, [r4, #12]
         haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 80043a8:	62a6      	str	r6, [r4, #40]	; 0x28
         haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 80043aa:	62e6      	str	r6, [r4, #44]	; 0x2c
         haudio_out_sai.Init.Mckdiv         = 0;
 80043ac:	6226      	str	r6, [r4, #32]
         haudio_out_sai.FrameInit.FrameLength       = 64;
 80043ae:	f04f 0a40 	mov.w	sl, #64	; 0x40
 80043b2:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
         haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80043b6:	f04f 0920 	mov.w	r9, #32
 80043ba:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
         haudio_out_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80043be:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 80043c2:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
         haudio_out_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80043c6:	64e6      	str	r6, [r4, #76]	; 0x4c
         haudio_out_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80043c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80043cc:	6522      	str	r2, [r4, #80]	; 0x50
         haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80043ce:	6566      	str	r6, [r4, #84]	; 0x54
         haudio_out_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 80043d0:	65a6      	str	r6, [r4, #88]	; 0x58
         haudio_out_sai.SlotInit.SlotNumber     = 4;
 80043d2:	2204      	movs	r2, #4
 80043d4:	65e2      	str	r2, [r4, #92]	; 0x5c
         haudio_out_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 80043d6:	220f      	movs	r2, #15
 80043d8:	6622      	str	r2, [r4, #96]	; 0x60
         HAL_SAI_Init(&haudio_out_sai);
 80043da:	4620      	mov	r0, r4
 80043dc:	f7ff f8a0 	bl	8003520 <HAL_SAI_Init>
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80043e0:	4d1e      	ldr	r5, [pc, #120]	; (800445c <SAIx_In_Init+0xf0>)
 80043e2:	4b1f      	ldr	r3, [pc, #124]	; (8004460 <SAIx_In_Init+0xf4>)
 80043e4:	602b      	str	r3, [r5, #0]
         __HAL_SAI_DISABLE(&haudio_in_sai);
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80043ec:	601a      	str	r2, [r3, #0]
         haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 80043ee:	626e      	str	r6, [r5, #36]	; 0x24
         haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80043f0:	9b01      	ldr	r3, [sp, #4]
 80043f2:	61eb      	str	r3, [r5, #28]
         haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 80043f4:	2303      	movs	r3, #3
 80043f6:	606b      	str	r3, [r5, #4]
         haudio_in_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 80043f8:	616e      	str	r6, [r5, #20]
         haudio_in_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 80043fa:	632e      	str	r6, [r5, #48]	; 0x30
         haudio_in_sai.Init.DataSize       = SAI_DATASIZE_16;
 80043fc:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
         haudio_in_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8004400:	63ae      	str	r6, [r5, #56]	; 0x38
         haudio_in_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004402:	63ee      	str	r6, [r5, #60]	; 0x3c
         haudio_in_sai.Init.Synchro        = SAI_SYNCHRONOUS;
 8004404:	60af      	str	r7, [r5, #8]
         haudio_in_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_DISABLE;
 8004406:	612e      	str	r6, [r5, #16]
         haudio_in_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8004408:	61af      	str	r7, [r5, #24]
         haudio_in_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 800440a:	60ee      	str	r6, [r5, #12]
         haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 800440c:	62ae      	str	r6, [r5, #40]	; 0x28
         haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 800440e:	2310      	movs	r3, #16
 8004410:	62eb      	str	r3, [r5, #44]	; 0x2c
         haudio_in_sai.Init.Mckdiv         = 0;
 8004412:	622e      	str	r6, [r5, #32]
         haudio_in_sai.FrameInit.FrameLength       = 64;
 8004414:	f8c5 a040 	str.w	sl, [r5, #64]	; 0x40
         haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8004418:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
         haudio_in_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 800441c:	f8c5 8048 	str.w	r8, [r5, #72]	; 0x48
         haudio_in_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8004420:	64ee      	str	r6, [r5, #76]	; 0x4c
         haudio_in_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8004422:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004426:	652b      	str	r3, [r5, #80]	; 0x50
         haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8004428:	656e      	str	r6, [r5, #84]	; 0x54
         haudio_in_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 800442a:	65ae      	str	r6, [r5, #88]	; 0x58
         haudio_in_sai.SlotInit.SlotNumber     = 4;
 800442c:	2304      	movs	r3, #4
 800442e:	65eb      	str	r3, [r5, #92]	; 0x5c
         haudio_in_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 8004430:	230f      	movs	r3, #15
 8004432:	662b      	str	r3, [r5, #96]	; 0x60
         HAL_SAI_Init(&haudio_in_sai);
 8004434:	4628      	mov	r0, r5
 8004436:	f7ff f873 	bl	8003520 <HAL_SAI_Init>
         __HAL_SAI_ENABLE(&haudio_in_sai);
 800443a:	682a      	ldr	r2, [r5, #0]
 800443c:	6813      	ldr	r3, [r2, #0]
 800443e:	ea43 0308 	orr.w	r3, r3, r8
 8004442:	6013      	str	r3, [r2, #0]
         __HAL_SAI_ENABLE(&haudio_out_sai);
 8004444:	6822      	ldr	r2, [r4, #0]
 8004446:	6813      	ldr	r3, [r2, #0]
 8004448:	ea43 0308 	orr.w	r3, r3, r8
 800444c:	6013      	str	r3, [r2, #0]
     }
 800444e:	b003      	add	sp, #12
 8004450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004454:	20000400 	.word	0x20000400
 8004458:	40015804 	.word	0x40015804
 800445c:	2000031c 	.word	0x2000031c
 8004460:	40015824 	.word	0x40015824

08004464 <BSP_AUDIO_IN_OUT_Init>:



uint8_t BSP_AUDIO_IN_OUT_Init(uint32_t AudioFreq)
     {
 8004464:	b538      	push	{r3, r4, r5, lr}
 8004466:	4604      	mov	r4, r0
         uint8_t ret = AUDIO_ERROR;

         /* Disable SAI */
         SAIx_In_DeInit();
 8004468:	f7ff fee0 	bl	800422c <SAIx_In_DeInit>

         /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
         BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL);
 800446c:	4d19      	ldr	r5, [pc, #100]	; (80044d4 <BSP_AUDIO_IN_OUT_Init+0x70>)
 800446e:	2200      	movs	r2, #0
 8004470:	4621      	mov	r1, r4
 8004472:	4628      	mov	r0, r5
 8004474:	f7fc feb6 	bl	80011e4 <BSP_AUDIO_OUT_ClockConfig>
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004478:	4b17      	ldr	r3, [pc, #92]	; (80044d8 <BSP_AUDIO_IN_OUT_Init+0x74>)
 800447a:	4a18      	ldr	r2, [pc, #96]	; (80044dc <BSP_AUDIO_IN_OUT_Init+0x78>)
 800447c:	601a      	str	r2, [r3, #0]
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800447e:	4b18      	ldr	r3, [pc, #96]	; (80044e0 <BSP_AUDIO_IN_OUT_Init+0x7c>)
 8004480:	602b      	str	r3, [r5, #0]
         if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8004482:	4628      	mov	r0, r5
 8004484:	f7ff faa3 	bl	80039ce <HAL_SAI_GetState>
 8004488:	b160      	cbz	r0, 80044a4 <BSP_AUDIO_IN_OUT_Init+0x40>
             BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
             SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
         }


         SAIx_In_Init(AudioFreq); // inclu déja le code de SAIx_Out_Init()
 800448a:	4620      	mov	r0, r4
 800448c:	f7ff ff6e 	bl	800436c <SAIx_In_Init>


         if ((wm8994_drv.ReadID(AUDIO_I2C_ADDRESS)) == WM8994_ID)
 8004490:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <BSP_AUDIO_IN_OUT_Init+0x80>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2034      	movs	r0, #52	; 0x34
 8004496:	4798      	blx	r3
 8004498:	f648 1394 	movw	r3, #35220	; 0x8994
 800449c:	4298      	cmp	r0, r3
 800449e:	d00a      	beq.n	80044b6 <BSP_AUDIO_IN_OUT_Init+0x52>
             wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
             /* Initialize the audio driver structure */
             audio_drv = &wm8994_drv;
             ret = AUDIO_OK;
         } else {
             ret = AUDIO_ERROR;
 80044a0:	2001      	movs	r0, #1
             audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_ANALOG_MIC | OUTPUT_DEVICE_HEADPHONE , 100, AudioFreq);
         }

         /* Return AUDIO_OK when all operations are correctly done */
         return ret;
     }
 80044a2:	bd38      	pop	{r3, r4, r5, pc}
             BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 80044a4:	2100      	movs	r1, #0
 80044a6:	480c      	ldr	r0, [pc, #48]	; (80044d8 <BSP_AUDIO_IN_OUT_Init+0x74>)
 80044a8:	f7fc fe18 	bl	80010dc <BSP_AUDIO_OUT_MspInit>
             SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80044ac:	2100      	movs	r1, #0
 80044ae:	4628      	mov	r0, r5
 80044b0:	f7ff fed6 	bl	8004260 <SAI_AUDIO_IN_MspInit>
 80044b4:	e7e9      	b.n	800448a <BSP_AUDIO_IN_OUT_Init+0x26>
             wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 80044b6:	4d0b      	ldr	r5, [pc, #44]	; (80044e4 <BSP_AUDIO_IN_OUT_Init+0x80>)
 80044b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80044ba:	2034      	movs	r0, #52	; 0x34
 80044bc:	4798      	blx	r3
             audio_drv = &wm8994_drv;
 80044be:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <BSP_AUDIO_IN_OUT_Init+0x84>)
 80044c0:	661d      	str	r5, [r3, #96]	; 0x60
             audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_ANALOG_MIC | OUTPUT_DEVICE_HEADPHONE , 100, AudioFreq);
 80044c2:	682d      	ldr	r5, [r5, #0]
 80044c4:	4623      	mov	r3, r4
 80044c6:	2264      	movs	r2, #100	; 0x64
 80044c8:	f240 3102 	movw	r1, #770	; 0x302
 80044cc:	2034      	movs	r0, #52	; 0x34
 80044ce:	47a8      	blx	r5
             ret = AUDIO_OK;
 80044d0:	2000      	movs	r0, #0
 80044d2:	e7e6      	b.n	80044a2 <BSP_AUDIO_IN_OUT_Init+0x3e>
 80044d4:	2000031c 	.word	0x2000031c
 80044d8:	20000400 	.word	0x20000400
 80044dc:	40015804 	.word	0x40015804
 80044e0:	40015824 	.word	0x40015824
 80044e4:	20000000 	.word	0x20000000
 80044e8:	20000258 	.word	0x20000258

080044ec <_BSP_AUDIO_OUT_Play>:


     uint8_t _BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
     {
 80044ec:	b538      	push	{r3, r4, r5, lr}
 80044ee:	4604      	mov	r4, r0
         /* Call the audio Codec Play function */
         if (audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *)pBuffer, Size) != 0)
 80044f0:	4b09      	ldr	r3, [pc, #36]	; (8004518 <_BSP_AUDIO_OUT_Play+0x2c>)
 80044f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	b28d      	uxth	r5, r1
 80044f8:	462a      	mov	r2, r5
 80044fa:	4601      	mov	r1, r0
 80044fc:	2034      	movs	r0, #52	; 0x34
 80044fe:	4798      	blx	r3
 8004500:	b108      	cbz	r0, 8004506 <_BSP_AUDIO_OUT_Play+0x1a>
         {
             return AUDIO_ERROR;
 8004502:	2001      	movs	r0, #1
             //if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE)) !=  HAL_OK)
             if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, Size) !=  HAL_OK)
                 return AUDIO_ERROR;
             return AUDIO_OK;
         }
     }
 8004504:	bd38      	pop	{r3, r4, r5, pc}
             if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, Size) !=  HAL_OK)
 8004506:	462a      	mov	r2, r5
 8004508:	4621      	mov	r1, r4
 800450a:	4804      	ldr	r0, [pc, #16]	; (800451c <_BSP_AUDIO_OUT_Play+0x30>)
 800450c:	f7ff f92e 	bl	800376c <HAL_SAI_Transmit_DMA>
 8004510:	2800      	cmp	r0, #0
 8004512:	d0f7      	beq.n	8004504 <_BSP_AUDIO_OUT_Play+0x18>
                 return AUDIO_ERROR;
 8004514:	2001      	movs	r0, #1
 8004516:	e7f5      	b.n	8004504 <_BSP_AUDIO_OUT_Play+0x18>
 8004518:	20000258 	.word	0x20000258
 800451c:	20000400 	.word	0x20000400

08004520 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8004520:	b500      	push	{lr}
 8004522:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004524:	2301      	movs	r3, #1
 8004526:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004528:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800452c:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800452e:	2302      	movs	r3, #2
 8004530:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004532:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004536:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004538:	2219      	movs	r2, #25
 800453a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 800453c:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8004540:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004542:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004544:	2309      	movs	r3, #9
 8004546:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8004548:	2307      	movs	r3, #7
 800454a:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800454c:	4668      	mov	r0, sp
 800454e:	f7fd fe5f 	bl	8002210 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 8004552:	b100      	cbz	r0, 8004556 <SystemClock_Config+0x36>
    while(1) { ; }
 8004554:	e7fe      	b.n	8004554 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8004556:	f7fd fe1d 	bl	8002194 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800455a:	b100      	cbz	r0, 800455e <SystemClock_Config+0x3e>
    while(1) { ; }
 800455c:	e7fe      	b.n	800455c <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800455e:	230f      	movs	r3, #15
 8004560:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004562:	2302      	movs	r3, #2
 8004564:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004566:	2300      	movs	r3, #0
 8004568:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800456a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800456e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004574:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8004576:	2107      	movs	r1, #7
 8004578:	a80d      	add	r0, sp, #52	; 0x34
 800457a:	f7fe f8a1 	bl	80026c0 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 800457e:	b100      	cbz	r0, 8004582 <SystemClock_Config+0x62>
    while(1) { ; }
 8004580:	e7fe      	b.n	8004580 <SystemClock_Config+0x60>
  }
}
 8004582:	b013      	add	sp, #76	; 0x4c
 8004584:	f85d fb04 	ldr.w	pc, [sp], #4

08004588 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8004588:	b410      	push	{r4}
  __ASM volatile ("dsb 0xF":::"memory");
 800458a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800458e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004592:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <CPU_CACHE_Enable+0x74>)
 8004594:	2100      	movs	r1, #0
 8004596:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80045a0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80045a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80045a6:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 80045aa:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80045ae:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80045b2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80045b6:	f3c0 324e 	ubfx	r2, r0, #13, #15
 80045ba:	e000      	b.n	80045be <CPU_CACHE_Enable+0x36>
    } while(sets--);
 80045bc:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80045be:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80045c2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80045c6:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 80045ca:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 80045ce:	4c0b      	ldr	r4, [pc, #44]	; (80045fc <CPU_CACHE_Enable+0x74>)
 80045d0:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
 80045d4:	460b      	mov	r3, r1
 80045d6:	3901      	subs	r1, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1f2      	bne.n	80045c2 <CPU_CACHE_Enable+0x3a>
    } while(sets--);
 80045dc:	1e53      	subs	r3, r2, #1
 80045de:	2a00      	cmp	r2, #0
 80045e0:	d1ec      	bne.n	80045bc <CPU_CACHE_Enable+0x34>
 80045e2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80045e6:	6963      	ldr	r3, [r4, #20]
 80045e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ec:	6163      	str	r3, [r4, #20]
 80045ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80045f2:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80045f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	e000ed00 	.word	0xe000ed00

08004600 <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 8004600:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 8004602:	f7ff ffc1 	bl	8004588 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 8004606:	f7fc fe51 	bl	80012ac <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 800460a:	f7ff ff89 	bl	8004520 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 800460e:	4a03      	ldr	r2, [pc, #12]	; (800461c <Sys_Init+0x1c>)
 8004610:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8004614:	4802      	ldr	r0, [pc, #8]	; (8004620 <Sys_Init+0x20>)
 8004616:	f000 f8bb 	bl	8004790 <initUart>
}
 800461a:	bd08      	pop	{r3, pc}
 800461c:	40011000 	.word	0x40011000
 8004620:	20004794 	.word	0x20004794

08004624 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 8004624:	b508      	push	{r3, lr}
  HAL_IncTick();
 8004626:	f7fc fe4d 	bl	80012c4 <HAL_IncTick>
}
 800462a:	bd08      	pop	{r3, pc}

0800462c <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 800462c:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/
	Sys_Init();
 800462e:	f7ff ffe7 	bl	8004600 <Sys_Init>
  /* Initialize all configured peripherals */


  /* USER CODE BEGIN 2 */

  printf("Connected to STM32F769I-Discovery USART 1\r\n");
 8004632:	4804      	ldr	r0, [pc, #16]	; (8004644 <main+0x18>)
 8004634:	f000 f9c0 	bl	80049b8 <puts>
  printf("\r\n");
 8004638:	4803      	ldr	r0, [pc, #12]	; (8004648 <main+0x1c>)
 800463a:	f000 f9bd 	bl	80049b8 <puts>

  //BSP_AUDIO_IN_Init(BSP_AUDIO_FREQUENCY_44K, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
  //BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 50, BSP_AUDIO_FREQUENCY_44K);

  AUDIO_LOOPBACK();
 800463e:	f7ff fd71 	bl	8004124 <AUDIO_LOOPBACK>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004642:	e7fe      	b.n	8004642 <main+0x16>
 8004644:	080059a0 	.word	0x080059a0
 8004648:	08005918 	.word	0x08005918

0800464c <DMA2_Stream4_IRQHandler>:
/* please refer to the startup file (startup_stm32f7xx.s).                    */
/******************************************************************************/

/* ISR Handlers */
void DMA2_Stream4_IRQHandler(void)
{
 800464c:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800464e:	4b02      	ldr	r3, [pc, #8]	; (8004658 <DMA2_Stream4_IRQHandler+0xc>)
 8004650:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004652:	f7fd f803 	bl	800165c <HAL_DMA_IRQHandler>
}
 8004656:	bd08      	pop	{r3, pc}
 8004658:	2000031c 	.word	0x2000031c

0800465c <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800465c:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800465e:	4b02      	ldr	r3, [pc, #8]	; (8004668 <DMA2_Stream1_IRQHandler+0xc>)
 8004660:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004662:	f7fc fffb 	bl	800165c <HAL_DMA_IRQHandler>
}
 8004666:	bd08      	pop	{r3, pc}
 8004668:	20000400 	.word	0x20000400

0800466c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800466c:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800466e:	4a0f      	ldr	r2, [pc, #60]	; (80046ac <SystemInit+0x40>)
 8004670:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004678:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <SystemInit+0x44>)
 800467e:	6819      	ldr	r1, [r3, #0]
 8004680:	f041 0101 	orr.w	r1, r1, #1
 8004684:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004686:	2000      	movs	r0, #0
 8004688:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800468a:	681c      	ldr	r4, [r3, #0]
 800468c:	4909      	ldr	r1, [pc, #36]	; (80046b4 <SystemInit+0x48>)
 800468e:	4021      	ands	r1, r4
 8004690:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004692:	4909      	ldr	r1, [pc, #36]	; (80046b8 <SystemInit+0x4c>)
 8004694:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004696:	6819      	ldr	r1, [r3, #0]
 8004698:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800469c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800469e:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046a4:	6093      	str	r3, [r2, #8]
#endif
}
 80046a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	e000ed00 	.word	0xe000ed00
 80046b0:	40023800 	.word	0x40023800
 80046b4:	fef6ffff 	.word	0xfef6ffff
 80046b8:	24003010 	.word	0x24003010

080046bc <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 80046bc:	b530      	push	{r4, r5, lr}
 80046be:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 80046c0:	6803      	ldr	r3, [r0, #0]
 80046c2:	4a2e      	ldr	r2, [pc, #184]	; (800477c <HAL_UART_MspInit+0xc0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 80046c8:	4a2d      	ldr	r2, [pc, #180]	; (8004780 <HAL_UART_MspInit+0xc4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d02c      	beq.n	8004728 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 80046ce:	b00b      	add	sp, #44	; 0x2c
 80046d0:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 80046d2:	4c2c      	ldr	r4, [pc, #176]	; (8004784 <HAL_UART_MspInit+0xc8>)
 80046d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	6323      	str	r3, [r4, #48]	; 0x30
 80046dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	9301      	str	r3, [sp, #4]
 80046e4:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 80046e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046ea:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80046ec:	2302      	movs	r3, #2
 80046ee:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80046f0:	2301      	movs	r3, #1
 80046f2:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80046f4:	2303      	movs	r3, #3
 80046f6:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80046f8:	2307      	movs	r3, #7
 80046fa:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 80046fc:	4d22      	ldr	r5, [pc, #136]	; (8004788 <HAL_UART_MspInit+0xcc>)
 80046fe:	a905      	add	r1, sp, #20
 8004700:	4628      	mov	r0, r5
 8004702:	f7fd f89d 	bl	8001840 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800470a:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 800470c:	a905      	add	r1, sp, #20
 800470e:	4628      	mov	r0, r5
 8004710:	f7fd f896 	bl	8001840 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8004714:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004716:	f043 0310 	orr.w	r3, r3, #16
 800471a:	6463      	str	r3, [r4, #68]	; 0x44
 800471c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	9302      	str	r3, [sp, #8]
 8004724:	9b02      	ldr	r3, [sp, #8]
 8004726:	e7d2      	b.n	80046ce <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8004728:	4c16      	ldr	r4, [pc, #88]	; (8004784 <HAL_UART_MspInit+0xc8>)
 800472a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800472c:	f043 0304 	orr.w	r3, r3, #4
 8004730:	6323      	str	r3, [r4, #48]	; 0x30
 8004732:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	9303      	str	r3, [sp, #12]
 800473a:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 800473c:	2340      	movs	r3, #64	; 0x40
 800473e:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004740:	2302      	movs	r3, #2
 8004742:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8004744:	2301      	movs	r3, #1
 8004746:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8004748:	2303      	movs	r3, #3
 800474a:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800474c:	2308      	movs	r3, #8
 800474e:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8004750:	4d0e      	ldr	r5, [pc, #56]	; (800478c <HAL_UART_MspInit+0xd0>)
 8004752:	a905      	add	r1, sp, #20
 8004754:	4628      	mov	r0, r5
 8004756:	f7fd f873 	bl	8001840 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 800475a:	2380      	movs	r3, #128	; 0x80
 800475c:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 800475e:	a905      	add	r1, sp, #20
 8004760:	4628      	mov	r0, r5
 8004762:	f7fd f86d 	bl	8001840 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8004766:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004768:	f043 0320 	orr.w	r3, r3, #32
 800476c:	6463      	str	r3, [r4, #68]	; 0x44
 800476e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	9304      	str	r3, [sp, #16]
 8004776:	9b04      	ldr	r3, [sp, #16]
}
 8004778:	e7a9      	b.n	80046ce <HAL_UART_MspInit+0x12>
 800477a:	bf00      	nop
 800477c:	40011000 	.word	0x40011000
 8004780:	40011400 	.word	0x40011400
 8004784:	40023800 	.word	0x40023800
 8004788:	40020000 	.word	0x40020000
 800478c:	40020800 	.word	0x40020800

08004790 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8004790:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8004792:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8004794:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8004796:	2200      	movs	r2, #0
 8004798:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 800479a:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 800479c:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 800479e:	210c      	movs	r1, #12
 80047a0:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80047a2:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 80047a4:	f7ff fc8b 	bl	80040be <HAL_UART_Init>
}
 80047a8:	bd08      	pop	{r3, pc}
	...

080047ac <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 80047ac:	b510      	push	{r4, lr}
 80047ae:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 80047b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047b4:	b292      	uxth	r2, r2
 80047b6:	4802      	ldr	r0, [pc, #8]	; (80047c0 <_write+0x14>)
 80047b8:	f7ff f940 	bl	8003a3c <HAL_UART_Transmit>
	return len;
}
 80047bc:	4620      	mov	r0, r4
 80047be:	bd10      	pop	{r4, pc}
 80047c0:	20004794 	.word	0x20004794

080047c4 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 80047c4:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 80047c6:	2200      	movs	r2, #0
 80047c8:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80047ca:	f04f 33ff 	mov.w	r3, #4294967295
 80047ce:	2201      	movs	r2, #1
 80047d0:	4802      	ldr	r0, [pc, #8]	; (80047dc <_read+0x18>)
 80047d2:	f7ff f99b 	bl	8003b0c <HAL_UART_Receive>
	return len;
}
 80047d6:	2001      	movs	r0, #1
 80047d8:	bd08      	pop	{r3, pc}
 80047da:	bf00      	nop
 80047dc:	20004794 	.word	0x20004794

080047e0 <CopyBuffer>:

#include "util.h"

void CopyBuffer(int16_t *pbuffer1, int16_t *pbuffer2, uint16_t BufferSize){
	 uint32_t i = 0;
	 for (i = 0; i < BufferSize; i++) {
 80047e0:	2300      	movs	r3, #0
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d90a      	bls.n	80047fc <CopyBuffer+0x1c>
void CopyBuffer(int16_t *pbuffer1, int16_t *pbuffer2, uint16_t BufferSize){
 80047e6:	b410      	push	{r4}
		 pbuffer1[i] = pbuffer2[i];
 80047e8:	f931 4013 	ldrsh.w	r4, [r1, r3, lsl #1]
 80047ec:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
	 for (i = 0; i < BufferSize; i++) {
 80047f0:	3301      	adds	r3, #1
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d8f8      	bhi.n	80047e8 <CopyBuffer+0x8>
	 }
}
 80047f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	4770      	bx	lr
	...

08004800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004838 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004804:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004806:	e003      	b.n	8004810 <LoopCopyDataInit>

08004808 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004808:	4b0c      	ldr	r3, [pc, #48]	; (800483c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800480a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800480c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800480e:	3104      	adds	r1, #4

08004810 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004810:	480b      	ldr	r0, [pc, #44]	; (8004840 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004812:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004814:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004816:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004818:	d3f6      	bcc.n	8004808 <CopyDataInit>
  ldr  r2, =_sbss
 800481a:	4a0b      	ldr	r2, [pc, #44]	; (8004848 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800481c:	e002      	b.n	8004824 <LoopFillZerobss>

0800481e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800481e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004820:	f842 3b04 	str.w	r3, [r2], #4

08004824 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004824:	4b09      	ldr	r3, [pc, #36]	; (800484c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004826:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004828:	d3f9      	bcc.n	800481e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800482a:	f7ff ff1f 	bl	800466c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800482e:	f000 f811 	bl	8004854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004832:	f7ff fefb 	bl	800462c <main>
  bx  lr    
 8004836:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004838:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800483c:	08005a6c 	.word	0x08005a6c
  ldr  r0, =_sdata
 8004840:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004844:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8004848:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 800484c:	20004814 	.word	0x20004814

08004850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004850:	e7fe      	b.n	8004850 <ADC_IRQHandler>
	...

08004854 <__libc_init_array>:
 8004854:	b570      	push	{r4, r5, r6, lr}
 8004856:	4d0d      	ldr	r5, [pc, #52]	; (800488c <__libc_init_array+0x38>)
 8004858:	4c0d      	ldr	r4, [pc, #52]	; (8004890 <__libc_init_array+0x3c>)
 800485a:	1b64      	subs	r4, r4, r5
 800485c:	10a4      	asrs	r4, r4, #2
 800485e:	2600      	movs	r6, #0
 8004860:	42a6      	cmp	r6, r4
 8004862:	d109      	bne.n	8004878 <__libc_init_array+0x24>
 8004864:	4d0b      	ldr	r5, [pc, #44]	; (8004894 <__libc_init_array+0x40>)
 8004866:	4c0c      	ldr	r4, [pc, #48]	; (8004898 <__libc_init_array+0x44>)
 8004868:	f001 f81a 	bl	80058a0 <_init>
 800486c:	1b64      	subs	r4, r4, r5
 800486e:	10a4      	asrs	r4, r4, #2
 8004870:	2600      	movs	r6, #0
 8004872:	42a6      	cmp	r6, r4
 8004874:	d105      	bne.n	8004882 <__libc_init_array+0x2e>
 8004876:	bd70      	pop	{r4, r5, r6, pc}
 8004878:	f855 3b04 	ldr.w	r3, [r5], #4
 800487c:	4798      	blx	r3
 800487e:	3601      	adds	r6, #1
 8004880:	e7ee      	b.n	8004860 <__libc_init_array+0xc>
 8004882:	f855 3b04 	ldr.w	r3, [r5], #4
 8004886:	4798      	blx	r3
 8004888:	3601      	adds	r6, #1
 800488a:	e7f2      	b.n	8004872 <__libc_init_array+0x1e>
 800488c:	08005a64 	.word	0x08005a64
 8004890:	08005a64 	.word	0x08005a64
 8004894:	08005a64 	.word	0x08005a64
 8004898:	08005a68 	.word	0x08005a68

0800489c <memset>:
 800489c:	4402      	add	r2, r0
 800489e:	4603      	mov	r3, r0
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d100      	bne.n	80048a6 <memset+0xa>
 80048a4:	4770      	bx	lr
 80048a6:	f803 1b01 	strb.w	r1, [r3], #1
 80048aa:	e7f9      	b.n	80048a0 <memset+0x4>

080048ac <iprintf>:
 80048ac:	b40f      	push	{r0, r1, r2, r3}
 80048ae:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <iprintf+0x2c>)
 80048b0:	b513      	push	{r0, r1, r4, lr}
 80048b2:	681c      	ldr	r4, [r3, #0]
 80048b4:	b124      	cbz	r4, 80048c0 <iprintf+0x14>
 80048b6:	69a3      	ldr	r3, [r4, #24]
 80048b8:	b913      	cbnz	r3, 80048c0 <iprintf+0x14>
 80048ba:	4620      	mov	r0, r4
 80048bc:	f000 fa5e 	bl	8004d7c <__sinit>
 80048c0:	ab05      	add	r3, sp, #20
 80048c2:	9a04      	ldr	r2, [sp, #16]
 80048c4:	68a1      	ldr	r1, [r4, #8]
 80048c6:	9301      	str	r3, [sp, #4]
 80048c8:	4620      	mov	r0, r4
 80048ca:	f000 fc2f 	bl	800512c <_vfiprintf_r>
 80048ce:	b002      	add	sp, #8
 80048d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048d4:	b004      	add	sp, #16
 80048d6:	4770      	bx	lr
 80048d8:	20000034 	.word	0x20000034

080048dc <_puts_r>:
 80048dc:	b570      	push	{r4, r5, r6, lr}
 80048de:	460e      	mov	r6, r1
 80048e0:	4605      	mov	r5, r0
 80048e2:	b118      	cbz	r0, 80048ec <_puts_r+0x10>
 80048e4:	6983      	ldr	r3, [r0, #24]
 80048e6:	b90b      	cbnz	r3, 80048ec <_puts_r+0x10>
 80048e8:	f000 fa48 	bl	8004d7c <__sinit>
 80048ec:	69ab      	ldr	r3, [r5, #24]
 80048ee:	68ac      	ldr	r4, [r5, #8]
 80048f0:	b913      	cbnz	r3, 80048f8 <_puts_r+0x1c>
 80048f2:	4628      	mov	r0, r5
 80048f4:	f000 fa42 	bl	8004d7c <__sinit>
 80048f8:	4b2c      	ldr	r3, [pc, #176]	; (80049ac <_puts_r+0xd0>)
 80048fa:	429c      	cmp	r4, r3
 80048fc:	d120      	bne.n	8004940 <_puts_r+0x64>
 80048fe:	686c      	ldr	r4, [r5, #4]
 8004900:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004902:	07db      	lsls	r3, r3, #31
 8004904:	d405      	bmi.n	8004912 <_puts_r+0x36>
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	0598      	lsls	r0, r3, #22
 800490a:	d402      	bmi.n	8004912 <_puts_r+0x36>
 800490c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800490e:	f000 fad3 	bl	8004eb8 <__retarget_lock_acquire_recursive>
 8004912:	89a3      	ldrh	r3, [r4, #12]
 8004914:	0719      	lsls	r1, r3, #28
 8004916:	d51d      	bpl.n	8004954 <_puts_r+0x78>
 8004918:	6923      	ldr	r3, [r4, #16]
 800491a:	b1db      	cbz	r3, 8004954 <_puts_r+0x78>
 800491c:	3e01      	subs	r6, #1
 800491e:	68a3      	ldr	r3, [r4, #8]
 8004920:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004924:	3b01      	subs	r3, #1
 8004926:	60a3      	str	r3, [r4, #8]
 8004928:	bb39      	cbnz	r1, 800497a <_puts_r+0x9e>
 800492a:	2b00      	cmp	r3, #0
 800492c:	da38      	bge.n	80049a0 <_puts_r+0xc4>
 800492e:	4622      	mov	r2, r4
 8004930:	210a      	movs	r1, #10
 8004932:	4628      	mov	r0, r5
 8004934:	f000 f848 	bl	80049c8 <__swbuf_r>
 8004938:	3001      	adds	r0, #1
 800493a:	d011      	beq.n	8004960 <_puts_r+0x84>
 800493c:	250a      	movs	r5, #10
 800493e:	e011      	b.n	8004964 <_puts_r+0x88>
 8004940:	4b1b      	ldr	r3, [pc, #108]	; (80049b0 <_puts_r+0xd4>)
 8004942:	429c      	cmp	r4, r3
 8004944:	d101      	bne.n	800494a <_puts_r+0x6e>
 8004946:	68ac      	ldr	r4, [r5, #8]
 8004948:	e7da      	b.n	8004900 <_puts_r+0x24>
 800494a:	4b1a      	ldr	r3, [pc, #104]	; (80049b4 <_puts_r+0xd8>)
 800494c:	429c      	cmp	r4, r3
 800494e:	bf08      	it	eq
 8004950:	68ec      	ldreq	r4, [r5, #12]
 8004952:	e7d5      	b.n	8004900 <_puts_r+0x24>
 8004954:	4621      	mov	r1, r4
 8004956:	4628      	mov	r0, r5
 8004958:	f000 f888 	bl	8004a6c <__swsetup_r>
 800495c:	2800      	cmp	r0, #0
 800495e:	d0dd      	beq.n	800491c <_puts_r+0x40>
 8004960:	f04f 35ff 	mov.w	r5, #4294967295
 8004964:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004966:	07da      	lsls	r2, r3, #31
 8004968:	d405      	bmi.n	8004976 <_puts_r+0x9a>
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	059b      	lsls	r3, r3, #22
 800496e:	d402      	bmi.n	8004976 <_puts_r+0x9a>
 8004970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004972:	f000 faa2 	bl	8004eba <__retarget_lock_release_recursive>
 8004976:	4628      	mov	r0, r5
 8004978:	bd70      	pop	{r4, r5, r6, pc}
 800497a:	2b00      	cmp	r3, #0
 800497c:	da04      	bge.n	8004988 <_puts_r+0xac>
 800497e:	69a2      	ldr	r2, [r4, #24]
 8004980:	429a      	cmp	r2, r3
 8004982:	dc06      	bgt.n	8004992 <_puts_r+0xb6>
 8004984:	290a      	cmp	r1, #10
 8004986:	d004      	beq.n	8004992 <_puts_r+0xb6>
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	6022      	str	r2, [r4, #0]
 800498e:	7019      	strb	r1, [r3, #0]
 8004990:	e7c5      	b.n	800491e <_puts_r+0x42>
 8004992:	4622      	mov	r2, r4
 8004994:	4628      	mov	r0, r5
 8004996:	f000 f817 	bl	80049c8 <__swbuf_r>
 800499a:	3001      	adds	r0, #1
 800499c:	d1bf      	bne.n	800491e <_puts_r+0x42>
 800499e:	e7df      	b.n	8004960 <_puts_r+0x84>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	250a      	movs	r5, #10
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	6022      	str	r2, [r4, #0]
 80049a8:	701d      	strb	r5, [r3, #0]
 80049aa:	e7db      	b.n	8004964 <_puts_r+0x88>
 80049ac:	080059f0 	.word	0x080059f0
 80049b0:	08005a10 	.word	0x08005a10
 80049b4:	080059d0 	.word	0x080059d0

080049b8 <puts>:
 80049b8:	4b02      	ldr	r3, [pc, #8]	; (80049c4 <puts+0xc>)
 80049ba:	4601      	mov	r1, r0
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	f7ff bf8d 	b.w	80048dc <_puts_r>
 80049c2:	bf00      	nop
 80049c4:	20000034 	.word	0x20000034

080049c8 <__swbuf_r>:
 80049c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ca:	460e      	mov	r6, r1
 80049cc:	4614      	mov	r4, r2
 80049ce:	4605      	mov	r5, r0
 80049d0:	b118      	cbz	r0, 80049da <__swbuf_r+0x12>
 80049d2:	6983      	ldr	r3, [r0, #24]
 80049d4:	b90b      	cbnz	r3, 80049da <__swbuf_r+0x12>
 80049d6:	f000 f9d1 	bl	8004d7c <__sinit>
 80049da:	4b21      	ldr	r3, [pc, #132]	; (8004a60 <__swbuf_r+0x98>)
 80049dc:	429c      	cmp	r4, r3
 80049de:	d12b      	bne.n	8004a38 <__swbuf_r+0x70>
 80049e0:	686c      	ldr	r4, [r5, #4]
 80049e2:	69a3      	ldr	r3, [r4, #24]
 80049e4:	60a3      	str	r3, [r4, #8]
 80049e6:	89a3      	ldrh	r3, [r4, #12]
 80049e8:	071a      	lsls	r2, r3, #28
 80049ea:	d52f      	bpl.n	8004a4c <__swbuf_r+0x84>
 80049ec:	6923      	ldr	r3, [r4, #16]
 80049ee:	b36b      	cbz	r3, 8004a4c <__swbuf_r+0x84>
 80049f0:	6923      	ldr	r3, [r4, #16]
 80049f2:	6820      	ldr	r0, [r4, #0]
 80049f4:	1ac0      	subs	r0, r0, r3
 80049f6:	6963      	ldr	r3, [r4, #20]
 80049f8:	b2f6      	uxtb	r6, r6
 80049fa:	4283      	cmp	r3, r0
 80049fc:	4637      	mov	r7, r6
 80049fe:	dc04      	bgt.n	8004a0a <__swbuf_r+0x42>
 8004a00:	4621      	mov	r1, r4
 8004a02:	4628      	mov	r0, r5
 8004a04:	f000 f926 	bl	8004c54 <_fflush_r>
 8004a08:	bb30      	cbnz	r0, 8004a58 <__swbuf_r+0x90>
 8004a0a:	68a3      	ldr	r3, [r4, #8]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	60a3      	str	r3, [r4, #8]
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	6022      	str	r2, [r4, #0]
 8004a16:	701e      	strb	r6, [r3, #0]
 8004a18:	6963      	ldr	r3, [r4, #20]
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	4283      	cmp	r3, r0
 8004a1e:	d004      	beq.n	8004a2a <__swbuf_r+0x62>
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	07db      	lsls	r3, r3, #31
 8004a24:	d506      	bpl.n	8004a34 <__swbuf_r+0x6c>
 8004a26:	2e0a      	cmp	r6, #10
 8004a28:	d104      	bne.n	8004a34 <__swbuf_r+0x6c>
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f000 f911 	bl	8004c54 <_fflush_r>
 8004a32:	b988      	cbnz	r0, 8004a58 <__swbuf_r+0x90>
 8004a34:	4638      	mov	r0, r7
 8004a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a38:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <__swbuf_r+0x9c>)
 8004a3a:	429c      	cmp	r4, r3
 8004a3c:	d101      	bne.n	8004a42 <__swbuf_r+0x7a>
 8004a3e:	68ac      	ldr	r4, [r5, #8]
 8004a40:	e7cf      	b.n	80049e2 <__swbuf_r+0x1a>
 8004a42:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <__swbuf_r+0xa0>)
 8004a44:	429c      	cmp	r4, r3
 8004a46:	bf08      	it	eq
 8004a48:	68ec      	ldreq	r4, [r5, #12]
 8004a4a:	e7ca      	b.n	80049e2 <__swbuf_r+0x1a>
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f000 f80c 	bl	8004a6c <__swsetup_r>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d0cb      	beq.n	80049f0 <__swbuf_r+0x28>
 8004a58:	f04f 37ff 	mov.w	r7, #4294967295
 8004a5c:	e7ea      	b.n	8004a34 <__swbuf_r+0x6c>
 8004a5e:	bf00      	nop
 8004a60:	080059f0 	.word	0x080059f0
 8004a64:	08005a10 	.word	0x08005a10
 8004a68:	080059d0 	.word	0x080059d0

08004a6c <__swsetup_r>:
 8004a6c:	4b32      	ldr	r3, [pc, #200]	; (8004b38 <__swsetup_r+0xcc>)
 8004a6e:	b570      	push	{r4, r5, r6, lr}
 8004a70:	681d      	ldr	r5, [r3, #0]
 8004a72:	4606      	mov	r6, r0
 8004a74:	460c      	mov	r4, r1
 8004a76:	b125      	cbz	r5, 8004a82 <__swsetup_r+0x16>
 8004a78:	69ab      	ldr	r3, [r5, #24]
 8004a7a:	b913      	cbnz	r3, 8004a82 <__swsetup_r+0x16>
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	f000 f97d 	bl	8004d7c <__sinit>
 8004a82:	4b2e      	ldr	r3, [pc, #184]	; (8004b3c <__swsetup_r+0xd0>)
 8004a84:	429c      	cmp	r4, r3
 8004a86:	d10f      	bne.n	8004aa8 <__swsetup_r+0x3c>
 8004a88:	686c      	ldr	r4, [r5, #4]
 8004a8a:	89a3      	ldrh	r3, [r4, #12]
 8004a8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a90:	0719      	lsls	r1, r3, #28
 8004a92:	d42c      	bmi.n	8004aee <__swsetup_r+0x82>
 8004a94:	06dd      	lsls	r5, r3, #27
 8004a96:	d411      	bmi.n	8004abc <__swsetup_r+0x50>
 8004a98:	2309      	movs	r3, #9
 8004a9a:	6033      	str	r3, [r6, #0]
 8004a9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004aa0:	81a3      	strh	r3, [r4, #12]
 8004aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa6:	e03e      	b.n	8004b26 <__swsetup_r+0xba>
 8004aa8:	4b25      	ldr	r3, [pc, #148]	; (8004b40 <__swsetup_r+0xd4>)
 8004aaa:	429c      	cmp	r4, r3
 8004aac:	d101      	bne.n	8004ab2 <__swsetup_r+0x46>
 8004aae:	68ac      	ldr	r4, [r5, #8]
 8004ab0:	e7eb      	b.n	8004a8a <__swsetup_r+0x1e>
 8004ab2:	4b24      	ldr	r3, [pc, #144]	; (8004b44 <__swsetup_r+0xd8>)
 8004ab4:	429c      	cmp	r4, r3
 8004ab6:	bf08      	it	eq
 8004ab8:	68ec      	ldreq	r4, [r5, #12]
 8004aba:	e7e6      	b.n	8004a8a <__swsetup_r+0x1e>
 8004abc:	0758      	lsls	r0, r3, #29
 8004abe:	d512      	bpl.n	8004ae6 <__swsetup_r+0x7a>
 8004ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ac2:	b141      	cbz	r1, 8004ad6 <__swsetup_r+0x6a>
 8004ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ac8:	4299      	cmp	r1, r3
 8004aca:	d002      	beq.n	8004ad2 <__swsetup_r+0x66>
 8004acc:	4630      	mov	r0, r6
 8004ace:	f000 fa59 	bl	8004f84 <_free_r>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	6363      	str	r3, [r4, #52]	; 0x34
 8004ad6:	89a3      	ldrh	r3, [r4, #12]
 8004ad8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004adc:	81a3      	strh	r3, [r4, #12]
 8004ade:	2300      	movs	r3, #0
 8004ae0:	6063      	str	r3, [r4, #4]
 8004ae2:	6923      	ldr	r3, [r4, #16]
 8004ae4:	6023      	str	r3, [r4, #0]
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	f043 0308 	orr.w	r3, r3, #8
 8004aec:	81a3      	strh	r3, [r4, #12]
 8004aee:	6923      	ldr	r3, [r4, #16]
 8004af0:	b94b      	cbnz	r3, 8004b06 <__swsetup_r+0x9a>
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004afc:	d003      	beq.n	8004b06 <__swsetup_r+0x9a>
 8004afe:	4621      	mov	r1, r4
 8004b00:	4630      	mov	r0, r6
 8004b02:	f000 f9ff 	bl	8004f04 <__smakebuf_r>
 8004b06:	89a0      	ldrh	r0, [r4, #12]
 8004b08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b0c:	f010 0301 	ands.w	r3, r0, #1
 8004b10:	d00a      	beq.n	8004b28 <__swsetup_r+0xbc>
 8004b12:	2300      	movs	r3, #0
 8004b14:	60a3      	str	r3, [r4, #8]
 8004b16:	6963      	ldr	r3, [r4, #20]
 8004b18:	425b      	negs	r3, r3
 8004b1a:	61a3      	str	r3, [r4, #24]
 8004b1c:	6923      	ldr	r3, [r4, #16]
 8004b1e:	b943      	cbnz	r3, 8004b32 <__swsetup_r+0xc6>
 8004b20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b24:	d1ba      	bne.n	8004a9c <__swsetup_r+0x30>
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
 8004b28:	0781      	lsls	r1, r0, #30
 8004b2a:	bf58      	it	pl
 8004b2c:	6963      	ldrpl	r3, [r4, #20]
 8004b2e:	60a3      	str	r3, [r4, #8]
 8004b30:	e7f4      	b.n	8004b1c <__swsetup_r+0xb0>
 8004b32:	2000      	movs	r0, #0
 8004b34:	e7f7      	b.n	8004b26 <__swsetup_r+0xba>
 8004b36:	bf00      	nop
 8004b38:	20000034 	.word	0x20000034
 8004b3c:	080059f0 	.word	0x080059f0
 8004b40:	08005a10 	.word	0x08005a10
 8004b44:	080059d0 	.word	0x080059d0

08004b48 <__sflush_r>:
 8004b48:	898a      	ldrh	r2, [r1, #12]
 8004b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b4e:	4605      	mov	r5, r0
 8004b50:	0710      	lsls	r0, r2, #28
 8004b52:	460c      	mov	r4, r1
 8004b54:	d458      	bmi.n	8004c08 <__sflush_r+0xc0>
 8004b56:	684b      	ldr	r3, [r1, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	dc05      	bgt.n	8004b68 <__sflush_r+0x20>
 8004b5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	dc02      	bgt.n	8004b68 <__sflush_r+0x20>
 8004b62:	2000      	movs	r0, #0
 8004b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b6a:	2e00      	cmp	r6, #0
 8004b6c:	d0f9      	beq.n	8004b62 <__sflush_r+0x1a>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b74:	682f      	ldr	r7, [r5, #0]
 8004b76:	602b      	str	r3, [r5, #0]
 8004b78:	d032      	beq.n	8004be0 <__sflush_r+0x98>
 8004b7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b7c:	89a3      	ldrh	r3, [r4, #12]
 8004b7e:	075a      	lsls	r2, r3, #29
 8004b80:	d505      	bpl.n	8004b8e <__sflush_r+0x46>
 8004b82:	6863      	ldr	r3, [r4, #4]
 8004b84:	1ac0      	subs	r0, r0, r3
 8004b86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b88:	b10b      	cbz	r3, 8004b8e <__sflush_r+0x46>
 8004b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b8c:	1ac0      	subs	r0, r0, r3
 8004b8e:	2300      	movs	r3, #0
 8004b90:	4602      	mov	r2, r0
 8004b92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b94:	6a21      	ldr	r1, [r4, #32]
 8004b96:	4628      	mov	r0, r5
 8004b98:	47b0      	blx	r6
 8004b9a:	1c43      	adds	r3, r0, #1
 8004b9c:	89a3      	ldrh	r3, [r4, #12]
 8004b9e:	d106      	bne.n	8004bae <__sflush_r+0x66>
 8004ba0:	6829      	ldr	r1, [r5, #0]
 8004ba2:	291d      	cmp	r1, #29
 8004ba4:	d82c      	bhi.n	8004c00 <__sflush_r+0xb8>
 8004ba6:	4a2a      	ldr	r2, [pc, #168]	; (8004c50 <__sflush_r+0x108>)
 8004ba8:	40ca      	lsrs	r2, r1
 8004baa:	07d6      	lsls	r6, r2, #31
 8004bac:	d528      	bpl.n	8004c00 <__sflush_r+0xb8>
 8004bae:	2200      	movs	r2, #0
 8004bb0:	6062      	str	r2, [r4, #4]
 8004bb2:	04d9      	lsls	r1, r3, #19
 8004bb4:	6922      	ldr	r2, [r4, #16]
 8004bb6:	6022      	str	r2, [r4, #0]
 8004bb8:	d504      	bpl.n	8004bc4 <__sflush_r+0x7c>
 8004bba:	1c42      	adds	r2, r0, #1
 8004bbc:	d101      	bne.n	8004bc2 <__sflush_r+0x7a>
 8004bbe:	682b      	ldr	r3, [r5, #0]
 8004bc0:	b903      	cbnz	r3, 8004bc4 <__sflush_r+0x7c>
 8004bc2:	6560      	str	r0, [r4, #84]	; 0x54
 8004bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bc6:	602f      	str	r7, [r5, #0]
 8004bc8:	2900      	cmp	r1, #0
 8004bca:	d0ca      	beq.n	8004b62 <__sflush_r+0x1a>
 8004bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bd0:	4299      	cmp	r1, r3
 8004bd2:	d002      	beq.n	8004bda <__sflush_r+0x92>
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	f000 f9d5 	bl	8004f84 <_free_r>
 8004bda:	2000      	movs	r0, #0
 8004bdc:	6360      	str	r0, [r4, #52]	; 0x34
 8004bde:	e7c1      	b.n	8004b64 <__sflush_r+0x1c>
 8004be0:	6a21      	ldr	r1, [r4, #32]
 8004be2:	2301      	movs	r3, #1
 8004be4:	4628      	mov	r0, r5
 8004be6:	47b0      	blx	r6
 8004be8:	1c41      	adds	r1, r0, #1
 8004bea:	d1c7      	bne.n	8004b7c <__sflush_r+0x34>
 8004bec:	682b      	ldr	r3, [r5, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0c4      	beq.n	8004b7c <__sflush_r+0x34>
 8004bf2:	2b1d      	cmp	r3, #29
 8004bf4:	d001      	beq.n	8004bfa <__sflush_r+0xb2>
 8004bf6:	2b16      	cmp	r3, #22
 8004bf8:	d101      	bne.n	8004bfe <__sflush_r+0xb6>
 8004bfa:	602f      	str	r7, [r5, #0]
 8004bfc:	e7b1      	b.n	8004b62 <__sflush_r+0x1a>
 8004bfe:	89a3      	ldrh	r3, [r4, #12]
 8004c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c04:	81a3      	strh	r3, [r4, #12]
 8004c06:	e7ad      	b.n	8004b64 <__sflush_r+0x1c>
 8004c08:	690f      	ldr	r7, [r1, #16]
 8004c0a:	2f00      	cmp	r7, #0
 8004c0c:	d0a9      	beq.n	8004b62 <__sflush_r+0x1a>
 8004c0e:	0793      	lsls	r3, r2, #30
 8004c10:	680e      	ldr	r6, [r1, #0]
 8004c12:	bf08      	it	eq
 8004c14:	694b      	ldreq	r3, [r1, #20]
 8004c16:	600f      	str	r7, [r1, #0]
 8004c18:	bf18      	it	ne
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	eba6 0807 	sub.w	r8, r6, r7
 8004c20:	608b      	str	r3, [r1, #8]
 8004c22:	f1b8 0f00 	cmp.w	r8, #0
 8004c26:	dd9c      	ble.n	8004b62 <__sflush_r+0x1a>
 8004c28:	6a21      	ldr	r1, [r4, #32]
 8004c2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c2c:	4643      	mov	r3, r8
 8004c2e:	463a      	mov	r2, r7
 8004c30:	4628      	mov	r0, r5
 8004c32:	47b0      	blx	r6
 8004c34:	2800      	cmp	r0, #0
 8004c36:	dc06      	bgt.n	8004c46 <__sflush_r+0xfe>
 8004c38:	89a3      	ldrh	r3, [r4, #12]
 8004c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c3e:	81a3      	strh	r3, [r4, #12]
 8004c40:	f04f 30ff 	mov.w	r0, #4294967295
 8004c44:	e78e      	b.n	8004b64 <__sflush_r+0x1c>
 8004c46:	4407      	add	r7, r0
 8004c48:	eba8 0800 	sub.w	r8, r8, r0
 8004c4c:	e7e9      	b.n	8004c22 <__sflush_r+0xda>
 8004c4e:	bf00      	nop
 8004c50:	20400001 	.word	0x20400001

08004c54 <_fflush_r>:
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	690b      	ldr	r3, [r1, #16]
 8004c58:	4605      	mov	r5, r0
 8004c5a:	460c      	mov	r4, r1
 8004c5c:	b913      	cbnz	r3, 8004c64 <_fflush_r+0x10>
 8004c5e:	2500      	movs	r5, #0
 8004c60:	4628      	mov	r0, r5
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	b118      	cbz	r0, 8004c6e <_fflush_r+0x1a>
 8004c66:	6983      	ldr	r3, [r0, #24]
 8004c68:	b90b      	cbnz	r3, 8004c6e <_fflush_r+0x1a>
 8004c6a:	f000 f887 	bl	8004d7c <__sinit>
 8004c6e:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <_fflush_r+0x6c>)
 8004c70:	429c      	cmp	r4, r3
 8004c72:	d11b      	bne.n	8004cac <_fflush_r+0x58>
 8004c74:	686c      	ldr	r4, [r5, #4]
 8004c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0ef      	beq.n	8004c5e <_fflush_r+0xa>
 8004c7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c80:	07d0      	lsls	r0, r2, #31
 8004c82:	d404      	bmi.n	8004c8e <_fflush_r+0x3a>
 8004c84:	0599      	lsls	r1, r3, #22
 8004c86:	d402      	bmi.n	8004c8e <_fflush_r+0x3a>
 8004c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c8a:	f000 f915 	bl	8004eb8 <__retarget_lock_acquire_recursive>
 8004c8e:	4628      	mov	r0, r5
 8004c90:	4621      	mov	r1, r4
 8004c92:	f7ff ff59 	bl	8004b48 <__sflush_r>
 8004c96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c98:	07da      	lsls	r2, r3, #31
 8004c9a:	4605      	mov	r5, r0
 8004c9c:	d4e0      	bmi.n	8004c60 <_fflush_r+0xc>
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	059b      	lsls	r3, r3, #22
 8004ca2:	d4dd      	bmi.n	8004c60 <_fflush_r+0xc>
 8004ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ca6:	f000 f908 	bl	8004eba <__retarget_lock_release_recursive>
 8004caa:	e7d9      	b.n	8004c60 <_fflush_r+0xc>
 8004cac:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <_fflush_r+0x70>)
 8004cae:	429c      	cmp	r4, r3
 8004cb0:	d101      	bne.n	8004cb6 <_fflush_r+0x62>
 8004cb2:	68ac      	ldr	r4, [r5, #8]
 8004cb4:	e7df      	b.n	8004c76 <_fflush_r+0x22>
 8004cb6:	4b04      	ldr	r3, [pc, #16]	; (8004cc8 <_fflush_r+0x74>)
 8004cb8:	429c      	cmp	r4, r3
 8004cba:	bf08      	it	eq
 8004cbc:	68ec      	ldreq	r4, [r5, #12]
 8004cbe:	e7da      	b.n	8004c76 <_fflush_r+0x22>
 8004cc0:	080059f0 	.word	0x080059f0
 8004cc4:	08005a10 	.word	0x08005a10
 8004cc8:	080059d0 	.word	0x080059d0

08004ccc <std>:
 8004ccc:	2300      	movs	r3, #0
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8004cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cda:	6083      	str	r3, [r0, #8]
 8004cdc:	8181      	strh	r1, [r0, #12]
 8004cde:	6643      	str	r3, [r0, #100]	; 0x64
 8004ce0:	81c2      	strh	r2, [r0, #14]
 8004ce2:	6183      	str	r3, [r0, #24]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	2208      	movs	r2, #8
 8004ce8:	305c      	adds	r0, #92	; 0x5c
 8004cea:	f7ff fdd7 	bl	800489c <memset>
 8004cee:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <std+0x38>)
 8004cf0:	6263      	str	r3, [r4, #36]	; 0x24
 8004cf2:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <std+0x3c>)
 8004cf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <std+0x40>)
 8004cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <std+0x44>)
 8004cfc:	6224      	str	r4, [r4, #32]
 8004cfe:	6323      	str	r3, [r4, #48]	; 0x30
 8004d00:	bd10      	pop	{r4, pc}
 8004d02:	bf00      	nop
 8004d04:	080056d5 	.word	0x080056d5
 8004d08:	080056f7 	.word	0x080056f7
 8004d0c:	0800572f 	.word	0x0800572f
 8004d10:	08005753 	.word	0x08005753

08004d14 <_cleanup_r>:
 8004d14:	4901      	ldr	r1, [pc, #4]	; (8004d1c <_cleanup_r+0x8>)
 8004d16:	f000 b8af 	b.w	8004e78 <_fwalk_reent>
 8004d1a:	bf00      	nop
 8004d1c:	08004c55 	.word	0x08004c55

08004d20 <__sfmoreglue>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	1e4a      	subs	r2, r1, #1
 8004d24:	2568      	movs	r5, #104	; 0x68
 8004d26:	4355      	muls	r5, r2
 8004d28:	460e      	mov	r6, r1
 8004d2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d2e:	f000 f979 	bl	8005024 <_malloc_r>
 8004d32:	4604      	mov	r4, r0
 8004d34:	b140      	cbz	r0, 8004d48 <__sfmoreglue+0x28>
 8004d36:	2100      	movs	r1, #0
 8004d38:	e9c0 1600 	strd	r1, r6, [r0]
 8004d3c:	300c      	adds	r0, #12
 8004d3e:	60a0      	str	r0, [r4, #8]
 8004d40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d44:	f7ff fdaa 	bl	800489c <memset>
 8004d48:	4620      	mov	r0, r4
 8004d4a:	bd70      	pop	{r4, r5, r6, pc}

08004d4c <__sfp_lock_acquire>:
 8004d4c:	4801      	ldr	r0, [pc, #4]	; (8004d54 <__sfp_lock_acquire+0x8>)
 8004d4e:	f000 b8b3 	b.w	8004eb8 <__retarget_lock_acquire_recursive>
 8004d52:	bf00      	nop
 8004d54:	2000480c 	.word	0x2000480c

08004d58 <__sfp_lock_release>:
 8004d58:	4801      	ldr	r0, [pc, #4]	; (8004d60 <__sfp_lock_release+0x8>)
 8004d5a:	f000 b8ae 	b.w	8004eba <__retarget_lock_release_recursive>
 8004d5e:	bf00      	nop
 8004d60:	2000480c 	.word	0x2000480c

08004d64 <__sinit_lock_acquire>:
 8004d64:	4801      	ldr	r0, [pc, #4]	; (8004d6c <__sinit_lock_acquire+0x8>)
 8004d66:	f000 b8a7 	b.w	8004eb8 <__retarget_lock_acquire_recursive>
 8004d6a:	bf00      	nop
 8004d6c:	20004807 	.word	0x20004807

08004d70 <__sinit_lock_release>:
 8004d70:	4801      	ldr	r0, [pc, #4]	; (8004d78 <__sinit_lock_release+0x8>)
 8004d72:	f000 b8a2 	b.w	8004eba <__retarget_lock_release_recursive>
 8004d76:	bf00      	nop
 8004d78:	20004807 	.word	0x20004807

08004d7c <__sinit>:
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	4604      	mov	r4, r0
 8004d80:	f7ff fff0 	bl	8004d64 <__sinit_lock_acquire>
 8004d84:	69a3      	ldr	r3, [r4, #24]
 8004d86:	b11b      	cbz	r3, 8004d90 <__sinit+0x14>
 8004d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d8c:	f7ff bff0 	b.w	8004d70 <__sinit_lock_release>
 8004d90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d94:	6523      	str	r3, [r4, #80]	; 0x50
 8004d96:	4b13      	ldr	r3, [pc, #76]	; (8004de4 <__sinit+0x68>)
 8004d98:	4a13      	ldr	r2, [pc, #76]	; (8004de8 <__sinit+0x6c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d9e:	42a3      	cmp	r3, r4
 8004da0:	bf04      	itt	eq
 8004da2:	2301      	moveq	r3, #1
 8004da4:	61a3      	streq	r3, [r4, #24]
 8004da6:	4620      	mov	r0, r4
 8004da8:	f000 f820 	bl	8004dec <__sfp>
 8004dac:	6060      	str	r0, [r4, #4]
 8004dae:	4620      	mov	r0, r4
 8004db0:	f000 f81c 	bl	8004dec <__sfp>
 8004db4:	60a0      	str	r0, [r4, #8]
 8004db6:	4620      	mov	r0, r4
 8004db8:	f000 f818 	bl	8004dec <__sfp>
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	60e0      	str	r0, [r4, #12]
 8004dc0:	2104      	movs	r1, #4
 8004dc2:	6860      	ldr	r0, [r4, #4]
 8004dc4:	f7ff ff82 	bl	8004ccc <std>
 8004dc8:	68a0      	ldr	r0, [r4, #8]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	2109      	movs	r1, #9
 8004dce:	f7ff ff7d 	bl	8004ccc <std>
 8004dd2:	68e0      	ldr	r0, [r4, #12]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	2112      	movs	r1, #18
 8004dd8:	f7ff ff78 	bl	8004ccc <std>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	61a3      	str	r3, [r4, #24]
 8004de0:	e7d2      	b.n	8004d88 <__sinit+0xc>
 8004de2:	bf00      	nop
 8004de4:	080059cc 	.word	0x080059cc
 8004de8:	08004d15 	.word	0x08004d15

08004dec <__sfp>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	4607      	mov	r7, r0
 8004df0:	f7ff ffac 	bl	8004d4c <__sfp_lock_acquire>
 8004df4:	4b1e      	ldr	r3, [pc, #120]	; (8004e70 <__sfp+0x84>)
 8004df6:	681e      	ldr	r6, [r3, #0]
 8004df8:	69b3      	ldr	r3, [r6, #24]
 8004dfa:	b913      	cbnz	r3, 8004e02 <__sfp+0x16>
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	f7ff ffbd 	bl	8004d7c <__sinit>
 8004e02:	3648      	adds	r6, #72	; 0x48
 8004e04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	d503      	bpl.n	8004e14 <__sfp+0x28>
 8004e0c:	6833      	ldr	r3, [r6, #0]
 8004e0e:	b30b      	cbz	r3, 8004e54 <__sfp+0x68>
 8004e10:	6836      	ldr	r6, [r6, #0]
 8004e12:	e7f7      	b.n	8004e04 <__sfp+0x18>
 8004e14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e18:	b9d5      	cbnz	r5, 8004e50 <__sfp+0x64>
 8004e1a:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <__sfp+0x88>)
 8004e1c:	60e3      	str	r3, [r4, #12]
 8004e1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e22:	6665      	str	r5, [r4, #100]	; 0x64
 8004e24:	f000 f847 	bl	8004eb6 <__retarget_lock_init_recursive>
 8004e28:	f7ff ff96 	bl	8004d58 <__sfp_lock_release>
 8004e2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e34:	6025      	str	r5, [r4, #0]
 8004e36:	61a5      	str	r5, [r4, #24]
 8004e38:	2208      	movs	r2, #8
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e40:	f7ff fd2c 	bl	800489c <memset>
 8004e44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e50:	3468      	adds	r4, #104	; 0x68
 8004e52:	e7d9      	b.n	8004e08 <__sfp+0x1c>
 8004e54:	2104      	movs	r1, #4
 8004e56:	4638      	mov	r0, r7
 8004e58:	f7ff ff62 	bl	8004d20 <__sfmoreglue>
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	6030      	str	r0, [r6, #0]
 8004e60:	2800      	cmp	r0, #0
 8004e62:	d1d5      	bne.n	8004e10 <__sfp+0x24>
 8004e64:	f7ff ff78 	bl	8004d58 <__sfp_lock_release>
 8004e68:	230c      	movs	r3, #12
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	e7ee      	b.n	8004e4c <__sfp+0x60>
 8004e6e:	bf00      	nop
 8004e70:	080059cc 	.word	0x080059cc
 8004e74:	ffff0001 	.word	0xffff0001

08004e78 <_fwalk_reent>:
 8004e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e7c:	4606      	mov	r6, r0
 8004e7e:	4688      	mov	r8, r1
 8004e80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e84:	2700      	movs	r7, #0
 8004e86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e8a:	f1b9 0901 	subs.w	r9, r9, #1
 8004e8e:	d505      	bpl.n	8004e9c <_fwalk_reent+0x24>
 8004e90:	6824      	ldr	r4, [r4, #0]
 8004e92:	2c00      	cmp	r4, #0
 8004e94:	d1f7      	bne.n	8004e86 <_fwalk_reent+0xe>
 8004e96:	4638      	mov	r0, r7
 8004e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e9c:	89ab      	ldrh	r3, [r5, #12]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d907      	bls.n	8004eb2 <_fwalk_reent+0x3a>
 8004ea2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	d003      	beq.n	8004eb2 <_fwalk_reent+0x3a>
 8004eaa:	4629      	mov	r1, r5
 8004eac:	4630      	mov	r0, r6
 8004eae:	47c0      	blx	r8
 8004eb0:	4307      	orrs	r7, r0
 8004eb2:	3568      	adds	r5, #104	; 0x68
 8004eb4:	e7e9      	b.n	8004e8a <_fwalk_reent+0x12>

08004eb6 <__retarget_lock_init_recursive>:
 8004eb6:	4770      	bx	lr

08004eb8 <__retarget_lock_acquire_recursive>:
 8004eb8:	4770      	bx	lr

08004eba <__retarget_lock_release_recursive>:
 8004eba:	4770      	bx	lr

08004ebc <__swhatbuf_r>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	460e      	mov	r6, r1
 8004ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec4:	2900      	cmp	r1, #0
 8004ec6:	b096      	sub	sp, #88	; 0x58
 8004ec8:	4614      	mov	r4, r2
 8004eca:	461d      	mov	r5, r3
 8004ecc:	da07      	bge.n	8004ede <__swhatbuf_r+0x22>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	602b      	str	r3, [r5, #0]
 8004ed2:	89b3      	ldrh	r3, [r6, #12]
 8004ed4:	061a      	lsls	r2, r3, #24
 8004ed6:	d410      	bmi.n	8004efa <__swhatbuf_r+0x3e>
 8004ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004edc:	e00e      	b.n	8004efc <__swhatbuf_r+0x40>
 8004ede:	466a      	mov	r2, sp
 8004ee0:	f000 fc5e 	bl	80057a0 <_fstat_r>
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	dbf2      	blt.n	8004ece <__swhatbuf_r+0x12>
 8004ee8:	9a01      	ldr	r2, [sp, #4]
 8004eea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004eee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ef2:	425a      	negs	r2, r3
 8004ef4:	415a      	adcs	r2, r3
 8004ef6:	602a      	str	r2, [r5, #0]
 8004ef8:	e7ee      	b.n	8004ed8 <__swhatbuf_r+0x1c>
 8004efa:	2340      	movs	r3, #64	; 0x40
 8004efc:	2000      	movs	r0, #0
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	b016      	add	sp, #88	; 0x58
 8004f02:	bd70      	pop	{r4, r5, r6, pc}

08004f04 <__smakebuf_r>:
 8004f04:	898b      	ldrh	r3, [r1, #12]
 8004f06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f08:	079d      	lsls	r5, r3, #30
 8004f0a:	4606      	mov	r6, r0
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	d507      	bpl.n	8004f20 <__smakebuf_r+0x1c>
 8004f10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	6123      	str	r3, [r4, #16]
 8004f18:	2301      	movs	r3, #1
 8004f1a:	6163      	str	r3, [r4, #20]
 8004f1c:	b002      	add	sp, #8
 8004f1e:	bd70      	pop	{r4, r5, r6, pc}
 8004f20:	ab01      	add	r3, sp, #4
 8004f22:	466a      	mov	r2, sp
 8004f24:	f7ff ffca 	bl	8004ebc <__swhatbuf_r>
 8004f28:	9900      	ldr	r1, [sp, #0]
 8004f2a:	4605      	mov	r5, r0
 8004f2c:	4630      	mov	r0, r6
 8004f2e:	f000 f879 	bl	8005024 <_malloc_r>
 8004f32:	b948      	cbnz	r0, 8004f48 <__smakebuf_r+0x44>
 8004f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f38:	059a      	lsls	r2, r3, #22
 8004f3a:	d4ef      	bmi.n	8004f1c <__smakebuf_r+0x18>
 8004f3c:	f023 0303 	bic.w	r3, r3, #3
 8004f40:	f043 0302 	orr.w	r3, r3, #2
 8004f44:	81a3      	strh	r3, [r4, #12]
 8004f46:	e7e3      	b.n	8004f10 <__smakebuf_r+0xc>
 8004f48:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <__smakebuf_r+0x7c>)
 8004f4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f4c:	89a3      	ldrh	r3, [r4, #12]
 8004f4e:	6020      	str	r0, [r4, #0]
 8004f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f54:	81a3      	strh	r3, [r4, #12]
 8004f56:	9b00      	ldr	r3, [sp, #0]
 8004f58:	6163      	str	r3, [r4, #20]
 8004f5a:	9b01      	ldr	r3, [sp, #4]
 8004f5c:	6120      	str	r0, [r4, #16]
 8004f5e:	b15b      	cbz	r3, 8004f78 <__smakebuf_r+0x74>
 8004f60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f64:	4630      	mov	r0, r6
 8004f66:	f000 fc2d 	bl	80057c4 <_isatty_r>
 8004f6a:	b128      	cbz	r0, 8004f78 <__smakebuf_r+0x74>
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	f023 0303 	bic.w	r3, r3, #3
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	81a3      	strh	r3, [r4, #12]
 8004f78:	89a0      	ldrh	r0, [r4, #12]
 8004f7a:	4305      	orrs	r5, r0
 8004f7c:	81a5      	strh	r5, [r4, #12]
 8004f7e:	e7cd      	b.n	8004f1c <__smakebuf_r+0x18>
 8004f80:	08004d15 	.word	0x08004d15

08004f84 <_free_r>:
 8004f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f86:	2900      	cmp	r1, #0
 8004f88:	d048      	beq.n	800501c <_free_r+0x98>
 8004f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f8e:	9001      	str	r0, [sp, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f1a1 0404 	sub.w	r4, r1, #4
 8004f96:	bfb8      	it	lt
 8004f98:	18e4      	addlt	r4, r4, r3
 8004f9a:	f000 fc35 	bl	8005808 <__malloc_lock>
 8004f9e:	4a20      	ldr	r2, [pc, #128]	; (8005020 <_free_r+0x9c>)
 8004fa0:	9801      	ldr	r0, [sp, #4]
 8004fa2:	6813      	ldr	r3, [r2, #0]
 8004fa4:	4615      	mov	r5, r2
 8004fa6:	b933      	cbnz	r3, 8004fb6 <_free_r+0x32>
 8004fa8:	6063      	str	r3, [r4, #4]
 8004faa:	6014      	str	r4, [r2, #0]
 8004fac:	b003      	add	sp, #12
 8004fae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fb2:	f000 bc2f 	b.w	8005814 <__malloc_unlock>
 8004fb6:	42a3      	cmp	r3, r4
 8004fb8:	d90b      	bls.n	8004fd2 <_free_r+0x4e>
 8004fba:	6821      	ldr	r1, [r4, #0]
 8004fbc:	1862      	adds	r2, r4, r1
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	bf04      	itt	eq
 8004fc2:	681a      	ldreq	r2, [r3, #0]
 8004fc4:	685b      	ldreq	r3, [r3, #4]
 8004fc6:	6063      	str	r3, [r4, #4]
 8004fc8:	bf04      	itt	eq
 8004fca:	1852      	addeq	r2, r2, r1
 8004fcc:	6022      	streq	r2, [r4, #0]
 8004fce:	602c      	str	r4, [r5, #0]
 8004fd0:	e7ec      	b.n	8004fac <_free_r+0x28>
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	b10b      	cbz	r3, 8004fdc <_free_r+0x58>
 8004fd8:	42a3      	cmp	r3, r4
 8004fda:	d9fa      	bls.n	8004fd2 <_free_r+0x4e>
 8004fdc:	6811      	ldr	r1, [r2, #0]
 8004fde:	1855      	adds	r5, r2, r1
 8004fe0:	42a5      	cmp	r5, r4
 8004fe2:	d10b      	bne.n	8004ffc <_free_r+0x78>
 8004fe4:	6824      	ldr	r4, [r4, #0]
 8004fe6:	4421      	add	r1, r4
 8004fe8:	1854      	adds	r4, r2, r1
 8004fea:	42a3      	cmp	r3, r4
 8004fec:	6011      	str	r1, [r2, #0]
 8004fee:	d1dd      	bne.n	8004fac <_free_r+0x28>
 8004ff0:	681c      	ldr	r4, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	6053      	str	r3, [r2, #4]
 8004ff6:	4421      	add	r1, r4
 8004ff8:	6011      	str	r1, [r2, #0]
 8004ffa:	e7d7      	b.n	8004fac <_free_r+0x28>
 8004ffc:	d902      	bls.n	8005004 <_free_r+0x80>
 8004ffe:	230c      	movs	r3, #12
 8005000:	6003      	str	r3, [r0, #0]
 8005002:	e7d3      	b.n	8004fac <_free_r+0x28>
 8005004:	6825      	ldr	r5, [r4, #0]
 8005006:	1961      	adds	r1, r4, r5
 8005008:	428b      	cmp	r3, r1
 800500a:	bf04      	itt	eq
 800500c:	6819      	ldreq	r1, [r3, #0]
 800500e:	685b      	ldreq	r3, [r3, #4]
 8005010:	6063      	str	r3, [r4, #4]
 8005012:	bf04      	itt	eq
 8005014:	1949      	addeq	r1, r1, r5
 8005016:	6021      	streq	r1, [r4, #0]
 8005018:	6054      	str	r4, [r2, #4]
 800501a:	e7c7      	b.n	8004fac <_free_r+0x28>
 800501c:	b003      	add	sp, #12
 800501e:	bd30      	pop	{r4, r5, pc}
 8005020:	200002bc 	.word	0x200002bc

08005024 <_malloc_r>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	1ccd      	adds	r5, r1, #3
 8005028:	f025 0503 	bic.w	r5, r5, #3
 800502c:	3508      	adds	r5, #8
 800502e:	2d0c      	cmp	r5, #12
 8005030:	bf38      	it	cc
 8005032:	250c      	movcc	r5, #12
 8005034:	2d00      	cmp	r5, #0
 8005036:	4606      	mov	r6, r0
 8005038:	db01      	blt.n	800503e <_malloc_r+0x1a>
 800503a:	42a9      	cmp	r1, r5
 800503c:	d903      	bls.n	8005046 <_malloc_r+0x22>
 800503e:	230c      	movs	r3, #12
 8005040:	6033      	str	r3, [r6, #0]
 8005042:	2000      	movs	r0, #0
 8005044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005046:	f000 fbdf 	bl	8005808 <__malloc_lock>
 800504a:	4921      	ldr	r1, [pc, #132]	; (80050d0 <_malloc_r+0xac>)
 800504c:	680a      	ldr	r2, [r1, #0]
 800504e:	4614      	mov	r4, r2
 8005050:	b99c      	cbnz	r4, 800507a <_malloc_r+0x56>
 8005052:	4f20      	ldr	r7, [pc, #128]	; (80050d4 <_malloc_r+0xb0>)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	b923      	cbnz	r3, 8005062 <_malloc_r+0x3e>
 8005058:	4621      	mov	r1, r4
 800505a:	4630      	mov	r0, r6
 800505c:	f000 fb2a 	bl	80056b4 <_sbrk_r>
 8005060:	6038      	str	r0, [r7, #0]
 8005062:	4629      	mov	r1, r5
 8005064:	4630      	mov	r0, r6
 8005066:	f000 fb25 	bl	80056b4 <_sbrk_r>
 800506a:	1c43      	adds	r3, r0, #1
 800506c:	d123      	bne.n	80050b6 <_malloc_r+0x92>
 800506e:	230c      	movs	r3, #12
 8005070:	6033      	str	r3, [r6, #0]
 8005072:	4630      	mov	r0, r6
 8005074:	f000 fbce 	bl	8005814 <__malloc_unlock>
 8005078:	e7e3      	b.n	8005042 <_malloc_r+0x1e>
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	1b5b      	subs	r3, r3, r5
 800507e:	d417      	bmi.n	80050b0 <_malloc_r+0x8c>
 8005080:	2b0b      	cmp	r3, #11
 8005082:	d903      	bls.n	800508c <_malloc_r+0x68>
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	441c      	add	r4, r3
 8005088:	6025      	str	r5, [r4, #0]
 800508a:	e004      	b.n	8005096 <_malloc_r+0x72>
 800508c:	6863      	ldr	r3, [r4, #4]
 800508e:	42a2      	cmp	r2, r4
 8005090:	bf0c      	ite	eq
 8005092:	600b      	streq	r3, [r1, #0]
 8005094:	6053      	strne	r3, [r2, #4]
 8005096:	4630      	mov	r0, r6
 8005098:	f000 fbbc 	bl	8005814 <__malloc_unlock>
 800509c:	f104 000b 	add.w	r0, r4, #11
 80050a0:	1d23      	adds	r3, r4, #4
 80050a2:	f020 0007 	bic.w	r0, r0, #7
 80050a6:	1ac2      	subs	r2, r0, r3
 80050a8:	d0cc      	beq.n	8005044 <_malloc_r+0x20>
 80050aa:	1a1b      	subs	r3, r3, r0
 80050ac:	50a3      	str	r3, [r4, r2]
 80050ae:	e7c9      	b.n	8005044 <_malloc_r+0x20>
 80050b0:	4622      	mov	r2, r4
 80050b2:	6864      	ldr	r4, [r4, #4]
 80050b4:	e7cc      	b.n	8005050 <_malloc_r+0x2c>
 80050b6:	1cc4      	adds	r4, r0, #3
 80050b8:	f024 0403 	bic.w	r4, r4, #3
 80050bc:	42a0      	cmp	r0, r4
 80050be:	d0e3      	beq.n	8005088 <_malloc_r+0x64>
 80050c0:	1a21      	subs	r1, r4, r0
 80050c2:	4630      	mov	r0, r6
 80050c4:	f000 faf6 	bl	80056b4 <_sbrk_r>
 80050c8:	3001      	adds	r0, #1
 80050ca:	d1dd      	bne.n	8005088 <_malloc_r+0x64>
 80050cc:	e7cf      	b.n	800506e <_malloc_r+0x4a>
 80050ce:	bf00      	nop
 80050d0:	200002bc 	.word	0x200002bc
 80050d4:	200002c0 	.word	0x200002c0

080050d8 <__sfputc_r>:
 80050d8:	6893      	ldr	r3, [r2, #8]
 80050da:	3b01      	subs	r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	b410      	push	{r4}
 80050e0:	6093      	str	r3, [r2, #8]
 80050e2:	da08      	bge.n	80050f6 <__sfputc_r+0x1e>
 80050e4:	6994      	ldr	r4, [r2, #24]
 80050e6:	42a3      	cmp	r3, r4
 80050e8:	db01      	blt.n	80050ee <__sfputc_r+0x16>
 80050ea:	290a      	cmp	r1, #10
 80050ec:	d103      	bne.n	80050f6 <__sfputc_r+0x1e>
 80050ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050f2:	f7ff bc69 	b.w	80049c8 <__swbuf_r>
 80050f6:	6813      	ldr	r3, [r2, #0]
 80050f8:	1c58      	adds	r0, r3, #1
 80050fa:	6010      	str	r0, [r2, #0]
 80050fc:	7019      	strb	r1, [r3, #0]
 80050fe:	4608      	mov	r0, r1
 8005100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005104:	4770      	bx	lr

08005106 <__sfputs_r>:
 8005106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005108:	4606      	mov	r6, r0
 800510a:	460f      	mov	r7, r1
 800510c:	4614      	mov	r4, r2
 800510e:	18d5      	adds	r5, r2, r3
 8005110:	42ac      	cmp	r4, r5
 8005112:	d101      	bne.n	8005118 <__sfputs_r+0x12>
 8005114:	2000      	movs	r0, #0
 8005116:	e007      	b.n	8005128 <__sfputs_r+0x22>
 8005118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800511c:	463a      	mov	r2, r7
 800511e:	4630      	mov	r0, r6
 8005120:	f7ff ffda 	bl	80050d8 <__sfputc_r>
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	d1f3      	bne.n	8005110 <__sfputs_r+0xa>
 8005128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800512c <_vfiprintf_r>:
 800512c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005130:	460d      	mov	r5, r1
 8005132:	b09d      	sub	sp, #116	; 0x74
 8005134:	4614      	mov	r4, r2
 8005136:	4698      	mov	r8, r3
 8005138:	4606      	mov	r6, r0
 800513a:	b118      	cbz	r0, 8005144 <_vfiprintf_r+0x18>
 800513c:	6983      	ldr	r3, [r0, #24]
 800513e:	b90b      	cbnz	r3, 8005144 <_vfiprintf_r+0x18>
 8005140:	f7ff fe1c 	bl	8004d7c <__sinit>
 8005144:	4b89      	ldr	r3, [pc, #548]	; (800536c <_vfiprintf_r+0x240>)
 8005146:	429d      	cmp	r5, r3
 8005148:	d11b      	bne.n	8005182 <_vfiprintf_r+0x56>
 800514a:	6875      	ldr	r5, [r6, #4]
 800514c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800514e:	07d9      	lsls	r1, r3, #31
 8005150:	d405      	bmi.n	800515e <_vfiprintf_r+0x32>
 8005152:	89ab      	ldrh	r3, [r5, #12]
 8005154:	059a      	lsls	r2, r3, #22
 8005156:	d402      	bmi.n	800515e <_vfiprintf_r+0x32>
 8005158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800515a:	f7ff fead 	bl	8004eb8 <__retarget_lock_acquire_recursive>
 800515e:	89ab      	ldrh	r3, [r5, #12]
 8005160:	071b      	lsls	r3, r3, #28
 8005162:	d501      	bpl.n	8005168 <_vfiprintf_r+0x3c>
 8005164:	692b      	ldr	r3, [r5, #16]
 8005166:	b9eb      	cbnz	r3, 80051a4 <_vfiprintf_r+0x78>
 8005168:	4629      	mov	r1, r5
 800516a:	4630      	mov	r0, r6
 800516c:	f7ff fc7e 	bl	8004a6c <__swsetup_r>
 8005170:	b1c0      	cbz	r0, 80051a4 <_vfiprintf_r+0x78>
 8005172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005174:	07dc      	lsls	r4, r3, #31
 8005176:	d50e      	bpl.n	8005196 <_vfiprintf_r+0x6a>
 8005178:	f04f 30ff 	mov.w	r0, #4294967295
 800517c:	b01d      	add	sp, #116	; 0x74
 800517e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005182:	4b7b      	ldr	r3, [pc, #492]	; (8005370 <_vfiprintf_r+0x244>)
 8005184:	429d      	cmp	r5, r3
 8005186:	d101      	bne.n	800518c <_vfiprintf_r+0x60>
 8005188:	68b5      	ldr	r5, [r6, #8]
 800518a:	e7df      	b.n	800514c <_vfiprintf_r+0x20>
 800518c:	4b79      	ldr	r3, [pc, #484]	; (8005374 <_vfiprintf_r+0x248>)
 800518e:	429d      	cmp	r5, r3
 8005190:	bf08      	it	eq
 8005192:	68f5      	ldreq	r5, [r6, #12]
 8005194:	e7da      	b.n	800514c <_vfiprintf_r+0x20>
 8005196:	89ab      	ldrh	r3, [r5, #12]
 8005198:	0598      	lsls	r0, r3, #22
 800519a:	d4ed      	bmi.n	8005178 <_vfiprintf_r+0x4c>
 800519c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800519e:	f7ff fe8c 	bl	8004eba <__retarget_lock_release_recursive>
 80051a2:	e7e9      	b.n	8005178 <_vfiprintf_r+0x4c>
 80051a4:	2300      	movs	r3, #0
 80051a6:	9309      	str	r3, [sp, #36]	; 0x24
 80051a8:	2320      	movs	r3, #32
 80051aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80051b2:	2330      	movs	r3, #48	; 0x30
 80051b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005378 <_vfiprintf_r+0x24c>
 80051b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051bc:	f04f 0901 	mov.w	r9, #1
 80051c0:	4623      	mov	r3, r4
 80051c2:	469a      	mov	sl, r3
 80051c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051c8:	b10a      	cbz	r2, 80051ce <_vfiprintf_r+0xa2>
 80051ca:	2a25      	cmp	r2, #37	; 0x25
 80051cc:	d1f9      	bne.n	80051c2 <_vfiprintf_r+0x96>
 80051ce:	ebba 0b04 	subs.w	fp, sl, r4
 80051d2:	d00b      	beq.n	80051ec <_vfiprintf_r+0xc0>
 80051d4:	465b      	mov	r3, fp
 80051d6:	4622      	mov	r2, r4
 80051d8:	4629      	mov	r1, r5
 80051da:	4630      	mov	r0, r6
 80051dc:	f7ff ff93 	bl	8005106 <__sfputs_r>
 80051e0:	3001      	adds	r0, #1
 80051e2:	f000 80aa 	beq.w	800533a <_vfiprintf_r+0x20e>
 80051e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051e8:	445a      	add	r2, fp
 80051ea:	9209      	str	r2, [sp, #36]	; 0x24
 80051ec:	f89a 3000 	ldrb.w	r3, [sl]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80a2 	beq.w	800533a <_vfiprintf_r+0x20e>
 80051f6:	2300      	movs	r3, #0
 80051f8:	f04f 32ff 	mov.w	r2, #4294967295
 80051fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005200:	f10a 0a01 	add.w	sl, sl, #1
 8005204:	9304      	str	r3, [sp, #16]
 8005206:	9307      	str	r3, [sp, #28]
 8005208:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800520c:	931a      	str	r3, [sp, #104]	; 0x68
 800520e:	4654      	mov	r4, sl
 8005210:	2205      	movs	r2, #5
 8005212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005216:	4858      	ldr	r0, [pc, #352]	; (8005378 <_vfiprintf_r+0x24c>)
 8005218:	f7fb f812 	bl	8000240 <memchr>
 800521c:	9a04      	ldr	r2, [sp, #16]
 800521e:	b9d8      	cbnz	r0, 8005258 <_vfiprintf_r+0x12c>
 8005220:	06d1      	lsls	r1, r2, #27
 8005222:	bf44      	itt	mi
 8005224:	2320      	movmi	r3, #32
 8005226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800522a:	0713      	lsls	r3, r2, #28
 800522c:	bf44      	itt	mi
 800522e:	232b      	movmi	r3, #43	; 0x2b
 8005230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005234:	f89a 3000 	ldrb.w	r3, [sl]
 8005238:	2b2a      	cmp	r3, #42	; 0x2a
 800523a:	d015      	beq.n	8005268 <_vfiprintf_r+0x13c>
 800523c:	9a07      	ldr	r2, [sp, #28]
 800523e:	4654      	mov	r4, sl
 8005240:	2000      	movs	r0, #0
 8005242:	f04f 0c0a 	mov.w	ip, #10
 8005246:	4621      	mov	r1, r4
 8005248:	f811 3b01 	ldrb.w	r3, [r1], #1
 800524c:	3b30      	subs	r3, #48	; 0x30
 800524e:	2b09      	cmp	r3, #9
 8005250:	d94e      	bls.n	80052f0 <_vfiprintf_r+0x1c4>
 8005252:	b1b0      	cbz	r0, 8005282 <_vfiprintf_r+0x156>
 8005254:	9207      	str	r2, [sp, #28]
 8005256:	e014      	b.n	8005282 <_vfiprintf_r+0x156>
 8005258:	eba0 0308 	sub.w	r3, r0, r8
 800525c:	fa09 f303 	lsl.w	r3, r9, r3
 8005260:	4313      	orrs	r3, r2
 8005262:	9304      	str	r3, [sp, #16]
 8005264:	46a2      	mov	sl, r4
 8005266:	e7d2      	b.n	800520e <_vfiprintf_r+0xe2>
 8005268:	9b03      	ldr	r3, [sp, #12]
 800526a:	1d19      	adds	r1, r3, #4
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	9103      	str	r1, [sp, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	bfbb      	ittet	lt
 8005274:	425b      	neglt	r3, r3
 8005276:	f042 0202 	orrlt.w	r2, r2, #2
 800527a:	9307      	strge	r3, [sp, #28]
 800527c:	9307      	strlt	r3, [sp, #28]
 800527e:	bfb8      	it	lt
 8005280:	9204      	strlt	r2, [sp, #16]
 8005282:	7823      	ldrb	r3, [r4, #0]
 8005284:	2b2e      	cmp	r3, #46	; 0x2e
 8005286:	d10c      	bne.n	80052a2 <_vfiprintf_r+0x176>
 8005288:	7863      	ldrb	r3, [r4, #1]
 800528a:	2b2a      	cmp	r3, #42	; 0x2a
 800528c:	d135      	bne.n	80052fa <_vfiprintf_r+0x1ce>
 800528e:	9b03      	ldr	r3, [sp, #12]
 8005290:	1d1a      	adds	r2, r3, #4
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	9203      	str	r2, [sp, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	bfb8      	it	lt
 800529a:	f04f 33ff 	movlt.w	r3, #4294967295
 800529e:	3402      	adds	r4, #2
 80052a0:	9305      	str	r3, [sp, #20]
 80052a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005388 <_vfiprintf_r+0x25c>
 80052a6:	7821      	ldrb	r1, [r4, #0]
 80052a8:	2203      	movs	r2, #3
 80052aa:	4650      	mov	r0, sl
 80052ac:	f7fa ffc8 	bl	8000240 <memchr>
 80052b0:	b140      	cbz	r0, 80052c4 <_vfiprintf_r+0x198>
 80052b2:	2340      	movs	r3, #64	; 0x40
 80052b4:	eba0 000a 	sub.w	r0, r0, sl
 80052b8:	fa03 f000 	lsl.w	r0, r3, r0
 80052bc:	9b04      	ldr	r3, [sp, #16]
 80052be:	4303      	orrs	r3, r0
 80052c0:	3401      	adds	r4, #1
 80052c2:	9304      	str	r3, [sp, #16]
 80052c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c8:	482c      	ldr	r0, [pc, #176]	; (800537c <_vfiprintf_r+0x250>)
 80052ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052ce:	2206      	movs	r2, #6
 80052d0:	f7fa ffb6 	bl	8000240 <memchr>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	d03f      	beq.n	8005358 <_vfiprintf_r+0x22c>
 80052d8:	4b29      	ldr	r3, [pc, #164]	; (8005380 <_vfiprintf_r+0x254>)
 80052da:	bb1b      	cbnz	r3, 8005324 <_vfiprintf_r+0x1f8>
 80052dc:	9b03      	ldr	r3, [sp, #12]
 80052de:	3307      	adds	r3, #7
 80052e0:	f023 0307 	bic.w	r3, r3, #7
 80052e4:	3308      	adds	r3, #8
 80052e6:	9303      	str	r3, [sp, #12]
 80052e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ea:	443b      	add	r3, r7
 80052ec:	9309      	str	r3, [sp, #36]	; 0x24
 80052ee:	e767      	b.n	80051c0 <_vfiprintf_r+0x94>
 80052f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80052f4:	460c      	mov	r4, r1
 80052f6:	2001      	movs	r0, #1
 80052f8:	e7a5      	b.n	8005246 <_vfiprintf_r+0x11a>
 80052fa:	2300      	movs	r3, #0
 80052fc:	3401      	adds	r4, #1
 80052fe:	9305      	str	r3, [sp, #20]
 8005300:	4619      	mov	r1, r3
 8005302:	f04f 0c0a 	mov.w	ip, #10
 8005306:	4620      	mov	r0, r4
 8005308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800530c:	3a30      	subs	r2, #48	; 0x30
 800530e:	2a09      	cmp	r2, #9
 8005310:	d903      	bls.n	800531a <_vfiprintf_r+0x1ee>
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0c5      	beq.n	80052a2 <_vfiprintf_r+0x176>
 8005316:	9105      	str	r1, [sp, #20]
 8005318:	e7c3      	b.n	80052a2 <_vfiprintf_r+0x176>
 800531a:	fb0c 2101 	mla	r1, ip, r1, r2
 800531e:	4604      	mov	r4, r0
 8005320:	2301      	movs	r3, #1
 8005322:	e7f0      	b.n	8005306 <_vfiprintf_r+0x1da>
 8005324:	ab03      	add	r3, sp, #12
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	462a      	mov	r2, r5
 800532a:	4b16      	ldr	r3, [pc, #88]	; (8005384 <_vfiprintf_r+0x258>)
 800532c:	a904      	add	r1, sp, #16
 800532e:	4630      	mov	r0, r6
 8005330:	f3af 8000 	nop.w
 8005334:	4607      	mov	r7, r0
 8005336:	1c78      	adds	r0, r7, #1
 8005338:	d1d6      	bne.n	80052e8 <_vfiprintf_r+0x1bc>
 800533a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800533c:	07d9      	lsls	r1, r3, #31
 800533e:	d405      	bmi.n	800534c <_vfiprintf_r+0x220>
 8005340:	89ab      	ldrh	r3, [r5, #12]
 8005342:	059a      	lsls	r2, r3, #22
 8005344:	d402      	bmi.n	800534c <_vfiprintf_r+0x220>
 8005346:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005348:	f7ff fdb7 	bl	8004eba <__retarget_lock_release_recursive>
 800534c:	89ab      	ldrh	r3, [r5, #12]
 800534e:	065b      	lsls	r3, r3, #25
 8005350:	f53f af12 	bmi.w	8005178 <_vfiprintf_r+0x4c>
 8005354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005356:	e711      	b.n	800517c <_vfiprintf_r+0x50>
 8005358:	ab03      	add	r3, sp, #12
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	462a      	mov	r2, r5
 800535e:	4b09      	ldr	r3, [pc, #36]	; (8005384 <_vfiprintf_r+0x258>)
 8005360:	a904      	add	r1, sp, #16
 8005362:	4630      	mov	r0, r6
 8005364:	f000 f880 	bl	8005468 <_printf_i>
 8005368:	e7e4      	b.n	8005334 <_vfiprintf_r+0x208>
 800536a:	bf00      	nop
 800536c:	080059f0 	.word	0x080059f0
 8005370:	08005a10 	.word	0x08005a10
 8005374:	080059d0 	.word	0x080059d0
 8005378:	08005a30 	.word	0x08005a30
 800537c:	08005a3a 	.word	0x08005a3a
 8005380:	00000000 	.word	0x00000000
 8005384:	08005107 	.word	0x08005107
 8005388:	08005a36 	.word	0x08005a36

0800538c <_printf_common>:
 800538c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005390:	4616      	mov	r6, r2
 8005392:	4699      	mov	r9, r3
 8005394:	688a      	ldr	r2, [r1, #8]
 8005396:	690b      	ldr	r3, [r1, #16]
 8005398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800539c:	4293      	cmp	r3, r2
 800539e:	bfb8      	it	lt
 80053a0:	4613      	movlt	r3, r2
 80053a2:	6033      	str	r3, [r6, #0]
 80053a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053a8:	4607      	mov	r7, r0
 80053aa:	460c      	mov	r4, r1
 80053ac:	b10a      	cbz	r2, 80053b2 <_printf_common+0x26>
 80053ae:	3301      	adds	r3, #1
 80053b0:	6033      	str	r3, [r6, #0]
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	0699      	lsls	r1, r3, #26
 80053b6:	bf42      	ittt	mi
 80053b8:	6833      	ldrmi	r3, [r6, #0]
 80053ba:	3302      	addmi	r3, #2
 80053bc:	6033      	strmi	r3, [r6, #0]
 80053be:	6825      	ldr	r5, [r4, #0]
 80053c0:	f015 0506 	ands.w	r5, r5, #6
 80053c4:	d106      	bne.n	80053d4 <_printf_common+0x48>
 80053c6:	f104 0a19 	add.w	sl, r4, #25
 80053ca:	68e3      	ldr	r3, [r4, #12]
 80053cc:	6832      	ldr	r2, [r6, #0]
 80053ce:	1a9b      	subs	r3, r3, r2
 80053d0:	42ab      	cmp	r3, r5
 80053d2:	dc26      	bgt.n	8005422 <_printf_common+0x96>
 80053d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053d8:	1e13      	subs	r3, r2, #0
 80053da:	6822      	ldr	r2, [r4, #0]
 80053dc:	bf18      	it	ne
 80053de:	2301      	movne	r3, #1
 80053e0:	0692      	lsls	r2, r2, #26
 80053e2:	d42b      	bmi.n	800543c <_printf_common+0xb0>
 80053e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053e8:	4649      	mov	r1, r9
 80053ea:	4638      	mov	r0, r7
 80053ec:	47c0      	blx	r8
 80053ee:	3001      	adds	r0, #1
 80053f0:	d01e      	beq.n	8005430 <_printf_common+0xa4>
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	68e5      	ldr	r5, [r4, #12]
 80053f6:	6832      	ldr	r2, [r6, #0]
 80053f8:	f003 0306 	and.w	r3, r3, #6
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	bf08      	it	eq
 8005400:	1aad      	subeq	r5, r5, r2
 8005402:	68a3      	ldr	r3, [r4, #8]
 8005404:	6922      	ldr	r2, [r4, #16]
 8005406:	bf0c      	ite	eq
 8005408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800540c:	2500      	movne	r5, #0
 800540e:	4293      	cmp	r3, r2
 8005410:	bfc4      	itt	gt
 8005412:	1a9b      	subgt	r3, r3, r2
 8005414:	18ed      	addgt	r5, r5, r3
 8005416:	2600      	movs	r6, #0
 8005418:	341a      	adds	r4, #26
 800541a:	42b5      	cmp	r5, r6
 800541c:	d11a      	bne.n	8005454 <_printf_common+0xc8>
 800541e:	2000      	movs	r0, #0
 8005420:	e008      	b.n	8005434 <_printf_common+0xa8>
 8005422:	2301      	movs	r3, #1
 8005424:	4652      	mov	r2, sl
 8005426:	4649      	mov	r1, r9
 8005428:	4638      	mov	r0, r7
 800542a:	47c0      	blx	r8
 800542c:	3001      	adds	r0, #1
 800542e:	d103      	bne.n	8005438 <_printf_common+0xac>
 8005430:	f04f 30ff 	mov.w	r0, #4294967295
 8005434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005438:	3501      	adds	r5, #1
 800543a:	e7c6      	b.n	80053ca <_printf_common+0x3e>
 800543c:	18e1      	adds	r1, r4, r3
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	2030      	movs	r0, #48	; 0x30
 8005442:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005446:	4422      	add	r2, r4
 8005448:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800544c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005450:	3302      	adds	r3, #2
 8005452:	e7c7      	b.n	80053e4 <_printf_common+0x58>
 8005454:	2301      	movs	r3, #1
 8005456:	4622      	mov	r2, r4
 8005458:	4649      	mov	r1, r9
 800545a:	4638      	mov	r0, r7
 800545c:	47c0      	blx	r8
 800545e:	3001      	adds	r0, #1
 8005460:	d0e6      	beq.n	8005430 <_printf_common+0xa4>
 8005462:	3601      	adds	r6, #1
 8005464:	e7d9      	b.n	800541a <_printf_common+0x8e>
	...

08005468 <_printf_i>:
 8005468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800546c:	460c      	mov	r4, r1
 800546e:	4691      	mov	r9, r2
 8005470:	7e27      	ldrb	r7, [r4, #24]
 8005472:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005474:	2f78      	cmp	r7, #120	; 0x78
 8005476:	4680      	mov	r8, r0
 8005478:	469a      	mov	sl, r3
 800547a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800547e:	d807      	bhi.n	8005490 <_printf_i+0x28>
 8005480:	2f62      	cmp	r7, #98	; 0x62
 8005482:	d80a      	bhi.n	800549a <_printf_i+0x32>
 8005484:	2f00      	cmp	r7, #0
 8005486:	f000 80d8 	beq.w	800563a <_printf_i+0x1d2>
 800548a:	2f58      	cmp	r7, #88	; 0x58
 800548c:	f000 80a3 	beq.w	80055d6 <_printf_i+0x16e>
 8005490:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005494:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005498:	e03a      	b.n	8005510 <_printf_i+0xa8>
 800549a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800549e:	2b15      	cmp	r3, #21
 80054a0:	d8f6      	bhi.n	8005490 <_printf_i+0x28>
 80054a2:	a001      	add	r0, pc, #4	; (adr r0, 80054a8 <_printf_i+0x40>)
 80054a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80054a8:	08005501 	.word	0x08005501
 80054ac:	08005515 	.word	0x08005515
 80054b0:	08005491 	.word	0x08005491
 80054b4:	08005491 	.word	0x08005491
 80054b8:	08005491 	.word	0x08005491
 80054bc:	08005491 	.word	0x08005491
 80054c0:	08005515 	.word	0x08005515
 80054c4:	08005491 	.word	0x08005491
 80054c8:	08005491 	.word	0x08005491
 80054cc:	08005491 	.word	0x08005491
 80054d0:	08005491 	.word	0x08005491
 80054d4:	08005621 	.word	0x08005621
 80054d8:	08005545 	.word	0x08005545
 80054dc:	08005603 	.word	0x08005603
 80054e0:	08005491 	.word	0x08005491
 80054e4:	08005491 	.word	0x08005491
 80054e8:	08005643 	.word	0x08005643
 80054ec:	08005491 	.word	0x08005491
 80054f0:	08005545 	.word	0x08005545
 80054f4:	08005491 	.word	0x08005491
 80054f8:	08005491 	.word	0x08005491
 80054fc:	0800560b 	.word	0x0800560b
 8005500:	680b      	ldr	r3, [r1, #0]
 8005502:	1d1a      	adds	r2, r3, #4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	600a      	str	r2, [r1, #0]
 8005508:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800550c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005510:	2301      	movs	r3, #1
 8005512:	e0a3      	b.n	800565c <_printf_i+0x1f4>
 8005514:	6825      	ldr	r5, [r4, #0]
 8005516:	6808      	ldr	r0, [r1, #0]
 8005518:	062e      	lsls	r6, r5, #24
 800551a:	f100 0304 	add.w	r3, r0, #4
 800551e:	d50a      	bpl.n	8005536 <_printf_i+0xce>
 8005520:	6805      	ldr	r5, [r0, #0]
 8005522:	600b      	str	r3, [r1, #0]
 8005524:	2d00      	cmp	r5, #0
 8005526:	da03      	bge.n	8005530 <_printf_i+0xc8>
 8005528:	232d      	movs	r3, #45	; 0x2d
 800552a:	426d      	negs	r5, r5
 800552c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005530:	485e      	ldr	r0, [pc, #376]	; (80056ac <_printf_i+0x244>)
 8005532:	230a      	movs	r3, #10
 8005534:	e019      	b.n	800556a <_printf_i+0x102>
 8005536:	f015 0f40 	tst.w	r5, #64	; 0x40
 800553a:	6805      	ldr	r5, [r0, #0]
 800553c:	600b      	str	r3, [r1, #0]
 800553e:	bf18      	it	ne
 8005540:	b22d      	sxthne	r5, r5
 8005542:	e7ef      	b.n	8005524 <_printf_i+0xbc>
 8005544:	680b      	ldr	r3, [r1, #0]
 8005546:	6825      	ldr	r5, [r4, #0]
 8005548:	1d18      	adds	r0, r3, #4
 800554a:	6008      	str	r0, [r1, #0]
 800554c:	0628      	lsls	r0, r5, #24
 800554e:	d501      	bpl.n	8005554 <_printf_i+0xec>
 8005550:	681d      	ldr	r5, [r3, #0]
 8005552:	e002      	b.n	800555a <_printf_i+0xf2>
 8005554:	0669      	lsls	r1, r5, #25
 8005556:	d5fb      	bpl.n	8005550 <_printf_i+0xe8>
 8005558:	881d      	ldrh	r5, [r3, #0]
 800555a:	4854      	ldr	r0, [pc, #336]	; (80056ac <_printf_i+0x244>)
 800555c:	2f6f      	cmp	r7, #111	; 0x6f
 800555e:	bf0c      	ite	eq
 8005560:	2308      	moveq	r3, #8
 8005562:	230a      	movne	r3, #10
 8005564:	2100      	movs	r1, #0
 8005566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800556a:	6866      	ldr	r6, [r4, #4]
 800556c:	60a6      	str	r6, [r4, #8]
 800556e:	2e00      	cmp	r6, #0
 8005570:	bfa2      	ittt	ge
 8005572:	6821      	ldrge	r1, [r4, #0]
 8005574:	f021 0104 	bicge.w	r1, r1, #4
 8005578:	6021      	strge	r1, [r4, #0]
 800557a:	b90d      	cbnz	r5, 8005580 <_printf_i+0x118>
 800557c:	2e00      	cmp	r6, #0
 800557e:	d04d      	beq.n	800561c <_printf_i+0x1b4>
 8005580:	4616      	mov	r6, r2
 8005582:	fbb5 f1f3 	udiv	r1, r5, r3
 8005586:	fb03 5711 	mls	r7, r3, r1, r5
 800558a:	5dc7      	ldrb	r7, [r0, r7]
 800558c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005590:	462f      	mov	r7, r5
 8005592:	42bb      	cmp	r3, r7
 8005594:	460d      	mov	r5, r1
 8005596:	d9f4      	bls.n	8005582 <_printf_i+0x11a>
 8005598:	2b08      	cmp	r3, #8
 800559a:	d10b      	bne.n	80055b4 <_printf_i+0x14c>
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	07df      	lsls	r7, r3, #31
 80055a0:	d508      	bpl.n	80055b4 <_printf_i+0x14c>
 80055a2:	6923      	ldr	r3, [r4, #16]
 80055a4:	6861      	ldr	r1, [r4, #4]
 80055a6:	4299      	cmp	r1, r3
 80055a8:	bfde      	ittt	le
 80055aa:	2330      	movle	r3, #48	; 0x30
 80055ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055b4:	1b92      	subs	r2, r2, r6
 80055b6:	6122      	str	r2, [r4, #16]
 80055b8:	f8cd a000 	str.w	sl, [sp]
 80055bc:	464b      	mov	r3, r9
 80055be:	aa03      	add	r2, sp, #12
 80055c0:	4621      	mov	r1, r4
 80055c2:	4640      	mov	r0, r8
 80055c4:	f7ff fee2 	bl	800538c <_printf_common>
 80055c8:	3001      	adds	r0, #1
 80055ca:	d14c      	bne.n	8005666 <_printf_i+0x1fe>
 80055cc:	f04f 30ff 	mov.w	r0, #4294967295
 80055d0:	b004      	add	sp, #16
 80055d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d6:	4835      	ldr	r0, [pc, #212]	; (80056ac <_printf_i+0x244>)
 80055d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	680e      	ldr	r6, [r1, #0]
 80055e0:	061f      	lsls	r7, r3, #24
 80055e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80055e6:	600e      	str	r6, [r1, #0]
 80055e8:	d514      	bpl.n	8005614 <_printf_i+0x1ac>
 80055ea:	07d9      	lsls	r1, r3, #31
 80055ec:	bf44      	itt	mi
 80055ee:	f043 0320 	orrmi.w	r3, r3, #32
 80055f2:	6023      	strmi	r3, [r4, #0]
 80055f4:	b91d      	cbnz	r5, 80055fe <_printf_i+0x196>
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	f023 0320 	bic.w	r3, r3, #32
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	2310      	movs	r3, #16
 8005600:	e7b0      	b.n	8005564 <_printf_i+0xfc>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	f043 0320 	orr.w	r3, r3, #32
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	2378      	movs	r3, #120	; 0x78
 800560c:	4828      	ldr	r0, [pc, #160]	; (80056b0 <_printf_i+0x248>)
 800560e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005612:	e7e3      	b.n	80055dc <_printf_i+0x174>
 8005614:	065e      	lsls	r6, r3, #25
 8005616:	bf48      	it	mi
 8005618:	b2ad      	uxthmi	r5, r5
 800561a:	e7e6      	b.n	80055ea <_printf_i+0x182>
 800561c:	4616      	mov	r6, r2
 800561e:	e7bb      	b.n	8005598 <_printf_i+0x130>
 8005620:	680b      	ldr	r3, [r1, #0]
 8005622:	6826      	ldr	r6, [r4, #0]
 8005624:	6960      	ldr	r0, [r4, #20]
 8005626:	1d1d      	adds	r5, r3, #4
 8005628:	600d      	str	r5, [r1, #0]
 800562a:	0635      	lsls	r5, r6, #24
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	d501      	bpl.n	8005634 <_printf_i+0x1cc>
 8005630:	6018      	str	r0, [r3, #0]
 8005632:	e002      	b.n	800563a <_printf_i+0x1d2>
 8005634:	0671      	lsls	r1, r6, #25
 8005636:	d5fb      	bpl.n	8005630 <_printf_i+0x1c8>
 8005638:	8018      	strh	r0, [r3, #0]
 800563a:	2300      	movs	r3, #0
 800563c:	6123      	str	r3, [r4, #16]
 800563e:	4616      	mov	r6, r2
 8005640:	e7ba      	b.n	80055b8 <_printf_i+0x150>
 8005642:	680b      	ldr	r3, [r1, #0]
 8005644:	1d1a      	adds	r2, r3, #4
 8005646:	600a      	str	r2, [r1, #0]
 8005648:	681e      	ldr	r6, [r3, #0]
 800564a:	6862      	ldr	r2, [r4, #4]
 800564c:	2100      	movs	r1, #0
 800564e:	4630      	mov	r0, r6
 8005650:	f7fa fdf6 	bl	8000240 <memchr>
 8005654:	b108      	cbz	r0, 800565a <_printf_i+0x1f2>
 8005656:	1b80      	subs	r0, r0, r6
 8005658:	6060      	str	r0, [r4, #4]
 800565a:	6863      	ldr	r3, [r4, #4]
 800565c:	6123      	str	r3, [r4, #16]
 800565e:	2300      	movs	r3, #0
 8005660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005664:	e7a8      	b.n	80055b8 <_printf_i+0x150>
 8005666:	6923      	ldr	r3, [r4, #16]
 8005668:	4632      	mov	r2, r6
 800566a:	4649      	mov	r1, r9
 800566c:	4640      	mov	r0, r8
 800566e:	47d0      	blx	sl
 8005670:	3001      	adds	r0, #1
 8005672:	d0ab      	beq.n	80055cc <_printf_i+0x164>
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	079b      	lsls	r3, r3, #30
 8005678:	d413      	bmi.n	80056a2 <_printf_i+0x23a>
 800567a:	68e0      	ldr	r0, [r4, #12]
 800567c:	9b03      	ldr	r3, [sp, #12]
 800567e:	4298      	cmp	r0, r3
 8005680:	bfb8      	it	lt
 8005682:	4618      	movlt	r0, r3
 8005684:	e7a4      	b.n	80055d0 <_printf_i+0x168>
 8005686:	2301      	movs	r3, #1
 8005688:	4632      	mov	r2, r6
 800568a:	4649      	mov	r1, r9
 800568c:	4640      	mov	r0, r8
 800568e:	47d0      	blx	sl
 8005690:	3001      	adds	r0, #1
 8005692:	d09b      	beq.n	80055cc <_printf_i+0x164>
 8005694:	3501      	adds	r5, #1
 8005696:	68e3      	ldr	r3, [r4, #12]
 8005698:	9903      	ldr	r1, [sp, #12]
 800569a:	1a5b      	subs	r3, r3, r1
 800569c:	42ab      	cmp	r3, r5
 800569e:	dcf2      	bgt.n	8005686 <_printf_i+0x21e>
 80056a0:	e7eb      	b.n	800567a <_printf_i+0x212>
 80056a2:	2500      	movs	r5, #0
 80056a4:	f104 0619 	add.w	r6, r4, #25
 80056a8:	e7f5      	b.n	8005696 <_printf_i+0x22e>
 80056aa:	bf00      	nop
 80056ac:	08005a41 	.word	0x08005a41
 80056b0:	08005a52 	.word	0x08005a52

080056b4 <_sbrk_r>:
 80056b4:	b538      	push	{r3, r4, r5, lr}
 80056b6:	4d06      	ldr	r5, [pc, #24]	; (80056d0 <_sbrk_r+0x1c>)
 80056b8:	2300      	movs	r3, #0
 80056ba:	4604      	mov	r4, r0
 80056bc:	4608      	mov	r0, r1
 80056be:	602b      	str	r3, [r5, #0]
 80056c0:	f000 f8e0 	bl	8005884 <_sbrk>
 80056c4:	1c43      	adds	r3, r0, #1
 80056c6:	d102      	bne.n	80056ce <_sbrk_r+0x1a>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	b103      	cbz	r3, 80056ce <_sbrk_r+0x1a>
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	20004810 	.word	0x20004810

080056d4 <__sread>:
 80056d4:	b510      	push	{r4, lr}
 80056d6:	460c      	mov	r4, r1
 80056d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056dc:	f000 f8a0 	bl	8005820 <_read_r>
 80056e0:	2800      	cmp	r0, #0
 80056e2:	bfab      	itete	ge
 80056e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056e6:	89a3      	ldrhlt	r3, [r4, #12]
 80056e8:	181b      	addge	r3, r3, r0
 80056ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056ee:	bfac      	ite	ge
 80056f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80056f2:	81a3      	strhlt	r3, [r4, #12]
 80056f4:	bd10      	pop	{r4, pc}

080056f6 <__swrite>:
 80056f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056fa:	461f      	mov	r7, r3
 80056fc:	898b      	ldrh	r3, [r1, #12]
 80056fe:	05db      	lsls	r3, r3, #23
 8005700:	4605      	mov	r5, r0
 8005702:	460c      	mov	r4, r1
 8005704:	4616      	mov	r6, r2
 8005706:	d505      	bpl.n	8005714 <__swrite+0x1e>
 8005708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800570c:	2302      	movs	r3, #2
 800570e:	2200      	movs	r2, #0
 8005710:	f000 f868 	bl	80057e4 <_lseek_r>
 8005714:	89a3      	ldrh	r3, [r4, #12]
 8005716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800571a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800571e:	81a3      	strh	r3, [r4, #12]
 8005720:	4632      	mov	r2, r6
 8005722:	463b      	mov	r3, r7
 8005724:	4628      	mov	r0, r5
 8005726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800572a:	f000 b817 	b.w	800575c <_write_r>

0800572e <__sseek>:
 800572e:	b510      	push	{r4, lr}
 8005730:	460c      	mov	r4, r1
 8005732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005736:	f000 f855 	bl	80057e4 <_lseek_r>
 800573a:	1c43      	adds	r3, r0, #1
 800573c:	89a3      	ldrh	r3, [r4, #12]
 800573e:	bf15      	itete	ne
 8005740:	6560      	strne	r0, [r4, #84]	; 0x54
 8005742:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005746:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800574a:	81a3      	strheq	r3, [r4, #12]
 800574c:	bf18      	it	ne
 800574e:	81a3      	strhne	r3, [r4, #12]
 8005750:	bd10      	pop	{r4, pc}

08005752 <__sclose>:
 8005752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005756:	f000 b813 	b.w	8005780 <_close_r>
	...

0800575c <_write_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4d07      	ldr	r5, [pc, #28]	; (800577c <_write_r+0x20>)
 8005760:	4604      	mov	r4, r0
 8005762:	4608      	mov	r0, r1
 8005764:	4611      	mov	r1, r2
 8005766:	2200      	movs	r2, #0
 8005768:	602a      	str	r2, [r5, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	f7ff f81e 	bl	80047ac <_write>
 8005770:	1c43      	adds	r3, r0, #1
 8005772:	d102      	bne.n	800577a <_write_r+0x1e>
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	b103      	cbz	r3, 800577a <_write_r+0x1e>
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	bd38      	pop	{r3, r4, r5, pc}
 800577c:	20004810 	.word	0x20004810

08005780 <_close_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4d06      	ldr	r5, [pc, #24]	; (800579c <_close_r+0x1c>)
 8005784:	2300      	movs	r3, #0
 8005786:	4604      	mov	r4, r0
 8005788:	4608      	mov	r0, r1
 800578a:	602b      	str	r3, [r5, #0]
 800578c:	f000 f85a 	bl	8005844 <_close>
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	d102      	bne.n	800579a <_close_r+0x1a>
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	b103      	cbz	r3, 800579a <_close_r+0x1a>
 8005798:	6023      	str	r3, [r4, #0]
 800579a:	bd38      	pop	{r3, r4, r5, pc}
 800579c:	20004810 	.word	0x20004810

080057a0 <_fstat_r>:
 80057a0:	b538      	push	{r3, r4, r5, lr}
 80057a2:	4d07      	ldr	r5, [pc, #28]	; (80057c0 <_fstat_r+0x20>)
 80057a4:	2300      	movs	r3, #0
 80057a6:	4604      	mov	r4, r0
 80057a8:	4608      	mov	r0, r1
 80057aa:	4611      	mov	r1, r2
 80057ac:	602b      	str	r3, [r5, #0]
 80057ae:	f000 f851 	bl	8005854 <_fstat>
 80057b2:	1c43      	adds	r3, r0, #1
 80057b4:	d102      	bne.n	80057bc <_fstat_r+0x1c>
 80057b6:	682b      	ldr	r3, [r5, #0]
 80057b8:	b103      	cbz	r3, 80057bc <_fstat_r+0x1c>
 80057ba:	6023      	str	r3, [r4, #0]
 80057bc:	bd38      	pop	{r3, r4, r5, pc}
 80057be:	bf00      	nop
 80057c0:	20004810 	.word	0x20004810

080057c4 <_isatty_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	4d06      	ldr	r5, [pc, #24]	; (80057e0 <_isatty_r+0x1c>)
 80057c8:	2300      	movs	r3, #0
 80057ca:	4604      	mov	r4, r0
 80057cc:	4608      	mov	r0, r1
 80057ce:	602b      	str	r3, [r5, #0]
 80057d0:	f000 f848 	bl	8005864 <_isatty>
 80057d4:	1c43      	adds	r3, r0, #1
 80057d6:	d102      	bne.n	80057de <_isatty_r+0x1a>
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	b103      	cbz	r3, 80057de <_isatty_r+0x1a>
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	bd38      	pop	{r3, r4, r5, pc}
 80057e0:	20004810 	.word	0x20004810

080057e4 <_lseek_r>:
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	4d07      	ldr	r5, [pc, #28]	; (8005804 <_lseek_r+0x20>)
 80057e8:	4604      	mov	r4, r0
 80057ea:	4608      	mov	r0, r1
 80057ec:	4611      	mov	r1, r2
 80057ee:	2200      	movs	r2, #0
 80057f0:	602a      	str	r2, [r5, #0]
 80057f2:	461a      	mov	r2, r3
 80057f4:	f000 f83e 	bl	8005874 <_lseek>
 80057f8:	1c43      	adds	r3, r0, #1
 80057fa:	d102      	bne.n	8005802 <_lseek_r+0x1e>
 80057fc:	682b      	ldr	r3, [r5, #0]
 80057fe:	b103      	cbz	r3, 8005802 <_lseek_r+0x1e>
 8005800:	6023      	str	r3, [r4, #0]
 8005802:	bd38      	pop	{r3, r4, r5, pc}
 8005804:	20004810 	.word	0x20004810

08005808 <__malloc_lock>:
 8005808:	4801      	ldr	r0, [pc, #4]	; (8005810 <__malloc_lock+0x8>)
 800580a:	f7ff bb55 	b.w	8004eb8 <__retarget_lock_acquire_recursive>
 800580e:	bf00      	nop
 8005810:	20004808 	.word	0x20004808

08005814 <__malloc_unlock>:
 8005814:	4801      	ldr	r0, [pc, #4]	; (800581c <__malloc_unlock+0x8>)
 8005816:	f7ff bb50 	b.w	8004eba <__retarget_lock_release_recursive>
 800581a:	bf00      	nop
 800581c:	20004808 	.word	0x20004808

08005820 <_read_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4d07      	ldr	r5, [pc, #28]	; (8005840 <_read_r+0x20>)
 8005824:	4604      	mov	r4, r0
 8005826:	4608      	mov	r0, r1
 8005828:	4611      	mov	r1, r2
 800582a:	2200      	movs	r2, #0
 800582c:	602a      	str	r2, [r5, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	f7fe ffc8 	bl	80047c4 <_read>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d102      	bne.n	800583e <_read_r+0x1e>
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	b103      	cbz	r3, 800583e <_read_r+0x1e>
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	bd38      	pop	{r3, r4, r5, pc}
 8005840:	20004810 	.word	0x20004810

08005844 <_close>:
 8005844:	4b02      	ldr	r3, [pc, #8]	; (8005850 <_close+0xc>)
 8005846:	2258      	movs	r2, #88	; 0x58
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	f04f 30ff 	mov.w	r0, #4294967295
 800584e:	4770      	bx	lr
 8005850:	20004810 	.word	0x20004810

08005854 <_fstat>:
 8005854:	4b02      	ldr	r3, [pc, #8]	; (8005860 <_fstat+0xc>)
 8005856:	2258      	movs	r2, #88	; 0x58
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	f04f 30ff 	mov.w	r0, #4294967295
 800585e:	4770      	bx	lr
 8005860:	20004810 	.word	0x20004810

08005864 <_isatty>:
 8005864:	4b02      	ldr	r3, [pc, #8]	; (8005870 <_isatty+0xc>)
 8005866:	2258      	movs	r2, #88	; 0x58
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	2000      	movs	r0, #0
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	20004810 	.word	0x20004810

08005874 <_lseek>:
 8005874:	4b02      	ldr	r3, [pc, #8]	; (8005880 <_lseek+0xc>)
 8005876:	2258      	movs	r2, #88	; 0x58
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	f04f 30ff 	mov.w	r0, #4294967295
 800587e:	4770      	bx	lr
 8005880:	20004810 	.word	0x20004810

08005884 <_sbrk>:
 8005884:	4b04      	ldr	r3, [pc, #16]	; (8005898 <_sbrk+0x14>)
 8005886:	6819      	ldr	r1, [r3, #0]
 8005888:	4602      	mov	r2, r0
 800588a:	b909      	cbnz	r1, 8005890 <_sbrk+0xc>
 800588c:	4903      	ldr	r1, [pc, #12]	; (800589c <_sbrk+0x18>)
 800588e:	6019      	str	r1, [r3, #0]
 8005890:	6818      	ldr	r0, [r3, #0]
 8005892:	4402      	add	r2, r0
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	4770      	bx	lr
 8005898:	200002c4 	.word	0x200002c4
 800589c:	20004818 	.word	0x20004818

080058a0 <_init>:
 80058a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a2:	bf00      	nop
 80058a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a6:	bc08      	pop	{r3}
 80058a8:	469e      	mov	lr, r3
 80058aa:	4770      	bx	lr

080058ac <_fini>:
 80058ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ae:	bf00      	nop
 80058b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b2:	bc08      	pop	{r3}
 80058b4:	469e      	mov	lr, r3
 80058b6:	4770      	bx	lr
