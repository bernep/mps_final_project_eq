
mps_final_project_eq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb8c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004874  0800ed8c  0800ed8c  0001ed8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08013600  08013600  00023600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08013604  08013604  00023604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000124  20000000  08013608  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00058b20  20000128  0801372c  00030128  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20058c48  0801372c  00038c48  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00030124  2**0
                  CONTENTS, READONLY
  9 .debug_info   00065820  00000000  00000000  00030152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000094e7  00000000  00000000  00095972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0002e748  00000000  00000000  0009ee59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ae8  00000000  00000000  000cd5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000028d8  00000000  00000000  000d0090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b5ae  00000000  00000000  000d2968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00059ca9  00000000  00000000  0010df16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001397c4  00000000  00000000  00167bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002a1383  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008678  00000000  00000000  002a13d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         0000006c  00000000  00000000  002a9a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000e3  00000000  00000000  002a9abc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000128 	.word	0x20000128
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ed74 	.word	0x0800ed74

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000012c 	.word	0x2000012c
 800023c:	0800ed74 	.word	0x0800ed74

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <ft6x06_Reset>:
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 80002e0:	4770      	bx	lr

080002e2 <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 80002e2:	2000      	movs	r0, #0
 80002e4:	4770      	bx	lr

080002e6 <ft6x06_TS_ClearIT>:
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
  /* Nothing to be done here for FT6206 */
}
 80002e6:	4770      	bx	lr

080002e8 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 80002e8:	4603      	mov	r3, r0
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80002ea:	2000      	movs	r0, #0
 80002ec:	2801      	cmp	r0, #1
 80002ee:	d806      	bhi.n	80002fe <ft6x06_GetInstance+0x16>
  {
    if(ft6x06[idx] == DeviceAddr)
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <ft6x06_GetInstance+0x1c>)
 80002f2:	5c12      	ldrb	r2, [r2, r0]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d003      	beq.n	8000300 <ft6x06_GetInstance+0x18>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80002f8:	3001      	adds	r0, #1
 80002fa:	b2c0      	uxtb	r0, r0
 80002fc:	e7f6      	b.n	80002ec <ft6x06_GetInstance+0x4>
    {
      return idx; 
    }
  }
  
  return 0xFF;
 80002fe:	20ff      	movs	r0, #255	; 0xff
}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	20000144 	.word	0x20000144

08000308 <ft6x06_Init>:
{  
 8000308:	b510      	push	{r4, lr}
 800030a:	4604      	mov	r4, r0
  instance = ft6x06_GetInstance(DeviceAddr);
 800030c:	f7ff ffec 	bl	80002e8 <ft6x06_GetInstance>
  if(instance == 0xFF)
 8000310:	28ff      	cmp	r0, #255	; 0xff
 8000312:	d000      	beq.n	8000316 <ft6x06_Init+0xe>
}
 8000314:	bd10      	pop	{r4, pc}
    empty = ft6x06_GetInstance(0);
 8000316:	2000      	movs	r0, #0
 8000318:	f7ff ffe6 	bl	80002e8 <ft6x06_GetInstance>
    if(empty < FT6x06_MAX_INSTANCE)
 800031c:	2801      	cmp	r0, #1
 800031e:	d8f9      	bhi.n	8000314 <ft6x06_Init+0xc>
      ft6x06[empty] = DeviceAddr;
 8000320:	4b02      	ldr	r3, [pc, #8]	; (800032c <ft6x06_Init+0x24>)
 8000322:	541c      	strb	r4, [r3, r0]
      TS_IO_Init(); 
 8000324:	f001 f988 	bl	8001638 <TS_IO_Init>
}
 8000328:	e7f4      	b.n	8000314 <ft6x06_Init+0xc>
 800032a:	bf00      	nop
 800032c:	20000144 	.word	0x20000144

08000330 <ft6x06_ReadID>:
{
 8000330:	b510      	push	{r4, lr}
 8000332:	4604      	mov	r4, r0
  TS_IO_Init();
 8000334:	f001 f980 	bl	8001638 <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8000338:	21a8      	movs	r1, #168	; 0xa8
 800033a:	b2e0      	uxtb	r0, r4
 800033c:	f001 f998 	bl	8001670 <TS_IO_Read>
}
 8000340:	b280      	uxth	r0, r0
 8000342:	bd10      	pop	{r4, pc}

08000344 <ft6x06_TS_DetectTouch>:
{
 8000344:	b500      	push	{lr}
 8000346:	b083      	sub	sp, #12
  volatile uint8_t nbTouch = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	f88d 3007 	strb.w	r3, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 800034e:	2102      	movs	r1, #2
 8000350:	b2c0      	uxtb	r0, r0
 8000352:	f001 f98d 	bl	8001670 <TS_IO_Read>
 8000356:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 800035a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800035e:	f003 030f 	and.w	r3, r3, #15
 8000362:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8000366:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800036a:	b2db      	uxtb	r3, r3
 800036c:	2b02      	cmp	r3, #2
 800036e:	d902      	bls.n	8000376 <ft6x06_TS_DetectTouch+0x32>
    nbTouch = 0;
 8000370:	2300      	movs	r3, #0
 8000372:	f88d 3007 	strb.w	r3, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8000376:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800037a:	4b04      	ldr	r3, [pc, #16]	; (800038c <ft6x06_TS_DetectTouch+0x48>)
 800037c:	715a      	strb	r2, [r3, #5]
  ft6x06_handle.currActiveTouchIdx = 0;
 800037e:	2200      	movs	r2, #0
 8000380:	719a      	strb	r2, [r3, #6]
  return(nbTouch);
 8000382:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8000386:	b003      	add	sp, #12
 8000388:	f85d fb04 	ldr.w	pc, [sp], #4
 800038c:	20000144 	.word	0x20000144

08000390 <ft6x06_TS_GetXY>:
{
 8000390:	b530      	push	{r4, r5, lr}
 8000392:	b083      	sub	sp, #12
 8000394:	4614      	mov	r4, r2
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8000396:	4a16      	ldr	r2, [pc, #88]	; (80003f0 <ft6x06_TS_GetXY+0x60>)
 8000398:	7993      	ldrb	r3, [r2, #6]
 800039a:	7952      	ldrb	r2, [r2, #5]
 800039c:	4293      	cmp	r3, r2
 800039e:	d220      	bcs.n	80003e2 <ft6x06_TS_GetXY+0x52>
 80003a0:	460d      	mov	r5, r1
    switch(ft6x06_handle.currActiveTouchIdx)
 80003a2:	b303      	cbz	r3, 80003e6 <ft6x06_TS_GetXY+0x56>
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d120      	bne.n	80003ea <ft6x06_TS_GetXY+0x5a>
      regAddress = FT6206_P2_XH_REG; 
 80003a8:	2109      	movs	r1, #9
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 80003aa:	2304      	movs	r3, #4
 80003ac:	eb0d 0203 	add.w	r2, sp, r3
 80003b0:	b2c0      	uxtb	r0, r0
 80003b2:	f001 f973 	bl	800169c <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80003b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80003ba:	021b      	lsls	r3, r3, #8
 80003bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80003c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80003c4:	4313      	orrs	r3, r2
 80003c6:	802b      	strh	r3, [r5, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 80003c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80003cc:	021b      	lsls	r3, r3, #8
 80003ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80003d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80003d6:	4313      	orrs	r3, r2
 80003d8:	8023      	strh	r3, [r4, #0]
    ft6x06_handle.currActiveTouchIdx++;
 80003da:	4a05      	ldr	r2, [pc, #20]	; (80003f0 <ft6x06_TS_GetXY+0x60>)
 80003dc:	7993      	ldrb	r3, [r2, #6]
 80003de:	3301      	adds	r3, #1
 80003e0:	7193      	strb	r3, [r2, #6]
}
 80003e2:	b003      	add	sp, #12
 80003e4:	bd30      	pop	{r4, r5, pc}
      regAddress = FT6206_P1_XH_REG; 
 80003e6:	2103      	movs	r1, #3
 80003e8:	e7df      	b.n	80003aa <ft6x06_TS_GetXY+0x1a>
    switch(ft6x06_handle.currActiveTouchIdx)
 80003ea:	2100      	movs	r1, #0
 80003ec:	e7dd      	b.n	80003aa <ft6x06_TS_GetXY+0x1a>
 80003ee:	bf00      	nop
 80003f0:	20000144 	.word	0x20000144

080003f4 <ft6x06_TS_EnableIT>:
{
 80003f4:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80003f6:	2201      	movs	r2, #1
 80003f8:	21a4      	movs	r1, #164	; 0xa4
 80003fa:	b2c0      	uxtb	r0, r0
 80003fc:	f001 f924 	bl	8001648 <TS_IO_Write>
}
 8000400:	bd08      	pop	{r3, pc}

08000402 <ft6x06_TS_DisableIT>:
{
 8000402:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000404:	2200      	movs	r2, #0
 8000406:	21a4      	movs	r1, #164	; 0xa4
 8000408:	b2c0      	uxtb	r0, r0
 800040a:	f001 f91d 	bl	8001648 <TS_IO_Write>
}
 800040e:	bd08      	pop	{r3, pc}

08000410 <ft6x06_TS_Start>:
{
 8000410:	b508      	push	{r3, lr}
  ft6x06_TS_DisableIT(DeviceAddr);
 8000412:	f7ff fff6 	bl	8000402 <ft6x06_TS_DisableIT>
}
 8000416:	bd08      	pop	{r3, pc}

08000418 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800041c:	b083      	sub	sp, #12
 800041e:	9000      	str	r0, [sp, #0]
 8000420:	9101      	str	r1, [sp, #4]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000422:	4cf5      	ldr	r4, [pc, #980]	; (80007f8 <OTM8009A_Init+0x3e0>)
 8000424:	4621      	mov	r1, r4
 8000426:	2000      	movs	r0, #0
 8000428:	f001 fbc0 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 800042c:	1d21      	adds	r1, r4, #4
 800042e:	2003      	movs	r0, #3
 8000430:	f001 fbbc 	bl	8001bac <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8000434:	f104 0508 	add.w	r5, r4, #8
 8000438:	4629      	mov	r1, r5
 800043a:	2000      	movs	r0, #0
 800043c:	f001 fbb6 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000440:	f104 010c 	add.w	r1, r4, #12
 8000444:	2002      	movs	r0, #2
 8000446:	f001 fbb1 	bl	8001bac <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800044a:	4629      	mov	r1, r5
 800044c:	2000      	movs	r0, #0
 800044e:	f001 fbad 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000452:	f104 0110 	add.w	r1, r4, #16
 8000456:	2000      	movs	r0, #0
 8000458:	f001 fba8 	bl	8001bac <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800045c:	200a      	movs	r0, #10
 800045e:	f001 f92d 	bl	80016bc <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000462:	f104 0114 	add.w	r1, r4, #20
 8000466:	2000      	movs	r0, #0
 8000468:	f001 fba0 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 800046c:	f104 0118 	add.w	r1, r4, #24
 8000470:	2000      	movs	r0, #0
 8000472:	f001 fb9b 	bl	8001bac <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000476:	200a      	movs	r0, #10
 8000478:	f001 f920 	bl	80016bc <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 800047c:	f104 011c 	add.w	r1, r4, #28
 8000480:	2000      	movs	r0, #0
 8000482:	f001 fb93 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8000486:	f104 0120 	add.w	r1, r4, #32
 800048a:	2000      	movs	r0, #0
 800048c:	f001 fb8e 	bl	8001bac <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8000490:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8000494:	2000      	movs	r0, #0
 8000496:	f001 fb89 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800049a:	f104 0828 	add.w	r8, r4, #40	; 0x28
 800049e:	4641      	mov	r1, r8
 80004a0:	2000      	movs	r0, #0
 80004a2:	f001 fb83 	bl	8001bac <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80004a6:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80004aa:	2000      	movs	r0, #0
 80004ac:	f001 fb7e 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80004b0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80004b4:	2000      	movs	r0, #0
 80004b6:	f001 fb79 	bl	8001bac <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80004ba:	4621      	mov	r1, r4
 80004bc:	2000      	movs	r0, #0
 80004be:	f001 fb75 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80004c2:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80004c6:	2000      	movs	r0, #0
 80004c8:	f001 fb70 	bl	8001bac <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80004cc:	f104 0638 	add.w	r6, r4, #56	; 0x38
 80004d0:	4631      	mov	r1, r6
 80004d2:	2000      	movs	r0, #0
 80004d4:	f001 fb6a 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80004d8:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80004dc:	2000      	movs	r0, #0
 80004de:	f001 fb65 	bl	8001bac <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80004e2:	f104 0740 	add.w	r7, r4, #64	; 0x40
 80004e6:	4639      	mov	r1, r7
 80004e8:	2000      	movs	r0, #0
 80004ea:	f001 fb5f 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80004ee:	f104 0144 	add.w	r1, r4, #68	; 0x44
 80004f2:	2000      	movs	r0, #0
 80004f4:	f001 fb5a 	bl	8001bac <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80004f8:	f104 0148 	add.w	r1, r4, #72	; 0x48
 80004fc:	2000      	movs	r0, #0
 80004fe:	f001 fb55 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8000502:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8000506:	2000      	movs	r0, #0
 8000508:	f001 fb50 	bl	8001bac <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 800050c:	f104 0150 	add.w	r1, r4, #80	; 0x50
 8000510:	2000      	movs	r0, #0
 8000512:	f001 fb4b 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000516:	4641      	mov	r1, r8
 8000518:	2000      	movs	r0, #0
 800051a:	f001 fb47 	bl	8001bac <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800051e:	4621      	mov	r1, r4
 8000520:	2000      	movs	r0, #0
 8000522:	f001 fb43 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8000526:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800052a:	2002      	movs	r0, #2
 800052c:	f001 fb3e 	bl	8001bac <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000530:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8000534:	2000      	movs	r0, #0
 8000536:	f001 fb39 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800053a:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 800053e:	2000      	movs	r0, #0
 8000540:	f001 fb34 	bl	8001bac <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000544:	f104 0160 	add.w	r1, r4, #96	; 0x60
 8000548:	2000      	movs	r0, #0
 800054a:	f001 fb2f 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800054e:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8000552:	2000      	movs	r0, #0
 8000554:	f001 fb2a 	bl	8001bac <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000558:	f104 0168 	add.w	r1, r4, #104	; 0x68
 800055c:	2000      	movs	r0, #0
 800055e:	f001 fb25 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8000562:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8000566:	2000      	movs	r0, #0
 8000568:	f001 fb20 	bl	8001bac <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800056c:	4631      	mov	r1, r6
 800056e:	2000      	movs	r0, #0
 8000570:	f001 fb1c 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8000574:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8000578:	2000      	movs	r0, #0
 800057a:	f001 fb17 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800057e:	4639      	mov	r1, r7
 8000580:	2000      	movs	r0, #0
 8000582:	f001 fb13 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8000586:	f104 0174 	add.w	r1, r4, #116	; 0x74
 800058a:	2000      	movs	r0, #0
 800058c:	f001 fb0e 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000590:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8000594:	2000      	movs	r0, #0
 8000596:	f001 fb09 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800059a:	f104 017c 	add.w	r1, r4, #124	; 0x7c
 800059e:	2002      	movs	r0, #2
 80005a0:	f001 fb04 	bl	8001bac <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80005a4:	4629      	mov	r1, r5
 80005a6:	2000      	movs	r0, #0
 80005a8:	f001 fb00 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80005ac:	f104 0180 	add.w	r1, r4, #128	; 0x80
 80005b0:	2006      	movs	r0, #6
 80005b2:	f001 fafb 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80005b6:	f104 0a88 	add.w	sl, r4, #136	; 0x88
 80005ba:	4651      	mov	r1, sl
 80005bc:	2000      	movs	r0, #0
 80005be:	f001 faf5 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80005c2:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 80005c6:	200e      	movs	r0, #14
 80005c8:	f001 faf0 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80005cc:	f104 099c 	add.w	r9, r4, #156	; 0x9c
 80005d0:	4649      	mov	r1, r9
 80005d2:	2000      	movs	r0, #0
 80005d4:	f001 faea 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80005d8:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 80005dc:	200e      	movs	r0, #14
 80005de:	f001 fae5 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80005e2:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
 80005e6:	4641      	mov	r1, r8
 80005e8:	2000      	movs	r0, #0
 80005ea:	f001 fadf 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80005ee:	f104 01b4 	add.w	r1, r4, #180	; 0xb4
 80005f2:	200a      	movs	r0, #10
 80005f4:	f001 fada 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80005f8:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
 80005fc:	4639      	mov	r1, r7
 80005fe:	2000      	movs	r0, #0
 8000600:	f001 fad4 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8000604:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 8000608:	2000      	movs	r0, #0
 800060a:	f001 facf 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800060e:	4629      	mov	r1, r5
 8000610:	2000      	movs	r0, #0
 8000612:	f001 facb 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8000616:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 800061a:	200a      	movs	r0, #10
 800061c:	f001 fac6 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000620:	f104 0bd4 	add.w	fp, r4, #212	; 0xd4
 8000624:	4659      	mov	r1, fp
 8000626:	2000      	movs	r0, #0
 8000628:	f001 fac0 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 800062c:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
 8000630:	200f      	movs	r0, #15
 8000632:	f001 fabb 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000636:	4651      	mov	r1, sl
 8000638:	2000      	movs	r0, #0
 800063a:	f001 fab7 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 800063e:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
 8000642:	200f      	movs	r0, #15
 8000644:	f001 fab2 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000648:	4649      	mov	r1, r9
 800064a:	2000      	movs	r0, #0
 800064c:	f001 faae 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000650:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 8000654:	200a      	movs	r0, #10
 8000656:	f001 faa9 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800065a:	4641      	mov	r1, r8
 800065c:	2000      	movs	r0, #0
 800065e:	f001 faa5 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000662:	f504 7182 	add.w	r1, r4, #260	; 0x104
 8000666:	200f      	movs	r0, #15
 8000668:	f001 faa0 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800066c:	4639      	mov	r1, r7
 800066e:	2000      	movs	r0, #0
 8000670:	f001 fa9c 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000674:	f504 718a 	add.w	r1, r4, #276	; 0x114
 8000678:	200f      	movs	r0, #15
 800067a:	f001 fa97 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 800067e:	f504 7192 	add.w	r1, r4, #292	; 0x124
 8000682:	2000      	movs	r0, #0
 8000684:	f001 fa92 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000688:	f504 7194 	add.w	r1, r4, #296	; 0x128
 800068c:	200a      	movs	r0, #10
 800068e:	f001 fa8d 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000692:	f504 719a 	add.w	r1, r4, #308	; 0x134
 8000696:	2000      	movs	r0, #0
 8000698:	f001 fa88 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 800069c:	f504 719c 	add.w	r1, r4, #312	; 0x138
 80006a0:	200a      	movs	r0, #10
 80006a2:	f001 fa83 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80006a6:	4629      	mov	r1, r5
 80006a8:	2000      	movs	r0, #0
 80006aa:	f001 fa7f 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 80006ae:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 80006b2:	200a      	movs	r0, #10
 80006b4:	f001 fa7a 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80006b8:	4659      	mov	r1, fp
 80006ba:	2000      	movs	r0, #0
 80006bc:	f001 fa76 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 80006c0:	f504 71a8 	add.w	r1, r4, #336	; 0x150
 80006c4:	200f      	movs	r0, #15
 80006c6:	f001 fa71 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80006ca:	4651      	mov	r1, sl
 80006cc:	2000      	movs	r0, #0
 80006ce:	f001 fa6d 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 80006d2:	f504 71b0 	add.w	r1, r4, #352	; 0x160
 80006d6:	200f      	movs	r0, #15
 80006d8:	f001 fa68 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80006dc:	4649      	mov	r1, r9
 80006de:	2000      	movs	r0, #0
 80006e0:	f001 fa64 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 80006e4:	f504 71b8 	add.w	r1, r4, #368	; 0x170
 80006e8:	200a      	movs	r0, #10
 80006ea:	f001 fa5f 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80006ee:	4641      	mov	r1, r8
 80006f0:	2000      	movs	r0, #0
 80006f2:	f001 fa5b 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 80006f6:	f504 71be 	add.w	r1, r4, #380	; 0x17c
 80006fa:	200f      	movs	r0, #15
 80006fc:	f001 fa56 	bl	8001bac <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000700:	4639      	mov	r1, r7
 8000702:	2000      	movs	r0, #0
 8000704:	f001 fa52 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000708:	f504 71c6 	add.w	r1, r4, #396	; 0x18c
 800070c:	200f      	movs	r0, #15
 800070e:	f001 fa4d 	bl	8001bac <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000712:	4631      	mov	r1, r6
 8000714:	2000      	movs	r0, #0
 8000716:	f001 fa49 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 800071a:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
 800071e:	2000      	movs	r0, #0
 8000720:	f001 fa44 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000724:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
 8000728:	2000      	movs	r0, #0
 800072a:	f001 fa3f 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 800072e:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
 8000732:	2000      	movs	r0, #0
 8000734:	f001 fa3a 	bl	8001bac <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000738:	4621      	mov	r1, r4
 800073a:	2000      	movs	r0, #0
 800073c:	f001 fa36 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000740:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
 8000744:	2003      	movs	r0, #3
 8000746:	f001 fa31 	bl	8001bac <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800074a:	4621      	mov	r1, r4
 800074c:	2000      	movs	r0, #0
 800074e:	f001 fa2d 	bl	8001bac <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000752:	4621      	mov	r1, r4
 8000754:	2000      	movs	r0, #0
 8000756:	f001 fa29 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 800075a:	f504 71d6 	add.w	r1, r4, #428	; 0x1ac
 800075e:	2010      	movs	r0, #16
 8000760:	f001 fa24 	bl	8001bac <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000764:	4621      	mov	r1, r4
 8000766:	2000      	movs	r0, #0
 8000768:	f001 fa20 	bl	8001bac <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 800076c:	f504 71e0 	add.w	r1, r4, #448	; 0x1c0
 8000770:	2010      	movs	r0, #16
 8000772:	f001 fa1b 	bl	8001bac <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000776:	f504 71ea 	add.w	r1, r4, #468	; 0x1d4
 800077a:	2000      	movs	r0, #0
 800077c:	f001 fa16 	bl	8001bac <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000780:	2078      	movs	r0, #120	; 0x78
 8000782:	f000 ff9b 	bl	80016bc <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000786:	9b00      	ldr	r3, [sp, #0]
 8000788:	b383      	cbz	r3, 80007ec <OTM8009A_Init+0x3d4>
 800078a:	2b02      	cmp	r3, #2
 800078c:	d104      	bne.n	8000798 <OTM8009A_Init+0x380>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 800078e:	f504 71ec 	add.w	r1, r4, #472	; 0x1d8
 8000792:	2000      	movs	r0, #0
 8000794:	f001 fa0a 	bl	8001bac <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000798:	9b01      	ldr	r3, [sp, #4]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d030      	beq.n	8000800 <OTM8009A_Init+0x3e8>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 800079e:	4c16      	ldr	r4, [pc, #88]	; (80007f8 <OTM8009A_Init+0x3e0>)
 80007a0:	f504 71fa 	add.w	r1, r4, #500	; 0x1f4
 80007a4:	2000      	movs	r0, #0
 80007a6:	f001 fa01 	bl	8001bac <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 80007aa:	f504 71fc 	add.w	r1, r4, #504	; 0x1f8
 80007ae:	2000      	movs	r0, #0
 80007b0:	f001 f9fc 	bl	8001bac <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 80007b4:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
 80007b8:	2000      	movs	r0, #0
 80007ba:	f001 f9f7 	bl	8001bac <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 80007be:	f504 7100 	add.w	r1, r4, #512	; 0x200
 80007c2:	2000      	movs	r0, #0
 80007c4:	f001 f9f2 	bl	8001bac <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 80007c8:	f504 7101 	add.w	r1, r4, #516	; 0x204
 80007cc:	2000      	movs	r0, #0
 80007ce:	f001 f9ed 	bl	8001bac <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80007d2:	4621      	mov	r1, r4
 80007d4:	2000      	movs	r0, #0
 80007d6:	f001 f9e9 	bl	8001bac <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 80007da:	f504 7102 	add.w	r1, r4, #520	; 0x208
 80007de:	2000      	movs	r0, #0
 80007e0:	f001 f9e4 	bl	8001bac <DSI_IO_WriteCmd>

  return 0;
}
 80007e4:	2000      	movs	r0, #0
 80007e6:	b003      	add	sp, #12
 80007e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 80007ec:	4903      	ldr	r1, [pc, #12]	; (80007fc <OTM8009A_Init+0x3e4>)
 80007ee:	2000      	movs	r0, #0
 80007f0:	f001 f9dc 	bl	8001bac <DSI_IO_WriteCmd>
    break;
 80007f4:	e7d0      	b.n	8000798 <OTM8009A_Init+0x380>
 80007f6:	bf00      	nop
 80007f8:	0800ed8c 	.word	0x0800ed8c
 80007fc:	0800ef68 	.word	0x0800ef68
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000800:	4c08      	ldr	r4, [pc, #32]	; (8000824 <OTM8009A_Init+0x40c>)
 8000802:	f504 71f0 	add.w	r1, r4, #480	; 0x1e0
 8000806:	2000      	movs	r0, #0
 8000808:	f001 f9d0 	bl	8001bac <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 800080c:	f504 71f2 	add.w	r1, r4, #484	; 0x1e4
 8000810:	2004      	movs	r0, #4
 8000812:	f001 f9cb 	bl	8001bac <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000816:	f504 71f6 	add.w	r1, r4, #492	; 0x1ec
 800081a:	2004      	movs	r0, #4
 800081c:	f001 f9c6 	bl	8001bac <DSI_IO_WriteCmd>
 8000820:	e7bd      	b.n	800079e <OTM8009A_Init+0x386>
 8000822:	bf00      	nop
 8000824:	0800ed8c 	.word	0x0800ed8c

08000828 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8000828:	b508      	push	{r3, lr}
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800082a:	f000 fecd 	bl	80015c8 <AUDIO_IO_Write>
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
}
 800082e:	2000      	movs	r0, #0
 8000830:	bd08      	pop	{r3, pc}
	...

08000834 <wm8994_SetMute>:
{
 8000834:	b538      	push	{r3, r4, r5, lr}
 8000836:	4603      	mov	r3, r0
  if (outputEnabled != 0)
 8000838:	4a13      	ldr	r2, [pc, #76]	; (8000888 <wm8994_SetMute+0x54>)
 800083a:	6810      	ldr	r0, [r2, #0]
 800083c:	b180      	cbz	r0, 8000860 <wm8994_SetMute+0x2c>
    if(Cmd == AUDIO_MUTE_ON)
 800083e:	2901      	cmp	r1, #1
 8000840:	d00f      	beq.n	8000862 <wm8994_SetMute+0x2e>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8000842:	b2dd      	uxtb	r5, r3
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800084a:	4628      	mov	r0, r5
 800084c:	f7ff ffec 	bl	8000828 <CODEC_IO_Write>
 8000850:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8000852:	2200      	movs	r2, #0
 8000854:	f240 4122 	movw	r1, #1058	; 0x422
 8000858:	4628      	mov	r0, r5
 800085a:	f7ff ffe5 	bl	8000828 <CODEC_IO_Write>
 800085e:	4420      	add	r0, r4
}
 8000860:	bd38      	pop	{r3, r4, r5, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8000862:	b2dd      	uxtb	r5, r3
 8000864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000868:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800086c:	4628      	mov	r0, r5
 800086e:	f7ff ffdb 	bl	8000828 <CODEC_IO_Write>
 8000872:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8000874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000878:	f240 4122 	movw	r1, #1058	; 0x422
 800087c:	4628      	mov	r0, r5
 800087e:	f7ff ffd3 	bl	8000828 <CODEC_IO_Write>
 8000882:	4420      	add	r0, r4
 8000884:	e7ec      	b.n	8000860 <wm8994_SetMute+0x2c>
 8000886:	bf00      	nop
 8000888:	2000014c 	.word	0x2000014c

0800088c <wm8994_Play>:
{
 800088c:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800088e:	2100      	movs	r1, #0
 8000890:	f7ff ffd0 	bl	8000834 <wm8994_SetMute>
}
 8000894:	bd08      	pop	{r3, pc}

08000896 <wm8994_Resume>:
{
 8000896:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000898:	2100      	movs	r1, #0
 800089a:	f7ff ffcb 	bl	8000834 <wm8994_SetMute>
}
 800089e:	bd08      	pop	{r3, pc}

080008a0 <wm8994_Pause>:
{  
 80008a0:	b538      	push	{r3, r4, r5, lr}
 80008a2:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80008a4:	2101      	movs	r1, #1
 80008a6:	f7ff ffc5 	bl	8000834 <wm8994_SetMute>
 80008aa:	4604      	mov	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2102      	movs	r1, #2
 80008b0:	b2e8      	uxtb	r0, r5
 80008b2:	f7ff ffb9 	bl	8000828 <CODEC_IO_Write>
}
 80008b6:	4420      	add	r0, r4
 80008b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080008bc <wm8994_Stop>:
{
 80008bc:	b570      	push	{r4, r5, r6, lr}
  if (outputEnabled != 0)
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <wm8994_Stop+0x78>)
 80008c0:	681c      	ldr	r4, [r3, #0]
 80008c2:	b90c      	cbnz	r4, 80008c8 <wm8994_Stop+0xc>
}
 80008c4:	4620      	mov	r0, r4
 80008c6:	bd70      	pop	{r4, r5, r6, pc}
 80008c8:	4605      	mov	r5, r0
 80008ca:	460e      	mov	r6, r1
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80008cc:	2101      	movs	r1, #1
 80008ce:	f7ff ffb1 	bl	8000834 <wm8994_SetMute>
 80008d2:	4604      	mov	r4, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 80008d4:	2e02      	cmp	r6, #2
 80008d6:	d0f5      	beq.n	80008c4 <wm8994_Stop+0x8>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80008d8:	b2ed      	uxtb	r5, r5
 80008da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008de:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80008e2:	4628      	mov	r0, r5
 80008e4:	f7ff ffa0 	bl	8000828 <CODEC_IO_Write>
 80008e8:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80008ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ee:	f240 4122 	movw	r1, #1058	; 0x422
 80008f2:	4628      	mov	r0, r5
 80008f4:	f7ff ff98 	bl	8000828 <CODEC_IO_Write>
 80008f8:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80008fa:	2200      	movs	r2, #0
 80008fc:	212d      	movs	r1, #45	; 0x2d
 80008fe:	4628      	mov	r0, r5
 8000900:	f7ff ff92 	bl	8000828 <CODEC_IO_Write>
 8000904:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8000906:	2200      	movs	r2, #0
 8000908:	212e      	movs	r1, #46	; 0x2e
 800090a:	4628      	mov	r0, r5
 800090c:	f7ff ff8c 	bl	8000828 <CODEC_IO_Write>
 8000910:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8000912:	2200      	movs	r2, #0
 8000914:	2105      	movs	r1, #5
 8000916:	4628      	mov	r0, r5
 8000918:	f7ff ff86 	bl	8000828 <CODEC_IO_Write>
 800091c:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800091e:	2200      	movs	r2, #0
 8000920:	4611      	mov	r1, r2
 8000922:	4628      	mov	r0, r5
 8000924:	f7ff ff80 	bl	8000828 <CODEC_IO_Write>
 8000928:	4404      	add	r4, r0
      outputEnabled = 0;
 800092a:	4b02      	ldr	r3, [pc, #8]	; (8000934 <wm8994_Stop+0x78>)
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
  return counter;
 8000930:	e7c8      	b.n	80008c4 <wm8994_Stop+0x8>
 8000932:	bf00      	nop
 8000934:	2000014c 	.word	0x2000014c

08000938 <wm8994_SetVolume>:
{
 8000938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800093c:	4606      	mov	r6, r0
 800093e:	460c      	mov	r4, r1
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000940:	2964      	cmp	r1, #100	; 0x64
 8000942:	d809      	bhi.n	8000958 <wm8994_SetVolume+0x20>
 8000944:	ebc1 1381 	rsb	r3, r1, r1, lsl #6
 8000948:	4a46      	ldr	r2, [pc, #280]	; (8000a64 <wm8994_SetVolume+0x12c>)
 800094a:	fb82 1203 	smull	r1, r2, r2, r3
 800094e:	17df      	asrs	r7, r3, #31
 8000950:	ebc7 1762 	rsb	r7, r7, r2, asr #5
 8000954:	b2ff      	uxtb	r7, r7
 8000956:	e000      	b.n	800095a <wm8994_SetVolume+0x22>
 8000958:	2764      	movs	r7, #100	; 0x64
  if (outputEnabled != 0)
 800095a:	4b43      	ldr	r3, [pc, #268]	; (8000a68 <wm8994_SetVolume+0x130>)
 800095c:	681d      	ldr	r5, [r3, #0]
 800095e:	b13d      	cbz	r5, 8000970 <wm8994_SetVolume+0x38>
    if(convertedvol > 0x3E)
 8000960:	2f3e      	cmp	r7, #62	; 0x3e
 8000962:	d816      	bhi.n	8000992 <wm8994_SetVolume+0x5a>
    else if (Volume == 0)
 8000964:	bbc4      	cbnz	r4, 80009d8 <wm8994_SetVolume+0xa0>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000966:	2101      	movs	r1, #1
 8000968:	4630      	mov	r0, r6
 800096a:	f7ff ff63 	bl	8000834 <wm8994_SetMute>
 800096e:	4605      	mov	r5, r0
  if (inputEnabled != 0)
 8000970:	4b3d      	ldr	r3, [pc, #244]	; (8000a68 <wm8994_SetVolume+0x130>)
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d071      	beq.n	8000a5c <wm8994_SetVolume+0x124>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8000978:	2c63      	cmp	r4, #99	; 0x63
 800097a:	d84f      	bhi.n	8000a1c <wm8994_SetVolume+0xe4>
 800097c:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8000980:	0124      	lsls	r4, r4, #4
 8000982:	4b38      	ldr	r3, [pc, #224]	; (8000a64 <wm8994_SetVolume+0x12c>)
 8000984:	fb83 2304 	smull	r2, r3, r3, r4
 8000988:	17e4      	asrs	r4, r4, #31
 800098a:	ebc4 1463 	rsb	r4, r4, r3, asr #5
 800098e:	b2e4      	uxtb	r4, r4
 8000990:	e045      	b.n	8000a1e <wm8994_SetVolume+0xe6>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000992:	2100      	movs	r1, #0
 8000994:	4630      	mov	r0, r6
 8000996:	f7ff ff4d 	bl	8000834 <wm8994_SetMute>
 800099a:	4605      	mov	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 800099c:	b2f7      	uxtb	r7, r6
 800099e:	f240 127f 	movw	r2, #383	; 0x17f
 80009a2:	211c      	movs	r1, #28
 80009a4:	4638      	mov	r0, r7
 80009a6:	f7ff ff3f 	bl	8000828 <CODEC_IO_Write>
 80009aa:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80009ac:	f240 127f 	movw	r2, #383	; 0x17f
 80009b0:	211d      	movs	r1, #29
 80009b2:	4638      	mov	r0, r7
 80009b4:	f7ff ff38 	bl	8000828 <CODEC_IO_Write>
 80009b8:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80009ba:	f240 127f 	movw	r2, #383	; 0x17f
 80009be:	2126      	movs	r1, #38	; 0x26
 80009c0:	4638      	mov	r0, r7
 80009c2:	f7ff ff31 	bl	8000828 <CODEC_IO_Write>
 80009c6:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80009c8:	f240 127f 	movw	r2, #383	; 0x17f
 80009cc:	2127      	movs	r1, #39	; 0x27
 80009ce:	4638      	mov	r0, r7
 80009d0:	f7ff ff2a 	bl	8000828 <CODEC_IO_Write>
 80009d4:	4405      	add	r5, r0
 80009d6:	e7cb      	b.n	8000970 <wm8994_SetVolume+0x38>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80009d8:	2100      	movs	r1, #0
 80009da:	4630      	mov	r0, r6
 80009dc:	f7ff ff2a 	bl	8000834 <wm8994_SetMute>
 80009e0:	4605      	mov	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80009e2:	fa5f f886 	uxtb.w	r8, r6
 80009e6:	f447 77a0 	orr.w	r7, r7, #320	; 0x140
 80009ea:	463a      	mov	r2, r7
 80009ec:	211c      	movs	r1, #28
 80009ee:	4640      	mov	r0, r8
 80009f0:	f7ff ff1a 	bl	8000828 <CODEC_IO_Write>
 80009f4:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80009f6:	463a      	mov	r2, r7
 80009f8:	211d      	movs	r1, #29
 80009fa:	4640      	mov	r0, r8
 80009fc:	f7ff ff14 	bl	8000828 <CODEC_IO_Write>
 8000a00:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8000a02:	463a      	mov	r2, r7
 8000a04:	2126      	movs	r1, #38	; 0x26
 8000a06:	4640      	mov	r0, r8
 8000a08:	f7ff ff0e 	bl	8000828 <CODEC_IO_Write>
 8000a0c:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8000a0e:	463a      	mov	r2, r7
 8000a10:	2127      	movs	r1, #39	; 0x27
 8000a12:	4640      	mov	r0, r8
 8000a14:	f7ff ff08 	bl	8000828 <CODEC_IO_Write>
 8000a18:	4405      	add	r5, r0
 8000a1a:	e7a9      	b.n	8000970 <wm8994_SetVolume+0x38>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8000a1c:	24ef      	movs	r4, #239	; 0xef
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8000a1e:	b2f6      	uxtb	r6, r6
 8000a20:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8000a24:	4622      	mov	r2, r4
 8000a26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2a:	4630      	mov	r0, r6
 8000a2c:	f7ff fefc 	bl	8000828 <CODEC_IO_Write>
 8000a30:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8000a32:	4622      	mov	r2, r4
 8000a34:	f240 4101 	movw	r1, #1025	; 0x401
 8000a38:	4630      	mov	r0, r6
 8000a3a:	f7ff fef5 	bl	8000828 <CODEC_IO_Write>
 8000a3e:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8000a40:	4622      	mov	r2, r4
 8000a42:	f240 4104 	movw	r1, #1028	; 0x404
 8000a46:	4630      	mov	r0, r6
 8000a48:	f7ff feee 	bl	8000828 <CODEC_IO_Write>
 8000a4c:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8000a4e:	4622      	mov	r2, r4
 8000a50:	f240 4105 	movw	r1, #1029	; 0x405
 8000a54:	4630      	mov	r0, r6
 8000a56:	f7ff fee7 	bl	8000828 <CODEC_IO_Write>
 8000a5a:	4405      	add	r5, r0
}
 8000a5c:	4628      	mov	r0, r5
 8000a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a62:	bf00      	nop
 8000a64:	51eb851f 	.word	0x51eb851f
 8000a68:	2000014c 	.word	0x2000014c

08000a6c <wm8994_InitExt>:
{
 8000a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a70:	4681      	mov	r9, r0
 8000a72:	4692      	mov	sl, r2
 8000a74:	461e      	mov	r6, r3
  uint16_t output_device = OutputInputDevice & 0xFF;
 8000a76:	fa5f f881 	uxtb.w	r8, r1
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8000a7a:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
  AUDIO_IO_Init();
 8000a7e:	f000 fd99 	bl	80015b4 <AUDIO_IO_Init>
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8000a82:	fa5f f489 	uxtb.w	r4, r9
 8000a86:	2203      	movs	r2, #3
 8000a88:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	f7ff fecb 	bl	8000828 <CODEC_IO_Write>
 8000a92:	4607      	mov	r7, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f640 0117 	movw	r1, #2071	; 0x817
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	f7ff fec4 	bl	8000828 <CODEC_IO_Write>
 8000aa0:	4407      	add	r7, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000aa8:	4620      	mov	r0, r4
 8000aaa:	f7ff febd 	bl	8000828 <CODEC_IO_Write>
 8000aae:	4407      	add	r7, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8000ab0:	226c      	movs	r2, #108	; 0x6c
 8000ab2:	2139      	movs	r1, #57	; 0x39
 8000ab4:	4620      	mov	r0, r4
 8000ab6:	f7ff feb7 	bl	8000828 <CODEC_IO_Write>
 8000aba:	4407      	add	r7, r0
  if (input_device > 0)
 8000abc:	b3dd      	cbz	r5, 8000b36 <wm8994_InitExt+0xca>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8000abe:	2213      	movs	r2, #19
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	f7ff feb0 	bl	8000828 <CODEC_IO_Write>
 8000ac8:	4407      	add	r7, r0
  AUDIO_IO_Delay(50);
 8000aca:	2032      	movs	r0, #50	; 0x32
 8000acc:	f000 fdb0 	bl	8001630 <AUDIO_IO_Delay>
  if (output_device > 0)
 8000ad0:	f1b8 0f00 	cmp.w	r8, #0
 8000ad4:	f000 80c9 	beq.w	8000c6a <wm8994_InitExt+0x1fe>
    outputEnabled = 1;
 8000ad8:	4be8      	ldr	r3, [pc, #928]	; (8000e7c <wm8994_InitExt+0x410>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8000ade:	f1b8 0f02 	cmp.w	r8, #2
 8000ae2:	d053      	beq.n	8000b8c <wm8994_InitExt+0x120>
 8000ae4:	f1b8 0f03 	cmp.w	r8, #3
 8000ae8:	d074      	beq.n	8000bd4 <wm8994_InitExt+0x168>
 8000aea:	4590      	cmp	r8, r2
 8000aec:	d02a      	beq.n	8000b44 <wm8994_InitExt+0xd8>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000aee:	f240 3203 	movw	r2, #771	; 0x303
 8000af2:	2105      	movs	r1, #5
 8000af4:	4620      	mov	r0, r4
 8000af6:	f7ff fe97 	bl	8000828 <CODEC_IO_Write>
 8000afa:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000afc:	2201      	movs	r2, #1
 8000afe:	f240 6101 	movw	r1, #1537	; 0x601
 8000b02:	4620      	mov	r0, r4
 8000b04:	f7ff fe90 	bl	8000828 <CODEC_IO_Write>
 8000b08:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f240 6102 	movw	r1, #1538	; 0x602
 8000b10:	4620      	mov	r0, r4
 8000b12:	f7ff fe89 	bl	8000828 <CODEC_IO_Write>
 8000b16:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f240 6104 	movw	r1, #1540	; 0x604
 8000b1e:	4620      	mov	r0, r4
 8000b20:	f7ff fe82 	bl	8000828 <CODEC_IO_Write>
 8000b24:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f240 6105 	movw	r1, #1541	; 0x605
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	f7ff fe7b 	bl	8000828 <CODEC_IO_Write>
 8000b32:	4407      	add	r7, r0
      break;
 8000b34:	e09c      	b.n	8000c70 <wm8994_InitExt+0x204>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8000b36:	2203      	movs	r2, #3
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	f7ff fe74 	bl	8000828 <CODEC_IO_Write>
 8000b40:	4407      	add	r7, r0
 8000b42:	e7c2      	b.n	8000aca <wm8994_InitExt+0x5e>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8000b44:	f640 420c 	movw	r2, #3084	; 0xc0c
 8000b48:	2105      	movs	r1, #5
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	f7ff fe6c 	bl	8000828 <CODEC_IO_Write>
 8000b50:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f240 6101 	movw	r1, #1537	; 0x601
 8000b58:	4620      	mov	r0, r4
 8000b5a:	f7ff fe65 	bl	8000828 <CODEC_IO_Write>
 8000b5e:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f240 6102 	movw	r1, #1538	; 0x602
 8000b66:	4620      	mov	r0, r4
 8000b68:	f7ff fe5e 	bl	8000828 <CODEC_IO_Write>
 8000b6c:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000b6e:	2202      	movs	r2, #2
 8000b70:	f240 6104 	movw	r1, #1540	; 0x604
 8000b74:	4620      	mov	r0, r4
 8000b76:	f7ff fe57 	bl	8000828 <CODEC_IO_Write>
 8000b7a:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	f240 6105 	movw	r1, #1541	; 0x605
 8000b82:	4620      	mov	r0, r4
 8000b84:	f7ff fe50 	bl	8000828 <CODEC_IO_Write>
 8000b88:	4407      	add	r7, r0
      break;
 8000b8a:	e071      	b.n	8000c70 <wm8994_InitExt+0x204>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000b8c:	f240 3203 	movw	r2, #771	; 0x303
 8000b90:	2105      	movs	r1, #5
 8000b92:	4620      	mov	r0, r4
 8000b94:	f7ff fe48 	bl	8000828 <CODEC_IO_Write>
 8000b98:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f240 6101 	movw	r1, #1537	; 0x601
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	f7ff fe41 	bl	8000828 <CODEC_IO_Write>
 8000ba6:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f240 6102 	movw	r1, #1538	; 0x602
 8000bae:	4620      	mov	r0, r4
 8000bb0:	f7ff fe3a 	bl	8000828 <CODEC_IO_Write>
 8000bb4:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f240 6104 	movw	r1, #1540	; 0x604
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	f7ff fe33 	bl	8000828 <CODEC_IO_Write>
 8000bc2:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f240 6105 	movw	r1, #1541	; 0x605
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f7ff fe2c 	bl	8000828 <CODEC_IO_Write>
 8000bd0:	4407      	add	r7, r0
      break;
 8000bd2:	e04d      	b.n	8000c70 <wm8994_InitExt+0x204>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000bd4:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000bd8:	d023      	beq.n	8000c22 <wm8994_InitExt+0x1b6>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8000bda:	f640 720f 	movw	r2, #3855	; 0xf0f
 8000bde:	2105      	movs	r1, #5
 8000be0:	4620      	mov	r0, r4
 8000be2:	f7ff fe21 	bl	8000828 <CODEC_IO_Write>
 8000be6:	4407      	add	r7, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f240 6101 	movw	r1, #1537	; 0x601
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f7ff fe1a 	bl	8000828 <CODEC_IO_Write>
 8000bf4:	4407      	add	r7, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f240 6102 	movw	r1, #1538	; 0x602
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	f7ff fe13 	bl	8000828 <CODEC_IO_Write>
 8000c02:	4407      	add	r7, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000c04:	2202      	movs	r2, #2
 8000c06:	f240 6104 	movw	r1, #1540	; 0x604
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	f7ff fe0c 	bl	8000828 <CODEC_IO_Write>
 8000c10:	4407      	add	r7, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8000c12:	2202      	movs	r2, #2
 8000c14:	f240 6105 	movw	r1, #1541	; 0x605
 8000c18:	4620      	mov	r0, r4
 8000c1a:	f7ff fe05 	bl	8000828 <CODEC_IO_Write>
 8000c1e:	4407      	add	r7, r0
 8000c20:	e026      	b.n	8000c70 <wm8994_InitExt+0x204>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8000c22:	f640 720f 	movw	r2, #3855	; 0xf0f
 8000c26:	2105      	movs	r1, #5
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f7ff fdfd 	bl	8000828 <CODEC_IO_Write>
 8000c2e:	4407      	add	r7, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8000c30:	2203      	movs	r2, #3
 8000c32:	f240 6101 	movw	r1, #1537	; 0x601
 8000c36:	4620      	mov	r0, r4
 8000c38:	f7ff fdf6 	bl	8000828 <CODEC_IO_Write>
 8000c3c:	4407      	add	r7, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8000c3e:	2203      	movs	r2, #3
 8000c40:	f240 6102 	movw	r1, #1538	; 0x602
 8000c44:	4620      	mov	r0, r4
 8000c46:	f7ff fdef 	bl	8000828 <CODEC_IO_Write>
 8000c4a:	4407      	add	r7, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	f240 6104 	movw	r1, #1540	; 0x604
 8000c52:	4620      	mov	r0, r4
 8000c54:	f7ff fde8 	bl	8000828 <CODEC_IO_Write>
 8000c58:	4407      	add	r7, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	f240 6105 	movw	r1, #1541	; 0x605
 8000c60:	4620      	mov	r0, r4
 8000c62:	f7ff fde1 	bl	8000828 <CODEC_IO_Write>
 8000c66:	4407      	add	r7, r0
 8000c68:	e002      	b.n	8000c70 <wm8994_InitExt+0x204>
    outputEnabled = 0;
 8000c6a:	4b84      	ldr	r3, [pc, #528]	; (8000e7c <wm8994_InitExt+0x410>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
  if (input_device > 0)
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	f000 80e8 	beq.w	8000e46 <wm8994_InitExt+0x3da>
    inputEnabled = 1;
 8000c76:	4b81      	ldr	r3, [pc, #516]	; (8000e7c <wm8994_InitExt+0x410>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	605a      	str	r2, [r3, #4]
    switch (input_device)
 8000c7c:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8000c80:	d077      	beq.n	8000d72 <wm8994_InitExt+0x306>
 8000c82:	d832      	bhi.n	8000cea <wm8994_InitExt+0x27e>
 8000c84:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000c88:	f000 80b0 	beq.w	8000dec <wm8994_InitExt+0x380>
 8000c8c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8000c90:	f040 80d7 	bne.w	8000e42 <wm8994_InitExt+0x3d6>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8000c94:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8000c98:	2104      	movs	r1, #4
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f7ff fdc4 	bl	8000828 <CODEC_IO_Write>
 8000ca0:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8000ca2:	22db      	movs	r2, #219	; 0xdb
 8000ca4:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f7ff fdbd 	bl	8000828 <CODEC_IO_Write>
 8000cae:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8000cb0:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	f7ff fdb6 	bl	8000828 <CODEC_IO_Write>
 8000cbc:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f7ff fdaf 	bl	8000828 <CODEC_IO_Write>
 8000cca:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8000ccc:	2202      	movs	r2, #2
 8000cce:	f240 6109 	movw	r1, #1545	; 0x609
 8000cd2:	4620      	mov	r0, r4
 8000cd4:	f7ff fda8 	bl	8000828 <CODEC_IO_Write>
 8000cd8:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8000cda:	220e      	movs	r2, #14
 8000cdc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000ce0:	4620      	mov	r0, r4
 8000ce2:	f7ff fda1 	bl	8000828 <CODEC_IO_Write>
 8000ce6:	4407      	add	r7, r0
      break;
 8000ce8:	e0b0      	b.n	8000e4c <wm8994_InitExt+0x3e0>
    switch (input_device)
 8000cea:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000cee:	f040 80a8 	bne.w	8000e42 <wm8994_InitExt+0x3d6>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8000cf2:	f640 723c 	movw	r2, #3900	; 0xf3c
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	f7ff fd95 	bl	8000828 <CODEC_IO_Write>
 8000cfe:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8000d00:	22db      	movs	r2, #219	; 0xdb
 8000d02:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000d06:	4620      	mov	r0, r4
 8000d08:	f7ff fd8e 	bl	8000828 <CODEC_IO_Write>
 8000d0c:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8000d0e:	22db      	movs	r2, #219	; 0xdb
 8000d10:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000d14:	4620      	mov	r0, r4
 8000d16:	f7ff fd87 	bl	8000828 <CODEC_IO_Write>
 8000d1a:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8000d1c:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8000d20:	2102      	movs	r1, #2
 8000d22:	4620      	mov	r0, r4
 8000d24:	f7ff fd80 	bl	8000828 <CODEC_IO_Write>
 8000d28:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	f240 6106 	movw	r1, #1542	; 0x606
 8000d30:	4620      	mov	r0, r4
 8000d32:	f7ff fd79 	bl	8000828 <CODEC_IO_Write>
 8000d36:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8000d38:	2202      	movs	r2, #2
 8000d3a:	f240 6107 	movw	r1, #1543	; 0x607
 8000d3e:	4620      	mov	r0, r4
 8000d40:	f7ff fd72 	bl	8000828 <CODEC_IO_Write>
 8000d44:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8000d46:	2202      	movs	r2, #2
 8000d48:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	f7ff fd6b 	bl	8000828 <CODEC_IO_Write>
 8000d52:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8000d54:	2202      	movs	r2, #2
 8000d56:	f240 6109 	movw	r1, #1545	; 0x609
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f7ff fd64 	bl	8000828 <CODEC_IO_Write>
 8000d60:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8000d62:	220d      	movs	r2, #13
 8000d64:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000d68:	4620      	mov	r0, r4
 8000d6a:	f7ff fd5d 	bl	8000828 <CODEC_IO_Write>
 8000d6e:	4407      	add	r7, r0
      break;    
 8000d70:	e06c      	b.n	8000e4c <wm8994_InitExt+0x3e0>
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8000d72:	2211      	movs	r2, #17
 8000d74:	2128      	movs	r1, #40	; 0x28
 8000d76:	4620      	mov	r0, r4
 8000d78:	f7ff fd56 	bl	8000828 <CODEC_IO_Write>
 8000d7c:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8000d7e:	2235      	movs	r2, #53	; 0x35
 8000d80:	2129      	movs	r1, #41	; 0x29
 8000d82:	4620      	mov	r0, r4
 8000d84:	f7ff fd50 	bl	8000828 <CODEC_IO_Write>
 8000d88:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8000d8a:	2235      	movs	r2, #53	; 0x35
 8000d8c:	212a      	movs	r1, #42	; 0x2a
 8000d8e:	4620      	mov	r0, r4
 8000d90:	f7ff fd4a 	bl	8000828 <CODEC_IO_Write>
 8000d94:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8000d96:	f240 3203 	movw	r2, #771	; 0x303
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f7ff fd43 	bl	8000828 <CODEC_IO_Write>
 8000da2:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8000da4:	22db      	movs	r2, #219	; 0xdb
 8000da6:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000daa:	4620      	mov	r0, r4
 8000dac:	f7ff fd3c 	bl	8000828 <CODEC_IO_Write>
 8000db0:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8000db2:	f246 3250 	movw	r2, #25424	; 0x6350
 8000db6:	2102      	movs	r1, #2
 8000db8:	4620      	mov	r0, r4
 8000dba:	f7ff fd35 	bl	8000828 <CODEC_IO_Write>
 8000dbe:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	f240 6106 	movw	r1, #1542	; 0x606
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f7ff fd2e 	bl	8000828 <CODEC_IO_Write>
 8000dcc:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8000dce:	2202      	movs	r2, #2
 8000dd0:	f240 6107 	movw	r1, #1543	; 0x607
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f7ff fd27 	bl	8000828 <CODEC_IO_Write>
 8000dda:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8000ddc:	220d      	movs	r2, #13
 8000dde:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000de2:	4620      	mov	r0, r4
 8000de4:	f7ff fd20 	bl	8000828 <CODEC_IO_Write>
 8000de8:	4407      	add	r7, r0
      break;
 8000dea:	e02f      	b.n	8000e4c <wm8994_InitExt+0x3e0>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8000dec:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8000df0:	2104      	movs	r1, #4
 8000df2:	4620      	mov	r0, r4
 8000df4:	f7ff fd18 	bl	8000828 <CODEC_IO_Write>
 8000df8:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8000dfa:	22db      	movs	r2, #219	; 0xdb
 8000dfc:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000e00:	4620      	mov	r0, r4
 8000e02:	f7ff fd11 	bl	8000828 <CODEC_IO_Write>
 8000e06:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8000e08:	f246 3250 	movw	r2, #25424	; 0x6350
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	4620      	mov	r0, r4
 8000e10:	f7ff fd0a 	bl	8000828 <CODEC_IO_Write>
 8000e14:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8000e16:	2202      	movs	r2, #2
 8000e18:	f240 6106 	movw	r1, #1542	; 0x606
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f7ff fd03 	bl	8000828 <CODEC_IO_Write>
 8000e22:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8000e24:	2202      	movs	r2, #2
 8000e26:	f240 6107 	movw	r1, #1543	; 0x607
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	f7ff fcfc 	bl	8000828 <CODEC_IO_Write>
 8000e30:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8000e32:	220d      	movs	r2, #13
 8000e34:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f7ff fcf5 	bl	8000828 <CODEC_IO_Write>
 8000e3e:	4407      	add	r7, r0
      break; 
 8000e40:	e004      	b.n	8000e4c <wm8994_InitExt+0x3e0>
      counter++;
 8000e42:	3701      	adds	r7, #1
      break;
 8000e44:	e002      	b.n	8000e4c <wm8994_InitExt+0x3e0>
    inputEnabled = 0;
 8000e46:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <wm8994_InitExt+0x410>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	605a      	str	r2, [r3, #4]
  switch (AudioFreq)
 8000e4c:	f5b6 4ffa 	cmp.w	r6, #32000	; 0x7d00
 8000e50:	f000 8091 	beq.w	8000f76 <wm8994_InitExt+0x50a>
 8000e54:	d824      	bhi.n	8000ea0 <wm8994_InitExt+0x434>
 8000e56:	f5b6 5f7a 	cmp.w	r6, #16000	; 0x3e80
 8000e5a:	f000 8084 	beq.w	8000f66 <wm8994_InitExt+0x4fa>
 8000e5e:	d90f      	bls.n	8000e80 <wm8994_InitExt+0x414>
 8000e60:	f245 6322 	movw	r3, #22050	; 0x5622
 8000e64:	429e      	cmp	r6, r3
 8000e66:	f040 8096 	bne.w	8000f96 <wm8994_InitExt+0x52a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8000e6a:	2243      	movs	r2, #67	; 0x43
 8000e6c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000e70:	4620      	mov	r0, r4
 8000e72:	f7ff fcd9 	bl	8000828 <CODEC_IO_Write>
 8000e76:	19c6      	adds	r6, r0, r7
    break;
 8000e78:	e034      	b.n	8000ee4 <wm8994_InitExt+0x478>
 8000e7a:	bf00      	nop
 8000e7c:	2000014c 	.word	0x2000014c
  switch (AudioFreq)
 8000e80:	f5b6 5ffa 	cmp.w	r6, #8000	; 0x1f40
 8000e84:	d027      	beq.n	8000ed6 <wm8994_InitExt+0x46a>
 8000e86:	f642 3311 	movw	r3, #11025	; 0x2b11
 8000e8a:	429e      	cmp	r6, r3
 8000e8c:	f040 8083 	bne.w	8000f96 <wm8994_InitExt+0x52a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8000e90:	2213      	movs	r2, #19
 8000e92:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000e96:	4620      	mov	r0, r4
 8000e98:	f7ff fcc6 	bl	8000828 <CODEC_IO_Write>
 8000e9c:	19c6      	adds	r6, r0, r7
    break;
 8000e9e:	e021      	b.n	8000ee4 <wm8994_InitExt+0x478>
  switch (AudioFreq)
 8000ea0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8000ea4:	429e      	cmp	r6, r3
 8000ea6:	d06e      	beq.n	8000f86 <wm8994_InitExt+0x51a>
 8000ea8:	4bbb      	ldr	r3, [pc, #748]	; (8001198 <wm8994_InitExt+0x72c>)
 8000eaa:	429e      	cmp	r6, r3
 8000eac:	d107      	bne.n	8000ebe <wm8994_InitExt+0x452>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8000eae:	22a3      	movs	r2, #163	; 0xa3
 8000eb0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	f7ff fcb7 	bl	8000828 <CODEC_IO_Write>
 8000eba:	19c6      	adds	r6, r0, r7
    break;
 8000ebc:	e012      	b.n	8000ee4 <wm8994_InitExt+0x478>
  switch (AudioFreq)
 8000ebe:	f64a 4344 	movw	r3, #44100	; 0xac44
 8000ec2:	429e      	cmp	r6, r3
 8000ec4:	d167      	bne.n	8000f96 <wm8994_InitExt+0x52a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8000ec6:	2273      	movs	r2, #115	; 0x73
 8000ec8:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000ecc:	4620      	mov	r0, r4
 8000ece:	f7ff fcab 	bl	8000828 <CODEC_IO_Write>
 8000ed2:	19c6      	adds	r6, r0, r7
    break; 
 8000ed4:	e006      	b.n	8000ee4 <wm8994_InitExt+0x478>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000edc:	4620      	mov	r0, r4
 8000ede:	f7ff fca3 	bl	8000828 <CODEC_IO_Write>
 8000ee2:	19c6      	adds	r6, r0, r7
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000ee4:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000ee8:	d05d      	beq.n	8000fa6 <wm8994_InitExt+0x53a>
  	if(AudioRes == 16 )
 8000eea:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8000eee:	2b10      	cmp	r3, #16
 8000ef0:	d062      	beq.n	8000fb8 <wm8994_InitExt+0x54c>
		counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4070);
 8000ef2:	f244 0270 	movw	r2, #16496	; 0x4070
 8000ef6:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000efa:	4620      	mov	r0, r4
 8000efc:	f7ff fc94 	bl	8000828 <CODEC_IO_Write>
 8000f00:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f240 3102 	movw	r1, #770	; 0x302
 8000f08:	4620      	mov	r0, r4
 8000f0a:	f7ff fc8d 	bl	8000828 <CODEC_IO_Write>
 8000f0e:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8000f10:	220a      	movs	r2, #10
 8000f12:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000f16:	4620      	mov	r0, r4
 8000f18:	f7ff fc86 	bl	8000828 <CODEC_IO_Write>
 8000f1c:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f24:	4620      	mov	r0, r4
 8000f26:	f7ff fc7f 	bl	8000828 <CODEC_IO_Write>
 8000f2a:	4406      	add	r6, r0
  if (output_device > 0)  /* Audio output selected */
 8000f2c:	f1b8 0f00 	cmp.w	r8, #0
 8000f30:	d14b      	bne.n	8000fca <wm8994_InitExt+0x55e>
  if (input_device > 0) /* Audio input selected */
 8000f32:	b1ad      	cbz	r5, 8000f60 <wm8994_InitExt+0x4f4>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8000f34:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8000f38:	bf18      	it	ne
 8000f3a:	f5b5 7f80 	cmpne.w	r5, #256	; 0x100
 8000f3e:	f000 80e0 	beq.w	8001102 <wm8994_InitExt+0x696>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000f42:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000f46:	f000 80f3 	beq.w	8001130 <wm8994_InitExt+0x6c4>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8000f4a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8000f4e:	bf18      	it	ne
 8000f50:	f5b5 7f40 	cmpne.w	r5, #768	; 0x300
 8000f54:	f000 810b 	beq.w	800116e <wm8994_InitExt+0x702>
    wm8994_SetVolume(DeviceAddr, Volume);
 8000f58:	4651      	mov	r1, sl
 8000f5a:	4648      	mov	r0, r9
 8000f5c:	f7ff fcec 	bl	8000938 <wm8994_SetVolume>
}
 8000f60:	4630      	mov	r0, r6
 8000f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8000f66:	2233      	movs	r2, #51	; 0x33
 8000f68:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f7ff fc5b 	bl	8000828 <CODEC_IO_Write>
 8000f72:	19c6      	adds	r6, r0, r7
    break;
 8000f74:	e7b6      	b.n	8000ee4 <wm8994_InitExt+0x478>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8000f76:	2263      	movs	r2, #99	; 0x63
 8000f78:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	f7ff fc53 	bl	8000828 <CODEC_IO_Write>
 8000f82:	19c6      	adds	r6, r0, r7
    break;
 8000f84:	e7ae      	b.n	8000ee4 <wm8994_InitExt+0x478>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000f86:	2283      	movs	r2, #131	; 0x83
 8000f88:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f7ff fc4b 	bl	8000828 <CODEC_IO_Write>
 8000f92:	19c6      	adds	r6, r0, r7
    break;
 8000f94:	e7a6      	b.n	8000ee4 <wm8994_InitExt+0x478>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000f96:	2283      	movs	r2, #131	; 0x83
 8000f98:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	f7ff fc43 	bl	8000828 <CODEC_IO_Write>
 8000fa2:	19c6      	adds	r6, r0, r7
    break; 
 8000fa4:	e79e      	b.n	8000ee4 <wm8994_InitExt+0x478>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8000fa6:	f244 0218 	movw	r2, #16408	; 0x4018
 8000faa:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000fae:	4620      	mov	r0, r4
 8000fb0:	f7ff fc3a 	bl	8000828 <CODEC_IO_Write>
 8000fb4:	4406      	add	r6, r0
 8000fb6:	e7a4      	b.n	8000f02 <wm8994_InitExt+0x496>
	  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8000fb8:	f244 0210 	movw	r2, #16400	; 0x4010
 8000fbc:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	f7ff fc31 	bl	8000828 <CODEC_IO_Write>
 8000fc6:	4406      	add	r6, r0
 8000fc8:	e79b      	b.n	8000f02 <wm8994_InitExt+0x496>
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8000fca:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000fce:	2103      	movs	r1, #3
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f7ff fc29 	bl	8000828 <CODEC_IO_Write>
 8000fd6:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2122      	movs	r1, #34	; 0x22
 8000fdc:	4620      	mov	r0, r4
 8000fde:	f7ff fc23 	bl	8000828 <CODEC_IO_Write>
 8000fe2:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2123      	movs	r1, #35	; 0x23
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f7ff fc1d 	bl	8000828 <CODEC_IO_Write>
 8000fee:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8000ff0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ff4:	2136      	movs	r1, #54	; 0x36
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f7ff fc16 	bl	8000828 <CODEC_IO_Write>
 8000ffc:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8000ffe:	f243 0203 	movw	r2, #12291	; 0x3003
 8001002:	2101      	movs	r1, #1
 8001004:	4620      	mov	r0, r4
 8001006:	f7ff fc0f 	bl	8000828 <CODEC_IO_Write>
 800100a:	4406      	add	r6, r0
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800100c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001010:	d06f      	beq.n	80010f2 <wm8994_InitExt+0x686>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8001012:	2205      	movs	r2, #5
 8001014:	2151      	movs	r1, #81	; 0x51
 8001016:	4620      	mov	r0, r4
 8001018:	f7ff fc06 	bl	8000828 <CODEC_IO_Write>
 800101c:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800101e:	f243 3203 	movw	r2, #13059	; 0x3303
 8001022:	2101      	movs	r1, #1
 8001024:	4620      	mov	r0, r4
 8001026:	f7ff fbff 	bl	8000828 <CODEC_IO_Write>
 800102a:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 800102c:	2222      	movs	r2, #34	; 0x22
 800102e:	2160      	movs	r1, #96	; 0x60
 8001030:	4620      	mov	r0, r4
 8001032:	f7ff fbf9 	bl	8000828 <CODEC_IO_Write>
 8001036:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8001038:	f649 7225 	movw	r2, #40741	; 0x9f25
 800103c:	214c      	movs	r1, #76	; 0x4c
 800103e:	4620      	mov	r0, r4
 8001040:	f7ff fbf2 	bl	8000828 <CODEC_IO_Write>
 8001044:	4406      	add	r6, r0
    AUDIO_IO_Delay(15);
 8001046:	200f      	movs	r0, #15
 8001048:	f000 faf2 	bl	8001630 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 800104c:	2201      	movs	r2, #1
 800104e:	212d      	movs	r1, #45	; 0x2d
 8001050:	4620      	mov	r0, r4
 8001052:	f7ff fbe9 	bl	8000828 <CODEC_IO_Write>
 8001056:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8001058:	2201      	movs	r2, #1
 800105a:	212e      	movs	r1, #46	; 0x2e
 800105c:	4620      	mov	r0, r4
 800105e:	f7ff fbe3 	bl	8000828 <CODEC_IO_Write>
 8001062:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8001064:	f44f 724c 	mov.w	r2, #816	; 0x330
 8001068:	2103      	movs	r1, #3
 800106a:	4620      	mov	r0, r4
 800106c:	f7ff fbdc 	bl	8000828 <CODEC_IO_Write>
 8001070:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8001072:	2233      	movs	r2, #51	; 0x33
 8001074:	2154      	movs	r1, #84	; 0x54
 8001076:	4620      	mov	r0, r4
 8001078:	f7ff fbd6 	bl	8000828 <CODEC_IO_Write>
 800107c:	4406      	add	r6, r0
    AUDIO_IO_Delay(250);
 800107e:	20fa      	movs	r0, #250	; 0xfa
 8001080:	f000 fad6 	bl	8001630 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8001084:	22ee      	movs	r2, #238	; 0xee
 8001086:	2160      	movs	r1, #96	; 0x60
 8001088:	4620      	mov	r0, r4
 800108a:	f7ff fbcd 	bl	8000828 <CODEC_IO_Write>
 800108e:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8001090:	22c0      	movs	r2, #192	; 0xc0
 8001092:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8001096:	4620      	mov	r0, r4
 8001098:	f7ff fbc6 	bl	8000828 <CODEC_IO_Write>
 800109c:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 800109e:	22c0      	movs	r2, #192	; 0xc0
 80010a0:	f240 6111 	movw	r1, #1553	; 0x611
 80010a4:	4620      	mov	r0, r4
 80010a6:	f7ff fbbf 	bl	8000828 <CODEC_IO_Write>
 80010aa:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80010b2:	4620      	mov	r0, r4
 80010b4:	f7ff fbb8 	bl	8000828 <CODEC_IO_Write>
 80010b8:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80010ba:	22c0      	movs	r2, #192	; 0xc0
 80010bc:	f240 6112 	movw	r1, #1554	; 0x612
 80010c0:	4620      	mov	r0, r4
 80010c2:	f7ff fbb1 	bl	8000828 <CODEC_IO_Write>
 80010c6:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80010c8:	22c0      	movs	r2, #192	; 0xc0
 80010ca:	f240 6113 	movw	r1, #1555	; 0x613
 80010ce:	4620      	mov	r0, r4
 80010d0:	f7ff fbaa 	bl	8000828 <CODEC_IO_Write>
 80010d4:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f240 4122 	movw	r1, #1058	; 0x422
 80010dc:	4620      	mov	r0, r4
 80010de:	f7ff fba3 	bl	8000828 <CODEC_IO_Write>
 80010e2:	4406      	add	r6, r0
    wm8994_SetVolume(DeviceAddr, Volume);
 80010e4:	4651      	mov	r1, sl
 80010e6:	4648      	mov	r0, r9
 80010e8:	f7ff fc26 	bl	8000938 <wm8994_SetVolume>
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80010ec:	f243 3803 	movw	r8, #13059	; 0x3303
 80010f0:	e71f      	b.n	8000f32 <wm8994_InitExt+0x4c6>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80010f2:	f240 2205 	movw	r2, #517	; 0x205
 80010f6:	2151      	movs	r1, #81	; 0x51
 80010f8:	4620      	mov	r0, r4
 80010fa:	f7ff fb95 	bl	8000828 <CODEC_IO_Write>
 80010fe:	4406      	add	r6, r0
 8001100:	e78d      	b.n	800101e <wm8994_InitExt+0x5b2>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001102:	f048 0213 	orr.w	r2, r8, #19
 8001106:	2101      	movs	r1, #1
 8001108:	4620      	mov	r0, r4
 800110a:	f7ff fb8d 	bl	8000828 <CODEC_IO_Write>
 800110e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8001110:	2202      	movs	r2, #2
 8001112:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001116:	4620      	mov	r0, r4
 8001118:	f7ff fb86 	bl	8000828 <CODEC_IO_Write>
 800111c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 800111e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001122:	f240 4111 	movw	r1, #1041	; 0x411
 8001126:	4620      	mov	r0, r4
 8001128:	f7ff fb7e 	bl	8000828 <CODEC_IO_Write>
 800112c:	4406      	add	r6, r0
 800112e:	e713      	b.n	8000f58 <wm8994_InitExt+0x4ec>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001130:	f048 0213 	orr.w	r2, r8, #19
 8001134:	2101      	movs	r1, #1
 8001136:	4620      	mov	r0, r4
 8001138:	f7ff fb76 	bl	8000828 <CODEC_IO_Write>
 800113c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 800113e:	2202      	movs	r2, #2
 8001140:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001144:	4620      	mov	r0, r4
 8001146:	f7ff fb6f 	bl	8000828 <CODEC_IO_Write>
 800114a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800114c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001150:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001154:	4620      	mov	r0, r4
 8001156:	f7ff fb67 	bl	8000828 <CODEC_IO_Write>
 800115a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 800115c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001160:	f240 4111 	movw	r1, #1041	; 0x411
 8001164:	4620      	mov	r0, r4
 8001166:	f7ff fb5f 	bl	8000828 <CODEC_IO_Write>
 800116a:	4406      	add	r6, r0
 800116c:	e6f4      	b.n	8000f58 <wm8994_InitExt+0x4ec>
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 800116e:	220b      	movs	r2, #11
 8001170:	2118      	movs	r1, #24
 8001172:	4620      	mov	r0, r4
 8001174:	f7ff fb58 	bl	8000828 <CODEC_IO_Write>
 8001178:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 800117a:	220b      	movs	r2, #11
 800117c:	211a      	movs	r1, #26
 800117e:	4620      	mov	r0, r4
 8001180:	f7ff fb52 	bl	8000828 <CODEC_IO_Write>
 8001184:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8001186:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800118a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800118e:	4620      	mov	r0, r4
 8001190:	f7ff fb4a 	bl	8000828 <CODEC_IO_Write>
 8001194:	4406      	add	r6, r0
 8001196:	e6df      	b.n	8000f58 <wm8994_InitExt+0x4ec>
 8001198:	00017700 	.word	0x00017700

0800119c <wm8994_SetOutputMode>:
{
 800119c:	b538      	push	{r3, r4, r5, lr}
  switch (Output) 
 800119e:	2902      	cmp	r1, #2
 80011a0:	d04d      	beq.n	800123e <wm8994_SetOutputMode+0xa2>
 80011a2:	2903      	cmp	r1, #3
 80011a4:	d070      	beq.n	8001288 <wm8994_SetOutputMode+0xec>
 80011a6:	2901      	cmp	r1, #1
 80011a8:	d024      	beq.n	80011f4 <wm8994_SetOutputMode+0x58>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80011aa:	b2c4      	uxtb	r4, r0
 80011ac:	f240 3203 	movw	r2, #771	; 0x303
 80011b0:	2105      	movs	r1, #5
 80011b2:	4620      	mov	r0, r4
 80011b4:	f7ff fb38 	bl	8000828 <CODEC_IO_Write>
 80011b8:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80011ba:	2201      	movs	r2, #1
 80011bc:	f240 6101 	movw	r1, #1537	; 0x601
 80011c0:	4620      	mov	r0, r4
 80011c2:	f7ff fb31 	bl	8000828 <CODEC_IO_Write>
 80011c6:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f240 6102 	movw	r1, #1538	; 0x602
 80011ce:	4620      	mov	r0, r4
 80011d0:	f7ff fb2a 	bl	8000828 <CODEC_IO_Write>
 80011d4:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f240 6104 	movw	r1, #1540	; 0x604
 80011dc:	4620      	mov	r0, r4
 80011de:	f7ff fb23 	bl	8000828 <CODEC_IO_Write>
 80011e2:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f240 6105 	movw	r1, #1541	; 0x605
 80011ea:	4620      	mov	r0, r4
 80011ec:	f7ff fb1c 	bl	8000828 <CODEC_IO_Write>
 80011f0:	4428      	add	r0, r5
  return counter;
 80011f2:	e023      	b.n	800123c <wm8994_SetOutputMode+0xa0>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80011f4:	b2c4      	uxtb	r4, r0
 80011f6:	f640 420c 	movw	r2, #3084	; 0xc0c
 80011fa:	2105      	movs	r1, #5
 80011fc:	4620      	mov	r0, r4
 80011fe:	f7ff fb13 	bl	8000828 <CODEC_IO_Write>
 8001202:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8001204:	2200      	movs	r2, #0
 8001206:	f240 6101 	movw	r1, #1537	; 0x601
 800120a:	4620      	mov	r0, r4
 800120c:	f7ff fb0c 	bl	8000828 <CODEC_IO_Write>
 8001210:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8001212:	2200      	movs	r2, #0
 8001214:	f240 6102 	movw	r1, #1538	; 0x602
 8001218:	4620      	mov	r0, r4
 800121a:	f7ff fb05 	bl	8000828 <CODEC_IO_Write>
 800121e:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001220:	2202      	movs	r2, #2
 8001222:	f240 6104 	movw	r1, #1540	; 0x604
 8001226:	4620      	mov	r0, r4
 8001228:	f7ff fafe 	bl	8000828 <CODEC_IO_Write>
 800122c:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800122e:	2202      	movs	r2, #2
 8001230:	f240 6105 	movw	r1, #1541	; 0x605
 8001234:	4620      	mov	r0, r4
 8001236:	f7ff faf7 	bl	8000828 <CODEC_IO_Write>
 800123a:	4428      	add	r0, r5
}
 800123c:	bd38      	pop	{r3, r4, r5, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800123e:	b2c4      	uxtb	r4, r0
 8001240:	f240 3203 	movw	r2, #771	; 0x303
 8001244:	2105      	movs	r1, #5
 8001246:	4620      	mov	r0, r4
 8001248:	f7ff faee 	bl	8000828 <CODEC_IO_Write>
 800124c:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800124e:	2201      	movs	r2, #1
 8001250:	f240 6101 	movw	r1, #1537	; 0x601
 8001254:	4620      	mov	r0, r4
 8001256:	f7ff fae7 	bl	8000828 <CODEC_IO_Write>
 800125a:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800125c:	2201      	movs	r2, #1
 800125e:	f240 6102 	movw	r1, #1538	; 0x602
 8001262:	4620      	mov	r0, r4
 8001264:	f7ff fae0 	bl	8000828 <CODEC_IO_Write>
 8001268:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800126a:	2200      	movs	r2, #0
 800126c:	f240 6104 	movw	r1, #1540	; 0x604
 8001270:	4620      	mov	r0, r4
 8001272:	f7ff fad9 	bl	8000828 <CODEC_IO_Write>
 8001276:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001278:	2200      	movs	r2, #0
 800127a:	f240 6105 	movw	r1, #1541	; 0x605
 800127e:	4620      	mov	r0, r4
 8001280:	f7ff fad2 	bl	8000828 <CODEC_IO_Write>
 8001284:	4428      	add	r0, r5
    break;
 8001286:	e7d9      	b.n	800123c <wm8994_SetOutputMode+0xa0>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001288:	b2c4      	uxtb	r4, r0
 800128a:	f640 720f 	movw	r2, #3855	; 0xf0f
 800128e:	2105      	movs	r1, #5
 8001290:	4620      	mov	r0, r4
 8001292:	f7ff fac9 	bl	8000828 <CODEC_IO_Write>
 8001296:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001298:	2201      	movs	r2, #1
 800129a:	f240 6101 	movw	r1, #1537	; 0x601
 800129e:	4620      	mov	r0, r4
 80012a0:	f7ff fac2 	bl	8000828 <CODEC_IO_Write>
 80012a4:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80012a6:	2201      	movs	r2, #1
 80012a8:	f240 6102 	movw	r1, #1538	; 0x602
 80012ac:	4620      	mov	r0, r4
 80012ae:	f7ff fabb 	bl	8000828 <CODEC_IO_Write>
 80012b2:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80012b4:	2202      	movs	r2, #2
 80012b6:	f240 6104 	movw	r1, #1540	; 0x604
 80012ba:	4620      	mov	r0, r4
 80012bc:	f7ff fab4 	bl	8000828 <CODEC_IO_Write>
 80012c0:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80012c2:	2202      	movs	r2, #2
 80012c4:	f240 6105 	movw	r1, #1541	; 0x605
 80012c8:	4620      	mov	r0, r4
 80012ca:	f7ff faad 	bl	8000828 <CODEC_IO_Write>
 80012ce:	4428      	add	r0, r5
    break;
 80012d0:	e7b4      	b.n	800123c <wm8994_SetOutputMode+0xa0>
	...

080012d4 <wm8994_SetFrequency>:
{
 80012d4:	b508      	push	{r3, lr}
  switch (AudioFreq)
 80012d6:	f245 6322 	movw	r3, #22050	; 0x5622
 80012da:	4299      	cmp	r1, r3
 80012dc:	d03f      	beq.n	800135e <wm8994_SetFrequency+0x8a>
 80012de:	d817      	bhi.n	8001310 <wm8994_SetFrequency+0x3c>
 80012e0:	f642 3311 	movw	r3, #11025	; 0x2b11
 80012e4:	4299      	cmp	r1, r3
 80012e6:	d033      	beq.n	8001350 <wm8994_SetFrequency+0x7c>
 80012e8:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 80012ec:	d106      	bne.n	80012fc <wm8994_SetFrequency+0x28>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80012ee:	2233      	movs	r2, #51	; 0x33
 80012f0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80012f4:	b2c0      	uxtb	r0, r0
 80012f6:	f7ff fa97 	bl	8000828 <CODEC_IO_Write>
    break;
 80012fa:	e008      	b.n	800130e <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 80012fc:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 8001300:	d134      	bne.n	800136c <wm8994_SetFrequency+0x98>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8001302:	2203      	movs	r2, #3
 8001304:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	f7ff fa8d 	bl	8000828 <CODEC_IO_Write>
}
 800130e:	bd08      	pop	{r3, pc}
  switch (AudioFreq)
 8001310:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001314:	4299      	cmp	r1, r3
 8001316:	d014      	beq.n	8001342 <wm8994_SetFrequency+0x6e>
 8001318:	4b18      	ldr	r3, [pc, #96]	; (800137c <wm8994_SetFrequency+0xa8>)
 800131a:	4299      	cmp	r1, r3
 800131c:	d106      	bne.n	800132c <wm8994_SetFrequency+0x58>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800131e:	22a3      	movs	r2, #163	; 0xa3
 8001320:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001324:	b2c0      	uxtb	r0, r0
 8001326:	f7ff fa7f 	bl	8000828 <CODEC_IO_Write>
    break;
 800132a:	e7f0      	b.n	800130e <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 800132c:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001330:	4299      	cmp	r1, r3
 8001332:	d11b      	bne.n	800136c <wm8994_SetFrequency+0x98>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8001334:	2273      	movs	r2, #115	; 0x73
 8001336:	f44f 7104 	mov.w	r1, #528	; 0x210
 800133a:	b2c0      	uxtb	r0, r0
 800133c:	f7ff fa74 	bl	8000828 <CODEC_IO_Write>
    break; 
 8001340:	e7e5      	b.n	800130e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8001342:	2283      	movs	r2, #131	; 0x83
 8001344:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001348:	b2c0      	uxtb	r0, r0
 800134a:	f7ff fa6d 	bl	8000828 <CODEC_IO_Write>
    break;
 800134e:	e7de      	b.n	800130e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8001350:	2213      	movs	r2, #19
 8001352:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001356:	b2c0      	uxtb	r0, r0
 8001358:	f7ff fa66 	bl	8000828 <CODEC_IO_Write>
    break;
 800135c:	e7d7      	b.n	800130e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800135e:	2243      	movs	r2, #67	; 0x43
 8001360:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001364:	b2c0      	uxtb	r0, r0
 8001366:	f7ff fa5f 	bl	8000828 <CODEC_IO_Write>
    break;
 800136a:	e7d0      	b.n	800130e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800136c:	2283      	movs	r2, #131	; 0x83
 800136e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001372:	b2c0      	uxtb	r0, r0
 8001374:	f7ff fa58 	bl	8000828 <CODEC_IO_Write>
  return counter;
 8001378:	e7c9      	b.n	800130e <wm8994_SetFrequency+0x3a>
 800137a:	bf00      	nop
 800137c:	00017700 	.word	0x00017700

08001380 <wm8994_Reset>:
{
 8001380:	b508      	push	{r3, lr}
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8001382:	2200      	movs	r2, #0
 8001384:	4611      	mov	r1, r2
 8001386:	b2c0      	uxtb	r0, r0
 8001388:	f7ff fa4e 	bl	8000828 <CODEC_IO_Write>
  outputEnabled = 0;
 800138c:	4b02      	ldr	r3, [pc, #8]	; (8001398 <wm8994_Reset+0x18>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8001392:	605a      	str	r2, [r3, #4]
}
 8001394:	bd08      	pop	{r3, pc}
 8001396:	bf00      	nop
 8001398:	2000014c 	.word	0x2000014c

0800139c <wm8994_DeInit>:
{
 800139c:	b508      	push	{r3, lr}
  AUDIO_IO_DeInit();
 800139e:	f000 f911 	bl	80015c4 <AUDIO_IO_DeInit>
}
 80013a2:	bd08      	pop	{r3, pc}

080013a4 <wm8994_ReadID>:
{
 80013a4:	b510      	push	{r4, lr}
 80013a6:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 80013a8:	f000 f904 	bl	80015b4 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80013ac:	2100      	movs	r1, #0
 80013ae:	b2e0      	uxtb	r0, r4
 80013b0:	f000 f922 	bl	80015f8 <AUDIO_IO_Read>
}
 80013b4:	bd10      	pop	{r4, pc}
	...

080013b8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80013bc:	4b49      	ldr	r3, [pc, #292]	; (80014e4 <I2Cx_MspInit+0x12c>)
 80013be:	4283      	cmp	r3, r0
 80013c0:	d043      	beq.n	800144a <I2Cx_MspInit+0x92>
  }
  else
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80013c2:	4c49      	ldr	r4, [pc, #292]	; (80014e8 <I2Cx_MspInit+0x130>)
 80013c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013c6:	f043 0302 	orr.w	r3, r3, #2
 80013ca:	6323      	str	r3, [r4, #48]	; 0x30
 80013cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	9303      	str	r3, [sp, #12]
 80013d4:	9b03      	ldr	r3, [sp, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80013d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013da:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80013dc:	2312      	movs	r3, #18
 80013de:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80013e0:	2500      	movs	r5, #0
 80013e2:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80013e4:	2302      	movs	r3, #2
 80013e6:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80013e8:	2304      	movs	r3, #4
 80013ea:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80013ec:	4e3f      	ldr	r6, [pc, #252]	; (80014ec <I2Cx_MspInit+0x134>)
 80013ee:	a905      	add	r1, sp, #20
 80013f0:	4630      	mov	r0, r6
 80013f2:	f003 fcfb 	bl	8004dec <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80013f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013fa:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80013fc:	a905      	add	r1, sp, #20
 80013fe:	4630      	mov	r0, r6
 8001400:	f003 fcf4 	bl	8004dec <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001404:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001406:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800140a:	6423      	str	r3, [r4, #64]	; 0x40
 800140c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800140e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001412:	9304      	str	r3, [sp, #16]
 8001414:	9b04      	ldr	r3, [sp, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001416:	6a23      	ldr	r3, [r4, #32]
 8001418:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800141c:	6223      	str	r3, [r4, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800141e:	6a23      	ldr	r3, [r4, #32]
 8001420:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001424:	6223      	str	r3, [r4, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001426:	462a      	mov	r2, r5
 8001428:	210f      	movs	r1, #15
 800142a:	201f      	movs	r0, #31
 800142c:	f002 fd88 	bl	8003f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001430:	201f      	movs	r0, #31
 8001432:	f002 fdb7 	bl	8003fa4 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001436:	462a      	mov	r2, r5
 8001438:	210f      	movs	r1, #15
 800143a:	2020      	movs	r0, #32
 800143c:	f002 fd80 	bl	8003f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001440:	2020      	movs	r0, #32
 8001442:	f002 fdaf 	bl	8003fa4 <HAL_NVIC_EnableIRQ>
  }
}
 8001446:	b00a      	add	sp, #40	; 0x28
 8001448:	bd70      	pop	{r4, r5, r6, pc}
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 800144a:	4c27      	ldr	r4, [pc, #156]	; (80014e8 <I2Cx_MspInit+0x130>)
 800144c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800144e:	f043 0308 	orr.w	r3, r3, #8
 8001452:	6323      	str	r3, [r4, #48]	; 0x30
 8001454:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	9b00      	ldr	r3, [sp, #0]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 800145e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	6323      	str	r3, [r4, #48]	; 0x30
 8001466:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001474:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001476:	2312      	movs	r3, #18
 8001478:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800147a:	2500      	movs	r5, #0
 800147c:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800147e:	2302      	movs	r3, #2
 8001480:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8001482:	2304      	movs	r3, #4
 8001484:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8001486:	a905      	add	r1, sp, #20
 8001488:	4819      	ldr	r0, [pc, #100]	; (80014f0 <I2Cx_MspInit+0x138>)
 800148a:	f003 fcaf 	bl	8004dec <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8001492:	230b      	movs	r3, #11
 8001494:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8001496:	a905      	add	r1, sp, #20
 8001498:	4814      	ldr	r0, [pc, #80]	; (80014ec <I2Cx_MspInit+0x134>)
 800149a:	f003 fca7 	bl	8004dec <HAL_GPIO_Init>
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800149e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014a4:	6423      	str	r3, [r4, #64]	; 0x40
 80014a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014ac:	9302      	str	r3, [sp, #8]
 80014ae:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80014b0:	6a23      	ldr	r3, [r4, #32]
 80014b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014b6:	6223      	str	r3, [r4, #32]
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80014b8:	6a23      	ldr	r3, [r4, #32]
 80014ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014be:	6223      	str	r3, [r4, #32]
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80014c0:	462a      	mov	r2, r5
 80014c2:	210f      	movs	r1, #15
 80014c4:	205f      	movs	r0, #95	; 0x5f
 80014c6:	f002 fd3b 	bl	8003f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80014ca:	205f      	movs	r0, #95	; 0x5f
 80014cc:	f002 fd6a 	bl	8003fa4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80014d0:	462a      	mov	r2, r5
 80014d2:	210f      	movs	r1, #15
 80014d4:	2060      	movs	r0, #96	; 0x60
 80014d6:	f002 fd33 	bl	8003f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 80014da:	2060      	movs	r0, #96	; 0x60
 80014dc:	f002 fd62 	bl	8003fa4 <HAL_NVIC_EnableIRQ>
 80014e0:	e7b1      	b.n	8001446 <I2Cx_MspInit+0x8e>
 80014e2:	bf00      	nop
 80014e4:	20000154 	.word	0x20000154
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40020c00 	.word	0x40020c00

080014f4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80014f4:	b510      	push	{r4, lr}
 80014f6:	4604      	mov	r4, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80014f8:	f004 f92c 	bl	8005754 <HAL_I2C_GetState>
 80014fc:	b9a0      	cbnz	r0, 8001528 <I2Cx_Init+0x34>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <I2Cx_Init+0x3c>)
 8001500:	429c      	cmp	r4, r3
 8001502:	d012      	beq.n	800152a <I2Cx_Init+0x36>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <I2Cx_Init+0x40>)
 8001506:	6023      	str	r3, [r4, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <I2Cx_Init+0x44>)
 800150a:	6063      	str	r3, [r4, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	60a3      	str	r3, [r4, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001510:	2201      	movs	r2, #1
 8001512:	60e2      	str	r2, [r4, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001514:	6123      	str	r3, [r4, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001516:	6163      	str	r3, [r4, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001518:	61e3      	str	r3, [r4, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800151a:	6223      	str	r3, [r4, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800151c:	4620      	mov	r0, r4
 800151e:	f7ff ff4b 	bl	80013b8 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8001522:	4620      	mov	r0, r4
 8001524:	f003 fecc 	bl	80052c0 <HAL_I2C_Init>
  }
}
 8001528:	bd10      	pop	{r4, pc}
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800152a:	4b04      	ldr	r3, [pc, #16]	; (800153c <I2Cx_Init+0x48>)
 800152c:	6023      	str	r3, [r4, #0]
 800152e:	e7eb      	b.n	8001508 <I2Cx_Init+0x14>
 8001530:	20000154 	.word	0x20000154
 8001534:	40005400 	.word	0x40005400
 8001538:	40912732 	.word	0x40912732
 800153c:	40006000 	.word	0x40006000

08001540 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001540:	b510      	push	{r4, lr}
 8001542:	4604      	mov	r4, r0
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001544:	f003 ff1b 	bl	800537e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001548:	4620      	mov	r0, r4
 800154a:	f7ff ffd3 	bl	80014f4 <I2Cx_Init>
}
 800154e:	bd10      	pop	{r4, pc}

08001550 <I2Cx_WriteMultiple>:
{
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	4605      	mov	r5, r0
 8001556:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001558:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800155c:	9102      	str	r1, [sp, #8]
 800155e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8001562:	9101      	str	r1, [sp, #4]
 8001564:	9908      	ldr	r1, [sp, #32]
 8001566:	9100      	str	r1, [sp, #0]
 8001568:	4621      	mov	r1, r4
 800156a:	f003 ff21 	bl	80053b0 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800156e:	4606      	mov	r6, r0
 8001570:	b910      	cbnz	r0, 8001578 <I2Cx_WriteMultiple+0x28>
}
 8001572:	4630      	mov	r0, r6
 8001574:	b004      	add	sp, #16
 8001576:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 8001578:	4621      	mov	r1, r4
 800157a:	4628      	mov	r0, r5
 800157c:	f7ff ffe0 	bl	8001540 <I2Cx_Error>
 8001580:	e7f7      	b.n	8001572 <I2Cx_WriteMultiple+0x22>

08001582 <I2Cx_ReadMultiple>:
{
 8001582:	b570      	push	{r4, r5, r6, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	4605      	mov	r5, r0
 8001588:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800158a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800158e:	9102      	str	r1, [sp, #8]
 8001590:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8001594:	9101      	str	r1, [sp, #4]
 8001596:	9908      	ldr	r1, [sp, #32]
 8001598:	9100      	str	r1, [sp, #0]
 800159a:	4621      	mov	r1, r4
 800159c:	f003 fff2 	bl	8005584 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80015a0:	4606      	mov	r6, r0
 80015a2:	b910      	cbnz	r0, 80015aa <I2Cx_ReadMultiple+0x28>
}
 80015a4:	4630      	mov	r0, r6
 80015a6:	b004      	add	sp, #16
 80015a8:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 80015aa:	4621      	mov	r1, r4
 80015ac:	4628      	mov	r0, r5
 80015ae:	f7ff ffc7 	bl	8001540 <I2Cx_Error>
 80015b2:	e7f7      	b.n	80015a4 <I2Cx_ReadMultiple+0x22>

080015b4 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 80015b4:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cAudioHandler);
 80015b6:	4802      	ldr	r0, [pc, #8]	; (80015c0 <AUDIO_IO_Init+0xc>)
 80015b8:	f7ff ff9c 	bl	80014f4 <I2Cx_Init>
}
 80015bc:	bd08      	pop	{r3, pc}
 80015be:	bf00      	nop
 80015c0:	20000154 	.word	0x20000154

080015c4 <AUDIO_IO_DeInit>:
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{

}
 80015c4:	4770      	bx	lr
	...

080015c8 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80015c8:	b500      	push	{lr}
 80015ca:	b085      	sub	sp, #20
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80015cc:	0213      	lsls	r3, r2, #8
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	ea43 2212 	orr.w	r2, r3, r2, lsr #8
 80015d4:	f8ad 200e 	strh.w	r2, [sp, #14]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80015d8:	2302      	movs	r3, #2
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	f10d 020e 	add.w	r2, sp, #14
 80015e0:	9200      	str	r2, [sp, #0]
 80015e2:	460a      	mov	r2, r1
 80015e4:	4601      	mov	r1, r0
 80015e6:	4803      	ldr	r0, [pc, #12]	; (80015f4 <AUDIO_IO_Write+0x2c>)
 80015e8:	f7ff ffb2 	bl	8001550 <I2Cx_WriteMultiple>
}
 80015ec:	b005      	add	sp, #20
 80015ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80015f2:	bf00      	nop
 80015f4:	20000154 	.word	0x20000154

080015f8 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 80015f8:	b500      	push	{lr}
 80015fa:	b085      	sub	sp, #20
 80015fc:	460a      	mov	r2, r1
  uint16_t read_value = 0, tmp = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8ad 300e 	strh.w	r3, [sp, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001604:	2302      	movs	r3, #2
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	f10d 010e 	add.w	r1, sp, #14
 800160c:	9100      	str	r1, [sp, #0]
 800160e:	4601      	mov	r1, r0
 8001610:	4806      	ldr	r0, [pc, #24]	; (800162c <AUDIO_IO_Read+0x34>)
 8001612:	f7ff ffb6 	bl	8001582 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8001616:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 800161a:	0218      	lsls	r0, r3, #8
 800161c:	b200      	sxth	r0, r0
 800161e:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
  
  read_value = tmp;
  
  return read_value;
}
 8001622:	b280      	uxth	r0, r0
 8001624:	b005      	add	sp, #20
 8001626:	f85d fb04 	ldr.w	pc, [sp], #4
 800162a:	bf00      	nop
 800162c:	20000154 	.word	0x20000154

08001630 <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8001630:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8001632:	f002 fc65 	bl	8003f00 <HAL_Delay>
}
 8001636:	bd08      	pop	{r3, pc}

08001638 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8001638:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cAudioHandler);
 800163a:	4802      	ldr	r0, [pc, #8]	; (8001644 <TS_IO_Init+0xc>)
 800163c:	f7ff ff5a 	bl	80014f4 <I2Cx_Init>
}
 8001640:	bd08      	pop	{r3, pc}
 8001642:	bf00      	nop
 8001644:	20000154 	.word	0x20000154

08001648 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001648:	b500      	push	{lr}
 800164a:	b085      	sub	sp, #20
 800164c:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001650:	2301      	movs	r3, #1
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	f10d 020f 	add.w	r2, sp, #15
 8001658:	9200      	str	r2, [sp, #0]
 800165a:	460a      	mov	r2, r1
 800165c:	4601      	mov	r1, r0
 800165e:	4803      	ldr	r0, [pc, #12]	; (800166c <TS_IO_Write+0x24>)
 8001660:	f7ff ff76 	bl	8001550 <I2Cx_WriteMultiple>
}
 8001664:	b005      	add	sp, #20
 8001666:	f85d fb04 	ldr.w	pc, [sp], #4
 800166a:	bf00      	nop
 800166c:	20000154 	.word	0x20000154

08001670 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001670:	b500      	push	{lr}
 8001672:	b085      	sub	sp, #20
 8001674:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	f88d 300f 	strb.w	r3, [sp, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800167c:	2301      	movs	r3, #1
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	f10d 010f 	add.w	r1, sp, #15
 8001684:	9100      	str	r1, [sp, #0]
 8001686:	4601      	mov	r1, r0
 8001688:	4803      	ldr	r0, [pc, #12]	; (8001698 <TS_IO_Read+0x28>)
 800168a:	f7ff ff7a 	bl	8001582 <I2Cx_ReadMultiple>

  return read_value;
}
 800168e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8001692:	b005      	add	sp, #20
 8001694:	f85d fb04 	ldr.w	pc, [sp], #4
 8001698:	20000154 	.word	0x20000154

0800169c <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800169c:	b500      	push	{lr}
 800169e:	b083      	sub	sp, #12
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	9200      	str	r2, [sp, #0]
 80016a4:	2301      	movs	r3, #1
 80016a6:	460a      	mov	r2, r1
 80016a8:	4601      	mov	r1, r0
 80016aa:	4803      	ldr	r0, [pc, #12]	; (80016b8 <TS_IO_ReadMultiple+0x1c>)
 80016ac:	f7ff ff69 	bl	8001582 <I2Cx_ReadMultiple>
}
 80016b0:	b280      	uxth	r0, r0
 80016b2:	b003      	add	sp, #12
 80016b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80016b8:	20000154 	.word	0x20000154

080016bc <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 80016bc:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 80016be:	f002 fc1f 	bl	8003f00 <HAL_Delay>
}
 80016c2:	bd08      	pop	{r3, pc}

080016c4 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80016c4:	b508      	push	{r3, lr}
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32f769i_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 80016c6:	f00c f9f9 	bl	800dabc <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80016ca:	bd08      	pop	{r3, pc}

080016cc <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80016cc:	b508      	push	{r3, lr}
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32f769i_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80016ce:	f00c fa01 	bl	800dad4 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80016d2:	bd08      	pop	{r3, pc}

080016d4 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
}
 80016d4:	4770      	bx	lr
	...

080016d8 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 80016d8:	b570      	push	{r4, r5, r6, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	4606      	mov	r6, r0
 80016de:	460d      	mov	r5, r1
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  
  uint8_t resolution;
  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80016e0:	4c41      	ldr	r4, [pc, #260]	; (80017e8 <BSP_AUDIO_OUT_MspInit+0x110>)
 80016e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016e8:	6463      	str	r3, [r4, #68]	; 0x44
 80016ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f0:	9301      	str	r3, [sp, #4]
 80016f2:	9b01      	ldr	r3, [sp, #4]
  
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 80016f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016fa:	6323      	str	r3, [r4, #48]	; 0x30
 80016fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001702:	9302      	str	r3, [sp, #8]
 8001704:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 8001706:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001708:	f043 0310 	orr.w	r3, r3, #16
 800170c:	6323      	str	r3, [r4, #48]	; 0x30
 800170e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001710:	f003 0310 	and.w	r3, r3, #16
 8001714:	9303      	str	r3, [sp, #12]
 8001716:	9b03      	ldr	r3, [sp, #12]
  
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 8001718:	2370      	movs	r3, #112	; 0x70
 800171a:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 8001728:	2306      	movs	r3, #6
 800172a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 800172c:	a905      	add	r1, sp, #20
 800172e:	482f      	ldr	r0, [pc, #188]	; (80017ec <BSP_AUDIO_OUT_MspInit+0x114>)
 8001730:	f003 fb5c 	bl	8004dec <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8001738:	a905      	add	r1, sp, #20
 800173a:	482d      	ldr	r0, [pc, #180]	; (80017f0 <BSP_AUDIO_OUT_MspInit+0x118>)
 800173c:	f003 fb56 	bl	8004dec <HAL_GPIO_Init>
  
  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001740:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001742:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001746:	6323      	str	r3, [r4, #48]	; 0x30
 8001748:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800174a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174e:	9304      	str	r3, [sp, #16]
 8001750:	9b04      	ldr	r3, [sp, #16]
  
  resolution= (Params != NULL)? *((uint8_t*)Params):16;
 8001752:	b175      	cbz	r5, 8001772 <BSP_AUDIO_OUT_MspInit+0x9a>
 8001754:	7829      	ldrb	r1, [r5, #0]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001756:	6832      	ldr	r2, [r6, #0]
 8001758:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <BSP_AUDIO_OUT_MspInit+0x11c>)
 800175a:	429a      	cmp	r2, r3
 800175c:	d00b      	beq.n	8001776 <BSP_AUDIO_OUT_MspInit+0x9e>
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2102      	movs	r1, #2
 8001762:	2039      	movs	r0, #57	; 0x39
 8001764:	f002 fbec 	bl	8003f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8001768:	2039      	movs	r0, #57	; 0x39
 800176a:	f002 fc1b 	bl	8003fa4 <HAL_NVIC_EnableIRQ>
}
 800176e:	b00a      	add	sp, #40	; 0x28
 8001770:	bd70      	pop	{r4, r5, r6, pc}
  resolution= (Params != NULL)? *((uint8_t*)Params):16;
 8001772:	2110      	movs	r1, #16
 8001774:	e7ef      	b.n	8001756 <BSP_AUDIO_OUT_MspInit+0x7e>
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <BSP_AUDIO_OUT_MspInit+0x120>)
 8001778:	2200      	movs	r2, #0
 800177a:	665a      	str	r2, [r3, #100]	; 0x64
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800177c:	2040      	movs	r0, #64	; 0x40
 800177e:	6698      	str	r0, [r3, #104]	; 0x68
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001780:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001782:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001786:	671a      	str	r2, [r3, #112]	; 0x70
    if(resolution == 24)
 8001788:	2918      	cmp	r1, #24
 800178a:	d025      	beq.n	80017d8 <BSP_AUDIO_OUT_MspInit+0x100>
      hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE_16;
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <BSP_AUDIO_OUT_MspInit+0x120>)
 800178e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001792:	675a      	str	r2, [r3, #116]	; 0x74
      hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE_16;
 8001794:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001798:	679a      	str	r2, [r3, #120]	; 0x78
    hdma_sai_tx.Init.Mode                = DMA_NORMAL;
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <BSP_AUDIO_OUT_MspInit+0x120>)
 800179c:	2200      	movs	r2, #0
 800179e:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 80017a0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80017a4:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80017a8:	2104      	movs	r1, #4
 80017aa:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80017ae:	2103      	movs	r1, #3
 80017b0:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80017b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80017b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80017bc:	461c      	mov	r4, r3
 80017be:	4a0f      	ldr	r2, [pc, #60]	; (80017fc <BSP_AUDIO_OUT_MspInit+0x124>)
 80017c0:	f844 2f60 	str.w	r2, [r4, #96]!
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80017c4:	66f4      	str	r4, [r6, #108]	; 0x6c
 80017c6:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
    HAL_DMA_DeInit(&hdma_sai_tx);
 80017ca:	4620      	mov	r0, r4
 80017cc:	f002 fcf0 	bl	80041b0 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);
 80017d0:	4620      	mov	r0, r4
 80017d2:	f002 fc87 	bl	80040e4 <HAL_DMA_Init>
 80017d6:	e7c2      	b.n	800175e <BSP_AUDIO_OUT_MspInit+0x86>
      hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE_24;
 80017d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017dc:	675a      	str	r2, [r3, #116]	; 0x74
      hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE_24;
 80017de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017e2:	679a      	str	r2, [r3, #120]	; 0x78
 80017e4:	e7d9      	b.n	800179a <BSP_AUDIO_OUT_MspInit+0xc2>
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40021800 	.word	0x40021800
 80017f4:	40015804 	.word	0x40015804
 80017f8:	200001ec 	.word	0x200001ec
 80017fc:	40026428 	.word	0x40026428

08001800 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8001800:	b510      	push	{r4, lr}
 8001802:	b0a4      	sub	sp, #144	; 0x90
 8001804:	460c      	mov	r4, r1
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001806:	4668      	mov	r0, sp
 8001808:	f006 fc9c 	bl	8008144 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800180c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001810:	f245 6322 	movw	r3, #22050	; 0x5622
 8001814:	429c      	cmp	r4, r3
 8001816:	bf18      	it	ne
 8001818:	4294      	cmpne	r4, r2
 800181a:	d003      	beq.n	8001824 <BSP_AUDIO_OUT_ClockConfig+0x24>
 800181c:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001820:	429c      	cmp	r4, r3
 8001822:	d111      	bne.n	8001848 <BSP_AUDIO_OUT_ClockConfig+0x48>
  {
    /* Configure PLLSAI prescalers */
    /* PLLSAI_VCO: VCO_429M 
    SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 214.5/19 = 11.289 Mhz */ 
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001824:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001828:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 800182a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800182e:	930f      	str	r3, [sp, #60]	; 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8001830:	f240 13ad 	movw	r3, #429	; 0x1ad
 8001834:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8001836:	2302      	movs	r3, #2
 8001838:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800183a:	2313      	movs	r3, #19
 800183c:	9309      	str	r3, [sp, #36]	; 0x24
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800183e:	4668      	mov	r0, sp
 8001840:	f006 f87e 	bl	8007940 <HAL_RCCEx_PeriphCLKConfig>
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
  }
}
 8001844:	b024      	add	sp, #144	; 0x90
 8001846:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001848:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800184c:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 800184e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001852:	930f      	str	r3, [sp, #60]	; 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344; 
 8001854:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001858:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
 800185a:	2307      	movs	r3, #7
 800185c:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
 800185e:	2301      	movs	r3, #1
 8001860:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001862:	4668      	mov	r0, sp
 8001864:	f006 f86c 	bl	8007940 <HAL_RCCEx_PeriphCLKConfig>
}
 8001868:	e7ec      	b.n	8001844 <BSP_AUDIO_OUT_ClockConfig+0x44>

0800186a <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai : SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800186a:	b508      	push	{r3, lr}
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 800186c:	f00c f90e 	bl	800da8c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001870:	bd08      	pop	{r3, pc}

08001872 <HAL_SAI_RxHalfCpltCallback>:
{
 8001872:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8001874:	f00c f916 	bl	800daa4 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8001878:	bd08      	pop	{r3, pc}

0800187a <BSP_AUDIO_IN_Error_CallBack>:
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 800187a:	4770      	bx	lr

0800187c <HAL_SAI_ErrorCallback>:
{
 800187c:	b508      	push	{r3, lr}
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800187e:	6802      	ldr	r2, [r0, #0]
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <HAL_SAI_ErrorCallback+0x18>)
 8001882:	429a      	cmp	r2, r3
 8001884:	d002      	beq.n	800188c <HAL_SAI_ErrorCallback+0x10>
    BSP_AUDIO_IN_Error_CallBack();
 8001886:	f7ff fff8 	bl	800187a <BSP_AUDIO_IN_Error_CallBack>
}
 800188a:	bd08      	pop	{r3, pc}
  BSP_AUDIO_OUT_Error_CallBack();
 800188c:	f7ff ff22 	bl	80016d4 <BSP_AUDIO_OUT_Error_CallBack>
 8001890:	e7fb      	b.n	800188a <HAL_SAI_ErrorCallback+0xe>
 8001892:	bf00      	nop
 8001894:	40015804 	.word	0x40015804

08001898 <LCD_IO_GetID>:
    return 0;
  }
#else 
  return LCD_DSI_ID; 
#endif /* USE_LCD_HDMI */
}
 8001898:	2011      	movs	r0, #17
 800189a:	4770      	bx	lr

0800189c <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 800189c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800189e:	b083      	sub	sp, #12
 80018a0:	4604      	mov	r4, r0
 80018a2:	460d      	mov	r5, r1
 80018a4:	4616      	mov	r6, r2
 80018a6:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80018a8:	4811      	ldr	r0, [pc, #68]	; (80018f0 <LL_FillBuffer+0x54>)
 80018aa:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80018ae:	6043      	str	r3, [r0, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80018b0:	2300      	movs	r3, #0
 80018b2:	6083      	str	r3, [r0, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 80018b4:	9b08      	ldr	r3, [sp, #32]
 80018b6:	60c3      	str	r3, [r0, #12]

  hdma2d_discovery.Instance = DMA2D;
 80018b8:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <LL_FillBuffer+0x58>)
 80018ba:	6003      	str	r3, [r0, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80018bc:	f002 fe2a 	bl	8004514 <HAL_DMA2D_Init>
 80018c0:	b108      	cbz	r0, 80018c6 <LL_FillBuffer+0x2a>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
      }
    }
  }
}
 80018c2:	b003      	add	sp, #12
 80018c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 80018c6:	4621      	mov	r1, r4
 80018c8:	4809      	ldr	r0, [pc, #36]	; (80018f0 <LL_FillBuffer+0x54>)
 80018ca:	f002 ff19 	bl	8004700 <HAL_DMA2D_ConfigLayer>
 80018ce:	2800      	cmp	r0, #0
 80018d0:	d1f7      	bne.n	80018c2 <LL_FillBuffer+0x26>
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80018d2:	9700      	str	r7, [sp, #0]
 80018d4:	4633      	mov	r3, r6
 80018d6:	462a      	mov	r2, r5
 80018d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <LL_FillBuffer+0x54>)
 80018dc:	f002 fe54 	bl	8004588 <HAL_DMA2D_Start>
 80018e0:	2800      	cmp	r0, #0
 80018e2:	d1ee      	bne.n	80018c2 <LL_FillBuffer+0x26>
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 80018e4:	210a      	movs	r1, #10
 80018e6:	4802      	ldr	r0, [pc, #8]	; (80018f0 <LL_FillBuffer+0x54>)
 80018e8:	f002 fe6a 	bl	80045c0 <HAL_DMA2D_PollForTransfer>
}
 80018ec:	e7e9      	b.n	80018c2 <LL_FillBuffer+0x26>
 80018ee:	bf00      	nop
 80018f0:	20001c54 	.word	0x20001c54
 80018f4:	4002b000 	.word	0x4002b000

080018f8 <BSP_LCD_Reset>:
{
 80018f8:	b570      	push	{r4, r5, r6, lr}
 80018fa:	b086      	sub	sp, #24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <BSP_LCD_Reset+0x58>)
 80018fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001904:	631a      	str	r2, [r3, #48]	; 0x30
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8001910:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8001914:	9501      	str	r5, [sp, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001916:	2601      	movs	r6, #1
 8001918:	9602      	str	r6, [sp, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 800191a:	9603      	str	r6, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8001920:	4c0c      	ldr	r4, [pc, #48]	; (8001954 <BSP_LCD_Reset+0x5c>)
 8001922:	a901      	add	r1, sp, #4
 8001924:	4620      	mov	r0, r4
 8001926:	f003 fa61 	bl	8004dec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	4629      	mov	r1, r5
 800192e:	4620      	mov	r0, r4
 8001930:	f003 fb53 	bl	8004fda <HAL_GPIO_WritePin>
    HAL_Delay(20); /* wait 20 ms */
 8001934:	2014      	movs	r0, #20
 8001936:	f002 fae3 	bl	8003f00 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 800193a:	4632      	mov	r2, r6
 800193c:	4629      	mov	r1, r5
 800193e:	4620      	mov	r0, r4
 8001940:	f003 fb4b 	bl	8004fda <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001944:	200a      	movs	r0, #10
 8001946:	f002 fadb 	bl	8003f00 <HAL_Delay>
}
 800194a:	b006      	add	sp, #24
 800194c:	bd70      	pop	{r4, r5, r6, pc}
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800
 8001954:	40022400 	.word	0x40022400

08001958 <BSP_LCD_GetXSize>:
}
 8001958:	4b01      	ldr	r3, [pc, #4]	; (8001960 <BSP_LCD_GetXSize+0x8>)
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000058 	.word	0x20000058

08001964 <BSP_LCD_GetYSize>:
}
 8001964:	4b01      	ldr	r3, [pc, #4]	; (800196c <BSP_LCD_GetYSize+0x8>)
 8001966:	6858      	ldr	r0, [r3, #4]
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000058 	.word	0x20000058

08001970 <BSP_LCD_LayerDefaultInit>:
{
 8001970:	b570      	push	{r4, r5, r6, lr}
 8001972:	b08e      	sub	sp, #56	; 0x38
 8001974:	4604      	mov	r4, r0
 8001976:	460e      	mov	r6, r1
  Layercfg.WindowX0 = 0;
 8001978:	2500      	movs	r5, #0
 800197a:	9501      	str	r5, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800197c:	f7ff ffec 	bl	8001958 <BSP_LCD_GetXSize>
 8001980:	9002      	str	r0, [sp, #8]
  Layercfg.WindowY0 = 0;
 8001982:	9503      	str	r5, [sp, #12]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001984:	f7ff ffee 	bl	8001964 <BSP_LCD_GetYSize>
 8001988:	9004      	str	r0, [sp, #16]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800198a:	9505      	str	r5, [sp, #20]
  Layercfg.FBStartAdress = FB_Address;
 800198c:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.Alpha = 255;
 800198e:	23ff      	movs	r3, #255	; 0xff
 8001990:	9306      	str	r3, [sp, #24]
  Layercfg.Alpha0 = 0;
 8001992:	9507      	str	r5, [sp, #28]
  Layercfg.Backcolor.Blue = 0;
 8001994:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  Layercfg.Backcolor.Green = 0;
 8001998:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  Layercfg.Backcolor.Red = 0;
 800199c:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80019a0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019a4:	9308      	str	r3, [sp, #32]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80019a6:	2307      	movs	r3, #7
 80019a8:	9309      	str	r3, [sp, #36]	; 0x24
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80019aa:	f7ff ffd5 	bl	8001958 <BSP_LCD_GetXSize>
 80019ae:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80019b0:	f7ff ffd8 	bl	8001964 <BSP_LCD_GetYSize>
 80019b4:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 80019b6:	4622      	mov	r2, r4
 80019b8:	a901      	add	r1, sp, #4
 80019ba:	4809      	ldr	r0, [pc, #36]	; (80019e0 <BSP_LCD_LayerDefaultInit+0x70>)
 80019bc:	f004 ff24 	bl	8006808 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80019c0:	4808      	ldr	r0, [pc, #32]	; (80019e4 <BSP_LCD_LayerDefaultInit+0x74>)
 80019c2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80019c6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80019ca:	f04f 32ff 	mov.w	r2, #4294967295
 80019ce:	609a      	str	r2, [r3, #8]
  DrawProp[LayerIndex].pFont     = &Font24;
 80019d0:	4a05      	ldr	r2, [pc, #20]	; (80019e8 <BSP_LCD_LayerDefaultInit+0x78>)
 80019d2:	60da      	str	r2, [r3, #12]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80019d4:	461c      	mov	r4, r3
 80019d6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80019da:	6063      	str	r3, [r4, #4]
}
 80019dc:	b00e      	add	sp, #56	; 0x38
 80019de:	bd70      	pop	{r4, r5, r6, pc}
 80019e0:	20001cac 	.word	0x20001cac
 80019e4:	200002e4 	.word	0x200002e4
 80019e8:	20000060 	.word	0x20000060

080019ec <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80019ec:	4b01      	ldr	r3, [pc, #4]	; (80019f4 <BSP_LCD_SelectLayer+0x8>)
 80019ee:	6018      	str	r0, [r3, #0]
}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	200002e4 	.word	0x200002e4

080019f8 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <BSP_LCD_SetTextColor+0x10>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001a00:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001a04:	6058      	str	r0, [r3, #4]
}
 8001a06:	4770      	bx	lr
 8001a08:	200002e4 	.word	0x200002e4

08001a0c <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <BSP_LCD_SetBackColor+0x10>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001a14:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001a18:	6098      	str	r0, [r3, #8]
}
 8001a1a:	4770      	bx	lr
 8001a1c:	200002e4 	.word	0x200002e4

08001a20 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <BSP_LCD_SetFont+0x10>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001a28:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001a2c:	60d8      	str	r0, [r3, #12]
}
 8001a2e:	4770      	bx	lr
 8001a30:	200002e4 	.word	0x200002e4

08001a34 <BSP_LCD_Clear>:
{
 8001a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a36:	b083      	sub	sp, #12
 8001a38:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <BSP_LCD_Clear+0x34>)
 8001a3c:	681e      	ldr	r6, [r3, #0]
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <BSP_LCD_Clear+0x38>)
 8001a40:	2334      	movs	r3, #52	; 0x34
 8001a42:	fb03 2306 	mla	r3, r3, r6, r2
 8001a46:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8001a48:	f7ff ff86 	bl	8001958 <BSP_LCD_GetXSize>
 8001a4c:	4604      	mov	r4, r0
 8001a4e:	f7ff ff89 	bl	8001964 <BSP_LCD_GetYSize>
 8001a52:	4603      	mov	r3, r0
 8001a54:	9501      	str	r5, [sp, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	9200      	str	r2, [sp, #0]
 8001a5a:	4622      	mov	r2, r4
 8001a5c:	4639      	mov	r1, r7
 8001a5e:	4630      	mov	r0, r6
 8001a60:	f7ff ff1c 	bl	800189c <LL_FillBuffer>
}
 8001a64:	b003      	add	sp, #12
 8001a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a68:	200002e4 	.word	0x200002e4
 8001a6c:	20001cac 	.word	0x20001cac

08001a70 <BSP_LCD_DrawHLine>:
{
 8001a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a74:	b083      	sub	sp, #12
 8001a76:	4680      	mov	r8, r0
 8001a78:	460c      	mov	r4, r1
 8001a7a:	4617      	mov	r7, r2
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001a7c:	4e0e      	ldr	r6, [pc, #56]	; (8001ab8 <BSP_LCD_DrawHLine+0x48>)
 8001a7e:	6835      	ldr	r5, [r6, #0]
 8001a80:	4a0e      	ldr	r2, [pc, #56]	; (8001abc <BSP_LCD_DrawHLine+0x4c>)
 8001a82:	2334      	movs	r3, #52	; 0x34
 8001a84:	fb03 2305 	mla	r3, r3, r5, r2
 8001a88:	f8d3 905c 	ldr.w	r9, [r3, #92]	; 0x5c
 8001a8c:	f7ff ff64 	bl	8001958 <BSP_LCD_GetXSize>
 8001a90:	fb00 8104 	mla	r1, r0, r4, r8
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001a94:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001a98:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	463a      	mov	r2, r7
 8001aa8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8001aac:	4628      	mov	r0, r5
 8001aae:	f7ff fef5 	bl	800189c <LL_FillBuffer>
}
 8001ab2:	b003      	add	sp, #12
 8001ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ab8:	200002e4 	.word	0x200002e4
 8001abc:	20001cac 	.word	0x20001cac

08001ac0 <BSP_LCD_DrawVLine>:
{
 8001ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	4681      	mov	r9, r0
 8001ac8:	460c      	mov	r4, r1
 8001aca:	4616      	mov	r6, r2
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001acc:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8001b10 <BSP_LCD_DrawVLine+0x50>
 8001ad0:	f8d8 5000 	ldr.w	r5, [r8]
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <BSP_LCD_DrawVLine+0x4c>)
 8001ad6:	2334      	movs	r3, #52	; 0x34
 8001ad8:	fb03 2305 	mla	r3, r3, r5, r2
 8001adc:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8001ade:	f7ff ff3b 	bl	8001958 <BSP_LCD_GetXSize>
 8001ae2:	fb00 9104 	mla	r1, r0, r4, r9
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001ae6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001aea:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	3801      	subs	r0, #1
 8001af4:	9000      	str	r0, [sp, #0]
 8001af6:	4633      	mov	r3, r6
 8001af8:	2201      	movs	r2, #1
 8001afa:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8001afe:	4628      	mov	r0, r5
 8001b00:	f7ff fecc 	bl	800189c <LL_FillBuffer>
}
 8001b04:	b003      	add	sp, #12
 8001b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20001cac 	.word	0x20001cac
 8001b10:	200002e4 	.word	0x200002e4

08001b14 <BSP_LCD_DrawRect>:
{
 8001b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b16:	4604      	mov	r4, r0
 8001b18:	460d      	mov	r5, r1
 8001b1a:	4617      	mov	r7, r2
 8001b1c:	461e      	mov	r6, r3
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8001b1e:	f7ff ffa7 	bl	8001a70 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8001b22:	19a9      	adds	r1, r5, r6
 8001b24:	463a      	mov	r2, r7
 8001b26:	b289      	uxth	r1, r1
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f7ff ffa1 	bl	8001a70 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001b2e:	4632      	mov	r2, r6
 8001b30:	4629      	mov	r1, r5
 8001b32:	4620      	mov	r0, r4
 8001b34:	f7ff ffc4 	bl	8001ac0 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001b38:	19e0      	adds	r0, r4, r7
 8001b3a:	4632      	mov	r2, r6
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	b280      	uxth	r0, r0
 8001b40:	f7ff ffbe 	bl	8001ac0 <BSP_LCD_DrawVLine>
}
 8001b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b48 <BSP_LCD_FillRect>:
{
 8001b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	4682      	mov	sl, r0
 8001b50:	460d      	mov	r5, r1
 8001b52:	4617      	mov	r7, r2
 8001b54:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001b56:	4c13      	ldr	r4, [pc, #76]	; (8001ba4 <BSP_LCD_FillRect+0x5c>)
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b5e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001b62:	6858      	ldr	r0, [r3, #4]
 8001b64:	f7ff ff48 	bl	80019f8 <BSP_LCD_SetTextColor>
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001b68:	6826      	ldr	r6, [r4, #0]
 8001b6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <BSP_LCD_FillRect+0x60>)
 8001b6c:	2334      	movs	r3, #52	; 0x34
 8001b6e:	fb03 2306 	mla	r3, r3, r6, r2
 8001b72:	f8d3 905c 	ldr.w	r9, [r3, #92]	; 0x5c
 8001b76:	f7ff feef 	bl	8001958 <BSP_LCD_GetXSize>
 8001b7a:	fb00 a105 	mla	r1, r0, r5, sl
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001b7e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8001b82:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001b86:	6863      	ldr	r3, [r4, #4]
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	1bc0      	subs	r0, r0, r7
 8001b8c:	9000      	str	r0, [sp, #0]
 8001b8e:	4643      	mov	r3, r8
 8001b90:	463a      	mov	r2, r7
 8001b92:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8001b96:	4630      	mov	r0, r6
 8001b98:	f7ff fe80 	bl	800189c <LL_FillBuffer>
}
 8001b9c:	b002      	add	sp, #8
 8001b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200002e4 	.word	0x200002e4
 8001ba8:	20001cac 	.word	0x20001cac

08001bac <DSI_IO_WriteCmd>:
{
 8001bac:	b500      	push	{lr}
 8001bae:	b083      	sub	sp, #12
  if(NbrParams <= 1)
 8001bb0:	2801      	cmp	r0, #1
 8001bb2:	d90b      	bls.n	8001bcc <DSI_IO_WriteCmd+0x20>
 8001bb4:	4603      	mov	r3, r0
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001bb6:	5c0a      	ldrb	r2, [r1, r0]
 8001bb8:	9101      	str	r1, [sp, #4]
 8001bba:	9200      	str	r2, [sp, #0]
 8001bbc:	2239      	movs	r2, #57	; 0x39
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4807      	ldr	r0, [pc, #28]	; (8001be0 <DSI_IO_WriteCmd+0x34>)
 8001bc2:	f003 f8bb 	bl	8004d3c <HAL_DSI_LongWrite>
}
 8001bc6:	b003      	add	sp, #12
 8001bc8:	f85d fb04 	ldr.w	pc, [sp], #4
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001bcc:	784b      	ldrb	r3, [r1, #1]
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	780b      	ldrb	r3, [r1, #0]
 8001bd2:	2215      	movs	r2, #21
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4802      	ldr	r0, [pc, #8]	; (8001be0 <DSI_IO_WriteCmd+0x34>)
 8001bd8:	f003 f89d 	bl	8004d16 <HAL_DSI_ShortWrite>
 8001bdc:	e7f3      	b.n	8001bc6 <DSI_IO_WriteCmd+0x1a>
 8001bde:	bf00      	nop
 8001be0:	20001d54 	.word	0x20001d54

08001be4 <BSP_LCD_MspInit>:
{
 8001be4:	b500      	push	{lr}
 8001be6:	b085      	sub	sp, #20
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001be8:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <BSP_LCD_MspInit+0xa4>)
 8001bea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bec:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001bf0:	645a      	str	r2, [r3, #68]	; 0x44
 8001bf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bf4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001bf8:	9201      	str	r2, [sp, #4]
 8001bfa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_LTDC_FORCE_RESET();
 8001bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bfe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001c04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c06:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c0e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
 8001c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c16:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001c1a:	9202      	str	r2, [sp, #8]
 8001c1c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c24:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001c2c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DSI_CLK_ENABLE();
 8001c2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c30:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001c34:	645a      	str	r2, [r3, #68]	; 0x44
 8001c36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c38:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001c3c:	9203      	str	r2, [sp, #12]
 8001c3e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DSI_FORCE_RESET();
 8001c40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c42:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c4a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2103      	movs	r1, #3
 8001c54:	2058      	movs	r0, #88	; 0x58
 8001c56:	f002 f973 	bl	8003f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001c5a:	2058      	movs	r0, #88	; 0x58
 8001c5c:	f002 f9a2 	bl	8003fa4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2103      	movs	r1, #3
 8001c64:	205a      	movs	r0, #90	; 0x5a
 8001c66:	f002 f96b 	bl	8003f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001c6a:	205a      	movs	r0, #90	; 0x5a
 8001c6c:	f002 f99a 	bl	8003fa4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2103      	movs	r1, #3
 8001c74:	2062      	movs	r0, #98	; 0x62
 8001c76:	f002 f963 	bl	8003f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001c7a:	2062      	movs	r0, #98	; 0x62
 8001c7c:	f002 f992 	bl	8003fa4 <HAL_NVIC_EnableIRQ>
}
 8001c80:	b005      	add	sp, #20
 8001c82:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800

08001c8c <BSP_LCD_InitEx>:
{
 8001c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	4607      	mov	r7, r0
  BSP_LCD_Reset();
 8001c94:	f7ff fe30 	bl	80018f8 <BSP_LCD_Reset>
  read_id = LCD_IO_GetID();
 8001c98:	f7ff fdfe 	bl	8001898 <LCD_IO_GetID>
  if(read_id != LCD_DSI_ID)
 8001c9c:	2811      	cmp	r0, #17
 8001c9e:	d003      	beq.n	8001ca8 <BSP_LCD_InitEx+0x1c>
    return LCD_ERROR;  
 8001ca0:	2001      	movs	r0, #1
}
 8001ca2:	b004      	add	sp, #16
 8001ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  BSP_LCD_MspInit();
 8001ca8:	f7ff ff9c 	bl	8001be4 <BSP_LCD_MspInit>
  hdsi_discovery.Instance = DSI;
 8001cac:	4c58      	ldr	r4, [pc, #352]	; (8001e10 <BSP_LCD_InitEx+0x184>)
 8001cae:	4b59      	ldr	r3, [pc, #356]	; (8001e14 <BSP_LCD_InitEx+0x188>)
 8001cb0:	6023      	str	r3, [r4, #0]
  HAL_DSI_DeInit(&(hdsi_discovery));
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f002 fe85 	bl	80049c2 <HAL_DSI_DeInit>
  dsiPllInit.PLLNDIV  = 100;
 8001cb8:	2364      	movs	r3, #100	; 0x64
 8001cba:	9301      	str	r3, [sp, #4]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8001cbc:	2305      	movs	r3, #5
 8001cbe:	9302      	str	r3, [sp, #8]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	9303      	str	r3, [sp, #12]
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	60e3      	str	r3, [r4, #12]
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001cc8:	2304      	movs	r3, #4
 8001cca:	60a3      	str	r3, [r4, #8]
  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8001ccc:	eb0d 0103 	add.w	r1, sp, r3
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	f002 fdb1 	bl	8004838 <HAL_DSI_Init>
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8001cd6:	2f00      	cmp	r7, #0
 8001cd8:	f040 8092 	bne.w	8001e00 <BSP_LCD_InitEx+0x174>
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8001cdc:	4b4e      	ldr	r3, [pc, #312]	; (8001e18 <BSP_LCD_InitEx+0x18c>)
 8001cde:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ce2:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8001ce4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001ce8:	605a      	str	r2, [r3, #4]
  HACT = lcd_x_size;
 8001cea:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8001e18 <BSP_LCD_InitEx+0x18c>
 8001cee:	f8d8 3000 	ldr.w	r3, [r8]
  VACT = lcd_y_size;
 8001cf2:	f8d8 2004 	ldr.w	r2, [r8, #4]
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8001cf6:	4c49      	ldr	r4, [pc, #292]	; (8001e1c <BSP_LCD_InitEx+0x190>)
 8001cf8:	2500      	movs	r5, #0
 8001cfa:	61e5      	str	r5, [r4, #28]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8001cfc:	2105      	movs	r1, #5
 8001cfe:	6221      	str	r1, [r4, #32]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8001d00:	63e5      	str	r5, [r4, #60]	; 0x3c
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8001d02:	63a5      	str	r5, [r4, #56]	; 0x38
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8001d04:	6425      	str	r5, [r4, #64]	; 0x40
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8001d06:	2102      	movs	r1, #2
 8001d08:	62a1      	str	r1, [r4, #40]	; 0x28
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8001d0a:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001d0e:	6361      	str	r1, [r4, #52]	; 0x34
  hdsivideo_handle.NumberOfChunks = 0;
 8001d10:	6325      	str	r5, [r4, #48]	; 0x30
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8001d12:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8001d14:	218f      	movs	r1, #143	; 0x8f
 8001d16:	6461      	str	r1, [r4, #68]	; 0x44
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8001d18:	f240 1111 	movw	r1, #273	; 0x111
 8001d1c:	64a1      	str	r1, [r4, #72]	; 0x48
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8001d1e:	f203 112f 	addw	r1, r3, #303	; 0x12f
 8001d22:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001d26:	fb03 f301 	mul.w	r3, r3, r1
 8001d2a:	493d      	ldr	r1, [pc, #244]	; (8001e20 <BSP_LCD_InitEx+0x194>)
 8001d2c:	fba1 1303 	umull	r1, r3, r1, r3
 8001d30:	0b5b      	lsrs	r3, r3, #13
 8001d32:	64e3      	str	r3, [r4, #76]	; 0x4c
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8001d34:	230c      	movs	r3, #12
 8001d36:	6523      	str	r3, [r4, #80]	; 0x50
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8001d38:	6563      	str	r3, [r4, #84]	; 0x54
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001d3a:	65a3      	str	r3, [r4, #88]	; 0x58
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8001d3c:	65e2      	str	r2, [r4, #92]	; 0x5c
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8001d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d42:	6623      	str	r3, [r4, #96]	; 0x60
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001d44:	2310      	movs	r3, #16
 8001d46:	6663      	str	r3, [r4, #100]	; 0x64
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8001d48:	66a5      	str	r5, [r4, #104]	; 0x68
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8001d4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d4e:	66e3      	str	r3, [r4, #108]	; 0x6c
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d54:	6723      	str	r3, [r4, #112]	; 0x70
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8001d56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d5a:	6763      	str	r3, [r4, #116]	; 0x74
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8001d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d60:	67a3      	str	r3, [r4, #120]	; 0x78
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8001d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d66:	67e3      	str	r3, [r4, #124]	; 0x7c
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8001d68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d6c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8001d70:	f104 0a1c 	add.w	sl, r4, #28
 8001d74:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001e10 <BSP_LCD_InitEx+0x184>
 8001d78:	4651      	mov	r1, sl
 8001d7a:	4648      	mov	r0, r9
 8001d7c:	f002 fe70 	bl	8004a60 <HAL_DSI_ConfigVideoMode>
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8001d80:	4e28      	ldr	r6, [pc, #160]	; (8001e24 <BSP_LCD_InitEx+0x198>)
 8001d82:	233e      	movs	r3, #62	; 0x3e
 8001d84:	6173      	str	r3, [r6, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8001d86:	23b6      	movs	r3, #182	; 0xb6
 8001d88:	61f3      	str	r3, [r6, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8001d8a:	f8d8 3000 	ldr.w	r3, [r8]
 8001d8e:	f103 02b6 	add.w	r2, r3, #182	; 0xb6
 8001d92:	6272      	str	r2, [r6, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8001d94:	f503 7297 	add.w	r2, r3, #302	; 0x12e
 8001d98:	62f2      	str	r2, [r6, #44]	; 0x2c
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8001d9a:	6633      	str	r3, [r6, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8001d9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001da0:	6673      	str	r3, [r6, #100]	; 0x64
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001da2:	2308      	movs	r3, #8
 8001da4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001da8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001dac:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8001db0:	2307      	movs	r3, #7
 8001db2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001db6:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001dba:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8001dbe:	f005 fdbf 	bl	8007940 <HAL_RCCEx_PeriphCLKConfig>
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8001dc2:	f886 5034 	strb.w	r5, [r6, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8001dc6:	f886 5035 	strb.w	r5, [r6, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8001dca:	f886 5036 	strb.w	r5, [r6, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001dce:	6135      	str	r5, [r6, #16]
  hltdc_discovery.Instance = LTDC;
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <BSP_LCD_InitEx+0x19c>)
 8001dd2:	6033      	str	r3, [r6, #0]
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8001dd4:	4651      	mov	r1, sl
 8001dd6:	4630      	mov	r0, r6
 8001dd8:	f004 fd44 	bl	8006864 <HAL_LTDCEx_StructInitFromVideoConfig>
  HAL_LTDC_Init(&hltdc_discovery);
 8001ddc:	4630      	mov	r0, r6
 8001dde:	f004 fc99 	bl	8006714 <HAL_LTDC_Init>
  HAL_DSI_Start(&hdsi_discovery);
 8001de2:	4648      	mov	r0, r9
 8001de4:	f002 ff70 	bl	8004cc8 <HAL_DSI_Start>
  BSP_SDRAM_Init();
 8001de8:	f000 fc12 	bl	8002610 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001dec:	f108 0008 	add.w	r0, r8, #8
 8001df0:	f7ff fe16 	bl	8001a20 <BSP_LCD_SetFont>
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8001df4:	4639      	mov	r1, r7
 8001df6:	4628      	mov	r0, r5
 8001df8:	f7fe fb0e 	bl	8000418 <OTM8009A_Init>
  return LCD_OK; 
 8001dfc:	4628      	mov	r0, r5
 8001dfe:	e750      	b.n	8001ca2 <BSP_LCD_InitEx+0x16>
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <BSP_LCD_InitEx+0x18c>)
 8001e02:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e06:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8001e08:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	e76c      	b.n	8001cea <BSP_LCD_InitEx+0x5e>
 8001e10:	20001d54 	.word	0x20001d54
 8001e14:	40016c00 	.word	0x40016c00
 8001e18:	20000058 	.word	0x20000058
 8001e1c:	200002e4 	.word	0x200002e4
 8001e20:	4c751ce3 	.word	0x4c751ce3
 8001e24:	20001cac 	.word	0x20001cac
 8001e28:	40016800 	.word	0x40016800

08001e2c <BSP_LCD_Init>:
{
 8001e2c:	b508      	push	{r3, lr}
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f7ff ff2c 	bl	8001c8c <BSP_LCD_InitEx>
}
 8001e34:	bd08      	pop	{r3, pc}
	...

08001e38 <BSP_LCD_DrawPixel>:
{
 8001e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3a:	4606      	mov	r6, r0
 8001e3c:	460c      	mov	r4, r1
 8001e3e:	4615      	mov	r5, r2
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <BSP_LCD_DrawPixel+0x24>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a06      	ldr	r2, [pc, #24]	; (8001e60 <BSP_LCD_DrawPixel+0x28>)
 8001e46:	2134      	movs	r1, #52	; 0x34
 8001e48:	fb01 2303 	mla	r3, r1, r3, r2
 8001e4c:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8001e4e:	f7ff fd83 	bl	8001958 <BSP_LCD_GetXSize>
 8001e52:	fb00 6004 	mla	r0, r0, r4, r6
 8001e56:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
}
 8001e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e5c:	200002e4 	.word	0x200002e4
 8001e60:	20001cac 	.word	0x20001cac

08001e64 <DrawChar>:
{
 8001e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	4681      	mov	r9, r0
 8001e6c:	460e      	mov	r6, r1
 8001e6e:	9200      	str	r2, [sp, #0]
  height = DrawProp[ActiveLayer].pFont->Height;
 8001e70:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <DrawChar+0xdc>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e78:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	88da      	ldrh	r2, [r3, #6]
 8001e80:	9201      	str	r2, [sp, #4]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001e82:	889d      	ldrh	r5, [r3, #4]
  offset =  8 *((width + 7)/8) -  width ;
 8001e84:	f105 0b07 	add.w	fp, r5, #7
 8001e88:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8001e8c:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 8001e90:	fa5f f888 	uxtb.w	r8, r8
 8001e94:	b2eb      	uxtb	r3, r5
 8001e96:	eba8 0803 	sub.w	r8, r8, r3
 8001e9a:	fa5f f888 	uxtb.w	r8, r8
  for(i = 0; i < height; i++)
 8001e9e:	f04f 0a00 	mov.w	sl, #0
 8001ea2:	e033      	b.n	8001f0c <DrawChar+0xa8>
      line =  pchar[0];
 8001ea4:	9a00      	ldr	r2, [sp, #0]
 8001ea6:	5cd7      	ldrb	r7, [r2, r3]
    for (j = 0; j < width; j++)
 8001ea8:	2400      	movs	r4, #0
 8001eaa:	e013      	b.n	8001ed4 <DrawChar+0x70>
      line =  (pchar[0]<< 8) | pchar[1];
 8001eac:	9900      	ldr	r1, [sp, #0]
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	7857      	ldrb	r7, [r2, #1]
 8001eb2:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      break;
 8001eb6:	e7f7      	b.n	8001ea8 <DrawChar+0x44>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <DrawChar+0xdc>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001ec0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001ec4:	eb09 0004 	add.w	r0, r9, r4
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	4631      	mov	r1, r6
 8001ecc:	b280      	uxth	r0, r0
 8001ece:	f7ff ffb3 	bl	8001e38 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001ed2:	3401      	adds	r4, #1
 8001ed4:	42a5      	cmp	r5, r4
 8001ed6:	d915      	bls.n	8001f04 <DrawChar+0xa0>
      if(line & (1 << (width- j + offset- 1)))
 8001ed8:	1b2b      	subs	r3, r5, r4
 8001eda:	4443      	add	r3, r8
 8001edc:	3b01      	subs	r3, #1
 8001ede:	2201      	movs	r2, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	423b      	tst	r3, r7
 8001ee6:	d0e7      	beq.n	8001eb8 <DrawChar+0x54>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001ee8:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <DrawChar+0xdc>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001ef0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001ef4:	eb09 0004 	add.w	r0, r9, r4
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	4631      	mov	r1, r6
 8001efc:	b280      	uxth	r0, r0
 8001efe:	f7ff ff9b 	bl	8001e38 <BSP_LCD_DrawPixel>
 8001f02:	e7e6      	b.n	8001ed2 <DrawChar+0x6e>
    Ypos++;
 8001f04:	3601      	adds	r6, #1
 8001f06:	b2b6      	uxth	r6, r6
  for(i = 0; i < height; i++)
 8001f08:	f10a 0a01 	add.w	sl, sl, #1
 8001f0c:	9b01      	ldr	r3, [sp, #4]
 8001f0e:	4553      	cmp	r3, sl
 8001f10:	d912      	bls.n	8001f38 <DrawChar+0xd4>
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001f12:	fb0a f30b 	mul.w	r3, sl, fp
 8001f16:	9a00      	ldr	r2, [sp, #0]
 8001f18:	441a      	add	r2, r3
    switch(((width + 7)/8))
 8001f1a:	f1bb 0f01 	cmp.w	fp, #1
 8001f1e:	d0c1      	beq.n	8001ea4 <DrawChar+0x40>
 8001f20:	f1bb 0f02 	cmp.w	fp, #2
 8001f24:	d0c2      	beq.n	8001eac <DrawChar+0x48>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001f26:	9900      	ldr	r1, [sp, #0]
 8001f28:	5ccb      	ldrb	r3, [r1, r3]
 8001f2a:	7857      	ldrb	r7, [r2, #1]
 8001f2c:	023f      	lsls	r7, r7, #8
 8001f2e:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8001f32:	7893      	ldrb	r3, [r2, #2]
 8001f34:	431f      	orrs	r7, r3
      break;
 8001f36:	e7b7      	b.n	8001ea8 <DrawChar+0x44>
}
 8001f38:	b003      	add	sp, #12
 8001f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f3e:	bf00      	nop
 8001f40:	200002e4 	.word	0x200002e4

08001f44 <BSP_LCD_DisplayChar>:
{
 8001f44:	b538      	push	{r3, r4, r5, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <BSP_LCD_DisplayChar+0x2c>)
 8001f48:	681c      	ldr	r4, [r3, #0]
 8001f4a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001f4e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001f52:	68dc      	ldr	r4, [r3, #12]
 8001f54:	6825      	ldr	r5, [r4, #0]
 8001f56:	3a20      	subs	r2, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001f58:	88e3      	ldrh	r3, [r4, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001f5a:	fb03 f202 	mul.w	r2, r3, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001f5e:	88a3      	ldrh	r3, [r4, #4]
 8001f60:	3307      	adds	r3, #7
 8001f62:	10db      	asrs	r3, r3, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001f64:	fb03 5202 	mla	r2, r3, r2, r5
 8001f68:	f7ff ff7c 	bl	8001e64 <DrawChar>
}
 8001f6c:	bd38      	pop	{r3, r4, r5, pc}
 8001f6e:	bf00      	nop
 8001f70:	200002e4 	.word	0x200002e4

08001f74 <BSP_LCD_DisplayStringAt>:
{
 8001f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f78:	4605      	mov	r5, r0
 8001f7a:	4688      	mov	r8, r1
 8001f7c:	4616      	mov	r6, r2
 8001f7e:	461f      	mov	r7, r3
  uint32_t size = 0, xsize = 0;
 8001f80:	2400      	movs	r4, #0
  while (*ptr++) size ++ ;
 8001f82:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001f86:	b109      	cbz	r1, 8001f8c <BSP_LCD_DisplayStringAt+0x18>
 8001f88:	3401      	adds	r4, #1
 8001f8a:	e7fa      	b.n	8001f82 <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001f8c:	f7ff fce4 	bl	8001958 <BSP_LCD_GetXSize>
 8001f90:	4b26      	ldr	r3, [pc, #152]	; (800202c <BSP_LCD_DisplayStringAt+0xb8>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001f98:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	889b      	ldrh	r3, [r3, #4]
 8001fa0:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (Mode)
 8001fa4:	2f01      	cmp	r7, #1
 8001fa6:	d02e      	beq.n	8002006 <BSP_LCD_DisplayStringAt+0x92>
 8001fa8:	2f02      	cmp	r7, #2
 8001faa:	d034      	beq.n	8002016 <BSP_LCD_DisplayStringAt+0xa2>
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001fac:	b22b      	sxth	r3, r5
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	dd38      	ble.n	8002024 <BSP_LCD_DisplayStringAt+0xb0>
    refcolumn = 1;
 8001fb2:	2400      	movs	r4, #0
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001fb4:	7837      	ldrb	r7, [r6, #0]
 8001fb6:	f7ff fccf 	bl	8001958 <BSP_LCD_GetXSize>
 8001fba:	4b1c      	ldr	r3, [pc, #112]	; (800202c <BSP_LCD_DisplayStringAt+0xb8>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001fc2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	889a      	ldrh	r2, [r3, #4]
 8001fca:	fb02 0314 	mls	r3, r2, r4, r0
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	bf34      	ite	cc
 8001fd4:	2300      	movcc	r3, #0
 8001fd6:	2301      	movcs	r3, #1
 8001fd8:	2f00      	cmp	r7, #0
 8001fda:	bf08      	it	eq
 8001fdc:	2300      	moveq	r3, #0
 8001fde:	b31b      	cbz	r3, 8002028 <BSP_LCD_DisplayStringAt+0xb4>
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001fe0:	463a      	mov	r2, r7
 8001fe2:	4641      	mov	r1, r8
 8001fe4:	4628      	mov	r0, r5
 8001fe6:	f7ff ffad 	bl	8001f44 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <BSP_LCD_DisplayStringAt+0xb8>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001ff2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	8898      	ldrh	r0, [r3, #4]
 8001ffa:	4405      	add	r5, r0
 8001ffc:	b2ad      	uxth	r5, r5
    Text++;
 8001ffe:	3601      	adds	r6, #1
    i++;
 8002000:	3401      	adds	r4, #1
 8002002:	b2a4      	uxth	r4, r4
 8002004:	e7d6      	b.n	8001fb4 <BSP_LCD_DisplayStringAt+0x40>
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002006:	1b00      	subs	r0, r0, r4
 8002008:	fb00 f303 	mul.w	r3, r0, r3
 800200c:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8002010:	441d      	add	r5, r3
 8002012:	b2ad      	uxth	r5, r5
      break;
 8002014:	e7ca      	b.n	8001fac <BSP_LCD_DisplayStringAt+0x38>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002016:	1b00      	subs	r0, r0, r4
 8002018:	fb10 f303 	smulbb	r3, r0, r3
 800201c:	b29b      	uxth	r3, r3
 800201e:	1b5d      	subs	r5, r3, r5
 8002020:	b2ad      	uxth	r5, r5
      break;
 8002022:	e7c3      	b.n	8001fac <BSP_LCD_DisplayStringAt+0x38>
    refcolumn = 1;
 8002024:	2501      	movs	r5, #1
 8002026:	e7c4      	b.n	8001fb2 <BSP_LCD_DisplayStringAt+0x3e>
}
 8002028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800202c:	200002e4 	.word	0x200002e4

08002030 <BSP_LCD_DrawLine>:
{
 8002030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002034:	b085      	sub	sp, #20
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002036:	eba2 0a00 	sub.w	sl, r2, r0
 800203a:	f1ba 0f00 	cmp.w	sl, #0
 800203e:	bfb8      	it	lt
 8002040:	f1ca 0a00 	rsblt	sl, sl, #0
 8002044:	fa0f fa8a 	sxth.w	sl, sl
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002048:	eba3 0b01 	sub.w	fp, r3, r1
 800204c:	f1bb 0f00 	cmp.w	fp, #0
 8002050:	bfb8      	it	lt
 8002052:	f1cb 0b00 	rsblt	fp, fp, #0
 8002056:	fa0f fb8b 	sxth.w	fp, fp
  x = x1;                       /* Start x off at the first pixel */
 800205a:	b204      	sxth	r4, r0
  y = y1;                       /* Start y off at the first pixel */
 800205c:	b20e      	sxth	r6, r1
  if (x2 >= x1)                 /* The x-values are increasing */
 800205e:	4282      	cmp	r2, r0
 8002060:	d315      	bcc.n	800208e <BSP_LCD_DrawLine+0x5e>
    xinc1 = 1;
 8002062:	2201      	movs	r2, #1
 8002064:	9202      	str	r2, [sp, #8]
  if (y2 >= y1)                 /* The y-values are increasing */
 8002066:	428b      	cmp	r3, r1
 8002068:	d315      	bcc.n	8002096 <BSP_LCD_DrawLine+0x66>
    yinc1 = 1;
 800206a:	2301      	movs	r3, #1
 800206c:	9303      	str	r3, [sp, #12]
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800206e:	45da      	cmp	sl, fp
 8002070:	db18      	blt.n	80020a4 <BSP_LCD_DrawLine+0x74>
    num = deltax / 2;
 8002072:	46d0      	mov	r8, sl
 8002074:	f1ba 0f00 	cmp.w	sl, #0
 8002078:	db11      	blt.n	800209e <BSP_LCD_DrawLine+0x6e>
 800207a:	f348 084f 	sbfx	r8, r8, #1, #16
    numpixels = deltax;         /* There are more x-values than y-values */
 800207e:	9b02      	ldr	r3, [sp, #8]
 8002080:	9300      	str	r3, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002082:	2300      	movs	r3, #0
 8002084:	9302      	str	r3, [sp, #8]
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002086:	9301      	str	r3, [sp, #4]
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002088:	f04f 0900 	mov.w	r9, #0
 800208c:	e026      	b.n	80020dc <BSP_LCD_DrawLine+0xac>
    xinc1 = -1;
 800208e:	f04f 32ff 	mov.w	r2, #4294967295
 8002092:	9202      	str	r2, [sp, #8]
 8002094:	e7e7      	b.n	8002066 <BSP_LCD_DrawLine+0x36>
    yinc1 = -1;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
 800209a:	9303      	str	r3, [sp, #12]
 800209c:	e7e7      	b.n	800206e <BSP_LCD_DrawLine+0x3e>
    num = deltax / 2;
 800209e:	f10a 0801 	add.w	r8, sl, #1
 80020a2:	e7ea      	b.n	800207a <BSP_LCD_DrawLine+0x4a>
    num = deltay / 2;
 80020a4:	46d8      	mov	r8, fp
 80020a6:	f1bb 0f00 	cmp.w	fp, #0
 80020aa:	db0a      	blt.n	80020c2 <BSP_LCD_DrawLine+0x92>
 80020ac:	f348 084f 	sbfx	r8, r8, #1, #16
 80020b0:	4653      	mov	r3, sl
    den = deltay;
 80020b2:	46da      	mov	sl, fp
    numadd = deltax;
 80020b4:	469b      	mov	fp, r3
    num = deltay / 2;
 80020b6:	9b03      	ldr	r3, [sp, #12]
 80020b8:	9301      	str	r3, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80020ba:	2300      	movs	r3, #0
 80020bc:	9303      	str	r3, [sp, #12]
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	e7e2      	b.n	8002088 <BSP_LCD_DrawLine+0x58>
    num = deltay / 2;
 80020c2:	f10b 0801 	add.w	r8, fp, #1
 80020c6:	e7f1      	b.n	80020ac <BSP_LCD_DrawLine+0x7c>
    x += xinc2;                               /* Change the x as appropriate */
 80020c8:	9b00      	ldr	r3, [sp, #0]
 80020ca:	441c      	add	r4, r3
 80020cc:	b224      	sxth	r4, r4
    y += yinc2;                               /* Change the y as appropriate */
 80020ce:	9b01      	ldr	r3, [sp, #4]
 80020d0:	441e      	add	r6, r3
 80020d2:	b236      	sxth	r6, r6
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80020d4:	f109 0901 	add.w	r9, r9, #1
 80020d8:	fa0f f989 	sxth.w	r9, r9
 80020dc:	45ca      	cmp	sl, r9
 80020de:	db1e      	blt.n	800211e <BSP_LCD_DrawLine+0xee>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80020e0:	b2a7      	uxth	r7, r4
 80020e2:	b2b5      	uxth	r5, r6
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <BSP_LCD_DrawLine+0xf4>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80020ec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	4629      	mov	r1, r5
 80020f4:	4638      	mov	r0, r7
 80020f6:	f7ff fe9f 	bl	8001e38 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 80020fa:	44d8      	add	r8, fp
 80020fc:	fa1f f388 	uxth.w	r3, r8
 8002100:	fa0f f888 	sxth.w	r8, r8
    if (num >= den)                           /* Check if numerator >= denominator */
 8002104:	45c2      	cmp	sl, r8
 8002106:	dcdf      	bgt.n	80020c8 <BSP_LCD_DrawLine+0x98>
      num -= den;                             /* Calculate the new numerator value */
 8002108:	eba3 080a 	sub.w	r8, r3, sl
 800210c:	fa0f f888 	sxth.w	r8, r8
      x += xinc1;                             /* Change the x as appropriate */
 8002110:	9b02      	ldr	r3, [sp, #8]
 8002112:	18fc      	adds	r4, r7, r3
 8002114:	b224      	sxth	r4, r4
      y += yinc1;                             /* Change the y as appropriate */
 8002116:	9b03      	ldr	r3, [sp, #12]
 8002118:	18ee      	adds	r6, r5, r3
 800211a:	b236      	sxth	r6, r6
 800211c:	e7d4      	b.n	80020c8 <BSP_LCD_DrawLine+0x98>
}
 800211e:	b005      	add	sp, #20
 8002120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002124:	200002e4 	.word	0x200002e4

08002128 <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8002128:	b500      	push	{lr}
 800212a:	b083      	sub	sp, #12
  __IO uint8_t  status = SD_PRESENT;
 800212c:	2301      	movs	r3, #1
 800212e:	f88d 3007 	strb.w	r3, [sp, #7]

  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8002132:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002136:	4807      	ldr	r0, [pc, #28]	; (8002154 <BSP_SD_IsDetected+0x2c>)
 8002138:	f002 ff48 	bl	8004fcc <HAL_GPIO_ReadPin>
 800213c:	2801      	cmp	r0, #1
 800213e:	d004      	beq.n	800214a <BSP_SD_IsDetected+0x22>
  {
    status = SD_NOT_PRESENT;
  }

    return status;
 8002140:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8002144:	b003      	add	sp, #12
 8002146:	f85d fb04 	ldr.w	pc, [sp], #4
    status = SD_NOT_PRESENT;
 800214a:	2300      	movs	r3, #0
 800214c:	f88d 3007 	strb.w	r3, [sp, #7]
 8002150:	e7f6      	b.n	8002140 <BSP_SD_IsDetected+0x18>
 8002152:	bf00      	nop
 8002154:	40022000 	.word	0x40022000

08002158 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8002158:	b500      	push	{lr}
 800215a:	b083      	sub	sp, #12
  if(HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	4613      	mov	r3, r2
 8002160:	460a      	mov	r2, r1
 8002162:	4601      	mov	r1, r0
 8002164:	4803      	ldr	r0, [pc, #12]	; (8002174 <BSP_SD_ReadBlocks+0x1c>)
 8002166:	f006 fdc3 	bl	8008cf0 <HAL_SD_ReadBlocks>
 800216a:	b100      	cbz	r0, 800216e <BSP_SD_ReadBlocks+0x16>
  {
    return MSD_ERROR;
 800216c:	2001      	movs	r0, #1
  }
  else
  {
    return MSD_OK;
  }
}
 800216e:	b003      	add	sp, #12
 8002170:	f85d fb04 	ldr.w	pc, [sp], #4
 8002174:	20001d70 	.word	0x20001d70

08002178 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8002178:	b500      	push	{lr}
 800217a:	b083      	sub	sp, #12
  if(HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	4613      	mov	r3, r2
 8002180:	460a      	mov	r2, r1
 8002182:	4601      	mov	r1, r0
 8002184:	4803      	ldr	r0, [pc, #12]	; (8002194 <BSP_SD_WriteBlocks+0x1c>)
 8002186:	f006 fee5 	bl	8008f54 <HAL_SD_WriteBlocks>
 800218a:	b100      	cbz	r0, 800218e <BSP_SD_WriteBlocks+0x16>
  {
    return MSD_ERROR;
 800218c:	2001      	movs	r0, #1
  }
  else
  {
    return MSD_OK;
  }
}
 800218e:	b003      	add	sp, #12
 8002190:	f85d fb04 	ldr.w	pc, [sp], #4
 8002194:	20001d70 	.word	0x20001d70

08002198 <BSP_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: SD handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8002198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800219c:	b08b      	sub	sp, #44	; 0x2c
 800219e:	4605      	mov	r5, r0
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDMMC2 clock */
  __HAL_RCC_SDMMC2_CLK_ENABLE();
 80021a0:	4b5e      	ldr	r3, [pc, #376]	; (800231c <BSP_SD_MspInit+0x184>)
 80021a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021a8:	645a      	str	r2, [r3, #68]	; 0x44
 80021aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021ac:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80021b0:	9200      	str	r2, [sp, #0]
 80021b2:	9a00      	ldr	r2, [sp, #0]

  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 80021b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
 80021bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021be:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80021c2:	9201      	str	r2, [sp, #4]
 80021c4:	9a01      	ldr	r2, [sp, #4]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021c8:	f042 0202 	orr.w	r2, r2, #2
 80021cc:	631a      	str	r2, [r3, #48]	; 0x30
 80021ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021d0:	f002 0202 	and.w	r2, r2, #2
 80021d4:	9202      	str	r2, [sp, #8]
 80021d6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021da:	f042 0208 	orr.w	r2, r2, #8
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
 80021e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021e2:	f002 0208 	and.w	r2, r2, #8
 80021e6:	9203      	str	r2, [sp, #12]
 80021e8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021f0:	631a      	str	r2, [r3, #48]	; 0x30
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f8:	9304      	str	r3, [sp, #16]
 80021fa:	9b04      	ldr	r3, [sp, #16]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002200:	2301      	movs	r3, #1
 8002202:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002204:	2703      	movs	r7, #3
 8002206:	9708      	str	r7, [sp, #32]

  /* GPIOB configuration */
  gpio_init_structure.Alternate = GPIO_AF10_SDMMC2;  
 8002208:	230a      	movs	r3, #10
 800220a:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_4;
 800220c:	2318      	movs	r3, #24
 800220e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 8002210:	a905      	add	r1, sp, #20
 8002212:	4843      	ldr	r0, [pc, #268]	; (8002320 <BSP_SD_MspInit+0x188>)
 8002214:	f002 fdea 	bl	8004dec <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Alternate = GPIO_AF11_SDMMC2;  
 8002218:	230b      	movs	r3, #11
 800221a:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800221c:	23c0      	movs	r3, #192	; 0xc0
 800221e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002220:	a905      	add	r1, sp, #20
 8002222:	4840      	ldr	r0, [pc, #256]	; (8002324 <BSP_SD_MspInit+0x18c>)
 8002224:	f002 fde2 	bl	8004dec <HAL_GPIO_Init>
  
  /* GPIOG configuration */ 
  gpio_init_structure.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8002228:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800222c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800222e:	a905      	add	r1, sp, #20
 8002230:	483d      	ldr	r0, [pc, #244]	; (8002328 <BSP_SD_MspInit+0x190>)
 8002232:	f002 fddb 	bl	8004dec <HAL_GPIO_Init>
  
  /* NVIC configuration for SDMMC2 interrupts */
  HAL_NVIC_SetPriority(SDMMC2_IRQn, 0x0E, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	210e      	movs	r1, #14
 800223a:	2067      	movs	r0, #103	; 0x67
 800223c:	f001 fe80 	bl	8003f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC2_IRQn);  
 8002240:	2067      	movs	r0, #103	; 0x67
 8002242:	f001 feaf 	bl	8003fa4 <HAL_NVIC_EnableIRQ>

  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8002246:	4c39      	ldr	r4, [pc, #228]	; (800232c <BSP_SD_MspInit+0x194>)
 8002248:	f04f 5bb0 	mov.w	fp, #369098752	; 0x16000000
 800224c:	f8c4 b004 	str.w	fp, [r4, #4]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002250:	2600      	movs	r6, #0
 8002252:	60a6      	str	r6, [r4, #8]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002254:	60e6      	str	r6, [r4, #12]
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002256:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 800225a:	f8c4 a010 	str.w	sl, [r4, #16]
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800225e:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8002262:	f8c4 9014 	str.w	r9, [r4, #20]
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002266:	f44f 4880 	mov.w	r8, #16384	; 0x4000
 800226a:	f8c4 8018 	str.w	r8, [r4, #24]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 800226e:	2320      	movs	r3, #32
 8002270:	61e3      	str	r3, [r4, #28]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8002272:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002276:	6223      	str	r3, [r4, #32]
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8002278:	2304      	movs	r3, #4
 800227a:	6263      	str	r3, [r4, #36]	; 0x24
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800227c:	62a7      	str	r7, [r4, #40]	; 0x28
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 800227e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002282:	62e3      	str	r3, [r4, #44]	; 0x2c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8002284:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002288:	6323      	str	r3, [r4, #48]	; 0x30

  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 800228a:	4b29      	ldr	r3, [pc, #164]	; (8002330 <BSP_SD_MspInit+0x198>)
 800228c:	6023      	str	r3, [r4, #0]

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 800228e:	642c      	str	r4, [r5, #64]	; 0x40
 8002290:	63a5      	str	r5, [r4, #56]	; 0x38

  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 8002292:	4620      	mov	r0, r4
 8002294:	f001 ff8c 	bl	80041b0 <HAL_DMA_DeInit>

  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 8002298:	4620      	mov	r0, r4
 800229a:	f001 ff23 	bl	80040e4 <HAL_DMA_Init>

  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 800229e:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80022a2:	2340      	movs	r3, #64	; 0x40
 80022a4:	66a3      	str	r3, [r4, #104]	; 0x68
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 80022a6:	66e6      	str	r6, [r4, #108]	; 0x6c
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80022a8:	f8c4 a070 	str.w	sl, [r4, #112]	; 0x70
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022ac:	f8c4 9074 	str.w	r9, [r4, #116]	; 0x74
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80022b0:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 80022b4:	2320      	movs	r3, #32
 80022b6:	67e3      	str	r3, [r4, #124]	; 0x7c
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80022b8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80022bc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80022c0:	2304      	movs	r3, #4
 80022c2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80022c6:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 80022ca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80022ce:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80022d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022d6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90

  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 80022da:	4627      	mov	r7, r4
 80022dc:	4b15      	ldr	r3, [pc, #84]	; (8002334 <BSP_SD_MspInit+0x19c>)
 80022de:	f847 3f60 	str.w	r3, [r7, #96]!

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 80022e2:	63ef      	str	r7, [r5, #60]	; 0x3c
 80022e4:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98

  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 80022e8:	4638      	mov	r0, r7
 80022ea:	f001 ff61 	bl	80041b0 <HAL_DMA_DeInit>

  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle);
 80022ee:	4638      	mov	r0, r7
 80022f0:	f001 fef8 	bl	80040e4 <HAL_DMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 80022f4:	4632      	mov	r2, r6
 80022f6:	210f      	movs	r1, #15
 80022f8:	2038      	movs	r0, #56	; 0x38
 80022fa:	f001 fe21 	bl	8003f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 80022fe:	2038      	movs	r0, #56	; 0x38
 8002300:	f001 fe50 	bl	8003fa4 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8002304:	4632      	mov	r2, r6
 8002306:	210f      	movs	r1, #15
 8002308:	2044      	movs	r0, #68	; 0x44
 800230a:	f001 fe19 	bl	8003f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 800230e:	2044      	movs	r0, #68	; 0x44
 8002310:	f001 fe48 	bl	8003fa4 <HAL_NVIC_EnableIRQ>
}
 8002314:	b00b      	add	sp, #44	; 0x2c
 8002316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800
 8002320:	40020400 	.word	0x40020400
 8002324:	40020c00 	.word	0x40020c00
 8002328:	40021800 	.word	0x40021800
 800232c:	200003fc 	.word	0x200003fc
 8002330:	40026410 	.word	0x40026410
 8002334:	40026488 	.word	0x40026488

08002338 <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.  
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8002338:	b500      	push	{lr}
 800233a:	b087      	sub	sp, #28
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <BSP_SD_Detect_MspInit+0x38>)
 800233e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002344:	631a      	str	r2, [r3, #48]	; 0x30
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	9b00      	ldr	r3, [sp, #0]

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 8002350:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002354:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002356:	2300      	movs	r3, #0
 8002358:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800235a:	2301      	movs	r3, #1
 800235c:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800235e:	2303      	movs	r3, #3
 8002360:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8002362:	a901      	add	r1, sp, #4
 8002364:	4803      	ldr	r0, [pc, #12]	; (8002374 <BSP_SD_Detect_MspInit+0x3c>)
 8002366:	f002 fd41 	bl	8004dec <HAL_GPIO_Init>
}
 800236a:	b007      	add	sp, #28
 800236c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002370:	40023800 	.word	0x40023800
 8002374:	40022000 	.word	0x40022000

08002378 <BSP_SD_Init>:
{
 8002378:	b538      	push	{r3, r4, r5, lr}
    uSdHandle.Instance = SDMMC2;
 800237a:	4813      	ldr	r0, [pc, #76]	; (80023c8 <BSP_SD_Init+0x50>)
 800237c:	4b13      	ldr	r3, [pc, #76]	; (80023cc <BSP_SD_Init+0x54>)
 800237e:	6003      	str	r3, [r0, #0]
    uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002380:	2100      	movs	r1, #0
 8002382:	6041      	str	r1, [r0, #4]
    uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002384:	6081      	str	r1, [r0, #8]
    uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002386:	60c1      	str	r1, [r0, #12]
    uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002388:	6101      	str	r1, [r0, #16]
    uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800238a:	6141      	str	r1, [r0, #20]
    uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 800238c:	6181      	str	r1, [r0, #24]
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 800238e:	f7ff ffd3 	bl	8002338 <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 8002392:	f7ff fec9 	bl	8002128 <BSP_SD_IsDetected>
 8002396:	2801      	cmp	r0, #1
 8002398:	d002      	beq.n	80023a0 <BSP_SD_Init+0x28>
    return MSD_ERROR_SD_NOT_PRESENT;
 800239a:	2402      	movs	r4, #2
}
 800239c:	4620      	mov	r0, r4
 800239e:	bd38      	pop	{r3, r4, r5, pc}
 80023a0:	4604      	mov	r4, r0
  BSP_SD_MspInit(&uSdHandle, NULL);
 80023a2:	4d09      	ldr	r5, [pc, #36]	; (80023c8 <BSP_SD_Init+0x50>)
 80023a4:	2100      	movs	r1, #0
 80023a6:	4628      	mov	r0, r5
 80023a8:	f7ff fef6 	bl	8002198 <BSP_SD_MspInit>
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 80023ac:	4628      	mov	r0, r5
 80023ae:	f007 f878 	bl	80094a2 <HAL_SD_Init>
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d1f2      	bne.n	800239c <BSP_SD_Init+0x24>
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80023b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ba:	4628      	mov	r0, r5
 80023bc:	f007 f89e 	bl	80094fc <HAL_SD_ConfigWideBusOperation>
 80023c0:	2800      	cmp	r0, #0
 80023c2:	d1eb      	bne.n	800239c <BSP_SD_Init+0x24>
      sd_state = MSD_OK;
 80023c4:	4604      	mov	r4, r0
 80023c6:	e7e9      	b.n	800239c <BSP_SD_Init+0x24>
 80023c8:	20001d70 	.word	0x20001d70
 80023cc:	40011c00 	.word	0x40011c00

080023d0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 80023d0:	b508      	push	{r3, lr}
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80023d2:	4803      	ldr	r0, [pc, #12]	; (80023e0 <BSP_SD_GetCardState+0x10>)
 80023d4:	f007 f8e4 	bl	80095a0 <HAL_SD_GetCardState>
}
 80023d8:	3804      	subs	r0, #4
 80023da:	bf18      	it	ne
 80023dc:	2001      	movne	r0, #1
 80023de:	bd08      	pop	{r3, pc}
 80023e0:	20001d70 	.word	0x20001d70

080023e4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80023e4:	b508      	push	{r3, lr}
 80023e6:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 80023e8:	4801      	ldr	r0, [pc, #4]	; (80023f0 <BSP_SD_GetCardInfo+0xc>)
 80023ea:	f007 f875 	bl	80094d8 <HAL_SD_GetCardInfo>
}
 80023ee:	bd08      	pop	{r3, pc}
 80023f0:	20001d70 	.word	0x20001d70

080023f4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80023f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023f8:	b083      	sub	sp, #12
 80023fa:	4681      	mov	r9, r0
  __IO uint32_t tmpmrd = 0;
 80023fc:	f04f 0800 	mov.w	r8, #0
 8002400:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002404:	4c20      	ldr	r4, [pc, #128]	; (8002488 <BSP_SDRAM_Initialization_sequence+0x94>)
 8002406:	2601      	movs	r6, #1
 8002408:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800240a:	2710      	movs	r7, #16
 800240c:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 800240e:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8002410:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002414:	4d1d      	ldr	r5, [pc, #116]	; (800248c <BSP_SDRAM_Initialization_sequence+0x98>)
 8002416:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800241a:	4621      	mov	r1, r4
 800241c:	4628      	mov	r0, r5
 800241e:	f007 f8f1 	bl	8009604 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002422:	4630      	mov	r0, r6
 8002424:	f001 fd6c 	bl	8003f00 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002428:	2302      	movs	r3, #2
 800242a:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800242c:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 800242e:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8002430:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002438:	4621      	mov	r1, r4
 800243a:	4628      	mov	r0, r5
 800243c:	f007 f8e2 	bl	8009604 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002440:	2303      	movs	r3, #3
 8002442:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002444:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 8002446:	2308      	movs	r3, #8
 8002448:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 800244a:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800244e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002452:	4621      	mov	r1, r4
 8002454:	4628      	mov	r0, r5
 8002456:	f007 f8d5 	bl	8009604 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800245a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800245e:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002460:	2304      	movs	r3, #4
 8002462:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002464:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8002466:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002468:	9b01      	ldr	r3, [sp, #4]
 800246a:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800246c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002470:	4621      	mov	r1, r4
 8002472:	4628      	mov	r0, r5
 8002474:	f007 f8c6 	bl	8009604 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002478:	4649      	mov	r1, r9
 800247a:	4628      	mov	r0, r5
 800247c:	f007 f8dd 	bl	800963a <HAL_SDRAM_ProgramRefreshRate>
}
 8002480:	b003      	add	sp, #12
 8002482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002486:	bf00      	nop
 8002488:	2000057c 	.word	0x2000057c
 800248c:	20001df4 	.word	0x20001df4

08002490 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002490:	b570      	push	{r4, r5, r6, lr}
 8002492:	b08e      	sub	sp, #56	; 0x38
 8002494:	4606      	mov	r6, r0
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002496:	4b55      	ldr	r3, [pc, #340]	; (80025ec <BSP_SDRAM_MspInit+0x15c>)
 8002498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	639a      	str	r2, [r3, #56]	; 0x38
 80024a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024a2:	f002 0201 	and.w	r2, r2, #1
 80024a6:	9201      	str	r2, [sp, #4]
 80024a8:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80024aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ac:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
 80024b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80024b8:	9202      	str	r2, [sp, #8]
 80024ba:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024be:	f042 0208 	orr.w	r2, r2, #8
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
 80024c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c6:	f002 0208 	and.w	r2, r2, #8
 80024ca:	9203      	str	r2, [sp, #12]
 80024cc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d0:	f042 0210 	orr.w	r2, r2, #16
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30
 80024d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d8:	f002 0210 	and.w	r2, r2, #16
 80024dc:	9204      	str	r2, [sp, #16]
 80024de:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e2:	f042 0220 	orr.w	r2, r2, #32
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
 80024e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ea:	f002 0220 	and.w	r2, r2, #32
 80024ee:	9205      	str	r2, [sp, #20]
 80024f0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024f8:	631a      	str	r2, [r3, #48]	; 0x30
 80024fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024fc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002500:	9206      	str	r2, [sp, #24]
 8002502:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002506:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
 800250c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800250e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002512:	9207      	str	r2, [sp, #28]
 8002514:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800251c:	631a      	str	r2, [r3, #48]	; 0x30
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002524:	9308      	str	r3, [sp, #32]
 8002526:	9b08      	ldr	r3, [sp, #32]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800252c:	2301      	movs	r3, #1
 800252e:	930b      	str	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002530:	2503      	movs	r5, #3
 8002532:	950c      	str	r5, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002534:	230c      	movs	r3, #12
 8002536:	930d      	str	r3, [sp, #52]	; 0x34
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002538:	f24c 7303 	movw	r3, #50947	; 0xc703
 800253c:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800253e:	a909      	add	r1, sp, #36	; 0x24
 8002540:	482b      	ldr	r0, [pc, #172]	; (80025f0 <BSP_SDRAM_MspInit+0x160>)
 8002542:	f002 fc53 	bl	8004dec <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002546:	f64f 7383 	movw	r3, #65411	; 0xff83
 800254a:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800254c:	a909      	add	r1, sp, #36	; 0x24
 800254e:	4829      	ldr	r0, [pc, #164]	; (80025f4 <BSP_SDRAM_MspInit+0x164>)
 8002550:	f002 fc4c 	bl	8004dec <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002554:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002558:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800255a:	a909      	add	r1, sp, #36	; 0x24
 800255c:	4826      	ldr	r0, [pc, #152]	; (80025f8 <BSP_SDRAM_MspInit+0x168>)
 800255e:	f002 fc45 	bl	8004dec <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8002562:	f248 1337 	movw	r3, #33079	; 0x8137
 8002566:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002568:	a909      	add	r1, sp, #36	; 0x24
 800256a:	4824      	ldr	r0, [pc, #144]	; (80025fc <BSP_SDRAM_MspInit+0x16c>)
 800256c:	f002 fc3e 	bl	8004dec <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002570:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8002574:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002576:	a909      	add	r1, sp, #36	; 0x24
 8002578:	4821      	ldr	r0, [pc, #132]	; (8002600 <BSP_SDRAM_MspInit+0x170>)
 800257a:	f002 fc37 	bl	8004dec <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800257e:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002582:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8002584:	a909      	add	r1, sp, #36	; 0x24
 8002586:	481f      	ldr	r0, [pc, #124]	; (8002604 <BSP_SDRAM_MspInit+0x174>)
 8002588:	f002 fc30 	bl	8004dec <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800258c:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <BSP_SDRAM_MspInit+0x178>)
 800258e:	2400      	movs	r4, #0
 8002590:	615c      	str	r4, [r3, #20]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002592:	2280      	movs	r2, #128	; 0x80
 8002594:	619a      	str	r2, [r3, #24]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800259a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800259c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025a0:	621a      	str	r2, [r3, #32]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80025a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025ac:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.Mode                = DMA_NORMAL;
 80025ae:	62dc      	str	r4, [r3, #44]	; 0x2c
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80025b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025b4:	631a      	str	r2, [r3, #48]	; 0x30
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80025b6:	635c      	str	r4, [r3, #52]	; 0x34
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80025b8:	639d      	str	r5, [r3, #56]	; 0x38
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80025ba:	63dc      	str	r4, [r3, #60]	; 0x3c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80025bc:	641c      	str	r4, [r3, #64]	; 0x40
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80025be:	461d      	mov	r5, r3
 80025c0:	4a12      	ldr	r2, [pc, #72]	; (800260c <BSP_SDRAM_MspInit+0x17c>)
 80025c2:	f845 2f10 	str.w	r2, [r5, #16]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80025c6:	6335      	str	r5, [r6, #48]	; 0x30
 80025c8:	649e      	str	r6, [r3, #72]	; 0x48
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80025ca:	4628      	mov	r0, r5
 80025cc:	f001 fdf0 	bl	80041b0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80025d0:	4628      	mov	r0, r5
 80025d2:	f001 fd87 	bl	80040e4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80025d6:	4622      	mov	r2, r4
 80025d8:	210f      	movs	r1, #15
 80025da:	2038      	movs	r0, #56	; 0x38
 80025dc:	f001 fcb0 	bl	8003f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80025e0:	2038      	movs	r0, #56	; 0x38
 80025e2:	f001 fcdf 	bl	8003fa4 <HAL_NVIC_EnableIRQ>
}
 80025e6:	b00e      	add	sp, #56	; 0x38
 80025e8:	bd70      	pop	{r4, r5, r6, pc}
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40020c00 	.word	0x40020c00
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40021400 	.word	0x40021400
 80025fc:	40021800 	.word	0x40021800
 8002600:	40021c00 	.word	0x40021c00
 8002604:	40022000 	.word	0x40022000
 8002608:	2000057c 	.word	0x2000057c
 800260c:	40026410 	.word	0x40026410

08002610 <BSP_SDRAM_Init>:
{ 
 8002610:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002612:	4c1d      	ldr	r4, [pc, #116]	; (8002688 <BSP_SDRAM_Init+0x78>)
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <BSP_SDRAM_Init+0x7c>)
 8002616:	6023      	str	r3, [r4, #0]
  Timing.LoadToActiveDelay    = 2;
 8002618:	4d1d      	ldr	r5, [pc, #116]	; (8002690 <BSP_SDRAM_Init+0x80>)
 800261a:	2302      	movs	r3, #2
 800261c:	672b      	str	r3, [r5, #112]	; 0x70
  Timing.ExitSelfRefreshDelay = 7;
 800261e:	2107      	movs	r1, #7
 8002620:	6769      	str	r1, [r5, #116]	; 0x74
  Timing.SelfRefreshTime      = 4;
 8002622:	2204      	movs	r2, #4
 8002624:	67aa      	str	r2, [r5, #120]	; 0x78
  Timing.RowCycleDelay        = 7;
 8002626:	67e9      	str	r1, [r5, #124]	; 0x7c
  Timing.WriteRecoveryTime    = 2;
 8002628:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
  Timing.RPDelay              = 2;
 800262c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
  Timing.RCDDelay             = 2;
 8002630:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002634:	2100      	movs	r1, #0
 8002636:	6061      	str	r1, [r4, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002638:	60a1      	str	r1, [r4, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800263a:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800263c:	2320      	movs	r3, #32
 800263e:	6123      	str	r3, [r4, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002640:	2340      	movs	r3, #64	; 0x40
 8002642:	6163      	str	r3, [r4, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002644:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002648:	61a3      	str	r3, [r4, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800264a:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800264c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002650:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002656:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002658:	62a1      	str	r1, [r4, #40]	; 0x28
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800265a:	4620      	mov	r0, r4
 800265c:	f7ff ff18 	bl	8002490 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002660:	f105 0170 	add.w	r1, r5, #112	; 0x70
 8002664:	4620      	mov	r0, r4
 8002666:	f006 ffad 	bl	80095c4 <HAL_SDRAM_Init>
 800266a:	b148      	cbz	r0, 8002680 <BSP_SDRAM_Init+0x70>
    sdramstatus = SDRAM_ERROR;
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <BSP_SDRAM_Init+0x84>)
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002672:	f240 6003 	movw	r0, #1539	; 0x603
 8002676:	f7ff febd 	bl	80023f4 <BSP_SDRAM_Initialization_sequence>
}
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <BSP_SDRAM_Init+0x84>)
 800267c:	7818      	ldrb	r0, [r3, #0]
 800267e:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_OK;
 8002680:	4b04      	ldr	r3, [pc, #16]	; (8002694 <BSP_SDRAM_Init+0x84>)
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e7f4      	b.n	8002672 <BSP_SDRAM_Init+0x62>
 8002688:	20001df4 	.word	0x20001df4
 800268c:	a0000140 	.word	0xa0000140
 8002690:	2000057c 	.word	0x2000057c
 8002694:	20000088 	.word	0x20000088

08002698 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002698:	b570      	push	{r4, r5, r6, lr}
 800269a:	4606      	mov	r6, r0
 800269c:	460d      	mov	r5, r1
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 800269e:	4c1a      	ldr	r4, [pc, #104]	; (8002708 <BSP_TS_Init+0x70>)
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	4a1a      	ldr	r2, [pc, #104]	; (800270c <BSP_TS_Init+0x74>)
 80026a4:	7810      	ldrb	r0, [r2, #0]
 80026a6:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 80026a8:	6863      	ldr	r3, [r4, #4]
 80026aa:	2054      	movs	r0, #84	; 0x54
 80026ac:	4798      	blx	r3
 80026ae:	b2c4      	uxtb	r4, r0
  if(ts_id1 != FT6206_ID_VALUE)
 80026b0:	2c11      	cmp	r4, #17
 80026b2:	d01d      	beq.n	80026f0 <BSP_TS_Init+0x58>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <BSP_TS_Init+0x70>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2070      	movs	r0, #112	; 0x70
 80026ba:	4798      	blx	r3
 80026bc:	b2c3      	uxtb	r3, r0
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 80026be:	4a13      	ldr	r2, [pc, #76]	; (800270c <BSP_TS_Init+0x74>)
 80026c0:	2170      	movs	r1, #112	; 0x70
 80026c2:	7011      	strb	r1, [r2, #0]
    I2C_Address    = TS_I2C_ADDRESS;    
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 80026c4:	2b11      	cmp	r3, #17
 80026c6:	bf18      	it	ne
 80026c8:	2c11      	cmpne	r4, #17
 80026ca:	d11a      	bne.n	8002702 <BSP_TS_Init+0x6a>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <BSP_TS_Init+0x74>)
 80026ce:	4a0e      	ldr	r2, [pc, #56]	; (8002708 <BSP_TS_Init+0x70>)
 80026d0:	605a      	str	r2, [r3, #4]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 80026d2:	42ae      	cmp	r6, r5
 80026d4:	d211      	bcs.n	80026fa <BSP_TS_Init+0x62>
    {
      ts_orientation = TS_SWAP_NONE;                
 80026d6:	2201      	movs	r2, #1
 80026d8:	721a      	strb	r2, [r3, #8]
    }

    if(ts_status == TS_OK)
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <BSP_TS_Init+0x70>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	4c0b      	ldr	r4, [pc, #44]	; (800270c <BSP_TS_Init+0x74>)
 80026e0:	7820      	ldrb	r0, [r4, #0]
 80026e2:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 80026e4:	6863      	ldr	r3, [r4, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	7820      	ldrb	r0, [r4, #0]
 80026ea:	4798      	blx	r3
  uint8_t ts_status = TS_OK;
 80026ec:	2000      	movs	r0, #0
  {
    ts_status = TS_DEVICE_NOT_FOUND;
  }

  return (ts_status);
}
 80026ee:	bd70      	pop	{r4, r5, r6, pc}
    I2C_Address    = TS_I2C_ADDRESS;    
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <BSP_TS_Init+0x74>)
 80026f2:	2254      	movs	r2, #84	; 0x54
 80026f4:	701a      	strb	r2, [r3, #0]
  uint8_t ts_id1, ts_id2 = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	e7e4      	b.n	80026c4 <BSP_TS_Init+0x2c>
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <BSP_TS_Init+0x74>)
 80026fc:	220c      	movs	r2, #12
 80026fe:	721a      	strb	r2, [r3, #8]
 8002700:	e7eb      	b.n	80026da <BSP_TS_Init+0x42>
    ts_status = TS_DEVICE_NOT_FOUND;
 8002702:	2003      	movs	r0, #3
 8002704:	e7f3      	b.n	80026ee <BSP_TS_Init+0x56>
 8002706:	bf00      	nop
 8002708:	20000000 	.word	0x20000000
 800270c:	20000668 	.word	0x20000668

08002710 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8002710:	b570      	push	{r4, r5, r6, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	4605      	mov	r5, r0
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8002716:	4b3d      	ldr	r3, [pc, #244]	; (800280c <BSP_TS_GetState+0xfc>)
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	6912      	ldr	r2, [r2, #16]
 800271c:	7818      	ldrb	r0, [r3, #0]
 800271e:	4790      	blx	r2
 8002720:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
 8002722:	2800      	cmp	r0, #0
 8002724:	d16f      	bne.n	8002806 <BSP_TS_GetState+0xf6>
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
}
 8002726:	2000      	movs	r0, #0
 8002728:	b002      	add	sp, #8
 800272a:	bd70      	pop	{r4, r5, r6, pc}
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 800272c:	b29b      	uxth	r3, r3
 800272e:	1a5b      	subs	r3, r3, r1
 8002730:	b29b      	uxth	r3, r3
 8002732:	e051      	b.n	80027d8 <BSP_TS_GetState+0xc8>
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8002734:	b292      	uxth	r2, r2
 8002736:	1a12      	subs	r2, r2, r0
 8002738:	b292      	uxth	r2, r2
 800273a:	e05b      	b.n	80027f4 <BSP_TS_GetState+0xe4>
      TS_State->touchX[index] = _x[index];
 800273c:	4b33      	ldr	r3, [pc, #204]	; (800280c <BSP_TS_GetState+0xfc>)
 800273e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002742:	68d9      	ldr	r1, [r3, #12]
 8002744:	eb05 0244 	add.w	r2, r5, r4, lsl #1
 8002748:	8051      	strh	r1, [r2, #2]
      TS_State->touchY[index] = _y[index];
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	80d3      	strh	r3, [r2, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 800274e:	3401      	adds	r4, #1
 8002750:	782b      	ldrb	r3, [r5, #0]
 8002752:	42a3      	cmp	r3, r4
 8002754:	d9e7      	bls.n	8002726 <BSP_TS_GetState+0x16>
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8002756:	4e2d      	ldr	r6, [pc, #180]	; (800280c <BSP_TS_GetState+0xfc>)
 8002758:	6873      	ldr	r3, [r6, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	eb0d 0244 	add.w	r2, sp, r4, lsl #1
 8002760:	a901      	add	r1, sp, #4
 8002762:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 8002766:	7830      	ldrb	r0, [r6, #0]
 8002768:	4798      	blx	r3
      if(ts_orientation & TS_SWAP_XY)
 800276a:	7a33      	ldrb	r3, [r6, #8]
 800276c:	f013 0f08 	tst.w	r3, #8
 8002770:	d00a      	beq.n	8002788 <BSP_TS_GetState+0x78>
        tmp = Raw_x[index];
 8002772:	aa02      	add	r2, sp, #8
 8002774:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8002778:	f832 1c04 	ldrh.w	r1, [r2, #-4]
        Raw_x[index] = Raw_y[index]; 
 800277c:	f832 0c08 	ldrh.w	r0, [r2, #-8]
 8002780:	f822 0c04 	strh.w	r0, [r2, #-4]
        Raw_y[index] = tmp;
 8002784:	f822 1c08 	strh.w	r1, [r2, #-8]
      if(ts_orientation & TS_SWAP_X)
 8002788:	f013 0f02 	tst.w	r3, #2
 800278c:	d009      	beq.n	80027a2 <BSP_TS_GetState+0x92>
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 800278e:	aa02      	add	r2, sp, #8
 8002790:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 8002794:	f831 0c04 	ldrh.w	r0, [r1, #-4]
 8002798:	f240 321f 	movw	r2, #799	; 0x31f
 800279c:	1a12      	subs	r2, r2, r0
 800279e:	f821 2c04 	strh.w	r2, [r1, #-4]
      if(ts_orientation & TS_SWAP_Y)
 80027a2:	f013 0f04 	tst.w	r3, #4
 80027a6:	d009      	beq.n	80027bc <BSP_TS_GetState+0xac>
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 80027a8:	ab02      	add	r3, sp, #8
 80027aa:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 80027ae:	f832 1c08 	ldrh.w	r1, [r2, #-8]
 80027b2:	f240 13df 	movw	r3, #479	; 0x1df
 80027b6:	1a5b      	subs	r3, r3, r1
 80027b8:	f822 3c08 	strh.w	r3, [r2, #-8]
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 80027bc:	ab02      	add	r3, sp, #8
 80027be:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80027c2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <BSP_TS_GetState+0xfc>)
 80027c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	4299      	cmp	r1, r3
 80027d0:	d9ac      	bls.n	800272c <BSP_TS_GetState+0x1c>
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	1acb      	subs	r3, r1, r3
 80027d6:	b29b      	uxth	r3, r3
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 80027d8:	aa02      	add	r2, sp, #8
 80027da:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 80027de:	f832 0c08 	ldrh.w	r0, [r2, #-8]
 80027e2:	4a0a      	ldr	r2, [pc, #40]	; (800280c <BSP_TS_GetState+0xfc>)
 80027e4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80027e8:	6952      	ldr	r2, [r2, #20]
 80027ea:	4290      	cmp	r0, r2
 80027ec:	d9a2      	bls.n	8002734 <BSP_TS_GetState+0x24>
 80027ee:	b292      	uxth	r2, r2
 80027f0:	1a82      	subs	r2, r0, r2
 80027f2:	b292      	uxth	r2, r2
      if ((xDiff + yDiff) > 5)
 80027f4:	4413      	add	r3, r2
 80027f6:	2b05      	cmp	r3, #5
 80027f8:	dda0      	ble.n	800273c <BSP_TS_GetState+0x2c>
        _x[index] = Raw_x[index];
 80027fa:	4b04      	ldr	r3, [pc, #16]	; (800280c <BSP_TS_GetState+0xfc>)
 80027fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002800:	60d9      	str	r1, [r3, #12]
        _y[index] = Raw_y[index];
 8002802:	6158      	str	r0, [r3, #20]
 8002804:	e79a      	b.n	800273c <BSP_TS_GetState+0x2c>
    for(index=0; index < TS_State->touchDetected; index++)
 8002806:	2400      	movs	r4, #0
 8002808:	e7a2      	b.n	8002750 <BSP_TS_GetState+0x40>
 800280a:	bf00      	nop
 800280c:	20000668 	.word	0x20000668

08002810 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002810:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002812:	4b04      	ldr	r3, [pc, #16]	; (8002824 <disk_status+0x14>)
 8002814:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8002818:	6852      	ldr	r2, [r2, #4]
 800281a:	6852      	ldr	r2, [r2, #4]
 800281c:	4403      	add	r3, r0
 800281e:	7b18      	ldrb	r0, [r3, #12]
 8002820:	4790      	blx	r2
  return stat;
}
 8002822:	bd08      	pop	{r3, pc}
 8002824:	200006b0 	.word	0x200006b0

08002828 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002828:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <disk_initialize+0x24>)
 800282c:	5c1b      	ldrb	r3, [r3, r0]
 800282e:	b953      	cbnz	r3, 8002846 <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <disk_initialize+0x24>)
 8002832:	2201      	movs	r2, #1
 8002834:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002836:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800283a:	6852      	ldr	r2, [r2, #4]
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	4418      	add	r0, r3
 8002840:	7b00      	ldrb	r0, [r0, #12]
 8002842:	4790      	blx	r2
  }
  return stat;
}
 8002844:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8002846:	2000      	movs	r0, #0
 8002848:	e7fc      	b.n	8002844 <disk_initialize+0x1c>
 800284a:	bf00      	nop
 800284c:	200006b0 	.word	0x200006b0

08002850 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002850:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002852:	4c04      	ldr	r4, [pc, #16]	; (8002864 <disk_read+0x14>)
 8002854:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8002858:	686d      	ldr	r5, [r5, #4]
 800285a:	68ad      	ldr	r5, [r5, #8]
 800285c:	4404      	add	r4, r0
 800285e:	7b20      	ldrb	r0, [r4, #12]
 8002860:	47a8      	blx	r5
  return res;
}
 8002862:	bd38      	pop	{r3, r4, r5, pc}
 8002864:	200006b0 	.word	0x200006b0

08002868 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002868:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800286a:	4c04      	ldr	r4, [pc, #16]	; (800287c <disk_write+0x14>)
 800286c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8002870:	686d      	ldr	r5, [r5, #4]
 8002872:	68ed      	ldr	r5, [r5, #12]
 8002874:	4404      	add	r4, r0
 8002876:	7b20      	ldrb	r0, [r4, #12]
 8002878:	47a8      	blx	r5
  return res;
}
 800287a:	bd38      	pop	{r3, r4, r5, pc}
 800287c:	200006b0 	.word	0x200006b0

08002880 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002880:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002882:	4b04      	ldr	r3, [pc, #16]	; (8002894 <disk_ioctl+0x14>)
 8002884:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8002888:	6864      	ldr	r4, [r4, #4]
 800288a:	6924      	ldr	r4, [r4, #16]
 800288c:	4403      	add	r3, r0
 800288e:	7b18      	ldrb	r0, [r3, #12]
 8002890:	47a0      	blx	r4
  return res;
}
 8002892:	bd10      	pop	{r4, pc}
 8002894:	200006b0 	.word	0x200006b0

08002898 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 8002898:	2000      	movs	r0, #0
 800289a:	4770      	bx	lr

0800289c <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 800289c:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 800289e:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80028a0:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80028a4:	4770      	bx	lr

080028a6 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 80028a6:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 80028a8:	7883      	ldrb	r3, [r0, #2]
 80028aa:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 80028ae:	7843      	ldrb	r3, [r0, #1]
 80028b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80028b4:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80028b6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80028ba:	4770      	bx	lr

080028bc <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80028bc:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 80028be:	0a09      	lsrs	r1, r1, #8
 80028c0:	7041      	strb	r1, [r0, #1]
}
 80028c2:	4770      	bx	lr

080028c4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80028c4:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80028c6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80028ca:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80028cc:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80028d0:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80028d2:	0e09      	lsrs	r1, r1, #24
 80028d4:	70c1      	strb	r1, [r0, #3]
}
 80028d6:	4770      	bx	lr

080028d8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80028d8:	b410      	push	{r4}
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 80028da:	4614      	mov	r4, r2
 80028dc:	b12a      	cbz	r2, 80028ea <mem_cpy+0x12>
		do {
			*d++ = *s++;
 80028de:	780a      	ldrb	r2, [r1, #0]
 80028e0:	3101      	adds	r1, #1
 80028e2:	7002      	strb	r2, [r0, #0]
 80028e4:	3001      	adds	r0, #1
		} while (--cnt);
 80028e6:	3c01      	subs	r4, #1
 80028e8:	d1f9      	bne.n	80028de <mem_cpy+0x6>
	}
}
 80028ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 80028f0:	7001      	strb	r1, [r0, #0]
 80028f2:	3001      	adds	r0, #1
	} while (--cnt);
 80028f4:	3a01      	subs	r2, #1
 80028f6:	d1fb      	bne.n	80028f0 <mem_set>
}
 80028f8:	4770      	bx	lr

080028fa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80028fa:	b410      	push	{r4}
 80028fc:	4604      	mov	r4, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 80028fe:	7820      	ldrb	r0, [r4, #0]
 8002900:	3401      	adds	r4, #1
 8002902:	780b      	ldrb	r3, [r1, #0]
 8002904:	3101      	adds	r1, #1
 8002906:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 8002908:	3a01      	subs	r2, #1
 800290a:	d001      	beq.n	8002910 <mem_cmp+0x16>
 800290c:	2800      	cmp	r0, #0
 800290e:	d0f6      	beq.n	80028fe <mem_cmp+0x4>

	return r;
}
 8002910:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002914:	4770      	bx	lr

08002916 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8002916:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 8002918:	7818      	ldrb	r0, [r3, #0]
 800291a:	b118      	cbz	r0, 8002924 <chk_chr+0xe>
 800291c:	4288      	cmp	r0, r1
 800291e:	d001      	beq.n	8002924 <chk_chr+0xe>
 8002920:	3301      	adds	r3, #1
 8002922:	e7f9      	b.n	8002918 <chk_chr+0x2>
	return *str;
}
 8002924:	4770      	bx	lr
	...

08002928 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002928:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800292a:	2500      	movs	r5, #0
 800292c:	462b      	mov	r3, r5
 800292e:	e001      	b.n	8002934 <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8002930:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002932:	3301      	adds	r3, #1
 8002934:	2b01      	cmp	r3, #1
 8002936:	d815      	bhi.n	8002964 <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 8002938:	011a      	lsls	r2, r3, #4
 800293a:	4c18      	ldr	r4, [pc, #96]	; (800299c <chk_lock+0x74>)
 800293c:	58a2      	ldr	r2, [r4, r2]
 800293e:	2a00      	cmp	r2, #0
 8002940:	d0f6      	beq.n	8002930 <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002942:	6804      	ldr	r4, [r0, #0]
 8002944:	42a2      	cmp	r2, r4
 8002946:	d1f4      	bne.n	8002932 <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 8002948:	4a14      	ldr	r2, [pc, #80]	; (800299c <chk_lock+0x74>)
 800294a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800294e:	6854      	ldr	r4, [r2, #4]
 8002950:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002952:	4294      	cmp	r4, r2
 8002954:	d1ed      	bne.n	8002932 <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 8002956:	4a11      	ldr	r2, [pc, #68]	; (800299c <chk_lock+0x74>)
 8002958:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800295c:	6894      	ldr	r4, [r2, #8]
 800295e:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 8002960:	4294      	cmp	r4, r2
 8002962:	d1e6      	bne.n	8002932 <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8002964:	2b02      	cmp	r3, #2
 8002966:	d00a      	beq.n	800297e <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002968:	b9a9      	cbnz	r1, 8002996 <chk_lock+0x6e>
 800296a:	4a0c      	ldr	r2, [pc, #48]	; (800299c <chk_lock+0x74>)
 800296c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002970:	899b      	ldrh	r3, [r3, #12]
 8002972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002976:	d00c      	beq.n	8002992 <chk_lock+0x6a>
 8002978:	2000      	movs	r0, #0
}
 800297a:	bc30      	pop	{r4, r5}
 800297c:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800297e:	2902      	cmp	r1, #2
 8002980:	bf14      	ite	ne
 8002982:	4629      	movne	r1, r5
 8002984:	f045 0101 	orreq.w	r1, r5, #1
 8002988:	b109      	cbz	r1, 800298e <chk_lock+0x66>
 800298a:	2000      	movs	r0, #0
 800298c:	e7f5      	b.n	800297a <chk_lock+0x52>
 800298e:	2012      	movs	r0, #18
 8002990:	e7f3      	b.n	800297a <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002992:	2010      	movs	r0, #16
 8002994:	e7f1      	b.n	800297a <chk_lock+0x52>
 8002996:	2010      	movs	r0, #16
 8002998:	e7ef      	b.n	800297a <chk_lock+0x52>
 800299a:	bf00      	nop
 800299c:	20000684 	.word	0x20000684

080029a0 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80029a0:	2000      	movs	r0, #0
 80029a2:	e000      	b.n	80029a6 <enq_lock+0x6>
 80029a4:	3001      	adds	r0, #1
 80029a6:	2801      	cmp	r0, #1
 80029a8:	d804      	bhi.n	80029b4 <enq_lock+0x14>
 80029aa:	0103      	lsls	r3, r0, #4
 80029ac:	4a03      	ldr	r2, [pc, #12]	; (80029bc <enq_lock+0x1c>)
 80029ae:	58d3      	ldr	r3, [r2, r3]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f7      	bne.n	80029a4 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 80029b4:	3802      	subs	r0, #2
 80029b6:	bf18      	it	ne
 80029b8:	2001      	movne	r0, #1
 80029ba:	4770      	bx	lr
 80029bc:	20000684 	.word	0x20000684

080029c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80029c0:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80029c2:	2300      	movs	r3, #0
 80029c4:	e000      	b.n	80029c8 <inc_lock+0x8>
 80029c6:	3301      	adds	r3, #1
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d813      	bhi.n	80029f4 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 80029cc:	011a      	lsls	r2, r3, #4
 80029ce:	4c24      	ldr	r4, [pc, #144]	; (8002a60 <inc_lock+0xa0>)
 80029d0:	58a4      	ldr	r4, [r4, r2]
 80029d2:	6802      	ldr	r2, [r0, #0]
 80029d4:	4294      	cmp	r4, r2
 80029d6:	d1f6      	bne.n	80029c6 <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 80029d8:	4a21      	ldr	r2, [pc, #132]	; (8002a60 <inc_lock+0xa0>)
 80029da:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80029de:	6854      	ldr	r4, [r2, #4]
 80029e0:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 80029e2:	4294      	cmp	r4, r2
 80029e4:	d1ef      	bne.n	80029c6 <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 80029e6:	4a1e      	ldr	r2, [pc, #120]	; (8002a60 <inc_lock+0xa0>)
 80029e8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80029ec:	6894      	ldr	r4, [r2, #8]
 80029ee:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 80029f0:	4294      	cmp	r4, r2
 80029f2:	d1e8      	bne.n	80029c6 <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d013      	beq.n	8002a20 <inc_lock+0x60>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80029f8:	b121      	cbz	r1, 8002a04 <inc_lock+0x44>
 80029fa:	4a19      	ldr	r2, [pc, #100]	; (8002a60 <inc_lock+0xa0>)
 80029fc:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002a00:	8992      	ldrh	r2, [r2, #12]
 8002a02:	bb52      	cbnz	r2, 8002a5a <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002a04:	bb21      	cbnz	r1, 8002a50 <inc_lock+0x90>
 8002a06:	4a16      	ldr	r2, [pc, #88]	; (8002a60 <inc_lock+0xa0>)
 8002a08:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002a0c:	8991      	ldrh	r1, [r2, #12]
 8002a0e:	3101      	adds	r1, #1
 8002a10:	b289      	uxth	r1, r1
 8002a12:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <inc_lock+0xa0>)
 8002a14:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002a18:	8191      	strh	r1, [r2, #12]

	return i + 1;
 8002a1a:	1c58      	adds	r0, r3, #1
}
 8002a1c:	bc70      	pop	{r4, r5, r6}
 8002a1e:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002a20:	2300      	movs	r3, #0
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d805      	bhi.n	8002a32 <inc_lock+0x72>
 8002a26:	011a      	lsls	r2, r3, #4
 8002a28:	4c0d      	ldr	r4, [pc, #52]	; (8002a60 <inc_lock+0xa0>)
 8002a2a:	58a2      	ldr	r2, [r4, r2]
 8002a2c:	b10a      	cbz	r2, 8002a32 <inc_lock+0x72>
 8002a2e:	3301      	adds	r3, #1
 8002a30:	e7f7      	b.n	8002a22 <inc_lock+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d00f      	beq.n	8002a56 <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 8002a36:	6806      	ldr	r6, [r0, #0]
 8002a38:	4d09      	ldr	r5, [pc, #36]	; (8002a60 <inc_lock+0xa0>)
 8002a3a:	011c      	lsls	r4, r3, #4
 8002a3c:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 8002a40:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 8002a42:	6884      	ldr	r4, [r0, #8]
 8002a44:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 8002a46:	6940      	ldr	r0, [r0, #20]
 8002a48:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	8190      	strh	r0, [r2, #12]
 8002a4e:	e7d3      	b.n	80029f8 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a54:	e7dd      	b.n	8002a12 <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002a56:	2000      	movs	r0, #0
 8002a58:	e7e0      	b.n	8002a1c <inc_lock+0x5c>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	e7de      	b.n	8002a1c <inc_lock+0x5c>
 8002a5e:	bf00      	nop
 8002a60:	20000684 	.word	0x20000684

08002a64 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002a64:	3801      	subs	r0, #1
 8002a66:	2801      	cmp	r0, #1
 8002a68:	d815      	bhi.n	8002a96 <dec_lock+0x32>
		n = Files[i].ctr;
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <dec_lock+0x3c>)
 8002a6c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8002a70:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a76:	d003      	beq.n	8002a80 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 8002a78:	b11b      	cbz	r3, 8002a82 <dec_lock+0x1e>
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	e000      	b.n	8002a82 <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002a80:	2300      	movs	r3, #0
		Files[i].ctr = n;
 8002a82:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <dec_lock+0x3c>)
 8002a84:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8002a88:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002a8a:	b933      	cbnz	r3, 8002a9a <dec_lock+0x36>
 8002a8c:	0103      	lsls	r3, r0, #4
 8002a8e:	2000      	movs	r0, #0
 8002a90:	4a03      	ldr	r2, [pc, #12]	; (8002aa0 <dec_lock+0x3c>)
 8002a92:	50d0      	str	r0, [r2, r3]
 8002a94:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002a96:	2002      	movs	r0, #2
 8002a98:	4770      	bx	lr
		res = FR_OK;
 8002a9a:	2000      	movs	r0, #0
	}
	return res;
}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000684 	.word	0x20000684

08002aa4 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e003      	b.n	8002ab0 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 8002aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002aac:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 8002aae:	3301      	adds	r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d811      	bhi.n	8002ad8 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002ab4:	011a      	lsls	r2, r3, #4
 8002ab6:	4909      	ldr	r1, [pc, #36]	; (8002adc <clear_lock+0x38>)
 8002ab8:	588a      	ldr	r2, [r1, r2]
 8002aba:	4282      	cmp	r2, r0
 8002abc:	d1f7      	bne.n	8002aae <clear_lock+0xa>
{
 8002abe:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002ac0:	011a      	lsls	r2, r3, #4
 8002ac2:	2400      	movs	r4, #0
 8002ac4:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d8ed      	bhi.n	8002aa8 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002acc:	011a      	lsls	r2, r3, #4
 8002ace:	4903      	ldr	r1, [pc, #12]	; (8002adc <clear_lock+0x38>)
 8002ad0:	588a      	ldr	r2, [r1, r2]
 8002ad2:	4282      	cmp	r2, r0
 8002ad4:	d1f7      	bne.n	8002ac6 <clear_lock+0x22>
 8002ad6:	e7f3      	b.n	8002ac0 <clear_lock+0x1c>
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000684 	.word	0x20000684

08002ae0 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8002ae0:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002ae2:	6943      	ldr	r3, [r0, #20]
 8002ae4:	3b02      	subs	r3, #2
 8002ae6:	428b      	cmp	r3, r1
 8002ae8:	d904      	bls.n	8002af4 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8002aea:	8943      	ldrh	r3, [r0, #10]
 8002aec:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002aee:	fb01 0003 	mla	r0, r1, r3, r0
 8002af2:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002af4:	2000      	movs	r0, #0
}
 8002af6:	4770      	bx	lr

08002af8 <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8002af8:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002afa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002afc:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8002afe:	0a49      	lsrs	r1, r1, #9
 8002b00:	8952      	ldrh	r2, [r2, #10]
 8002b02:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002b06:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8002b08:	b130      	cbz	r0, 8002b18 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8002b0a:	4281      	cmp	r1, r0
 8002b0c:	d302      	bcc.n	8002b14 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8002b0e:	1a09      	subs	r1, r1, r0
 8002b10:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002b12:	e7f8      	b.n	8002b06 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8002b14:	6858      	ldr	r0, [r3, #4]
 8002b16:	4408      	add	r0, r1
}
 8002b18:	4770      	bx	lr

08002b1a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8002b1a:	b570      	push	{r4, r5, r6, lr}
 8002b1c:	4606      	mov	r6, r0
 8002b1e:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8002b20:	f101 001a 	add.w	r0, r1, #26
 8002b24:	f7ff feba 	bl	800289c <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8002b28:	7833      	ldrb	r3, [r6, #0]
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d000      	beq.n	8002b30 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 8002b2e:	bd70      	pop	{r4, r5, r6, pc}
 8002b30:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8002b32:	f105 0014 	add.w	r0, r5, #20
 8002b36:	f7ff feb1 	bl	800289c <ld_word>
 8002b3a:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 8002b3e:	e7f6      	b.n	8002b2e <ld_clust+0x14>

08002b40 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8002b40:	b570      	push	{r4, r5, r6, lr}
 8002b42:	4606      	mov	r6, r0
 8002b44:	460c      	mov	r4, r1
 8002b46:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8002b48:	b291      	uxth	r1, r2
 8002b4a:	f104 001a 	add.w	r0, r4, #26
 8002b4e:	f7ff feb5 	bl	80028bc <st_word>
	if (fs->fs_type == FS_FAT32) {
 8002b52:	7833      	ldrb	r3, [r6, #0]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d000      	beq.n	8002b5a <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8002b58:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8002b5a:	0c29      	lsrs	r1, r5, #16
 8002b5c:	f104 0014 	add.w	r0, r4, #20
 8002b60:	f7ff feac 	bl	80028bc <st_word>
}
 8002b64:	e7f8      	b.n	8002b58 <st_clust+0x18>
	...

08002b68 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8002b68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b6c:	4681      	mov	r9, r0
 8002b6e:	468a      	mov	sl, r1
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8002b70:	f8d1 8000 	ldr.w	r8, [r1]
 8002b74:	f100 0b24 	add.w	fp, r0, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8002b78:	220b      	movs	r2, #11
 8002b7a:	2120      	movs	r1, #32
 8002b7c:	4658      	mov	r0, fp
 8002b7e:	f7ff feb7 	bl	80028f0 <mem_set>
	si = i = 0; ni = 8;
 8002b82:	2500      	movs	r5, #0
 8002b84:	462b      	mov	r3, r5
 8002b86:	2708      	movs	r7, #8
 8002b88:	e029      	b.n	8002bde <create_name+0x76>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002b8a:	3601      	adds	r6, #1
 8002b8c:	f818 3006 	ldrb.w	r3, [r8, r6]
 8002b90:	2b5c      	cmp	r3, #92	; 0x5c
 8002b92:	bf18      	it	ne
 8002b94:	2b2f      	cmpne	r3, #47	; 0x2f
 8002b96:	d0f8      	beq.n	8002b8a <create_name+0x22>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8002b98:	4446      	add	r6, r8
 8002b9a:	f8ca 6000 	str.w	r6, [sl]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8002b9e:	2d00      	cmp	r5, #0
 8002ba0:	d045      	beq.n	8002c2e <create_name+0xc6>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002ba2:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
 8002ba6:	2be5      	cmp	r3, #229	; 0xe5
 8002ba8:	d036      	beq.n	8002c18 <create_name+0xb0>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002baa:	2c20      	cmp	r4, #32
 8002bac:	d838      	bhi.n	8002c20 <create_name+0xb8>
 8002bae:	2304      	movs	r3, #4
 8002bb0:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f

	return FR_OK;
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	e036      	b.n	8002c26 <create_name+0xbe>
		if (c >= 0x80) {				/* Extended character? */
 8002bb8:	f014 0f80 	tst.w	r4, #128	; 0x80
 8002bbc:	d128      	bne.n	8002c10 <create_name+0xa8>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	481c      	ldr	r0, [pc, #112]	; (8002c34 <create_name+0xcc>)
 8002bc2:	f7ff fea8 	bl	8002916 <chk_chr>
 8002bc6:	bb80      	cbnz	r0, 8002c2a <create_name+0xc2>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002bc8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b19      	cmp	r3, #25
 8002bd0:	d801      	bhi.n	8002bd6 <create_name+0x6e>
 8002bd2:	3c20      	subs	r4, #32
 8002bd4:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
 8002bd6:	f80b 4005 	strb.w	r4, [fp, r5]
 8002bda:	3501      	adds	r5, #1
			i = 8; ni = 11;				/* Goto extension */
 8002bdc:	4633      	mov	r3, r6
		c = (BYTE)p[si++];
 8002bde:	1c5e      	adds	r6, r3, #1
 8002be0:	f818 4003 	ldrb.w	r4, [r8, r3]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002be4:	2c20      	cmp	r4, #32
 8002be6:	d9d7      	bls.n	8002b98 <create_name+0x30>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002be8:	2c5c      	cmp	r4, #92	; 0x5c
 8002bea:	bf18      	it	ne
 8002bec:	2c2f      	cmpne	r4, #47	; 0x2f
 8002bee:	d0cd      	beq.n	8002b8c <create_name+0x24>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8002bf0:	2c2e      	cmp	r4, #46	; 0x2e
 8002bf2:	bf18      	it	ne
 8002bf4:	42af      	cmpne	r7, r5
 8002bf6:	d8df      	bhi.n	8002bb8 <create_name+0x50>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8002bf8:	3c2e      	subs	r4, #46	; 0x2e
 8002bfa:	bf18      	it	ne
 8002bfc:	2401      	movne	r4, #1
 8002bfe:	2f0b      	cmp	r7, #11
 8002c00:	bf14      	ite	ne
 8002c02:	4627      	movne	r7, r4
 8002c04:	f044 0701 	orreq.w	r7, r4, #1
 8002c08:	b967      	cbnz	r7, 8002c24 <create_name+0xbc>
			i = 8; ni = 11;				/* Goto extension */
 8002c0a:	2508      	movs	r5, #8
 8002c0c:	270b      	movs	r7, #11
 8002c0e:	e7e5      	b.n	8002bdc <create_name+0x74>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8002c10:	3c80      	subs	r4, #128	; 0x80
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <create_name+0xd0>)
 8002c14:	5d1c      	ldrb	r4, [r3, r4]
 8002c16:	e7d2      	b.n	8002bbe <create_name+0x56>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002c18:	2305      	movs	r3, #5
 8002c1a:	f889 3024 	strb.w	r3, [r9, #36]	; 0x24
 8002c1e:	e7c4      	b.n	8002baa <create_name+0x42>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002c20:	2300      	movs	r3, #0
 8002c22:	e7c5      	b.n	8002bb0 <create_name+0x48>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8002c24:	2006      	movs	r0, #6
#endif /* _USE_LFN != 0 */
}
 8002c26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8002c2a:	2006      	movs	r0, #6
 8002c2c:	e7fb      	b.n	8002c26 <create_name+0xbe>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8002c2e:	2006      	movs	r0, #6
 8002c30:	e7f9      	b.n	8002c26 <create_name+0xbe>
 8002c32:	bf00      	nop
 8002c34:	080132a8 	.word	0x080132a8
 8002c38:	08012c74 	.word	0x08012c74

08002c3c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8002c3c:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002c3e:	6800      	ldr	r0, [r0, #0]
 8002c40:	b108      	cbz	r0, 8002c46 <get_ldnumber+0xa>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002c42:	4602      	mov	r2, r0
 8002c44:	e003      	b.n	8002c4e <get_ldnumber+0x12>
	int vol = -1;
 8002c46:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4a:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002c4c:	3201      	adds	r2, #1
 8002c4e:	7813      	ldrb	r3, [r2, #0]
 8002c50:	2b3a      	cmp	r3, #58	; 0x3a
 8002c52:	bf18      	it	ne
 8002c54:	2b20      	cmpne	r3, #32
 8002c56:	d8f9      	bhi.n	8002c4c <get_ldnumber+0x10>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8002c58:	2b3a      	cmp	r3, #58	; 0x3a
 8002c5a:	d001      	beq.n	8002c60 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8002c5c:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8002c5e:	4770      	bx	lr
			i = *tp++ - '0';
 8002c60:	4603      	mov	r3, r0
 8002c62:	f813 0b01 	ldrb.w	r0, [r3], #1
 8002c66:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002c68:	2809      	cmp	r0, #9
 8002c6a:	bf98      	it	ls
 8002c6c:	429a      	cmpls	r2, r3
 8002c6e:	d107      	bne.n	8002c80 <get_ldnumber+0x44>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8002c70:	2801      	cmp	r0, #1
 8002c72:	d902      	bls.n	8002c7a <get_ldnumber+0x3e>
	int vol = -1;
 8002c74:	f04f 30ff 	mov.w	r0, #4294967295
			return vol;
 8002c78:	4770      	bx	lr
					*path = ++tt;
 8002c7a:	3201      	adds	r2, #1
 8002c7c:	600a      	str	r2, [r1, #0]
 8002c7e:	4770      	bx	lr
	int vol = -1;
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295
 8002c84:	4770      	bx	lr

08002c86 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8002c86:	b538      	push	{r3, r4, r5, lr}
 8002c88:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8002c8a:	4604      	mov	r4, r0
 8002c8c:	b198      	cbz	r0, 8002cb6 <validate+0x30>
 8002c8e:	6803      	ldr	r3, [r0, #0]
 8002c90:	b19b      	cbz	r3, 8002cba <validate+0x34>
 8002c92:	781a      	ldrb	r2, [r3, #0]
 8002c94:	b1a2      	cbz	r2, 8002cc0 <validate+0x3a>
 8002c96:	8881      	ldrh	r1, [r0, #4]
 8002c98:	88da      	ldrh	r2, [r3, #6]
 8002c9a:	4291      	cmp	r1, r2
 8002c9c:	d003      	beq.n	8002ca6 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8002c9e:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002ca0:	2400      	movs	r4, #0
 8002ca2:	602c      	str	r4, [r5, #0]
	return res;
}
 8002ca4:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8002ca6:	7858      	ldrb	r0, [r3, #1]
 8002ca8:	f7ff fdb2 	bl	8002810 <disk_status>
 8002cac:	f010 0001 	ands.w	r0, r0, #1
 8002cb0:	d109      	bne.n	8002cc6 <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002cb2:	6824      	ldr	r4, [r4, #0]
 8002cb4:	e7f5      	b.n	8002ca2 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8002cb6:	2009      	movs	r0, #9
 8002cb8:	e7f3      	b.n	8002ca2 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002cba:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 8002cbc:	2009      	movs	r0, #9
 8002cbe:	e7f0      	b.n	8002ca2 <validate+0x1c>
 8002cc0:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002cc2:	2400      	movs	r4, #0
 8002cc4:	e7ed      	b.n	8002ca2 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8002cc6:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002cc8:	2400      	movs	r4, #0
 8002cca:	e7ea      	b.n	8002ca2 <validate+0x1c>

08002ccc <sync_window>:
{
 8002ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002cd0:	78c5      	ldrb	r5, [r0, #3]
 8002cd2:	b915      	cbnz	r5, 8002cda <sync_window+0xe>
}
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cda:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8002cdc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002cde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	463a      	mov	r2, r7
 8002ce6:	4641      	mov	r1, r8
 8002ce8:	7840      	ldrb	r0, [r0, #1]
 8002cea:	f7ff fdbd 	bl	8002868 <disk_write>
 8002cee:	4605      	mov	r5, r0
 8002cf0:	b998      	cbnz	r0, 8002d1a <sync_window+0x4e>
			fs->wflag = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002cf6:	6a23      	ldr	r3, [r4, #32]
 8002cf8:	1afb      	subs	r3, r7, r3
 8002cfa:	69a2      	ldr	r2, [r4, #24]
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d2e9      	bcs.n	8002cd4 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002d00:	78a6      	ldrb	r6, [r4, #2]
 8002d02:	2e01      	cmp	r6, #1
 8002d04:	d9e6      	bls.n	8002cd4 <sync_window+0x8>
					wsect += fs->fsize;
 8002d06:	69a3      	ldr	r3, [r4, #24]
 8002d08:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	463a      	mov	r2, r7
 8002d0e:	4641      	mov	r1, r8
 8002d10:	7860      	ldrb	r0, [r4, #1]
 8002d12:	f7ff fda9 	bl	8002868 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002d16:	3e01      	subs	r6, #1
 8002d18:	e7f3      	b.n	8002d02 <sync_window+0x36>
			res = FR_DISK_ERR;
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	e7da      	b.n	8002cd4 <sync_window+0x8>

08002d1e <move_window>:
{
 8002d1e:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002d20:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002d22:	428b      	cmp	r3, r1
 8002d24:	d102      	bne.n	8002d2c <move_window+0xe>
	FRESULT res = FR_OK;
 8002d26:	2600      	movs	r6, #0
}
 8002d28:	4630      	mov	r0, r6
 8002d2a:	bd70      	pop	{r4, r5, r6, pc}
 8002d2c:	4604      	mov	r4, r0
 8002d2e:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8002d30:	f7ff ffcc 	bl	8002ccc <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002d34:	4606      	mov	r6, r0
 8002d36:	2800      	cmp	r0, #0
 8002d38:	d1f6      	bne.n	8002d28 <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	462a      	mov	r2, r5
 8002d3e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8002d42:	7860      	ldrb	r0, [r4, #1]
 8002d44:	f7ff fd84 	bl	8002850 <disk_read>
 8002d48:	b110      	cbz	r0, 8002d50 <move_window+0x32>
				res = FR_DISK_ERR;
 8002d4a:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002d4c:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 8002d50:	62e5      	str	r5, [r4, #44]	; 0x2c
 8002d52:	e7e9      	b.n	8002d28 <move_window+0xa>

08002d54 <check_fs>:
{
 8002d54:	b538      	push	{r3, r4, r5, lr}
 8002d56:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002d58:	2300      	movs	r3, #0
 8002d5a:	70c3      	strb	r3, [r0, #3]
 8002d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d60:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002d62:	f7ff ffdc 	bl	8002d1e <move_window>
 8002d66:	bb30      	cbnz	r0, 8002db6 <check_fs+0x62>
 8002d68:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002d6a:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8002d6e:	f7ff fd95 	bl	800289c <ld_word>
 8002d72:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002d76:	4298      	cmp	r0, r3
 8002d78:	d11f      	bne.n	8002dba <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8002d7a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8002d7e:	2be9      	cmp	r3, #233	; 0xe9
 8002d80:	d007      	beq.n	8002d92 <check_fs+0x3e>
 8002d82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d84:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8002d88:	4a0d      	ldr	r2, [pc, #52]	; (8002dc0 <check_fs+0x6c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d001      	beq.n	8002d92 <check_fs+0x3e>
	return 2;
 8002d8e:	2502      	movs	r5, #2
 8002d90:	e014      	b.n	8002dbc <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8002d92:	f104 0066 	add.w	r0, r4, #102	; 0x66
 8002d96:	f7ff fd86 	bl	80028a6 <ld_dword>
 8002d9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002d9e:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <check_fs+0x70>)
 8002da0:	4298      	cmp	r0, r3
 8002da2:	d00b      	beq.n	8002dbc <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8002da4:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8002da8:	f7ff fd7d 	bl	80028a6 <ld_dword>
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <check_fs+0x74>)
 8002dae:	4298      	cmp	r0, r3
 8002db0:	d004      	beq.n	8002dbc <check_fs+0x68>
	return 2;
 8002db2:	2502      	movs	r5, #2
 8002db4:	e002      	b.n	8002dbc <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002db6:	2504      	movs	r5, #4
 8002db8:	e000      	b.n	8002dbc <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002dba:	2503      	movs	r5, #3
}
 8002dbc:	4628      	mov	r0, r5
 8002dbe:	bd38      	pop	{r3, r4, r5, pc}
 8002dc0:	009000eb 	.word	0x009000eb
 8002dc4:	00544146 	.word	0x00544146
 8002dc8:	33544146 	.word	0x33544146

08002dcc <find_volume>:
{
 8002dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dd0:	b085      	sub	sp, #20
 8002dd2:	460e      	mov	r6, r1
 8002dd4:	4615      	mov	r5, r2
	*rfs = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8002dda:	f7ff ff2f 	bl	8002c3c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002dde:	1e07      	subs	r7, r0, #0
 8002de0:	f2c0 8145 	blt.w	800306e <find_volume+0x2a2>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8002de4:	4bb5      	ldr	r3, [pc, #724]	; (80030bc <find_volume+0x2f0>)
 8002de6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8002dea:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002dec:	2c00      	cmp	r4, #0
 8002dee:	f000 8143 	beq.w	8003078 <find_volume+0x2ac>
	*rfs = fs;							/* Return pointer to the file system object */
 8002df2:	6034      	str	r4, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002df4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8002df8:	7823      	ldrb	r3, [r4, #0]
 8002dfa:	b173      	cbz	r3, 8002e1a <find_volume+0x4e>
		stat = disk_status(fs->drv);
 8002dfc:	7860      	ldrb	r0, [r4, #1]
 8002dfe:	f7ff fd07 	bl	8002810 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002e02:	f010 0601 	ands.w	r6, r0, #1
 8002e06:	d108      	bne.n	8002e1a <find_volume+0x4e>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002e08:	2d00      	cmp	r5, #0
 8002e0a:	f000 8131 	beq.w	8003070 <find_volume+0x2a4>
 8002e0e:	f010 0f04 	tst.w	r0, #4
 8002e12:	f000 812d 	beq.w	8003070 <find_volume+0x2a4>
				return FR_WRITE_PROTECTED;
 8002e16:	260a      	movs	r6, #10
 8002e18:	e12a      	b.n	8003070 <find_volume+0x2a4>
	fs->fs_type = 0;					/* Clear the file system object */
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002e1e:	b2f8      	uxtb	r0, r7
 8002e20:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8002e22:	f7ff fd01 	bl	8002828 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002e26:	f010 0601 	ands.w	r6, r0, #1
 8002e2a:	f040 8127 	bne.w	800307c <find_volume+0x2b0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8002e2e:	b11d      	cbz	r5, 8002e38 <find_volume+0x6c>
 8002e30:	f010 0f04 	tst.w	r0, #4
 8002e34:	f040 8124 	bne.w	8003080 <find_volume+0x2b4>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f7ff ff8a 	bl	8002d54 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002e40:	2802      	cmp	r0, #2
 8002e42:	f000 80b6 	beq.w	8002fb2 <find_volume+0x1e6>
	bsect = 0;
 8002e46:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002e48:	2804      	cmp	r0, #4
 8002e4a:	f000 811b 	beq.w	8003084 <find_volume+0x2b8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002e4e:	2801      	cmp	r0, #1
 8002e50:	f200 811a 	bhi.w	8003088 <find_volume+0x2bc>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002e54:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8002e58:	f7ff fd20 	bl	800289c <ld_word>
 8002e5c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002e60:	f040 8114 	bne.w	800308c <find_volume+0x2c0>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8002e64:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8002e68:	f7ff fd18 	bl	800289c <ld_word>
 8002e6c:	4605      	mov	r5, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002e6e:	b920      	cbnz	r0, 8002e7a <find_volume+0xae>
 8002e70:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8002e74:	f7ff fd17 	bl	80028a6 <ld_dword>
 8002e78:	4605      	mov	r5, r0
		fs->fsize = fasize;
 8002e7a:	61a5      	str	r5, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8002e7c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8002e80:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002e82:	1e53      	subs	r3, r2, #1
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	f200 8102 	bhi.w	8003090 <find_volume+0x2c4>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002e8c:	fb05 f802 	mul.w	r8, r5, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002e90:	f894 903d 	ldrb.w	r9, [r4, #61]	; 0x3d
 8002e94:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8002e98:	f1b9 0f00 	cmp.w	r9, #0
 8002e9c:	f000 80fa 	beq.w	8003094 <find_volume+0x2c8>
 8002ea0:	f109 33ff 	add.w	r3, r9, #4294967295
 8002ea4:	ea19 0f03 	tst.w	r9, r3
 8002ea8:	f040 80f6 	bne.w	8003098 <find_volume+0x2cc>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8002eac:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8002eb0:	f7ff fcf4 	bl	800289c <ld_word>
 8002eb4:	4682      	mov	sl, r0
 8002eb6:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002eb8:	f010 0f0f 	tst.w	r0, #15
 8002ebc:	f040 80ee 	bne.w	800309c <find_volume+0x2d0>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8002ec0:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8002ec4:	f7ff fcea 	bl	800289c <ld_word>
 8002ec8:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002eca:	b920      	cbnz	r0, 8002ed6 <find_volume+0x10a>
 8002ecc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002ed0:	f7ff fce9 	bl	80028a6 <ld_dword>
 8002ed4:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8002ed6:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8002eda:	f7ff fcdf 	bl	800289c <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002ede:	4602      	mov	r2, r0
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	f000 80dd 	beq.w	80030a0 <find_volume+0x2d4>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8002ee6:	eb00 0308 	add.w	r3, r0, r8
 8002eea:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8002eee:	459b      	cmp	fp, r3
 8002ef0:	f0c0 80d8 	bcc.w	80030a4 <find_volume+0x2d8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002ef4:	ebab 0b03 	sub.w	fp, fp, r3
 8002ef8:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002efc:	45cb      	cmp	fp, r9
 8002efe:	f0c0 80d3 	bcc.w	80030a8 <find_volume+0x2dc>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002f02:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8002f06:	4281      	cmp	r1, r0
 8002f08:	d96b      	bls.n	8002fe2 <find_volume+0x216>
		fmt = FS_FAT32;
 8002f0a:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002f0e:	f640 70f5 	movw	r0, #4085	; 0xff5
 8002f12:	4281      	cmp	r1, r0
 8002f14:	d801      	bhi.n	8002f1a <find_volume+0x14e>
 8002f16:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002f1a:	f101 0902 	add.w	r9, r1, #2
 8002f1e:	f8c4 9014 	str.w	r9, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8002f22:	61e7      	str	r7, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002f24:	443a      	add	r2, r7
 8002f26:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8002f28:	443b      	add	r3, r7
 8002f2a:	62a3      	str	r3, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8002f2c:	f1bb 0f03 	cmp.w	fp, #3
 8002f30:	d05a      	beq.n	8002fe8 <find_volume+0x21c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8002f32:	f1ba 0f00 	cmp.w	sl, #0
 8002f36:	f000 80bd 	beq.w	80030b4 <find_volume+0x2e8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002f3a:	4442      	add	r2, r8
 8002f3c:	6262      	str	r2, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002f3e:	f1bb 0f02 	cmp.w	fp, #2
 8002f42:	d062      	beq.n	800300a <find_volume+0x23e>
 8002f44:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8002f48:	f009 0901 	and.w	r9, r9, #1
 8002f4c:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002f50:	f209 19ff 	addw	r9, r9, #511	; 0x1ff
 8002f54:	ebb5 2f59 	cmp.w	r5, r9, lsr #9
 8002f58:	f0c0 80ae 	bcc.w	80030b8 <find_volume+0x2ec>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8002f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f60:	6123      	str	r3, [r4, #16]
 8002f62:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8002f68:	f1bb 0f03 	cmp.w	fp, #3
 8002f6c:	d050      	beq.n	8003010 <find_volume+0x244>
	fs->fs_type = fmt;		/* FAT sub-type */
 8002f6e:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8002f72:	4a52      	ldr	r2, [pc, #328]	; (80030bc <find_volume+0x2f0>)
 8002f74:	8d13      	ldrh	r3, [r2, #40]	; 0x28
 8002f76:	3301      	adds	r3, #1
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	8513      	strh	r3, [r2, #40]	; 0x28
 8002f7c:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 8002f7e:	4620      	mov	r0, r4
 8002f80:	f7ff fd90 	bl	8002aa4 <clear_lock>
	return FR_OK;
 8002f84:	e074      	b.n	8003070 <find_volume+0x2a4>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002f86:	2000      	movs	r0, #0
 8002f88:	ab04      	add	r3, sp, #16
 8002f8a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002f8e:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002f92:	3501      	adds	r5, #1
 8002f94:	2d03      	cmp	r5, #3
 8002f96:	d80e      	bhi.n	8002fb6 <find_volume+0x1ea>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8002f98:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002f9c:	012b      	lsls	r3, r5, #4
 8002f9e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002fa2:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002fa4:	7903      	ldrb	r3, [r0, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0ed      	beq.n	8002f86 <find_volume+0x1ba>
 8002faa:	3008      	adds	r0, #8
 8002fac:	f7ff fc7b 	bl	80028a6 <ld_dword>
 8002fb0:	e7ea      	b.n	8002f88 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002fb2:	2500      	movs	r5, #0
 8002fb4:	e7ee      	b.n	8002f94 <find_volume+0x1c8>
 8002fb6:	2500      	movs	r5, #0
 8002fb8:	e00a      	b.n	8002fd0 <find_volume+0x204>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002fba:	4639      	mov	r1, r7
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f7ff fec9 	bl	8002d54 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002fc2:	2801      	cmp	r0, #1
 8002fc4:	f67f af40 	bls.w	8002e48 <find_volume+0x7c>
 8002fc8:	3501      	adds	r5, #1
 8002fca:	2d03      	cmp	r5, #3
 8002fcc:	f63f af3c 	bhi.w	8002e48 <find_volume+0x7c>
			bsect = br[i];
 8002fd0:	ab04      	add	r3, sp, #16
 8002fd2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002fd6:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002fda:	2f00      	cmp	r7, #0
 8002fdc:	d1ed      	bne.n	8002fba <find_volume+0x1ee>
 8002fde:	2003      	movs	r0, #3
 8002fe0:	e7f2      	b.n	8002fc8 <find_volume+0x1fc>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002fe2:	f04f 0b02 	mov.w	fp, #2
 8002fe6:	e792      	b.n	8002f0e <find_volume+0x142>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002fe8:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8002fec:	f7ff fc56 	bl	800289c <ld_word>
 8002ff0:	2800      	cmp	r0, #0
 8002ff2:	d15b      	bne.n	80030ac <find_volume+0x2e0>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002ff4:	f1ba 0f00 	cmp.w	sl, #0
 8002ff8:	d15a      	bne.n	80030b0 <find_volume+0x2e4>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002ffa:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002ffe:	f7ff fc52 	bl	80028a6 <ld_dword>
 8003002:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8003004:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8003008:	e7a2      	b.n	8002f50 <find_volume+0x184>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800300a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800300e:	e79f      	b.n	8002f50 <find_volume+0x184>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8003010:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8003014:	f7ff fc42 	bl	800289c <ld_word>
 8003018:	2801      	cmp	r0, #1
 800301a:	d1a8      	bne.n	8002f6e <find_volume+0x1a2>
			&& move_window(fs, bsect + 1) == FR_OK)
 800301c:	1c79      	adds	r1, r7, #1
 800301e:	4620      	mov	r0, r4
 8003020:	f7ff fe7d 	bl	8002d1e <move_window>
 8003024:	2800      	cmp	r0, #0
 8003026:	d1a2      	bne.n	8002f6e <find_volume+0x1a2>
			fs->fsi_flag = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800302c:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8003030:	f7ff fc34 	bl	800289c <ld_word>
 8003034:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003038:	4298      	cmp	r0, r3
 800303a:	d198      	bne.n	8002f6e <find_volume+0x1a2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800303c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003040:	f7ff fc31 	bl	80028a6 <ld_dword>
 8003044:	4b1e      	ldr	r3, [pc, #120]	; (80030c0 <find_volume+0x2f4>)
 8003046:	4298      	cmp	r0, r3
 8003048:	d191      	bne.n	8002f6e <find_volume+0x1a2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800304a:	f504 7005 	add.w	r0, r4, #532	; 0x214
 800304e:	f7ff fc2a 	bl	80028a6 <ld_dword>
 8003052:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <find_volume+0x2f8>)
 8003054:	4298      	cmp	r0, r3
 8003056:	d18a      	bne.n	8002f6e <find_volume+0x1a2>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8003058:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800305c:	f7ff fc23 	bl	80028a6 <ld_dword>
 8003060:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8003062:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8003066:	f7ff fc1e 	bl	80028a6 <ld_dword>
 800306a:	60e0      	str	r0, [r4, #12]
 800306c:	e77f      	b.n	8002f6e <find_volume+0x1a2>
	if (vol < 0) return FR_INVALID_DRIVE;
 800306e:	260b      	movs	r6, #11
}
 8003070:	4630      	mov	r0, r6
 8003072:	b005      	add	sp, #20
 8003074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003078:	260c      	movs	r6, #12
 800307a:	e7f9      	b.n	8003070 <find_volume+0x2a4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800307c:	2603      	movs	r6, #3
 800307e:	e7f7      	b.n	8003070 <find_volume+0x2a4>
		return FR_WRITE_PROTECTED;
 8003080:	260a      	movs	r6, #10
 8003082:	e7f5      	b.n	8003070 <find_volume+0x2a4>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003084:	2601      	movs	r6, #1
 8003086:	e7f3      	b.n	8003070 <find_volume+0x2a4>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003088:	260d      	movs	r6, #13
 800308a:	e7f1      	b.n	8003070 <find_volume+0x2a4>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800308c:	260d      	movs	r6, #13
 800308e:	e7ef      	b.n	8003070 <find_volume+0x2a4>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003090:	260d      	movs	r6, #13
 8003092:	e7ed      	b.n	8003070 <find_volume+0x2a4>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003094:	260d      	movs	r6, #13
 8003096:	e7eb      	b.n	8003070 <find_volume+0x2a4>
 8003098:	260d      	movs	r6, #13
 800309a:	e7e9      	b.n	8003070 <find_volume+0x2a4>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800309c:	260d      	movs	r6, #13
 800309e:	e7e7      	b.n	8003070 <find_volume+0x2a4>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80030a0:	260d      	movs	r6, #13
 80030a2:	e7e5      	b.n	8003070 <find_volume+0x2a4>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80030a4:	260d      	movs	r6, #13
 80030a6:	e7e3      	b.n	8003070 <find_volume+0x2a4>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80030a8:	260d      	movs	r6, #13
 80030aa:	e7e1      	b.n	8003070 <find_volume+0x2a4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80030ac:	260d      	movs	r6, #13
 80030ae:	e7df      	b.n	8003070 <find_volume+0x2a4>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80030b0:	260d      	movs	r6, #13
 80030b2:	e7dd      	b.n	8003070 <find_volume+0x2a4>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80030b4:	260d      	movs	r6, #13
 80030b6:	e7db      	b.n	8003070 <find_volume+0x2a4>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80030b8:	260d      	movs	r6, #13
 80030ba:	e7d9      	b.n	8003070 <find_volume+0x2a4>
 80030bc:	20000684 	.word	0x20000684
 80030c0:	41615252 	.word	0x41615252
 80030c4:	61417272 	.word	0x61417272

080030c8 <put_fat>:
{
 80030c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80030cc:	2901      	cmp	r1, #1
 80030ce:	d97e      	bls.n	80031ce <put_fat+0x106>
 80030d0:	4607      	mov	r7, r0
 80030d2:	460c      	mov	r4, r1
 80030d4:	4616      	mov	r6, r2
 80030d6:	6943      	ldr	r3, [r0, #20]
 80030d8:	428b      	cmp	r3, r1
 80030da:	d97a      	bls.n	80031d2 <put_fat+0x10a>
		switch (fs->fs_type) {
 80030dc:	7803      	ldrb	r3, [r0, #0]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d045      	beq.n	800316e <put_fat+0xa6>
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d057      	beq.n	8003196 <put_fat+0xce>
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d003      	beq.n	80030f2 <put_fat+0x2a>
 80030ea:	2502      	movs	r5, #2
}
 80030ec:	4628      	mov	r0, r5
 80030ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 80030f2:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80030f6:	6a01      	ldr	r1, [r0, #32]
 80030f8:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80030fc:	f7ff fe0f 	bl	8002d1e <move_window>
			if (res != FR_OK) break;
 8003100:	4605      	mov	r5, r0
 8003102:	2800      	cmp	r0, #0
 8003104:	d1f2      	bne.n	80030ec <put_fat+0x24>
			p = fs->win + bc++ % SS(fs);
 8003106:	f107 0a30 	add.w	sl, r7, #48	; 0x30
 800310a:	f108 0901 	add.w	r9, r8, #1
 800310e:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003112:	f014 0401 	ands.w	r4, r4, #1
 8003116:	d01f      	beq.n	8003158 <put_fat+0x90>
 8003118:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	0132      	lsls	r2, r6, #4
 8003122:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8003126:	4313      	orrs	r3, r2
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 800312e:	2301      	movs	r3, #1
 8003130:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003132:	6a39      	ldr	r1, [r7, #32]
 8003134:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8003138:	4638      	mov	r0, r7
 800313a:	f7ff fdf0 	bl	8002d1e <move_window>
			if (res != FR_OK) break;
 800313e:	4605      	mov	r5, r0
 8003140:	2800      	cmp	r0, #0
 8003142:	d1d3      	bne.n	80030ec <put_fat+0x24>
			p = fs->win + bc % SS(fs);
 8003144:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003148:	b144      	cbz	r4, 800315c <put_fat+0x94>
 800314a:	f3c6 1207 	ubfx	r2, r6, #4, #8
 800314e:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 8003152:	2301      	movs	r3, #1
 8003154:	70fb      	strb	r3, [r7, #3]
			break;
 8003156:	e7c9      	b.n	80030ec <put_fat+0x24>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003158:	b2f3      	uxtb	r3, r6
 800315a:	e7e6      	b.n	800312a <put_fat+0x62>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800315c:	f91a 2009 	ldrsb.w	r2, [sl, r9]
 8003160:	f022 020f 	bic.w	r2, r2, #15
 8003164:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8003168:	4332      	orrs	r2, r6
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	e7ef      	b.n	800314e <put_fat+0x86>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800316e:	6a01      	ldr	r1, [r0, #32]
 8003170:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8003174:	f7ff fdd3 	bl	8002d1e <move_window>
			if (res != FR_OK) break;
 8003178:	4605      	mov	r5, r0
 800317a:	2800      	cmp	r0, #0
 800317c:	d1b6      	bne.n	80030ec <put_fat+0x24>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800317e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003182:	0064      	lsls	r4, r4, #1
 8003184:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8003188:	b2b1      	uxth	r1, r6
 800318a:	4420      	add	r0, r4
 800318c:	f7ff fb96 	bl	80028bc <st_word>
			fs->wflag = 1;
 8003190:	2301      	movs	r3, #1
 8003192:	70fb      	strb	r3, [r7, #3]
			break;
 8003194:	e7aa      	b.n	80030ec <put_fat+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003196:	6a01      	ldr	r1, [r0, #32]
 8003198:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800319c:	f7ff fdbf 	bl	8002d1e <move_window>
			if (res != FR_OK) break;
 80031a0:	4605      	mov	r5, r0
 80031a2:	2800      	cmp	r0, #0
 80031a4:	d1a2      	bne.n	80030ec <put_fat+0x24>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80031a6:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 80031aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031ae:	00a4      	lsls	r4, r4, #2
 80031b0:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80031b4:	441c      	add	r4, r3
 80031b6:	4620      	mov	r0, r4
 80031b8:	f7ff fb75 	bl	80028a6 <ld_dword>
 80031bc:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80031c0:	4331      	orrs	r1, r6
 80031c2:	4620      	mov	r0, r4
 80031c4:	f7ff fb7e 	bl	80028c4 <st_dword>
			fs->wflag = 1;
 80031c8:	2301      	movs	r3, #1
 80031ca:	70fb      	strb	r3, [r7, #3]
			break;
 80031cc:	e78e      	b.n	80030ec <put_fat+0x24>
	FRESULT res = FR_INT_ERR;
 80031ce:	2502      	movs	r5, #2
 80031d0:	e78c      	b.n	80030ec <put_fat+0x24>
 80031d2:	2502      	movs	r5, #2
 80031d4:	e78a      	b.n	80030ec <put_fat+0x24>

080031d6 <get_fat>:
{
 80031d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 80031d8:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80031da:	2901      	cmp	r1, #1
 80031dc:	d956      	bls.n	800328c <get_fat+0xb6>
 80031de:	460c      	mov	r4, r1
 80031e0:	696b      	ldr	r3, [r5, #20]
 80031e2:	428b      	cmp	r3, r1
 80031e4:	d954      	bls.n	8003290 <get_fat+0xba>
		switch (fs->fs_type) {
 80031e6:	782b      	ldrb	r3, [r5, #0]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d02d      	beq.n	8003248 <get_fat+0x72>
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d03b      	beq.n	8003268 <get_fat+0x92>
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d001      	beq.n	80031f8 <get_fat+0x22>
 80031f4:	2001      	movs	r0, #1
 80031f6:	e04a      	b.n	800328e <get_fat+0xb8>
			bc = (UINT)clst; bc += bc / 2;
 80031f8:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80031fc:	6a29      	ldr	r1, [r5, #32]
 80031fe:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8003202:	4628      	mov	r0, r5
 8003204:	f7ff fd8b 	bl	8002d1e <move_window>
 8003208:	b110      	cbz	r0, 8003210 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800320a:	f04f 30ff 	mov.w	r0, #4294967295
 800320e:	e03e      	b.n	800328e <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
 8003210:	1c77      	adds	r7, r6, #1
 8003212:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8003216:	442e      	add	r6, r5
 8003218:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800321c:	6a29      	ldr	r1, [r5, #32]
 800321e:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8003222:	4628      	mov	r0, r5
 8003224:	f7ff fd7b 	bl	8002d1e <move_window>
 8003228:	bba0      	cbnz	r0, 8003294 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 800322a:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800322e:	443d      	add	r5, r7
 8003230:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8003234:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003238:	f014 0f01 	tst.w	r4, #1
 800323c:	d001      	beq.n	8003242 <get_fat+0x6c>
 800323e:	0900      	lsrs	r0, r0, #4
 8003240:	e025      	b.n	800328e <get_fat+0xb8>
 8003242:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8003246:	e022      	b.n	800328e <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003248:	6a29      	ldr	r1, [r5, #32]
 800324a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800324e:	4628      	mov	r0, r5
 8003250:	f7ff fd65 	bl	8002d1e <move_window>
 8003254:	bb08      	cbnz	r0, 800329a <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003256:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800325a:	0064      	lsls	r4, r4, #1
 800325c:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8003260:	4420      	add	r0, r4
 8003262:	f7ff fb1b 	bl	800289c <ld_word>
			break;
 8003266:	e012      	b.n	800328e <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003268:	6a29      	ldr	r1, [r5, #32]
 800326a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800326e:	4628      	mov	r0, r5
 8003270:	f7ff fd55 	bl	8002d1e <move_window>
 8003274:	b9a0      	cbnz	r0, 80032a0 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003276:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800327a:	00a4      	lsls	r4, r4, #2
 800327c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8003280:	4420      	add	r0, r4
 8003282:	f7ff fb10 	bl	80028a6 <ld_dword>
 8003286:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 800328a:	e000      	b.n	800328e <get_fat+0xb8>
		val = 1;	/* Internal error */
 800328c:	2001      	movs	r0, #1
}
 800328e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8003290:	2001      	movs	r0, #1
 8003292:	e7fc      	b.n	800328e <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003294:	f04f 30ff 	mov.w	r0, #4294967295
 8003298:	e7f9      	b.n	800328e <get_fat+0xb8>
 800329a:	f04f 30ff 	mov.w	r0, #4294967295
 800329e:	e7f6      	b.n	800328e <get_fat+0xb8>
 80032a0:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 80032a4:	e7f3      	b.n	800328e <get_fat+0xb8>

080032a6 <dir_sdi>:
{
 80032a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 80032aa:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80032ae:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80032b2:	d242      	bcs.n	800333a <dir_sdi+0x94>
 80032b4:	4606      	mov	r6, r0
 80032b6:	460f      	mov	r7, r1
 80032b8:	f011 0f1f 	tst.w	r1, #31
 80032bc:	d13f      	bne.n	800333e <dir_sdi+0x98>
	dp->dptr = ofs;				/* Set current offset */
 80032be:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80032c0:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80032c2:	b92c      	cbnz	r4, 80032d0 <dir_sdi+0x2a>
 80032c4:	f898 3000 	ldrb.w	r3, [r8]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <dir_sdi+0x2a>
		clst = fs->dirbase;
 80032cc:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80032d0:	b9b4      	cbnz	r4, 8003300 <dir_sdi+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80032d2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80032d6:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 80032da:	d932      	bls.n	8003342 <dir_sdi+0x9c>
		dp->sect = fs->dirbase;
 80032dc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 80032e0:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 80032e2:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 80032e4:	69f3      	ldr	r3, [r6, #28]
 80032e6:	b393      	cbz	r3, 800334e <dir_sdi+0xa8>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80032e8:	eb03 2357 	add.w	r3, r3, r7, lsr #9
 80032ec:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80032ee:	f108 0330 	add.w	r3, r8, #48	; 0x30
 80032f2:	f3c7 0108 	ubfx	r1, r7, #0, #9
 80032f6:	4419      	add	r1, r3
 80032f8:	6231      	str	r1, [r6, #32]
	return FR_OK;
 80032fa:	2000      	movs	r0, #0
}
 80032fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003300:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 8003304:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8003306:	e000      	b.n	800330a <dir_sdi+0x64>
			ofs -= csz;
 8003308:	1b7f      	subs	r7, r7, r5
		while (ofs >= csz) {				/* Follow cluster chain */
 800330a:	42af      	cmp	r7, r5
 800330c:	d30f      	bcc.n	800332e <dir_sdi+0x88>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800330e:	4621      	mov	r1, r4
 8003310:	4630      	mov	r0, r6
 8003312:	f7ff ff60 	bl	80031d6 <get_fat>
 8003316:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003318:	f1b0 3fff 	cmp.w	r0, #4294967295
 800331c:	d013      	beq.n	8003346 <dir_sdi+0xa0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800331e:	2801      	cmp	r0, #1
 8003320:	d913      	bls.n	800334a <dir_sdi+0xa4>
 8003322:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8003326:	4283      	cmp	r3, r0
 8003328:	d8ee      	bhi.n	8003308 <dir_sdi+0x62>
 800332a:	2002      	movs	r0, #2
 800332c:	e7e6      	b.n	80032fc <dir_sdi+0x56>
		dp->sect = clust2sect(fs, clst);
 800332e:	4621      	mov	r1, r4
 8003330:	4640      	mov	r0, r8
 8003332:	f7ff fbd5 	bl	8002ae0 <clust2sect>
 8003336:	61f0      	str	r0, [r6, #28]
 8003338:	e7d3      	b.n	80032e2 <dir_sdi+0x3c>
		return FR_INT_ERR;
 800333a:	2002      	movs	r0, #2
 800333c:	e7de      	b.n	80032fc <dir_sdi+0x56>
 800333e:	2002      	movs	r0, #2
 8003340:	e7dc      	b.n	80032fc <dir_sdi+0x56>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003342:	2002      	movs	r0, #2
 8003344:	e7da      	b.n	80032fc <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003346:	2001      	movs	r0, #1
 8003348:	e7d8      	b.n	80032fc <dir_sdi+0x56>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800334a:	2002      	movs	r0, #2
 800334c:	e7d6      	b.n	80032fc <dir_sdi+0x56>
	if (!dp->sect) return FR_INT_ERR;
 800334e:	2002      	movs	r0, #2
 8003350:	e7d4      	b.n	80032fc <dir_sdi+0x56>

08003352 <create_chain>:
{
 8003352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003356:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 8003358:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800335a:	460f      	mov	r7, r1
 800335c:	b951      	cbnz	r1, 8003374 <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800335e:	f8d6 800c 	ldr.w	r8, [r6, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003362:	f1b8 0f00 	cmp.w	r8, #0
 8003366:	d012      	beq.n	800338e <create_chain+0x3c>
 8003368:	6973      	ldr	r3, [r6, #20]
 800336a:	4543      	cmp	r3, r8
 800336c:	d811      	bhi.n	8003392 <create_chain+0x40>
 800336e:	f04f 0801 	mov.w	r8, #1
 8003372:	e00e      	b.n	8003392 <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003374:	f7ff ff2f 	bl	80031d6 <get_fat>
 8003378:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800337a:	2801      	cmp	r0, #1
 800337c:	d94c      	bls.n	8003418 <create_chain+0xc6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800337e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003382:	d04e      	beq.n	8003422 <create_chain+0xd0>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003384:	6972      	ldr	r2, [r6, #20]
 8003386:	4282      	cmp	r2, r0
 8003388:	d84b      	bhi.n	8003422 <create_chain+0xd0>
		scl = clst;
 800338a:	46b8      	mov	r8, r7
 800338c:	e001      	b.n	8003392 <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800338e:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 8003392:	4644      	mov	r4, r8
 8003394:	e00c      	b.n	80033b0 <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003396:	4621      	mov	r1, r4
 8003398:	4628      	mov	r0, r5
 800339a:	f7ff ff1c 	bl	80031d6 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 800339e:	4603      	mov	r3, r0
 80033a0:	b178      	cbz	r0, 80033c2 <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80033a2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80033a6:	bf18      	it	ne
 80033a8:	2801      	cmpne	r0, #1
 80033aa:	d03a      	beq.n	8003422 <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
 80033ac:	4544      	cmp	r4, r8
 80033ae:	d037      	beq.n	8003420 <create_chain+0xce>
			ncl++;							/* Next cluster */
 80033b0:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80033b2:	6973      	ldr	r3, [r6, #20]
 80033b4:	42a3      	cmp	r3, r4
 80033b6:	d8ee      	bhi.n	8003396 <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 80033b8:	f1b8 0f01 	cmp.w	r8, #1
 80033bc:	d92e      	bls.n	800341c <create_chain+0xca>
				ncl = 2;
 80033be:	2402      	movs	r4, #2
 80033c0:	e7e9      	b.n	8003396 <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80033c2:	f04f 32ff 	mov.w	r2, #4294967295
 80033c6:	4621      	mov	r1, r4
 80033c8:	4630      	mov	r0, r6
 80033ca:	f7ff fe7d 	bl	80030c8 <put_fat>
		if (res == FR_OK && clst != 0) {
 80033ce:	4602      	mov	r2, r0
 80033d0:	1e3b      	subs	r3, r7, #0
 80033d2:	bf18      	it	ne
 80033d4:	2301      	movne	r3, #1
 80033d6:	2800      	cmp	r0, #0
 80033d8:	bf18      	it	ne
 80033da:	2300      	movne	r3, #0
 80033dc:	b973      	cbnz	r3, 80033fc <create_chain+0xaa>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80033de:	b9a2      	cbnz	r2, 800340a <create_chain+0xb8>
		fs->last_clst = ncl;
 80033e0:	60f4      	str	r4, [r6, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80033e2:	6932      	ldr	r2, [r6, #16]
 80033e4:	6973      	ldr	r3, [r6, #20]
 80033e6:	3b02      	subs	r3, #2
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d801      	bhi.n	80033f0 <create_chain+0x9e>
 80033ec:	3a01      	subs	r2, #1
 80033ee:	6132      	str	r2, [r6, #16]
		fs->fsi_flag |= 1;
 80033f0:	7933      	ldrb	r3, [r6, #4]
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	7133      	strb	r3, [r6, #4]
 80033f8:	4623      	mov	r3, r4
 80033fa:	e012      	b.n	8003422 <create_chain+0xd0>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80033fc:	4622      	mov	r2, r4
 80033fe:	4639      	mov	r1, r7
 8003400:	4630      	mov	r0, r6
 8003402:	f7ff fe61 	bl	80030c8 <put_fat>
 8003406:	4602      	mov	r2, r0
 8003408:	e7e9      	b.n	80033de <create_chain+0x8c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800340a:	2a01      	cmp	r2, #1
 800340c:	d001      	beq.n	8003412 <create_chain+0xc0>
 800340e:	2301      	movs	r3, #1
 8003410:	e007      	b.n	8003422 <create_chain+0xd0>
 8003412:	f04f 33ff 	mov.w	r3, #4294967295
 8003416:	e004      	b.n	8003422 <create_chain+0xd0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003418:	2301      	movs	r3, #1
 800341a:	e002      	b.n	8003422 <create_chain+0xd0>
				if (ncl > scl) return 0;	/* No free cluster */
 800341c:	2300      	movs	r3, #0
 800341e:	e000      	b.n	8003422 <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003428 <remove_chain>:
{
 8003428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342a:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800342c:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800342e:	2901      	cmp	r1, #1
 8003430:	d92e      	bls.n	8003490 <remove_chain+0x68>
 8003432:	4606      	mov	r6, r0
 8003434:	4611      	mov	r1, r2
 8003436:	696b      	ldr	r3, [r5, #20]
 8003438:	42a3      	cmp	r3, r4
 800343a:	d92b      	bls.n	8003494 <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800343c:	b14a      	cbz	r2, 8003452 <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800343e:	f04f 32ff 	mov.w	r2, #4294967295
 8003442:	4628      	mov	r0, r5
 8003444:	f7ff fe40 	bl	80030c8 <put_fat>
		if (res != FR_OK) return res;
 8003448:	4607      	mov	r7, r0
 800344a:	b110      	cbz	r0, 8003452 <remove_chain+0x2a>
 800344c:	e023      	b.n	8003496 <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800344e:	42a2      	cmp	r2, r4
 8003450:	d921      	bls.n	8003496 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003452:	4627      	mov	r7, r4
 8003454:	4621      	mov	r1, r4
 8003456:	4630      	mov	r0, r6
 8003458:	f7ff febd 	bl	80031d6 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 800345c:	4604      	mov	r4, r0
 800345e:	b1e0      	cbz	r0, 800349a <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003460:	2801      	cmp	r0, #1
 8003462:	d01c      	beq.n	800349e <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003464:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003468:	d01b      	beq.n	80034a2 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800346a:	2200      	movs	r2, #0
 800346c:	4639      	mov	r1, r7
 800346e:	4628      	mov	r0, r5
 8003470:	f7ff fe2a 	bl	80030c8 <put_fat>
			if (res != FR_OK) return res;
 8003474:	4607      	mov	r7, r0
 8003476:	b970      	cbnz	r0, 8003496 <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003478:	692b      	ldr	r3, [r5, #16]
 800347a:	696a      	ldr	r2, [r5, #20]
 800347c:	1e91      	subs	r1, r2, #2
 800347e:	428b      	cmp	r3, r1
 8003480:	d2e5      	bcs.n	800344e <remove_chain+0x26>
			fs->free_clst++;
 8003482:	3301      	adds	r3, #1
 8003484:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8003486:	792b      	ldrb	r3, [r5, #4]
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	712b      	strb	r3, [r5, #4]
 800348e:	e7de      	b.n	800344e <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003490:	2702      	movs	r7, #2
 8003492:	e000      	b.n	8003496 <remove_chain+0x6e>
 8003494:	2702      	movs	r7, #2
}
 8003496:	4638      	mov	r0, r7
 8003498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 800349a:	2700      	movs	r7, #0
 800349c:	e7fb      	b.n	8003496 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800349e:	2702      	movs	r7, #2
 80034a0:	e7f9      	b.n	8003496 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80034a2:	2701      	movs	r7, #1
 80034a4:	e7f7      	b.n	8003496 <remove_chain+0x6e>

080034a6 <dir_next>:
{
 80034a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
 80034aa:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80034ac:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80034ae:	69c3      	ldr	r3, [r0, #28]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d06c      	beq.n	800358e <dir_next+0xe8>
 80034b4:	4604      	mov	r4, r0
 80034b6:	4688      	mov	r8, r1
 80034b8:	3520      	adds	r5, #32
 80034ba:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80034be:	d268      	bcs.n	8003592 <dir_next+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80034c0:	f3c5 0708 	ubfx	r7, r5, #0, #9
 80034c4:	b93f      	cbnz	r7, 80034d6 <dir_next+0x30>
		dp->sect++;				/* Next sector */
 80034c6:	3301      	adds	r3, #1
 80034c8:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 80034ca:	6981      	ldr	r1, [r0, #24]
 80034cc:	b979      	cbnz	r1, 80034ee <dir_next+0x48>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80034ce:	8933      	ldrh	r3, [r6, #8]
 80034d0:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80034d4:	d907      	bls.n	80034e6 <dir_next+0x40>
	dp->dptr = ofs;						/* Current entry */
 80034d6:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80034d8:	f106 0330 	add.w	r3, r6, #48	; 0x30
 80034dc:	443b      	add	r3, r7
 80034de:	6223      	str	r3, [r4, #32]
	return FR_OK;
 80034e0:	2000      	movs	r0, #0
}
 80034e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61c3      	str	r3, [r0, #28]
 80034ea:	2004      	movs	r0, #4
 80034ec:	e7f9      	b.n	80034e2 <dir_next+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80034ee:	8973      	ldrh	r3, [r6, #10]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 80034f6:	d1ee      	bne.n	80034d6 <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80034f8:	f7ff fe6d 	bl	80031d6 <get_fat>
 80034fc:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80034fe:	2801      	cmp	r0, #1
 8003500:	d949      	bls.n	8003596 <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003502:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003506:	d048      	beq.n	800359a <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003508:	6973      	ldr	r3, [r6, #20]
 800350a:	4283      	cmp	r3, r0
 800350c:	d837      	bhi.n	800357e <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 800350e:	f1b8 0f00 	cmp.w	r8, #0
 8003512:	d011      	beq.n	8003538 <dir_next+0x92>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003514:	69a1      	ldr	r1, [r4, #24]
 8003516:	4620      	mov	r0, r4
 8003518:	f7ff ff1b 	bl	8003352 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800351c:	4682      	mov	sl, r0
 800351e:	2800      	cmp	r0, #0
 8003520:	d03d      	beq.n	800359e <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003522:	2801      	cmp	r0, #1
 8003524:	d03d      	beq.n	80035a2 <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003526:	f1b0 3fff 	cmp.w	r0, #4294967295
 800352a:	d03c      	beq.n	80035a6 <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800352c:	4630      	mov	r0, r6
 800352e:	f7ff fbcd 	bl	8002ccc <sync_window>
 8003532:	b128      	cbz	r0, 8003540 <dir_next+0x9a>
 8003534:	2001      	movs	r0, #1
 8003536:	e7d4      	b.n	80034e2 <dir_next+0x3c>
						dp->sect = 0; return FR_NO_FILE;
 8003538:	2300      	movs	r3, #0
 800353a:	61e3      	str	r3, [r4, #28]
 800353c:	2004      	movs	r0, #4
 800353e:	e7d0      	b.n	80034e2 <dir_next+0x3c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003544:	2100      	movs	r1, #0
 8003546:	f106 0030 	add.w	r0, r6, #48	; 0x30
 800354a:	f7ff f9d1 	bl	80028f0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800354e:	4651      	mov	r1, sl
 8003550:	4630      	mov	r0, r6
 8003552:	f7ff fac5 	bl	8002ae0 <clust2sect>
 8003556:	62f0      	str	r0, [r6, #44]	; 0x2c
 8003558:	8973      	ldrh	r3, [r6, #10]
 800355a:	4599      	cmp	r9, r3
 800355c:	d20b      	bcs.n	8003576 <dir_next+0xd0>
						fs->wflag = 1;
 800355e:	2301      	movs	r3, #1
 8003560:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003562:	4630      	mov	r0, r6
 8003564:	f7ff fbb2 	bl	8002ccc <sync_window>
 8003568:	b9f8      	cbnz	r0, 80035aa <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800356a:	f109 0901 	add.w	r9, r9, #1
 800356e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003570:	3301      	adds	r3, #1
 8003572:	62f3      	str	r3, [r6, #44]	; 0x2c
 8003574:	e7f0      	b.n	8003558 <dir_next+0xb2>
					fs->winsect -= n;							/* Restore window offset */
 8003576:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003578:	eba3 0309 	sub.w	r3, r3, r9
 800357c:	62f3      	str	r3, [r6, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 800357e:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 8003582:	4651      	mov	r1, sl
 8003584:	4630      	mov	r0, r6
 8003586:	f7ff faab 	bl	8002ae0 <clust2sect>
 800358a:	61e0      	str	r0, [r4, #28]
 800358c:	e7a3      	b.n	80034d6 <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800358e:	2004      	movs	r0, #4
 8003590:	e7a7      	b.n	80034e2 <dir_next+0x3c>
 8003592:	2004      	movs	r0, #4
 8003594:	e7a5      	b.n	80034e2 <dir_next+0x3c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003596:	2002      	movs	r0, #2
 8003598:	e7a3      	b.n	80034e2 <dir_next+0x3c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800359a:	2001      	movs	r0, #1
 800359c:	e7a1      	b.n	80034e2 <dir_next+0x3c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800359e:	2007      	movs	r0, #7
 80035a0:	e79f      	b.n	80034e2 <dir_next+0x3c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80035a2:	2002      	movs	r0, #2
 80035a4:	e79d      	b.n	80034e2 <dir_next+0x3c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80035a6:	2001      	movs	r0, #1
 80035a8:	e79b      	b.n	80034e2 <dir_next+0x3c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80035aa:	2001      	movs	r0, #1
 80035ac:	e799      	b.n	80034e2 <dir_next+0x3c>

080035ae <dir_find>:
{
 80035ae:	b570      	push	{r4, r5, r6, lr}
 80035b0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80035b2:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80035b4:	2100      	movs	r1, #0
 80035b6:	f7ff fe76 	bl	80032a6 <dir_sdi>
	if (res != FR_OK) return res;
 80035ba:	4605      	mov	r5, r0
 80035bc:	b140      	cbz	r0, 80035d0 <dir_find+0x22>
}
 80035be:	4628      	mov	r0, r5
 80035c0:	bd70      	pop	{r4, r5, r6, pc}
		res = dir_next(dp, 0);	/* Next entry */
 80035c2:	2100      	movs	r1, #0
 80035c4:	4620      	mov	r0, r4
 80035c6:	f7ff ff6e 	bl	80034a6 <dir_next>
	} while (res == FR_OK);
 80035ca:	4605      	mov	r5, r0
 80035cc:	2800      	cmp	r0, #0
 80035ce:	d1f6      	bne.n	80035be <dir_find+0x10>
		res = move_window(fs, dp->sect);
 80035d0:	69e1      	ldr	r1, [r4, #28]
 80035d2:	4630      	mov	r0, r6
 80035d4:	f7ff fba3 	bl	8002d1e <move_window>
		if (res != FR_OK) break;
 80035d8:	4605      	mov	r5, r0
 80035da:	2800      	cmp	r0, #0
 80035dc:	d1ef      	bne.n	80035be <dir_find+0x10>
		c = dp->dir[DIR_Name];
 80035de:	6a20      	ldr	r0, [r4, #32]
 80035e0:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80035e2:	b17b      	cbz	r3, 8003604 <dir_find+0x56>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80035e4:	7ac3      	ldrb	r3, [r0, #11]
 80035e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035ea:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80035ec:	7ac3      	ldrb	r3, [r0, #11]
 80035ee:	f013 0f08 	tst.w	r3, #8
 80035f2:	d1e6      	bne.n	80035c2 <dir_find+0x14>
 80035f4:	220b      	movs	r2, #11
 80035f6:	f104 0124 	add.w	r1, r4, #36	; 0x24
 80035fa:	f7ff f97e 	bl	80028fa <mem_cmp>
 80035fe:	2800      	cmp	r0, #0
 8003600:	d1df      	bne.n	80035c2 <dir_find+0x14>
 8003602:	e7dc      	b.n	80035be <dir_find+0x10>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003604:	2504      	movs	r5, #4
 8003606:	e7da      	b.n	80035be <dir_find+0x10>

08003608 <follow_path>:
{
 8003608:	b530      	push	{r4, r5, lr}
 800360a:	b083      	sub	sp, #12
 800360c:	4604      	mov	r4, r0
 800360e:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8003610:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003612:	9b01      	ldr	r3, [sp, #4]
 8003614:	781a      	ldrb	r2, [r3, #0]
 8003616:	2a5c      	cmp	r2, #92	; 0x5c
 8003618:	bf18      	it	ne
 800361a:	2a2f      	cmpne	r2, #47	; 0x2f
 800361c:	d102      	bne.n	8003624 <follow_path+0x1c>
 800361e:	3301      	adds	r3, #1
 8003620:	9301      	str	r3, [sp, #4]
 8003622:	e7f6      	b.n	8003612 <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
 8003624:	2200      	movs	r2, #0
 8003626:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b1f      	cmp	r3, #31
 800362c:	d81b      	bhi.n	8003666 <follow_path+0x5e>
		dp->fn[NSFLAG] = NS_NONAME;
 800362e:	2380      	movs	r3, #128	; 0x80
 8003630:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8003634:	4611      	mov	r1, r2
 8003636:	4620      	mov	r0, r4
 8003638:	f7ff fe35 	bl	80032a6 <dir_sdi>
 800363c:	4603      	mov	r3, r0
}
 800363e:	4618      	mov	r0, r3
 8003640:	b003      	add	sp, #12
 8003642:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003644:	2804      	cmp	r0, #4
 8003646:	d1fa      	bne.n	800363e <follow_path+0x36>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003648:	f012 0f04 	tst.w	r2, #4
 800364c:	d1f7      	bne.n	800363e <follow_path+0x36>
 800364e:	2305      	movs	r3, #5
 8003650:	e7f5      	b.n	800363e <follow_path+0x36>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003652:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8003656:	6963      	ldr	r3, [r4, #20]
 8003658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365c:	4419      	add	r1, r3
 800365e:	4628      	mov	r0, r5
 8003660:	f7ff fa5b 	bl	8002b1a <ld_clust>
 8003664:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003666:	a901      	add	r1, sp, #4
 8003668:	4620      	mov	r0, r4
 800366a:	f7ff fa7d 	bl	8002b68 <create_name>
			if (res != FR_OK) break;
 800366e:	4603      	mov	r3, r0
 8003670:	2800      	cmp	r0, #0
 8003672:	d1e4      	bne.n	800363e <follow_path+0x36>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003674:	4620      	mov	r0, r4
 8003676:	f7ff ff9a 	bl	80035ae <dir_find>
			ns = dp->fn[NSFLAG];
 800367a:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800367e:	4603      	mov	r3, r0
 8003680:	2800      	cmp	r0, #0
 8003682:	d1df      	bne.n	8003644 <follow_path+0x3c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003684:	f012 0f04 	tst.w	r2, #4
 8003688:	d1d9      	bne.n	800363e <follow_path+0x36>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800368a:	79a3      	ldrb	r3, [r4, #6]
 800368c:	f013 0f10 	tst.w	r3, #16
 8003690:	d1df      	bne.n	8003652 <follow_path+0x4a>
				res = FR_NO_PATH; break;
 8003692:	2305      	movs	r3, #5
 8003694:	e7d3      	b.n	800363e <follow_path+0x36>

08003696 <dir_alloc>:
{
 8003696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003698:	4604      	mov	r4, r0
 800369a:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 800369c:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 800369e:	2100      	movs	r1, #0
 80036a0:	f7ff fe01 	bl	80032a6 <dir_sdi>
	if (res == FR_OK) {
 80036a4:	4602      	mov	r2, r0
 80036a6:	b9b8      	cbnz	r0, 80036d8 <dir_alloc+0x42>
		n = 0;
 80036a8:	2500      	movs	r5, #0
 80036aa:	e006      	b.n	80036ba <dir_alloc+0x24>
				n = 0;					/* Not a blank entry. Restart to search */
 80036ac:	2500      	movs	r5, #0
			res = dir_next(dp, 1);
 80036ae:	2101      	movs	r1, #1
 80036b0:	4620      	mov	r0, r4
 80036b2:	f7ff fef8 	bl	80034a6 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80036b6:	4602      	mov	r2, r0
 80036b8:	b970      	cbnz	r0, 80036d8 <dir_alloc+0x42>
			res = move_window(fs, dp->sect);
 80036ba:	69e1      	ldr	r1, [r4, #28]
 80036bc:	4638      	mov	r0, r7
 80036be:	f7ff fb2e 	bl	8002d1e <move_window>
			if (res != FR_OK) break;
 80036c2:	4602      	mov	r2, r0
 80036c4:	b940      	cbnz	r0, 80036d8 <dir_alloc+0x42>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80036c6:	6a23      	ldr	r3, [r4, #32]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bf18      	it	ne
 80036ce:	2be5      	cmpne	r3, #229	; 0xe5
 80036d0:	d1ec      	bne.n	80036ac <dir_alloc+0x16>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80036d2:	3501      	adds	r5, #1
 80036d4:	42b5      	cmp	r5, r6
 80036d6:	d1ea      	bne.n	80036ae <dir_alloc+0x18>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80036d8:	2a04      	cmp	r2, #4
 80036da:	d001      	beq.n	80036e0 <dir_alloc+0x4a>
}
 80036dc:	4610      	mov	r0, r2
 80036de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80036e0:	2207      	movs	r2, #7
 80036e2:	e7fb      	b.n	80036dc <dir_alloc+0x46>

080036e4 <dir_register>:
{
 80036e4:	b570      	push	{r4, r5, r6, lr}
 80036e6:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80036e8:	6806      	ldr	r6, [r0, #0]
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80036ea:	2101      	movs	r1, #1
 80036ec:	f7ff ffd3 	bl	8003696 <dir_alloc>
	if (res == FR_OK) {
 80036f0:	4605      	mov	r5, r0
 80036f2:	b108      	cbz	r0, 80036f8 <dir_register+0x14>
}
 80036f4:	4628      	mov	r0, r5
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(fs, dp->sect);
 80036f8:	69e1      	ldr	r1, [r4, #28]
 80036fa:	4630      	mov	r0, r6
 80036fc:	f7ff fb0f 	bl	8002d1e <move_window>
		if (res == FR_OK) {
 8003700:	4605      	mov	r5, r0
 8003702:	2800      	cmp	r0, #0
 8003704:	d1f6      	bne.n	80036f4 <dir_register+0x10>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003706:	2220      	movs	r2, #32
 8003708:	2100      	movs	r1, #0
 800370a:	6a20      	ldr	r0, [r4, #32]
 800370c:	f7ff f8f0 	bl	80028f0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003710:	220b      	movs	r2, #11
 8003712:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8003716:	6a20      	ldr	r0, [r4, #32]
 8003718:	f7ff f8de 	bl	80028d8 <mem_cpy>
			fs->wflag = 1;
 800371c:	2301      	movs	r3, #1
 800371e:	70f3      	strb	r3, [r6, #3]
 8003720:	e7e8      	b.n	80036f4 <dir_register+0x10>
	...

08003724 <sync_fs>:
{
 8003724:	b570      	push	{r4, r5, r6, lr}
 8003726:	4604      	mov	r4, r0
	res = sync_window(fs);
 8003728:	f7ff fad0 	bl	8002ccc <sync_window>
	if (res == FR_OK) {
 800372c:	4605      	mov	r5, r0
 800372e:	b948      	cbnz	r0, 8003744 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003730:	7823      	ldrb	r3, [r4, #0]
 8003732:	2b03      	cmp	r3, #3
 8003734:	d008      	beq.n	8003748 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003736:	2200      	movs	r2, #0
 8003738:	4611      	mov	r1, r2
 800373a:	7860      	ldrb	r0, [r4, #1]
 800373c:	f7ff f8a0 	bl	8002880 <disk_ioctl>
 8003740:	b100      	cbz	r0, 8003744 <sync_fs+0x20>
 8003742:	2501      	movs	r5, #1
}
 8003744:	4628      	mov	r0, r5
 8003746:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003748:	7923      	ldrb	r3, [r4, #4]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d1f3      	bne.n	8003736 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 800374e:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003756:	2100      	movs	r1, #0
 8003758:	4630      	mov	r0, r6
 800375a:	f7ff f8c9 	bl	80028f0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800375e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003762:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8003766:	f7ff f8a9 	bl	80028bc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800376a:	490f      	ldr	r1, [pc, #60]	; (80037a8 <sync_fs+0x84>)
 800376c:	4630      	mov	r0, r6
 800376e:	f7ff f8a9 	bl	80028c4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003772:	490e      	ldr	r1, [pc, #56]	; (80037ac <sync_fs+0x88>)
 8003774:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8003778:	f7ff f8a4 	bl	80028c4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800377c:	6921      	ldr	r1, [r4, #16]
 800377e:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8003782:	f7ff f89f 	bl	80028c4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003786:	68e1      	ldr	r1, [r4, #12]
 8003788:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800378c:	f7ff f89a 	bl	80028c4 <st_dword>
			fs->winsect = fs->volbase + 1;
 8003790:	69e2      	ldr	r2, [r4, #28]
 8003792:	3201      	adds	r2, #1
 8003794:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003796:	2301      	movs	r3, #1
 8003798:	4631      	mov	r1, r6
 800379a:	7860      	ldrb	r0, [r4, #1]
 800379c:	f7ff f864 	bl	8002868 <disk_write>
			fs->fsi_flag = 0;
 80037a0:	2300      	movs	r3, #0
 80037a2:	7123      	strb	r3, [r4, #4]
 80037a4:	e7c7      	b.n	8003736 <sync_fs+0x12>
 80037a6:	bf00      	nop
 80037a8:	41615252 	.word	0x41615252
 80037ac:	61417272 	.word	0x61417272

080037b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	9001      	str	r0, [sp, #4]
 80037b6:	9100      	str	r1, [sp, #0]
 80037b8:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80037ba:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80037bc:	a803      	add	r0, sp, #12
 80037be:	f7ff fa3d 	bl	8002c3c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80037c2:	1e05      	subs	r5, r0, #0
 80037c4:	db22      	blt.n	800380c <f_mount+0x5c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80037c6:	4b12      	ldr	r3, [pc, #72]	; (8003810 <f_mount+0x60>)
 80037c8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80037cc:	6a1e      	ldr	r6, [r3, #32]

	if (cfs) {
 80037ce:	b126      	cbz	r6, 80037da <f_mount+0x2a>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80037d0:	4630      	mov	r0, r6
 80037d2:	f7ff f967 	bl	8002aa4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80037d6:	2300      	movs	r3, #0
 80037d8:	7033      	strb	r3, [r6, #0]
	}

	if (fs) {
 80037da:	9b01      	ldr	r3, [sp, #4]
 80037dc:	b10b      	cbz	r3, 80037e2 <f_mount+0x32>
		fs->fs_type = 0;				/* Clear new fs object */
 80037de:	2200      	movs	r2, #0
 80037e0:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80037e2:	9a01      	ldr	r2, [sp, #4]
 80037e4:	480a      	ldr	r0, [pc, #40]	; (8003810 <f_mount+0x60>)
 80037e6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80037ea:	6202      	str	r2, [r0, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80037ec:	3c01      	subs	r4, #1
 80037ee:	bf18      	it	ne
 80037f0:	2401      	movne	r4, #1
 80037f2:	2a00      	cmp	r2, #0
 80037f4:	bf08      	it	eq
 80037f6:	2401      	moveq	r4, #1
 80037f8:	b114      	cbz	r4, 8003800 <f_mount+0x50>
 80037fa:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80037fc:	b004      	add	sp, #16
 80037fe:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8003800:	2200      	movs	r2, #0
 8003802:	a901      	add	r1, sp, #4
 8003804:	4668      	mov	r0, sp
 8003806:	f7ff fae1 	bl	8002dcc <find_volume>
	LEAVE_FF(fs, res);
 800380a:	e7f7      	b.n	80037fc <f_mount+0x4c>
	if (vol < 0) return FR_INVALID_DRIVE;
 800380c:	200b      	movs	r0, #11
 800380e:	e7f5      	b.n	80037fc <f_mount+0x4c>
 8003810:	20000684 	.word	0x20000684

08003814 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003818:	b091      	sub	sp, #68	; 0x44
 800381a:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800381c:	2800      	cmp	r0, #0
 800381e:	f000 810f 	beq.w	8003a40 <f_open+0x22c>
 8003822:	4615      	mov	r5, r2
 8003824:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8003826:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800382a:	463a      	mov	r2, r7
 800382c:	a903      	add	r1, sp, #12
 800382e:	a801      	add	r0, sp, #4
 8003830:	f7ff facc 	bl	8002dcc <find_volume>
	if (res == FR_OK) {
 8003834:	4604      	mov	r4, r0
 8003836:	b130      	cbz	r0, 8003846 <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003838:	b10c      	cbz	r4, 800383e <f_open+0x2a>
 800383a:	2300      	movs	r3, #0
 800383c:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 800383e:	4620      	mov	r0, r4
 8003840:	b011      	add	sp, #68	; 0x44
 8003842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 8003846:	9b03      	ldr	r3, [sp, #12]
 8003848:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800384a:	9901      	ldr	r1, [sp, #4]
 800384c:	a804      	add	r0, sp, #16
 800384e:	f7ff fedb 	bl	8003608 <follow_path>
		if (res == FR_OK) {
 8003852:	4604      	mov	r4, r0
 8003854:	b960      	cbnz	r0, 8003870 <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003856:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800385a:	2b00      	cmp	r3, #0
 800385c:	db50      	blt.n	8003900 <f_open+0xec>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800385e:	f037 0301 	bics.w	r3, r7, #1
 8003862:	bf14      	ite	ne
 8003864:	2101      	movne	r1, #1
 8003866:	2100      	moveq	r1, #0
 8003868:	a804      	add	r0, sp, #16
 800386a:	f7ff f85d 	bl	8002928 <chk_lock>
 800386e:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003870:	f015 0f1c 	tst.w	r5, #28
 8003874:	d05a      	beq.n	800392c <f_open+0x118>
			if (res != FR_OK) {					/* No file, create new */
 8003876:	2c00      	cmp	r4, #0
 8003878:	d04e      	beq.n	8003918 <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800387a:	2c04      	cmp	r4, #4
 800387c:	d042      	beq.n	8003904 <f_open+0xf0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800387e:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003882:	2c00      	cmp	r4, #0
 8003884:	d161      	bne.n	800394a <f_open+0x136>
 8003886:	f017 0f08 	tst.w	r7, #8
 800388a:	d05e      	beq.n	800394a <f_open+0x136>
				dw = GET_FATTIME();
 800388c:	f7ff f804 	bl	8002898 <get_fattime>
 8003890:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8003892:	4601      	mov	r1, r0
 8003894:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003896:	300e      	adds	r0, #14
 8003898:	f7ff f814 	bl	80028c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800389c:	4629      	mov	r1, r5
 800389e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80038a0:	3016      	adds	r0, #22
 80038a2:	f7ff f80f 	bl	80028c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80038a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038a8:	2220      	movs	r2, #32
 80038aa:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80038ac:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80038b0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80038b4:	4649      	mov	r1, r9
 80038b6:	4640      	mov	r0, r8
 80038b8:	f7ff f92f 	bl	8002b1a <ld_clust>
 80038bc:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80038be:	2200      	movs	r2, #0
 80038c0:	4649      	mov	r1, r9
 80038c2:	4640      	mov	r0, r8
 80038c4:	f7ff f93c 	bl	8002b40 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80038c8:	2100      	movs	r1, #0
 80038ca:	980c      	ldr	r0, [sp, #48]	; 0x30
 80038cc:	301c      	adds	r0, #28
 80038ce:	f7fe fff9 	bl	80028c4 <st_dword>
					fs->wflag = 1;
 80038d2:	9b03      	ldr	r3, [sp, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 80038d8:	b3bd      	cbz	r5, 800394a <f_open+0x136>
						dw = fs->winsect;
 80038da:	9b03      	ldr	r3, [sp, #12]
 80038dc:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 80038e0:	2200      	movs	r2, #0
 80038e2:	4629      	mov	r1, r5
 80038e4:	a804      	add	r0, sp, #16
 80038e6:	f7ff fd9f 	bl	8003428 <remove_chain>
						if (res == FR_OK) {
 80038ea:	4604      	mov	r4, r0
 80038ec:	bb68      	cbnz	r0, 800394a <f_open+0x136>
							res = move_window(fs, dw);
 80038ee:	4641      	mov	r1, r8
 80038f0:	9803      	ldr	r0, [sp, #12]
 80038f2:	f7ff fa14 	bl	8002d1e <move_window>
 80038f6:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80038f8:	3d01      	subs	r5, #1
 80038fa:	9b03      	ldr	r3, [sp, #12]
 80038fc:	60dd      	str	r5, [r3, #12]
 80038fe:	e024      	b.n	800394a <f_open+0x136>
				res = FR_INVALID_NAME;
 8003900:	2406      	movs	r4, #6
 8003902:	e7b5      	b.n	8003870 <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003904:	f7ff f84c 	bl	80029a0 <enq_lock>
 8003908:	b908      	cbnz	r0, 800390e <f_open+0xfa>
 800390a:	2412      	movs	r4, #18
 800390c:	e7b7      	b.n	800387e <f_open+0x6a>
 800390e:	a804      	add	r0, sp, #16
 8003910:	f7ff fee8 	bl	80036e4 <dir_register>
 8003914:	4604      	mov	r4, r0
 8003916:	e7b2      	b.n	800387e <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003918:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800391c:	f013 0f11 	tst.w	r3, #17
 8003920:	d112      	bne.n	8003948 <f_open+0x134>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003922:	f015 0f04 	tst.w	r5, #4
 8003926:	d0ac      	beq.n	8003882 <f_open+0x6e>
 8003928:	2408      	movs	r4, #8
 800392a:	e00e      	b.n	800394a <f_open+0x136>
			if (res == FR_OK) {					/* Following succeeded */
 800392c:	b96c      	cbnz	r4, 800394a <f_open+0x136>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800392e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003932:	f013 0f10 	tst.w	r3, #16
 8003936:	d14c      	bne.n	80039d2 <f_open+0x1be>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8003938:	f015 0f02 	tst.w	r5, #2
 800393c:	d005      	beq.n	800394a <f_open+0x136>
 800393e:	f013 0f01 	tst.w	r3, #1
 8003942:	d002      	beq.n	800394a <f_open+0x136>
						res = FR_DENIED;
 8003944:	2407      	movs	r4, #7
 8003946:	e016      	b.n	8003976 <f_open+0x162>
					res = FR_DENIED;
 8003948:	2407      	movs	r4, #7
		if (res == FR_OK) {
 800394a:	b9a4      	cbnz	r4, 8003976 <f_open+0x162>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800394c:	f017 0f08 	tst.w	r7, #8
 8003950:	d001      	beq.n	8003956 <f_open+0x142>
				mode |= FA_MODIFIED;
 8003952:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003956:	9b03      	ldr	r3, [sp, #12]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800395c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800395e:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003960:	f037 0301 	bics.w	r3, r7, #1
 8003964:	bf14      	ite	ne
 8003966:	2101      	movne	r1, #1
 8003968:	2100      	moveq	r1, #0
 800396a:	a804      	add	r0, sp, #16
 800396c:	f7ff f828 	bl	80029c0 <inc_lock>
 8003970:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8003972:	2800      	cmp	r0, #0
 8003974:	d062      	beq.n	8003a3c <f_open+0x228>
		if (res == FR_OK) {
 8003976:	2c00      	cmp	r4, #0
 8003978:	f47f af5e 	bne.w	8003838 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800397c:	9d03      	ldr	r5, [sp, #12]
 800397e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8003982:	4641      	mov	r1, r8
 8003984:	4628      	mov	r0, r5
 8003986:	f7ff f8c8 	bl	8002b1a <ld_clust>
 800398a:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800398c:	f108 001c 	add.w	r0, r8, #28
 8003990:	f7fe ff89 	bl	80028a6 <ld_dword>
 8003994:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8003996:	2100      	movs	r1, #0
 8003998:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 800399a:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
 800399c:	88eb      	ldrh	r3, [r5, #6]
 800399e:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 80039a0:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 80039a2:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80039a4:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80039a6:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80039a8:	f106 0830 	add.w	r8, r6, #48	; 0x30
 80039ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b0:	4640      	mov	r0, r8
 80039b2:	f7fe ff9d 	bl	80028f0 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80039b6:	f017 0f20 	tst.w	r7, #32
 80039ba:	f43f af3d 	beq.w	8003838 <f_open+0x24>
 80039be:	68f5      	ldr	r5, [r6, #12]
 80039c0:	2d00      	cmp	r5, #0
 80039c2:	f43f af39 	beq.w	8003838 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80039c6:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80039c8:	9b03      	ldr	r3, [sp, #12]
 80039ca:	895f      	ldrh	r7, [r3, #10]
 80039cc:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80039ce:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80039d0:	e005      	b.n	80039de <f_open+0x1ca>
					res = FR_NO_FILE;
 80039d2:	2404      	movs	r4, #4
 80039d4:	e7cf      	b.n	8003976 <f_open+0x162>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80039d6:	f1b1 3fff 	cmp.w	r1, #4294967295
 80039da:	d010      	beq.n	80039fe <f_open+0x1ea>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80039dc:	1bed      	subs	r5, r5, r7
 80039de:	42bd      	cmp	r5, r7
 80039e0:	bf94      	ite	ls
 80039e2:	2300      	movls	r3, #0
 80039e4:	2301      	movhi	r3, #1
 80039e6:	2c00      	cmp	r4, #0
 80039e8:	bf18      	it	ne
 80039ea:	2300      	movne	r3, #0
 80039ec:	b14b      	cbz	r3, 8003a02 <f_open+0x1ee>
					clst = get_fat(&fp->obj, clst);
 80039ee:	4630      	mov	r0, r6
 80039f0:	f7ff fbf1 	bl	80031d6 <get_fat>
 80039f4:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80039f6:	2801      	cmp	r0, #1
 80039f8:	d8ed      	bhi.n	80039d6 <f_open+0x1c2>
 80039fa:	2402      	movs	r4, #2
 80039fc:	e7eb      	b.n	80039d6 <f_open+0x1c2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80039fe:	2401      	movs	r4, #1
 8003a00:	e7ec      	b.n	80039dc <f_open+0x1c8>
				fp->clust = clst;
 8003a02:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8003a04:	2c00      	cmp	r4, #0
 8003a06:	f47f af17 	bne.w	8003838 <f_open+0x24>
 8003a0a:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f43f af12 	beq.w	8003838 <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8003a14:	9f03      	ldr	r7, [sp, #12]
 8003a16:	4638      	mov	r0, r7
 8003a18:	f7ff f862 	bl	8002ae0 <clust2sect>
 8003a1c:	b908      	cbnz	r0, 8003a22 <f_open+0x20e>
						res = FR_INT_ERR;
 8003a1e:	2402      	movs	r4, #2
 8003a20:	e70b      	b.n	800383a <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8003a22:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 8003a26:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	4641      	mov	r1, r8
 8003a2c:	7878      	ldrb	r0, [r7, #1]
 8003a2e:	f7fe ff0f 	bl	8002850 <disk_read>
 8003a32:	2800      	cmp	r0, #0
 8003a34:	f43f af00 	beq.w	8003838 <f_open+0x24>
 8003a38:	2401      	movs	r4, #1
 8003a3a:	e6fe      	b.n	800383a <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8003a3c:	2402      	movs	r4, #2
 8003a3e:	e6fb      	b.n	8003838 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8003a40:	2409      	movs	r4, #9
 8003a42:	e6fc      	b.n	800383e <f_open+0x2a>

08003a44 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8003a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	4604      	mov	r4, r0
 8003a4c:	460e      	mov	r6, r1
 8003a4e:	4617      	mov	r7, r2
 8003a50:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8003a52:	2300      	movs	r3, #0
 8003a54:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8003a58:	9001      	str	r0, [sp, #4]
 8003a5a:	a903      	add	r1, sp, #12
 8003a5c:	f7ff f913 	bl	8002c86 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003a60:	9000      	str	r0, [sp, #0]
 8003a62:	2800      	cmp	r0, #0
 8003a64:	f040 80ae 	bne.w	8003bc4 <f_read+0x180>
 8003a68:	7d63      	ldrb	r3, [r4, #21]
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f040 80a9 	bne.w	8003bc4 <f_read+0x180>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003a72:	7d23      	ldrb	r3, [r4, #20]
 8003a74:	f013 0f01 	tst.w	r3, #1
 8003a78:	f000 80c3 	beq.w	8003c02 <f_read+0x1be>
	remain = fp->obj.objsize - fp->fptr;
 8003a7c:	68e5      	ldr	r5, [r4, #12]
 8003a7e:	69a3      	ldr	r3, [r4, #24]
 8003a80:	1aed      	subs	r5, r5, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8003a82:	42bd      	cmp	r5, r7
 8003a84:	d362      	bcc.n	8003b4c <f_read+0x108>
 8003a86:	463d      	mov	r5, r7
 8003a88:	e060      	b.n	8003b4c <f_read+0x108>
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8003a8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003a8c:	b11b      	cbz	r3, 8003a96 <f_read+0x52>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f7ff f832 	bl	8002af8 <clmt_clust>
 8003a94:	e06a      	b.n	8003b6c <f_read+0x128>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8003a96:	69e1      	ldr	r1, [r4, #28]
 8003a98:	9801      	ldr	r0, [sp, #4]
 8003a9a:	f7ff fb9c 	bl	80031d6 <get_fat>
 8003a9e:	e065      	b.n	8003b6c <f_read+0x128>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8003aa0:	f04f 0a02 	mov.w	sl, #2
 8003aa4:	f884 a015 	strb.w	sl, [r4, #21]
 8003aa8:	f8cd a000 	str.w	sl, [sp]
 8003aac:	e08a      	b.n	8003bc4 <f_read+0x180>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003aae:	f04f 0a01 	mov.w	sl, #1
 8003ab2:	f884 a015 	strb.w	sl, [r4, #21]
 8003ab6:	f8cd a000 	str.w	sl, [sp]
 8003aba:	e083      	b.n	8003bc4 <f_read+0x180>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 8003abc:	f04f 0a02 	mov.w	sl, #2
 8003ac0:	f884 a015 	strb.w	sl, [r4, #21]
 8003ac4:	f8cd a000 	str.w	sl, [sp]
 8003ac8:	e07c      	b.n	8003bc4 <f_read+0x180>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8003aca:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	db02      	blt.n	8003ad8 <f_read+0x94>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8003ad2:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 8003ad6:	e02f      	b.n	8003b38 <f_read+0xf4>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8003ad8:	6a20      	ldr	r0, [r4, #32]
 8003ada:	eba0 0009 	sub.w	r0, r0, r9
 8003ade:	4550      	cmp	r0, sl
 8003ae0:	d2f7      	bcs.n	8003ad2 <f_read+0x8e>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8003ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ae6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8003aea:	eb06 2040 	add.w	r0, r6, r0, lsl #9
 8003aee:	f7fe fef3 	bl	80028d8 <mem_cpy>
 8003af2:	e7ee      	b.n	8003ad2 <f_read+0x8e>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8003af4:	6a22      	ldr	r2, [r4, #32]
 8003af6:	454a      	cmp	r2, r9
 8003af8:	d00d      	beq.n	8003b16 <f_read+0xd2>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8003afa:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	db64      	blt.n	8003bcc <f_read+0x188>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003b02:	2301      	movs	r3, #1
 8003b04:	464a      	mov	r2, r9
 8003b06:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8003b0a:	9803      	ldr	r0, [sp, #12]
 8003b0c:	7840      	ldrb	r0, [r0, #1]
 8003b0e:	f7fe fe9f 	bl	8002850 <disk_read>
 8003b12:	2800      	cmp	r0, #0
 8003b14:	d16e      	bne.n	8003bf4 <f_read+0x1b0>
			}
#endif
			fp->sect = sect;
 8003b16:	f8c4 9020 	str.w	r9, [r4, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003b1a:	69a3      	ldr	r3, [r4, #24]
 8003b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b20:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8003b24:	42bd      	cmp	r5, r7
 8003b26:	d200      	bcs.n	8003b2a <f_read+0xe6>
 8003b28:	462f      	mov	r7, r5
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8003b2a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8003b2e:	463a      	mov	r2, r7
 8003b30:	4419      	add	r1, r3
 8003b32:	4630      	mov	r0, r6
 8003b34:	f7fe fed0 	bl	80028d8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8003b38:	443e      	add	r6, r7
 8003b3a:	69a3      	ldr	r3, [r4, #24]
 8003b3c:	443b      	add	r3, r7
 8003b3e:	61a3      	str	r3, [r4, #24]
 8003b40:	f8d8 3000 	ldr.w	r3, [r8]
 8003b44:	443b      	add	r3, r7
 8003b46:	f8c8 3000 	str.w	r3, [r8]
 8003b4a:	1bed      	subs	r5, r5, r7
	for ( ;  btr;								/* Repeat until all data read */
 8003b4c:	2d00      	cmp	r5, #0
 8003b4e:	d039      	beq.n	8003bc4 <f_read+0x180>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8003b50:	69a1      	ldr	r1, [r4, #24]
 8003b52:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1df      	bne.n	8003b1a <f_read+0xd6>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8003b5a:	9b03      	ldr	r3, [sp, #12]
 8003b5c:	895f      	ldrh	r7, [r3, #10]
 8003b5e:	3f01      	subs	r7, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8003b60:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 8003b64:	d108      	bne.n	8003b78 <f_read+0x134>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8003b66:	2900      	cmp	r1, #0
 8003b68:	d18f      	bne.n	8003a8a <f_read+0x46>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8003b6a:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8003b6c:	2801      	cmp	r0, #1
 8003b6e:	d997      	bls.n	8003aa0 <f_read+0x5c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003b70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003b74:	d09b      	beq.n	8003aae <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
 8003b76:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8003b78:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003b7c:	69e1      	ldr	r1, [r4, #28]
 8003b7e:	4658      	mov	r0, fp
 8003b80:	f7fe ffae 	bl	8002ae0 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8003b84:	4681      	mov	r9, r0
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d098      	beq.n	8003abc <f_read+0x78>
			sect += csect;
 8003b8a:	44b9      	add	r9, r7
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8003b8c:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {							/* Read maximum contiguous sectors directly */
 8003b90:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8003b94:	d3ae      	bcc.n	8003af4 <f_read+0xb0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003b96:	eb07 030a 	add.w	r3, r7, sl
 8003b9a:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <f_read+0x162>
					cc = fs->csize - csect;
 8003ba2:	eba2 0a07 	sub.w	sl, r2, r7
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003ba6:	4653      	mov	r3, sl
 8003ba8:	464a      	mov	r2, r9
 8003baa:	4631      	mov	r1, r6
 8003bac:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8003bb0:	f7fe fe4e 	bl	8002850 <disk_read>
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	d088      	beq.n	8003aca <f_read+0x86>
 8003bb8:	f04f 0a01 	mov.w	sl, #1
 8003bbc:	f884 a015 	strb.w	sl, [r4, #21]
 8003bc0:	f8cd a000 	str.w	sl, [sp]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8003bc4:	9800      	ldr	r0, [sp, #0]
 8003bc6:	b005      	add	sp, #20
 8003bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8003bd2:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8003bd6:	f7fe fe47 	bl	8002868 <disk_write>
 8003bda:	b920      	cbnz	r0, 8003be6 <f_read+0x1a2>
					fp->flag &= (BYTE)~FA_DIRTY;
 8003bdc:	7d23      	ldrb	r3, [r4, #20]
 8003bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be2:	7523      	strb	r3, [r4, #20]
 8003be4:	e78d      	b.n	8003b02 <f_read+0xbe>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003be6:	f04f 0a01 	mov.w	sl, #1
 8003bea:	f884 a015 	strb.w	sl, [r4, #21]
 8003bee:	f8cd a000 	str.w	sl, [sp]
 8003bf2:	e7e7      	b.n	8003bc4 <f_read+0x180>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003bf4:	f04f 0a01 	mov.w	sl, #1
 8003bf8:	f884 a015 	strb.w	sl, [r4, #21]
 8003bfc:	f8cd a000 	str.w	sl, [sp]
 8003c00:	e7e0      	b.n	8003bc4 <f_read+0x180>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003c02:	2307      	movs	r3, #7
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	e7dd      	b.n	8003bc4 <f_read+0x180>

08003c08 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8003c08:	b570      	push	{r4, r5, r6, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003c0e:	a901      	add	r1, sp, #4
 8003c10:	f7ff f839 	bl	8002c86 <validate>
	if (res == FR_OK) {
 8003c14:	b970      	cbnz	r0, 8003c34 <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003c16:	7d23      	ldrb	r3, [r4, #20]
 8003c18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003c1c:	d00a      	beq.n	8003c34 <f_sync+0x2c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8003c1e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003c22:	d109      	bne.n	8003c38 <f_sync+0x30>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8003c24:	f7fe fe38 	bl	8002898 <get_fattime>
 8003c28:	4605      	mov	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8003c2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c2c:	9801      	ldr	r0, [sp, #4]
 8003c2e:	f7ff f876 	bl	8002d1e <move_window>
				if (res == FR_OK) {
 8003c32:	b178      	cbz	r0, 8003c54 <f_sync+0x4c>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8003c34:	b002      	add	sp, #8
 8003c36:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003c38:	2301      	movs	r3, #1
 8003c3a:	6a22      	ldr	r2, [r4, #32]
 8003c3c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8003c40:	9801      	ldr	r0, [sp, #4]
 8003c42:	7840      	ldrb	r0, [r0, #1]
 8003c44:	f7fe fe10 	bl	8002868 <disk_write>
 8003c48:	bb40      	cbnz	r0, 8003c9c <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003c4a:	7d23      	ldrb	r3, [r4, #20]
 8003c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c50:	7523      	strb	r3, [r4, #20]
 8003c52:	e7e7      	b.n	8003c24 <f_sync+0x1c>
					dir = fp->dir_ptr;
 8003c54:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8003c56:	7af3      	ldrb	r3, [r6, #11]
 8003c58:	f043 0320 	orr.w	r3, r3, #32
 8003c5c:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8003c5e:	68a2      	ldr	r2, [r4, #8]
 8003c60:	4631      	mov	r1, r6
 8003c62:	6820      	ldr	r0, [r4, #0]
 8003c64:	f7fe ff6c 	bl	8002b40 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8003c68:	68e1      	ldr	r1, [r4, #12]
 8003c6a:	f106 001c 	add.w	r0, r6, #28
 8003c6e:	f7fe fe29 	bl	80028c4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8003c72:	4629      	mov	r1, r5
 8003c74:	f106 0016 	add.w	r0, r6, #22
 8003c78:	f7fe fe24 	bl	80028c4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	f106 0012 	add.w	r0, r6, #18
 8003c82:	f7fe fe1b 	bl	80028bc <st_word>
					fs->wflag = 1;
 8003c86:	9b01      	ldr	r3, [sp, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8003c8c:	9801      	ldr	r0, [sp, #4]
 8003c8e:	f7ff fd49 	bl	8003724 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8003c92:	7d23      	ldrb	r3, [r4, #20]
 8003c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c98:	7523      	strb	r3, [r4, #20]
 8003c9a:	e7cb      	b.n	8003c34 <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	e7c9      	b.n	8003c34 <f_sync+0x2c>

08003ca0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8003ca0:	b510      	push	{r4, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003ca6:	f7ff ffaf 	bl	8003c08 <f_sync>
	if (res == FR_OK)
 8003caa:	b108      	cbz	r0, 8003cb0 <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8003cac:	b002      	add	sp, #8
 8003cae:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8003cb0:	a901      	add	r1, sp, #4
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	f7fe ffe7 	bl	8002c86 <validate>
		if (res == FR_OK) {
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	d1f7      	bne.n	8003cac <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8003cbc:	6920      	ldr	r0, [r4, #16]
 8003cbe:	f7fe fed1 	bl	8002a64 <dec_lock>
			if (res == FR_OK)
 8003cc2:	2800      	cmp	r0, #0
 8003cc4:	d1f2      	bne.n	8003cac <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 8003cc6:	6020      	str	r0, [r4, #0]
 8003cc8:	e7f0      	b.n	8003cac <f_close+0xc>

08003cca <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8003cca:	b530      	push	{r4, r5, lr}
 8003ccc:	b085      	sub	sp, #20
 8003cce:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	d03d      	beq.n	8003d50 <f_opendir+0x86>
 8003cd4:	4605      	mov	r5, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	a903      	add	r1, sp, #12
 8003cda:	a801      	add	r0, sp, #4
 8003cdc:	f7ff f876 	bl	8002dcc <find_volume>
	if (res == FR_OK) {
 8003ce0:	4604      	mov	r4, r0
 8003ce2:	b128      	cbz	r0, 8003cf0 <f_opendir+0x26>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8003ce4:	b10c      	cbz	r4, 8003cea <f_opendir+0x20>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 8003cea:	4620      	mov	r0, r4
 8003cec:	b005      	add	sp, #20
 8003cee:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 8003cf0:	9b03      	ldr	r3, [sp, #12]
 8003cf2:	602b      	str	r3, [r5, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8003cf4:	9901      	ldr	r1, [sp, #4]
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	f7ff fc86 	bl	8003608 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	bb18      	cbnz	r0, 8003d48 <f_opendir+0x7e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8003d00:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	db08      	blt.n	8003d1a <f_opendir+0x50>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8003d08:	79ab      	ldrb	r3, [r5, #6]
 8003d0a:	f013 0f10 	tst.w	r3, #16
 8003d0e:	d01a      	beq.n	8003d46 <f_opendir+0x7c>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8003d10:	6a29      	ldr	r1, [r5, #32]
 8003d12:	9803      	ldr	r0, [sp, #12]
 8003d14:	f7fe ff01 	bl	8002b1a <ld_clust>
 8003d18:	60a8      	str	r0, [r5, #8]
				obj->id = fs->id;
 8003d1a:	9b03      	ldr	r3, [sp, #12]
 8003d1c:	88db      	ldrh	r3, [r3, #6]
 8003d1e:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8003d20:	2100      	movs	r1, #0
 8003d22:	4628      	mov	r0, r5
 8003d24:	f7ff fabf 	bl	80032a6 <dir_sdi>
				if (res == FR_OK) {
 8003d28:	4604      	mov	r4, r0
 8003d2a:	b968      	cbnz	r0, 8003d48 <f_opendir+0x7e>
					if (obj->sclust) {
 8003d2c:	68ab      	ldr	r3, [r5, #8]
 8003d2e:	b913      	cbnz	r3, 8003d36 <f_opendir+0x6c>
						obj->lockid = 0;	/* Root directory need not to be locked */
 8003d30:	2300      	movs	r3, #0
 8003d32:	612b      	str	r3, [r5, #16]
 8003d34:	e008      	b.n	8003d48 <f_opendir+0x7e>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8003d36:	2100      	movs	r1, #0
 8003d38:	4628      	mov	r0, r5
 8003d3a:	f7fe fe41 	bl	80029c0 <inc_lock>
 8003d3e:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8003d40:	b910      	cbnz	r0, 8003d48 <f_opendir+0x7e>
 8003d42:	2412      	movs	r4, #18
 8003d44:	e7ce      	b.n	8003ce4 <f_opendir+0x1a>
					res = FR_NO_PATH;
 8003d46:	2405      	movs	r4, #5
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8003d48:	2c04      	cmp	r4, #4
 8003d4a:	d1cb      	bne.n	8003ce4 <f_opendir+0x1a>
 8003d4c:	2405      	movs	r4, #5
 8003d4e:	e7ca      	b.n	8003ce6 <f_opendir+0x1c>
	if (!dp) return FR_INVALID_OBJECT;
 8003d50:	2409      	movs	r4, #9
 8003d52:	e7ca      	b.n	8003cea <f_opendir+0x20>

08003d54 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8003d54:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <FATFS_LinkDriverEx+0x44>)
 8003d56:	7b9b      	ldrb	r3, [r3, #14]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d901      	bls.n	8003d62 <FATFS_LinkDriverEx+0xe>
  uint8_t ret = 1;
 8003d5e:	2001      	movs	r0, #1
    path[3] = 0;
    ret = 0;
  }

  return ret;
}
 8003d60:	4770      	bx	lr
{
 8003d62:	b430      	push	{r4, r5}
 8003d64:	4604      	mov	r4, r0
    disk.is_initialized[disk.nbr] = 0;
 8003d66:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <FATFS_LinkDriverEx+0x44>)
 8003d68:	7b9d      	ldrb	r5, [r3, #14]
 8003d6a:	b2ed      	uxtb	r5, r5
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	5558      	strb	r0, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8003d70:	7b9d      	ldrb	r5, [r3, #14]
 8003d72:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8003d76:	606c      	str	r4, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8003d78:	7b9c      	ldrb	r4, [r3, #14]
 8003d7a:	441c      	add	r4, r3
 8003d7c:	7322      	strb	r2, [r4, #12]
    DiskNum = disk.nbr++;
 8003d7e:	7b9a      	ldrb	r2, [r3, #14]
 8003d80:	1c54      	adds	r4, r2, #1
 8003d82:	b2e4      	uxtb	r4, r4
 8003d84:	739c      	strb	r4, [r3, #14]
    path[0] = DiskNum + '0';
 8003d86:	3230      	adds	r2, #48	; 0x30
 8003d88:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8003d8a:	233a      	movs	r3, #58	; 0x3a
 8003d8c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8003d8e:	232f      	movs	r3, #47	; 0x2f
 8003d90:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8003d92:	70c8      	strb	r0, [r1, #3]
}
 8003d94:	bc30      	pop	{r4, r5}
 8003d96:	4770      	bx	lr
 8003d98:	200006b0 	.word	0x200006b0

08003d9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8003d9c:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f7ff ffd8 	bl	8003d54 <FATFS_LinkDriverEx>
}
 8003da4:	bd08      	pop	{r3, pc}
	...

08003da8 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003da8:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8003daa:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <SD_CheckStatus+0x20>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003db0:	f7fe fb0e 	bl	80023d0 <BSP_SD_GetCardState>
 8003db4:	b920      	cbnz	r0, 8003dc0 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 8003db6:	4a04      	ldr	r2, [pc, #16]	; (8003dc8 <SD_CheckStatus+0x20>)
 8003db8:	7813      	ldrb	r3, [r2, #0]
 8003dba:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003dbe:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8003dc0:	4b01      	ldr	r3, [pc, #4]	; (8003dc8 <SD_CheckStatus+0x20>)
 8003dc2:	7818      	ldrb	r0, [r3, #0]
}
 8003dc4:	bd08      	pop	{r3, pc}
 8003dc6:	bf00      	nop
 8003dc8:	2000008a 	.word	0x2000008a

08003dcc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003dcc:	b510      	push	{r4, lr}
 8003dce:	4604      	mov	r4, r0
  Stat = STA_NOINIT;
 8003dd0:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <SD_initialize+0x24>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003dd6:	f7fe facf 	bl	8002378 <BSP_SD_Init>
 8003dda:	b110      	cbz	r0, 8003de2 <SD_initialize+0x16>
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <SD_initialize+0x24>)
 8003dde:	7818      	ldrb	r0, [r3, #0]
}
 8003de0:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 8003de2:	4620      	mov	r0, r4
 8003de4:	f7ff ffe0 	bl	8003da8 <SD_CheckStatus>
 8003de8:	4b01      	ldr	r3, [pc, #4]	; (8003df0 <SD_initialize+0x24>)
 8003dea:	7018      	strb	r0, [r3, #0]
 8003dec:	e7f6      	b.n	8003ddc <SD_initialize+0x10>
 8003dee:	bf00      	nop
 8003df0:	2000008a 	.word	0x2000008a

08003df4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003df4:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 8003df6:	f7ff ffd7 	bl	8003da8 <SD_CheckStatus>
}
 8003dfa:	bd08      	pop	{r3, pc}

08003dfc <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003dfc:	b508      	push	{r3, lr}
 8003dfe:	4608      	mov	r0, r1
 8003e00:	4611      	mov	r1, r2
 8003e02:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8003e04:	f04f 33ff 	mov.w	r3, #4294967295
 8003e08:	f7fe f9a6 	bl	8002158 <BSP_SD_ReadBlocks>
 8003e0c:	b930      	cbnz	r0, 8003e1c <SD_read+0x20>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8003e0e:	f7fe fadf 	bl	80023d0 <BSP_SD_GetCardState>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d1fa      	bne.n	8003e0e <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e7fb      	b.n	8003e18 <SD_read+0x1c>

08003e20 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003e20:	b508      	push	{r3, lr}
 8003e22:	4608      	mov	r0, r1
 8003e24:	4611      	mov	r1, r2
 8003e26:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8003e28:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2c:	f7fe f9a4 	bl	8002178 <BSP_SD_WriteBlocks>
 8003e30:	b930      	cbnz	r0, 8003e40 <SD_write+0x20>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8003e32:	f7fe facd 	bl	80023d0 <BSP_SD_GetCardState>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	d1fa      	bne.n	8003e32 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e7fb      	b.n	8003e3c <SD_write+0x1c>

08003e44 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003e44:	b530      	push	{r4, r5, lr}
 8003e46:	b089      	sub	sp, #36	; 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003e48:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <SD_ioctl+0x54>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	f013 0401 	ands.w	r4, r3, #1
 8003e50:	d11d      	bne.n	8003e8e <SD_ioctl+0x4a>
 8003e52:	4608      	mov	r0, r1
 8003e54:	4615      	mov	r5, r2

  switch (cmd)
 8003e56:	2903      	cmp	r1, #3
 8003e58:	d81c      	bhi.n	8003e94 <SD_ioctl+0x50>
 8003e5a:	e8df f001 	tbb	[pc, r1]
 8003e5e:	0219      	.short	0x0219
 8003e60:	1009      	.short	0x1009
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003e62:	4668      	mov	r0, sp
 8003e64:	f7fe fabe 	bl	80023e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003e68:	9b06      	ldr	r3, [sp, #24]
 8003e6a:	602b      	str	r3, [r5, #0]
    res = RES_OK;
 8003e6c:	4620      	mov	r0, r4
    break;
 8003e6e:	e00f      	b.n	8003e90 <SD_ioctl+0x4c>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003e70:	4668      	mov	r0, sp
 8003e72:	f7fe fab7 	bl	80023e4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003e76:	9b07      	ldr	r3, [sp, #28]
 8003e78:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
 8003e7a:	4620      	mov	r0, r4
    break;
 8003e7c:	e008      	b.n	8003e90 <SD_ioctl+0x4c>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003e7e:	4668      	mov	r0, sp
 8003e80:	f7fe fab0 	bl	80023e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003e84:	9b07      	ldr	r3, [sp, #28]
 8003e86:	0a5b      	lsrs	r3, r3, #9
 8003e88:	602b      	str	r3, [r5, #0]
	res = RES_OK;
 8003e8a:	4620      	mov	r0, r4
    break;
 8003e8c:	e000      	b.n	8003e90 <SD_ioctl+0x4c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003e8e:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8003e90:	b009      	add	sp, #36	; 0x24
 8003e92:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 8003e94:	2004      	movs	r0, #4
 8003e96:	e7fb      	b.n	8003e90 <SD_ioctl+0x4c>
 8003e98:	2000008a 	.word	0x2000008a

08003e9c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003e9c:	4770      	bx	lr
	...

08003ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ea0:	b510      	push	{r4, lr}
 8003ea2:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8003ea4:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <HAL_InitTick+0x24>)
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <HAL_InitTick+0x28>)
 8003eaa:	fba3 3000 	umull	r3, r0, r3, r0
 8003eae:	0980      	lsrs	r0, r0, #6
 8003eb0:	f000 f884 	bl	8003fbc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebc:	f000 f840 	bl	8003f40 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	bd10      	pop	{r4, pc}
 8003ec4:	20000094 	.word	0x20000094
 8003ec8:	10624dd3 	.word	0x10624dd3

08003ecc <HAL_Init>:
{
 8003ecc:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ece:	2003      	movs	r0, #3
 8003ed0:	f000 f824 	bl	8003f1c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f7ff ffe3 	bl	8003ea0 <HAL_InitTick>
  HAL_MspInit();
 8003eda:	f7ff ffdf 	bl	8003e9c <HAL_MspInit>
}
 8003ede:	2000      	movs	r0, #0
 8003ee0:	bd08      	pop	{r3, pc}
	...

08003ee4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003ee4:	4a02      	ldr	r2, [pc, #8]	; (8003ef0 <HAL_IncTick+0xc>)
 8003ee6:	6813      	ldr	r3, [r2, #0]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	6013      	str	r3, [r2, #0]
}
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20001e28 	.word	0x20001e28

08003ef4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003ef4:	4b01      	ldr	r3, [pc, #4]	; (8003efc <HAL_GetTick+0x8>)
 8003ef6:	6818      	ldr	r0, [r3, #0]
}
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	20001e28 	.word	0x20001e28

08003f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8003f00:	b510      	push	{r4, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8003f06:	f7ff fff5 	bl	8003ef4 <HAL_GetTick>
 8003f0a:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8003f0c:	f7ff fff2 	bl	8003ef4 <HAL_GetTick>
 8003f10:	1b00      	subs	r0, r0, r4
 8003f12:	9b01      	ldr	r3, [sp, #4]
 8003f14:	4298      	cmp	r0, r3
 8003f16:	d3f9      	bcc.n	8003f0c <HAL_Delay+0xc>
  {
  }
}
 8003f18:	b002      	add	sp, #8
 8003f1a:	bd10      	pop	{r4, pc}

08003f1c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f1c:	4906      	ldr	r1, [pc, #24]	; (8003f38 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8003f1e:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f24:	041b      	lsls	r3, r3, #16
 8003f26:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003f28:	0200      	lsls	r0, r0, #8
 8003f2a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f2e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003f30:	4a02      	ldr	r2, [pc, #8]	; (8003f3c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003f32:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8003f34:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003f36:	4770      	bx	lr
 8003f38:	e000ed00 	.word	0xe000ed00
 8003f3c:	05fa0000 	.word	0x05fa0000

08003f40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f40:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f42:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <HAL_NVIC_SetPriority+0x58>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f4a:	f1c3 0407 	rsb	r4, r3, #7
 8003f4e:	2c04      	cmp	r4, #4
 8003f50:	bf28      	it	cs
 8003f52:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f54:	1d1d      	adds	r5, r3, #4
 8003f56:	2d06      	cmp	r5, #6
 8003f58:	d914      	bls.n	8003f84 <HAL_NVIC_SetPriority+0x44>
 8003f5a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f5c:	f04f 35ff 	mov.w	r5, #4294967295
 8003f60:	fa05 f404 	lsl.w	r4, r5, r4
 8003f64:	ea21 0104 	bic.w	r1, r1, r4
 8003f68:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f6a:	fa05 f303 	lsl.w	r3, r5, r3
 8003f6e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f72:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8003f74:	2800      	cmp	r0, #0
 8003f76:	db07      	blt.n	8003f88 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f78:	0109      	lsls	r1, r1, #4
 8003f7a:	b2c9      	uxtb	r1, r1
 8003f7c:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <HAL_NVIC_SetPriority+0x5c>)
 8003f7e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003f80:	bc30      	pop	{r4, r5}
 8003f82:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f84:	2300      	movs	r3, #0
 8003f86:	e7e9      	b.n	8003f5c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f88:	f000 000f 	and.w	r0, r0, #15
 8003f8c:	0109      	lsls	r1, r1, #4
 8003f8e:	b2c9      	uxtb	r1, r1
 8003f90:	4b03      	ldr	r3, [pc, #12]	; (8003fa0 <HAL_NVIC_SetPriority+0x60>)
 8003f92:	5419      	strb	r1, [r3, r0]
 8003f94:	e7f4      	b.n	8003f80 <HAL_NVIC_SetPriority+0x40>
 8003f96:	bf00      	nop
 8003f98:	e000ed00 	.word	0xe000ed00
 8003f9c:	e000e400 	.word	0xe000e400
 8003fa0:	e000ed14 	.word	0xe000ed14

08003fa4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003fa4:	f000 021f 	and.w	r2, r0, #31
 8003fa8:	0940      	lsrs	r0, r0, #5
 8003faa:	2301      	movs	r3, #1
 8003fac:	4093      	lsls	r3, r2
 8003fae:	4a02      	ldr	r2, [pc, #8]	; (8003fb8 <HAL_NVIC_EnableIRQ+0x14>)
 8003fb0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	e000e100 	.word	0xe000e100

08003fbc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fbc:	3801      	subs	r0, #1
 8003fbe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003fc2:	d20a      	bcs.n	8003fda <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <HAL_SYSTICK_Config+0x24>)
 8003fc6:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc8:	4a06      	ldr	r2, [pc, #24]	; (8003fe4 <HAL_SYSTICK_Config+0x28>)
 8003fca:	21f0      	movs	r1, #240	; 0xf0
 8003fcc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fd4:	2207      	movs	r2, #7
 8003fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fd8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003fda:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	e000e010 	.word	0xe000e010
 8003fe4:	e000ed00 	.word	0xe000ed00

08003fe8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe8:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fea:	6805      	ldr	r5, [r0, #0]
 8003fec:	682c      	ldr	r4, [r5, #0]
 8003fee:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8003ff2:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ff4:	6804      	ldr	r4, [r0, #0]
 8003ff6:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ff8:	6883      	ldr	r3, [r0, #8]
 8003ffa:	2b40      	cmp	r3, #64	; 0x40
 8003ffc:	d005      	beq.n	800400a <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8003ffe:	6803      	ldr	r3, [r0, #0]
 8004000:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8004002:	6803      	ldr	r3, [r0, #0]
 8004004:	60da      	str	r2, [r3, #12]
  }
}
 8004006:	bc30      	pop	{r4, r5}
 8004008:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800400a:	6803      	ldr	r3, [r0, #0]
 800400c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800400e:	6803      	ldr	r3, [r0, #0]
 8004010:	60d9      	str	r1, [r3, #12]
 8004012:	e7f8      	b.n	8004006 <DMA_SetConfig+0x1e>

08004014 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004014:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004016:	6801      	ldr	r1, [r0, #0]
 8004018:	b2ca      	uxtb	r2, r1
 800401a:	3a10      	subs	r2, #16
 800401c:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <DMA_CalcBaseAndBitshift+0x34>)
 800401e:	fba3 4302 	umull	r4, r3, r3, r2
 8004022:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004024:	4c09      	ldr	r4, [pc, #36]	; (800404c <DMA_CalcBaseAndBitshift+0x38>)
 8004026:	5ce3      	ldrb	r3, [r4, r3]
 8004028:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 800402a:	2a5f      	cmp	r2, #95	; 0x5f
 800402c:	d907      	bls.n	800403e <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800402e:	4b08      	ldr	r3, [pc, #32]	; (8004050 <DMA_CalcBaseAndBitshift+0x3c>)
 8004030:	400b      	ands	r3, r1
 8004032:	3304      	adds	r3, #4
 8004034:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8004036:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8004038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800403c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800403e:	4b04      	ldr	r3, [pc, #16]	; (8004050 <DMA_CalcBaseAndBitshift+0x3c>)
 8004040:	400b      	ands	r3, r1
 8004042:	6583      	str	r3, [r0, #88]	; 0x58
 8004044:	e7f7      	b.n	8004036 <DMA_CalcBaseAndBitshift+0x22>
 8004046:	bf00      	nop
 8004048:	aaaaaaab 	.word	0xaaaaaaab
 800404c:	08012d28 	.word	0x08012d28
 8004050:	fffffc00 	.word	0xfffffc00

08004054 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004054:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004056:	6982      	ldr	r2, [r0, #24]
 8004058:	b992      	cbnz	r2, 8004080 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800405a:	2b01      	cmp	r3, #1
 800405c:	d00a      	beq.n	8004074 <DMA_CheckFifoParam+0x20>
 800405e:	2b02      	cmp	r3, #2
 8004060:	d002      	beq.n	8004068 <DMA_CheckFifoParam+0x14>
 8004062:	b10b      	cbz	r3, 8004068 <DMA_CheckFifoParam+0x14>
 8004064:	2000      	movs	r0, #0
 8004066:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004068:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800406a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800406e:	d128      	bne.n	80040c2 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8004070:	2000      	movs	r0, #0
 8004072:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004074:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004076:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800407a:	d024      	beq.n	80040c6 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 800407c:	2000      	movs	r0, #0
 800407e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004080:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004084:	d009      	beq.n	800409a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004086:	2b02      	cmp	r3, #2
 8004088:	d925      	bls.n	80040d6 <DMA_CheckFifoParam+0x82>
 800408a:	2b03      	cmp	r3, #3
 800408c:	d125      	bne.n	80040da <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800408e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004090:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004094:	d123      	bne.n	80040de <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8004096:	2000      	movs	r0, #0
 8004098:	4770      	bx	lr
    switch (tmp)
 800409a:	2b03      	cmp	r3, #3
 800409c:	d803      	bhi.n	80040a6 <DMA_CheckFifoParam+0x52>
 800409e:	e8df f003 	tbb	[pc, r3]
 80040a2:	0414      	.short	0x0414
 80040a4:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040a6:	2000      	movs	r0, #0
 80040a8:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80040ac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80040b0:	d10d      	bne.n	80040ce <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80040b2:	2000      	movs	r0, #0
 80040b4:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80040b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040bc:	d009      	beq.n	80040d2 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80040be:	2000      	movs	r0, #0
 80040c0:	4770      	bx	lr
        status = HAL_ERROR;
 80040c2:	2001      	movs	r0, #1
 80040c4:	4770      	bx	lr
        status = HAL_ERROR;
 80040c6:	2001      	movs	r0, #1
 80040c8:	4770      	bx	lr
      status = HAL_ERROR;
 80040ca:	2001      	movs	r0, #1
 80040cc:	4770      	bx	lr
        status = HAL_ERROR;
 80040ce:	2001      	movs	r0, #1
 80040d0:	4770      	bx	lr
        status = HAL_ERROR;
 80040d2:	2001      	movs	r0, #1
 80040d4:	4770      	bx	lr
      status = HAL_ERROR;
 80040d6:	2001      	movs	r0, #1
 80040d8:	4770      	bx	lr
    switch (tmp)
 80040da:	2000      	movs	r0, #0
 80040dc:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80040de:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80040e0:	4770      	bx	lr
	...

080040e4 <HAL_DMA_Init>:
{
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80040e8:	f7ff ff04 	bl	8003ef4 <HAL_GetTick>
  if(hdma == NULL)
 80040ec:	2c00      	cmp	r4, #0
 80040ee:	d05b      	beq.n	80041a8 <HAL_DMA_Init+0xc4>
 80040f0:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80040f2:	2300      	movs	r3, #0
 80040f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80040f8:	2302      	movs	r3, #2
 80040fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80040fe:	6822      	ldr	r2, [r4, #0]
 8004100:	6813      	ldr	r3, [r2, #0]
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	f012 0f01 	tst.w	r2, #1
 8004110:	d00a      	beq.n	8004128 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004112:	f7ff feef 	bl	8003ef4 <HAL_GetTick>
 8004116:	1b43      	subs	r3, r0, r5
 8004118:	2b05      	cmp	r3, #5
 800411a:	d9f5      	bls.n	8004108 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800411c:	2320      	movs	r3, #32
 800411e:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004120:	2003      	movs	r0, #3
 8004122:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8004126:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8004128:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800412a:	4820      	ldr	r0, [pc, #128]	; (80041ac <HAL_DMA_Init+0xc8>)
 800412c:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800412e:	6861      	ldr	r1, [r4, #4]
 8004130:	68a2      	ldr	r2, [r4, #8]
 8004132:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004134:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004136:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004138:	6921      	ldr	r1, [r4, #16]
 800413a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800413c:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800413e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004140:	69a1      	ldr	r1, [r4, #24]
 8004142:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8004144:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004146:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8004148:	6a21      	ldr	r1, [r4, #32]
 800414a:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800414c:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800414e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004150:	2904      	cmp	r1, #4
 8004152:	d01e      	beq.n	8004192 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8004154:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8004156:	6826      	ldr	r6, [r4, #0]
 8004158:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800415a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800415e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004160:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004162:	2b04      	cmp	r3, #4
 8004164:	d107      	bne.n	8004176 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8004166:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004168:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800416a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800416c:	b11b      	cbz	r3, 8004176 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800416e:	4620      	mov	r0, r4
 8004170:	f7ff ff70 	bl	8004054 <DMA_CheckFifoParam>
 8004174:	b990      	cbnz	r0, 800419c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8004176:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004178:	4620      	mov	r0, r4
 800417a:	f7ff ff4b 	bl	8004014 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800417e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004180:	233f      	movs	r3, #63	; 0x3f
 8004182:	4093      	lsls	r3, r2
 8004184:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004186:	2000      	movs	r0, #0
 8004188:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800418a:	2301      	movs	r3, #1
 800418c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8004190:	e7c9      	b.n	8004126 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004192:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004194:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004196:	4301      	orrs	r1, r0
 8004198:	430a      	orrs	r2, r1
 800419a:	e7db      	b.n	8004154 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800419c:	2340      	movs	r3, #64	; 0x40
 800419e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80041a0:	2001      	movs	r0, #1
 80041a2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80041a6:	e7be      	b.n	8004126 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80041a8:	2001      	movs	r0, #1
 80041aa:	e7bc      	b.n	8004126 <HAL_DMA_Init+0x42>
 80041ac:	e010803f 	.word	0xe010803f

080041b0 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 80041b0:	b338      	cbz	r0, 8004202 <HAL_DMA_DeInit+0x52>
{
 80041b2:	b538      	push	{r3, r4, r5, lr}
 80041b4:	4605      	mov	r5, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80041b6:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 80041ba:	b2c0      	uxtb	r0, r0
 80041bc:	2802      	cmp	r0, #2
 80041be:	d01f      	beq.n	8004200 <HAL_DMA_DeInit+0x50>
  __HAL_DMA_DISABLE(hdma);
 80041c0:	682a      	ldr	r2, [r5, #0]
 80041c2:	6813      	ldr	r3, [r2, #0]
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 80041ca:	682b      	ldr	r3, [r5, #0]
 80041cc:	2400      	movs	r4, #0
 80041ce:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80041d0:	682b      	ldr	r3, [r5, #0]
 80041d2:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80041d4:	682b      	ldr	r3, [r5, #0]
 80041d6:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80041d8:	682b      	ldr	r3, [r5, #0]
 80041da:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80041dc:	682b      	ldr	r3, [r5, #0]
 80041de:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	2221      	movs	r2, #33	; 0x21
 80041e4:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041e6:	4628      	mov	r0, r5
 80041e8:	f7ff ff14 	bl	8004014 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041ec:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80041ee:	233f      	movs	r3, #63	; 0x3f
 80041f0:	4093      	lsls	r3, r2
 80041f2:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041f4:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 80041f6:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80041fa:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  return HAL_OK;
 80041fe:	4620      	mov	r0, r4
}
 8004200:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004202:	2001      	movs	r0, #1
}
 8004204:	4770      	bx	lr

08004206 <HAL_DMA_Start_IT>:
{
 8004206:	b538      	push	{r3, r4, r5, lr}
 8004208:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800420a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800420c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004210:	2801      	cmp	r0, #1
 8004212:	d030      	beq.n	8004276 <HAL_DMA_Start_IT+0x70>
 8004214:	2001      	movs	r0, #1
 8004216:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800421a:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 800421e:	b2c0      	uxtb	r0, r0
 8004220:	2801      	cmp	r0, #1
 8004222:	d004      	beq.n	800422e <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8004224:	2300      	movs	r3, #0
 8004226:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 800422a:	2002      	movs	r0, #2
}
 800422c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800422e:	2002      	movs	r0, #2
 8004230:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004234:	2000      	movs	r0, #0
 8004236:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004238:	4620      	mov	r0, r4
 800423a:	f7ff fed5 	bl	8003fe8 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800423e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004240:	233f      	movs	r3, #63	; 0x3f
 8004242:	4093      	lsls	r3, r2
 8004244:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004246:	6822      	ldr	r2, [r4, #0]
 8004248:	6813      	ldr	r3, [r2, #0]
 800424a:	f043 0316 	orr.w	r3, r3, #22
 800424e:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004250:	6822      	ldr	r2, [r4, #0]
 8004252:	6953      	ldr	r3, [r2, #20]
 8004254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004258:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800425a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800425c:	b123      	cbz	r3, 8004268 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 800425e:	6822      	ldr	r2, [r4, #0]
 8004260:	6813      	ldr	r3, [r2, #0]
 8004262:	f043 0308 	orr.w	r3, r3, #8
 8004266:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8004268:	6822      	ldr	r2, [r4, #0]
 800426a:	6813      	ldr	r3, [r2, #0]
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004272:	2000      	movs	r0, #0
 8004274:	e7da      	b.n	800422c <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8004276:	2002      	movs	r0, #2
 8004278:	e7d8      	b.n	800422c <HAL_DMA_Start_IT+0x26>

0800427a <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800427a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d003      	beq.n	800428c <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004288:	2001      	movs	r0, #1
 800428a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800428c:	2305      	movs	r3, #5
 800428e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8004292:	6802      	ldr	r2, [r0, #0]
 8004294:	6813      	ldr	r3, [r2, #0]
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800429c:	2000      	movs	r0, #0
}
 800429e:	4770      	bx	lr

080042a0 <HAL_DMA_IRQHandler>:
{
 80042a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042a2:	b083      	sub	sp, #12
 80042a4:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 80042aa:	4b72      	ldr	r3, [pc, #456]	; (8004474 <HAL_DMA_IRQHandler+0x1d4>)
 80042ac:	681d      	ldr	r5, [r3, #0]
 80042ae:	4b72      	ldr	r3, [pc, #456]	; (8004478 <HAL_DMA_IRQHandler+0x1d8>)
 80042b0:	fba3 3505 	umull	r3, r5, r3, r5
 80042b4:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042b6:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80042b8:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042ba:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80042bc:	2308      	movs	r3, #8
 80042be:	4093      	lsls	r3, r2
 80042c0:	4233      	tst	r3, r6
 80042c2:	d010      	beq.n	80042e6 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042c4:	6803      	ldr	r3, [r0, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	f012 0f04 	tst.w	r2, #4
 80042cc:	d00b      	beq.n	80042e6 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	f022 0204 	bic.w	r2, r2, #4
 80042d4:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042d6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80042d8:	2308      	movs	r3, #8
 80042da:	4093      	lsls	r3, r2
 80042dc:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042de:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80042e8:	4b64      	ldr	r3, [pc, #400]	; (800447c <HAL_DMA_IRQHandler+0x1dc>)
 80042ea:	4093      	lsls	r3, r2
 80042ec:	4233      	tst	r3, r6
 80042ee:	d009      	beq.n	8004304 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042f0:	6822      	ldr	r2, [r4, #0]
 80042f2:	6952      	ldr	r2, [r2, #20]
 80042f4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80042f8:	d004      	beq.n	8004304 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042fa:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042fe:	f043 0302 	orr.w	r3, r3, #2
 8004302:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004304:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004306:	4b5e      	ldr	r3, [pc, #376]	; (8004480 <HAL_DMA_IRQHandler+0x1e0>)
 8004308:	4093      	lsls	r3, r2
 800430a:	4233      	tst	r3, r6
 800430c:	d009      	beq.n	8004322 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800430e:	6822      	ldr	r2, [r4, #0]
 8004310:	6812      	ldr	r2, [r2, #0]
 8004312:	f012 0f02 	tst.w	r2, #2
 8004316:	d004      	beq.n	8004322 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004318:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800431a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800431c:	f043 0304 	orr.w	r3, r3, #4
 8004320:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004322:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004324:	2310      	movs	r3, #16
 8004326:	4093      	lsls	r3, r2
 8004328:	4233      	tst	r3, r6
 800432a:	d024      	beq.n	8004376 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800432c:	6822      	ldr	r2, [r4, #0]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	f012 0f08 	tst.w	r2, #8
 8004334:	d01f      	beq.n	8004376 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004336:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004340:	d00d      	beq.n	800435e <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004348:	d104      	bne.n	8004354 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800434a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800434c:	b19b      	cbz	r3, 8004376 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800434e:	4620      	mov	r0, r4
 8004350:	4798      	blx	r3
 8004352:	e010      	b.n	8004376 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004354:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004356:	b173      	cbz	r3, 8004376 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8004358:	4620      	mov	r0, r4
 800435a:	4798      	blx	r3
 800435c:	e00b      	b.n	8004376 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004364:	d103      	bne.n	800436e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	f022 0208 	bic.w	r2, r2, #8
 800436c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800436e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004370:	b10b      	cbz	r3, 8004376 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8004372:	4620      	mov	r0, r4
 8004374:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004376:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004378:	2320      	movs	r3, #32
 800437a:	4093      	lsls	r3, r2
 800437c:	4233      	tst	r3, r6
 800437e:	d055      	beq.n	800442c <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004380:	6822      	ldr	r2, [r4, #0]
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	f012 0f10 	tst.w	r2, #16
 8004388:	d050      	beq.n	800442c <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800438a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800438c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b05      	cmp	r3, #5
 8004394:	d00e      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800439e:	d033      	beq.n	8004408 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80043a6:	d12a      	bne.n	80043fe <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80043a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d03e      	beq.n	800442c <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80043ae:	4620      	mov	r0, r4
 80043b0:	4798      	blx	r3
 80043b2:	e03b      	b.n	800442c <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043b4:	6822      	ldr	r2, [r4, #0]
 80043b6:	6813      	ldr	r3, [r2, #0]
 80043b8:	f023 0316 	bic.w	r3, r3, #22
 80043bc:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043be:	6822      	ldr	r2, [r4, #0]
 80043c0:	6953      	ldr	r3, [r2, #20]
 80043c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043c6:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043ca:	b1a3      	cbz	r3, 80043f6 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043cc:	6822      	ldr	r2, [r4, #0]
 80043ce:	6813      	ldr	r3, [r2, #0]
 80043d0:	f023 0308 	bic.w	r3, r3, #8
 80043d4:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043d6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80043d8:	233f      	movs	r3, #63	; 0x3f
 80043da:	4093      	lsls	r3, r2
 80043dc:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80043de:	2300      	movs	r3, #0
 80043e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80043e4:	2301      	movs	r3, #1
 80043e6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80043ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d03f      	beq.n	8004470 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80043f0:	4620      	mov	r0, r4
 80043f2:	4798      	blx	r3
        return;
 80043f4:	e03c      	b.n	8004470 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e7      	bne.n	80043cc <HAL_DMA_IRQHandler+0x12c>
 80043fc:	e7eb      	b.n	80043d6 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80043fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004400:	b1a3      	cbz	r3, 800442c <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8004402:	4620      	mov	r0, r4
 8004404:	4798      	blx	r3
 8004406:	e011      	b.n	800442c <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800440e:	d109      	bne.n	8004424 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	f022 0210 	bic.w	r2, r2, #16
 8004416:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8004418:	2300      	movs	r3, #0
 800441a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800441e:	2301      	movs	r3, #1
 8004420:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8004424:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004426:	b10b      	cbz	r3, 800442c <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8004428:	4620      	mov	r0, r4
 800442a:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800442c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800442e:	b1fb      	cbz	r3, 8004470 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004430:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004432:	f013 0f01 	tst.w	r3, #1
 8004436:	d017      	beq.n	8004468 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004438:	2305      	movs	r3, #5
 800443a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800443e:	6822      	ldr	r2, [r4, #0]
 8004440:	6813      	ldr	r3, [r2, #0]
 8004442:	f023 0301 	bic.w	r3, r3, #1
 8004446:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8004448:	9b01      	ldr	r3, [sp, #4]
 800444a:	3301      	adds	r3, #1
 800444c:	9301      	str	r3, [sp, #4]
 800444e:	42ab      	cmp	r3, r5
 8004450:	d804      	bhi.n	800445c <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f013 0f01 	tst.w	r3, #1
 800445a:	d1f5      	bne.n	8004448 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 800445c:	2300      	movs	r3, #0
 800445e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8004462:	2301      	movs	r3, #1
 8004464:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8004468:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800446a:	b10b      	cbz	r3, 8004470 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 800446c:	4620      	mov	r0, r4
 800446e:	4798      	blx	r3
}
 8004470:	b003      	add	sp, #12
 8004472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004474:	20000094 	.word	0x20000094
 8004478:	1b4e81b5 	.word	0x1b4e81b5
 800447c:	00800001 	.word	0x00800001
 8004480:	00800004 	.word	0x00800004

08004484 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004484:	b470      	push	{r4, r5, r6}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004486:	6806      	ldr	r6, [r0, #0]
 8004488:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800448a:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 800448e:	9d03      	ldr	r5, [sp, #12]
 8004490:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8004494:	432c      	orrs	r4, r5
 8004496:	6474      	str	r4, [r6, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004498:	6803      	ldr	r3, [r0, #0]
 800449a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800449c:	6843      	ldr	r3, [r0, #4]
 800449e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044a2:	d003      	beq.n	80044ac <DMA2D_SetConfig+0x28>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80044a4:	6803      	ldr	r3, [r0, #0]
 80044a6:	60d9      	str	r1, [r3, #12]
  }
}
 80044a8:	bc70      	pop	{r4, r5, r6}
 80044aa:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80044ac:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80044b0:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80044b4:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80044b8:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80044ba:	6884      	ldr	r4, [r0, #8]
 80044bc:	b194      	cbz	r4, 80044e4 <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80044be:	2c01      	cmp	r4, #1
 80044c0:	d00e      	beq.n	80044e0 <DMA2D_SetConfig+0x5c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80044c2:	2c02      	cmp	r4, #2
 80044c4:	d011      	beq.n	80044ea <DMA2D_SetConfig+0x66>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80044c6:	2c03      	cmp	r4, #3
 80044c8:	d017      	beq.n	80044fa <DMA2D_SetConfig+0x76>
      tmp1 = (tmp1 >> 28U);
 80044ca:	0f36      	lsrs	r6, r6, #28
      tmp2 = (tmp2 >> 20U);
 80044cc:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 80044ce:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80044d0:	0219      	lsls	r1, r3, #8
 80044d2:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 80044d6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
 80044da:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 80044de:	e001      	b.n	80044e4 <DMA2D_SetConfig+0x60>
      tmp = (tmp3 | tmp2 | tmp4);
 80044e0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80044e4:	6803      	ldr	r3, [r0, #0]
 80044e6:	6399      	str	r1, [r3, #56]	; 0x38
 80044e8:	e7de      	b.n	80044a8 <DMA2D_SetConfig+0x24>
      tmp2 = (tmp2 >> 19U);
 80044ea:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 80044ec:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80044ee:	02d9      	lsls	r1, r3, #11
 80044f0:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 80044f4:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 80044f8:	e7f4      	b.n	80044e4 <DMA2D_SetConfig+0x60>
      tmp1 = (tmp1 >> 31U);
 80044fa:	0ff6      	lsrs	r6, r6, #31
      tmp2 = (tmp2 >> 19U);
 80044fc:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 80044fe:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004500:	0299      	lsls	r1, r3, #10
 8004502:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8004506:	ea41 31c6 	orr.w	r1, r1, r6, lsl #15
 800450a:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 800450e:	e7e9      	b.n	80044e4 <DMA2D_SetConfig+0x60>

08004510 <HAL_DMA2D_MspInit>:
}
 8004510:	4770      	bx	lr
	...

08004514 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 8004514:	2800      	cmp	r0, #0
 8004516:	d032      	beq.n	800457e <HAL_DMA2D_Init+0x6a>
{
 8004518:	b510      	push	{r4, lr}
 800451a:	4604      	mov	r4, r0
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800451c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8004520:	b343      	cbz	r3, 8004574 <HAL_DMA2D_Init+0x60>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004522:	2302      	movs	r3, #2
 8004524:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004528:	6822      	ldr	r2, [r4, #0]
 800452a:	6813      	ldr	r3, [r2, #0]
 800452c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004530:	6861      	ldr	r1, [r4, #4]
 8004532:	430b      	orrs	r3, r1
 8004534:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004536:	6822      	ldr	r2, [r4, #0]
 8004538:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800453a:	f023 0307 	bic.w	r3, r3, #7
 800453e:	68a1      	ldr	r1, [r4, #8]
 8004540:	430b      	orrs	r3, r1
 8004542:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004544:	6822      	ldr	r2, [r4, #0]
 8004546:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004548:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <HAL_DMA2D_Init+0x70>)
 800454a:	400b      	ands	r3, r1
 800454c:	68e1      	ldr	r1, [r4, #12]
 800454e:	430b      	orrs	r3, r1
 8004550:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8004552:	6821      	ldr	r1, [r4, #0]
 8004554:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004556:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800455a:	6920      	ldr	r0, [r4, #16]
 800455c:	6962      	ldr	r2, [r4, #20]
 800455e:	0552      	lsls	r2, r2, #21
 8004560:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8004564:	4313      	orrs	r3, r2
 8004566:	634b      	str	r3, [r1, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004568:	2000      	movs	r0, #0
 800456a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800456c:	2301      	movs	r3, #1
 800456e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004572:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8004574:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_DMA2D_MspInit(hdma2d);
 8004578:	f7ff ffca 	bl	8004510 <HAL_DMA2D_MspInit>
 800457c:	e7d1      	b.n	8004522 <HAL_DMA2D_Init+0xe>
     return HAL_ERROR;
 800457e:	2001      	movs	r0, #1
}
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	ffffc000 	.word	0xffffc000

08004588 <HAL_DMA2D_Start>:
{
 8004588:	b510      	push	{r4, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 800458e:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8004592:	2801      	cmp	r0, #1
 8004594:	d012      	beq.n	80045bc <HAL_DMA2D_Start+0x34>
 8004596:	2001      	movs	r0, #1
 8004598:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800459c:	2002      	movs	r0, #2
 800459e:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80045a2:	9804      	ldr	r0, [sp, #16]
 80045a4:	9000      	str	r0, [sp, #0]
 80045a6:	4620      	mov	r0, r4
 80045a8:	f7ff ff6c 	bl	8004484 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80045ac:	6822      	ldr	r2, [r4, #0]
 80045ae:	6813      	ldr	r3, [r2, #0]
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80045b6:	2000      	movs	r0, #0
}
 80045b8:	b002      	add	sp, #8
 80045ba:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 80045bc:	2002      	movs	r0, #2
 80045be:	e7fb      	b.n	80045b8 <HAL_DMA2D_Start+0x30>

080045c0 <HAL_DMA2D_PollForTransfer>:
{
 80045c0:	b570      	push	{r4, r5, r6, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	4604      	mov	r4, r0
 80045c6:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80045cc:	6803      	ldr	r3, [r0, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f013 0f01 	tst.w	r3, #1
 80045d4:	d111      	bne.n	80045fa <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80045d6:	6822      	ldr	r2, [r4, #0]
 80045d8:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80045da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045dc:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 80045de:	f013 0f20 	tst.w	r3, #32
 80045e2:	d147      	bne.n	8004674 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	2212      	movs	r2, #18
 80045e8:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hdma2d);
 80045f0:	2000      	movs	r0, #0
 80045f2:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
}
 80045f6:	b002      	add	sp, #8
 80045f8:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 80045fa:	f7ff fc7b 	bl	8003ef4 <HAL_GetTick>
 80045fe:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	f012 0f02 	tst.w	r2, #2
 8004608:	d1e5      	bne.n	80045d6 <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800460e:	9a01      	ldr	r2, [sp, #4]
 8004610:	f012 0f21 	tst.w	r2, #33	; 0x21
 8004614:	d114      	bne.n	8004640 <HAL_DMA2D_PollForTransfer+0x80>
      if(Timeout != HAL_MAX_DELAY)
 8004616:	f1b5 3fff 	cmp.w	r5, #4294967295
 800461a:	d0f1      	beq.n	8004600 <HAL_DMA2D_PollForTransfer+0x40>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800461c:	f7ff fc6a 	bl	8003ef4 <HAL_GetTick>
 8004620:	1b80      	subs	r0, r0, r6
 8004622:	42a8      	cmp	r0, r5
 8004624:	d801      	bhi.n	800462a <HAL_DMA2D_PollForTransfer+0x6a>
 8004626:	2d00      	cmp	r5, #0
 8004628:	d1ea      	bne.n	8004600 <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800462a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800462c:	f043 0320 	orr.w	r3, r3, #32
 8004630:	6563      	str	r3, [r4, #84]	; 0x54
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004632:	2003      	movs	r0, #3
 8004634:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hdma2d);
 8004638:	2300      	movs	r3, #0
 800463a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 800463e:	e7da      	b.n	80045f6 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004640:	9a01      	ldr	r2, [sp, #4]
 8004642:	f012 0f20 	tst.w	r2, #32
 8004646:	d003      	beq.n	8004650 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004648:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800464a:	f042 0202 	orr.w	r2, r2, #2
 800464e:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004650:	9a01      	ldr	r2, [sp, #4]
 8004652:	f012 0f01 	tst.w	r2, #1
 8004656:	d003      	beq.n	8004660 <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004658:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004660:	2221      	movs	r2, #33	; 0x21
 8004662:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004664:	2304      	movs	r3, #4
 8004666:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hdma2d);
 800466a:	2300      	movs	r3, #0
 800466c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 8004670:	2001      	movs	r0, #1
 8004672:	e7c0      	b.n	80045f6 <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 8004674:	f7ff fc3e 	bl	8003ef4 <HAL_GetTick>
 8004678:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	f012 0f10 	tst.w	r2, #16
 8004682:	d1af      	bne.n	80045e4 <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004688:	9a01      	ldr	r2, [sp, #4]
 800468a:	f012 0f29 	tst.w	r2, #41	; 0x29
 800468e:	d114      	bne.n	80046ba <HAL_DMA2D_PollForTransfer+0xfa>
      if(Timeout != HAL_MAX_DELAY)
 8004690:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004694:	d0f1      	beq.n	800467a <HAL_DMA2D_PollForTransfer+0xba>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004696:	f7ff fc2d 	bl	8003ef4 <HAL_GetTick>
 800469a:	1b80      	subs	r0, r0, r6
 800469c:	42a8      	cmp	r0, r5
 800469e:	d801      	bhi.n	80046a4 <HAL_DMA2D_PollForTransfer+0xe4>
 80046a0:	2d00      	cmp	r5, #0
 80046a2:	d1ea      	bne.n	800467a <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80046a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046a6:	f043 0320 	orr.w	r3, r3, #32
 80046aa:	6563      	str	r3, [r4, #84]	; 0x54
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80046ac:	2003      	movs	r0, #3
 80046ae:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hdma2d);
 80046b2:	2300      	movs	r3, #0
 80046b4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 80046b8:	e79d      	b.n	80045f6 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80046ba:	9a01      	ldr	r2, [sp, #4]
 80046bc:	f012 0f08 	tst.w	r2, #8
 80046c0:	d003      	beq.n	80046ca <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80046c2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80046c4:	f042 0204 	orr.w	r2, r2, #4
 80046c8:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80046ca:	9a01      	ldr	r2, [sp, #4]
 80046cc:	f012 0f20 	tst.w	r2, #32
 80046d0:	d003      	beq.n	80046da <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80046d2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80046d4:	f042 0202 	orr.w	r2, r2, #2
 80046d8:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80046da:	9a01      	ldr	r2, [sp, #4]
 80046dc:	f012 0f01 	tst.w	r2, #1
 80046e0:	d003      	beq.n	80046ea <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80046e2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80046e4:	f042 0201 	orr.w	r2, r2, #1
 80046e8:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80046ea:	2229      	movs	r2, #41	; 0x29
 80046ec:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80046ee:	2304      	movs	r3, #4
 80046f0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hdma2d);
 80046f4:	2300      	movs	r3, #0
 80046f6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 80046fa:	2001      	movs	r0, #1
 80046fc:	e77b      	b.n	80045f6 <HAL_DMA2D_PollForTransfer+0x36>
	...

08004700 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8004700:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004704:	2b01      	cmp	r3, #1
 8004706:	d067      	beq.n	80047d8 <HAL_DMA2D_ConfigLayer+0xd8>
{
 8004708:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 800470a:	2301      	movs	r3, #1
 800470c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004710:	2302      	movs	r3, #2
 8004712:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8004716:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800471a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800471e:	6a54      	ldr	r4, [r2, #36]	; 0x24
 8004720:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004722:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004726:	6b15      	ldr	r5, [r2, #48]	; 0x30
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8004728:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800472c:	6b52      	ldr	r2, [r2, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800472e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004732:	3c09      	subs	r4, #9
 8004734:	2c01      	cmp	r4, #1
 8004736:	d921      	bls.n	800477c <HAL_DMA2D_ConfigLayer+0x7c>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004738:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800473c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8004740:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004742:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004746:	bb61      	cbnz	r1, 80047a2 <HAL_DMA2D_ConfigLayer+0xa2>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004748:	6804      	ldr	r4, [r0, #0]
 800474a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800474c:	4a23      	ldr	r2, [pc, #140]	; (80047dc <HAL_DMA2D_ConfigLayer+0xdc>)
 800474e:	402a      	ands	r2, r5
 8004750:	4313      	orrs	r3, r2
 8004752:	6263      	str	r3, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004754:	6802      	ldr	r2, [r0, #0]
 8004756:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800475a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800475e:	6a1c      	ldr	r4, [r3, #32]
 8004760:	6194      	str	r4, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	3b09      	subs	r3, #9
 8004766:	2b01      	cmp	r3, #1
 8004768:	d911      	bls.n	800478e <HAL_DMA2D_ConfigLayer+0x8e>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800476a:	2301      	movs	r3, #1
 800476c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_UNLOCK(hdma2d);
 8004770:	2300      	movs	r3, #0
 8004772:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  return HAL_OK;
 8004776:	4618      	mov	r0, r3
}
 8004778:	bc30      	pop	{r4, r5}
 800477a:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800477c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8004780:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8004784:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004786:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800478a:	4313      	orrs	r3, r2
 800478c:	e7db      	b.n	8004746 <HAL_DMA2D_ConfigLayer+0x46>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800478e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004792:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8004796:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004798:	6802      	ldr	r2, [r0, #0]
 800479a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800479e:	6293      	str	r3, [r2, #40]	; 0x28
 80047a0:	e7e3      	b.n	800476a <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80047a2:	6804      	ldr	r4, [r0, #0]
 80047a4:	69e5      	ldr	r5, [r4, #28]
 80047a6:	4a0d      	ldr	r2, [pc, #52]	; (80047dc <HAL_DMA2D_ConfigLayer+0xdc>)
 80047a8:	402a      	ands	r2, r5
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80047ae:	6802      	ldr	r2, [r0, #0]
 80047b0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80047b4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80047b8:	6a1c      	ldr	r4, [r3, #32]
 80047ba:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	3b09      	subs	r3, #9
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d8d2      	bhi.n	800476a <HAL_DMA2D_ConfigLayer+0x6a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80047c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80047c8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80047cc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80047ce:	6802      	ldr	r2, [r0, #0]
 80047d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80047d4:	6213      	str	r3, [r2, #32]
 80047d6:	e7c8      	b.n	800476a <HAL_DMA2D_ConfigLayer+0x6a>
  __HAL_LOCK(hdma2d);
 80047d8:	2002      	movs	r0, #2
}
 80047da:	4770      	bx	lr
 80047dc:	00ccfff0 	.word	0x00ccfff0

080047e0 <DSI_ConfigPacketHeader>:
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80047e0:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80047e4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80047e8:	9b00      	ldr	r3, [sp, #0]
 80047ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80047ee:	66c2      	str	r2, [r0, #108]	; 0x6c
}
 80047f0:	4770      	bx	lr

080047f2 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80047f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047f6:	4605      	mov	r5, r0
 80047f8:	4689      	mov	r9, r1
 80047fa:	4617      	mov	r7, r2
 80047fc:	4698      	mov	r8, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80047fe:	f7ff fb79 	bl	8003ef4 <HAL_GetTick>
 8004802:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004804:	682c      	ldr	r4, [r5, #0]
 8004806:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004808:	f013 0f01 	tst.w	r3, #1
 800480c:	d107      	bne.n	800481e <DSI_ShortWrite+0x2c>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800480e:	f7ff fb71 	bl	8003ef4 <HAL_GetTick>
 8004812:	1b80      	subs	r0, r0, r6
 8004814:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004818:	d9f4      	bls.n	8004804 <DSI_ShortWrite+0x12>
    {
      return HAL_TIMEOUT;
 800481a:	2003      	movs	r0, #3
 800481c:	e008      	b.n	8004830 <DSI_ShortWrite+0x3e>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800481e:	ea47 1789 	orr.w	r7, r7, r9, lsl #6
 8004822:	ea47 2808 	orr.w	r8, r7, r8, lsl #8
 8004826:	9b08      	ldr	r3, [sp, #32]
 8004828:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800482c:	66e3      	str	r3, [r4, #108]	; 0x6c

  return HAL_OK;
 800482e:	2000      	movs	r0, #0
}
 8004830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004834 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8004834:	4770      	bx	lr
	...

08004838 <HAL_DSI_Init>:
  if (hdsi == NULL)
 8004838:	2800      	cmp	r0, #0
 800483a:	f000 80ba 	beq.w	80049b2 <HAL_DSI_Init+0x17a>
{
 800483e:	b570      	push	{r4, r5, r6, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	460d      	mov	r5, r1
 8004844:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8004846:	7c43      	ldrb	r3, [r0, #17]
 8004848:	b31b      	cbz	r3, 8004892 <HAL_DSI_Init+0x5a>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800484a:	2303      	movs	r3, #3
 800484c:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800484e:	2300      	movs	r3, #0
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	6822      	ldr	r2, [r4, #0]
 8004854:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8004858:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800485c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004866:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800486e:	f7ff fb41 	bl	8003ef4 <HAL_GetTick>
 8004872:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800487a:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800487e:	d10b      	bne.n	8004898 <HAL_DSI_Init+0x60>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004880:	f7ff fb38 	bl	8003ef4 <HAL_GetTick>
 8004884:	1b80      	subs	r0, r0, r6
 8004886:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800488a:	d9f3      	bls.n	8004874 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 800488c:	2003      	movs	r0, #3
}
 800488e:	b002      	add	sp, #8
 8004890:	bd70      	pop	{r4, r5, r6, pc}
    HAL_DSI_MspInit(hdsi);
 8004892:	f7ff ffcf 	bl	8004834 <HAL_DSI_MspInit>
 8004896:	e7d8      	b.n	800484a <HAL_DSI_Init+0x12>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8004898:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800489c:	4a46      	ldr	r2, [pc, #280]	; (80049b8 <HAL_DSI_Init+0x180>)
 800489e:	400a      	ands	r2, r1
 80048a0:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80048a4:	6821      	ldr	r1, [r4, #0]
 80048a6:	f8d1 2430 	ldr.w	r2, [r1, #1072]	; 0x430
 80048aa:	6828      	ldr	r0, [r5, #0]
 80048ac:	686b      	ldr	r3, [r5, #4]
 80048ae:	02db      	lsls	r3, r3, #11
 80048b0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 80048b4:	68a8      	ldr	r0, [r5, #8]
 80048b6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3430 	str.w	r3, [r1, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80048c0:	2300      	movs	r3, #0
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	6822      	ldr	r2, [r4, #0]
 80048c6:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80048ca:	f043 0301 	orr.w	r3, r3, #1
 80048ce:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 80048e0:	f7ff fb08 	bl	8003ef4 <HAL_GetTick>
 80048e4:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80048ec:	f412 7f80 	tst.w	r2, #256	; 0x100
 80048f0:	d107      	bne.n	8004902 <HAL_DSI_Init+0xca>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80048f2:	f7ff faff 	bl	8003ef4 <HAL_GetTick>
 80048f6:	1b80      	subs	r0, r0, r6
 80048f8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80048fc:	d9f3      	bls.n	80048e6 <HAL_DSI_Init+0xae>
      return HAL_TIMEOUT;
 80048fe:	2003      	movs	r0, #3
 8004900:	e7c5      	b.n	800488e <HAL_DSI_Init+0x56>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004902:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004906:	f042 0206 	orr.w	r2, r2, #6
 800490a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800490e:	6822      	ldr	r2, [r4, #0]
 8004910:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004914:	f023 0303 	bic.w	r3, r3, #3
 8004918:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800491c:	6822      	ldr	r2, [r4, #0]
 800491e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004922:	6861      	ldr	r1, [r4, #4]
 8004924:	430b      	orrs	r3, r1
 8004926:	f043 0301 	orr.w	r3, r3, #1
 800492a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800492e:	6822      	ldr	r2, [r4, #0]
 8004930:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8004934:	f023 0303 	bic.w	r3, r3, #3
 8004938:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800493c:	6822      	ldr	r2, [r4, #0]
 800493e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8004942:	68e1      	ldr	r1, [r4, #12]
 8004944:	430b      	orrs	r3, r1
 8004946:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800494a:	6822      	ldr	r2, [r4, #0]
 800494c:	6893      	ldr	r3, [r2, #8]
 800494e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004952:	6093      	str	r3, [r2, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004954:	6822      	ldr	r2, [r4, #0]
 8004956:	6893      	ldr	r3, [r2, #8]
 8004958:	68a1      	ldr	r1, [r4, #8]
 800495a:	430b      	orrs	r3, r1
 800495c:	6093      	str	r3, [r2, #8]
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800495e:	686a      	ldr	r2, [r5, #4]
 8004960:	b902      	cbnz	r2, 8004964 <HAL_DSI_Init+0x12c>
 8004962:	2201      	movs	r2, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004964:	4b15      	ldr	r3, [pc, #84]	; (80049bc <HAL_DSI_Init+0x184>)
 8004966:	fb03 f302 	mul.w	r3, r3, r2
 800496a:	68aa      	ldr	r2, [r5, #8]
 800496c:	f002 0203 	and.w	r2, r2, #3
 8004970:	4093      	lsls	r3, r2
 8004972:	6829      	ldr	r1, [r5, #0]
 8004974:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8004978:	fb02 f201 	mul.w	r2, r2, r1
 800497c:	fbb3 f3f2 	udiv	r3, r3, r2
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8004980:	6821      	ldr	r1, [r4, #0]
 8004982:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 8004986:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800498a:	f8c1 2418 	str.w	r2, [r1, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800498e:	6821      	ldr	r1, [r4, #0]
 8004990:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3418 	str.w	r3, [r1, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	2000      	movs	r0, #0
 800499e:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80049a8:	61a0      	str	r0, [r4, #24]
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80049aa:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 80049ac:	2301      	movs	r3, #1
 80049ae:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 80049b0:	e76d      	b.n	800488e <HAL_DSI_Init+0x56>
    return HAL_ERROR;
 80049b2:	2001      	movs	r0, #1
}
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	fffc8603 	.word	0xfffc8603
 80049bc:	003d0900 	.word	0x003d0900

080049c0 <HAL_DSI_MspDeInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 80049c0:	4770      	bx	lr

080049c2 <HAL_DSI_DeInit>:
  if (hdsi == NULL)
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d04a      	beq.n	8004a5c <HAL_DSI_DeInit+0x9a>
{
 80049c6:	b530      	push	{r4, r5, lr}
 80049c8:	b085      	sub	sp, #20
 80049ca:	4604      	mov	r4, r0
  hdsi->State = HAL_DSI_STATE_BUSY;
 80049cc:	2303      	movs	r3, #3
 80049ce:	7443      	strb	r3, [r0, #17]
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80049d0:	2500      	movs	r5, #0
 80049d2:	9500      	str	r5, [sp, #0]
 80049d4:	6802      	ldr	r2, [r0, #0]
 80049d6:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 80049da:	f023 0308 	bic.w	r3, r3, #8
 80049de:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
 80049e2:	6803      	ldr	r3, [r0, #0]
 80049e4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80049e8:	f002 0208 	and.w	r2, r2, #8
 80049ec:	9200      	str	r2, [sp, #0]
 80049ee:	9a00      	ldr	r2, [sp, #0]
  __HAL_DSI_DISABLE(hdsi);
 80049f0:	9501      	str	r5, [sp, #4]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	f022 0201 	bic.w	r2, r2, #1
 80049f8:	605a      	str	r2, [r3, #4]
 80049fa:	6803      	ldr	r3, [r0, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	f002 0201 	and.w	r2, r2, #1
 8004a02:	9201      	str	r2, [sp, #4]
 8004a04:	9a01      	ldr	r2, [sp, #4]
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004a06:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004a0a:	f022 0206 	bic.w	r2, r2, #6
 8004a0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  __HAL_DSI_PLL_DISABLE(hdsi);
 8004a12:	9502      	str	r5, [sp, #8]
 8004a14:	6802      	ldr	r2, [r0, #0]
 8004a16:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8004a1a:	f023 0301 	bic.w	r3, r3, #1
 8004a1e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8004a22:	6803      	ldr	r3, [r0, #0]
 8004a24:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004a28:	f002 0201 	and.w	r2, r2, #1
 8004a2c:	9202      	str	r2, [sp, #8]
 8004a2e:	9a02      	ldr	r2, [sp, #8]
  __HAL_DSI_REG_DISABLE(hdsi);
 8004a30:	9503      	str	r5, [sp, #12]
 8004a32:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004a36:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004a3a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004a3e:	6803      	ldr	r3, [r0, #0]
 8004a40:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a48:	9303      	str	r3, [sp, #12]
 8004a4a:	9b03      	ldr	r3, [sp, #12]
  HAL_DSI_MspDeInit(hdsi);
 8004a4c:	f7ff ffb8 	bl	80049c0 <HAL_DSI_MspDeInit>
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004a50:	6165      	str	r5, [r4, #20]
  hdsi->State = HAL_DSI_STATE_RESET;
 8004a52:	7465      	strb	r5, [r4, #17]
  __HAL_UNLOCK(hdsi);
 8004a54:	7425      	strb	r5, [r4, #16]
  return HAL_OK;
 8004a56:	4628      	mov	r0, r5
}
 8004a58:	b005      	add	sp, #20
 8004a5a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8004a5c:	2001      	movs	r0, #1
}
 8004a5e:	4770      	bx	lr

08004a60 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a60:	7c03      	ldrb	r3, [r0, #16]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	f000 8123 	beq.w	8004cae <HAL_DSI_ConfigVideoMode+0x24e>
{
 8004a68:	b430      	push	{r4, r5}
  __HAL_LOCK(hdsi);
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	7403      	strb	r3, [r0, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004a6e:	6802      	ldr	r2, [r0, #0]
 8004a70:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004a72:	f023 0301 	bic.w	r3, r3, #1
 8004a76:	6353      	str	r3, [r2, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004a78:	6802      	ldr	r2, [r0, #0]
 8004a7a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8004a7e:	f023 0301 	bic.w	r3, r3, #1
 8004a82:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004a86:	6802      	ldr	r2, [r0, #0]
 8004a88:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a8a:	f023 0303 	bic.w	r3, r3, #3
 8004a8e:	6393      	str	r3, [r2, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004a90:	6802      	ldr	r2, [r0, #0]
 8004a92:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a94:	68cc      	ldr	r4, [r1, #12]
 8004a96:	4323      	orrs	r3, r4
 8004a98:	6393      	str	r3, [r2, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004a9a:	6802      	ldr	r2, [r0, #0]
 8004a9c:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8004a9e:	4b85      	ldr	r3, [pc, #532]	; (8004cb4 <HAL_DSI_ConfigVideoMode+0x254>)
 8004aa0:	4023      	ands	r3, r4
 8004aa2:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8004aa4:	6802      	ldr	r2, [r0, #0]
 8004aa6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8004aa8:	690c      	ldr	r4, [r1, #16]
 8004aaa:	4323      	orrs	r3, r4
 8004aac:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004aae:	6803      	ldr	r3, [r0, #0]
 8004ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ab2:	4c81      	ldr	r4, [pc, #516]	; (8004cb8 <HAL_DSI_ConfigVideoMode+0x258>)
 8004ab4:	4022      	ands	r2, r4
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8004ab8:	6803      	ldr	r3, [r0, #0]
 8004aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004abc:	694d      	ldr	r5, [r1, #20]
 8004abe:	432a      	orrs	r2, r5
 8004ac0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8004ac2:	6802      	ldr	r2, [r0, #0]
 8004ac4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004ac6:	4023      	ands	r3, r4
 8004ac8:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8004aca:	6802      	ldr	r2, [r0, #0]
 8004acc:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004ace:	698c      	ldr	r4, [r1, #24]
 8004ad0:	4323      	orrs	r3, r4
 8004ad2:	6453      	str	r3, [r2, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004ad4:	6802      	ldr	r2, [r0, #0]
 8004ad6:	68d3      	ldr	r3, [r2, #12]
 8004ad8:	f023 0303 	bic.w	r3, r3, #3
 8004adc:	60d3      	str	r3, [r2, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004ade:	6802      	ldr	r2, [r0, #0]
 8004ae0:	68d3      	ldr	r3, [r2, #12]
 8004ae2:	680c      	ldr	r4, [r1, #0]
 8004ae4:	4323      	orrs	r3, r4
 8004ae6:	60d3      	str	r3, [r2, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004ae8:	6802      	ldr	r2, [r0, #0]
 8004aea:	6953      	ldr	r3, [r2, #20]
 8004aec:	f023 0307 	bic.w	r3, r3, #7
 8004af0:	6153      	str	r3, [r2, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8004af2:	6804      	ldr	r4, [r0, #0]
 8004af4:	6962      	ldr	r2, [r4, #20]
 8004af6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8004af8:	6a0d      	ldr	r5, [r1, #32]
 8004afa:	432b      	orrs	r3, r5
 8004afc:	69cd      	ldr	r5, [r1, #28]
 8004afe:	432b      	orrs	r3, r5
 8004b00:	4313      	orrs	r3, r2
 8004b02:	6163      	str	r3, [r4, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004b04:	6802      	ldr	r2, [r0, #0]
 8004b06:	6913      	ldr	r3, [r2, #16]
 8004b08:	f023 030f 	bic.w	r3, r3, #15
 8004b0c:	6113      	str	r3, [r2, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004b0e:	6802      	ldr	r2, [r0, #0]
 8004b10:	6913      	ldr	r3, [r2, #16]
 8004b12:	684c      	ldr	r4, [r1, #4]
 8004b14:	4323      	orrs	r3, r4
 8004b16:	6113      	str	r3, [r2, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004b18:	6802      	ldr	r2, [r0, #0]
 8004b1a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8004b1e:	f023 030e 	bic.w	r3, r3, #14
 8004b22:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004b26:	6802      	ldr	r2, [r0, #0]
 8004b28:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8004b2c:	684c      	ldr	r4, [r1, #4]
 8004b2e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 8004b32:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004b36:	684b      	ldr	r3, [r1, #4]
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	f000 80ad 	beq.w	8004c98 <HAL_DSI_ConfigVideoMode+0x238>
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004b3e:	6803      	ldr	r3, [r0, #0]
 8004b40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b42:	4c5e      	ldr	r4, [pc, #376]	; (8004cbc <HAL_DSI_ConfigVideoMode+0x25c>)
 8004b44:	4022      	ands	r2, r4
 8004b46:	649a      	str	r2, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8004b48:	6803      	ldr	r3, [r0, #0]
 8004b4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b4c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8004b4e:	432a      	orrs	r2, r5
 8004b50:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8004b52:	6802      	ldr	r2, [r0, #0]
 8004b54:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004b56:	4023      	ands	r3, r4
 8004b58:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8004b5a:	6802      	ldr	r2, [r0, #0]
 8004b5c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004b5e:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004b60:	4323      	orrs	r3, r4
 8004b62:	64d3      	str	r3, [r2, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004b64:	6802      	ldr	r2, [r0, #0]
 8004b66:	6d14      	ldr	r4, [r2, #80]	; 0x50
 8004b68:	4b55      	ldr	r3, [pc, #340]	; (8004cc0 <HAL_DSI_ConfigVideoMode+0x260>)
 8004b6a:	4023      	ands	r3, r4
 8004b6c:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004b6e:	6802      	ldr	r2, [r0, #0]
 8004b70:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004b72:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8004b74:	4323      	orrs	r3, r4
 8004b76:	6513      	str	r3, [r2, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004b78:	6804      	ldr	r4, [r0, #0]
 8004b7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b7c:	4a51      	ldr	r2, [pc, #324]	; (8004cc4 <HAL_DSI_ConfigVideoMode+0x264>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	6563      	str	r3, [r4, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004b82:	6804      	ldr	r4, [r0, #0]
 8004b84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b86:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8004b88:	432b      	orrs	r3, r5
 8004b8a:	6563      	str	r3, [r4, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004b8c:	6804      	ldr	r4, [r0, #0]
 8004b8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b90:	4013      	ands	r3, r2
 8004b92:	65a3      	str	r3, [r4, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004b94:	6804      	ldr	r4, [r0, #0]
 8004b96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b98:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8004b9a:	432b      	orrs	r3, r5
 8004b9c:	65a3      	str	r3, [r4, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8004b9e:	6804      	ldr	r4, [r0, #0]
 8004ba0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8004ba6:	6802      	ldr	r2, [r0, #0]
 8004ba8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8004baa:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8004bac:	4323      	orrs	r3, r4
 8004bae:	65d3      	str	r3, [r2, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8004bb0:	6802      	ldr	r2, [r0, #0]
 8004bb2:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8004bb4:	4b3f      	ldr	r3, [pc, #252]	; (8004cb4 <HAL_DSI_ConfigVideoMode+0x254>)
 8004bb6:	4023      	ands	r3, r4
 8004bb8:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8004bba:	6802      	ldr	r2, [r0, #0]
 8004bbc:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8004bbe:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8004bc0:	4323      	orrs	r3, r4
 8004bc2:	6613      	str	r3, [r2, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8004bc4:	6802      	ldr	r2, [r0, #0]
 8004bc6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004bc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004bcc:	6393      	str	r3, [r2, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8004bce:	6802      	ldr	r2, [r0, #0]
 8004bd0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004bd2:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8004bd4:	4323      	orrs	r3, r4
 8004bd6:	6393      	str	r3, [r2, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8004bd8:	6802      	ldr	r2, [r0, #0]
 8004bda:	6993      	ldr	r3, [r2, #24]
 8004bdc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004be0:	6193      	str	r3, [r2, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004be2:	6802      	ldr	r2, [r0, #0]
 8004be4:	6993      	ldr	r3, [r2, #24]
 8004be6:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8004be8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004bec:	6193      	str	r3, [r2, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004bee:	6802      	ldr	r2, [r0, #0]
 8004bf0:	6993      	ldr	r3, [r2, #24]
 8004bf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bf6:	6193      	str	r3, [r2, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004bf8:	6802      	ldr	r2, [r0, #0]
 8004bfa:	6993      	ldr	r3, [r2, #24]
 8004bfc:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8004bfe:	4323      	orrs	r3, r4
 8004c00:	6193      	str	r3, [r2, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8004c02:	6802      	ldr	r2, [r0, #0]
 8004c04:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004c06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c0a:	6393      	str	r3, [r2, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8004c0c:	6802      	ldr	r2, [r0, #0]
 8004c0e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004c10:	6d0c      	ldr	r4, [r1, #80]	; 0x50
 8004c12:	4323      	orrs	r3, r4
 8004c14:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004c16:	6802      	ldr	r2, [r0, #0]
 8004c18:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004c1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c1e:	6393      	str	r3, [r2, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004c20:	6802      	ldr	r2, [r0, #0]
 8004c22:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004c24:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8004c26:	4323      	orrs	r3, r4
 8004c28:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004c2a:	6802      	ldr	r2, [r0, #0]
 8004c2c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004c2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c32:	6393      	str	r3, [r2, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004c34:	6802      	ldr	r2, [r0, #0]
 8004c36:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004c38:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 8004c3a:	4323      	orrs	r3, r4
 8004c3c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004c3e:	6802      	ldr	r2, [r0, #0]
 8004c40:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004c42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c46:	6393      	str	r3, [r2, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004c48:	6802      	ldr	r2, [r0, #0]
 8004c4a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004c4c:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8004c4e:	4323      	orrs	r3, r4
 8004c50:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8004c52:	6802      	ldr	r2, [r0, #0]
 8004c54:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004c56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c5a:	6393      	str	r3, [r2, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8004c5c:	6802      	ldr	r2, [r0, #0]
 8004c5e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004c60:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8004c62:	4323      	orrs	r3, r4
 8004c64:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8004c66:	6802      	ldr	r2, [r0, #0]
 8004c68:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004c6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c6e:	6393      	str	r3, [r2, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8004c70:	6802      	ldr	r2, [r0, #0]
 8004c72:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004c74:	6e4c      	ldr	r4, [r1, #100]	; 0x64
 8004c76:	4323      	orrs	r3, r4
 8004c78:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8004c7a:	6802      	ldr	r2, [r0, #0]
 8004c7c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c82:	6393      	str	r3, [r2, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8004c84:	6802      	ldr	r2, [r0, #0]
 8004c86:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004c88:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8004c92:	4618      	mov	r0, r3
}
 8004c94:	bc30      	pop	{r4, r5}
 8004c96:	4770      	bx	lr
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8004c98:	6802      	ldr	r2, [r0, #0]
 8004c9a:	6913      	ldr	r3, [r2, #16]
 8004c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ca0:	6113      	str	r3, [r2, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8004ca2:	6802      	ldr	r2, [r0, #0]
 8004ca4:	6913      	ldr	r3, [r2, #16]
 8004ca6:	688c      	ldr	r4, [r1, #8]
 8004ca8:	4323      	orrs	r3, r4
 8004caa:	6113      	str	r3, [r2, #16]
 8004cac:	e747      	b.n	8004b3e <HAL_DSI_ConfigVideoMode+0xde>
  __HAL_LOCK(hdsi);
 8004cae:	2002      	movs	r0, #2
}
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	ffffc000 	.word	0xffffc000
 8004cb8:	ffffe000 	.word	0xffffe000
 8004cbc:	fffff000 	.word	0xfffff000
 8004cc0:	ffff8000 	.word	0xffff8000
 8004cc4:	fffffc00 	.word	0xfffffc00

08004cc8 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004cc8:	7c03      	ldrb	r3, [r0, #16]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d021      	beq.n	8004d12 <HAL_DSI_Start+0x4a>
{
 8004cce:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	7403      	strb	r3, [r0, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	6801      	ldr	r1, [r0, #0]
 8004cda:	684a      	ldr	r2, [r1, #4]
 8004cdc:	f042 0201 	orr.w	r2, r2, #1
 8004ce0:	604a      	str	r2, [r1, #4]
 8004ce2:	6802      	ldr	r2, [r0, #0]
 8004ce4:	6851      	ldr	r1, [r2, #4]
 8004ce6:	f001 0101 	and.w	r1, r1, #1
 8004cea:	9100      	str	r1, [sp, #0]
 8004cec:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004cee:	9301      	str	r3, [sp, #4]
 8004cf0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8004cf4:	f041 0108 	orr.w	r1, r1, #8
 8004cf8:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8004cfc:	6802      	ldr	r2, [r0, #0]
 8004cfe:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8004d02:	f002 0208 	and.w	r2, r2, #8
 8004d06:	9201      	str	r2, [sp, #4]
 8004d08:	9a01      	ldr	r2, [sp, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d0a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8004d0c:	4618      	mov	r0, r3
}
 8004d0e:	b002      	add	sp, #8
 8004d10:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8004d12:	2002      	movs	r0, #2
}
 8004d14:	4770      	bx	lr

08004d16 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004d16:	b510      	push	{r4, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d1c:	7c00      	ldrb	r0, [r0, #16]
 8004d1e:	2801      	cmp	r0, #1
 8004d20:	d00a      	beq.n	8004d38 <HAL_DSI_ShortWrite+0x22>
 8004d22:	2001      	movs	r0, #1
 8004d24:	7420      	strb	r0, [r4, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004d26:	9804      	ldr	r0, [sp, #16]
 8004d28:	9000      	str	r0, [sp, #0]
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f7ff fd61 	bl	80047f2 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d30:	2300      	movs	r3, #0
 8004d32:	7423      	strb	r3, [r4, #16]

  return status;
}
 8004d34:	b002      	add	sp, #8
 8004d36:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdsi);
 8004d38:	2002      	movs	r0, #2
 8004d3a:	e7fb      	b.n	8004d34 <HAL_DSI_ShortWrite+0x1e>

08004d3c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	4698      	mov	r8, r3
 8004d44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004d46:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d48:	7c03      	ldrb	r3, [r0, #16]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d04b      	beq.n	8004de6 <HAL_DSI_LongWrite+0xaa>
 8004d4e:	4607      	mov	r7, r0
 8004d50:	4689      	mov	r9, r1
 8004d52:	4692      	mov	sl, r2
 8004d54:	2301      	movs	r3, #1
 8004d56:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d58:	f7ff f8cc 	bl	8003ef4 <HAL_GetTick>
 8004d5c:	4605      	mov	r5, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004d62:	f013 0f01 	tst.w	r3, #1
 8004d66:	d109      	bne.n	8004d7c <HAL_DSI_LongWrite+0x40>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004d68:	f7ff f8c4 	bl	8003ef4 <HAL_GetTick>
 8004d6c:	1b40      	subs	r0, r0, r5
 8004d6e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004d72:	d9f4      	bls.n	8004d5e <HAL_DSI_LongWrite+0x22>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004d74:	2300      	movs	r3, #0
 8004d76:	743b      	strb	r3, [r7, #16]

      return HAL_TIMEOUT;
 8004d78:	2003      	movs	r0, #3
 8004d7a:	e031      	b.n	8004de0 <HAL_DSI_LongWrite+0xa4>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004d7c:	4645      	mov	r5, r8
 8004d7e:	2d03      	cmp	r5, #3
 8004d80:	bf28      	it	cs
 8004d82:	2503      	movcs	r5, #3

  for (count = 0U; count < nbBytes; count++)
 8004d84:	2300      	movs	r3, #0
 8004d86:	42ab      	cmp	r3, r5
 8004d88:	d205      	bcs.n	8004d96 <HAL_DSI_LongWrite+0x5a>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004d8a:	5ce1      	ldrb	r1, [r4, r3]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	00d8      	lsls	r0, r3, #3
 8004d90:	4081      	lsls	r1, r0
 8004d92:	430e      	orrs	r6, r1
  for (count = 0U; count < nbBytes; count++)
 8004d94:	e7f7      	b.n	8004d86 <HAL_DSI_LongWrite+0x4a>
  }
  hdsi->Instance->GPDR = fifoword;
 8004d96:	6716      	str	r6, [r2, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004d98:	eba8 0005 	sub.w	r0, r8, r5
  pparams += nbBytes;
 8004d9c:	1961      	adds	r1, r4, r5
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004d9e:	e00a      	b.n	8004db6 <HAL_DSI_LongWrite+0x7a>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004da0:	5d0d      	ldrb	r5, [r1, r4]
 8004da2:	00e3      	lsls	r3, r4, #3
 8004da4:	409d      	lsls	r5, r3
 8004da6:	432e      	orrs	r6, r5
    for (count = 0U; count < nbBytes; count++)
 8004da8:	3401      	adds	r4, #1
 8004daa:	4294      	cmp	r4, r2
 8004dac:	d3f8      	bcc.n	8004da0 <HAL_DSI_LongWrite+0x64>
    }
    hdsi->Instance->GPDR = fifoword;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	671e      	str	r6, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004db2:	1a80      	subs	r0, r0, r2
    pparams += nbBytes;
 8004db4:	4411      	add	r1, r2
  while (uicounter != 0U)
 8004db6:	b130      	cbz	r0, 8004dc6 <HAL_DSI_LongWrite+0x8a>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004db8:	4602      	mov	r2, r0
 8004dba:	2804      	cmp	r0, #4
 8004dbc:	bf28      	it	cs
 8004dbe:	2204      	movcs	r2, #4
    fifoword = 0U;
 8004dc0:	2600      	movs	r6, #0
    for (count = 0U; count < nbBytes; count++)
 8004dc2:	4634      	mov	r4, r6
 8004dc4:	e7f1      	b.n	8004daa <HAL_DSI_LongWrite+0x6e>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004dc6:	f108 0301 	add.w	r3, r8, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004dca:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004dce:	9200      	str	r2, [sp, #0]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	4652      	mov	r2, sl
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	6838      	ldr	r0, [r7, #0]
 8004dd8:	f7ff fd02 	bl	80047e0 <DSI_ConfigPacketHeader>
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004ddc:	2000      	movs	r0, #0
 8004dde:	7438      	strb	r0, [r7, #16]

  return HAL_OK;
}
 8004de0:	b002      	add	sp, #8
 8004de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 8004de6:	2002      	movs	r0, #2
 8004de8:	e7fa      	b.n	8004de0 <HAL_DSI_LongWrite+0xa4>
	...

08004dec <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004dec:	2300      	movs	r3, #0
 8004dee:	2b0f      	cmp	r3, #15
 8004df0:	f200 80e3 	bhi.w	8004fba <HAL_GPIO_Init+0x1ce>
{
 8004df4:	b4f0      	push	{r4, r5, r6, r7}
 8004df6:	b082      	sub	sp, #8
 8004df8:	e039      	b.n	8004e6e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004dfa:	2209      	movs	r2, #9
 8004dfc:	e000      	b.n	8004e00 <HAL_GPIO_Init+0x14>
 8004dfe:	2200      	movs	r2, #0
 8004e00:	40b2      	lsls	r2, r6
 8004e02:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8004e04:	3402      	adds	r4, #2
 8004e06:	4e6d      	ldr	r6, [pc, #436]	; (8004fbc <HAL_GPIO_Init+0x1d0>)
 8004e08:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e0c:	4a6c      	ldr	r2, [pc, #432]	; (8004fc0 <HAL_GPIO_Init+0x1d4>)
 8004e0e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004e10:	43ea      	mvns	r2, r5
 8004e12:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e16:	684f      	ldr	r7, [r1, #4]
 8004e18:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8004e1c:	d001      	beq.n	8004e22 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8004e1e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8004e22:	4c67      	ldr	r4, [pc, #412]	; (8004fc0 <HAL_GPIO_Init+0x1d4>)
 8004e24:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8004e26:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8004e28:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e2c:	684f      	ldr	r7, [r1, #4]
 8004e2e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8004e32:	d001      	beq.n	8004e38 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8004e34:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8004e38:	4c61      	ldr	r4, [pc, #388]	; (8004fc0 <HAL_GPIO_Init+0x1d4>)
 8004e3a:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e3c:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8004e3e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e42:	684f      	ldr	r7, [r1, #4]
 8004e44:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8004e48:	d001      	beq.n	8004e4e <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8004e4a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8004e4e:	4c5c      	ldr	r4, [pc, #368]	; (8004fc0 <HAL_GPIO_Init+0x1d4>)
 8004e50:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8004e52:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8004e54:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e56:	684e      	ldr	r6, [r1, #4]
 8004e58:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8004e5c:	d001      	beq.n	8004e62 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8004e5e:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8004e62:	4c57      	ldr	r4, [pc, #348]	; (8004fc0 <HAL_GPIO_Init+0x1d4>)
 8004e64:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004e66:	3301      	adds	r3, #1
 8004e68:	2b0f      	cmp	r3, #15
 8004e6a:	f200 80a3 	bhi.w	8004fb4 <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
 8004e6e:	2201      	movs	r2, #1
 8004e70:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e72:	680c      	ldr	r4, [r1, #0]
 8004e74:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8004e78:	ea32 0404 	bics.w	r4, r2, r4
 8004e7c:	d1f3      	bne.n	8004e66 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e7e:	684c      	ldr	r4, [r1, #4]
 8004e80:	2c12      	cmp	r4, #18
 8004e82:	bf18      	it	ne
 8004e84:	2c02      	cmpne	r4, #2
 8004e86:	d110      	bne.n	8004eaa <HAL_GPIO_Init+0xbe>
        temp = GPIOx->AFR[position >> 3];
 8004e88:	08de      	lsrs	r6, r3, #3
 8004e8a:	3608      	adds	r6, #8
 8004e8c:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004e90:	f003 0407 	and.w	r4, r3, #7
 8004e94:	00a7      	lsls	r7, r4, #2
 8004e96:	240f      	movs	r4, #15
 8004e98:	40bc      	lsls	r4, r7
 8004e9a:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004e9e:	690c      	ldr	r4, [r1, #16]
 8004ea0:	40bc      	lsls	r4, r7
 8004ea2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8004ea6:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8004eaa:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004eae:	005e      	lsls	r6, r3, #1
 8004eb0:	2403      	movs	r4, #3
 8004eb2:	40b4      	lsls	r4, r6
 8004eb4:	43e7      	mvns	r7, r4
 8004eb6:	ea2c 0c04 	bic.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004eba:	684c      	ldr	r4, [r1, #4]
 8004ebc:	f004 0403 	and.w	r4, r4, #3
 8004ec0:	40b4      	lsls	r4, r6
 8004ec2:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8004ec6:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ec8:	684c      	ldr	r4, [r1, #4]
 8004eca:	f104 3cff 	add.w	ip, r4, #4294967295
 8004ece:	2c11      	cmp	r4, #17
 8004ed0:	bf18      	it	ne
 8004ed2:	f1bc 0f01 	cmpne.w	ip, #1
 8004ed6:	d901      	bls.n	8004edc <HAL_GPIO_Init+0xf0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ed8:	2c12      	cmp	r4, #18
 8004eda:	d110      	bne.n	8004efe <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8004edc:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004ede:	ea07 0c04 	and.w	ip, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8004ee2:	68cc      	ldr	r4, [r1, #12]
 8004ee4:	40b4      	lsls	r4, r6
 8004ee6:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8004eea:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8004eec:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004eee:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004ef2:	684c      	ldr	r4, [r1, #4]
 8004ef4:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004ef8:	409c      	lsls	r4, r3
 8004efa:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8004efc:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8004efe:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004f00:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004f02:	688a      	ldr	r2, [r1, #8]
 8004f04:	40b2      	lsls	r2, r6
 8004f06:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8004f08:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f0a:	684a      	ldr	r2, [r1, #4]
 8004f0c:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8004f10:	d0a9      	beq.n	8004e66 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f12:	4a2c      	ldr	r2, [pc, #176]	; (8004fc4 <HAL_GPIO_Init+0x1d8>)
 8004f14:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8004f16:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004f1a:	6454      	str	r4, [r2, #68]	; 0x44
 8004f1c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004f1e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004f22:	9201      	str	r2, [sp, #4]
 8004f24:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8004f26:	089c      	lsrs	r4, r3, #2
 8004f28:	1ca6      	adds	r6, r4, #2
 8004f2a:	4a24      	ldr	r2, [pc, #144]	; (8004fbc <HAL_GPIO_Init+0x1d0>)
 8004f2c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f30:	f003 0203 	and.w	r2, r3, #3
 8004f34:	0096      	lsls	r6, r2, #2
 8004f36:	220f      	movs	r2, #15
 8004f38:	40b2      	lsls	r2, r6
 8004f3a:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004f3e:	4a22      	ldr	r2, [pc, #136]	; (8004fc8 <HAL_GPIO_Init+0x1dc>)
 8004f40:	4290      	cmp	r0, r2
 8004f42:	f43f af5c 	beq.w	8004dfe <HAL_GPIO_Init+0x12>
 8004f46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f4a:	4290      	cmp	r0, r2
 8004f4c:	d022      	beq.n	8004f94 <HAL_GPIO_Init+0x1a8>
 8004f4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f52:	4290      	cmp	r0, r2
 8004f54:	d020      	beq.n	8004f98 <HAL_GPIO_Init+0x1ac>
 8004f56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f5a:	4290      	cmp	r0, r2
 8004f5c:	d01e      	beq.n	8004f9c <HAL_GPIO_Init+0x1b0>
 8004f5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f62:	4290      	cmp	r0, r2
 8004f64:	d01c      	beq.n	8004fa0 <HAL_GPIO_Init+0x1b4>
 8004f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f6a:	4290      	cmp	r0, r2
 8004f6c:	d01a      	beq.n	8004fa4 <HAL_GPIO_Init+0x1b8>
 8004f6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f72:	4290      	cmp	r0, r2
 8004f74:	d018      	beq.n	8004fa8 <HAL_GPIO_Init+0x1bc>
 8004f76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f7a:	4290      	cmp	r0, r2
 8004f7c:	d016      	beq.n	8004fac <HAL_GPIO_Init+0x1c0>
 8004f7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f82:	4290      	cmp	r0, r2
 8004f84:	d014      	beq.n	8004fb0 <HAL_GPIO_Init+0x1c4>
 8004f86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f8a:	4290      	cmp	r0, r2
 8004f8c:	f43f af35 	beq.w	8004dfa <HAL_GPIO_Init+0xe>
 8004f90:	220a      	movs	r2, #10
 8004f92:	e735      	b.n	8004e00 <HAL_GPIO_Init+0x14>
 8004f94:	2201      	movs	r2, #1
 8004f96:	e733      	b.n	8004e00 <HAL_GPIO_Init+0x14>
 8004f98:	2202      	movs	r2, #2
 8004f9a:	e731      	b.n	8004e00 <HAL_GPIO_Init+0x14>
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	e72f      	b.n	8004e00 <HAL_GPIO_Init+0x14>
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	e72d      	b.n	8004e00 <HAL_GPIO_Init+0x14>
 8004fa4:	2205      	movs	r2, #5
 8004fa6:	e72b      	b.n	8004e00 <HAL_GPIO_Init+0x14>
 8004fa8:	2206      	movs	r2, #6
 8004faa:	e729      	b.n	8004e00 <HAL_GPIO_Init+0x14>
 8004fac:	2207      	movs	r2, #7
 8004fae:	e727      	b.n	8004e00 <HAL_GPIO_Init+0x14>
 8004fb0:	2208      	movs	r2, #8
 8004fb2:	e725      	b.n	8004e00 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8004fb4:	b002      	add	sp, #8
 8004fb6:	bcf0      	pop	{r4, r5, r6, r7}
 8004fb8:	4770      	bx	lr
 8004fba:	4770      	bx	lr
 8004fbc:	40013800 	.word	0x40013800
 8004fc0:	40013c00 	.word	0x40013c00
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	40020000 	.word	0x40020000

08004fcc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004fcc:	6903      	ldr	r3, [r0, #16]
 8004fce:	4219      	tst	r1, r3
 8004fd0:	d001      	beq.n	8004fd6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8004fd2:	2001      	movs	r0, #1
 8004fd4:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fd6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8004fd8:	4770      	bx	lr

08004fda <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fda:	b10a      	cbz	r2, 8004fe0 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fdc:	6181      	str	r1, [r0, #24]
 8004fde:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004fe0:	0409      	lsls	r1, r1, #16
 8004fe2:	6181      	str	r1, [r0, #24]
  }
}
 8004fe4:	4770      	bx	lr

08004fe6 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004fe6:	6803      	ldr	r3, [r0, #0]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	f012 0f02 	tst.w	r2, #2
 8004fee:	d001      	beq.n	8004ff4 <I2C_Flush_TXDR+0xe>
  {
     hi2c->Instance->TXDR = 0x00U;
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ff4:	6803      	ldr	r3, [r0, #0]
 8004ff6:	699a      	ldr	r2, [r3, #24]
 8004ff8:	f012 0f01 	tst.w	r2, #1
 8004ffc:	d103      	bne.n	8005006 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ffe:	699a      	ldr	r2, [r3, #24]
 8005000:	f042 0201 	orr.w	r2, r2, #1
 8005004:	619a      	str	r2, [r3, #24]
  }
}
 8005006:	4770      	bx	lr

08005008 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005008:	b410      	push	{r4}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800500a:	6804      	ldr	r4, [r0, #0]
 800500c:	6860      	ldr	r0, [r4, #4]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800500e:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 8005012:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
 8005016:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 800501a:	f020 0003 	bic.w	r0, r0, #3

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800501e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005022:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005026:	4319      	orrs	r1, r3
 8005028:	9b01      	ldr	r3, [sp, #4]
 800502a:	4319      	orrs	r1, r3
 800502c:	4301      	orrs	r1, r0
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 800502e:	6061      	str	r1, [r4, #4]
}
 8005030:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005034:	4770      	bx	lr

08005036 <I2C_IsAcknowledgeFailed>:
{
 8005036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005038:	4605      	mov	r5, r0
 800503a:	460e      	mov	r6, r1
 800503c:	4617      	mov	r7, r2
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800503e:	6803      	ldr	r3, [r0, #0]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	f013 0f10 	tst.w	r3, #16
 8005046:	d101      	bne.n	800504c <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8005048:	2000      	movs	r0, #0
}
 800504a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	699c      	ldr	r4, [r3, #24]
 8005050:	f014 0f20 	tst.w	r4, #32
 8005054:	d112      	bne.n	800507c <I2C_IsAcknowledgeFailed+0x46>
      if(Timeout != HAL_MAX_DELAY)
 8005056:	f1b6 3fff 	cmp.w	r6, #4294967295
 800505a:	d0f7      	beq.n	800504c <I2C_IsAcknowledgeFailed+0x16>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800505c:	b126      	cbz	r6, 8005068 <I2C_IsAcknowledgeFailed+0x32>
 800505e:	f7fe ff49 	bl	8003ef4 <HAL_GetTick>
 8005062:	1bc0      	subs	r0, r0, r7
 8005064:	42b0      	cmp	r0, r6
 8005066:	d9f1      	bls.n	800504c <I2C_IsAcknowledgeFailed+0x16>
          hi2c->State= HAL_I2C_STATE_READY;
 8005068:	2320      	movs	r3, #32
 800506a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800506e:	2300      	movs	r3, #0
 8005070:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8005074:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_TIMEOUT;
 8005078:	2003      	movs	r0, #3
 800507a:	e7e6      	b.n	800504a <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800507c:	2210      	movs	r2, #16
 800507e:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005080:	682b      	ldr	r3, [r5, #0]
 8005082:	2420      	movs	r4, #32
 8005084:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8005086:	4628      	mov	r0, r5
 8005088:	f7ff ffad 	bl	8004fe6 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800508c:	682a      	ldr	r2, [r5, #0]
 800508e:	6853      	ldr	r3, [r2, #4]
 8005090:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005094:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005098:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800509c:	f023 0301 	bic.w	r3, r3, #1
 80050a0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80050a2:	2304      	movs	r3, #4
 80050a4:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 80050a6:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050aa:	2300      	movs	r3, #0
 80050ac:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80050b0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 80050b4:	2001      	movs	r0, #1
 80050b6:	e7c8      	b.n	800504a <I2C_IsAcknowledgeFailed+0x14>

080050b8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	4604      	mov	r4, r0
 80050bc:	460d      	mov	r5, r1
 80050be:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	f013 0f02 	tst.w	r3, #2
 80050c8:	d11c      	bne.n	8005104 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ca:	4632      	mov	r2, r6
 80050cc:	4629      	mov	r1, r5
 80050ce:	4620      	mov	r0, r4
 80050d0:	f7ff ffb1 	bl	8005036 <I2C_IsAcknowledgeFailed>
 80050d4:	b9c0      	cbnz	r0, 8005108 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 80050d6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80050da:	d0f1      	beq.n	80050c0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80050dc:	b125      	cbz	r5, 80050e8 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 80050de:	f7fe ff09 	bl	8003ef4 <HAL_GetTick>
 80050e2:	1b80      	subs	r0, r0, r6
 80050e4:	42a8      	cmp	r0, r5
 80050e6:	d9eb      	bls.n	80050c0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80050ea:	f043 0320 	orr.w	r3, r3, #32
 80050ee:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 80050f0:	2320      	movs	r3, #32
 80050f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f6:	2300      	movs	r3, #0
 80050f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80050fc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8005100:	2003      	movs	r0, #3
 8005102:	e000      	b.n	8005106 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;
 8005104:	2000      	movs	r0, #0
}
 8005106:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005108:	2001      	movs	r0, #1
 800510a:	e7fc      	b.n	8005106 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

0800510c <I2C_WaitOnFlagUntilTimeout>:
{
 800510c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005110:	4606      	mov	r6, r0
 8005112:	4688      	mov	r8, r1
 8005114:	4617      	mov	r7, r2
 8005116:	461d      	mov	r5, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005118:	6834      	ldr	r4, [r6, #0]
 800511a:	69a4      	ldr	r4, [r4, #24]
 800511c:	ea38 0304 	bics.w	r3, r8, r4
 8005120:	bf0c      	ite	eq
 8005122:	2401      	moveq	r4, #1
 8005124:	2400      	movne	r4, #0
 8005126:	42bc      	cmp	r4, r7
 8005128:	d113      	bne.n	8005152 <I2C_WaitOnFlagUntilTimeout+0x46>
    if(Timeout != HAL_MAX_DELAY)
 800512a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800512e:	d0f3      	beq.n	8005118 <I2C_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8005130:	b12d      	cbz	r5, 800513e <I2C_WaitOnFlagUntilTimeout+0x32>
 8005132:	f7fe fedf 	bl	8003ef4 <HAL_GetTick>
 8005136:	9b06      	ldr	r3, [sp, #24]
 8005138:	1ac0      	subs	r0, r0, r3
 800513a:	42a8      	cmp	r0, r5
 800513c:	d9ec      	bls.n	8005118 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->State= HAL_I2C_STATE_READY;
 800513e:	2320      	movs	r3, #32
 8005140:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005144:	2300      	movs	r3, #0
 8005146:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800514a:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_TIMEOUT;
 800514e:	2003      	movs	r0, #3
 8005150:	e000      	b.n	8005154 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8005152:	2000      	movs	r0, #0
}
 8005154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005158 <I2C_RequestMemoryWrite>:
{
 8005158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800515c:	b082      	sub	sp, #8
 800515e:	4604      	mov	r4, r0
 8005160:	4690      	mov	r8, r2
 8005162:	461d      	mov	r5, r3
 8005164:	9e08      	ldr	r6, [sp, #32]
 8005166:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005168:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005172:	b2ea      	uxtb	r2, r5
 8005174:	f7ff ff48 	bl	8005008 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005178:	463a      	mov	r2, r7
 800517a:	4631      	mov	r1, r6
 800517c:	4620      	mov	r0, r4
 800517e:	f7ff ff9b 	bl	80050b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005182:	b130      	cbz	r0, 8005192 <I2C_RequestMemoryWrite+0x3a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005184:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005186:	2b04      	cmp	r3, #4
 8005188:	d001      	beq.n	800518e <I2C_RequestMemoryWrite+0x36>
      return HAL_TIMEOUT;
 800518a:	2003      	movs	r0, #3
 800518c:	e00f      	b.n	80051ae <I2C_RequestMemoryWrite+0x56>
      return HAL_ERROR;
 800518e:	2001      	movs	r0, #1
 8005190:	e00d      	b.n	80051ae <I2C_RequestMemoryWrite+0x56>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005192:	2d01      	cmp	r5, #1
 8005194:	d10e      	bne.n	80051b4 <I2C_RequestMemoryWrite+0x5c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	fa5f f288 	uxtb.w	r2, r8
 800519c:	629a      	str	r2, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800519e:	9700      	str	r7, [sp, #0]
 80051a0:	4633      	mov	r3, r6
 80051a2:	2200      	movs	r2, #0
 80051a4:	2180      	movs	r1, #128	; 0x80
 80051a6:	4620      	mov	r0, r4
 80051a8:	f7ff ffb0 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 80051ac:	b9c0      	cbnz	r0, 80051e0 <I2C_RequestMemoryWrite+0x88>
}
 80051ae:	b002      	add	sp, #8
 80051b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80051ba:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051bc:	463a      	mov	r2, r7
 80051be:	4631      	mov	r1, r6
 80051c0:	4620      	mov	r0, r4
 80051c2:	f7ff ff79 	bl	80050b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80051c6:	b130      	cbz	r0, 80051d6 <I2C_RequestMemoryWrite+0x7e>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d001      	beq.n	80051d2 <I2C_RequestMemoryWrite+0x7a>
        return HAL_TIMEOUT;
 80051ce:	2003      	movs	r0, #3
 80051d0:	e7ed      	b.n	80051ae <I2C_RequestMemoryWrite+0x56>
        return HAL_ERROR;
 80051d2:	2001      	movs	r0, #1
 80051d4:	e7eb      	b.n	80051ae <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	fa5f f288 	uxtb.w	r2, r8
 80051dc:	629a      	str	r2, [r3, #40]	; 0x28
 80051de:	e7de      	b.n	800519e <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 80051e0:	2003      	movs	r0, #3
 80051e2:	e7e4      	b.n	80051ae <I2C_RequestMemoryWrite+0x56>

080051e4 <I2C_RequestMemoryRead>:
{
 80051e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	4604      	mov	r4, r0
 80051ec:	4690      	mov	r8, r2
 80051ee:	461d      	mov	r5, r3
 80051f0:	9e08      	ldr	r6, [sp, #32]
 80051f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80051f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	2300      	movs	r3, #0
 80051fc:	b2ea      	uxtb	r2, r5
 80051fe:	f7ff ff03 	bl	8005008 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005202:	463a      	mov	r2, r7
 8005204:	4631      	mov	r1, r6
 8005206:	4620      	mov	r0, r4
 8005208:	f7ff ff56 	bl	80050b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800520c:	b130      	cbz	r0, 800521c <I2C_RequestMemoryRead+0x38>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800520e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005210:	2b04      	cmp	r3, #4
 8005212:	d001      	beq.n	8005218 <I2C_RequestMemoryRead+0x34>
      return HAL_TIMEOUT;
 8005214:	2003      	movs	r0, #3
 8005216:	e00f      	b.n	8005238 <I2C_RequestMemoryRead+0x54>
      return HAL_ERROR;
 8005218:	2001      	movs	r0, #1
 800521a:	e00d      	b.n	8005238 <I2C_RequestMemoryRead+0x54>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800521c:	2d01      	cmp	r5, #1
 800521e:	d10e      	bne.n	800523e <I2C_RequestMemoryRead+0x5a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	fa5f f288 	uxtb.w	r2, r8
 8005226:	629a      	str	r2, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005228:	9700      	str	r7, [sp, #0]
 800522a:	4633      	mov	r3, r6
 800522c:	2200      	movs	r2, #0
 800522e:	2140      	movs	r1, #64	; 0x40
 8005230:	4620      	mov	r0, r4
 8005232:	f7ff ff6b 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 8005236:	b9c0      	cbnz	r0, 800526a <I2C_RequestMemoryRead+0x86>
}
 8005238:	b002      	add	sp, #8
 800523a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8005244:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005246:	463a      	mov	r2, r7
 8005248:	4631      	mov	r1, r6
 800524a:	4620      	mov	r0, r4
 800524c:	f7ff ff34 	bl	80050b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005250:	b130      	cbz	r0, 8005260 <I2C_RequestMemoryRead+0x7c>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005252:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005254:	2b04      	cmp	r3, #4
 8005256:	d001      	beq.n	800525c <I2C_RequestMemoryRead+0x78>
        return HAL_TIMEOUT;
 8005258:	2003      	movs	r0, #3
 800525a:	e7ed      	b.n	8005238 <I2C_RequestMemoryRead+0x54>
        return HAL_ERROR;
 800525c:	2001      	movs	r0, #1
 800525e:	e7eb      	b.n	8005238 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	fa5f f288 	uxtb.w	r2, r8
 8005266:	629a      	str	r2, [r3, #40]	; 0x28
 8005268:	e7de      	b.n	8005228 <I2C_RequestMemoryRead+0x44>
    return HAL_TIMEOUT;
 800526a:	2003      	movs	r0, #3
 800526c:	e7e4      	b.n	8005238 <I2C_RequestMemoryRead+0x54>

0800526e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800526e:	b570      	push	{r4, r5, r6, lr}
 8005270:	4605      	mov	r5, r0
 8005272:	460c      	mov	r4, r1
 8005274:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005276:	682b      	ldr	r3, [r5, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f013 0f20 	tst.w	r3, #32
 800527e:	d119      	bne.n	80052b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005280:	4632      	mov	r2, r6
 8005282:	4621      	mov	r1, r4
 8005284:	4628      	mov	r0, r5
 8005286:	f7ff fed6 	bl	8005036 <I2C_IsAcknowledgeFailed>
 800528a:	b9a8      	cbnz	r0, 80052b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800528c:	b124      	cbz	r4, 8005298 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
 800528e:	f7fe fe31 	bl	8003ef4 <HAL_GetTick>
 8005292:	1b80      	subs	r0, r0, r6
 8005294:	42a0      	cmp	r0, r4
 8005296:	d9ee      	bls.n	8005276 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005298:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800529a:	f043 0320 	orr.w	r3, r3, #32
 800529e:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 80052a0:	2320      	movs	r3, #32
 80052a2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80052ac:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_TIMEOUT;
 80052b0:	2003      	movs	r0, #3
}
 80052b2:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80052b4:	2000      	movs	r0, #0
 80052b6:	e7fc      	b.n	80052b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
      return HAL_ERROR;
 80052b8:	2001      	movs	r0, #1
 80052ba:	e7fa      	b.n	80052b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

080052bc <HAL_I2C_MspInit>:
}
 80052bc:	4770      	bx	lr
	...

080052c0 <HAL_I2C_Init>:
  if(hi2c == NULL)
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d057      	beq.n	8005374 <HAL_I2C_Init+0xb4>
{
 80052c4:	b510      	push	{r4, lr}
 80052c6:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80052c8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d041      	beq.n	8005354 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80052d0:	2324      	movs	r3, #36	; 0x24
 80052d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80052d6:	6822      	ldr	r2, [r4, #0]
 80052d8:	6813      	ldr	r3, [r2, #0]
 80052da:	f023 0301 	bic.w	r3, r3, #1
 80052de:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80052e0:	6863      	ldr	r3, [r4, #4]
 80052e2:	6822      	ldr	r2, [r4, #0]
 80052e4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80052e8:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80052ea:	6822      	ldr	r2, [r4, #0]
 80052ec:	6893      	ldr	r3, [r2, #8]
 80052ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052f2:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052f4:	68e3      	ldr	r3, [r4, #12]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d031      	beq.n	800535e <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80052fa:	68a3      	ldr	r3, [r4, #8]
 80052fc:	6822      	ldr	r2, [r4, #0]
 80052fe:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8005302:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005304:	68e3      	ldr	r3, [r4, #12]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d02f      	beq.n	800536a <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800530a:	6822      	ldr	r2, [r4, #0]
 800530c:	6851      	ldr	r1, [r2, #4]
 800530e:	4b1a      	ldr	r3, [pc, #104]	; (8005378 <HAL_I2C_Init+0xb8>)
 8005310:	430b      	orrs	r3, r1
 8005312:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005314:	6822      	ldr	r2, [r4, #0]
 8005316:	68d3      	ldr	r3, [r2, #12]
 8005318:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800531c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800531e:	6923      	ldr	r3, [r4, #16]
 8005320:	6962      	ldr	r2, [r4, #20]
 8005322:	4313      	orrs	r3, r2
 8005324:	69a1      	ldr	r1, [r4, #24]
 8005326:	6822      	ldr	r2, [r4, #0]
 8005328:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800532c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800532e:	69e3      	ldr	r3, [r4, #28]
 8005330:	6a21      	ldr	r1, [r4, #32]
 8005332:	6822      	ldr	r2, [r4, #0]
 8005334:	430b      	orrs	r3, r1
 8005336:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005338:	6822      	ldr	r2, [r4, #0]
 800533a:	6813      	ldr	r3, [r2, #0]
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005342:	2000      	movs	r0, #0
 8005344:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005346:	2320      	movs	r3, #32
 8005348:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800534c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800534e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005352:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005354:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005358:	f7ff ffb0 	bl	80052bc <HAL_I2C_MspInit>
 800535c:	e7b8      	b.n	80052d0 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800535e:	68a3      	ldr	r3, [r4, #8]
 8005360:	6822      	ldr	r2, [r4, #0]
 8005362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005366:	6093      	str	r3, [r2, #8]
 8005368:	e7cc      	b.n	8005304 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005370:	605a      	str	r2, [r3, #4]
 8005372:	e7ca      	b.n	800530a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8005374:	2001      	movs	r0, #1
}
 8005376:	4770      	bx	lr
 8005378:	02008000 	.word	0x02008000

0800537c <HAL_I2C_MspDeInit>:
}
 800537c:	4770      	bx	lr

0800537e <HAL_I2C_DeInit>:
  if(hi2c == NULL)
 800537e:	b1a8      	cbz	r0, 80053ac <HAL_I2C_DeInit+0x2e>
{
 8005380:	b510      	push	{r4, lr}
 8005382:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005384:	2324      	movs	r3, #36	; 0x24
 8005386:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800538a:	6802      	ldr	r2, [r0, #0]
 800538c:	6813      	ldr	r3, [r2, #0]
 800538e:	f023 0301 	bic.w	r3, r3, #1
 8005392:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8005394:	f7ff fff2 	bl	800537c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005398:	2000      	movs	r0, #0
 800539a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800539c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80053a0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 80053a6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80053aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80053ac:	2001      	movs	r0, #1
}
 80053ae:	4770      	bx	lr

080053b0 <HAL_I2C_Mem_Write>:
{
 80053b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b4:	b083      	sub	sp, #12
 80053b6:	460d      	mov	r5, r1
 80053b8:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80053bc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if(hi2c->State == HAL_I2C_STATE_READY)
 80053be:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80053c2:	b2c9      	uxtb	r1, r1
 80053c4:	2920      	cmp	r1, #32
 80053c6:	f040 80d1 	bne.w	800556c <HAL_I2C_Mem_Write+0x1bc>
 80053ca:	4604      	mov	r4, r0
 80053cc:	4690      	mov	r8, r2
 80053ce:	4699      	mov	r9, r3
    if((pData == NULL) || (Size == 0U))
 80053d0:	faba f38a 	clz	r3, sl
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053d8:	2a00      	cmp	r2, #0
 80053da:	bf08      	it	eq
 80053dc:	2301      	moveq	r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f040 80c8 	bne.w	8005574 <HAL_I2C_Mem_Write+0x1c4>
    __HAL_LOCK(hi2c);
 80053e4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	f000 80c5 	beq.w	8005578 <HAL_I2C_Mem_Write+0x1c8>
 80053ee:	f04f 0b01 	mov.w	fp, #1
 80053f2:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80053f6:	f7fe fd7d 	bl	8003ef4 <HAL_GetTick>
 80053fa:	4606      	mov	r6, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053fc:	9000      	str	r0, [sp, #0]
 80053fe:	2319      	movs	r3, #25
 8005400:	465a      	mov	r2, fp
 8005402:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005406:	4620      	mov	r0, r4
 8005408:	f7ff fe80 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 800540c:	2800      	cmp	r0, #0
 800540e:	f040 80b5 	bne.w	800557c <HAL_I2C_Mem_Write+0x1cc>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005412:	2321      	movs	r3, #33	; 0x21
 8005414:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005418:	2340      	movs	r3, #64	; 0x40
 800541a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800541e:	2300      	movs	r3, #0
 8005420:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005422:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005424:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005426:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800542a:	6363      	str	r3, [r4, #52]	; 0x34
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800542c:	9601      	str	r6, [sp, #4]
 800542e:	9700      	str	r7, [sp, #0]
 8005430:	464b      	mov	r3, r9
 8005432:	4642      	mov	r2, r8
 8005434:	4629      	mov	r1, r5
 8005436:	4620      	mov	r0, r4
 8005438:	f7ff fe8e 	bl	8005158 <I2C_RequestMemoryWrite>
 800543c:	b160      	cbz	r0, 8005458 <HAL_I2C_Mem_Write+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800543e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005440:	2b04      	cmp	r3, #4
 8005442:	d004      	beq.n	800544e <HAL_I2C_Mem_Write+0x9e>
        __HAL_UNLOCK(hi2c);
 8005444:	2300      	movs	r3, #0
 8005446:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800544a:	2003      	movs	r0, #3
 800544c:	e08f      	b.n	800556e <HAL_I2C_Mem_Write+0x1be>
        __HAL_UNLOCK(hi2c);
 800544e:	2300      	movs	r3, #0
 8005450:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005454:	4658      	mov	r0, fp
 8005456:	e08a      	b.n	800556e <HAL_I2C_Mem_Write+0x1be>
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8005458:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800545a:	b29b      	uxth	r3, r3
 800545c:	2bff      	cmp	r3, #255	; 0xff
 800545e:	d90a      	bls.n	8005476 <HAL_I2C_Mem_Write+0xc6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005460:	22ff      	movs	r2, #255	; 0xff
 8005462:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005464:	2300      	movs	r3, #0
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800546c:	4629      	mov	r1, r5
 800546e:	4620      	mov	r0, r4
 8005470:	f7ff fdca 	bl	8005008 <I2C_TransferConfig>
 8005474:	e023      	b.n	80054be <HAL_I2C_Mem_Write+0x10e>
      hi2c->XferSize = hi2c->XferCount;
 8005476:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005478:	b292      	uxth	r2, r2
 800547a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800547c:	2300      	movs	r3, #0
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005484:	b2d2      	uxtb	r2, r2
 8005486:	4629      	mov	r1, r5
 8005488:	4620      	mov	r0, r4
 800548a:	f7ff fdbd 	bl	8005008 <I2C_TransferConfig>
 800548e:	e016      	b.n	80054be <HAL_I2C_Mem_Write+0x10e>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005490:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005492:	2b04      	cmp	r3, #4
 8005494:	d001      	beq.n	800549a <HAL_I2C_Mem_Write+0xea>
          return HAL_TIMEOUT;
 8005496:	2003      	movs	r0, #3
 8005498:	e069      	b.n	800556e <HAL_I2C_Mem_Write+0x1be>
          return HAL_ERROR;
 800549a:	2001      	movs	r0, #1
 800549c:	e067      	b.n	800556e <HAL_I2C_Mem_Write+0x1be>
          hi2c->XferSize = hi2c->XferCount;
 800549e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80054a0:	b292      	uxth	r2, r2
 80054a2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80054a4:	2300      	movs	r3, #0
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	4629      	mov	r1, r5
 80054b0:	4620      	mov	r0, r4
 80054b2:	f7ff fda9 	bl	8005008 <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 80054b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d033      	beq.n	8005526 <HAL_I2C_Mem_Write+0x176>
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054be:	4632      	mov	r2, r6
 80054c0:	4639      	mov	r1, r7
 80054c2:	4620      	mov	r0, r4
 80054c4:	f7ff fdf8 	bl	80050b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	d1e1      	bne.n	8005490 <HAL_I2C_Mem_Write+0xe0>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80054cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	6262      	str	r2, [r4, #36]	; 0x24
 80054d2:	6822      	ldr	r2, [r4, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80054d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29b      	uxth	r3, r3
 80054e0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80054e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	8523      	strh	r3, [r4, #40]	; 0x28
      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1e3      	bne.n	80054b6 <HAL_I2C_Mem_Write+0x106>
 80054ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0df      	beq.n	80054b6 <HAL_I2C_Mem_Write+0x106>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054f6:	9600      	str	r6, [sp, #0]
 80054f8:	463b      	mov	r3, r7
 80054fa:	2200      	movs	r2, #0
 80054fc:	2180      	movs	r1, #128	; 0x80
 80054fe:	4620      	mov	r0, r4
 8005500:	f7ff fe04 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 8005504:	2800      	cmp	r0, #0
 8005506:	d13b      	bne.n	8005580 <HAL_I2C_Mem_Write+0x1d0>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8005508:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800550a:	b29b      	uxth	r3, r3
 800550c:	2bff      	cmp	r3, #255	; 0xff
 800550e:	d9c6      	bls.n	800549e <HAL_I2C_Mem_Write+0xee>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005510:	22ff      	movs	r2, #255	; 0xff
 8005512:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005514:	2300      	movs	r3, #0
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800551c:	4629      	mov	r1, r5
 800551e:	4620      	mov	r0, r4
 8005520:	f7ff fd72 	bl	8005008 <I2C_TransferConfig>
 8005524:	e7c7      	b.n	80054b6 <HAL_I2C_Mem_Write+0x106>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005526:	4632      	mov	r2, r6
 8005528:	4639      	mov	r1, r7
 800552a:	4620      	mov	r0, r4
 800552c:	f7ff fe9f 	bl	800526e <I2C_WaitOnSTOPFlagUntilTimeout>
 8005530:	b130      	cbz	r0, 8005540 <HAL_I2C_Mem_Write+0x190>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005532:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005534:	2b04      	cmp	r3, #4
 8005536:	d001      	beq.n	800553c <HAL_I2C_Mem_Write+0x18c>
        return HAL_TIMEOUT;
 8005538:	2003      	movs	r0, #3
 800553a:	e018      	b.n	800556e <HAL_I2C_Mem_Write+0x1be>
        return HAL_ERROR;
 800553c:	2001      	movs	r0, #1
 800553e:	e016      	b.n	800556e <HAL_I2C_Mem_Write+0x1be>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	2220      	movs	r2, #32
 8005544:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005546:	6821      	ldr	r1, [r4, #0]
 8005548:	684b      	ldr	r3, [r1, #4]
 800554a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800554e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005552:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005556:	f023 0301 	bic.w	r3, r3, #1
 800555a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800555c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005560:	2300      	movs	r3, #0
 8005562:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005566:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800556a:	e000      	b.n	800556e <HAL_I2C_Mem_Write+0x1be>
    return HAL_BUSY;
 800556c:	2002      	movs	r0, #2
}
 800556e:	b003      	add	sp, #12
 8005570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 8005574:	2001      	movs	r0, #1
 8005576:	e7fa      	b.n	800556e <HAL_I2C_Mem_Write+0x1be>
    __HAL_LOCK(hi2c);
 8005578:	2002      	movs	r0, #2
 800557a:	e7f8      	b.n	800556e <HAL_I2C_Mem_Write+0x1be>
      return HAL_TIMEOUT;
 800557c:	2003      	movs	r0, #3
 800557e:	e7f6      	b.n	800556e <HAL_I2C_Mem_Write+0x1be>
          return HAL_TIMEOUT;
 8005580:	2003      	movs	r0, #3
 8005582:	e7f4      	b.n	800556e <HAL_I2C_Mem_Write+0x1be>

08005584 <HAL_I2C_Mem_Read>:
{
 8005584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005588:	b083      	sub	sp, #12
 800558a:	460d      	mov	r5, r1
 800558c:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8005590:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005592:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005596:	b2c9      	uxtb	r1, r1
 8005598:	2920      	cmp	r1, #32
 800559a:	f040 80cd 	bne.w	8005738 <HAL_I2C_Mem_Read+0x1b4>
 800559e:	4604      	mov	r4, r0
 80055a0:	4690      	mov	r8, r2
 80055a2:	4699      	mov	r9, r3
    if((pData == NULL) || (Size == 0U))
 80055a4:	faba f38a 	clz	r3, sl
 80055a8:	095b      	lsrs	r3, r3, #5
 80055aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055ac:	2a00      	cmp	r2, #0
 80055ae:	bf08      	it	eq
 80055b0:	2301      	moveq	r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f040 80c4 	bne.w	8005740 <HAL_I2C_Mem_Read+0x1bc>
    __HAL_LOCK(hi2c);
 80055b8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80055bc:	2b01      	cmp	r3, #1
 80055be:	f000 80c1 	beq.w	8005744 <HAL_I2C_Mem_Read+0x1c0>
 80055c2:	f04f 0b01 	mov.w	fp, #1
 80055c6:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80055ca:	f7fe fc93 	bl	8003ef4 <HAL_GetTick>
 80055ce:	4606      	mov	r6, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055d0:	9000      	str	r0, [sp, #0]
 80055d2:	2319      	movs	r3, #25
 80055d4:	465a      	mov	r2, fp
 80055d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055da:	4620      	mov	r0, r4
 80055dc:	f7ff fd96 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	f040 80b1 	bne.w	8005748 <HAL_I2C_Mem_Read+0x1c4>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055e6:	2322      	movs	r3, #34	; 0x22
 80055e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055ec:	2340      	movs	r3, #64	; 0x40
 80055ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80055f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055f8:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80055fa:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80055fe:	6363      	str	r3, [r4, #52]	; 0x34
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005600:	9601      	str	r6, [sp, #4]
 8005602:	9700      	str	r7, [sp, #0]
 8005604:	464b      	mov	r3, r9
 8005606:	4642      	mov	r2, r8
 8005608:	4629      	mov	r1, r5
 800560a:	4620      	mov	r0, r4
 800560c:	f7ff fdea 	bl	80051e4 <I2C_RequestMemoryRead>
 8005610:	b160      	cbz	r0, 800562c <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005612:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005614:	2b04      	cmp	r3, #4
 8005616:	d004      	beq.n	8005622 <HAL_I2C_Mem_Read+0x9e>
        __HAL_UNLOCK(hi2c);
 8005618:	2300      	movs	r3, #0
 800561a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800561e:	2003      	movs	r0, #3
 8005620:	e08b      	b.n	800573a <HAL_I2C_Mem_Read+0x1b6>
        __HAL_UNLOCK(hi2c);
 8005622:	2300      	movs	r3, #0
 8005624:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005628:	4658      	mov	r0, fp
 800562a:	e086      	b.n	800573a <HAL_I2C_Mem_Read+0x1b6>
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800562c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800562e:	b29b      	uxth	r3, r3
 8005630:	2bff      	cmp	r3, #255	; 0xff
 8005632:	d90b      	bls.n	800564c <HAL_I2C_Mem_Read+0xc8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005634:	22ff      	movs	r2, #255	; 0xff
 8005636:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005638:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005642:	4629      	mov	r1, r5
 8005644:	4620      	mov	r0, r4
 8005646:	f7ff fcdf 	bl	8005008 <I2C_TransferConfig>
 800564a:	e01d      	b.n	8005688 <HAL_I2C_Mem_Read+0x104>
      hi2c->XferSize = hi2c->XferCount;
 800564c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800564e:	b292      	uxth	r2, r2
 8005650:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005652:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	4629      	mov	r1, r5
 8005660:	4620      	mov	r0, r4
 8005662:	f7ff fcd1 	bl	8005008 <I2C_TransferConfig>
 8005666:	e00f      	b.n	8005688 <HAL_I2C_Mem_Read+0x104>
          hi2c->XferSize = hi2c->XferCount;
 8005668:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800566a:	b292      	uxth	r2, r2
 800566c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800566e:	2300      	movs	r3, #0
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	4629      	mov	r1, r5
 800567a:	4620      	mov	r0, r4
 800567c:	f7ff fcc4 	bl	8005008 <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 8005680:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005682:	b29b      	uxth	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d034      	beq.n	80056f2 <HAL_I2C_Mem_Read+0x16e>
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005688:	9600      	str	r6, [sp, #0]
 800568a:	463b      	mov	r3, r7
 800568c:	2200      	movs	r2, #0
 800568e:	2104      	movs	r1, #4
 8005690:	4620      	mov	r0, r4
 8005692:	f7ff fd3b 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 8005696:	2800      	cmp	r0, #0
 8005698:	d158      	bne.n	800574c <HAL_I2C_Mem_Read+0x1c8>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800569e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056a0:	1c59      	adds	r1, r3, #1
 80056a2:	6261      	str	r1, [r4, #36]	; 0x24
 80056a4:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80056a6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80056a8:	3a01      	subs	r2, #1
 80056aa:	b292      	uxth	r2, r2
 80056ac:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80056ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80056b8:	2a00      	cmp	r2, #0
 80056ba:	d1e1      	bne.n	8005680 <HAL_I2C_Mem_Read+0xfc>
 80056bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0dd      	beq.n	8005680 <HAL_I2C_Mem_Read+0xfc>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056c4:	9600      	str	r6, [sp, #0]
 80056c6:	463b      	mov	r3, r7
 80056c8:	2180      	movs	r1, #128	; 0x80
 80056ca:	4620      	mov	r0, r4
 80056cc:	f7ff fd1e 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 80056d0:	2800      	cmp	r0, #0
 80056d2:	d13d      	bne.n	8005750 <HAL_I2C_Mem_Read+0x1cc>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80056d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2bff      	cmp	r3, #255	; 0xff
 80056da:	d9c5      	bls.n	8005668 <HAL_I2C_Mem_Read+0xe4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056dc:	22ff      	movs	r2, #255	; 0xff
 80056de:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80056e0:	2300      	movs	r3, #0
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056e8:	4629      	mov	r1, r5
 80056ea:	4620      	mov	r0, r4
 80056ec:	f7ff fc8c 	bl	8005008 <I2C_TransferConfig>
 80056f0:	e7c6      	b.n	8005680 <HAL_I2C_Mem_Read+0xfc>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056f2:	4632      	mov	r2, r6
 80056f4:	4639      	mov	r1, r7
 80056f6:	4620      	mov	r0, r4
 80056f8:	f7ff fdb9 	bl	800526e <I2C_WaitOnSTOPFlagUntilTimeout>
 80056fc:	b130      	cbz	r0, 800570c <HAL_I2C_Mem_Read+0x188>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005700:	2b04      	cmp	r3, #4
 8005702:	d001      	beq.n	8005708 <HAL_I2C_Mem_Read+0x184>
        return HAL_TIMEOUT;
 8005704:	2003      	movs	r0, #3
 8005706:	e018      	b.n	800573a <HAL_I2C_Mem_Read+0x1b6>
        return HAL_ERROR;
 8005708:	2001      	movs	r0, #1
 800570a:	e016      	b.n	800573a <HAL_I2C_Mem_Read+0x1b6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	2220      	movs	r2, #32
 8005710:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005712:	6821      	ldr	r1, [r4, #0]
 8005714:	684b      	ldr	r3, [r1, #4]
 8005716:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800571a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800571e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005722:	f023 0301 	bic.w	r3, r3, #1
 8005726:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005728:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800572c:	2300      	movs	r3, #0
 800572e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005732:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005736:	e000      	b.n	800573a <HAL_I2C_Mem_Read+0x1b6>
    return HAL_BUSY;
 8005738:	2002      	movs	r0, #2
}
 800573a:	b003      	add	sp, #12
 800573c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 8005740:	2001      	movs	r0, #1
 8005742:	e7fa      	b.n	800573a <HAL_I2C_Mem_Read+0x1b6>
    __HAL_LOCK(hi2c);
 8005744:	2002      	movs	r0, #2
 8005746:	e7f8      	b.n	800573a <HAL_I2C_Mem_Read+0x1b6>
      return HAL_TIMEOUT;
 8005748:	2003      	movs	r0, #3
 800574a:	e7f6      	b.n	800573a <HAL_I2C_Mem_Read+0x1b6>
        return HAL_TIMEOUT;
 800574c:	2003      	movs	r0, #3
 800574e:	e7f4      	b.n	800573a <HAL_I2C_Mem_Read+0x1b6>
          return HAL_TIMEOUT;
 8005750:	2003      	movs	r0, #3
 8005752:	e7f2      	b.n	800573a <HAL_I2C_Mem_Read+0x1b6>

08005754 <HAL_I2C_GetState>:
  return hi2c->State;
 8005754:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8005758:	4770      	bx	lr

0800575a <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimmension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800575a:	b4f0      	push	{r4, r5, r6, r7}
 800575c:	469c      	mov	ip, r3
  uint32_t i, p, l, code, si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
 800575e:	2700      	movs	r7, #0
  p = 0;
 8005760:	463e      	mov	r6, r7
  for (l = 0; l < 16UL; l++)
 8005762:	e007      	b.n	8005774 <JPEG_Bits_To_SizeCodes+0x1a>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8005764:	b2fc      	uxtb	r4, r7
 8005766:	3401      	adds	r4, #1
 8005768:	558c      	strb	r4, [r1, r6]
      p++;
 800576a:	3601      	adds	r6, #1
      i--;
 800576c:	3d01      	subs	r5, #1
    while (i != 0UL)
 800576e:	2d00      	cmp	r5, #0
 8005770:	d1f8      	bne.n	8005764 <JPEG_Bits_To_SizeCodes+0xa>
  for (l = 0; l < 16UL; l++)
 8005772:	3701      	adds	r7, #1
 8005774:	2f0f      	cmp	r7, #15
 8005776:	d807      	bhi.n	8005788 <JPEG_Bits_To_SizeCodes+0x2e>
    i = (uint32_t)Bits[l];
 8005778:	5dc5      	ldrb	r5, [r0, r7]
    if ((p + i) > 256UL)
 800577a:	1974      	adds	r4, r6, r5
 800577c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8005780:	d9f5      	bls.n	800576e <JPEG_Bits_To_SizeCodes+0x14>
      return HAL_ERROR;
 8005782:	2001      	movs	r0, #1
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 8005784:	bcf0      	pop	{r4, r5, r6, r7}
 8005786:	4770      	bx	lr
  Huffsize[p] = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	558b      	strb	r3, [r1, r6]
  *LastK = p;
 800578c:	f8cc 6000 	str.w	r6, [ip]
  si = Huffsize[0];
 8005790:	780d      	ldrb	r5, [r1, #0]
  code = 0;
 8005792:	461c      	mov	r4, r3
  while (Huffsize[p] != 0U)
 8005794:	e007      	b.n	80057a6 <JPEG_Bits_To_SizeCodes+0x4c>
    if(si > 31UL)
 8005796:	2d1f      	cmp	r5, #31
 8005798:	d810      	bhi.n	80057bc <JPEG_Bits_To_SizeCodes+0x62>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800579a:	2001      	movs	r0, #1
 800579c:	40a8      	lsls	r0, r5
 800579e:	42a0      	cmp	r0, r4
 80057a0:	d90e      	bls.n	80057c0 <JPEG_Bits_To_SizeCodes+0x66>
    code <<= 1;
 80057a2:	0064      	lsls	r4, r4, #1
    si++;
 80057a4:	3501      	adds	r5, #1
  while (Huffsize[p] != 0U)
 80057a6:	5cc8      	ldrb	r0, [r1, r3]
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d0eb      	beq.n	8005784 <JPEG_Bits_To_SizeCodes+0x2a>
    while (((uint32_t) Huffsize[p]) == si)
 80057ac:	5cc8      	ldrb	r0, [r1, r3]
 80057ae:	42a8      	cmp	r0, r5
 80057b0:	d1f1      	bne.n	8005796 <JPEG_Bits_To_SizeCodes+0x3c>
      Huffcode[p] = code;
 80057b2:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 80057b6:	3301      	adds	r3, #1
      code++;
 80057b8:	3401      	adds	r4, #1
 80057ba:	e7f7      	b.n	80057ac <JPEG_Bits_To_SizeCodes+0x52>
      return HAL_ERROR;
 80057bc:	2001      	movs	r0, #1
 80057be:	e7e1      	b.n	8005784 <JPEG_Bits_To_SizeCodes+0x2a>
      return HAL_ERROR;
 80057c0:	2001      	movs	r0, #1
 80057c2:	e7df      	b.n	8005784 <JPEG_Bits_To_SizeCodes+0x2a>

080057c4 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 80057c4:	b570      	push	{r4, r5, r6, lr}
 80057c6:	f5ad 6da2 	sub.w	sp, sp, #1296	; 0x510
 80057ca:	4605      	mov	r5, r0
 80057cc:	460c      	mov	r4, r1
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80057ce:	ab01      	add	r3, sp, #4
 80057d0:	aa02      	add	r2, sp, #8
 80057d2:	f20d 410c 	addw	r1, sp, #1036	; 0x40c
 80057d6:	f7ff ffc0 	bl	800575a <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 80057da:	bb20      	cbnz	r0, 8005826 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x62>
 80057dc:	4603      	mov	r3, r0
 80057de:	e00e      	b.n	80057fe <JPEG_ACHuff_BitsVals_To_SizeCodes+0x3a>
  while (k < lastK)
  {
    l = AC_BitsValsTable->HuffVal[k];
    if (l == 0UL)
    {
      l = 160; /*l = 0x00 EOB code*/
 80057e0:	22a0      	movs	r2, #160	; 0xa0
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80057e2:	a902      	add	r1, sp, #8
 80057e4:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 80057e8:	f102 0128 	add.w	r1, r2, #40	; 0x28
 80057ec:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80057f0:	604e      	str	r6, [r1, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80057f2:	f20d 410c 	addw	r1, sp, #1036	; 0x40c
 80057f6:	5cc9      	ldrb	r1, [r1, r3]
 80057f8:	3901      	subs	r1, #1
 80057fa:	54a1      	strb	r1, [r4, r2]
      k++;
 80057fc:	3301      	adds	r3, #1
  while (k < lastK)
 80057fe:	9a01      	ldr	r2, [sp, #4]
 8005800:	429a      	cmp	r2, r3
 8005802:	d910      	bls.n	8005826 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x62>
    l = AC_BitsValsTable->HuffVal[k];
 8005804:	18ea      	adds	r2, r5, r3
 8005806:	7c12      	ldrb	r2, [r2, #16]
    if (l == 0UL)
 8005808:	2a00      	cmp	r2, #0
 800580a:	d0e9      	beq.n	80057e0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x1c>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800580c:	2af0      	cmp	r2, #240	; 0xf0
 800580e:	d00d      	beq.n	800582c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x68>
      lsb = (l & 0x0FUL);
 8005810:	f002 010f 	and.w	r1, r2, #15
      l = (msb * 10UL) + lsb - 1UL;
 8005814:	0912      	lsrs	r2, r2, #4
 8005816:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800581a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800581e:	3a01      	subs	r2, #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8005820:	2aa1      	cmp	r2, #161	; 0xa1
 8005822:	d9de      	bls.n	80057e2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x1e>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8005824:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8005826:	f50d 6da2 	add.w	sp, sp, #1296	; 0x510
 800582a:	bd70      	pop	{r4, r5, r6, pc}
      l = 161;
 800582c:	22a1      	movs	r2, #161	; 0xa1
 800582e:	e7d8      	b.n	80057e2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x1e>

08005830 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8005830:	b570      	push	{r4, r5, r6, lr}
 8005832:	f5ad 6da2 	sub.w	sp, sp, #1296	; 0x510
 8005836:	4606      	mov	r6, r0
 8005838:	460d      	mov	r5, r1
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800583a:	f20d 530c 	addw	r3, sp, #1292	; 0x50c
 800583e:	aa01      	add	r2, sp, #4
 8005840:	f50d 6181 	add.w	r1, sp, #1032	; 0x408
 8005844:	f7ff ff89 	bl	800575a <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8005848:	b9b8      	cbnz	r0, 800587a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
 800584a:	4603      	mov	r3, r0
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800584c:	f8dd 250c 	ldr.w	r2, [sp, #1292]	; 0x50c
 8005850:	429a      	cmp	r2, r3
 8005852:	d912      	bls.n	800587a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8005854:	18f2      	adds	r2, r6, r3
 8005856:	7c12      	ldrb	r2, [r2, #16]
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8005858:	2a0b      	cmp	r2, #11
 800585a:	d80d      	bhi.n	8005878 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x48>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800585c:	a901      	add	r1, sp, #4
 800585e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005862:	1c94      	adds	r4, r2, #2
 8005864:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8005868:	6061      	str	r1, [r4, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800586a:	f50d 6181 	add.w	r1, sp, #1032	; 0x408
 800586e:	5ccc      	ldrb	r4, [r1, r3]
 8005870:	3c01      	subs	r4, #1
 8005872:	54ac      	strb	r4, [r5, r2]
      k++;
 8005874:	3301      	adds	r3, #1
 8005876:	e7e9      	b.n	800584c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x1c>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8005878:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800587a:	f50d 6da2 	add.w	sp, sp, #1296	; 0x510
 800587e:	bd70      	pop	{r4, r5, r6, pc}

08005880 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8005880:	b530      	push	{r4, r5, lr}
 8005882:	b091      	sub	sp, #68	; 0x44
 8005884:	460b      	mov	r3, r1
  HAL_StatusTypeDef error;
  JPEG_DC_HuffCodeTableTypeDef dcSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8005886:	6804      	ldr	r4, [r0, #0]
 8005888:	f504 61f8 	add.w	r1, r4, #1984	; 0x7c0
 800588c:	4291      	cmp	r1, r2
 800588e:	d006      	beq.n	800589e <JPEG_Set_HuffDC_Mem+0x1e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8005890:	f504 61fc 	add.w	r1, r4, #2016	; 0x7e0
 8005894:	4291      	cmp	r1, r2
 8005896:	d005      	beq.n	80058a4 <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 8005898:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800589a:	b011      	add	sp, #68	; 0x44
 800589c:	bd30      	pop	{r4, r5, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800589e:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
 80058a2:	e001      	b.n	80058a8 <JPEG_Set_HuffDC_Mem+0x28>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80058a4:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
  if (HuffTableDC != NULL)
 80058a8:	b383      	cbz	r3, 800590c <JPEG_Set_HuffDC_Mem+0x8c>
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80058aa:	a901      	add	r1, sp, #4
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff ffbf 	bl	8005830 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 80058b2:	2800      	cmp	r0, #0
 80058b4:	d1f1      	bne.n	800589a <JPEG_Set_HuffDC_Mem+0x1a>
    *addressDef = 0x0FFF0FFF;
 80058b6:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 80058ba:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 80058bc:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
 80058be:	210c      	movs	r1, #12
    while (i > 1UL)
 80058c0:	2901      	cmp	r1, #1
 80058c2:	d9ea      	bls.n	800589a <JPEG_Set_HuffDC_Mem+0x1a>
      i--;
 80058c4:	1e4b      	subs	r3, r1, #1
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80058c6:	aa10      	add	r2, sp, #64	; 0x40
 80058c8:	4413      	add	r3, r2
 80058ca:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80058ce:	021b      	lsls	r3, r3, #8
 80058d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80058d4:	1c4a      	adds	r2, r1, #1
 80058d6:	ad10      	add	r5, sp, #64	; 0x40
 80058d8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80058dc:	f812 2c38 	ldrb.w	r2, [r2, #-56]
 80058e0:	431a      	orrs	r2, r3
      i--;
 80058e2:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80058e4:	462b      	mov	r3, r5
 80058e6:	440b      	add	r3, r1
 80058e8:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80058ec:	021b      	lsls	r3, r3, #8
 80058ee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80058f2:	1c8d      	adds	r5, r1, #2
 80058f4:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80058f8:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 80058fc:	f815 5c38 	ldrb.w	r5, [r5, #-56]
 8005900:	432b      	orrs	r3, r5
      *address = lsb | (msb << 16);
 8005902:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005906:	f844 3d04 	str.w	r3, [r4, #-4]!
 800590a:	e7d9      	b.n	80058c0 <JPEG_Set_HuffDC_Mem+0x40>
  return HAL_OK;
 800590c:	2000      	movs	r0, #0
 800590e:	e7c4      	b.n	800589a <JPEG_Set_HuffDC_Mem+0x1a>

08005910 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	f5ad 7d4c 	sub.w	sp, sp, #816	; 0x330
 8005916:	460b      	mov	r3, r1
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8005918:	6804      	ldr	r4, [r0, #0]
 800591a:	f504 61a0 	add.w	r1, r4, #1280	; 0x500
 800591e:	4291      	cmp	r1, r2
 8005920:	d007      	beq.n	8005932 <JPEG_Set_HuffAC_Mem+0x22>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8005922:	f504 61cc 	add.w	r1, r4, #1632	; 0x660
 8005926:	4291      	cmp	r1, r2
 8005928:	d006      	beq.n	8005938 <JPEG_Set_HuffAC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 800592a:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800592c:	f50d 7d4c 	add.w	sp, sp, #816	; 0x330
 8005930:	bd70      	pop	{r4, r5, r6, pc}
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8005932:	f204 6444 	addw	r4, r4, #1604	; 0x644
 8005936:	e001      	b.n	800593c <JPEG_Set_HuffAC_Mem+0x2c>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8005938:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
  if (HuffTableAC != NULL)
 800593c:	2b00      	cmp	r3, #0
 800593e:	d039      	beq.n	80059b4 <JPEG_Set_HuffAC_Mem+0xa4>
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8005940:	a901      	add	r1, sp, #4
 8005942:	4618      	mov	r0, r3
 8005944:	f7ff ff3e 	bl	80057c4 <JPEG_ACHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 8005948:	2800      	cmp	r0, #0
 800594a:	d1ef      	bne.n	800592c <JPEG_Set_HuffAC_Mem+0x1c>
    addressDef = address;
 800594c:	4623      	mov	r3, r4
    for (i = 0; i < 3UL; i++)
 800594e:	2200      	movs	r2, #0
 8005950:	e004      	b.n	800595c <JPEG_Set_HuffAC_Mem+0x4c>
      *addressDef = 0x0FFF0FFF;
 8005952:	f06f 21f0 	mvn.w	r1, #4026593280	; 0xf000f000
 8005956:	f843 1b04 	str.w	r1, [r3], #4
    for (i = 0; i < 3UL; i++)
 800595a:	3201      	adds	r2, #1
 800595c:	2a02      	cmp	r2, #2
 800595e:	d9f8      	bls.n	8005952 <JPEG_Set_HuffAC_Mem+0x42>
    *addressDef = 0x0FD10FD0;
 8005960:	4a15      	ldr	r2, [pc, #84]	; (80059b8 <JPEG_Set_HuffAC_Mem+0xa8>)
 8005962:	601a      	str	r2, [r3, #0]
    *addressDef = 0x0FD30FD2;
 8005964:	f102 1202 	add.w	r2, r2, #131074	; 0x20002
 8005968:	605a      	str	r2, [r3, #4]
    *addressDef = 0x0FD50FD4;
 800596a:	f102 1202 	add.w	r2, r2, #131074	; 0x20002
 800596e:	609a      	str	r2, [r3, #8]
    *addressDef = 0x0FD70FD6;
 8005970:	f102 1202 	add.w	r2, r2, #131074	; 0x20002
 8005974:	60da      	str	r2, [r3, #12]
    i = JPEG_AC_HUFF_TABLE_SIZE;
 8005976:	21a2      	movs	r1, #162	; 0xa2
    while (i > 1UL)
 8005978:	2901      	cmp	r1, #1
 800597a:	d9d7      	bls.n	800592c <JPEG_Set_HuffAC_Mem+0x1c>
      i--;
 800597c:	1e4b      	subs	r3, r1, #1
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800597e:	ad01      	add	r5, sp, #4
 8005980:	5ceb      	ldrb	r3, [r5, r3]
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005988:	f101 0227 	add.w	r2, r1, #39	; 0x27
 800598c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8005990:	7912      	ldrb	r2, [r2, #4]
 8005992:	431a      	orrs	r2, r3
      i--;
 8005994:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8005996:	5c6b      	ldrb	r3, [r5, r1]
 8005998:	021b      	lsls	r3, r3, #8
 800599a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800599e:	f101 0628 	add.w	r6, r1, #40	; 0x28
 80059a2:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 80059a6:	792d      	ldrb	r5, [r5, #4]
 80059a8:	432b      	orrs	r3, r5
      *address = lsb | (msb << 16);
 80059aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059ae:	f844 3d04 	str.w	r3, [r4, #-4]!
 80059b2:	e7e1      	b.n	8005978 <JPEG_Set_HuffAC_Mem+0x68>
  return HAL_OK;
 80059b4:	2000      	movs	r0, #0
 80059b6:	e7b9      	b.n	800592c <JPEG_Set_HuffAC_Mem+0x1c>
 80059b8:	0fd10fd0 	.word	0x0fd10fd0

080059bc <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 80059bc:	b470      	push	{r4, r5, r6}
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 80059be:	6804      	ldr	r4, [r0, #0]
 80059c0:	f504 745b 	add.w	r4, r4, #876	; 0x36c
  index = 16;
 80059c4:	2210      	movs	r2, #16
  while (index > 3UL)
 80059c6:	e010      	b.n	80059ea <JPEG_Set_Huff_DHTMem+0x2e>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80059c8:	1e53      	subs	r3, r2, #1
 80059ca:	4996      	ldr	r1, [pc, #600]	; (8005c24 <JPEG_Set_Huff_DHTMem+0x268>)
 80059cc:	5ccd      	ldrb	r5, [r1, r3]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80059ce:	1e93      	subs	r3, r2, #2
 80059d0:	5ccb      	ldrb	r3, [r1, r3]
 80059d2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80059d4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80059d8:	1ed5      	subs	r5, r2, #3
 80059da:	5d4d      	ldrb	r5, [r1, r5]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80059dc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 80059e0:	3a04      	subs	r2, #4
 80059e2:	5c89      	ldrb	r1, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80059e4:	430b      	orrs	r3, r1
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80059e6:	f844 3904 	str.w	r3, [r4], #-4
  while (index > 3UL)
 80059ea:	2a03      	cmp	r2, #3
 80059ec:	d8ec      	bhi.n	80059c8 <JPEG_Set_Huff_DHTMem+0xc>
    index -= 4UL;

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 80059ee:	6805      	ldr	r5, [r0, #0]
 80059f0:	f505 755e 	add.w	r5, r5, #888	; 0x378
  index = 12;
 80059f4:	220c      	movs	r2, #12
  while (index > 3UL)
 80059f6:	2a03      	cmp	r2, #3
 80059f8:	d915      	bls.n	8005a26 <JPEG_Set_Huff_DHTMem+0x6a>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80059fa:	1e53      	subs	r3, r2, #1
 80059fc:	4989      	ldr	r1, [pc, #548]	; (8005c24 <JPEG_Set_Huff_DHTMem+0x268>)
 80059fe:	440b      	add	r3, r1
 8005a00:	7c1e      	ldrb	r6, [r3, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005a02:	1e94      	subs	r4, r2, #2
 8005a04:	440c      	add	r4, r1
 8005a06:	7c23      	ldrb	r3, [r4, #16]
 8005a08:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005a0a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005a0e:	1ed4      	subs	r4, r2, #3
 8005a10:	440c      	add	r4, r1
 8005a12:	7c24      	ldrb	r4, [r4, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005a14:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8005a18:	3a04      	subs	r2, #4
 8005a1a:	4411      	add	r1, r2
 8005a1c:	7c09      	ldrb	r1, [r1, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005a1e:	430b      	orrs	r3, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005a20:	f845 3904 	str.w	r3, [r5], #-4
    address--;
    index -= 4UL;
 8005a24:	e7e7      	b.n	80059f6 <JPEG_Set_Huff_DHTMem+0x3a>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8005a26:	6805      	ldr	r5, [r0, #0]
 8005a28:	f505 7562 	add.w	r5, r5, #904	; 0x388
  index = 16;
 8005a2c:	2210      	movs	r2, #16
  while (index > 3UL)
 8005a2e:	e014      	b.n	8005a5a <JPEG_Set_Huff_DHTMem+0x9e>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005a30:	1e53      	subs	r3, r2, #1
 8005a32:	497c      	ldr	r1, [pc, #496]	; (8005c24 <JPEG_Set_Huff_DHTMem+0x268>)
 8005a34:	440b      	add	r3, r1
 8005a36:	7f1e      	ldrb	r6, [r3, #28]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005a38:	1e94      	subs	r4, r2, #2
 8005a3a:	440c      	add	r4, r1
 8005a3c:	7f23      	ldrb	r3, [r4, #28]
 8005a3e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005a40:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005a44:	1ed4      	subs	r4, r2, #3
 8005a46:	440c      	add	r4, r1
 8005a48:	7f24      	ldrb	r4, [r4, #28]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005a4a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8005a4e:	3a04      	subs	r2, #4
 8005a50:	4411      	add	r1, r2
 8005a52:	7f09      	ldrb	r1, [r1, #28]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005a54:	430b      	orrs	r3, r1
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005a56:	f845 3904 	str.w	r3, [r5], #-4
  while (index > 3UL)
 8005a5a:	2a03      	cmp	r2, #3
 8005a5c:	d8e8      	bhi.n	8005a30 <JPEG_Set_Huff_DHTMem+0x74>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8005a5e:	6805      	ldr	r5, [r0, #0]
  value = *address & 0xFFFF0000U;
 8005a60:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
 8005a64:	4a70      	ldr	r2, [pc, #448]	; (8005c28 <JPEG_Set_Huff_DHTMem+0x26c>)
 8005a66:	401a      	ands	r2, r3
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8005a68:	f64f 23f9 	movw	r3, #64249	; 0xfaf9
 8005a6c:	4313      	orrs	r3, r2
  *address = value;
 8005a6e:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8005a72:	f505 6585 	add.w	r5, r5, #1064	; 0x428
  index = 160;
 8005a76:	22a0      	movs	r2, #160	; 0xa0
  while (index > 3UL)
 8005a78:	e018      	b.n	8005aac <JPEG_Set_Huff_DHTMem+0xf0>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005a7a:	1e53      	subs	r3, r2, #1
 8005a7c:	4969      	ldr	r1, [pc, #420]	; (8005c24 <JPEG_Set_Huff_DHTMem+0x268>)
 8005a7e:	440b      	add	r3, r1
 8005a80:	f893 602c 	ldrb.w	r6, [r3, #44]	; 0x2c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005a84:	1e94      	subs	r4, r2, #2
 8005a86:	440c      	add	r4, r1
 8005a88:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005a8c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005a8e:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005a92:	1ed4      	subs	r4, r2, #3
 8005a94:	440c      	add	r4, r1
 8005a96:	f894 402c 	ldrb.w	r4, [r4, #44]	; 0x2c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005a9a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8005a9e:	3a04      	subs	r2, #4
 8005aa0:	4411      	add	r1, r2
 8005aa2:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005aa6:	430b      	orrs	r3, r1
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005aa8:	f845 3904 	str.w	r3, [r5], #-4
  while (index > 3UL)
 8005aac:	2a03      	cmp	r2, #3
 8005aae:	d8e4      	bhi.n	8005a7a <JPEG_Set_Huff_DHTMem+0xbe>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8005ab0:	6802      	ldr	r2, [r0, #0]
  value = *address & 0x0000FFFFU;
 8005ab2:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
 8005ab6:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8005ab8:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
 8005abc:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8005ac0:	6805      	ldr	r5, [r0, #0]
  value = *address & 0xFFFF0000U;
 8005ac2:	f8d5 243c 	ldr.w	r2, [r5, #1084]	; 0x43c
 8005ac6:	4b58      	ldr	r3, [pc, #352]	; (8005c28 <JPEG_Set_Huff_DHTMem+0x26c>)
 8005ac8:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
  *address = value;
 8005aca:	f8c5 343c 	str.w	r3, [r5, #1084]	; 0x43c

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8005ace:	f505 6587 	add.w	r5, r5, #1080	; 0x438
  index = 12;
 8005ad2:	220c      	movs	r2, #12
  while (index > 3UL)
 8005ad4:	e018      	b.n	8005b08 <JPEG_Set_Huff_DHTMem+0x14c>
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005ad6:	1c53      	adds	r3, r2, #1
 8005ad8:	4952      	ldr	r1, [pc, #328]	; (8005c24 <JPEG_Set_Huff_DHTMem+0x268>)
 8005ada:	440b      	add	r3, r1
 8005adc:	f893 40d0 	ldrb.w	r4, [r3, #208]	; 0xd0
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8005ae0:	188b      	adds	r3, r1, r2
 8005ae2:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8005ae6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005ae8:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005aec:	1e54      	subs	r4, r2, #1
 8005aee:	440c      	add	r4, r1
 8005af0:	f894 40d0 	ldrb.w	r4, [r4, #208]	; 0xd0
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8005af4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8005af8:	1e94      	subs	r4, r2, #2
 8005afa:	4421      	add	r1, r4
 8005afc:	f891 10d0 	ldrb.w	r1, [r1, #208]	; 0xd0
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005b00:	430b      	orrs	r3, r1
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005b02:	f845 3904 	str.w	r3, [r5], #-4
    address--;
    index -= 4UL;
 8005b06:	3a04      	subs	r2, #4
  while (index > 3UL)
 8005b08:	2a03      	cmp	r2, #3
 8005b0a:	d8e4      	bhi.n	8005ad6 <JPEG_Set_Huff_DHTMem+0x11a>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8005b0c:	6802      	ldr	r2, [r0, #0]
  value = *address & 0x0000FFFFUL;
 8005b0e:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
 8005b12:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8005b14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
                                                                         16);
  *address = value;
 8005b18:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005b1c:	6804      	ldr	r4, [r0, #0]
  value = *address & 0xFFFF0000UL;
 8005b1e:	f8d4 3448 	ldr.w	r3, [r4, #1096]	; 0x448
 8005b22:	4a41      	ldr	r2, [pc, #260]	; (8005c28 <JPEG_Set_Huff_DHTMem+0x26c>)
 8005b24:	401a      	ands	r2, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8005b26:	f640 330a 	movw	r3, #2826	; 0xb0a
 8005b2a:	4313      	orrs	r3, r2
  *address = value;
 8005b2c:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8005b30:	f204 4444 	addw	r4, r4, #1092	; 0x444
  index = 8;
 8005b34:	2208      	movs	r2, #8
  while (index > 3UL)
 8005b36:	e018      	b.n	8005b6a <JPEG_Set_Huff_DHTMem+0x1ae>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005b38:	1c53      	adds	r3, r2, #1
 8005b3a:	493a      	ldr	r1, [pc, #232]	; (8005c24 <JPEG_Set_Huff_DHTMem+0x268>)
 8005b3c:	440b      	add	r3, r1
 8005b3e:	f893 50e0 	ldrb.w	r5, [r3, #224]	; 0xe0
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8005b42:	188b      	adds	r3, r1, r2
 8005b44:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8005b48:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005b4a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005b4e:	1e55      	subs	r5, r2, #1
 8005b50:	440d      	add	r5, r1
 8005b52:	f895 50e0 	ldrb.w	r5, [r5, #224]	; 0xe0
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8005b56:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8005b5a:	1e95      	subs	r5, r2, #2
 8005b5c:	4429      	add	r1, r5
 8005b5e:	f891 10e0 	ldrb.w	r1, [r1, #224]	; 0xe0
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005b62:	430b      	orrs	r3, r1
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005b64:	f844 3904 	str.w	r3, [r4], #-4
    address--;
    index -= 4UL;
 8005b68:	3a04      	subs	r2, #4
  while (index > 3UL)
 8005b6a:	2a03      	cmp	r2, #3
 8005b6c:	d8e4      	bhi.n	8005b38 <JPEG_Set_Huff_DHTMem+0x17c>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005b6e:	6802      	ldr	r2, [r0, #0]
  value = *address & 0x0000FFFFU;
 8005b70:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
 8005b74:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8005b76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  *address = value;
 8005b7a:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8005b7e:	6805      	ldr	r5, [r0, #0]
  value = *address & 0xFFFF0000U;
 8005b80:	f8d5 3458 	ldr.w	r3, [r5, #1112]	; 0x458
 8005b84:	4a28      	ldr	r2, [pc, #160]	; (8005c28 <JPEG_Set_Huff_DHTMem+0x26c>)
 8005b86:	401a      	ands	r2, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8005b88:	f247 7302 	movw	r3, #30466	; 0x7702
 8005b8c:	4313      	orrs	r3, r2
  *address = value;
 8005b8e:	f8c5 3458 	str.w	r3, [r5, #1112]	; 0x458

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8005b92:	f205 4554 	addw	r5, r5, #1108	; 0x454
  index = 12;
 8005b96:	220c      	movs	r2, #12
  while (index > 3UL)
 8005b98:	e018      	b.n	8005bcc <JPEG_Set_Huff_DHTMem+0x210>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005b9a:	1c53      	adds	r3, r2, #1
 8005b9c:	4921      	ldr	r1, [pc, #132]	; (8005c24 <JPEG_Set_Huff_DHTMem+0x268>)
 8005b9e:	440b      	add	r3, r1
 8005ba0:	f893 40ec 	ldrb.w	r4, [r3, #236]	; 0xec
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8005ba4:	188b      	adds	r3, r1, r2
 8005ba6:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8005baa:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005bac:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005bb0:	1e54      	subs	r4, r2, #1
 8005bb2:	440c      	add	r4, r1
 8005bb4:	f894 40ec 	ldrb.w	r4, [r4, #236]	; 0xec
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8005bb8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8005bbc:	1e94      	subs	r4, r2, #2
 8005bbe:	4421      	add	r1, r4
 8005bc0:	f891 10ec 	ldrb.w	r1, [r1, #236]	; 0xec
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005bc4:	430b      	orrs	r3, r1
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005bc6:	f845 3904 	str.w	r3, [r5], #-4
    address--;
    index -= 4UL;
 8005bca:	3a04      	subs	r2, #4
  while (index > 3UL)
 8005bcc:	2a03      	cmp	r2, #3
 8005bce:	d8e4      	bhi.n	8005b9a <JPEG_Set_Huff_DHTMem+0x1de>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8005bd0:	6802      	ldr	r2, [r0, #0]
  value = *address & 0x0000FFFFUL;
 8005bd2:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 8005bd6:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8005bd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
                                                                         16);
  *address = value;
 8005bdc:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8005be0:	6804      	ldr	r4, [r0, #0]
 8005be2:	f504 649f 	add.w	r4, r4, #1272	; 0x4f8
  index = 160;
 8005be6:	22a0      	movs	r2, #160	; 0xa0
  while (index > 3UL)
 8005be8:	e018      	b.n	8005c1c <JPEG_Set_Huff_DHTMem+0x260>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005bea:	1c53      	adds	r3, r2, #1
 8005bec:	490d      	ldr	r1, [pc, #52]	; (8005c24 <JPEG_Set_Huff_DHTMem+0x268>)
 8005bee:	440b      	add	r3, r1
 8005bf0:	f893 00fc 	ldrb.w	r0, [r3, #252]	; 0xfc
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8005bf4:	188b      	adds	r3, r1, r2
 8005bf6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8005bfa:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005bfc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005c00:	1e50      	subs	r0, r2, #1
 8005c02:	4408      	add	r0, r1
 8005c04:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8005c08:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8005c0c:	1e90      	subs	r0, r2, #2
 8005c0e:	4401      	add	r1, r0
 8005c10:	f891 10fc 	ldrb.w	r1, [r1, #252]	; 0xfc
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005c14:	430b      	orrs	r3, r1
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005c16:	f844 3904 	str.w	r3, [r4], #-4
    address--;
    index -= 4UL;
 8005c1a:	3a04      	subs	r2, #4
  while (index > 3UL)
 8005c1c:	2a03      	cmp	r2, #3
 8005c1e:	d8e4      	bhi.n	8005bea <JPEG_Set_Huff_DHTMem+0x22e>
  }

}
 8005c20:	bc70      	pop	{r4, r5, r6}
 8005c22:	4770      	bx	lr
 8005c24:	08012d30 	.word	0x08012d30
 8005c28:	ffff0000 	.word	0xffff0000

08005c2c <JPEG_Set_HuffEnc_Mem>:
{
 8005c2c:	b510      	push	{r4, lr}
 8005c2e:	4604      	mov	r4, r0
  JPEG_Set_Huff_DHTMem(hjpeg);
 8005c30:	f7ff fec4 	bl	80059bc <JPEG_Set_Huff_DHTMem>
                              (hjpeg->Instance->HUFFENC_AC0));
 8005c34:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8005c36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c3a:	4912      	ldr	r1, [pc, #72]	; (8005c84 <JPEG_Set_HuffEnc_Mem+0x58>)
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f7ff fe67 	bl	8005910 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8005c42:	4603      	mov	r3, r0
 8005c44:	b108      	cbz	r0, 8005c4a <JPEG_Set_HuffEnc_Mem+0x1e>
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	bd10      	pop	{r4, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
 8005c4a:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8005c4c:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
 8005c50:	490d      	ldr	r1, [pc, #52]	; (8005c88 <JPEG_Set_HuffEnc_Mem+0x5c>)
 8005c52:	4620      	mov	r0, r4
 8005c54:	f7ff fe5c 	bl	8005910 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	d1f3      	bne.n	8005c46 <JPEG_Set_HuffEnc_Mem+0x1a>
                              hjpeg->Instance->HUFFENC_DC0);
 8005c5e:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8005c60:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8005c64:	4909      	ldr	r1, [pc, #36]	; (8005c8c <JPEG_Set_HuffEnc_Mem+0x60>)
 8005c66:	4620      	mov	r0, r4
 8005c68:	f7ff fe0a 	bl	8005880 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	d1e9      	bne.n	8005c46 <JPEG_Set_HuffEnc_Mem+0x1a>
                              hjpeg->Instance->HUFFENC_DC1);
 8005c72:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8005c74:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
 8005c78:	4905      	ldr	r1, [pc, #20]	; (8005c90 <JPEG_Set_HuffEnc_Mem+0x64>)
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f7ff fe00 	bl	8005880 <JPEG_Set_HuffDC_Mem>
 8005c80:	4603      	mov	r3, r0
  if (error != HAL_OK)
 8005c82:	e7e0      	b.n	8005c46 <JPEG_Set_HuffEnc_Mem+0x1a>
 8005c84:	08012d4c 	.word	0x08012d4c
 8005c88:	08012e1c 	.word	0x08012e1c
 8005c8c:	08012d30 	.word	0x08012d30
 8005c90:	08012e00 	.word	0x08012e00

08005c94 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8005c94:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005c96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005c9a:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005c9c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d032      	beq.n	8005d0c <JPEG_Init_Process+0x78>
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8005ca6:	6802      	ldr	r2, [r0, #0]
 8005ca8:	6853      	ldr	r3, [r2, #4]
 8005caa:	f023 0308 	bic.w	r3, r3, #8
 8005cae:	6053      	str	r3, [r2, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005cb0:	6802      	ldr	r2, [r0, #0]
 8005cb2:	6813      	ldr	r3, [r2, #0]
 8005cb4:	f023 0301 	bic.w	r3, r3, #1
 8005cb8:	6013      	str	r3, [r2, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005cba:	6802      	ldr	r2, [r0, #0]
 8005cbc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005cbe:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8005cc2:	6313      	str	r3, [r2, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8005cc4:	6802      	ldr	r2, [r0, #0]
 8005cc6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005cc8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8005ccc:	6313      	str	r3, [r2, #48]	; 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8005cce:	6802      	ldr	r2, [r0, #0]
 8005cd0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005cd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005cd6:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8005cd8:	6802      	ldr	r2, [r0, #0]
 8005cda:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ce0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8005ce2:	6802      	ldr	r2, [r0, #0]
 8005ce4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005ce6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005cea:	6393      	str	r3, [r2, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8005cec:	6802      	ldr	r2, [r0, #0]
 8005cee:	6813      	ldr	r3, [r2, #0]
 8005cf0:	f043 0301 	orr.w	r3, r3, #1
 8005cf4:	6013      	str	r3, [r2, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8005cf6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005cf8:	f003 030c 	and.w	r3, r3, #12
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d00b      	beq.n	8005d18 <JPEG_Init_Process+0x84>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8005d00:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005d02:	f003 030c 	and.w	r3, r3, #12
 8005d06:	2b0c      	cmp	r3, #12
 8005d08:	d00c      	beq.n	8005d24 <JPEG_Init_Process+0x90>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005d0a:	4770      	bx	lr
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8005d0c:	6802      	ldr	r2, [r0, #0]
 8005d0e:	6853      	ldr	r3, [r2, #4]
 8005d10:	f043 0308 	orr.w	r3, r3, #8
 8005d14:	6053      	str	r3, [r2, #4]
 8005d16:	e7cb      	b.n	8005cb0 <JPEG_Init_Process+0x1c>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8005d18:	6802      	ldr	r2, [r0, #0]
 8005d1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005d1c:	f043 036e 	orr.w	r3, r3, #110	; 0x6e
 8005d20:	6313      	str	r3, [r2, #48]	; 0x30
 8005d22:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8005d24:	6802      	ldr	r2, [r0, #0]
 8005d26:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005d28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d2c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8005d2e:	e7ec      	b.n	8005d0a <JPEG_Init_Process+0x76>

08005d30 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8005d30:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8005d32:	6807      	ldr	r7, [r0, #0]
 8005d34:	3750      	adds	r7, #80	; 0x50

  i = 0;
 8005d36:	2500      	movs	r5, #0
  uint32_t quality = 0;
 8005d38:	462c      	mov	r4, r5
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8005d3a:	e027      	b.n	8005d8c <JPEG_GetQuality+0x5c>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
      if (quantVal == 1UL)
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8005d3c:	3464      	adds	r4, #100	; 0x64
    for (j = 0; j < 4UL; j++)
 8005d3e:	3101      	adds	r1, #1
 8005d40:	2903      	cmp	r1, #3
 8005d42:	d821      	bhi.n	8005d88 <JPEG_GetQuality+0x58>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8005d44:	00cb      	lsls	r3, r1, #3
 8005d46:	fa26 f303 	lsr.w	r3, r6, r3
 8005d4a:	b2db      	uxtb	r3, r3
      if (quantVal == 1UL)
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d0f5      	beq.n	8005d3c <JPEG_GetQuality+0xc>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8005d50:	2264      	movs	r2, #100	; 0x64
 8005d52:	fb02 f303 	mul.w	r3, r2, r3
 8005d56:	eb05 0e01 	add.w	lr, r5, r1
 8005d5a:	4a10      	ldr	r2, [pc, #64]	; (8005d9c <JPEG_GetQuality+0x6c>)
 8005d5c:	eb02 0c0e 	add.w	ip, r2, lr
 8005d60:	f89c c1a0 	ldrb.w	ip, [ip, #416]	; 0x1a0
 8005d64:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005d66:	f812 200c 	ldrb.w	r2, [r2, ip]
 8005d6a:	fbb3 f3f2 	udiv	r3, r3, r2

        if (scale <= 100UL)
 8005d6e:	2b64      	cmp	r3, #100	; 0x64
 8005d70:	d804      	bhi.n	8005d7c <JPEG_GetQuality+0x4c>
        {
          quality += (200UL - scale) / 2UL;
 8005d72:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8005d76:	eb04 0453 	add.w	r4, r4, r3, lsr #1
 8005d7a:	e7e0      	b.n	8005d3e <JPEG_GetQuality+0xe>
        }
        else
        {
          quality += 5000UL / scale;
 8005d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d84:	441c      	add	r4, r3
 8005d86:	e7da      	b.n	8005d3e <JPEG_GetQuality+0xe>
        }
      }
    }

    i += 4UL;
 8005d88:	3504      	adds	r5, #4
    tableAddress ++;
 8005d8a:	3704      	adds	r7, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8005d8c:	2d3c      	cmp	r5, #60	; 0x3c
 8005d8e:	d802      	bhi.n	8005d96 <JPEG_GetQuality+0x66>
    quantRow = *tableAddress;
 8005d90:	683e      	ldr	r6, [r7, #0]
    for (j = 0; j < 4UL; j++)
 8005d92:	2100      	movs	r1, #0
 8005d94:	e7d4      	b.n	8005d40 <JPEG_GetQuality+0x10>
  }

  return (quality / 64UL);
}
 8005d96:	09a0      	lsrs	r0, r4, #6
 8005d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	08012d30 	.word	0x08012d30

08005da0 <HAL_JPEG_MspInit>:
}
 8005da0:	4770      	bx	lr
	...

08005da4 <HAL_JPEG_Init>:
  if (hjpeg == NULL)
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d04f      	beq.n	8005e48 <HAL_JPEG_Init+0xa4>
{
 8005da8:	b510      	push	{r4, lr}
 8005daa:	4604      	mov	r4, r0
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8005dac:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d041      	beq.n	8005e38 <HAL_JPEG_Init+0x94>
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8005db4:	2302      	movs	r3, #2
 8005db6:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005dbe:	f043 0301 	orr.w	r3, r3, #1
 8005dc2:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005dc4:	6822      	ldr	r2, [r4, #0]
 8005dc6:	6813      	ldr	r3, [r2, #0]
 8005dc8:	f023 0301 	bic.w	r3, r3, #1
 8005dcc:	6013      	str	r3, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005dce:	6822      	ldr	r2, [r4, #0]
 8005dd0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005dd2:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8005dd6:	6313      	str	r3, [r2, #48]	; 0x30
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8005dd8:	6822      	ldr	r2, [r4, #0]
 8005dda:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005ddc:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8005de0:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8005de2:	6822      	ldr	r2, [r4, #0]
 8005de4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005de6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005dea:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8005dec:	6822      	ldr	r2, [r4, #0]
 8005dee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005df4:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8005df6:	6822      	ldr	r2, [r4, #0]
 8005df8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005dfa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005dfe:	6393      	str	r3, [r2, #56]	; 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8005e00:	4b12      	ldr	r3, [pc, #72]	; (8005e4c <HAL_JPEG_Init+0xa8>)
 8005e02:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 8005e06:	63e2      	str	r2, [r4, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8005e08:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8005e0c:	6423      	str	r3, [r4, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	6463      	str	r3, [r4, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 8005e12:	64a3      	str	r3, [r4, #72]	; 0x48
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8005e14:	4620      	mov	r0, r4
 8005e16:	f7ff ff09 	bl	8005c2c <JPEG_Set_HuffEnc_Mem>
 8005e1a:	b990      	cbnz	r0, 8005e42 <HAL_JPEG_Init+0x9e>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8005e1c:	6822      	ldr	r2, [r4, #0]
 8005e1e:	6853      	ldr	r3, [r2, #4]
 8005e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e24:	6053      	str	r3, [r2, #4]
  hjpeg->JpegInCount = 0;
 8005e26:	2300      	movs	r3, #0
 8005e28:	6223      	str	r3, [r4, #32]
  hjpeg->JpegOutCount = 0;
 8005e2a:	6263      	str	r3, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8005e32:	6523      	str	r3, [r4, #80]	; 0x50
  hjpeg->Context = 0;
 8005e34:	6563      	str	r3, [r4, #84]	; 0x54
}
 8005e36:	bd10      	pop	{r4, pc}
    hjpeg->Lock = HAL_UNLOCKED;
 8005e38:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8005e3c:	f7ff ffb0 	bl	8005da0 <HAL_JPEG_MspInit>
 8005e40:	e7b8      	b.n	8005db4 <HAL_JPEG_Init+0x10>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8005e42:	2001      	movs	r0, #1
 8005e44:	6520      	str	r0, [r4, #80]	; 0x50
    return HAL_ERROR;
 8005e46:	e7f6      	b.n	8005e36 <HAL_JPEG_Init+0x92>
    return HAL_ERROR;
 8005e48:	2001      	movs	r0, #1
}
 8005e4a:	4770      	bx	lr
 8005e4c:	08012d30 	.word	0x08012d30

08005e50 <HAL_JPEG_GetInfo>:
{
 8005e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8005e52:	460c      	mov	r4, r1
 8005e54:	fab1 f181 	clz	r1, r1
 8005e58:	0949      	lsrs	r1, r1, #5
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	bf08      	it	eq
 8005e5e:	2101      	moveq	r1, #1
 8005e60:	2900      	cmp	r1, #0
 8005e62:	d15a      	bne.n	8005f1a <HAL_JPEG_GetInfo+0xca>
 8005e64:	4603      	mov	r3, r0
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8005e66:	6801      	ldr	r1, [r0, #0]
 8005e68:	684a      	ldr	r2, [r1, #4]
 8005e6a:	f002 0203 	and.w	r2, r2, #3
 8005e6e:	2a02      	cmp	r2, #2
 8005e70:	d006      	beq.n	8005e80 <HAL_JPEG_GetInfo+0x30>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8005e72:	684a      	ldr	r2, [r1, #4]
 8005e74:	f012 0f03 	tst.w	r2, #3
 8005e78:	d12a      	bne.n	8005ed0 <HAL_JPEG_GetInfo+0x80>
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	6022      	str	r2, [r4, #0]
 8005e7e:	e001      	b.n	8005e84 <HAL_JPEG_GetInfo+0x34>
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8005e80:	2210      	movs	r2, #16
 8005e82:	6022      	str	r2, [r4, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	6852      	ldr	r2, [r2, #4]
 8005e88:	0c12      	lsrs	r2, r2, #16
 8005e8a:	60a2      	str	r2, [r4, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	68d2      	ldr	r2, [r2, #12]
 8005e90:	0c12      	lsrs	r2, r2, #16
 8005e92:	60e2      	str	r2, [r4, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8005e94:	6822      	ldr	r2, [r4, #0]
 8005e96:	2a30      	cmp	r2, #48	; 0x30
 8005e98:	bf18      	it	ne
 8005e9a:	2a10      	cmpne	r2, #16
 8005e9c:	d135      	bne.n	8005f0a <HAL_JPEG_GetInfo+0xba>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8005e9e:	6819      	ldr	r1, [r3, #0]
 8005ea0:	690a      	ldr	r2, [r1, #16]
 8005ea2:	0915      	lsrs	r5, r2, #4
 8005ea4:	f3c2 1203 	ubfx	r2, r2, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8005ea8:	6948      	ldr	r0, [r1, #20]
 8005eaa:	0907      	lsrs	r7, r0, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8005eac:	6989      	ldr	r1, [r1, #24]
 8005eae:	f3c1 1103 	ubfx	r1, r1, #4, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8005eb2:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 8005eb6:	bf0c      	ite	eq
 8005eb8:	2001      	moveq	r0, #1
 8005eba:	2000      	movne	r0, #0
 8005ebc:	2a01      	cmp	r2, #1
 8005ebe:	bf14      	ite	ne
 8005ec0:	2600      	movne	r6, #0
 8005ec2:	f000 0601 	andeq.w	r6, r0, #1
 8005ec6:	b15e      	cbz	r6, 8005ee0 <HAL_JPEG_GetInfo+0x90>
 8005ec8:	b951      	cbnz	r1, 8005ee0 <HAL_JPEG_GetInfo+0x90>
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8005eca:	2202      	movs	r2, #2
 8005ecc:	6062      	str	r2, [r4, #4]
 8005ece:	e01e      	b.n	8005f0e <HAL_JPEG_GetInfo+0xbe>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8005ed0:	684a      	ldr	r2, [r1, #4]
 8005ed2:	f002 0203 	and.w	r2, r2, #3
 8005ed6:	2a03      	cmp	r2, #3
 8005ed8:	d121      	bne.n	8005f1e <HAL_JPEG_GetInfo+0xce>
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8005eda:	2230      	movs	r2, #48	; 0x30
 8005edc:	6022      	str	r2, [r4, #0]
 8005ede:	e7d1      	b.n	8005e84 <HAL_JPEG_GetInfo+0x34>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8005ee0:	433d      	orrs	r5, r7
 8005ee2:	f015 0f0f 	tst.w	r5, #15
 8005ee6:	d103      	bne.n	8005ef0 <HAL_JPEG_GetInfo+0xa0>
 8005ee8:	b911      	cbnz	r1, 8005ef0 <HAL_JPEG_GetInfo+0xa0>
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8005eea:	2200      	movs	r2, #0
 8005eec:	6062      	str	r2, [r4, #4]
 8005eee:	e00e      	b.n	8005f0e <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8005ef0:	2a03      	cmp	r2, #3
 8005ef2:	bf14      	ite	ne
 8005ef4:	2200      	movne	r2, #0
 8005ef6:	f000 0201 	andeq.w	r2, r0, #1
 8005efa:	b11a      	cbz	r2, 8005f04 <HAL_JPEG_GetInfo+0xb4>
 8005efc:	b911      	cbnz	r1, 8005f04 <HAL_JPEG_GetInfo+0xb4>
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8005efe:	2201      	movs	r2, #1
 8005f00:	6062      	str	r2, [r4, #4]
 8005f02:	e004      	b.n	8005f0e <HAL_JPEG_GetInfo+0xbe>
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8005f04:	2200      	movs	r2, #0
 8005f06:	6062      	str	r2, [r4, #4]
 8005f08:	e001      	b.n	8005f0e <HAL_JPEG_GetInfo+0xbe>
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	6062      	str	r2, [r4, #4]
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff ff0e 	bl	8005d30 <JPEG_GetQuality>
 8005f14:	6120      	str	r0, [r4, #16]
  return HAL_OK;
 8005f16:	2000      	movs	r0, #0
}
 8005f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005f1a:	2001      	movs	r0, #1
 8005f1c:	e7fc      	b.n	8005f18 <HAL_JPEG_GetInfo+0xc8>
    return HAL_ERROR;
 8005f1e:	2001      	movs	r0, #1
 8005f20:	e7fa      	b.n	8005f18 <HAL_JPEG_GetInfo+0xc8>

08005f22 <HAL_JPEG_Decode_IT>:
{
 8005f22:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8005f24:	460d      	mov	r5, r1
 8005f26:	fab1 f181 	clz	r1, r1
 8005f2a:	0949      	lsrs	r1, r1, #5
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	bf08      	it	eq
 8005f30:	2101      	moveq	r1, #1
 8005f32:	bb61      	cbnz	r1, 8005f8e <HAL_JPEG_Decode_IT+0x6c>
 8005f34:	b36b      	cbz	r3, 8005f92 <HAL_JPEG_Decode_IT+0x70>
  __HAL_LOCK(hjpeg);
 8005f36:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 8005f3a:	2901      	cmp	r1, #1
 8005f3c:	d02b      	beq.n	8005f96 <HAL_JPEG_Decode_IT+0x74>
 8005f3e:	2101      	movs	r1, #1
 8005f40:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8005f44:	f890 104d 	ldrb.w	r1, [r0, #77]	; 0x4d
 8005f48:	b2c9      	uxtb	r1, r1
 8005f4a:	2901      	cmp	r1, #1
 8005f4c:	d004      	beq.n	8005f58 <HAL_JPEG_Decode_IT+0x36>
    __HAL_UNLOCK(hjpeg);
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    return HAL_BUSY;
 8005f54:	2002      	movs	r0, #2
 8005f56:	e01b      	b.n	8005f90 <HAL_JPEG_Decode_IT+0x6e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8005f58:	2104      	movs	r1, #4
 8005f5a:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8005f5e:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8005f60:	f021 010f 	bic.w	r1, r1, #15
 8005f64:	6541      	str	r1, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_IT);
 8005f66:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8005f68:	f041 010a 	orr.w	r1, r1, #10
 8005f6c:	6541      	str	r1, [r0, #84]	; 0x54
    hjpeg->pJpegInBuffPtr = pDataIn;
 8005f6e:	6185      	str	r5, [r0, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8005f70:	61c3      	str	r3, [r0, #28]
    hjpeg->InDataLength = InDataLength - (InDataLength % 4UL);    /*In Data length must be multiple of 4 Bytes (1 word)*/
 8005f72:	f022 0203 	bic.w	r2, r2, #3
 8005f76:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength - (OutDataLength % 4UL); /*Out Data length must be multiple of 4 Bytes (1 word)*/
 8005f78:	9b04      	ldr	r3, [sp, #16]
 8005f7a:	f023 0303 	bic.w	r3, r3, #3
 8005f7e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->JpegInCount = 0;
 8005f80:	2500      	movs	r5, #0
 8005f82:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
 8005f84:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
 8005f86:	f7ff fe85 	bl	8005c94 <JPEG_Init_Process>
  return HAL_OK;
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	e000      	b.n	8005f90 <HAL_JPEG_Decode_IT+0x6e>
    return HAL_ERROR;
 8005f8e:	2001      	movs	r0, #1
}
 8005f90:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005f92:	2001      	movs	r0, #1
 8005f94:	e7fc      	b.n	8005f90 <HAL_JPEG_Decode_IT+0x6e>
  __HAL_LOCK(hjpeg);
 8005f96:	2002      	movs	r0, #2
 8005f98:	e7fa      	b.n	8005f90 <HAL_JPEG_Decode_IT+0x6e>

08005f9a <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8005f9a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005f9c:	f003 030c 	and.w	r3, r3, #12
 8005fa0:	2b0c      	cmp	r3, #12
 8005fa2:	d006      	beq.n	8005fb2 <HAL_JPEG_Pause+0x18>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8005fa4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005fa6:	f003 030c 	and.w	r3, r3, #12
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d01b      	beq.n	8005fe6 <HAL_JPEG_Pause+0x4c>
}
 8005fae:	2000      	movs	r0, #0
 8005fb0:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8005fb2:	f011 0301 	ands.w	r3, r1, #1
 8005fb6:	d005      	beq.n	8005fc4 <HAL_JPEG_Pause+0x2a>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8005fb8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005fba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fbe:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 8005fc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8005fc4:	f011 0f02 	tst.w	r1, #2
 8005fc8:	d005      	beq.n	8005fd6 <HAL_JPEG_Pause+0x3c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8005fca:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fd0:	6542      	str	r2, [r0, #84]	; 0x54
      mask |= JPEG_DMA_ODMA;
 8005fd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    JPEG_DISABLE_DMA(hjpeg, mask);
 8005fd6:	6801      	ldr	r1, [r0, #0]
 8005fd8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005fda:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005fde:	ea22 0303 	bic.w	r3, r2, r3
 8005fe2:	630b      	str	r3, [r1, #48]	; 0x30
 8005fe4:	e7e3      	b.n	8005fae <HAL_JPEG_Pause+0x14>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8005fe6:	f011 0201 	ands.w	r2, r1, #1
 8005fea:	d004      	beq.n	8005ff6 <HAL_JPEG_Pause+0x5c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8005fec:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005fee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ff2:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8005ff4:	2206      	movs	r2, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8005ff6:	f011 0f02 	tst.w	r1, #2
 8005ffa:	d005      	beq.n	8006008 <HAL_JPEG_Pause+0x6e>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8005ffc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005ffe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006002:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8006004:	f042 0228 	orr.w	r2, r2, #40	; 0x28
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8006008:	6801      	ldr	r1, [r0, #0]
 800600a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800600c:	ea23 0302 	bic.w	r3, r3, r2
 8006010:	630b      	str	r3, [r1, #48]	; 0x30
 8006012:	e7cc      	b.n	8005fae <HAL_JPEG_Pause+0x14>

08006014 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8006014:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8006016:	6282      	str	r2, [r0, #40]	; 0x28
}
 8006018:	4770      	bx	lr

0800601a <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800601a:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800601c:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 800601e:	4770      	bx	lr

08006020 <HAL_JPEG_EncodeCpltCallback>:
}
 8006020:	4770      	bx	lr

08006022 <JPEG_ReadInputData>:
{
 8006022:	b570      	push	{r4, r5, r6, lr}
 8006024:	4604      	mov	r4, r0
 8006026:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8006028:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800602a:	b103      	cbz	r3, 800602e <JPEG_ReadInputData+0xc>
 800602c:	b991      	cbnz	r1, 8006054 <JPEG_ReadInputData+0x32>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800602e:	2101      	movs	r1, #1
 8006030:	4620      	mov	r0, r4
 8006032:	f7ff ffb2 	bl	8005f9a <HAL_JPEG_Pause>
  uint32_t nbBytes = 0, nBwords, index, Dataword, inputCount;
 8006036:	2200      	movs	r2, #0
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nbBytes > 0UL))
 8006038:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800603a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800603e:	d15d      	bne.n	80060fc <JPEG_ReadInputData+0xda>
 8006040:	2a00      	cmp	r2, #0
 8006042:	d05b      	beq.n	80060fc <JPEG_ReadInputData+0xda>
    nBwords = nbBytes / 4UL;
 8006044:	0896      	lsrs	r6, r2, #2
    if (nBwords >= nbRequestWords)
 8006046:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 800604a:	d91b      	bls.n	8006084 <JPEG_ReadInputData+0x62>
      if (nBwords > 0UL)
 800604c:	2a03      	cmp	r2, #3
 800604e:	d82f      	bhi.n	80060b0 <JPEG_ReadInputData+0x8e>
        Dataword = 0;
 8006050:	461d      	mov	r5, r3
 8006052:	e04f      	b.n	80060f4 <JPEG_ReadInputData+0xd2>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8006054:	6a02      	ldr	r2, [r0, #32]
 8006056:	4293      	cmp	r3, r2
 8006058:	d902      	bls.n	8006060 <JPEG_ReadInputData+0x3e>
    nbBytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800605a:	6a02      	ldr	r2, [r0, #32]
 800605c:	1a9a      	subs	r2, r3, r2
 800605e:	e7eb      	b.n	8006038 <JPEG_ReadInputData+0x16>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8006060:	6a02      	ldr	r2, [r0, #32]
 8006062:	4293      	cmp	r3, r2
 8006064:	d001      	beq.n	800606a <JPEG_ReadInputData+0x48>
  uint32_t nbBytes = 0, nBwords, index, Dataword, inputCount;
 8006066:	2200      	movs	r2, #0
 8006068:	e7e6      	b.n	8006038 <JPEG_ReadInputData+0x16>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800606a:	6a01      	ldr	r1, [r0, #32]
 800606c:	f007 fc54 	bl	800d918 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8006070:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006072:	2b04      	cmp	r3, #4
 8006074:	d902      	bls.n	800607c <JPEG_ReadInputData+0x5a>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8006076:	f023 0303 	bic.w	r3, r3, #3
 800607a:	62a3      	str	r3, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	6223      	str	r3, [r4, #32]
    nbBytes = hjpeg->InDataLength;
 8006080:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006082:	e7d9      	b.n	8006038 <JPEG_ReadInputData+0x16>
      for (index = 0; index < nbRequestWords; index++)
 8006084:	42ab      	cmp	r3, r5
 8006086:	d239      	bcs.n	80060fc <JPEG_ReadInputData+0xda>
        inputCount = hjpeg->JpegInCount;
 8006088:	6a21      	ldr	r1, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 800608a:	69a0      	ldr	r0, [r4, #24]
 800608c:	5c42      	ldrb	r2, [r0, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 800608e:	4408      	add	r0, r1
 8006090:	7841      	ldrb	r1, [r0, #1]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8006092:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 8006096:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8006098:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 3UL])) << 24));
 800609c:	78c0      	ldrb	r0, [r0, #3]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 800609e:	6821      	ldr	r1, [r4, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 80060a0:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 80060a4:	640a      	str	r2, [r1, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
 80060a6:	6a22      	ldr	r2, [r4, #32]
 80060a8:	3204      	adds	r2, #4
 80060aa:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80060ac:	3301      	adds	r3, #1
 80060ae:	e7e9      	b.n	8006084 <JPEG_ReadInputData+0x62>
        for (index = 0; index < nBwords; index++)
 80060b0:	42b3      	cmp	r3, r6
 80060b2:	d223      	bcs.n	80060fc <JPEG_ReadInputData+0xda>
          inputCount = hjpeg->JpegInCount;
 80060b4:	6a20      	ldr	r0, [r4, #32]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 80060b6:	69a1      	ldr	r1, [r4, #24]
 80060b8:	5c0a      	ldrb	r2, [r1, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 80060ba:	4401      	add	r1, r0
 80060bc:	7848      	ldrb	r0, [r1, #1]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 80060be:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 80060c2:	7888      	ldrb	r0, [r1, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 80060c4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 3UL])) << 24));
 80060c8:	78c8      	ldrb	r0, [r1, #3]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 80060ca:	6821      	ldr	r1, [r4, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 80060cc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 80060d0:	640a      	str	r2, [r1, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 80060d2:	6a22      	ldr	r2, [r4, #32]
 80060d4:	3204      	adds	r2, #4
 80060d6:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nBwords; index++)
 80060d8:	3301      	adds	r3, #1
 80060da:	e7e9      	b.n	80060b0 <JPEG_ReadInputData+0x8e>
          Dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80060dc:	69a0      	ldr	r0, [r4, #24]
 80060de:	6a21      	ldr	r1, [r4, #32]
 80060e0:	5c41      	ldrb	r1, [r0, r1]
 80060e2:	f003 0003 	and.w	r0, r3, #3
 80060e6:	00c0      	lsls	r0, r0, #3
 80060e8:	4081      	lsls	r1, r0
 80060ea:	430d      	orrs	r5, r1
          hjpeg->JpegInCount++;
 80060ec:	6a21      	ldr	r1, [r4, #32]
 80060ee:	3101      	adds	r1, #1
 80060f0:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nbBytes; index++)
 80060f2:	3301      	adds	r3, #1
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d8f1      	bhi.n	80060dc <JPEG_ReadInputData+0xba>
        hjpeg->Instance->DIR = Dataword;
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	641d      	str	r5, [r3, #64]	; 0x40
}
 80060fc:	bd70      	pop	{r4, r5, r6, pc}

080060fe <JPEG_StoreOutputData>:
{
 80060fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006100:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8006102:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8006104:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006106:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800610a:	4298      	cmp	r0, r3
 800610c:	d223      	bcs.n	8006156 <JPEG_StoreOutputData+0x58>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800610e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006110:	4298      	cmp	r0, r3
 8006112:	d942      	bls.n	800619a <JPEG_StoreOutputData+0x9c>
    nBwords = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8006114:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006116:	1ac0      	subs	r0, r0, r3
 8006118:	0880      	lsrs	r0, r0, #2
    for (index = 0; index < nBwords; index++)
 800611a:	2100      	movs	r1, #0
 800611c:	4281      	cmp	r1, r0
 800611e:	d245      	bcs.n	80061ac <JPEG_StoreOutputData+0xae>
      dataword = hjpeg->Instance->DOR;
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006124:	69e5      	ldr	r5, [r4, #28]
 8006126:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006128:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800612a:	69e5      	ldr	r5, [r4, #28]
 800612c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800612e:	3201      	adds	r2, #1
 8006130:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8006134:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006136:	69e5      	ldr	r5, [r4, #28]
 8006138:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800613a:	3202      	adds	r2, #2
 800613c:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8006140:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006142:	69e5      	ldr	r5, [r4, #28]
 8006144:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006146:	3203      	adds	r2, #3
 8006148:	0e1b      	lsrs	r3, r3, #24
 800614a:	54ab      	strb	r3, [r5, r2]
      hjpeg->JpegOutCount += 4UL;
 800614c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800614e:	3304      	adds	r3, #4
 8006150:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nBwords; index++)
 8006152:	3101      	adds	r1, #1
 8006154:	e7e2      	b.n	800611c <JPEG_StoreOutputData+0x1e>
    for (index = 0; index < nbOutputWords; index++)
 8006156:	2000      	movs	r0, #0
 8006158:	4288      	cmp	r0, r1
 800615a:	d21a      	bcs.n	8006192 <JPEG_StoreOutputData+0x94>
      dataword = hjpeg->Instance->DOR;
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006160:	69e5      	ldr	r5, [r4, #28]
 8006162:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006164:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8006166:	69e5      	ldr	r5, [r4, #28]
 8006168:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800616a:	3201      	adds	r2, #1
 800616c:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8006170:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006172:	69e5      	ldr	r5, [r4, #28]
 8006174:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006176:	3202      	adds	r2, #2
 8006178:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800617c:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800617e:	69e5      	ldr	r5, [r4, #28]
 8006180:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006182:	3203      	adds	r2, #3
 8006184:	0e1b      	lsrs	r3, r3, #24
 8006186:	54ab      	strb	r3, [r5, r2]
      hjpeg->JpegOutCount += 4UL;
 8006188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800618a:	3304      	adds	r3, #4
 800618c:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 800618e:	3001      	adds	r0, #1
 8006190:	e7e2      	b.n	8006158 <JPEG_StoreOutputData+0x5a>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8006192:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006196:	429a      	cmp	r2, r3
 8006198:	d000      	beq.n	800619c <JPEG_StoreOutputData+0x9e>
}
 800619a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800619c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800619e:	69e1      	ldr	r1, [r4, #28]
 80061a0:	4620      	mov	r0, r4
 80061a2:	f007 fbcb 	bl	800d93c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	6263      	str	r3, [r4, #36]	; 0x24
 80061aa:	e7f6      	b.n	800619a <JPEG_StoreOutputData+0x9c>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80061ac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80061ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061b0:	429f      	cmp	r7, r3
 80061b2:	d006      	beq.n	80061c2 <JPEG_StoreOutputData+0xc4>
      nbBytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80061b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80061b6:	eba7 0c05 	sub.w	ip, r7, r5
      dataword = hjpeg->Instance->DOR;
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	6c5e      	ldr	r6, [r3, #68]	; 0x44
      for (index = 0; index < nbBytes; index++)
 80061be:	2200      	movs	r2, #0
 80061c0:	e013      	b.n	80061ea <JPEG_StoreOutputData+0xec>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80061c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80061c4:	69e1      	ldr	r1, [r4, #28]
 80061c6:	4620      	mov	r0, r4
 80061c8:	f007 fbb8 	bl	800d93c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80061cc:	2300      	movs	r3, #0
 80061ce:	6263      	str	r3, [r4, #36]	; 0x24
 80061d0:	e7e3      	b.n	800619a <JPEG_StoreOutputData+0x9c>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80061d2:	f002 0303 	and.w	r3, r2, #3
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	fa26 f303 	lsr.w	r3, r6, r3
 80061dc:	69e0      	ldr	r0, [r4, #28]
 80061de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80061e0:	5443      	strb	r3, [r0, r1]
        hjpeg->JpegOutCount++;
 80061e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061e4:	3301      	adds	r3, #1
 80061e6:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nbBytes; index++)
 80061e8:	3201      	adds	r2, #1
 80061ea:	4562      	cmp	r2, ip
 80061ec:	d3f1      	bcc.n	80061d2 <JPEG_StoreOutputData+0xd4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80061ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80061f0:	69e1      	ldr	r1, [r4, #28]
 80061f2:	4620      	mov	r0, r4
 80061f4:	f007 fba2 	bl	800d93c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	6263      	str	r3, [r4, #36]	; 0x24
      nbBytes = 4UL - nbBytes;
 80061fc:	1bed      	subs	r5, r5, r7
 80061fe:	3504      	adds	r5, #4
      for (index = nbBytes; index < 4UL; index++)
 8006200:	e009      	b.n	8006216 <JPEG_StoreOutputData+0x118>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8006202:	00eb      	lsls	r3, r5, #3
 8006204:	fa26 f303 	lsr.w	r3, r6, r3
 8006208:	69e1      	ldr	r1, [r4, #28]
 800620a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800620c:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
 800620e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006210:	3301      	adds	r3, #1
 8006212:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nbBytes; index < 4UL; index++)
 8006214:	3501      	adds	r5, #1
 8006216:	2d03      	cmp	r5, #3
 8006218:	d9f3      	bls.n	8006202 <JPEG_StoreOutputData+0x104>
 800621a:	e7be      	b.n	800619a <JPEG_StoreOutputData+0x9c>

0800621c <JPEG_Process>:
{
 800621c:	b538      	push	{r3, r4, r5, lr}
 800621e:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006220:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006222:	f003 0303 	and.w	r3, r3, #3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d021      	beq.n	800626e <JPEG_Process+0x52>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800622a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800622c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006230:	d108      	bne.n	8006244 <JPEG_Process+0x28>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006236:	f012 0f02 	tst.w	r2, #2
 800623a:	d132      	bne.n	80062a2 <JPEG_Process+0x86>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800623c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800623e:	f013 0f04 	tst.w	r3, #4
 8006242:	d133      	bne.n	80062ac <JPEG_Process+0x90>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8006244:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006246:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800624a:	d108      	bne.n	800625e <JPEG_Process+0x42>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006250:	f012 0f08 	tst.w	r2, #8
 8006254:	d12f      	bne.n	80062b6 <JPEG_Process+0x9a>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8006256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006258:	f013 0f10 	tst.w	r3, #16
 800625c:	d130      	bne.n	80062c0 <JPEG_Process+0xa4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800625e:	6822      	ldr	r2, [r4, #0]
 8006260:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8006262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006266:	2b20      	cmp	r3, #32
 8006268:	d02f      	beq.n	80062ca <JPEG_Process+0xae>
  return JPEG_PROCESS_ONGOING;
 800626a:	2000      	movs	r0, #0
}
 800626c:	bd38      	pop	{r3, r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800626e:	6803      	ldr	r3, [r0, #0]
 8006270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006272:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006276:	d0d8      	beq.n	800622a <JPEG_Process+0xe>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8006278:	1d05      	adds	r5, r0, #4
 800627a:	4629      	mov	r1, r5
 800627c:	f7ff fde8 	bl	8005e50 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8006280:	2300      	movs	r3, #0
 8006282:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8006284:	4629      	mov	r1, r5
 8006286:	4620      	mov	r0, r4
 8006288:	f007 fb6a 	bl	800d960 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800628c:	6822      	ldr	r2, [r4, #0]
 800628e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006294:	6313      	str	r3, [r2, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8006296:	6822      	ldr	r2, [r4, #0]
 8006298:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800629a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800629e:	6393      	str	r3, [r2, #56]	; 0x38
 80062a0:	e7c3      	b.n	800622a <JPEG_Process+0xe>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80062a2:	2104      	movs	r1, #4
 80062a4:	4620      	mov	r0, r4
 80062a6:	f7ff febc 	bl	8006022 <JPEG_ReadInputData>
 80062aa:	e7cb      	b.n	8006244 <JPEG_Process+0x28>
      JPEG_ReadInputData(hjpeg, 1);
 80062ac:	2101      	movs	r1, #1
 80062ae:	4620      	mov	r0, r4
 80062b0:	f7ff feb7 	bl	8006022 <JPEG_ReadInputData>
 80062b4:	e7c6      	b.n	8006244 <JPEG_Process+0x28>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80062b6:	2104      	movs	r1, #4
 80062b8:	4620      	mov	r0, r4
 80062ba:	f7ff ff20 	bl	80060fe <JPEG_StoreOutputData>
 80062be:	e7ce      	b.n	800625e <JPEG_Process+0x42>
      JPEG_StoreOutputData(hjpeg, 1);
 80062c0:	2101      	movs	r1, #1
 80062c2:	4620      	mov	r0, r4
 80062c4:	f7ff ff1b 	bl	80060fe <JPEG_StoreOutputData>
 80062c8:	e7c9      	b.n	800625e <JPEG_Process+0x42>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80062ca:	6813      	ldr	r3, [r2, #0]
 80062cc:	f023 0301 	bic.w	r3, r3, #1
 80062d0:	6013      	str	r3, [r2, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80062d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80062d4:	f003 030c 	and.w	r3, r3, #12
 80062d8:	2b08      	cmp	r3, #8
 80062da:	d01a      	beq.n	8006312 <JPEG_Process+0xf6>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80062dc:	6822      	ldr	r2, [r4, #0]
 80062de:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80062e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80062e4:	6393      	str	r3, [r2, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
 80062e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062e8:	b9cb      	cbnz	r3, 800631e <JPEG_Process+0x102>
    tmpContext = hjpeg->Context;
 80062ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80062ec:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80062ee:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
 80062f2:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 80062f4:	2200      	movs	r2, #0
 80062f6:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80062fa:	2201      	movs	r2, #1
 80062fc:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006300:	f003 0303 	and.w	r3, r3, #3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d012      	beq.n	800632e <JPEG_Process+0x112>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8006308:	4620      	mov	r0, r4
 800630a:	f7ff fe89 	bl	8006020 <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800630e:	2001      	movs	r0, #1
 8006310:	e7ac      	b.n	800626c <JPEG_Process+0x50>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8006312:	6822      	ldr	r2, [r4, #0]
 8006314:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006316:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 800631a:	6313      	str	r3, [r2, #48]	; 0x30
 800631c:	e7de      	b.n	80062dc <JPEG_Process+0xc0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800631e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006320:	69e1      	ldr	r1, [r4, #28]
 8006322:	4620      	mov	r0, r4
 8006324:	f007 fb0a 	bl	800d93c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8006328:	2300      	movs	r3, #0
 800632a:	6263      	str	r3, [r4, #36]	; 0x24
 800632c:	e7dd      	b.n	80062ea <JPEG_Process+0xce>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800632e:	4620      	mov	r0, r4
 8006330:	f007 fb10 	bl	800d954 <HAL_JPEG_DecodeCpltCallback>
 8006334:	e7eb      	b.n	800630e <JPEG_Process+0xf2>

08006336 <JPEG_DMA_PollResidualData>:
{
 8006336:	b538      	push	{r3, r4, r5, lr}
 8006338:	4604      	mov	r4, r0
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800633a:	2510      	movs	r5, #16
 800633c:	e007      	b.n	800634e <JPEG_DMA_PollResidualData+0x18>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800633e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006340:	69e1      	ldr	r1, [r4, #28]
 8006342:	4620      	mov	r0, r4
 8006344:	f007 fafa 	bl	800d93c <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 8006348:	2300      	movs	r3, #0
 800634a:	6263      	str	r3, [r4, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800634c:	3d01      	subs	r5, #1
 800634e:	b32d      	cbz	r5, 800639c <JPEG_DMA_PollResidualData+0x66>
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8006350:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006352:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006356:	d1f9      	bne.n	800634c <JPEG_DMA_PollResidualData+0x16>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800635c:	f012 0f10 	tst.w	r2, #16
 8006360:	d0f4      	beq.n	800634c <JPEG_DMA_PollResidualData+0x16>
        dataOut = hjpeg->Instance->DOR;
 8006362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8006364:	69e1      	ldr	r1, [r4, #28]
 8006366:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006368:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800636a:	69e1      	ldr	r1, [r4, #28]
 800636c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800636e:	3201      	adds	r2, #1
 8006370:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8006374:	5488      	strb	r0, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8006376:	69e1      	ldr	r1, [r4, #28]
 8006378:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800637a:	3202      	adds	r2, #2
 800637c:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8006380:	5488      	strb	r0, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8006382:	69e1      	ldr	r1, [r4, #28]
 8006384:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006386:	3203      	adds	r2, #3
 8006388:	0e1b      	lsrs	r3, r3, #24
 800638a:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount += 4UL;
 800638c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800638e:	3304      	adds	r3, #4
 8006390:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8006392:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006394:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006396:	429a      	cmp	r2, r3
 8006398:	d1d8      	bne.n	800634c <JPEG_DMA_PollResidualData+0x16>
 800639a:	e7d0      	b.n	800633e <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
 800639c:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063a2:	f012 0f10 	tst.w	r2, #16
 80063a6:	d002      	beq.n	80063ae <JPEG_DMA_PollResidualData+0x78>
 80063a8:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 80063ac:	d117      	bne.n	80063de <JPEG_DMA_PollResidualData+0xa8>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	f022 0201 	bic.w	r2, r2, #1
 80063b4:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 80063b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063b8:	b993      	cbnz	r3, 80063e0 <JPEG_DMA_PollResidualData+0xaa>
    tmpContext = hjpeg->Context;
 80063ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80063bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80063be:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
 80063c2:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 80063c4:	2200      	movs	r2, #0
 80063c6:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80063ca:	2201      	movs	r2, #1
 80063cc:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80063d0:	f003 0303 	and.w	r3, r3, #3
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d00b      	beq.n	80063f0 <JPEG_DMA_PollResidualData+0xba>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80063d8:	4620      	mov	r0, r4
 80063da:	f7ff fe21 	bl	8006020 <HAL_JPEG_EncodeCpltCallback>
}
 80063de:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80063e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80063e2:	69e1      	ldr	r1, [r4, #28]
 80063e4:	4620      	mov	r0, r4
 80063e6:	f007 faa9 	bl	800d93c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80063ea:	2300      	movs	r3, #0
 80063ec:	6263      	str	r3, [r4, #36]	; 0x24
 80063ee:	e7e4      	b.n	80063ba <JPEG_DMA_PollResidualData+0x84>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80063f0:	4620      	mov	r0, r4
 80063f2:	f007 faaf 	bl	800d954 <HAL_JPEG_DecodeCpltCallback>
 80063f6:	e7f2      	b.n	80063de <JPEG_DMA_PollResidualData+0xa8>

080063f8 <JPEG_DMA_EndProcess>:
{
 80063f8:	b510      	push	{r4, lr}
 80063fa:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 80063fc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80063fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6859      	ldr	r1, [r3, #4]
 8006404:	4b21      	ldr	r3, [pc, #132]	; (800648c <JPEG_DMA_EndProcess+0x94>)
 8006406:	ea03 0381 	and.w	r3, r3, r1, lsl #2
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	6243      	str	r3, [r0, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800640e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006410:	429a      	cmp	r2, r3
 8006412:	d01e      	beq.n	8006452 <JPEG_DMA_EndProcess+0x5a>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006418:	f013 0f10 	tst.w	r3, #16
 800641c:	d12c      	bne.n	8006478 <JPEG_DMA_EndProcess+0x80>
    if (hjpeg->JpegOutCount > 0UL)
 800641e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006420:	b9f3      	cbnz	r3, 8006460 <JPEG_DMA_EndProcess+0x68>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006422:	6822      	ldr	r2, [r4, #0]
 8006424:	6813      	ldr	r3, [r2, #0]
 8006426:	f023 0301 	bic.w	r3, r3, #1
 800642a:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800642c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800642e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006430:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
 8006434:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 8006436:	2200      	movs	r2, #0
 8006438:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800643c:	2201      	movs	r2, #1
 800643e:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006442:	f003 0303 	and.w	r3, r3, #3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d012      	beq.n	8006470 <JPEG_DMA_EndProcess+0x78>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800644a:	4620      	mov	r0, r4
 800644c:	f7ff fde8 	bl	8006020 <HAL_JPEG_EncodeCpltCallback>
 8006450:	e016      	b.n	8006480 <JPEG_DMA_EndProcess+0x88>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006452:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006454:	69c1      	ldr	r1, [r0, #28]
 8006456:	f007 fa71 	bl	800d93c <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	6263      	str	r3, [r4, #36]	; 0x24
 800645e:	e7d9      	b.n	8006414 <JPEG_DMA_EndProcess+0x1c>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006460:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006462:	69e1      	ldr	r1, [r4, #28]
 8006464:	4620      	mov	r0, r4
 8006466:	f007 fa69 	bl	800d93c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800646a:	2300      	movs	r3, #0
 800646c:	6263      	str	r3, [r4, #36]	; 0x24
 800646e:	e7d8      	b.n	8006422 <JPEG_DMA_EndProcess+0x2a>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8006470:	4620      	mov	r0, r4
 8006472:	f007 fa6f 	bl	800d954 <HAL_JPEG_DecodeCpltCallback>
 8006476:	e003      	b.n	8006480 <JPEG_DMA_EndProcess+0x88>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8006478:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800647a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800647e:	d000      	beq.n	8006482 <JPEG_DMA_EndProcess+0x8a>
}
 8006480:	bd10      	pop	{r4, pc}
    JPEG_DMA_PollResidualData(hjpeg);
 8006482:	4620      	mov	r0, r4
 8006484:	f7ff ff57 	bl	8006336 <JPEG_DMA_PollResidualData>
}
 8006488:	e7fa      	b.n	8006480 <JPEG_DMA_EndProcess+0x88>
 800648a:	bf00      	nop
 800648c:	0003fffc 	.word	0x0003fffc

08006490 <JPEG_DMA_ContinueProcess>:
{
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006494:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	2b02      	cmp	r3, #2
 800649c:	d02b      	beq.n	80064f6 <JPEG_DMA_ContinueProcess+0x66>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064a2:	f012 0f20 	tst.w	r2, #32
 80064a6:	d025      	beq.n	80064f4 <JPEG_DMA_ContinueProcess+0x64>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 80064a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064aa:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80064ae:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80064b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80064b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064b6:	6563      	str	r3, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	6813      	ldr	r3, [r2, #0]
 80064bc:	f023 0301 	bic.w	r3, r3, #1
 80064c0:	6013      	str	r3, [r2, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80064c2:	6822      	ldr	r2, [r4, #0]
 80064c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80064c6:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 80064ca:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80064cc:	6822      	ldr	r2, [r4, #0]
 80064ce:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80064d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80064d4:	6393      	str	r3, [r2, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 80064d6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80064d8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d023      	beq.n	800652a <JPEG_DMA_ContinueProcess+0x9a>
    if (hjpeg->hdmaout->State == HAL_DMA_STATE_BUSY)
 80064e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80064e4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d020      	beq.n	8006530 <JPEG_DMA_ContinueProcess+0xa0>
      JPEG_DMA_EndProcess(hjpeg);
 80064ee:	4620      	mov	r0, r4
 80064f0:	f7ff ff82 	bl	80063f8 <JPEG_DMA_EndProcess>
}
 80064f4:	bd38      	pop	{r3, r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80064f6:	6803      	ldr	r3, [r0, #0]
 80064f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80064fe:	d0ce      	beq.n	800649e <JPEG_DMA_ContinueProcess+0xe>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8006500:	1d05      	adds	r5, r0, #4
 8006502:	4629      	mov	r1, r5
 8006504:	f7ff fca4 	bl	8005e50 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800650c:	4629      	mov	r1, r5
 800650e:	4620      	mov	r0, r4
 8006510:	f007 fa26 	bl	800d960 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8006514:	6822      	ldr	r2, [r4, #0]
 8006516:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800651c:	6313      	str	r3, [r2, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800651e:	6822      	ldr	r2, [r4, #0]
 8006520:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006526:	6393      	str	r3, [r2, #56]	; 0x38
 8006528:	e7b9      	b.n	800649e <JPEG_DMA_ContinueProcess+0xe>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmain);
 800652a:	f7fd fea6 	bl	800427a <HAL_DMA_Abort_IT>
 800652e:	e7d8      	b.n	80064e2 <JPEG_DMA_ContinueProcess+0x52>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmaout);
 8006530:	f7fd fea3 	bl	800427a <HAL_DMA_Abort_IT>
 8006534:	e7de      	b.n	80064f4 <JPEG_DMA_ContinueProcess+0x64>

08006536 <HAL_JPEG_IRQHandler>:
{
 8006536:	b508      	push	{r3, lr}
  switch (hjpeg->State)
 8006538:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 800653c:	3b03      	subs	r3, #3
 800653e:	2b01      	cmp	r3, #1
 8006540:	d900      	bls.n	8006544 <HAL_JPEG_IRQHandler+0xe>
}
 8006542:	bd08      	pop	{r3, pc}
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8006544:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006546:	f003 030c 	and.w	r3, r3, #12
 800654a:	2b08      	cmp	r3, #8
 800654c:	d007      	beq.n	800655e <HAL_JPEG_IRQHandler+0x28>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800654e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006550:	f003 030c 	and.w	r3, r3, #12
 8006554:	2b0c      	cmp	r3, #12
 8006556:	d1f4      	bne.n	8006542 <HAL_JPEG_IRQHandler+0xc>
        JPEG_DMA_ContinueProcess(hjpeg);
 8006558:	f7ff ff9a 	bl	8006490 <JPEG_DMA_ContinueProcess>
}
 800655c:	e7f1      	b.n	8006542 <HAL_JPEG_IRQHandler+0xc>
        (void) JPEG_Process(hjpeg);
 800655e:	f7ff fe5d 	bl	800621c <JPEG_Process>
 8006562:	e7ee      	b.n	8006542 <HAL_JPEG_IRQHandler+0xc>

08006564 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006564:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006566:	684e      	ldr	r6, [r1, #4]
 8006568:	6805      	ldr	r5, [r0, #0]
 800656a:	68eb      	ldr	r3, [r5, #12]
 800656c:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8006570:	441e      	add	r6, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006572:	01d4      	lsls	r4, r2, #7
 8006574:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8006578:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800657c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006580:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006584:	680b      	ldr	r3, [r1, #0]
 8006586:	6805      	ldr	r5, [r0, #0]
 8006588:	68ef      	ldr	r7, [r5, #12]
 800658a:	f3c7 470b 	ubfx	r7, r7, #16, #12
 800658e:	443b      	add	r3, r7
 8006590:	3301      	adds	r3, #1
 8006592:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8006596:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800659a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800659e:	68ce      	ldr	r6, [r1, #12]
 80065a0:	6805      	ldr	r5, [r0, #0]
 80065a2:	68eb      	ldr	r3, [r5, #12]
 80065a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065a8:	441e      	add	r6, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80065aa:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 80065ae:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80065b2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80065b6:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80065ba:	688b      	ldr	r3, [r1, #8]
 80065bc:	6805      	ldr	r5, [r0, #0]
 80065be:	68ef      	ldr	r7, [r5, #12]
 80065c0:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80065c4:	443b      	add	r3, r7
 80065c6:	3301      	adds	r3, #1
 80065c8:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 80065cc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80065d0:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80065d4:	6803      	ldr	r3, [r0, #0]
 80065d6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80065da:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
 80065de:	f025 0507 	bic.w	r5, r5, #7
 80065e2:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80065e6:	6803      	ldr	r3, [r0, #0]
 80065e8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80065ec:	690d      	ldr	r5, [r1, #16]
 80065ee:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80065f2:	f891 e031 	ldrb.w	lr, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80065f6:	f891 c032 	ldrb.w	ip, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80065fa:	698f      	ldr	r7, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80065fc:	6806      	ldr	r6, [r0, #0]
 80065fe:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
 8006602:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
 8006606:	2500      	movs	r5, #0
 8006608:	f8c6 509c 	str.w	r5, [r6, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800660c:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8006610:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8006614:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8006618:	6806      	ldr	r6, [r0, #0]
 800661a:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
 800661e:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8006622:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006626:	6803      	ldr	r3, [r0, #0]
 8006628:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800662c:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8006630:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
 8006634:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006638:	6803      	ldr	r3, [r0, #0]
 800663a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800663e:	694e      	ldr	r6, [r1, #20]
 8006640:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006644:	6803      	ldr	r3, [r0, #0]
 8006646:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800664a:	f8d3 70a0 	ldr.w	r7, [r3, #160]	; 0xa0
 800664e:	4e2e      	ldr	r6, [pc, #184]	; (8006708 <LTDC_SetConfig+0x1a4>)
 8006650:	403e      	ands	r6, r7
 8006652:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006656:	69ce      	ldr	r6, [r1, #28]
 8006658:	6a0f      	ldr	r7, [r1, #32]
 800665a:	6803      	ldr	r3, [r0, #0]
 800665c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006660:	433e      	orrs	r6, r7
 8006662:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006666:	6803      	ldr	r3, [r0, #0]
 8006668:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800666c:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
 8006670:	f8c3 50ac 	str.w	r5, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006674:	6803      	ldr	r3, [r0, #0]
 8006676:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 800667a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800667c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006680:	690b      	ldr	r3, [r1, #16]
 8006682:	b16b      	cbz	r3, 80066a0 <LTDC_SetConfig+0x13c>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006684:	2b01      	cmp	r3, #1
 8006686:	d039      	beq.n	80066fc <LTDC_SetConfig+0x198>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006688:	2b02      	cmp	r3, #2
 800668a:	bf18      	it	ne
 800668c:	2b04      	cmpne	r3, #4
 800668e:	d037      	beq.n	8006700 <LTDC_SetConfig+0x19c>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006690:	2b03      	cmp	r3, #3
 8006692:	d037      	beq.n	8006704 <LTDC_SetConfig+0x1a0>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006694:	2b07      	cmp	r3, #7
 8006696:	d001      	beq.n	800669c <LTDC_SetConfig+0x138>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8006698:	2301      	movs	r3, #1
 800669a:	e002      	b.n	80066a2 <LTDC_SetConfig+0x13e>
    tmp = 2U;
 800669c:	2302      	movs	r3, #2
 800669e:	e000      	b.n	80066a2 <LTDC_SetConfig+0x13e>
    tmp = 4U;
 80066a0:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80066a2:	6802      	ldr	r2, [r0, #0]
 80066a4:	4422      	add	r2, r4
 80066a6:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
 80066aa:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80066ae:	f8c2 50b0 	str.w	r5, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80066b2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80066b4:	fb03 f502 	mul.w	r5, r3, r2
 80066b8:	684a      	ldr	r2, [r1, #4]
 80066ba:	680e      	ldr	r6, [r1, #0]
 80066bc:	1b92      	subs	r2, r2, r6
 80066be:	fb03 f302 	mul.w	r3, r3, r2
 80066c2:	3303      	adds	r3, #3
 80066c4:	6802      	ldr	r2, [r0, #0]
 80066c6:	4422      	add	r2, r4
 80066c8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80066cc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80066d0:	6803      	ldr	r3, [r0, #0]
 80066d2:	4423      	add	r3, r4
 80066d4:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 80066d8:	4a0c      	ldr	r2, [pc, #48]	; (800670c <LTDC_SetConfig+0x1a8>)
 80066da:	402a      	ands	r2, r5
 80066dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80066e0:	6803      	ldr	r3, [r0, #0]
 80066e2:	4423      	add	r3, r4
 80066e4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80066e6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80066ea:	6803      	ldr	r3, [r0, #0]
 80066ec:	441c      	add	r4, r3
 80066ee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80066f2:	f043 0301 	orr.w	r3, r3, #1
 80066f6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 80066fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e7d0      	b.n	80066a2 <LTDC_SetConfig+0x13e>
    tmp = 2U;
 8006700:	2302      	movs	r3, #2
 8006702:	e7ce      	b.n	80066a2 <LTDC_SetConfig+0x13e>
 8006704:	2302      	movs	r3, #2
 8006706:	e7cc      	b.n	80066a2 <LTDC_SetConfig+0x13e>
 8006708:	fffff8f8 	.word	0xfffff8f8
 800670c:	fffff800 	.word	0xfffff800

08006710 <HAL_LTDC_MspInit>:
}
 8006710:	4770      	bx	lr
	...

08006714 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8006714:	2800      	cmp	r0, #0
 8006716:	d072      	beq.n	80067fe <HAL_LTDC_Init+0xea>
{
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800671c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d067      	beq.n	80067f4 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006724:	2302      	movs	r3, #2
 8006726:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800672a:	6822      	ldr	r2, [r4, #0]
 800672c:	6993      	ldr	r3, [r2, #24]
 800672e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006732:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006734:	6821      	ldr	r1, [r4, #0]
 8006736:	698a      	ldr	r2, [r1, #24]
 8006738:	6863      	ldr	r3, [r4, #4]
 800673a:	68a0      	ldr	r0, [r4, #8]
 800673c:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800673e:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006740:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006742:	6920      	ldr	r0, [r4, #16]
 8006744:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006746:	4313      	orrs	r3, r2
 8006748:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800674a:	6821      	ldr	r1, [r4, #0]
 800674c:	688a      	ldr	r2, [r1, #8]
 800674e:	4b2d      	ldr	r3, [pc, #180]	; (8006804 <HAL_LTDC_Init+0xf0>)
 8006750:	401a      	ands	r2, r3
 8006752:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006754:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006756:	6820      	ldr	r0, [r4, #0]
 8006758:	6882      	ldr	r2, [r0, #8]
 800675a:	69a1      	ldr	r1, [r4, #24]
 800675c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8006760:	430a      	orrs	r2, r1
 8006762:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006764:	6821      	ldr	r1, [r4, #0]
 8006766:	68ca      	ldr	r2, [r1, #12]
 8006768:	401a      	ands	r2, r3
 800676a:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800676c:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800676e:	6820      	ldr	r0, [r4, #0]
 8006770:	68c2      	ldr	r2, [r0, #12]
 8006772:	6a21      	ldr	r1, [r4, #32]
 8006774:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8006778:	430a      	orrs	r2, r1
 800677a:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800677c:	6821      	ldr	r1, [r4, #0]
 800677e:	690a      	ldr	r2, [r1, #16]
 8006780:	401a      	ands	r2, r3
 8006782:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006784:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006786:	6820      	ldr	r0, [r4, #0]
 8006788:	6902      	ldr	r2, [r0, #16]
 800678a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800678c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8006790:	430a      	orrs	r2, r1
 8006792:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006794:	6821      	ldr	r1, [r4, #0]
 8006796:	694a      	ldr	r2, [r1, #20]
 8006798:	4013      	ands	r3, r2
 800679a:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800679c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800679e:	6821      	ldr	r1, [r4, #0]
 80067a0:	694b      	ldr	r3, [r1, #20]
 80067a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80067a4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80067a8:	4313      	orrs	r3, r2
 80067aa:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80067ac:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80067b0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80067b4:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80067b6:	6821      	ldr	r1, [r4, #0]
 80067b8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80067ba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80067be:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80067c0:	6821      	ldr	r1, [r4, #0]
 80067c2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80067c4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80067c8:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80067cc:	4303      	orrs	r3, r0
 80067ce:	4313      	orrs	r3, r2
 80067d0:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80067d2:	6822      	ldr	r2, [r4, #0]
 80067d4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80067d6:	f043 0306 	orr.w	r3, r3, #6
 80067da:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80067dc:	6822      	ldr	r2, [r4, #0]
 80067de:	6993      	ldr	r3, [r2, #24]
 80067e0:	f043 0301 	orr.w	r3, r3, #1
 80067e4:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80067e6:	2000      	movs	r0, #0
 80067e8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80067ec:	2301      	movs	r3, #1
 80067ee:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 80067f4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80067f8:	f7ff ff8a 	bl	8006710 <HAL_LTDC_MspInit>
 80067fc:	e792      	b.n	8006724 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 80067fe:	2001      	movs	r0, #1
}
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	f000f800 	.word	0xf000f800

08006808 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8006808:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800680c:	2b01      	cmp	r3, #1
 800680e:	d027      	beq.n	8006860 <HAL_LTDC_ConfigLayer+0x58>
{
 8006810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006814:	4606      	mov	r6, r0
 8006816:	460f      	mov	r7, r1
 8006818:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800681a:	f04f 0801 	mov.w	r8, #1
 800681e:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006822:	2302      	movs	r3, #2
 8006824:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006828:	2434      	movs	r4, #52	; 0x34
 800682a:	fb04 0402 	mla	r4, r4, r2, r0
 800682e:	3438      	adds	r4, #56	; 0x38
 8006830:	460d      	mov	r5, r1
 8006832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800683a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800683c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800683e:	682b      	ldr	r3, [r5, #0]
 8006840:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006842:	4662      	mov	r2, ip
 8006844:	4639      	mov	r1, r7
 8006846:	4630      	mov	r0, r6
 8006848:	f7ff fe8c 	bl	8006564 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800684c:	6833      	ldr	r3, [r6, #0]
 800684e:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006852:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006856:	2000      	movs	r0, #0
 8006858:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800685c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8006860:	2002      	movs	r0, #2
}
 8006862:	4770      	bx	lr

08006864 <HAL_LTDCEx_StructInitFromVideoConfig>:

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8006864:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8006866:	b10b      	cbz	r3, 800686c <HAL_LTDCEx_StructInitFromVideoConfig+0x8>
 8006868:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800686c:	60c3      	str	r3, [r0, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800686e:	6a0b      	ldr	r3, [r1, #32]
 8006870:	bb0b      	cbnz	r3, 80068b6 <HAL_LTDCEx_StructInitFromVideoConfig+0x52>
 8006872:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006876:	6083      	str	r3, [r0, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8006878:	69cb      	ldr	r3, [r1, #28]
 800687a:	b9f3      	cbnz	r3, 80068ba <HAL_LTDCEx_StructInitFromVideoConfig+0x56>
 800687c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006880:	6043      	str	r3, [r0, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8006882:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006884:	3b01      	subs	r3, #1
 8006886:	6183      	str	r3, [r0, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8006888:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800688a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 800688c:	4413      	add	r3, r2
 800688e:	3b01      	subs	r3, #1
 8006890:	6203      	str	r3, [r0, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8006892:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006894:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8006896:	4413      	add	r3, r2
 8006898:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800689a:	4413      	add	r3, r2
 800689c:	3b01      	subs	r3, #1
 800689e:	6283      	str	r3, [r0, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80068a0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80068a2:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80068a4:	4413      	add	r3, r2
 80068a6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80068a8:	4413      	add	r3, r2
 80068aa:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80068ac:	4413      	add	r3, r2
 80068ae:	3b01      	subs	r3, #1
 80068b0:	6303      	str	r3, [r0, #48]	; 0x30

  return HAL_OK;
}
 80068b2:	2000      	movs	r0, #0
 80068b4:	4770      	bx	lr
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80068b6:	2300      	movs	r3, #0
 80068b8:	e7dd      	b.n	8006876 <HAL_LTDCEx_StructInitFromVideoConfig+0x12>
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	e7e0      	b.n	8006880 <HAL_LTDCEx_StructInitFromVideoConfig+0x1c>

080068be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80068be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c2:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068c4:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 80068c8:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80068cc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80068d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d855      	bhi.n	8006984 <PCD_WriteEmptyTxFifo+0xc6>
 80068d8:	4607      	mov	r7, r0
 80068da:	460c      	mov	r4, r1
 80068dc:	46c1      	mov	r9, r8
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 80068de:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 80068e0:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 80068e4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80068e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d300      	bcc.n	80068f0 <PCD_WriteEmptyTxFifo+0x32>
  len = ep->xfer_len - ep->xfer_count;
 80068ee:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 80068f0:	f102 0a03 	add.w	sl, r2, #3
 80068f4:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068f8:	e015      	b.n	8006926 <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 80068fa:	f106 0a03 	add.w	sl, r6, #3
 80068fe:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006902:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8006906:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800690a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800690c:	7c3b      	ldrb	r3, [r7, #16]
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	b2b3      	uxth	r3, r6
 8006912:	b2e2      	uxtb	r2, r4
 8006914:	4640      	mov	r0, r8
 8006916:	f004 f95d 	bl	800abd4 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 800691a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800691c:	4433      	add	r3, r6
 800691e:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8006920:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8006922:	441e      	add	r6, r3
 8006924:	656e      	str	r6, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006926:	eb09 1344 	add.w	r3, r9, r4, lsl #5
 800692a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	b29b      	uxth	r3, r3
 8006932:	4553      	cmp	r3, sl
 8006934:	d312      	bcc.n	800695c <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006936:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800693a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800693e:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8006940:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006942:	4299      	cmp	r1, r3
 8006944:	d20a      	bcs.n	800695c <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006946:	b14b      	cbz	r3, 800695c <PCD_WriteEmptyTxFifo+0x9e>
    len = ep->xfer_len - ep->xfer_count;
 8006948:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 800694a:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800694e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8006952:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8006954:	429e      	cmp	r6, r3
 8006956:	d3d0      	bcc.n	80068fa <PCD_WriteEmptyTxFifo+0x3c>
    len = ep->xfer_len - ep->xfer_count;
 8006958:	461e      	mov	r6, r3
 800695a:	e7ce      	b.n	80068fa <PCD_WriteEmptyTxFifo+0x3c>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800695c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 8006960:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8006964:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006968:	429a      	cmp	r2, r3
 800696a:	d80f      	bhi.n	800698c <PCD_WriteEmptyTxFifo+0xce>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800696c:	f004 040f 	and.w	r4, r4, #15
 8006970:	2301      	movs	r3, #1
 8006972:	40a3      	lsls	r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006974:	f8d8 4834 	ldr.w	r4, [r8, #2100]	; 0x834
 8006978:	ea24 0403 	bic.w	r4, r4, r3
 800697c:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 8006980:	2000      	movs	r0, #0
 8006982:	e000      	b.n	8006986 <PCD_WriteEmptyTxFifo+0xc8>
    return HAL_ERROR;
 8006984:	2001      	movs	r0, #1
}
 8006986:	b002      	add	sp, #8
 8006988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 800698c:	2000      	movs	r0, #0
 800698e:	e7fa      	b.n	8006986 <PCD_WriteEmptyTxFifo+0xc8>

08006990 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006990:	b570      	push	{r4, r5, r6, lr}
 8006992:	4604      	mov	r4, r0
 8006994:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006996:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006998:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800699a:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800699e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a2:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 80069a4:	6921      	ldr	r1, [r4, #16]
 80069a6:	2901      	cmp	r1, #1
 80069a8:	d011      	beq.n	80069ce <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80069aa:	4935      	ldr	r1, [pc, #212]	; (8006a80 <PCD_EP_OutXfrComplete_int+0xf0>)
 80069ac:	428e      	cmp	r6, r1
 80069ae:	d050      	beq.n	8006a52 <PCD_EP_OutXfrComplete_int+0xc2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80069b0:	b93d      	cbnz	r5, 80069c2 <PCD_EP_OutXfrComplete_int+0x32>
 80069b2:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80069b6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d058      	beq.n	8006a74 <PCD_EP_OutXfrComplete_int+0xe4>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069c2:	b2e9      	uxtb	r1, r5
 80069c4:	4620      	mov	r0, r4
 80069c6:	f007 f899 	bl	800dafc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 80069ca:	2000      	movs	r0, #0
 80069cc:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80069ce:	f012 0f08 	tst.w	r2, #8
 80069d2:	d009      	beq.n	80069e8 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069d4:	492b      	ldr	r1, [pc, #172]	; (8006a84 <PCD_EP_OutXfrComplete_int+0xf4>)
 80069d6:	428e      	cmp	r6, r1
 80069d8:	d9f7      	bls.n	80069ca <PCD_EP_OutXfrComplete_int+0x3a>
 80069da:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80069de:	d0f4      	beq.n	80069ca <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80069e4:	609a      	str	r2, [r3, #8]
 80069e6:	e7f0      	b.n	80069ca <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80069e8:	f012 0f20 	tst.w	r2, #32
 80069ec:	d002      	beq.n	80069f4 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80069ee:	2220      	movs	r2, #32
 80069f0:	609a      	str	r2, [r3, #8]
 80069f2:	e7ea      	b.n	80069ca <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80069f4:	f012 0f28 	tst.w	r2, #40	; 0x28
 80069f8:	d1e7      	bne.n	80069ca <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069fa:	4922      	ldr	r1, [pc, #136]	; (8006a84 <PCD_EP_OutXfrComplete_int+0xf4>)
 80069fc:	428e      	cmp	r6, r1
 80069fe:	d906      	bls.n	8006a0e <PCD_EP_OutXfrComplete_int+0x7e>
 8006a00:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8006a04:	d003      	beq.n	8006a0e <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a06:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006a0a:	609a      	str	r2, [r3, #8]
 8006a0c:	e7dd      	b.n	80069ca <PCD_EP_OutXfrComplete_int+0x3a>
          hpcd->OUT_ep[epnum].maxpacket -
 8006a0e:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8006a12:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006a16:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006a20:	1ac9      	subs	r1, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006a22:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006a26:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8006a2a:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8006a2e:	440b      	add	r3, r1
 8006a30:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006a34:	b915      	cbnz	r5, 8006a3c <PCD_EP_OutXfrComplete_int+0xac>
 8006a36:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8006a3a:	b123      	cbz	r3, 8006a46 <PCD_EP_OutXfrComplete_int+0xb6>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a3c:	b2e9      	uxtb	r1, r5
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f007 f85c 	bl	800dafc <HAL_PCD_DataOutStageCallback>
 8006a44:	e7c1      	b.n	80069ca <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a46:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	f004 faa2 	bl	800af94 <USB_EP0_OutStart>
 8006a50:	e7f4      	b.n	8006a3c <PCD_EP_OutXfrComplete_int+0xac>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006a52:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8006a56:	d003      	beq.n	8006a60 <PCD_EP_OutXfrComplete_int+0xd0>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006a5c:	609a      	str	r2, [r3, #8]
 8006a5e:	e7b4      	b.n	80069ca <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006a60:	f012 0f20 	tst.w	r2, #32
 8006a64:	d001      	beq.n	8006a6a <PCD_EP_OutXfrComplete_int+0xda>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a66:	2220      	movs	r2, #32
 8006a68:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a6a:	b2e9      	uxtb	r1, r5
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f007 f845 	bl	800dafc <HAL_PCD_DataOutStageCallback>
 8006a72:	e7aa      	b.n	80069ca <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006a74:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8006a78:	2100      	movs	r1, #0
 8006a7a:	f004 fa8b 	bl	800af94 <USB_EP0_OutStart>
 8006a7e:	e7a0      	b.n	80069c2 <PCD_EP_OutXfrComplete_int+0x32>
 8006a80:	4f54310a 	.word	0x4f54310a
 8006a84:	4f54300a 	.word	0x4f54300a

08006a88 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a8c:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a8e:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a90:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006a94:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a98:	4a0e      	ldr	r2, [pc, #56]	; (8006ad4 <PCD_EP_OutSetupPacket_int+0x4c>)
 8006a9a:	4295      	cmp	r5, r2
 8006a9c:	d907      	bls.n	8006aae <PCD_EP_OutSetupPacket_int+0x26>
 8006a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa2:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8006aa6:	d002      	beq.n	8006aae <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006aa8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006aac:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f007 f81c 	bl	800daec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006ab4:	4b07      	ldr	r3, [pc, #28]	; (8006ad4 <PCD_EP_OutSetupPacket_int+0x4c>)
 8006ab6:	429d      	cmp	r5, r3
 8006ab8:	d902      	bls.n	8006ac0 <PCD_EP_OutSetupPacket_int+0x38>
 8006aba:	6923      	ldr	r3, [r4, #16]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d001      	beq.n	8006ac4 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006ac4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8006ac8:	2101      	movs	r1, #1
 8006aca:	6820      	ldr	r0, [r4, #0]
 8006acc:	f004 fa62 	bl	800af94 <USB_EP0_OutStart>
 8006ad0:	e7f6      	b.n	8006ac0 <PCD_EP_OutSetupPacket_int+0x38>
 8006ad2:	bf00      	nop
 8006ad4:	4f54300a 	.word	0x4f54300a

08006ad8 <HAL_PCD_IRQHandler>:
{
 8006ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006adc:	b083      	sub	sp, #12
 8006ade:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ae0:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	f004 fa41 	bl	800af6a <USB_GetMode>
 8006ae8:	b110      	cbz	r0, 8006af0 <HAL_PCD_IRQHandler+0x18>
}
 8006aea:	b003      	add	sp, #12
 8006aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af0:	462f      	mov	r7, r5
 8006af2:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006af4:	6820      	ldr	r0, [r4, #0]
 8006af6:	f004 fa07 	bl	800af08 <USB_ReadInterrupts>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d0f5      	beq.n	8006aea <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006afe:	6820      	ldr	r0, [r4, #0]
 8006b00:	f004 fa02 	bl	800af08 <USB_ReadInterrupts>
 8006b04:	f010 0f02 	tst.w	r0, #2
 8006b08:	d004      	beq.n	8006b14 <HAL_PCD_IRQHandler+0x3c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006b0a:	6822      	ldr	r2, [r4, #0]
 8006b0c:	6953      	ldr	r3, [r2, #20]
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006b14:	6820      	ldr	r0, [r4, #0]
 8006b16:	f004 f9f7 	bl	800af08 <USB_ReadInterrupts>
 8006b1a:	f010 0f10 	tst.w	r0, #16
 8006b1e:	d015      	beq.n	8006b4c <HAL_PCD_IRQHandler+0x74>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b20:	6822      	ldr	r2, [r4, #0]
 8006b22:	6993      	ldr	r3, [r2, #24]
 8006b24:	f023 0310 	bic.w	r3, r3, #16
 8006b28:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8006b2a:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006b2e:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006b32:	f3c8 4343 	ubfx	r3, r8, #17, #4
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	f000 8085 	beq.w	8006c46 <HAL_PCD_IRQHandler+0x16e>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006b3c:	2b06      	cmp	r3, #6
 8006b3e:	f000 80aa 	beq.w	8006c96 <HAL_PCD_IRQHandler+0x1be>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b42:	6822      	ldr	r2, [r4, #0]
 8006b44:	6993      	ldr	r3, [r2, #24]
 8006b46:	f043 0310 	orr.w	r3, r3, #16
 8006b4a:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006b4c:	6820      	ldr	r0, [r4, #0]
 8006b4e:	f004 f9db 	bl	800af08 <USB_ReadInterrupts>
 8006b52:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8006b56:	f040 80b0 	bne.w	8006cba <HAL_PCD_IRQHandler+0x1e2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006b5a:	6820      	ldr	r0, [r4, #0]
 8006b5c:	f004 f9d4 	bl	800af08 <USB_ReadInterrupts>
 8006b60:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8006b64:	f040 80f4 	bne.w	8006d50 <HAL_PCD_IRQHandler+0x278>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006b68:	6820      	ldr	r0, [r4, #0]
 8006b6a:	f004 f9cd 	bl	800af08 <USB_ReadInterrupts>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	f2c0 8160 	blt.w	8006e34 <HAL_PCD_IRQHandler+0x35c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006b74:	6820      	ldr	r0, [r4, #0]
 8006b76:	f004 f9c7 	bl	800af08 <USB_ReadInterrupts>
 8006b7a:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8006b7e:	d00a      	beq.n	8006b96 <HAL_PCD_IRQHandler+0xbe>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006b80:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8006b84:	f013 0f01 	tst.w	r3, #1
 8006b88:	f040 816e 	bne.w	8006e68 <HAL_PCD_IRQHandler+0x390>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006b8c:	6822      	ldr	r2, [r4, #0]
 8006b8e:	6953      	ldr	r3, [r2, #20]
 8006b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b94:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006b96:	6820      	ldr	r0, [r4, #0]
 8006b98:	f004 f9b6 	bl	800af08 <USB_ReadInterrupts>
 8006b9c:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8006ba0:	d015      	beq.n	8006bce <HAL_PCD_IRQHandler+0xf6>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006ba2:	6822      	ldr	r2, [r4, #0]
 8006ba4:	6953      	ldr	r3, [r2, #20]
 8006ba6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006baa:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8006bac:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f040 815d 	bne.w	8006e70 <HAL_PCD_IRQHandler+0x398>
        hpcd->LPM_State = LPM_L1;
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc0:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8006bc4:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f000 fb2c 	bl	8007226 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006bce:	6820      	ldr	r0, [r4, #0]
 8006bd0:	f004 f99a 	bl	800af08 <USB_ReadInterrupts>
 8006bd4:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8006bd8:	f040 814e 	bne.w	8006e78 <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006bdc:	6820      	ldr	r0, [r4, #0]
 8006bde:	f004 f993 	bl	800af08 <USB_ReadInterrupts>
 8006be2:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8006be6:	f040 81ac 	bne.w	8006f42 <HAL_PCD_IRQHandler+0x46a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006bea:	6820      	ldr	r0, [r4, #0]
 8006bec:	f004 f98c 	bl	800af08 <USB_ReadInterrupts>
 8006bf0:	f010 0f08 	tst.w	r0, #8
 8006bf4:	f040 81bd 	bne.w	8006f72 <HAL_PCD_IRQHandler+0x49a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006bf8:	6820      	ldr	r0, [r4, #0]
 8006bfa:	f004 f985 	bl	800af08 <USB_ReadInterrupts>
 8006bfe:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8006c02:	f040 81bf 	bne.w	8006f84 <HAL_PCD_IRQHandler+0x4ac>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006c06:	6820      	ldr	r0, [r4, #0]
 8006c08:	f004 f97e 	bl	800af08 <USB_ReadInterrupts>
 8006c0c:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8006c10:	f040 81c2 	bne.w	8006f98 <HAL_PCD_IRQHandler+0x4c0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006c14:	6820      	ldr	r0, [r4, #0]
 8006c16:	f004 f977 	bl	800af08 <USB_ReadInterrupts>
 8006c1a:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006c1e:	f040 81c5 	bne.w	8006fac <HAL_PCD_IRQHandler+0x4d4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006c22:	6820      	ldr	r0, [r4, #0]
 8006c24:	f004 f970 	bl	800af08 <USB_ReadInterrupts>
 8006c28:	f010 0f04 	tst.w	r0, #4
 8006c2c:	f43f af5d 	beq.w	8006aea <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006c34:	f015 0f04 	tst.w	r5, #4
 8006c38:	f040 81c1 	bne.w	8006fbe <HAL_PCD_IRQHandler+0x4e6>
      hpcd->Instance->GOTGINT |= temp;
 8006c3c:	6822      	ldr	r2, [r4, #0]
 8006c3e:	6853      	ldr	r3, [r2, #4]
 8006c40:	432b      	orrs	r3, r5
 8006c42:	6053      	str	r3, [r2, #4]
 8006c44:	e751      	b.n	8006aea <HAL_PCD_IRQHandler+0x12>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006c46:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006c4a:	ea18 0f03 	tst.w	r8, r3
 8006c4e:	f43f af78 	beq.w	8006b42 <HAL_PCD_IRQHandler+0x6a>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006c52:	ea4f 1b18 	mov.w	fp, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006c56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c5a:	9301      	str	r3, [sp, #4]
 8006c5c:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
 8006c60:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8006c64:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8006c68:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f004 f8cf 	bl	800ae10 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c72:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 8006c76:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 8006c7a:	445b      	add	r3, fp
 8006c7c:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c80:	9b01      	ldr	r3, [sp, #4]
 8006c82:	eba3 0309 	sub.w	r3, r3, r9
 8006c86:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c8e:	445b      	add	r3, fp
 8006c90:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 8006c94:	e755      	b.n	8006b42 <HAL_PCD_IRQHandler+0x6a>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006c96:	2208      	movs	r2, #8
 8006c98:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	f004 f8b7 	bl	800ae10 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ca2:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8006ca6:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 8006caa:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006cae:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8006cb2:	4443      	add	r3, r8
 8006cb4:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8006cb8:	e743      	b.n	8006b42 <HAL_PCD_IRQHandler+0x6a>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006cba:	6820      	ldr	r0, [r4, #0]
 8006cbc:	f004 f928 	bl	800af10 <USB_ReadDevAllOutEpInterrupt>
 8006cc0:	4680      	mov	r8, r0
      epnum = 0U;
 8006cc2:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8006cc4:	e017      	b.n	8006cf6 <HAL_PCD_IRQHandler+0x21e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006cc6:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006cd0:	4649      	mov	r1, r9
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f7ff fe5c 	bl	8006990 <PCD_EP_OutXfrComplete_int>
 8006cd8:	e01d      	b.n	8006d16 <HAL_PCD_IRQHandler+0x23e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006cda:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8006cde:	2208      	movs	r2, #8
 8006ce0:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006ce4:	4649      	mov	r1, r9
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f7ff fece 	bl	8006a88 <PCD_EP_OutSetupPacket_int>
 8006cec:	e016      	b.n	8006d1c <HAL_PCD_IRQHandler+0x244>
        epnum++;
 8006cee:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8006cf2:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8006cf6:	f1b8 0f00 	cmp.w	r8, #0
 8006cfa:	f43f af2e 	beq.w	8006b5a <HAL_PCD_IRQHandler+0x82>
        if ((ep_intr & 0x1U) != 0U)
 8006cfe:	f018 0f01 	tst.w	r8, #1
 8006d02:	d0f4      	beq.n	8006cee <HAL_PCD_IRQHandler+0x216>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006d04:	fa5f f189 	uxtb.w	r1, r9
 8006d08:	6820      	ldr	r0, [r4, #0]
 8006d0a:	f004 f911 	bl	800af30 <USB_ReadDevOutEPInterrupt>
 8006d0e:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006d10:	f010 0f01 	tst.w	r0, #1
 8006d14:	d1d7      	bne.n	8006cc6 <HAL_PCD_IRQHandler+0x1ee>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006d16:	f01a 0f08 	tst.w	sl, #8
 8006d1a:	d1de      	bne.n	8006cda <HAL_PCD_IRQHandler+0x202>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006d1c:	f01a 0f10 	tst.w	sl, #16
 8006d20:	d004      	beq.n	8006d2c <HAL_PCD_IRQHandler+0x254>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006d22:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8006d26:	2210      	movs	r2, #16
 8006d28:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006d2c:	f01a 0f20 	tst.w	sl, #32
 8006d30:	d004      	beq.n	8006d3c <HAL_PCD_IRQHandler+0x264>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d32:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8006d36:	2220      	movs	r2, #32
 8006d38:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006d3c:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8006d40:	d0d5      	beq.n	8006cee <HAL_PCD_IRQHandler+0x216>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006d42:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8006d46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d4a:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8006d4e:	e7ce      	b.n	8006cee <HAL_PCD_IRQHandler+0x216>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006d50:	6820      	ldr	r0, [r4, #0]
 8006d52:	f004 f8e5 	bl	800af20 <USB_ReadDevAllInEpInterrupt>
 8006d56:	4680      	mov	r8, r0
      epnum = 0U;
 8006d58:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8006d5a:	e02a      	b.n	8006db2 <HAL_PCD_IRQHandler+0x2da>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006d5c:	4659      	mov	r1, fp
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f006 fed8 	bl	800db14 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006d64:	f01a 0f08 	tst.w	sl, #8
 8006d68:	d004      	beq.n	8006d74 <HAL_PCD_IRQHandler+0x29c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006d6a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8006d6e:	2208      	movs	r2, #8
 8006d70:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006d74:	f01a 0f10 	tst.w	sl, #16
 8006d78:	d004      	beq.n	8006d84 <HAL_PCD_IRQHandler+0x2ac>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006d7a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8006d7e:	2210      	movs	r2, #16
 8006d80:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006d84:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006d88:	d004      	beq.n	8006d94 <HAL_PCD_IRQHandler+0x2bc>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006d8a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8006d8e:	2240      	movs	r2, #64	; 0x40
 8006d90:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006d94:	f01a 0f02 	tst.w	sl, #2
 8006d98:	d004      	beq.n	8006da4 <HAL_PCD_IRQHandler+0x2cc>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006d9a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006da4:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8006da8:	d13f      	bne.n	8006e2a <HAL_PCD_IRQHandler+0x352>
        epnum++;
 8006daa:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8006dae:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8006db2:	f1b8 0f00 	cmp.w	r8, #0
 8006db6:	f43f aed7 	beq.w	8006b68 <HAL_PCD_IRQHandler+0x90>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006dba:	f018 0f01 	tst.w	r8, #1
 8006dbe:	d0f4      	beq.n	8006daa <HAL_PCD_IRQHandler+0x2d2>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006dc0:	fa5f fb89 	uxtb.w	fp, r9
 8006dc4:	4659      	mov	r1, fp
 8006dc6:	6820      	ldr	r0, [r4, #0]
 8006dc8:	f004 f8bb 	bl	800af42 <USB_ReadDevInEPInterrupt>
 8006dcc:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006dce:	f010 0f01 	tst.w	r0, #1
 8006dd2:	d0c7      	beq.n	8006d64 <HAL_PCD_IRQHandler+0x28c>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006dd4:	f009 030f 	and.w	r3, r9, #15
 8006dd8:	2101      	movs	r1, #1
 8006dda:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006dde:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8006de2:	ea23 0302 	bic.w	r3, r3, r2
 8006de6:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006dea:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8006dee:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 8006df2:	6923      	ldr	r3, [r4, #16]
 8006df4:	428b      	cmp	r3, r1
 8006df6:	d1b1      	bne.n	8006d5c <HAL_PCD_IRQHandler+0x284>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006df8:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8006dfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e00:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006e02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e04:	440a      	add	r2, r1
 8006e06:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006e08:	f1b9 0f00 	cmp.w	r9, #0
 8006e0c:	d1a6      	bne.n	8006d5c <HAL_PCD_IRQHandler+0x284>
 8006e0e:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8006e12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d19f      	bne.n	8006d5c <HAL_PCD_IRQHandler+0x284>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e1c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8006e20:	2101      	movs	r1, #1
 8006e22:	6820      	ldr	r0, [r4, #0]
 8006e24:	f004 f8b6 	bl	800af94 <USB_EP0_OutStart>
 8006e28:	e798      	b.n	8006d5c <HAL_PCD_IRQHandler+0x284>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f7ff fd46 	bl	80068be <PCD_WriteEmptyTxFifo>
 8006e32:	e7ba      	b.n	8006daa <HAL_PCD_IRQHandler+0x2d2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006e34:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8006e38:	f023 0301 	bic.w	r3, r3, #1
 8006e3c:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8006e40:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d008      	beq.n	8006e5a <HAL_PCD_IRQHandler+0x382>
        HAL_PCD_ResumeCallback(hpcd);
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f006 fe8b 	bl	800db64 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006e4e:	6822      	ldr	r2, [r4, #0]
 8006e50:	6953      	ldr	r3, [r2, #20]
 8006e52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e56:	6153      	str	r3, [r2, #20]
 8006e58:	e68c      	b.n	8006b74 <HAL_PCD_IRQHandler+0x9c>
        hpcd->LPM_State = LPM_L0;
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 f9e0 	bl	8007226 <HAL_PCDEx_LPM_Callback>
 8006e66:	e7f2      	b.n	8006e4e <HAL_PCD_IRQHandler+0x376>
        HAL_PCD_SuspendCallback(hpcd);
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f006 fe75 	bl	800db58 <HAL_PCD_SuspendCallback>
 8006e6e:	e68d      	b.n	8006b8c <HAL_PCD_IRQHandler+0xb4>
        HAL_PCD_SuspendCallback(hpcd);
 8006e70:	4620      	mov	r0, r4
 8006e72:	f006 fe71 	bl	800db58 <HAL_PCD_SuspendCallback>
 8006e76:	e6aa      	b.n	8006bce <HAL_PCD_IRQHandler+0xf6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006e78:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 8006e7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006e80:	f023 0301 	bic.w	r3, r3, #1
 8006e84:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006e88:	2110      	movs	r1, #16
 8006e8a:	6820      	ldr	r0, [r4, #0]
 8006e8c:	f003 fdaa 	bl	800a9e4 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e90:	e020      	b.n	8006ed4 <HAL_PCD_IRQHandler+0x3fc>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006e92:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 8006e96:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8006e9a:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006e9e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8006ea2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006ea6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006eaa:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8006eae:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006eb2:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006eb6:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006eba:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8006ebe:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006ec2:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ec6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8006eca:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006ece:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ed2:	3601      	adds	r6, #1
 8006ed4:	6863      	ldr	r3, [r4, #4]
 8006ed6:	42b3      	cmp	r3, r6
 8006ed8:	d8db      	bhi.n	8006e92 <HAL_PCD_IRQHandler+0x3ba>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006eda:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006ede:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006ee2:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006ee6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006ee8:	b1eb      	cbz	r3, 8006f26 <HAL_PCD_IRQHandler+0x44e>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006eea:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 8006eee:	f043 030b 	orr.w	r3, r3, #11
 8006ef2:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006ef6:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8006efa:	f043 030b 	orr.w	r3, r3, #11
 8006efe:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006f02:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8006f06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006f0a:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006f0e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8006f12:	7c21      	ldrb	r1, [r4, #16]
 8006f14:	6820      	ldr	r0, [r4, #0]
 8006f16:	f004 f83d 	bl	800af94 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006f1a:	6822      	ldr	r2, [r4, #0]
 8006f1c:	6953      	ldr	r3, [r2, #20]
 8006f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f22:	6153      	str	r3, [r2, #20]
 8006f24:	e65a      	b.n	8006bdc <HAL_PCD_IRQHandler+0x104>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006f26:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8006f2a:	f242 032b 	movw	r3, #8235	; 0x202b
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006f34:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006f38:	f043 030b 	orr.w	r3, r3, #11
 8006f3c:	f8c8 3010 	str.w	r3, [r8, #16]
 8006f40:	e7df      	b.n	8006f02 <HAL_PCD_IRQHandler+0x42a>
      (void)USB_ActivateSetup(hpcd->Instance);
 8006f42:	6820      	ldr	r0, [r4, #0]
 8006f44:	f004 f816 	bl	800af74 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006f48:	6820      	ldr	r0, [r4, #0]
 8006f4a:	f003 fd5f 	bl	800aa0c <USB_GetDevSpeed>
 8006f4e:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006f50:	6825      	ldr	r5, [r4, #0]
 8006f52:	f000 fcc3 	bl	80078dc <HAL_RCC_GetHCLKFreq>
 8006f56:	4601      	mov	r1, r0
 8006f58:	7b22      	ldrb	r2, [r4, #12]
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	f003 fcd0 	bl	800a900 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8006f60:	4620      	mov	r0, r4
 8006f62:	f006 fde8 	bl	800db36 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006f66:	6822      	ldr	r2, [r4, #0]
 8006f68:	6953      	ldr	r3, [r2, #20]
 8006f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f6e:	6153      	str	r3, [r2, #20]
 8006f70:	e63b      	b.n	8006bea <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SOFCallback(hpcd);
 8006f72:	4620      	mov	r0, r4
 8006f74:	f006 fdd9 	bl	800db2a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006f78:	6822      	ldr	r2, [r4, #0]
 8006f7a:	6953      	ldr	r3, [r2, #20]
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	6153      	str	r3, [r2, #20]
 8006f82:	e639      	b.n	8006bf8 <HAL_PCD_IRQHandler+0x120>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006f84:	2100      	movs	r1, #0
 8006f86:	4620      	mov	r0, r4
 8006f88:	f006 fdf8 	bl	800db7c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006f8c:	6822      	ldr	r2, [r4, #0]
 8006f8e:	6953      	ldr	r3, [r2, #20]
 8006f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f94:	6153      	str	r3, [r2, #20]
 8006f96:	e636      	b.n	8006c06 <HAL_PCD_IRQHandler+0x12e>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006f98:	2100      	movs	r1, #0
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f006 fde8 	bl	800db70 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006fa0:	6822      	ldr	r2, [r4, #0]
 8006fa2:	6953      	ldr	r3, [r2, #20]
 8006fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fa8:	6153      	str	r3, [r2, #20]
 8006faa:	e633      	b.n	8006c14 <HAL_PCD_IRQHandler+0x13c>
      HAL_PCD_ConnectCallback(hpcd);
 8006fac:	4620      	mov	r0, r4
 8006fae:	f006 fdeb 	bl	800db88 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006fb2:	6822      	ldr	r2, [r4, #0]
 8006fb4:	6953      	ldr	r3, [r2, #20]
 8006fb6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fba:	6153      	str	r3, [r2, #20]
 8006fbc:	e631      	b.n	8006c22 <HAL_PCD_IRQHandler+0x14a>
        HAL_PCD_DisconnectCallback(hpcd);
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f006 fde8 	bl	800db94 <HAL_PCD_DisconnectCallback>
 8006fc4:	e63a      	b.n	8006c3c <HAL_PCD_IRQHandler+0x164>

08006fc6 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8006fc6:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d00d      	beq.n	8006fea <HAL_PCD_SetAddress+0x24>
{
 8006fce:	b510      	push	{r4, lr}
 8006fd0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006fd8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006fdc:	6800      	ldr	r0, [r0, #0]
 8006fde:	f003 ff83 	bl	800aee8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8006fe8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8006fea:	2002      	movs	r0, #2
}
 8006fec:	4770      	bx	lr

08006fee <HAL_PCD_EP_Open>:
{
 8006fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff0:	4607      	mov	r7, r0
 8006ff2:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8006ff4:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006ff8:	d127      	bne.n	800704a <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ffa:	f001 050f 	and.w	r5, r1, #15
 8006ffe:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8007002:	00b6      	lsls	r6, r6, #2
 8007004:	f506 76fc 	add.w	r6, r6, #504	; 0x1f8
 8007008:	4406      	add	r6, r0
 800700a:	1d31      	adds	r1, r6, #4
    ep->is_in = 0U;
 800700c:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8007010:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007014:	2000      	movs	r0, #0
 8007016:	f885 01fd 	strb.w	r0, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800701a:	f004 040f 	and.w	r4, r4, #15
 800701e:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8007020:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8007022:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8007024:	784a      	ldrb	r2, [r1, #1]
 8007026:	b102      	cbz	r2, 800702a <HAL_PCD_EP_Open+0x3c>
    ep->tx_fifo_num = ep->num;
 8007028:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800702a:	2b02      	cmp	r3, #2
 800702c:	d01d      	beq.n	800706a <HAL_PCD_EP_Open+0x7c>
  __HAL_LOCK(hpcd);
 800702e:	f897 33bc 	ldrb.w	r3, [r7, #956]	; 0x3bc
 8007032:	2b01      	cmp	r3, #1
 8007034:	d01c      	beq.n	8007070 <HAL_PCD_EP_Open+0x82>
 8007036:	2301      	movs	r3, #1
 8007038:	f887 33bc 	strb.w	r3, [r7, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800703c:	6838      	ldr	r0, [r7, #0]
 800703e:	f003 fcf5 	bl	800aa2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007042:	2000      	movs	r0, #0
 8007044:	f887 03bc 	strb.w	r0, [r7, #956]	; 0x3bc
}
 8007048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800704a:	f001 000f 	and.w	r0, r1, #15
 800704e:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 8007052:	0089      	lsls	r1, r1, #2
 8007054:	3138      	adds	r1, #56	; 0x38
 8007056:	4439      	add	r1, r7
 8007058:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800705a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800705e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8007062:	2501      	movs	r5, #1
 8007064:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
 8007068:	e7d7      	b.n	800701a <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	710b      	strb	r3, [r1, #4]
 800706e:	e7de      	b.n	800702e <HAL_PCD_EP_Open+0x40>
  __HAL_LOCK(hpcd);
 8007070:	2002      	movs	r0, #2
 8007072:	e7e9      	b.n	8007048 <HAL_PCD_EP_Open+0x5a>

08007074 <HAL_PCD_EP_Receive>:
{
 8007074:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007076:	f001 040f 	and.w	r4, r1, #15
 800707a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 800707e:	0089      	lsls	r1, r1, #2
 8007080:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8007084:	4401      	add	r1, r0
 8007086:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8007088:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 800708c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007090:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
  ep->xfer_len = len;
 8007094:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
  ep->xfer_count = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  ep->is_in = 0U;
 800709e:	f885 31fd 	strb.w	r3, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80070a2:	f885 41fc 	strb.w	r4, [r5, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 80070a6:	6903      	ldr	r3, [r0, #16]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d006      	beq.n	80070ba <HAL_PCD_EP_Receive+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80070ac:	b964      	cbnz	r4, 80070c8 <HAL_PCD_EP_Receive+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	6800      	ldr	r0, [r0, #0]
 80070b2:	f003 fd03 	bl	800aabc <USB_EP0StartXfer>
}
 80070b6:	2000      	movs	r0, #0
 80070b8:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80070ba:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80070be:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80070c2:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
 80070c6:	e7f1      	b.n	80070ac <HAL_PCD_EP_Receive+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	6800      	ldr	r0, [r0, #0]
 80070cc:	f003 fd96 	bl	800abfc <USB_EPStartXfer>
 80070d0:	e7f1      	b.n	80070b6 <HAL_PCD_EP_Receive+0x42>

080070d2 <HAL_PCD_EP_Transmit>:
{
 80070d2:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070d4:	f001 040f 	and.w	r4, r1, #15
 80070d8:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 80070dc:	0089      	lsls	r1, r1, #2
 80070de:	3138      	adds	r1, #56	; 0x38
 80070e0:	4401      	add	r1, r0
 80070e2:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80070e4:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80070e8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80070ec:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 80070ee:	652b      	str	r3, [r5, #80]	; 0x50
  ep->xfer_count = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1U;
 80070f4:	2301      	movs	r3, #1
 80070f6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 80070fa:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 80070fe:	6903      	ldr	r3, [r0, #16]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d006      	beq.n	8007112 <HAL_PCD_EP_Transmit+0x40>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007104:	b95c      	cbnz	r4, 800711e <HAL_PCD_EP_Transmit+0x4c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007106:	b2da      	uxtb	r2, r3
 8007108:	6800      	ldr	r0, [r0, #0]
 800710a:	f003 fcd7 	bl	800aabc <USB_EP0StartXfer>
}
 800710e:	2000      	movs	r0, #0
 8007110:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8007112:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8007116:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800711a:	64ea      	str	r2, [r5, #76]	; 0x4c
 800711c:	e7f2      	b.n	8007104 <HAL_PCD_EP_Transmit+0x32>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800711e:	b2da      	uxtb	r2, r3
 8007120:	6800      	ldr	r0, [r0, #0]
 8007122:	f003 fd6b 	bl	800abfc <USB_EPStartXfer>
 8007126:	e7f2      	b.n	800710e <HAL_PCD_EP_Transmit+0x3c>

08007128 <HAL_PCD_EP_SetStall>:
{
 8007128:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800712a:	f001 050f 	and.w	r5, r1, #15
 800712e:	6842      	ldr	r2, [r0, #4]
 8007130:	4295      	cmp	r5, r2
 8007132:	d839      	bhi.n	80071a8 <HAL_PCD_EP_SetStall+0x80>
 8007134:	4604      	mov	r4, r0
 8007136:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8007138:	f011 0f80 	tst.w	r1, #128	; 0x80
 800713c:	d11f      	bne.n	800717e <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 800713e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007142:	0089      	lsls	r1, r1, #2
 8007144:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8007148:	4401      	add	r1, r0
 800714a:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800714c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007150:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007154:	2200      	movs	r2, #0
 8007156:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800715a:	2301      	movs	r3, #1
 800715c:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800715e:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8007160:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007164:	2b01      	cmp	r3, #1
 8007166:	d021      	beq.n	80071ac <HAL_PCD_EP_SetStall+0x84>
 8007168:	2301      	movs	r3, #1
 800716a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800716e:	6820      	ldr	r0, [r4, #0]
 8007170:	f003 fe5f 	bl	800ae32 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007174:	b18d      	cbz	r5, 800719a <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 8007176:	2000      	movs	r0, #0
 8007178:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800717c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800717e:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 8007182:	0089      	lsls	r1, r1, #2
 8007184:	3138      	adds	r1, #56	; 0x38
 8007186:	4401      	add	r1, r0
 8007188:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800718a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800718e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007198:	e7df      	b.n	800715a <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800719a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800719e:	7c21      	ldrb	r1, [r4, #16]
 80071a0:	6820      	ldr	r0, [r4, #0]
 80071a2:	f003 fef7 	bl	800af94 <USB_EP0_OutStart>
 80071a6:	e7e6      	b.n	8007176 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 80071a8:	2001      	movs	r0, #1
 80071aa:	e7e7      	b.n	800717c <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 80071ac:	2002      	movs	r0, #2
 80071ae:	e7e5      	b.n	800717c <HAL_PCD_EP_SetStall+0x54>

080071b0 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80071b0:	f001 030f 	and.w	r3, r1, #15
 80071b4:	6842      	ldr	r2, [r0, #4]
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d831      	bhi.n	800721e <HAL_PCD_EP_ClrStall+0x6e>
{
 80071ba:	b510      	push	{r4, lr}
 80071bc:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80071be:	f011 0f80 	tst.w	r1, #128	; 0x80
 80071c2:	d11e      	bne.n	8007202 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071c4:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80071c8:	0089      	lsls	r1, r1, #2
 80071ca:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 80071ce:	4401      	add	r1, r0
 80071d0:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80071d2:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80071d6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80071da:	2000      	movs	r0, #0
 80071dc:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 80071e0:	2200      	movs	r2, #0
 80071e2:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80071e4:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80071e6:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d019      	beq.n	8007222 <HAL_PCD_EP_ClrStall+0x72>
 80071ee:	2301      	movs	r3, #1
 80071f0:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80071f4:	6820      	ldr	r0, [r4, #0]
 80071f6:	f003 fe49 	bl	800ae8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80071fa:	2000      	movs	r0, #0
 80071fc:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007200:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007202:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8007206:	0089      	lsls	r1, r1, #2
 8007208:	3138      	adds	r1, #56	; 0x38
 800720a:	4401      	add	r1, r0
 800720c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800720e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007212:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007216:	2001      	movs	r0, #1
 8007218:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 800721c:	e7e0      	b.n	80071e0 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 800721e:	2001      	movs	r0, #1
}
 8007220:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8007222:	2002      	movs	r0, #2
 8007224:	e7ec      	b.n	8007200 <HAL_PCD_EP_ClrStall+0x50>

08007226 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007226:	4770      	bx	lr

08007228 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007228:	b510      	push	{r4, lr}
 800722a:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800722c:	4b1b      	ldr	r3, [pc, #108]	; (800729c <HAL_PWREx_EnableOverDrive+0x74>)
 800722e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007230:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007234:	641a      	str	r2, [r3, #64]	; 0x40
 8007236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800723c:	9301      	str	r3, [sp, #4]
 800723e:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007240:	4a17      	ldr	r2, [pc, #92]	; (80072a0 <HAL_PWREx_EnableOverDrive+0x78>)
 8007242:	6813      	ldr	r3, [r2, #0]
 8007244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007248:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800724a:	f7fc fe53 	bl	8003ef4 <HAL_GetTick>
 800724e:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007250:	4b13      	ldr	r3, [pc, #76]	; (80072a0 <HAL_PWREx_EnableOverDrive+0x78>)
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007258:	d108      	bne.n	800726c <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800725a:	f7fc fe4b 	bl	8003ef4 <HAL_GetTick>
 800725e:	1b00      	subs	r0, r0, r4
 8007260:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007264:	d9f4      	bls.n	8007250 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8007266:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8007268:	b002      	add	sp, #8
 800726a:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800726c:	4a0c      	ldr	r2, [pc, #48]	; (80072a0 <HAL_PWREx_EnableOverDrive+0x78>)
 800726e:	6813      	ldr	r3, [r2, #0]
 8007270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007274:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8007276:	f7fc fe3d 	bl	8003ef4 <HAL_GetTick>
 800727a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800727c:	4b08      	ldr	r3, [pc, #32]	; (80072a0 <HAL_PWREx_EnableOverDrive+0x78>)
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007284:	d107      	bne.n	8007296 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007286:	f7fc fe35 	bl	8003ef4 <HAL_GetTick>
 800728a:	1b00      	subs	r0, r0, r4
 800728c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007290:	d9f4      	bls.n	800727c <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8007292:	2003      	movs	r0, #3
 8007294:	e7e8      	b.n	8007268 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8007296:	2000      	movs	r0, #0
 8007298:	e7e6      	b.n	8007268 <HAL_PWREx_EnableOverDrive+0x40>
 800729a:	bf00      	nop
 800729c:	40023800 	.word	0x40023800
 80072a0:	40007000 	.word	0x40007000

080072a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072a4:	b570      	push	{r4, r5, r6, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072aa:	6803      	ldr	r3, [r0, #0]
 80072ac:	f013 0f01 	tst.w	r3, #1
 80072b0:	d029      	beq.n	8007306 <HAL_RCC_OscConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80072b2:	4ba8      	ldr	r3, [pc, #672]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f003 030c 	and.w	r3, r3, #12
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d01a      	beq.n	80072f4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072be:	4ba5      	ldr	r3, [pc, #660]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f003 030c 	and.w	r3, r3, #12
 80072c6:	2b08      	cmp	r3, #8
 80072c8:	d00f      	beq.n	80072ea <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072ca:	6863      	ldr	r3, [r4, #4]
 80072cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072d0:	d040      	beq.n	8007354 <HAL_RCC_OscConfig+0xb0>
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d154      	bne.n	8007380 <HAL_RCC_OscConfig+0xdc>
 80072d6:	4b9f      	ldr	r3, [pc, #636]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	e039      	b.n	800735e <HAL_RCC_OscConfig+0xba>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072ea:	4b9a      	ldr	r3, [pc, #616]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80072f2:	d0ea      	beq.n	80072ca <HAL_RCC_OscConfig+0x26>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072f4:	4b97      	ldr	r3, [pc, #604]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80072fc:	d003      	beq.n	8007306 <HAL_RCC_OscConfig+0x62>
 80072fe:	6863      	ldr	r3, [r4, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 81d1 	beq.w	80076a8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	f013 0f02 	tst.w	r3, #2
 800730c:	d07a      	beq.n	8007404 <HAL_RCC_OscConfig+0x160>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800730e:	4b91      	ldr	r3, [pc, #580]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f013 0f0c 	tst.w	r3, #12
 8007316:	d05e      	beq.n	80073d6 <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007318:	4b8e      	ldr	r3, [pc, #568]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f003 030c 	and.w	r3, r3, #12
 8007320:	2b08      	cmp	r3, #8
 8007322:	d053      	beq.n	80073cc <HAL_RCC_OscConfig+0x128>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007324:	68e3      	ldr	r3, [r4, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 8096 	beq.w	8007458 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800732c:	4a89      	ldr	r2, [pc, #548]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 800732e:	6813      	ldr	r3, [r2, #0]
 8007330:	f043 0301 	orr.w	r3, r3, #1
 8007334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007336:	f7fc fddd 	bl	8003ef4 <HAL_GetTick>
 800733a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800733c:	4b85      	ldr	r3, [pc, #532]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f013 0f02 	tst.w	r3, #2
 8007344:	d179      	bne.n	800743a <HAL_RCC_OscConfig+0x196>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007346:	f7fc fdd5 	bl	8003ef4 <HAL_GetTick>
 800734a:	1b40      	subs	r0, r0, r5
 800734c:	2802      	cmp	r0, #2
 800734e:	d9f5      	bls.n	800733c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8007350:	2003      	movs	r0, #3
 8007352:	e1ae      	b.n	80076b2 <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007354:	4a7f      	ldr	r2, [pc, #508]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 8007356:	6813      	ldr	r3, [r2, #0]
 8007358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800735c:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800735e:	6863      	ldr	r3, [r4, #4]
 8007360:	b32b      	cbz	r3, 80073ae <HAL_RCC_OscConfig+0x10a>
        tickstart = HAL_GetTick();
 8007362:	f7fc fdc7 	bl	8003ef4 <HAL_GetTick>
 8007366:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007368:	4b7a      	ldr	r3, [pc, #488]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007370:	d1c9      	bne.n	8007306 <HAL_RCC_OscConfig+0x62>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007372:	f7fc fdbf 	bl	8003ef4 <HAL_GetTick>
 8007376:	1b40      	subs	r0, r0, r5
 8007378:	2864      	cmp	r0, #100	; 0x64
 800737a:	d9f5      	bls.n	8007368 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 800737c:	2003      	movs	r0, #3
 800737e:	e198      	b.n	80076b2 <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007384:	d009      	beq.n	800739a <HAL_RCC_OscConfig+0xf6>
 8007386:	4b73      	ldr	r3, [pc, #460]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800738e:	601a      	str	r2, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	e7e1      	b.n	800735e <HAL_RCC_OscConfig+0xba>
 800739a:	4b6e      	ldr	r3, [pc, #440]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	e7d7      	b.n	800735e <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 80073ae:	f7fc fda1 	bl	8003ef4 <HAL_GetTick>
 80073b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073b4:	4b67      	ldr	r3, [pc, #412]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80073bc:	d0a3      	beq.n	8007306 <HAL_RCC_OscConfig+0x62>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073be:	f7fc fd99 	bl	8003ef4 <HAL_GetTick>
 80073c2:	1b40      	subs	r0, r0, r5
 80073c4:	2864      	cmp	r0, #100	; 0x64
 80073c6:	d9f5      	bls.n	80073b4 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 80073c8:	2003      	movs	r0, #3
 80073ca:	e172      	b.n	80076b2 <HAL_RCC_OscConfig+0x40e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073cc:	4b61      	ldr	r3, [pc, #388]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80073d4:	d1a6      	bne.n	8007324 <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073d6:	4b5f      	ldr	r3, [pc, #380]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f013 0f02 	tst.w	r3, #2
 80073de:	d003      	beq.n	80073e8 <HAL_RCC_OscConfig+0x144>
 80073e0:	68e3      	ldr	r3, [r4, #12]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	f040 8162 	bne.w	80076ac <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073e8:	485a      	ldr	r0, [pc, #360]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 80073ea:	6803      	ldr	r3, [r0, #0]
 80073ec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80073f0:	6921      	ldr	r1, [r4, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073f2:	22f8      	movs	r2, #248	; 0xf8
 80073f4:	fa92 f2a2 	rbit	r2, r2
 80073f8:	fab2 f282 	clz	r2, r2
 80073fc:	fa01 f202 	lsl.w	r2, r1, r2
 8007400:	4313      	orrs	r3, r2
 8007402:	6003      	str	r3, [r0, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	f013 0f08 	tst.w	r3, #8
 800740a:	d04d      	beq.n	80074a8 <HAL_RCC_OscConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800740c:	6963      	ldr	r3, [r4, #20]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d036      	beq.n	8007480 <HAL_RCC_OscConfig+0x1dc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007412:	4a50      	ldr	r2, [pc, #320]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 8007414:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8007416:	f043 0301 	orr.w	r3, r3, #1
 800741a:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800741c:	f7fc fd6a 	bl	8003ef4 <HAL_GetTick>
 8007420:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007422:	4b4c      	ldr	r3, [pc, #304]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 8007424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007426:	f013 0f02 	tst.w	r3, #2
 800742a:	d13d      	bne.n	80074a8 <HAL_RCC_OscConfig+0x204>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800742c:	f7fc fd62 	bl	8003ef4 <HAL_GetTick>
 8007430:	1b40      	subs	r0, r0, r5
 8007432:	2802      	cmp	r0, #2
 8007434:	d9f5      	bls.n	8007422 <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 8007436:	2003      	movs	r0, #3
 8007438:	e13b      	b.n	80076b2 <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800743a:	4846      	ldr	r0, [pc, #280]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 800743c:	6803      	ldr	r3, [r0, #0]
 800743e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007442:	6921      	ldr	r1, [r4, #16]
 8007444:	22f8      	movs	r2, #248	; 0xf8
 8007446:	fa92 f2a2 	rbit	r2, r2
 800744a:	fab2 f282 	clz	r2, r2
 800744e:	fa01 f202 	lsl.w	r2, r1, r2
 8007452:	4313      	orrs	r3, r2
 8007454:	6003      	str	r3, [r0, #0]
 8007456:	e7d5      	b.n	8007404 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_DISABLE();
 8007458:	4a3e      	ldr	r2, [pc, #248]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 800745a:	6813      	ldr	r3, [r2, #0]
 800745c:	f023 0301 	bic.w	r3, r3, #1
 8007460:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007462:	f7fc fd47 	bl	8003ef4 <HAL_GetTick>
 8007466:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007468:	4b3a      	ldr	r3, [pc, #232]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f013 0f02 	tst.w	r3, #2
 8007470:	d0c8      	beq.n	8007404 <HAL_RCC_OscConfig+0x160>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007472:	f7fc fd3f 	bl	8003ef4 <HAL_GetTick>
 8007476:	1b40      	subs	r0, r0, r5
 8007478:	2802      	cmp	r0, #2
 800747a:	d9f5      	bls.n	8007468 <HAL_RCC_OscConfig+0x1c4>
            return HAL_TIMEOUT;
 800747c:	2003      	movs	r0, #3
 800747e:	e118      	b.n	80076b2 <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007480:	4a34      	ldr	r2, [pc, #208]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 8007482:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8007484:	f023 0301 	bic.w	r3, r3, #1
 8007488:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748a:	f7fc fd33 	bl	8003ef4 <HAL_GetTick>
 800748e:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007490:	4b30      	ldr	r3, [pc, #192]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 8007492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007494:	f013 0f02 	tst.w	r3, #2
 8007498:	d006      	beq.n	80074a8 <HAL_RCC_OscConfig+0x204>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800749a:	f7fc fd2b 	bl	8003ef4 <HAL_GetTick>
 800749e:	1b40      	subs	r0, r0, r5
 80074a0:	2802      	cmp	r0, #2
 80074a2:	d9f5      	bls.n	8007490 <HAL_RCC_OscConfig+0x1ec>
        {
          return HAL_TIMEOUT;
 80074a4:	2003      	movs	r0, #3
 80074a6:	e104      	b.n	80076b2 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	f013 0f04 	tst.w	r3, #4
 80074ae:	d07d      	beq.n	80075ac <HAL_RCC_OscConfig+0x308>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074b0:	4b28      	ldr	r3, [pc, #160]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 80074b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80074b8:	d10b      	bne.n	80074d2 <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80074ba:	4b26      	ldr	r3, [pc, #152]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 80074bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80074c2:	641a      	str	r2, [r3, #64]	; 0x40
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ca:	9301      	str	r3, [sp, #4]
 80074cc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80074ce:	2501      	movs	r5, #1
 80074d0:	e000      	b.n	80074d4 <HAL_RCC_OscConfig+0x230>
  FlagStatus pwrclkchanged = RESET;
 80074d2:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074d4:	4b20      	ldr	r3, [pc, #128]	; (8007558 <HAL_RCC_OscConfig+0x2b4>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80074dc:	d00e      	beq.n	80074fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074de:	68a3      	ldr	r3, [r4, #8]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d01f      	beq.n	8007524 <HAL_RCC_OscConfig+0x280>
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d139      	bne.n	800755c <HAL_RCC_OscConfig+0x2b8>
 80074e8:	4b1a      	ldr	r3, [pc, #104]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 80074ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074ec:	f022 0201 	bic.w	r2, r2, #1
 80074f0:	671a      	str	r2, [r3, #112]	; 0x70
 80074f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074f4:	f022 0204 	bic.w	r2, r2, #4
 80074f8:	671a      	str	r2, [r3, #112]	; 0x70
 80074fa:	e018      	b.n	800752e <HAL_RCC_OscConfig+0x28a>
      PWR->CR1 |= PWR_CR1_DBP;
 80074fc:	4a16      	ldr	r2, [pc, #88]	; (8007558 <HAL_RCC_OscConfig+0x2b4>)
 80074fe:	6813      	ldr	r3, [r2, #0]
 8007500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007504:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8007506:	f7fc fcf5 	bl	8003ef4 <HAL_GetTick>
 800750a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800750c:	4b12      	ldr	r3, [pc, #72]	; (8007558 <HAL_RCC_OscConfig+0x2b4>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007514:	d1e3      	bne.n	80074de <HAL_RCC_OscConfig+0x23a>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007516:	f7fc fced 	bl	8003ef4 <HAL_GetTick>
 800751a:	1b80      	subs	r0, r0, r6
 800751c:	2864      	cmp	r0, #100	; 0x64
 800751e:	d9f5      	bls.n	800750c <HAL_RCC_OscConfig+0x268>
          return HAL_TIMEOUT;
 8007520:	2003      	movs	r0, #3
 8007522:	e0c6      	b.n	80076b2 <HAL_RCC_OscConfig+0x40e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007524:	4a0b      	ldr	r2, [pc, #44]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 8007526:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8007528:	f043 0301 	orr.w	r3, r3, #1
 800752c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800752e:	68a3      	ldr	r3, [r4, #8]
 8007530:	b353      	cbz	r3, 8007588 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007532:	f7fc fcdf 	bl	8003ef4 <HAL_GetTick>
 8007536:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007538:	4b06      	ldr	r3, [pc, #24]	; (8007554 <HAL_RCC_OscConfig+0x2b0>)
 800753a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753c:	f013 0f02 	tst.w	r3, #2
 8007540:	d133      	bne.n	80075aa <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007542:	f7fc fcd7 	bl	8003ef4 <HAL_GetTick>
 8007546:	1b80      	subs	r0, r0, r6
 8007548:	f241 3388 	movw	r3, #5000	; 0x1388
 800754c:	4298      	cmp	r0, r3
 800754e:	d9f3      	bls.n	8007538 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8007550:	2003      	movs	r0, #3
 8007552:	e0ae      	b.n	80076b2 <HAL_RCC_OscConfig+0x40e>
 8007554:	40023800 	.word	0x40023800
 8007558:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800755c:	2b05      	cmp	r3, #5
 800755e:	d009      	beq.n	8007574 <HAL_RCC_OscConfig+0x2d0>
 8007560:	4b56      	ldr	r3, [pc, #344]	; (80076bc <HAL_RCC_OscConfig+0x418>)
 8007562:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007564:	f022 0201 	bic.w	r2, r2, #1
 8007568:	671a      	str	r2, [r3, #112]	; 0x70
 800756a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800756c:	f022 0204 	bic.w	r2, r2, #4
 8007570:	671a      	str	r2, [r3, #112]	; 0x70
 8007572:	e7dc      	b.n	800752e <HAL_RCC_OscConfig+0x28a>
 8007574:	4b51      	ldr	r3, [pc, #324]	; (80076bc <HAL_RCC_OscConfig+0x418>)
 8007576:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007578:	f042 0204 	orr.w	r2, r2, #4
 800757c:	671a      	str	r2, [r3, #112]	; 0x70
 800757e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007580:	f042 0201 	orr.w	r2, r2, #1
 8007584:	671a      	str	r2, [r3, #112]	; 0x70
 8007586:	e7d2      	b.n	800752e <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007588:	f7fc fcb4 	bl	8003ef4 <HAL_GetTick>
 800758c:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800758e:	4b4b      	ldr	r3, [pc, #300]	; (80076bc <HAL_RCC_OscConfig+0x418>)
 8007590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007592:	f013 0f02 	tst.w	r3, #2
 8007596:	d008      	beq.n	80075aa <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007598:	f7fc fcac 	bl	8003ef4 <HAL_GetTick>
 800759c:	1b80      	subs	r0, r0, r6
 800759e:	f241 3388 	movw	r3, #5000	; 0x1388
 80075a2:	4298      	cmp	r0, r3
 80075a4:	d9f3      	bls.n	800758e <HAL_RCC_OscConfig+0x2ea>
        {
          return HAL_TIMEOUT;
 80075a6:	2003      	movs	r0, #3
 80075a8:	e083      	b.n	80076b2 <HAL_RCC_OscConfig+0x40e>
        }       
      }
    }
    
    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075aa:	b9f5      	cbnz	r5, 80075ea <HAL_RCC_OscConfig+0x346>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075ac:	69a3      	ldr	r3, [r4, #24]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d07e      	beq.n	80076b0 <HAL_RCC_OscConfig+0x40c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075b2:	4a42      	ldr	r2, [pc, #264]	; (80076bc <HAL_RCC_OscConfig+0x418>)
 80075b4:	6892      	ldr	r2, [r2, #8]
 80075b6:	f002 020c 	and.w	r2, r2, #12
 80075ba:	2a08      	cmp	r2, #8
 80075bc:	d07b      	beq.n	80076b6 <HAL_RCC_OscConfig+0x412>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d019      	beq.n	80075f6 <HAL_RCC_OscConfig+0x352>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075c2:	4a3e      	ldr	r2, [pc, #248]	; (80076bc <HAL_RCC_OscConfig+0x418>)
 80075c4:	6813      	ldr	r3, [r2, #0]
 80075c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075ca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075cc:	f7fc fc92 	bl	8003ef4 <HAL_GetTick>
 80075d0:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075d2:	4b3a      	ldr	r3, [pc, #232]	; (80076bc <HAL_RCC_OscConfig+0x418>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80075da:	d063      	beq.n	80076a4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075dc:	f7fc fc8a 	bl	8003ef4 <HAL_GetTick>
 80075e0:	1b00      	subs	r0, r0, r4
 80075e2:	2802      	cmp	r0, #2
 80075e4:	d9f5      	bls.n	80075d2 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 80075e6:	2003      	movs	r0, #3
 80075e8:	e063      	b.n	80076b2 <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80075ea:	4a34      	ldr	r2, [pc, #208]	; (80076bc <HAL_RCC_OscConfig+0x418>)
 80075ec:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80075ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075f2:	6413      	str	r3, [r2, #64]	; 0x40
 80075f4:	e7da      	b.n	80075ac <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80075f6:	4a31      	ldr	r2, [pc, #196]	; (80076bc <HAL_RCC_OscConfig+0x418>)
 80075f8:	6813      	ldr	r3, [r2, #0]
 80075fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075fe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007600:	f7fc fc78 	bl	8003ef4 <HAL_GetTick>
 8007604:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007606:	4b2d      	ldr	r3, [pc, #180]	; (80076bc <HAL_RCC_OscConfig+0x418>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800760e:	d006      	beq.n	800761e <HAL_RCC_OscConfig+0x37a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007610:	f7fc fc70 	bl	8003ef4 <HAL_GetTick>
 8007614:	1b40      	subs	r0, r0, r5
 8007616:	2802      	cmp	r0, #2
 8007618:	d9f5      	bls.n	8007606 <HAL_RCC_OscConfig+0x362>
            return HAL_TIMEOUT;
 800761a:	2003      	movs	r0, #3
 800761c:	e049      	b.n	80076b2 <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800761e:	69e3      	ldr	r3, [r4, #28]
 8007620:	6a22      	ldr	r2, [r4, #32]
 8007622:	4313      	orrs	r3, r2
 8007624:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007626:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800762a:	fa92 f2a2 	rbit	r2, r2
 800762e:	fab2 f282 	clz	r2, r2
 8007632:	fa01 f202 	lsl.w	r2, r1, r2
 8007636:	4313      	orrs	r3, r2
 8007638:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800763a:	0852      	lsrs	r2, r2, #1
 800763c:	3a01      	subs	r2, #1
 800763e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8007642:	fa91 f1a1 	rbit	r1, r1
 8007646:	fab1 f181 	clz	r1, r1
 800764a:	408a      	lsls	r2, r1
 800764c:	4313      	orrs	r3, r2
 800764e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007650:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8007654:	fa92 f2a2 	rbit	r2, r2
 8007658:	fab2 f282 	clz	r2, r2
 800765c:	fa01 f202 	lsl.w	r2, r1, r2
 8007660:	4313      	orrs	r3, r2
 8007662:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007664:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8007668:	fa92 f2a2 	rbit	r2, r2
 800766c:	fab2 f282 	clz	r2, r2
 8007670:	fa01 f202 	lsl.w	r2, r1, r2
 8007674:	4313      	orrs	r3, r2
 8007676:	4a11      	ldr	r2, [pc, #68]	; (80076bc <HAL_RCC_OscConfig+0x418>)
 8007678:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800767a:	6813      	ldr	r3, [r2, #0]
 800767c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007680:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007682:	f7fc fc37 	bl	8003ef4 <HAL_GetTick>
 8007686:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007688:	4b0c      	ldr	r3, [pc, #48]	; (80076bc <HAL_RCC_OscConfig+0x418>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007690:	d106      	bne.n	80076a0 <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007692:	f7fc fc2f 	bl	8003ef4 <HAL_GetTick>
 8007696:	1b00      	subs	r0, r0, r4
 8007698:	2802      	cmp	r0, #2
 800769a:	d9f5      	bls.n	8007688 <HAL_RCC_OscConfig+0x3e4>
            return HAL_TIMEOUT;
 800769c:	2003      	movs	r0, #3
 800769e:	e008      	b.n	80076b2 <HAL_RCC_OscConfig+0x40e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80076a0:	2000      	movs	r0, #0
 80076a2:	e006      	b.n	80076b2 <HAL_RCC_OscConfig+0x40e>
 80076a4:	2000      	movs	r0, #0
 80076a6:	e004      	b.n	80076b2 <HAL_RCC_OscConfig+0x40e>
        return HAL_ERROR;
 80076a8:	2001      	movs	r0, #1
 80076aa:	e002      	b.n	80076b2 <HAL_RCC_OscConfig+0x40e>
        return HAL_ERROR;
 80076ac:	2001      	movs	r0, #1
 80076ae:	e000      	b.n	80076b2 <HAL_RCC_OscConfig+0x40e>
  return HAL_OK;
 80076b0:	2000      	movs	r0, #0
}
 80076b2:	b002      	add	sp, #8
 80076b4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80076b6:	2001      	movs	r0, #1
 80076b8:	e7fb      	b.n	80076b2 <HAL_RCC_OscConfig+0x40e>
 80076ba:	bf00      	nop
 80076bc:	40023800 	.word	0x40023800

080076c0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076c0:	4b21      	ldr	r3, [pc, #132]	; (8007748 <HAL_RCC_GetSysClockFreq+0x88>)
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f003 030c 	and.w	r3, r3, #12
 80076c8:	2b04      	cmp	r3, #4
 80076ca:	d038      	beq.n	800773e <HAL_RCC_GetSysClockFreq+0x7e>
 80076cc:	2b08      	cmp	r3, #8
 80076ce:	d138      	bne.n	8007742 <HAL_RCC_GetSysClockFreq+0x82>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076d0:	4b1d      	ldr	r3, [pc, #116]	; (8007748 <HAL_RCC_GetSysClockFreq+0x88>)
 80076d2:	6858      	ldr	r0, [r3, #4]
 80076d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80076de:	d01e      	beq.n	800771e <HAL_RCC_GetSysClockFreq+0x5e>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80076e0:	4a1a      	ldr	r2, [pc, #104]	; (800774c <HAL_RCC_GetSysClockFreq+0x8c>)
 80076e2:	fbb2 f2f0 	udiv	r2, r2, r0
 80076e6:	4b18      	ldr	r3, [pc, #96]	; (8007748 <HAL_RCC_GetSysClockFreq+0x88>)
 80076e8:	6858      	ldr	r0, [r3, #4]
 80076ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076ee:	4018      	ands	r0, r3
 80076f0:	fa93 f3a3 	rbit	r3, r3
 80076f4:	fab3 f383 	clz	r3, r3
 80076f8:	40d8      	lsrs	r0, r3
 80076fa:	fb00 f002 	mul.w	r0, r0, r2
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80076fe:	4b12      	ldr	r3, [pc, #72]	; (8007748 <HAL_RCC_GetSysClockFreq+0x88>)
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007706:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800770a:	fa92 f2a2 	rbit	r2, r2
 800770e:	fab2 f282 	clz	r2, r2
 8007712:	40d3      	lsrs	r3, r2
 8007714:	3301      	adds	r3, #1
 8007716:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 8007718:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800771c:	4770      	bx	lr
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800771e:	4a0c      	ldr	r2, [pc, #48]	; (8007750 <HAL_RCC_GetSysClockFreq+0x90>)
 8007720:	fbb2 f2f0 	udiv	r2, r2, r0
 8007724:	4b08      	ldr	r3, [pc, #32]	; (8007748 <HAL_RCC_GetSysClockFreq+0x88>)
 8007726:	6858      	ldr	r0, [r3, #4]
 8007728:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800772c:	4018      	ands	r0, r3
 800772e:	fa93 f3a3 	rbit	r3, r3
 8007732:	fab3 f383 	clz	r3, r3
 8007736:	40d8      	lsrs	r0, r3
 8007738:	fb00 f002 	mul.w	r0, r0, r2
 800773c:	e7df      	b.n	80076fe <HAL_RCC_GetSysClockFreq+0x3e>
      sysclockfreq = HSE_VALUE;
 800773e:	4803      	ldr	r0, [pc, #12]	; (800774c <HAL_RCC_GetSysClockFreq+0x8c>)
 8007740:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007742:	4803      	ldr	r0, [pc, #12]	; (8007750 <HAL_RCC_GetSysClockFreq+0x90>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	40023800 	.word	0x40023800
 800774c:	017d7840 	.word	0x017d7840
 8007750:	00f42400 	.word	0x00f42400

08007754 <HAL_RCC_ClockConfig>:
{
 8007754:	b570      	push	{r4, r5, r6, lr}
 8007756:	4604      	mov	r4, r0
 8007758:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800775a:	4b5c      	ldr	r3, [pc, #368]	; (80078cc <HAL_RCC_ClockConfig+0x178>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	428b      	cmp	r3, r1
 8007764:	d20b      	bcs.n	800777e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007766:	4a59      	ldr	r2, [pc, #356]	; (80078cc <HAL_RCC_ClockConfig+0x178>)
 8007768:	6813      	ldr	r3, [r2, #0]
 800776a:	f023 030f 	bic.w	r3, r3, #15
 800776e:	430b      	orrs	r3, r1
 8007770:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007772:	6813      	ldr	r3, [r2, #0]
 8007774:	f003 030f 	and.w	r3, r3, #15
 8007778:	428b      	cmp	r3, r1
 800777a:	f040 80a0 	bne.w	80078be <HAL_RCC_ClockConfig+0x16a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	f013 0f02 	tst.w	r3, #2
 8007784:	d006      	beq.n	8007794 <HAL_RCC_ClockConfig+0x40>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007786:	4a52      	ldr	r2, [pc, #328]	; (80078d0 <HAL_RCC_ClockConfig+0x17c>)
 8007788:	6893      	ldr	r3, [r2, #8]
 800778a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800778e:	68a1      	ldr	r1, [r4, #8]
 8007790:	430b      	orrs	r3, r1
 8007792:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	f013 0f01 	tst.w	r3, #1
 800779a:	d052      	beq.n	8007842 <HAL_RCC_ClockConfig+0xee>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800779c:	6863      	ldr	r3, [r4, #4]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d023      	beq.n	80077ea <HAL_RCC_ClockConfig+0x96>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d028      	beq.n	80077f8 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077a6:	4a4a      	ldr	r2, [pc, #296]	; (80078d0 <HAL_RCC_ClockConfig+0x17c>)
 80077a8:	6812      	ldr	r2, [r2, #0]
 80077aa:	f012 0f02 	tst.w	r2, #2
 80077ae:	f000 8088 	beq.w	80078c2 <HAL_RCC_ClockConfig+0x16e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80077b2:	4947      	ldr	r1, [pc, #284]	; (80078d0 <HAL_RCC_ClockConfig+0x17c>)
 80077b4:	688a      	ldr	r2, [r1, #8]
 80077b6:	f022 0203 	bic.w	r2, r2, #3
 80077ba:	4313      	orrs	r3, r2
 80077bc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80077be:	f7fc fb99 	bl	8003ef4 <HAL_GetTick>
 80077c2:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077c4:	6863      	ldr	r3, [r4, #4]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d01d      	beq.n	8007806 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d02a      	beq.n	8007824 <HAL_RCC_ClockConfig+0xd0>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80077ce:	4b40      	ldr	r3, [pc, #256]	; (80078d0 <HAL_RCC_ClockConfig+0x17c>)
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f013 0f0c 	tst.w	r3, #12
 80077d6:	d034      	beq.n	8007842 <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077d8:	f7fc fb8c 	bl	8003ef4 <HAL_GetTick>
 80077dc:	1b83      	subs	r3, r0, r6
 80077de:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d9f3      	bls.n	80077ce <HAL_RCC_ClockConfig+0x7a>
          return HAL_TIMEOUT;
 80077e6:	2003      	movs	r0, #3
 80077e8:	e068      	b.n	80078bc <HAL_RCC_ClockConfig+0x168>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077ea:	4a39      	ldr	r2, [pc, #228]	; (80078d0 <HAL_RCC_ClockConfig+0x17c>)
 80077ec:	6812      	ldr	r2, [r2, #0]
 80077ee:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80077f2:	d1de      	bne.n	80077b2 <HAL_RCC_ClockConfig+0x5e>
        return HAL_ERROR;
 80077f4:	2001      	movs	r0, #1
 80077f6:	e061      	b.n	80078bc <HAL_RCC_ClockConfig+0x168>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077f8:	4a35      	ldr	r2, [pc, #212]	; (80078d0 <HAL_RCC_ClockConfig+0x17c>)
 80077fa:	6812      	ldr	r2, [r2, #0]
 80077fc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8007800:	d1d7      	bne.n	80077b2 <HAL_RCC_ClockConfig+0x5e>
        return HAL_ERROR;
 8007802:	2001      	movs	r0, #1
 8007804:	e05a      	b.n	80078bc <HAL_RCC_ClockConfig+0x168>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007806:	4b32      	ldr	r3, [pc, #200]	; (80078d0 <HAL_RCC_ClockConfig+0x17c>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 030c 	and.w	r3, r3, #12
 800780e:	2b04      	cmp	r3, #4
 8007810:	d017      	beq.n	8007842 <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007812:	f7fc fb6f 	bl	8003ef4 <HAL_GetTick>
 8007816:	1b83      	subs	r3, r0, r6
 8007818:	f241 3288 	movw	r2, #5000	; 0x1388
 800781c:	4293      	cmp	r3, r2
 800781e:	d9f2      	bls.n	8007806 <HAL_RCC_ClockConfig+0xb2>
          return HAL_TIMEOUT;
 8007820:	2003      	movs	r0, #3
 8007822:	e04b      	b.n	80078bc <HAL_RCC_ClockConfig+0x168>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007824:	4b2a      	ldr	r3, [pc, #168]	; (80078d0 <HAL_RCC_ClockConfig+0x17c>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f003 030c 	and.w	r3, r3, #12
 800782c:	2b08      	cmp	r3, #8
 800782e:	d008      	beq.n	8007842 <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007830:	f7fc fb60 	bl	8003ef4 <HAL_GetTick>
 8007834:	1b80      	subs	r0, r0, r6
 8007836:	f241 3388 	movw	r3, #5000	; 0x1388
 800783a:	4298      	cmp	r0, r3
 800783c:	d9f2      	bls.n	8007824 <HAL_RCC_ClockConfig+0xd0>
          return HAL_TIMEOUT;
 800783e:	2003      	movs	r0, #3
 8007840:	e03c      	b.n	80078bc <HAL_RCC_ClockConfig+0x168>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8007842:	4b22      	ldr	r3, [pc, #136]	; (80078cc <HAL_RCC_ClockConfig+0x178>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 030f 	and.w	r3, r3, #15
 800784a:	42ab      	cmp	r3, r5
 800784c:	d90a      	bls.n	8007864 <HAL_RCC_ClockConfig+0x110>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800784e:	4a1f      	ldr	r2, [pc, #124]	; (80078cc <HAL_RCC_ClockConfig+0x178>)
 8007850:	6813      	ldr	r3, [r2, #0]
 8007852:	f023 030f 	bic.w	r3, r3, #15
 8007856:	432b      	orrs	r3, r5
 8007858:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800785a:	6813      	ldr	r3, [r2, #0]
 800785c:	f003 030f 	and.w	r3, r3, #15
 8007860:	42ab      	cmp	r3, r5
 8007862:	d130      	bne.n	80078c6 <HAL_RCC_ClockConfig+0x172>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	f013 0f04 	tst.w	r3, #4
 800786a:	d006      	beq.n	800787a <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800786c:	4a18      	ldr	r2, [pc, #96]	; (80078d0 <HAL_RCC_ClockConfig+0x17c>)
 800786e:	6893      	ldr	r3, [r2, #8]
 8007870:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8007874:	68e1      	ldr	r1, [r4, #12]
 8007876:	430b      	orrs	r3, r1
 8007878:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	f013 0f08 	tst.w	r3, #8
 8007880:	d007      	beq.n	8007892 <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007882:	4a13      	ldr	r2, [pc, #76]	; (80078d0 <HAL_RCC_ClockConfig+0x17c>)
 8007884:	6893      	ldr	r3, [r2, #8]
 8007886:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800788a:	6921      	ldr	r1, [r4, #16]
 800788c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007890:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8007892:	f7ff ff15 	bl	80076c0 <HAL_RCC_GetSysClockFreq>
 8007896:	4b0e      	ldr	r3, [pc, #56]	; (80078d0 <HAL_RCC_ClockConfig+0x17c>)
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800789e:	22f0      	movs	r2, #240	; 0xf0
 80078a0:	fa92 f2a2 	rbit	r2, r2
 80078a4:	fab2 f282 	clz	r2, r2
 80078a8:	40d3      	lsrs	r3, r2
 80078aa:	4a0a      	ldr	r2, [pc, #40]	; (80078d4 <HAL_RCC_ClockConfig+0x180>)
 80078ac:	5cd3      	ldrb	r3, [r2, r3]
 80078ae:	40d8      	lsrs	r0, r3
 80078b0:	4b09      	ldr	r3, [pc, #36]	; (80078d8 <HAL_RCC_ClockConfig+0x184>)
 80078b2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80078b4:	2000      	movs	r0, #0
 80078b6:	f7fc faf3 	bl	8003ea0 <HAL_InitTick>
  return HAL_OK;
 80078ba:	2000      	movs	r0, #0
}
 80078bc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80078be:	2001      	movs	r0, #1
 80078c0:	e7fc      	b.n	80078bc <HAL_RCC_ClockConfig+0x168>
        return HAL_ERROR;
 80078c2:	2001      	movs	r0, #1
 80078c4:	e7fa      	b.n	80078bc <HAL_RCC_ClockConfig+0x168>
      return HAL_ERROR;
 80078c6:	2001      	movs	r0, #1
 80078c8:	e7f8      	b.n	80078bc <HAL_RCC_ClockConfig+0x168>
 80078ca:	bf00      	nop
 80078cc:	40023c00 	.word	0x40023c00
 80078d0:	40023800 	.word	0x40023800
 80078d4:	08013290 	.word	0x08013290
 80078d8:	20000094 	.word	0x20000094

080078dc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80078dc:	4b01      	ldr	r3, [pc, #4]	; (80078e4 <HAL_RCC_GetHCLKFreq+0x8>)
 80078de:	6818      	ldr	r0, [r3, #0]
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	20000094 	.word	0x20000094

080078e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 80078e8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80078ea:	f7ff fff7 	bl	80078dc <HAL_RCC_GetHCLKFreq>
 80078ee:	4b07      	ldr	r3, [pc, #28]	; (800790c <HAL_RCC_GetPCLK1Freq+0x24>)
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80078f6:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80078fa:	fa92 f2a2 	rbit	r2, r2
 80078fe:	fab2 f282 	clz	r2, r2
 8007902:	40d3      	lsrs	r3, r2
 8007904:	4a02      	ldr	r2, [pc, #8]	; (8007910 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007906:	5cd3      	ldrb	r3, [r2, r3]
}
 8007908:	40d8      	lsrs	r0, r3
 800790a:	bd08      	pop	{r3, pc}
 800790c:	40023800 	.word	0x40023800
 8007910:	080132a0 	.word	0x080132a0

08007914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007914:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8007916:	f7ff ffe1 	bl	80078dc <HAL_RCC_GetHCLKFreq>
 800791a:	4b07      	ldr	r3, [pc, #28]	; (8007938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007922:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8007926:	fa92 f2a2 	rbit	r2, r2
 800792a:	fab2 f282 	clz	r2, r2
 800792e:	40d3      	lsrs	r3, r2
 8007930:	4a02      	ldr	r2, [pc, #8]	; (800793c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007932:	5cd3      	ldrb	r3, [r2, r3]
} 
 8007934:	40d8      	lsrs	r0, r3
 8007936:	bd08      	pop	{r3, pc}
 8007938:	40023800 	.word	0x40023800
 800793c:	080132a0 	.word	0x080132a0

08007940 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007942:	b083      	sub	sp, #12
 8007944:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007946:	6806      	ldr	r6, [r0, #0]
 8007948:	f016 0601 	ands.w	r6, r6, #1
 800794c:	d00d      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800794e:	4bb5      	ldr	r3, [pc, #724]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007950:	689a      	ldr	r2, [r3, #8]
 8007952:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007956:	609a      	str	r2, [r3, #8]
 8007958:	689a      	ldr	r2, [r3, #8]
 800795a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800795c:	430a      	orrs	r2, r1
 800795e:	609a      	str	r2, [r3, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007960:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 8155 	beq.w	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  uint32_t plli2sused = 0;
 8007968:	2600      	movs	r6, #0
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800796a:	6825      	ldr	r5, [r4, #0]
 800796c:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8007970:	d011      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007972:	4aac      	ldr	r2, [pc, #688]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007974:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8007978:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800797c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800797e:	430b      	orrs	r3, r1
 8007980:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007984:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800798a:	f000 8144 	beq.w	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 8143 	beq.w	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  uint32_t pllsaiused = 0;
 8007994:	2500      	movs	r5, #0
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800799c:	d00f      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800799e:	4aa1      	ldr	r2, [pc, #644]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80079a0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80079a4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80079a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80079aa:	430b      	orrs	r3, r1
 80079ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80079b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079b6:	f000 8132 	beq.w	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80079ba:	b903      	cbnz	r3, 80079be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1; 
 80079bc:	2501      	movs	r5, #1
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80079c4:	d000      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {    
      plli2sused = 1; 
 80079c6:	2601      	movs	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80079c8:	f013 0f20 	tst.w	r3, #32
 80079cc:	f040 812c 	bne.w	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	f013 0f10 	tst.w	r3, #16
 80079d6:	d00c      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079d8:	4b92      	ldr	r3, [pc, #584]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80079da:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80079de:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80079e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80079e6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80079ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80079ec:	430a      	orrs	r2, r1
 80079ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80079f8:	d008      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80079fa:	4a8a      	ldr	r2, [pc, #552]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80079fc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007a00:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007a04:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007a06:	430b      	orrs	r3, r1
 8007a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007a12:	d008      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a14:	4a83      	ldr	r2, [pc, #524]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007a16:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007a1a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8007a1e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8007a20:	430b      	orrs	r3, r1
 8007a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007a2c:	d008      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a2e:	4a7d      	ldr	r2, [pc, #500]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007a30:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007a34:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007a38:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8007a3a:	430b      	orrs	r3, r1
 8007a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a40:	6823      	ldr	r3, [r4, #0]
 8007a42:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007a46:	d008      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a48:	4a76      	ldr	r2, [pc, #472]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007a4a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007a4e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007a52:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8007a54:	430b      	orrs	r3, r1
 8007a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007a60:	d008      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a62:	4a70      	ldr	r2, [pc, #448]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007a64:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007a68:	f023 0303 	bic.w	r3, r3, #3
 8007a6c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007a6e:	430b      	orrs	r3, r1
 8007a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a7a:	d008      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a7c:	4a69      	ldr	r2, [pc, #420]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007a7e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007a82:	f023 030c 	bic.w	r3, r3, #12
 8007a86:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007a88:	430b      	orrs	r3, r1
 8007a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007a94:	d008      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a96:	4a63      	ldr	r2, [pc, #396]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007a98:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007a9c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007aa0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007aa2:	430b      	orrs	r3, r1
 8007aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007aae:	d008      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ab0:	4a5c      	ldr	r2, [pc, #368]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007ab2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007ab6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007aba:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007abc:	430b      	orrs	r3, r1
 8007abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007ac8:	d008      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007aca:	4a56      	ldr	r2, [pc, #344]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007acc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ad4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007ad6:	430b      	orrs	r3, r1
 8007ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8007ae2:	d008      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007ae4:	4a4f      	ldr	r2, [pc, #316]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007ae6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007aea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007aee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007af0:	430b      	orrs	r3, r1
 8007af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8007afc:	d008      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007afe:	4a49      	ldr	r2, [pc, #292]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007b00:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007b04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007b08:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007b0a:	430b      	orrs	r3, r1
 8007b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007b16:	d008      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007b18:	4a42      	ldr	r2, [pc, #264]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007b1a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007b1e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007b22:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8007b24:	430b      	orrs	r3, r1
 8007b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007b30:	d008      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007b32:	4a3c      	ldr	r2, [pc, #240]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007b34:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007b38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b3c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8007b3e:	430b      	orrs	r3, r1
 8007b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007b44:	6823      	ldr	r3, [r4, #0]
 8007b46:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8007b4a:	d00d      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007b4c:	4a35      	ldr	r2, [pc, #212]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007b4e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007b52:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8007b56:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8007b58:	430b      	orrs	r3, r1
 8007b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007b5e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007b60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b64:	f000 80c6 	beq.w	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	f013 0f08 	tst.w	r3, #8
 8007b6e:	d000      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1; 
 8007b70:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b72:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8007b76:	d008      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b78:	4a2a      	ldr	r2, [pc, #168]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007b7a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007b7e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8007b82:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8007b84:	430b      	orrs	r3, r1
 8007b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007b90:	d009      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007b92:	4a24      	ldr	r2, [pc, #144]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007b94:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b9c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8007ba0:	430b      	orrs	r3, r1
 8007ba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8007bac:	d009      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007bae:	4a1d      	ldr	r2, [pc, #116]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007bb0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007bb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007bb8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8007bbc:	430b      	orrs	r3, r1
 8007bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007bc8:	d009      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007bca:	4a16      	ldr	r2, [pc, #88]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007bcc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8007bd0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007bd4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007be4:	d009      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007be6:	4a0f      	ldr	r2, [pc, #60]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007be8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8007bec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007bf0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007bf4:	430b      	orrs	r3, r1
 8007bf6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007bfa:	2e00      	cmp	r6, #0
 8007bfc:	d17c      	bne.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c04:	d078      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007c06:	2d01      	cmp	r5, #1
 8007c08:	f000 819e 	beq.w	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x608>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8007c0c:	2000      	movs	r0, #0
}
 8007c0e:	b003      	add	sp, #12
 8007c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1; 
 8007c12:	2601      	movs	r6, #1
 8007c14:	e6a9      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1; 
 8007c16:	2601      	movs	r6, #1
 8007c18:	e6b9      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1; 
 8007c1a:	2501      	movs	r5, #1
 8007c1c:	e6bb      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1; 
 8007c1e:	2601      	movs	r6, #1
 8007c20:	e6cb      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007c22:	bf00      	nop
 8007c24:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c28:	4bc4      	ldr	r3, [pc, #784]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007c30:	641a      	str	r2, [r3, #64]	; 0x40
 8007c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c38:	9301      	str	r3, [sp, #4]
 8007c3a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8007c3c:	4ac0      	ldr	r2, [pc, #768]	; (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8007c3e:	6813      	ldr	r3, [r2, #0]
 8007c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c44:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007c46:	f7fc f955 	bl	8003ef4 <HAL_GetTick>
 8007c4a:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007c4c:	4bbc      	ldr	r3, [pc, #752]	; (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007c54:	d106      	bne.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x324>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c56:	f7fc f94d 	bl	8003ef4 <HAL_GetTick>
 8007c5a:	1bc0      	subs	r0, r0, r7
 8007c5c:	2864      	cmp	r0, #100	; 0x64
 8007c5e:	d9f5      	bls.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
 8007c60:	2003      	movs	r0, #3
 8007c62:	e7d4      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c64:	4bb5      	ldr	r3, [pc, #724]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c68:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007c6c:	d015      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007c6e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007c70:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d010      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c78:	4bb0      	ldr	r3, [pc, #704]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007c7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c7c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c80:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007c82:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8007c86:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c88:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007c8a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007c8e:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8007c90:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c94:	f013 0f01 	tst.w	r3, #1
 8007c98:	d112      	bne.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007c9c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007ca0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007ca4:	d01d      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8007ca6:	4aa5      	ldr	r2, [pc, #660]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007ca8:	6893      	ldr	r3, [r2, #8]
 8007caa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007cae:	6093      	str	r3, [r2, #8]
 8007cb0:	49a2      	ldr	r1, [pc, #648]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007cb2:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8007cb4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007cb6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	670b      	str	r3, [r1, #112]	; 0x70
 8007cbe:	e687      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8007cc0:	f7fc f918 	bl	8003ef4 <HAL_GetTick>
 8007cc4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cc6:	4b9d      	ldr	r3, [pc, #628]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cca:	f013 0f02 	tst.w	r3, #2
 8007cce:	d1e4      	bne.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cd0:	f7fc f910 	bl	8003ef4 <HAL_GetTick>
 8007cd4:	1bc0      	subs	r0, r0, r7
 8007cd6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cda:	4298      	cmp	r0, r3
 8007cdc:	d9f3      	bls.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x386>
            return HAL_TIMEOUT;
 8007cde:	2003      	movs	r0, #3
 8007ce0:	e795      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ce2:	4896      	ldr	r0, [pc, #600]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007ce4:	6882      	ldr	r2, [r0, #8]
 8007ce6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8007cea:	4996      	ldr	r1, [pc, #600]	; (8007f44 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8007cec:	4019      	ands	r1, r3
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	6082      	str	r2, [r0, #8]
 8007cf2:	e7dd      	b.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      pllsaiused = 1; 
 8007cf4:	2501      	movs	r5, #1
 8007cf6:	e737      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_PLLI2S_DISABLE();  
 8007cf8:	4a90      	ldr	r2, [pc, #576]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007cfa:	6813      	ldr	r3, [r2, #0]
 8007cfc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d00:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007d02:	f7fc f8f7 	bl	8003ef4 <HAL_GetTick>
 8007d06:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d08:	4b8c      	ldr	r3, [pc, #560]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007d10:	d006      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d12:	f7fc f8ef 	bl	8003ef4 <HAL_GetTick>
 8007d16:	1b80      	subs	r0, r0, r6
 8007d18:	2864      	cmp	r0, #100	; 0x64
 8007d1a:	d9f5      	bls.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
 8007d1c:	2003      	movs	r0, #3
 8007d1e:	e776      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	f013 0f01 	tst.w	r3, #1
 8007d26:	d03a      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8007d28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d2a:	bbc3      	cbnz	r3, 8007d9e <HAL_RCCEx_PeriphCLKConfig+0x45e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8007d2c:	4e83      	ldr	r6, [pc, #524]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007d2e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8007d32:	f403 3c40 	and.w	ip, r3, #196608	; 0x30000
 8007d36:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8007d3a:	fa90 f3a0 	rbit	r3, r0
 8007d3e:	fab3 f383 	clz	r3, r3
 8007d42:	fa2c fc03 	lsr.w	ip, ip, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8007d46:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8007d4a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8007d4e:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8007d52:	fa91 f3a1 	rbit	r3, r1
 8007d56:	fab3 f383 	clz	r3, r3
 8007d5a:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d5c:	6863      	ldr	r3, [r4, #4]
 8007d5e:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8007d62:	fa97 f7a7 	rbit	r7, r7
 8007d66:	fab7 f787 	clz	r7, r7
 8007d6a:	40bb      	lsls	r3, r7
 8007d6c:	fa90 f0a0 	rbit	r0, r0
 8007d70:	fab0 f080 	clz	r0, r0
 8007d74:	fa0c f000 	lsl.w	r0, ip, r0
 8007d78:	4303      	orrs	r3, r0
 8007d7a:	fa91 f1a1 	rbit	r1, r1
 8007d7e:	fab1 f181 	clz	r1, r1
 8007d82:	408a      	lsls	r2, r1
 8007d84:	4313      	orrs	r3, r2
 8007d86:	68a1      	ldr	r1, [r4, #8]
 8007d88:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8007d8c:	fa92 f2a2 	rbit	r2, r2
 8007d90:	fab2 f282 	clz	r2, r2
 8007d94:	fa01 f202 	lsl.w	r2, r1, r2
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8007da4:	d003      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x46e>
 8007da6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007da8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8007dac:	d006      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007dae:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007db2:	d045      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x500>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8007db4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007dba:	d141      	bne.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x500>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8007dbc:	4e5f      	ldr	r6, [pc, #380]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007dbe:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
 8007dc2:	f400 3c40 	and.w	ip, r0, #196608	; 0x30000
 8007dc6:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8007dca:	fa90 f3a0 	rbit	r3, r0
 8007dce:	fab3 f383 	clz	r3, r3
 8007dd2:	fa2c fc03 	lsr.w	ip, ip, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8007dd6:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8007dda:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8007dde:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8007de2:	fa91 f3a1 	rbit	r3, r1
 8007de6:	fab3 f383 	clz	r3, r3
 8007dea:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007dec:	6863      	ldr	r3, [r4, #4]
 8007dee:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8007df2:	fa97 f7a7 	rbit	r7, r7
 8007df6:	fab7 f787 	clz	r7, r7
 8007dfa:	40bb      	lsls	r3, r7
 8007dfc:	fa90 f0a0 	rbit	r0, r0
 8007e00:	fab0 f080 	clz	r0, r0
 8007e04:	fa0c f000 	lsl.w	r0, ip, r0
 8007e08:	4303      	orrs	r3, r0
 8007e0a:	68e7      	ldr	r7, [r4, #12]
 8007e0c:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8007e10:	fa90 f0a0 	rbit	r0, r0
 8007e14:	fab0 f080 	clz	r0, r0
 8007e18:	fa07 f000 	lsl.w	r0, r7, r0
 8007e1c:	4303      	orrs	r3, r0
 8007e1e:	fa91 f1a1 	rbit	r1, r1
 8007e22:	fab1 f181 	clz	r1, r1
 8007e26:	408a      	lsls	r2, r1
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8007e2e:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8007e32:	f023 031f 	bic.w	r3, r3, #31
 8007e36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007e38:	3a01      	subs	r2, #1
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007e46:	d037      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8007e48:	4e3c      	ldr	r6, [pc, #240]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007e4a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
 8007e4e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8007e52:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 8007e56:	fa9c f3ac 	rbit	r3, ip
 8007e5a:	fab3 f383 	clz	r3, r3
 8007e5e:	40d9      	lsrs	r1, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8007e60:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8007e64:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8007e68:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 8007e6c:	fa90 f3a0 	rbit	r3, r0
 8007e70:	fab3 f383 	clz	r3, r3
 8007e74:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007e76:	6863      	ldr	r3, [r4, #4]
 8007e78:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8007e7c:	fa97 f7a7 	rbit	r7, r7
 8007e80:	fab7 f787 	clz	r7, r7
 8007e84:	40bb      	lsls	r3, r7
 8007e86:	6927      	ldr	r7, [r4, #16]
 8007e88:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
 8007e8c:	fa9e feae 	rbit	lr, lr
 8007e90:	fabe fe8e 	clz	lr, lr
 8007e94:	fa07 f70e 	lsl.w	r7, r7, lr
 8007e98:	433b      	orrs	r3, r7
 8007e9a:	fa9c fcac 	rbit	ip, ip
 8007e9e:	fabc fc8c 	clz	ip, ip
 8007ea2:	fa01 f10c 	lsl.w	r1, r1, ip
 8007ea6:	430b      	orrs	r3, r1
 8007ea8:	fa90 f0a0 	rbit	r0, r0
 8007eac:	fab0 f080 	clz	r0, r0
 8007eb0:	4082      	lsls	r2, r0
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007ebe:	d028      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ec0:	6863      	ldr	r3, [r4, #4]
 8007ec2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8007ec6:	fa92 f2a2 	rbit	r2, r2
 8007eca:	fab2 f282 	clz	r2, r2
 8007ece:	4093      	lsls	r3, r2
 8007ed0:	6921      	ldr	r1, [r4, #16]
 8007ed2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007ed6:	fa92 f2a2 	rbit	r2, r2
 8007eda:	fab2 f282 	clz	r2, r2
 8007ede:	fa01 f202 	lsl.w	r2, r1, r2
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	68e1      	ldr	r1, [r4, #12]
 8007ee6:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8007eea:	fa92 f2a2 	rbit	r2, r2
 8007eee:	fab2 f282 	clz	r2, r2
 8007ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	68a1      	ldr	r1, [r4, #8]
 8007efa:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8007efe:	fa92 f2a2 	rbit	r2, r2
 8007f02:	fab2 f282 	clz	r2, r2
 8007f06:	fa01 f202 	lsl.w	r2, r1, r2
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	4a0b      	ldr	r2, [pc, #44]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007f0e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8007f12:	4a0a      	ldr	r2, [pc, #40]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007f14:	6813      	ldr	r3, [r2, #0]
 8007f16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f1a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007f1c:	f7fb ffea 	bl	8003ef4 <HAL_GetTick>
 8007f20:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f22:	4b06      	ldr	r3, [pc, #24]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007f2a:	f47f ae6c 	bne.w	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f2e:	f7fb ffe1 	bl	8003ef4 <HAL_GetTick>
 8007f32:	1b80      	subs	r0, r0, r6
 8007f34:	2864      	cmp	r0, #100	; 0x64
 8007f36:	d9f4      	bls.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
        return HAL_TIMEOUT;
 8007f38:	2003      	movs	r0, #3
 8007f3a:	e668      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8007f3c:	40023800 	.word	0x40023800
 8007f40:	40007000 	.word	0x40007000
 8007f44:	0ffffcff 	.word	0x0ffffcff
    __HAL_RCC_PLLSAI_DISABLE(); 
 8007f48:	4a7d      	ldr	r2, [pc, #500]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007f4a:	6813      	ldr	r3, [r2, #0]
 8007f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f50:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007f52:	f7fb ffcf 	bl	8003ef4 <HAL_GetTick>
 8007f56:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f58:	4b79      	ldr	r3, [pc, #484]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8007f60:	d006      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x630>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007f62:	f7fb ffc7 	bl	8003ef4 <HAL_GetTick>
 8007f66:	1b40      	subs	r0, r0, r5
 8007f68:	2864      	cmp	r0, #100	; 0x64
 8007f6a:	d9f5      	bls.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x618>
        return HAL_TIMEOUT;
 8007f6c:	2003      	movs	r0, #3
 8007f6e:	e64e      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8007f76:	d001      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8007f78:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007f7a:	b12a      	cbz	r2, 8007f88 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8007f7c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007f80:	d044      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d141      	bne.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8007f88:	4d6d      	ldr	r5, [pc, #436]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007f8a:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
 8007f8e:	f407 3740 	and.w	r7, r7, #196608	; 0x30000
 8007f92:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8007f96:	fa90 f3a0 	rbit	r3, r0
 8007f9a:	fab3 f383 	clz	r3, r3
 8007f9e:	40df      	lsrs	r7, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8007fa0:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8007fa4:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8007fa8:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8007fac:	fa91 f3a1 	rbit	r3, r1
 8007fb0:	fab3 f383 	clz	r3, r3
 8007fb4:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007fb6:	6963      	ldr	r3, [r4, #20]
 8007fb8:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 8007fbc:	fa96 f6a6 	rbit	r6, r6
 8007fc0:	fab6 f686 	clz	r6, r6
 8007fc4:	40b3      	lsls	r3, r6
 8007fc6:	fa90 f0a0 	rbit	r0, r0
 8007fca:	fab0 f080 	clz	r0, r0
 8007fce:	fa07 f000 	lsl.w	r0, r7, r0
 8007fd2:	4303      	orrs	r3, r0
 8007fd4:	69a6      	ldr	r6, [r4, #24]
 8007fd6:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8007fda:	fa90 f0a0 	rbit	r0, r0
 8007fde:	fab0 f080 	clz	r0, r0
 8007fe2:	fa06 f000 	lsl.w	r0, r6, r0
 8007fe6:	4303      	orrs	r3, r0
 8007fe8:	fa91 f1a1 	rbit	r1, r1
 8007fec:	fab1 f181 	clz	r1, r1
 8007ff0:	408a      	lsls	r2, r1
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007ff8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8007ffc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8008000:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008002:	3a01      	subs	r2, #1
 8008004:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008008:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8008012:	d003      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8008014:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8008016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800801a:	d056      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x78a>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	f013 0f08 	tst.w	r3, #8
 8008022:	d03e      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x762>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8008024:	4d46      	ldr	r5, [pc, #280]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008026:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 800802a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800802e:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8008032:	fa90 f3a0 	rbit	r3, r0
 8008036:	fab3 f383 	clz	r3, r3
 800803a:	40da      	lsrs	r2, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800803c:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8008040:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8008044:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 8008048:	fa96 f3a6 	rbit	r3, r6
 800804c:	fab3 f383 	clz	r3, r3
 8008050:	40d9      	lsrs	r1, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008052:	6963      	ldr	r3, [r4, #20]
 8008054:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8008058:	fa97 f7a7 	rbit	r7, r7
 800805c:	fab7 f787 	clz	r7, r7
 8008060:	40bb      	lsls	r3, r7
 8008062:	fa96 f6a6 	rbit	r6, r6
 8008066:	fab6 f686 	clz	r6, r6
 800806a:	40b1      	lsls	r1, r6
 800806c:	430b      	orrs	r3, r1
 800806e:	fa90 f1a0 	rbit	r1, r0
 8008072:	fab1 f181 	clz	r1, r1
 8008076:	408a      	lsls	r2, r1
 8008078:	4313      	orrs	r3, r2
 800807a:	69e1      	ldr	r1, [r4, #28]
 800807c:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8008080:	fa92 f2a2 	rbit	r2, r2
 8008084:	fab2 f282 	clz	r2, r2
 8008088:	fa01 f202 	lsl.w	r2, r1, r2
 800808c:	4313      	orrs	r3, r2
 800808e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008092:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8008096:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800809a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800809c:	4313      	orrs	r3, r2
 800809e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80080a2:	4a27      	ldr	r2, [pc, #156]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80080a4:	6813      	ldr	r3, [r2, #0]
 80080a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080aa:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80080ac:	f7fb ff22 	bl	8003ef4 <HAL_GetTick>
 80080b0:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80080b2:	4b23      	ldr	r3, [pc, #140]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80080ba:	d13e      	bne.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x7fa>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80080bc:	f7fb ff1a 	bl	8003ef4 <HAL_GetTick>
 80080c0:	1b00      	subs	r0, r0, r4
 80080c2:	2864      	cmp	r0, #100	; 0x64
 80080c4:	d9f5      	bls.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x772>
        return HAL_TIMEOUT;
 80080c6:	2003      	movs	r0, #3
 80080c8:	e5a1      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80080ca:	4e1d      	ldr	r6, [pc, #116]	; (8008140 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80080cc:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 80080d0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80080d4:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 80080d8:	fa95 f3a5 	rbit	r3, r5
 80080dc:	fab3 f383 	clz	r3, r3
 80080e0:	40d9      	lsrs	r1, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80080e2:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 80080e6:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80080ea:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 80080ee:	fa90 f3a0 	rbit	r3, r0
 80080f2:	fab3 f383 	clz	r3, r3
 80080f6:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80080f8:	6963      	ldr	r3, [r4, #20]
 80080fa:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 80080fe:	fa97 f7a7 	rbit	r7, r7
 8008102:	fab7 f787 	clz	r7, r7
 8008106:	40bb      	lsls	r3, r7
 8008108:	6a27      	ldr	r7, [r4, #32]
 800810a:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 800810e:	fa9c fcac 	rbit	ip, ip
 8008112:	fabc fc8c 	clz	ip, ip
 8008116:	fa07 f70c 	lsl.w	r7, r7, ip
 800811a:	433b      	orrs	r3, r7
 800811c:	fa95 f5a5 	rbit	r5, r5
 8008120:	fab5 f585 	clz	r5, r5
 8008124:	40a9      	lsls	r1, r5
 8008126:	430b      	orrs	r3, r1
 8008128:	fa90 f1a0 	rbit	r1, r0
 800812c:	fab1 f181 	clz	r1, r1
 8008130:	408a      	lsls	r2, r1
 8008132:	4313      	orrs	r3, r2
 8008134:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
 8008138:	e770      	b.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  return HAL_OK;
 800813a:	2000      	movs	r0, #0
 800813c:	e567      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800813e:	bf00      	nop
 8008140:	40023800 	.word	0x40023800

08008144 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit: pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008144:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tempreg = 0;
  
  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8008146:	4b80      	ldr	r3, [pc, #512]	; (8008348 <HAL_RCCEx_GetPeriphCLKConfig+0x204>)
 8008148:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 800814a:	4b80      	ldr	r3, [pc, #512]	; (800834c <HAL_RCCEx_GetPeriphCLKConfig+0x208>)
 800814c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8008150:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8008154:	4011      	ands	r1, r2
 8008156:	fa92 f4a2 	rbit	r4, r2
 800815a:	fab4 f484 	clz	r4, r4
 800815e:	40e1      	lsrs	r1, r4
 8008160:	6041      	str	r1, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8008162:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008166:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
 800816a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800816e:	fa91 f5a1 	rbit	r5, r1
 8008172:	fab5 f585 	clz	r5, r5
 8008176:	40ec      	lsrs	r4, r5
 8008178:	6104      	str	r4, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 800817a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800817e:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
 8008182:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 8008186:	fa95 f6a5 	rbit	r6, r5
 800818a:	fab6 f686 	clz	r6, r6
 800818e:	40f4      	lsrs	r4, r6
 8008190:	60c4      	str	r4, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8008192:	f8d3 6084 	ldr.w	r6, [r3, #132]	; 0x84
 8008196:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800819a:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
 800819e:	fa94 f7a4 	rbit	r7, r4
 80081a2:	fab7 f787 	clz	r7, r7
 80081a6:	40fe      	lsrs	r6, r7
 80081a8:	6086      	str	r6, [r0, #8]
  
  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
 80081aa:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 80081ae:	4016      	ands	r6, r2
 80081b0:	fa92 f2a2 	rbit	r2, r2
 80081b4:	fab2 f282 	clz	r2, r2
 80081b8:	fa26 f202 	lsr.w	r2, r6, r2
 80081bc:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80081be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80081c2:	400a      	ands	r2, r1
 80081c4:	fa91 f6a1 	rbit	r6, r1
 80081c8:	fab6 f686 	clz	r6, r6
 80081cc:	40f2      	lsrs	r2, r6
 80081ce:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
 80081d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80081d4:	402a      	ands	r2, r5
 80081d6:	fa95 f5a5 	rbit	r5, r5
 80081da:	fab5 f585 	clz	r5, r5
 80081de:	fa22 f505 	lsr.w	r5, r2, r5
 80081e2:	6185      	str	r5, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR)); 
 80081e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80081e8:	4022      	ands	r2, r4
 80081ea:	fa94 f4a4 	rbit	r4, r4
 80081ee:	fab4 f484 	clz	r4, r4
 80081f2:	fa22 f404 	lsr.w	r4, r2, r4
 80081f6:	61c4      	str	r4, [r0, #28]
  
  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLI2SDIVQ));
 80081f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80081fc:	f002 021f 	and.w	r2, r2, #31
 8008200:	241f      	movs	r4, #31
 8008202:	fa94 f4a4 	rbit	r4, r4
 8008206:	fab4 f484 	clz	r4, r4
 800820a:	40e2      	lsrs	r2, r4
 800820c:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVQ));
 800820e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008212:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 8008216:	f44f 54f8 	mov.w	r4, #7936	; 0x1f00
 800821a:	fa94 f4a4 	rbit	r4, r4
 800821e:	fab4 f484 	clz	r4, r4
 8008222:	40e2      	lsrs	r2, r4
 8008224:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVR));
 8008226:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800822a:	400a      	ands	r2, r1
 800822c:	fa91 f1a1 	rbit	r1, r1
 8008230:	fab1 f181 	clz	r1, r1
 8008234:	fa22 f101 	lsr.w	r1, r2, r1
 8008238:	62c1      	str	r1, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800823a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800823e:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8008242:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8008244:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008248:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800824c:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800824e:	689a      	ldr	r2, [r3, #8]
 8008250:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8008254:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8008256:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800825a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800825e:	6642      	str	r2, [r0, #100]	; 0x64
  
  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8008260:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008264:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8008268:	6682      	str	r2, [r0, #104]	; 0x68
  
  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800826a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800826e:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8008272:	66c2      	str	r2, [r0, #108]	; 0x6c
  
  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8008274:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008278:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800827c:	6702      	str	r2, [r0, #112]	; 0x70
  
  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800827e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008282:	f002 0203 	and.w	r2, r2, #3
 8008286:	6442      	str	r2, [r0, #68]	; 0x44
  
  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8008288:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800828c:	f002 020c 	and.w	r2, r2, #12
 8008290:	6482      	str	r2, [r0, #72]	; 0x48
  
  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8008292:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008296:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800829a:	64c2      	str	r2, [r0, #76]	; 0x4c
  
  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800829c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80082a0:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80082a4:	6502      	str	r2, [r0, #80]	; 0x50
  
  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80082a6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80082aa:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80082ae:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80082b0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80082b4:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80082b8:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80082ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80082be:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80082c2:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80082c4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80082c8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80082cc:	6602      	str	r2, [r0, #96]	; 0x60
  
  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80082ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80082d2:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 80082d6:	6742      	str	r2, [r0, #116]	; 0x74
  
  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80082d8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80082dc:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80082e0:	6782      	str	r2, [r0, #120]	; 0x78
  
  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80082e2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80082e6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80082ea:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 80082ec:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80082f0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80082f4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 80082f8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80082fc:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8008300:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
	
  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 8008304:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008308:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800830c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
 8008310:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008314:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8008318:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800831c:	6899      	ldr	r1, [r3, #8]
 800831e:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8008322:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008324:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008328:	430a      	orrs	r2, r1
 800832a:	6302      	str	r2, [r0, #48]	; 0x30
  
  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800832c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008330:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8008334:	d103      	bne.n	800833e <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8008336:	2300      	movs	r3, #0
 8008338:	6383      	str	r3, [r0, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800833a:	bcf0      	pop	{r4, r5, r6, r7}
 800833c:	4770      	bx	lr
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800833e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008342:	6383      	str	r3, [r0, #56]	; 0x38
}
 8008344:	e7f9      	b.n	800833a <HAL_RCCEx_GetPeriphCLKConfig+0x1f6>
 8008346:	bf00      	nop
 8008348:	1cfffff1 	.word	0x1cfffff1
 800834c:	40023800 	.word	0x40023800

08008350 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008350:	b410      	push	{r4}
 8008352:	4603      	mov	r3, r0
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
  
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008354:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8008358:	d006      	beq.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
  uint32_t frequency = 0;
 800835a:	2000      	movs	r0, #0
        break;
      }
    }
  }
  
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800835c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008360:	d073      	beq.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
      }
    }
  }
  
  return frequency;
}
 8008362:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008366:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;   
 8008368:	4a6f      	ldr	r2, [pc, #444]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800836a:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800836e:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 8008372:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008376:	d064      	beq.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8008378:	d826      	bhi.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 800837a:	b38a      	cbz	r2, 80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 800837c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008380:	d120      	bne.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008382:	4a69      	ldr	r2, [pc, #420]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008384:	6852      	ldr	r2, [r2, #4]
 8008386:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 800838a:	d152      	bne.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800838c:	4a66      	ldr	r2, [pc, #408]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800838e:	6852      	ldr	r2, [r2, #4]
 8008390:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008394:	4865      	ldr	r0, [pc, #404]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8008396:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800839a:	4a63      	ldr	r2, [pc, #396]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800839c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 80083a0:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80083a4:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
 80083a8:	f3c4 1488 	ubfx	r4, r4, #6, #9
 80083ac:	fb00 f004 	mul.w	r0, r0, r4
 80083b0:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 80083b4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80083b8:	f002 021f 	and.w	r2, r2, #31
 80083bc:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 80083be:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 80083c2:	e7cb      	b.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0xc>
    switch (saiclocksource)
 80083c4:	2000      	movs	r0, #0
 80083c6:	e7c9      	b.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0xc>
 80083c8:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80083cc:	d106      	bne.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80083ce:	4a56      	ldr	r2, [pc, #344]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80083d0:	6852      	ldr	r2, [r2, #4]
 80083d2:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80083d6:	d136      	bne.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
          frequency = HSI_VALUE;
 80083d8:	4854      	ldr	r0, [pc, #336]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80083da:	e7bf      	b.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0xc>
    switch (saiclocksource)
 80083dc:	2000      	movs	r0, #0
 80083de:	e7bd      	b.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0xc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80083e0:	4a51      	ldr	r2, [pc, #324]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80083e2:	6852      	ldr	r2, [r2, #4]
 80083e4:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80083e8:	d11b      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80083ea:	4a4f      	ldr	r2, [pc, #316]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80083ec:	6852      	ldr	r2, [r2, #4]
 80083ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80083f2:	484e      	ldr	r0, [pc, #312]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80083f4:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80083f8:	4a4b      	ldr	r2, [pc, #300]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80083fa:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80083fe:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008402:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
 8008406:	f3c4 1488 	ubfx	r4, r4, #6, #9
 800840a:	fb00 f004 	mul.w	r0, r0, r4
 800840e:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008412:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8008416:	f3c2 2204 	ubfx	r2, r2, #8, #5
 800841a:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg); 
 800841c:	fbb0 f0f2 	udiv	r0, r0, r2
        break;       
 8008420:	e79c      	b.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0xc>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008422:	4a41      	ldr	r2, [pc, #260]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008424:	6852      	ldr	r2, [r2, #4]
 8008426:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800842a:	4841      	ldr	r0, [pc, #260]	; (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 800842c:	fbb0 f0f2 	udiv	r0, r0, r2
 8008430:	e7e2      	b.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008432:	4a3d      	ldr	r2, [pc, #244]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008434:	6852      	ldr	r2, [r2, #4]
 8008436:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800843a:	483d      	ldr	r0, [pc, #244]	; (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 800843c:	fbb0 f0f2 	udiv	r0, r0, r2
 8008440:	e7ab      	b.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008442:	483c      	ldr	r0, [pc, #240]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 8008444:	e78a      	b.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0xc>
          frequency = HSE_VALUE;
 8008446:	483a      	ldr	r0, [pc, #232]	; (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8008448:	e788      	b.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0xc>
    saiclocksource = RCC->DCKCFGR1;   
 800844a:	4b37      	ldr	r3, [pc, #220]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800844c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008450:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (saiclocksource)
 8008454:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008458:	d062      	beq.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800845a:	d825      	bhi.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800845c:	b37b      	cbz	r3, 80084be <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 800845e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008462:	f47f af7e 	bne.w	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008466:	4b30      	ldr	r3, [pc, #192]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800846e:	d14f      	bne.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008470:	4b2d      	ldr	r3, [pc, #180]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008478:	482c      	ldr	r0, [pc, #176]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800847a:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800847e:	4b2a      	ldr	r3, [pc, #168]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008480:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008484:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008488:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800848c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8008490:	fb00 f001 	mul.w	r0, r0, r1
 8008494:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8008498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800849c:	f003 031f 	and.w	r3, r3, #31
 80084a0:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 80084a2:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80084a6:	e75c      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
    switch (saiclocksource)
 80084a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80084ac:	f47f af59 	bne.w	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80084b0:	4b1d      	ldr	r3, [pc, #116]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80084b8:	d134      	bne.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
          frequency = HSI_VALUE;
 80084ba:	481c      	ldr	r0, [pc, #112]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80084bc:	e751      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80084be:	4b1a      	ldr	r3, [pc, #104]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80084c6:	d11b      	bne.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80084c8:	4b17      	ldr	r3, [pc, #92]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084d0:	4816      	ldr	r0, [pc, #88]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80084d2:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80084d6:	4b14      	ldr	r3, [pc, #80]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80084d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80084dc:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80084e0:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80084e4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80084e8:	fb00 f001 	mul.w	r0, r0, r1
 80084ec:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80084f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084f4:	f3c3 2304 	ubfx	r3, r3, #8, #5
 80084f8:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg); 
 80084fa:	fbb0 f0f3 	udiv	r0, r0, r3
        break;       
 80084fe:	e730      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008500:	4b09      	ldr	r3, [pc, #36]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008508:	4809      	ldr	r0, [pc, #36]	; (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 800850a:	fbb0 f0f3 	udiv	r0, r0, r3
 800850e:	e7e2      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008510:	4b05      	ldr	r3, [pc, #20]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008518:	4805      	ldr	r0, [pc, #20]	; (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 800851a:	fbb0 f0f3 	udiv	r0, r0, r3
 800851e:	e7ae      	b.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008520:	4804      	ldr	r0, [pc, #16]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 8008522:	e71e      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
          frequency = HSE_VALUE;
 8008524:	4802      	ldr	r0, [pc, #8]	; (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
  return frequency;
 8008526:	e71c      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8008528:	40023800 	.word	0x40023800
 800852c:	00f42400 	.word	0x00f42400
 8008530:	017d7840 	.word	0x017d7840
 8008534:	00bb8000 	.word	0x00bb8000

08008538 <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
  
  if(mode == SAI_MODE_IT)
 8008538:	2901      	cmp	r1, #1
 800853a:	d00a      	beq.n	8008552 <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800853c:	2301      	movs	r3, #1
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800853e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8008540:	2a08      	cmp	r2, #8
 8008542:	d008      	beq.n	8008556 <SAI_InterruptFlag+0x1e>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT|= SAI_IT_CNRDY;
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008544:	6842      	ldr	r2, [r0, #4]
 8008546:	3a02      	subs	r2, #2
 8008548:	2a01      	cmp	r2, #1
 800854a:	d90c      	bls.n	8008566 <SAI_InterruptFlag+0x2e>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 800854c:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 8008550:	4770      	bx	lr
    tmpIT|= SAI_IT_FREQ;
 8008552:	2309      	movs	r3, #9
 8008554:	e7f3      	b.n	800853e <SAI_InterruptFlag+0x6>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008556:	6842      	ldr	r2, [r0, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008558:	2a01      	cmp	r2, #1
 800855a:	bf18      	it	ne
 800855c:	2a03      	cmpne	r2, #3
 800855e:	d1f1      	bne.n	8008544 <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_CNRDY;
 8008560:	f043 0310 	orr.w	r3, r3, #16
 8008564:	e7ee      	b.n	8008544 <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008566:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 800856a:	4770      	bx	lr

0800856c <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800856c:	4b0e      	ldr	r3, [pc, #56]	; (80085a8 <SAI_Disable+0x3c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a0e      	ldr	r2, [pc, #56]	; (80085ac <SAI_Disable+0x40>)
 8008572:	fba2 2303 	umull	r2, r3, r2, r3
 8008576:	0b1b      	lsrs	r3, r3, #12
 8008578:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800857a:	6801      	ldr	r1, [r0, #0]
 800857c:	680a      	ldr	r2, [r1, #0]
 800857e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008582:	600a      	str	r2, [r1, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008584:	461a      	mov	r2, r3
 8008586:	3b01      	subs	r3, #1
 8008588:	b132      	cbz	r2, 8008598 <SAI_Disable+0x2c>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800858a:	6802      	ldr	r2, [r0, #0]
 800858c:	6812      	ldr	r2, [r2, #0]
 800858e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8008592:	d1f7      	bne.n	8008584 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8008594:	2000      	movs	r0, #0

  return status;
}
 8008596:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008598:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800859c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085a0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 80085a4:	2003      	movs	r0, #3
      break;
 80085a6:	4770      	bx	lr
 80085a8:	20000094 	.word	0x20000094
 80085ac:	95cbec1b 	.word	0x95cbec1b

080085b0 <HAL_SAI_MspInit>:
}
 80085b0:	4770      	bx	lr
	...

080085b4 <HAL_SAI_Init>:
  if(hsai == NULL)
 80085b4:	2800      	cmp	r0, #0
 80085b6:	f000 80eb 	beq.w	8008790 <HAL_SAI_Init+0x1dc>
{
 80085ba:	b570      	push	{r4, r5, r6, lr}
 80085bc:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_RESET)
 80085be:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 80b9 	beq.w	800873a <HAL_SAI_Init+0x186>
  hsai->State = HAL_SAI_STATE_BUSY;
 80085c8:	2302      	movs	r3, #2
 80085ca:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 80085ce:	4620      	mov	r0, r4
 80085d0:	f7ff ffcc 	bl	800856c <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 80085d4:	68e3      	ldr	r3, [r4, #12]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	f000 80b4 	beq.w	8008744 <HAL_SAI_Init+0x190>
 80085dc:	2b02      	cmp	r3, #2
 80085de:	f040 80b3 	bne.w	8008748 <HAL_SAI_Init+0x194>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80085e2:	2220      	movs	r2, #32
  switch(hsai->Init.Synchro)
 80085e4:	68a3      	ldr	r3, [r4, #8]
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	f000 80b8 	beq.w	800875c <HAL_SAI_Init+0x1a8>
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	f000 80b0 	beq.w	8008752 <HAL_SAI_Init+0x19e>
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	f000 80aa 	beq.w	800874c <HAL_SAI_Init+0x198>
 80085f8:	2500      	movs	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	4865      	ldr	r0, [pc, #404]	; (8008794 <HAL_SAI_Init+0x1e0>)
 80085fe:	4966      	ldr	r1, [pc, #408]	; (8008798 <HAL_SAI_Init+0x1e4>)
 8008600:	428b      	cmp	r3, r1
 8008602:	bf18      	it	ne
 8008604:	4283      	cmpne	r3, r0
 8008606:	f040 80ac 	bne.w	8008762 <HAL_SAI_Init+0x1ae>
    SAI1->GCR = tmpregisterGCR;
 800860a:	4b64      	ldr	r3, [pc, #400]	; (800879c <HAL_SAI_Init+0x1e8>)
 800860c:	601a      	str	r2, [r3, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800860e:	69e3      	ldr	r3, [r4, #28]
 8008610:	b323      	cbz	r3, 800865c <HAL_SAI_Init+0xa8>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	495f      	ldr	r1, [pc, #380]	; (8008794 <HAL_SAI_Init+0x1e0>)
 8008616:	4a60      	ldr	r2, [pc, #384]	; (8008798 <HAL_SAI_Init+0x1e4>)
 8008618:	4293      	cmp	r3, r2
 800861a:	bf18      	it	ne
 800861c:	428b      	cmpne	r3, r1
 800861e:	f000 80a3 	beq.w	8008768 <HAL_SAI_Init+0x1b4>
    uint32_t freq = 0;
 8008622:	2000      	movs	r0, #0
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	495e      	ldr	r1, [pc, #376]	; (80087a0 <HAL_SAI_Init+0x1ec>)
 8008628:	4a5e      	ldr	r2, [pc, #376]	; (80087a4 <HAL_SAI_Init+0x1f0>)
 800862a:	4293      	cmp	r3, r2
 800862c:	bf18      	it	ne
 800862e:	428b      	cmpne	r3, r1
 8008630:	f000 809f 	beq.w	8008772 <HAL_SAI_Init+0x1be>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008634:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008638:	0040      	lsls	r0, r0, #1
 800863a:	69e3      	ldr	r3, [r4, #28]
 800863c:	025b      	lsls	r3, r3, #9
 800863e:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8008642:	4b59      	ldr	r3, [pc, #356]	; (80087a8 <HAL_SAI_Init+0x1f4>)
 8008644:	fba3 2300 	umull	r2, r3, r3, r0
 8008648:	08db      	lsrs	r3, r3, #3
 800864a:	6223      	str	r3, [r4, #32]
    if((tmpval % 10) > 8)
 800864c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8008650:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8008654:	2808      	cmp	r0, #8
 8008656:	d901      	bls.n	800865c <HAL_SAI_Init+0xa8>
      hsai->Init.Mckdiv+= 1;
 8008658:	3301      	adds	r3, #1
 800865a:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800865c:	6862      	ldr	r2, [r4, #4]
 800865e:	2a02      	cmp	r2, #2
 8008660:	bf14      	ite	ne
 8008662:	2300      	movne	r3, #0
 8008664:	2301      	moveq	r3, #1
 8008666:	2a00      	cmp	r2, #0
 8008668:	bf08      	it	eq
 800866a:	2301      	moveq	r3, #1
 800866c:	2b00      	cmp	r3, #0
 800866e:	f000 8087 	beq.w	8008780 <HAL_SAI_Init+0x1cc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008672:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008674:	2b01      	cmp	r3, #1
 8008676:	f000 8081 	beq.w	800877c <HAL_SAI_Init+0x1c8>
 800867a:	f44f 7600 	mov.w	r6, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800867e:	6821      	ldr	r1, [r4, #0]
 8008680:	680b      	ldr	r3, [r1, #0]
 8008682:	4a4a      	ldr	r2, [pc, #296]	; (80087ac <HAL_SAI_Init+0x1f8>)
 8008684:	401a      	ands	r2, r3
 8008686:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008688:	6822      	ldr	r2, [r4, #0]
 800868a:	6811      	ldr	r1, [r2, #0]
 800868c:	6863      	ldr	r3, [r4, #4]
 800868e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008690:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008692:	6b60      	ldr	r0, [r4, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008694:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008696:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008698:	4303      	orrs	r3, r0
 800869a:	4333      	orrs	r3, r6
                        ckstr_bits | syncen_bits |                               \
 800869c:	432b      	orrs	r3, r5
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800869e:	6a60      	ldr	r0, [r4, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80086a0:	4303      	orrs	r3, r0
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80086a2:	6920      	ldr	r0, [r4, #16]
 80086a4:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80086a6:	6960      	ldr	r0, [r4, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80086a8:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80086aa:	6a20      	ldr	r0, [r4, #32]
 80086ac:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80086b0:	430b      	orrs	r3, r1
 80086b2:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80086b4:	6822      	ldr	r2, [r4, #0]
 80086b6:	6851      	ldr	r1, [r2, #4]
 80086b8:	4b3d      	ldr	r3, [pc, #244]	; (80087b0 <HAL_SAI_Init+0x1fc>)
 80086ba:	400b      	ands	r3, r1
 80086bc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80086be:	6821      	ldr	r1, [r4, #0]
 80086c0:	684a      	ldr	r2, [r1, #4]
 80086c2:	69a3      	ldr	r3, [r4, #24]
 80086c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80086c6:	4303      	orrs	r3, r0
 80086c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80086ca:	4303      	orrs	r3, r0
 80086cc:	4313      	orrs	r3, r2
 80086ce:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80086d0:	6822      	ldr	r2, [r4, #0]
 80086d2:	6891      	ldr	r1, [r2, #8]
 80086d4:	4b37      	ldr	r3, [pc, #220]	; (80087b4 <HAL_SAI_Init+0x200>)
 80086d6:	400b      	ands	r3, r1
 80086d8:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80086da:	6820      	ldr	r0, [r4, #0]
 80086dc:	6882      	ldr	r2, [r0, #8]
 80086de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086e0:	3b01      	subs	r3, #1
                          hsai->FrameInit.FSOffset |
 80086e2:	6d21      	ldr	r1, [r4, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80086e4:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSDefinition |
 80086e6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80086e8:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSPolarity   |
 80086ea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80086ec:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80086ee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80086f0:	3901      	subs	r1, #1
                          hsai->FrameInit.FSPolarity   |
 80086f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80086f6:	4313      	orrs	r3, r2
 80086f8:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80086fa:	6822      	ldr	r2, [r4, #0]
 80086fc:	68d3      	ldr	r3, [r2, #12]
 80086fe:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8008702:	f023 030f 	bic.w	r3, r3, #15
 8008706:	041b      	lsls	r3, r3, #16
 8008708:	0c1b      	lsrs	r3, r3, #16
 800870a:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800870c:	6820      	ldr	r0, [r4, #0]
 800870e:	68c2      	ldr	r2, [r0, #12]
 8008710:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008712:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008714:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008716:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8008718:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800871c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800871e:	3901      	subs	r1, #1
 8008720:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008724:	4313      	orrs	r3, r2
 8008726:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008728:	2000      	movs	r0, #0
 800872a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  hsai->State= HAL_SAI_STATE_READY;
 800872e:	2301      	movs	r3, #1
 8008730:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8008734:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8008738:	bd70      	pop	{r4, r5, r6, pc}
    hsai->Lock = HAL_UNLOCKED;
 800873a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 800873e:	f7ff ff37 	bl	80085b0 <HAL_SAI_MspInit>
 8008742:	e741      	b.n	80085c8 <HAL_SAI_Init+0x14>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008744:	2210      	movs	r2, #16
 8008746:	e74d      	b.n	80085e4 <HAL_SAI_Init+0x30>
  switch(hsai->Init.SynchroExt)
 8008748:	2200      	movs	r2, #0
 800874a:	e74b      	b.n	80085e4 <HAL_SAI_Init+0x30>
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800874c:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8008750:	e753      	b.n	80085fa <HAL_SAI_Init+0x46>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008752:	f042 0201 	orr.w	r2, r2, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008756:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 800875a:	e74e      	b.n	80085fa <HAL_SAI_Init+0x46>
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800875c:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8008760:	e74b      	b.n	80085fa <HAL_SAI_Init+0x46>
    SAI2->GCR = tmpregisterGCR;
 8008762:	4b15      	ldr	r3, [pc, #84]	; (80087b8 <HAL_SAI_Init+0x204>)
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	e752      	b.n	800860e <HAL_SAI_Init+0x5a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008768:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800876c:	f7ff fdf0 	bl	8008350 <HAL_RCCEx_GetPeriphCLKFreq>
 8008770:	e758      	b.n	8008624 <HAL_SAI_Init+0x70>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008772:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008776:	f7ff fdeb 	bl	8008350 <HAL_RCCEx_GetPeriphCLKFreq>
 800877a:	e75b      	b.n	8008634 <HAL_SAI_Init+0x80>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800877c:	2600      	movs	r6, #0
 800877e:	e77e      	b.n	800867e <HAL_SAI_Init+0xca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008780:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008782:	2b01      	cmp	r3, #1
 8008784:	d001      	beq.n	800878a <HAL_SAI_Init+0x1d6>
 8008786:	2600      	movs	r6, #0
 8008788:	e779      	b.n	800867e <HAL_SAI_Init+0xca>
 800878a:	f44f 7600 	mov.w	r6, #512	; 0x200
 800878e:	e776      	b.n	800867e <HAL_SAI_Init+0xca>
    return HAL_ERROR;
 8008790:	2001      	movs	r0, #1
}
 8008792:	4770      	bx	lr
 8008794:	40015804 	.word	0x40015804
 8008798:	40015824 	.word	0x40015824
 800879c:	40015800 	.word	0x40015800
 80087a0:	40015c04 	.word	0x40015c04
 80087a4:	40015c24 	.word	0x40015c24
 80087a8:	cccccccd 	.word	0xcccccccd
 80087ac:	ff05c010 	.word	0xff05c010
 80087b0:	ffff1ff0 	.word	0xffff1ff0
 80087b4:	fff88000 	.word	0xfff88000
 80087b8:	40015c00 	.word	0x40015c00

080087bc <HAL_SAI_MspDeInit>:
}
 80087bc:	4770      	bx	lr

080087be <HAL_SAI_DeInit>:
  if(hsai == NULL)
 80087be:	b1e8      	cbz	r0, 80087fc <HAL_SAI_DeInit+0x3e>
{
 80087c0:	b538      	push	{r3, r4, r5, lr}
 80087c2:	4604      	mov	r4, r0
  hsai->State = HAL_SAI_STATE_BUSY;
 80087c4:	2302      	movs	r3, #2
 80087c6:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  hsai->Instance->IMR = 0;
 80087ca:	6803      	ldr	r3, [r0, #0]
 80087cc:	2500      	movs	r5, #0
 80087ce:	611d      	str	r5, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80087d0:	6803      	ldr	r3, [r0, #0]
 80087d2:	f04f 32ff 	mov.w	r2, #4294967295
 80087d6:	619a      	str	r2, [r3, #24]
  SAI_Disable(hsai);
 80087d8:	f7ff fec8 	bl	800856c <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80087dc:	6822      	ldr	r2, [r4, #0]
 80087de:	6853      	ldr	r3, [r2, #4]
 80087e0:	f043 0308 	orr.w	r3, r3, #8
 80087e4:	6053      	str	r3, [r2, #4]
  HAL_SAI_MspDeInit(hsai);
 80087e6:	4620      	mov	r0, r4
 80087e8:	f7ff ffe8 	bl	80087bc <HAL_SAI_MspDeInit>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80087ec:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  hsai->State = HAL_SAI_STATE_RESET;
 80087f0:	f884 507d 	strb.w	r5, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 80087f4:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
  return HAL_OK;
 80087f8:	4628      	mov	r0, r5
}
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80087fc:	2001      	movs	r0, #1
}
 80087fe:	4770      	bx	lr

08008800 <HAL_SAI_Transmit_DMA>:
{
 8008800:	b570      	push	{r4, r5, r6, lr}
  if((pData == NULL) || (Size == 0))
 8008802:	4613      	mov	r3, r2
 8008804:	fab2 f282 	clz	r2, r2
 8008808:	0952      	lsrs	r2, r2, #5
 800880a:	2900      	cmp	r1, #0
 800880c:	bf08      	it	eq
 800880e:	2201      	moveq	r2, #1
 8008810:	2a00      	cmp	r2, #0
 8008812:	d14b      	bne.n	80088ac <HAL_SAI_Transmit_DMA+0xac>
 8008814:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_READY)
 8008816:	f894 507d 	ldrb.w	r5, [r4, #125]	; 0x7d
 800881a:	b2ed      	uxtb	r5, r5
 800881c:	2d01      	cmp	r5, #1
 800881e:	d148      	bne.n	80088b2 <HAL_SAI_Transmit_DMA+0xb2>
    __HAL_LOCK(hsai);
 8008820:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 8008824:	2a01      	cmp	r2, #1
 8008826:	d046      	beq.n	80088b6 <HAL_SAI_Transmit_DMA+0xb6>
 8008828:	2201      	movs	r2, #1
 800882a:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 800882e:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 8008830:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 8008834:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008838:	2300      	movs	r3, #0
 800883a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800883e:	2212      	movs	r2, #18
 8008840:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8008844:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8008846:	491d      	ldr	r1, [pc, #116]	; (80088bc <HAL_SAI_Transmit_DMA+0xbc>)
 8008848:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800884a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800884c:	491c      	ldr	r1, [pc, #112]	; (80088c0 <HAL_SAI_Transmit_DMA+0xc0>)
 800884e:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8008850:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8008852:	491c      	ldr	r1, [pc, #112]	; (80088c4 <HAL_SAI_Transmit_DMA+0xc4>)
 8008854:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 8008856:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8008858:	6513      	str	r3, [r2, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800885a:	6822      	ldr	r2, [r4, #0]
 800885c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8008860:	321c      	adds	r2, #28
 8008862:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008864:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008866:	f7fb fcce 	bl	8004206 <HAL_DMA_Start_IT>
 800886a:	4606      	mov	r6, r0
 800886c:	b118      	cbz	r0, 8008876 <HAL_SAI_Transmit_DMA+0x76>
      __HAL_UNLOCK(hsai);
 800886e:	2300      	movs	r3, #0
 8008870:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
      return  HAL_ERROR;
 8008874:	e01b      	b.n	80088ae <HAL_SAI_Transmit_DMA+0xae>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800887e:	d103      	bne.n	8008888 <HAL_SAI_Transmit_DMA+0x88>
      __HAL_SAI_ENABLE(hsai);
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008886:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008888:	2100      	movs	r1, #0
 800888a:	4620      	mov	r0, r4
 800888c:	f7ff fe54 	bl	8008538 <SAI_InterruptFlag>
 8008890:	6822      	ldr	r2, [r4, #0]
 8008892:	6913      	ldr	r3, [r2, #16]
 8008894:	4303      	orrs	r3, r0
 8008896:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8008898:	6822      	ldr	r2, [r4, #0]
 800889a:	6813      	ldr	r3, [r2, #0]
 800889c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088a0:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 80088a2:	2300      	movs	r3, #0
 80088a4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 80088a8:	4635      	mov	r5, r6
 80088aa:	e000      	b.n	80088ae <HAL_SAI_Transmit_DMA+0xae>
    return  HAL_ERROR;
 80088ac:	2501      	movs	r5, #1
}
 80088ae:	4628      	mov	r0, r5
 80088b0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80088b2:	2502      	movs	r5, #2
 80088b4:	e7fb      	b.n	80088ae <HAL_SAI_Transmit_DMA+0xae>
    __HAL_LOCK(hsai);
 80088b6:	2502      	movs	r5, #2
 80088b8:	e7f9      	b.n	80088ae <HAL_SAI_Transmit_DMA+0xae>
 80088ba:	bf00      	nop
 80088bc:	080089cd 	.word	0x080089cd
 80088c0:	08008991 	.word	0x08008991
 80088c4:	08008a1d 	.word	0x08008a1d

080088c8 <HAL_SAI_Receive_DMA>:
{
 80088c8:	b570      	push	{r4, r5, r6, lr}
  if((pData == NULL) || (Size == 0))
 80088ca:	4613      	mov	r3, r2
 80088cc:	fab2 f282 	clz	r2, r2
 80088d0:	0952      	lsrs	r2, r2, #5
 80088d2:	2900      	cmp	r1, #0
 80088d4:	bf08      	it	eq
 80088d6:	2201      	moveq	r2, #1
 80088d8:	2a00      	cmp	r2, #0
 80088da:	d14b      	bne.n	8008974 <HAL_SAI_Receive_DMA+0xac>
 80088dc:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_READY)
 80088de:	f894 507d 	ldrb.w	r5, [r4, #125]	; 0x7d
 80088e2:	b2ed      	uxtb	r5, r5
 80088e4:	2d01      	cmp	r5, #1
 80088e6:	d148      	bne.n	800897a <HAL_SAI_Receive_DMA+0xb2>
    __HAL_LOCK(hsai);
 80088e8:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 80088ec:	2a01      	cmp	r2, #1
 80088ee:	d046      	beq.n	800897e <HAL_SAI_Receive_DMA+0xb6>
 80088f0:	2201      	movs	r2, #1
 80088f2:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 80088f6:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 80088f8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 80088fc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008900:	2300      	movs	r3, #0
 8008902:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8008906:	2222      	movs	r2, #34	; 0x22
 8008908:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800890c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800890e:	491d      	ldr	r1, [pc, #116]	; (8008984 <HAL_SAI_Receive_DMA+0xbc>)
 8008910:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008912:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8008914:	491c      	ldr	r1, [pc, #112]	; (8008988 <HAL_SAI_Receive_DMA+0xc0>)
 8008916:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8008918:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800891a:	491c      	ldr	r1, [pc, #112]	; (800898c <HAL_SAI_Receive_DMA+0xc4>)
 800891c:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 800891e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8008920:	6513      	str	r3, [r2, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8008922:	6821      	ldr	r1, [r4, #0]
 8008924:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8008928:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800892a:	311c      	adds	r1, #28
 800892c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800892e:	f7fb fc6a 	bl	8004206 <HAL_DMA_Start_IT>
 8008932:	4606      	mov	r6, r0
 8008934:	b118      	cbz	r0, 800893e <HAL_SAI_Receive_DMA+0x76>
      __HAL_UNLOCK(hsai);
 8008936:	2300      	movs	r3, #0
 8008938:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
      return  HAL_ERROR;
 800893c:	e01b      	b.n	8008976 <HAL_SAI_Receive_DMA+0xae>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8008946:	d103      	bne.n	8008950 <HAL_SAI_Receive_DMA+0x88>
      __HAL_SAI_ENABLE(hsai);
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800894e:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008950:	2100      	movs	r1, #0
 8008952:	4620      	mov	r0, r4
 8008954:	f7ff fdf0 	bl	8008538 <SAI_InterruptFlag>
 8008958:	6822      	ldr	r2, [r4, #0]
 800895a:	6913      	ldr	r3, [r2, #16]
 800895c:	4303      	orrs	r3, r0
 800895e:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8008960:	6822      	ldr	r2, [r4, #0]
 8008962:	6813      	ldr	r3, [r2, #0]
 8008964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008968:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 800896a:	2300      	movs	r3, #0
 800896c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8008970:	4635      	mov	r5, r6
 8008972:	e000      	b.n	8008976 <HAL_SAI_Receive_DMA+0xae>
    return  HAL_ERROR;
 8008974:	2501      	movs	r5, #1
}
 8008976:	4628      	mov	r0, r5
 8008978:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800897a:	2502      	movs	r5, #2
 800897c:	e7fb      	b.n	8008976 <HAL_SAI_Receive_DMA+0xae>
    __HAL_LOCK(hsai);
 800897e:	2502      	movs	r5, #2
 8008980:	e7f9      	b.n	8008976 <HAL_SAI_Receive_DMA+0xae>
 8008982:	bf00      	nop
 8008984:	08008a13 	.word	0x08008a13
 8008988:	080089d7 	.word	0x080089d7
 800898c:	08008a1d 	.word	0x08008a1d

08008990 <SAI_DMATxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8008990:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 8008992:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8008994:	6803      	ldr	r3, [r0, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f413 7f80 	tst.w	r3, #256	; 0x100
 800899c:	d112      	bne.n	80089c4 <SAI_DMATxCplt+0x34>
  {
    hsai->XferCount = 0;
 800899e:	2100      	movs	r1, #0
 80089a0:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    
    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80089a4:	6822      	ldr	r2, [r4, #0]
 80089a6:	6813      	ldr	r3, [r2, #0]
 80089a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80089ac:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80089ae:	4620      	mov	r0, r4
 80089b0:	f7ff fdc2 	bl	8008538 <SAI_InterruptFlag>
 80089b4:	6822      	ldr	r2, [r4, #0]
 80089b6:	6913      	ldr	r3, [r2, #16]
 80089b8:	ea23 0300 	bic.w	r3, r3, r0
 80089bc:	6113      	str	r3, [r2, #16]
    
    hsai->State= HAL_SAI_STATE_READY;
 80089be:	2301      	movs	r3, #1
 80089c0:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_TxCpltCallback(hsai);
 80089c4:	4620      	mov	r0, r4
 80089c6:	f7f8 fe7d 	bl	80016c4 <HAL_SAI_TxCpltCallback>
}
 80089ca:	bd10      	pop	{r4, pc}

080089cc <SAI_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80089cc:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_TxHalfCpltCallback(hsai);
 80089ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80089d0:	f7f8 fe7c 	bl	80016cc <HAL_SAI_TxHalfCpltCallback>
}
 80089d4:	bd08      	pop	{r3, pc}

080089d6 <SAI_DMARxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80089d6:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80089d8:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80089da:	6803      	ldr	r3, [r0, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f413 7f80 	tst.w	r3, #256	; 0x100
 80089e2:	d112      	bne.n	8008a0a <SAI_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80089e4:	6822      	ldr	r2, [r4, #0]
 80089e6:	6813      	ldr	r3, [r2, #0]
 80089e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80089ec:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 80089ee:	2100      	movs	r1, #0
 80089f0:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80089f4:	4620      	mov	r0, r4
 80089f6:	f7ff fd9f 	bl	8008538 <SAI_InterruptFlag>
 80089fa:	6822      	ldr	r2, [r4, #0]
 80089fc:	6913      	ldr	r3, [r2, #16]
 80089fe:	ea23 0300 	bic.w	r3, r3, r0
 8008a02:	6113      	str	r3, [r2, #16]
    
    hsai->State = HAL_SAI_STATE_READY;
 8008a04:	2301      	movs	r3, #1
 8008a06:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_RxCpltCallback(hsai);
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f7f8 ff2d 	bl	800186a <HAL_SAI_RxCpltCallback>
}
 8008a10:	bd10      	pop	{r4, pc}

08008a12 <SAI_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a12:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_RxHalfCpltCallback(hsai);
 8008a14:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008a16:	f7f8 ff2c 	bl	8001872 <HAL_SAI_RxHalfCpltCallback>
}
 8008a1a:	bd08      	pop	{r3, pc}

08008a1c <SAI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a1c:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008a1e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008a20:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8008a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a28:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8008a2c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d007      	beq.n	8008a44 <SAI_DMAError+0x28>
 8008a34:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d003      	beq.n	8008a44 <SAI_DMAError+0x28>

    /* Initialize XferCount */
    hsai->XferCount = 0U;
  }
  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	f7f8 ff1d 	bl	800187c <HAL_SAI_ErrorCallback>
}
 8008a42:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008a44:	6822      	ldr	r2, [r4, #0]
 8008a46:	6813      	ldr	r3, [r2, #0]
 8008a48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008a4c:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f7ff fd8c 	bl	800856c <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 8008a54:	2301      	movs	r3, #1
 8008a56:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    hsai->XferCount = 0U;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8008a60:	e7ec      	b.n	8008a3c <SAI_DMAError+0x20>

08008a62 <HAL_SAI_GetState>:
  return hsai->State;
 8008a62:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 8008a66:	4770      	bx	lr

08008a68 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008a68:	b570      	push	{r4, r5, r6, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008a72:	6800      	ldr	r0, [r0, #0]
 8008a74:	f001 fe5e 	bl	800a734 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a78:	4605      	mov	r5, r0
 8008a7a:	b110      	cbz	r0, 8008a82 <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	b002      	add	sp, #8
 8008a80:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008a82:	6820      	ldr	r0, [r4, #0]
 8008a84:	f001 fe69 	bl	800a75a <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a88:	b938      	cbnz	r0, 8008a9a <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	64a3      	str	r3, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008a8e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d00b      	beq.n	8008aac <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008a94:	462e      	mov	r6, r5
 8008a96:	4628      	mov	r0, r5
 8008a98:	e014      	b.n	8008ac4 <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008a9e:	6820      	ldr	r0, [r4, #0]
 8008aa0:	f001 fe48 	bl	800a734 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d0f2      	beq.n	8008a8e <SD_PowerON+0x26>
      return errorstate;
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	e7e7      	b.n	8008a7c <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008aac:	2100      	movs	r1, #0
 8008aae:	6820      	ldr	r0, [r4, #0]
 8008ab0:	f001 fe6a 	bl	800a788 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	d0ed      	beq.n	8008a94 <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ab8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008abc:	e7de      	b.n	8008a7c <SD_PowerON+0x14>
    count++;
 8008abe:	9b01      	ldr	r3, [sp, #4]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008ac4:	9a01      	ldr	r2, [sp, #4]
 8008ac6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d813      	bhi.n	8008af6 <SD_PowerON+0x8e>
 8008ace:	b996      	cbnz	r6, 8008af6 <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	6820      	ldr	r0, [r4, #0]
 8008ad4:	f001 fe58 	bl	800a788 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ad8:	b9e0      	cbnz	r0, 8008b14 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008ada:	4912      	ldr	r1, [pc, #72]	; (8008b24 <SD_PowerON+0xbc>)
 8008adc:	6820      	ldr	r0, [r4, #0]
 8008ade:	f001 fe6b 	bl	800a7b8 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	b9c0      	cbnz	r0, 8008b18 <SD_PowerON+0xb0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	6820      	ldr	r0, [r4, #0]
 8008aea:	f001 fc6a 	bl	800a3c2 <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008aee:	0fc3      	lsrs	r3, r0, #31
 8008af0:	d0e5      	beq.n	8008abe <SD_PowerON+0x56>
 8008af2:	461e      	mov	r6, r3
 8008af4:	e7e3      	b.n	8008abe <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008af6:	9a01      	ldr	r2, [sp, #4]
 8008af8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d80e      	bhi.n	8008b1e <SD_PowerON+0xb6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008b00:	f010 4380 	ands.w	r3, r0, #1073741824	; 0x40000000
 8008b04:	d002      	beq.n	8008b0c <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008b06:	2301      	movs	r3, #1
 8008b08:	6463      	str	r3, [r4, #68]	; 0x44
 8008b0a:	e7b7      	b.n	8008a7c <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDSC;
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	6462      	str	r2, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 8008b10:	461d      	mov	r5, r3
 8008b12:	e7b3      	b.n	8008a7c <SD_PowerON+0x14>
      return errorstate;
 8008b14:	4605      	mov	r5, r0
 8008b16:	e7b1      	b.n	8008a7c <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b18:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008b1c:	e7ae      	b.n	8008a7c <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008b1e:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8008b22:	e7ab      	b.n	8008a7c <SD_PowerON+0x14>
 8008b24:	c1100000 	.word	0xc1100000

08008b28 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b2a:	b089      	sub	sp, #36	; 0x24
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008b30:	f7fb f9e0 	bl	8003ef4 <HAL_GetTick>
 8008b34:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8008b36:	2300      	movs	r3, #0
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008b3c:	2108      	movs	r1, #8
 8008b3e:	6820      	ldr	r0, [r4, #0]
 8008b40:	f001 fd4e 	bl	800a5e0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b44:	4605      	mov	r5, r0
 8008b46:	b110      	cbz	r0, 8008b4e <SD_FindSCR+0x26>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8008b48:	4628      	mov	r0, r5
 8008b4a:	b009      	add	sp, #36	; 0x24
 8008b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008b4e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008b50:	0409      	lsls	r1, r1, #16
 8008b52:	6820      	ldr	r0, [r4, #0]
 8008b54:	f001 fe18 	bl	800a788 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b58:	4605      	mov	r5, r0
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d1f4      	bne.n	8008b48 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b62:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8008b64:	2308      	movs	r3, #8
 8008b66:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008b68:	2330      	movs	r3, #48	; 0x30
 8008b6a:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008b74:	2301      	movs	r3, #1
 8008b76:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b78:	a902      	add	r1, sp, #8
 8008b7a:	6820      	ldr	r0, [r4, #0]
 8008b7c:	f001 fd1e 	bl	800a5bc <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008b80:	6820      	ldr	r0, [r4, #0]
 8008b82:	f001 fe4b 	bl	800a81c <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b86:	4605      	mov	r5, r0
 8008b88:	b158      	cbz	r0, 8008ba2 <SD_FindSCR+0x7a>
 8008b8a:	e7dd      	b.n	8008b48 <SD_FindSCR+0x20>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008b8c:	f001 fbf0 	bl	800a370 <SDMMC_ReadFIFO>
 8008b90:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
      index++;
 8008b94:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008b96:	f7fb f9ad 	bl	8003ef4 <HAL_GetTick>
 8008b9a:	1b83      	subs	r3, r0, r6
 8008b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba0:	d03d      	beq.n	8008c1e <SD_FindSCR+0xf6>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008ba2:	6820      	ldr	r0, [r4, #0]
 8008ba4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008ba6:	f240 432a 	movw	r3, #1066	; 0x42a
 8008baa:	421a      	tst	r2, r3
 8008bac:	d104      	bne.n	8008bb8 <SD_FindSCR+0x90>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008bae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008bb0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8008bb4:	d0ef      	beq.n	8008b96 <SD_FindSCR+0x6e>
 8008bb6:	e7e9      	b.n	8008b8c <SD_FindSCR+0x64>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008bb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008bba:	f013 0f08 	tst.w	r3, #8
 8008bbe:	d125      	bne.n	8008c0c <SD_FindSCR+0xe4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008bc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008bc2:	f013 0f02 	tst.w	r3, #2
 8008bc6:	d124      	bne.n	8008c12 <SD_FindSCR+0xea>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008bc8:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8008bca:	f015 0520 	ands.w	r5, r5, #32
 8008bce:	d123      	bne.n	8008c18 <SD_FindSCR+0xf0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008bd0:	f240 533a 	movw	r3, #1338	; 0x53a
 8008bd4:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008bd6:	9a01      	ldr	r2, [sp, #4]
 8008bd8:	0213      	lsls	r3, r2, #8
 8008bda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008bde:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008be2:	0a11      	lsrs	r1, r2, #8
 8008be4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008be8:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008bea:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008bee:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008bf0:	9a00      	ldr	r2, [sp, #0]
 8008bf2:	0213      	lsls	r3, r2, #8
 8008bf4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008bf8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008bfc:	0a11      	lsrs	r1, r2, #8
 8008bfe:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008c02:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008c04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008c08:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8008c0a:	e79d      	b.n	8008b48 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008c0c:	2508      	movs	r5, #8
 8008c0e:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008c10:	e79a      	b.n	8008b48 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008c12:	2502      	movs	r5, #2
 8008c14:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008c16:	e797      	b.n	8008b48 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008c18:	2520      	movs	r5, #32
 8008c1a:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8008c1c:	e794      	b.n	8008b48 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 8008c1e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8008c22:	e791      	b.n	8008b48 <SD_FindSCR+0x20>

08008c24 <SD_WideBus_Enable>:
{
 8008c24:	b510      	push	{r4, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	9100      	str	r1, [sp, #0]
 8008c2e:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c30:	6800      	ldr	r0, [r0, #0]
 8008c32:	f001 fbc6 	bl	800a3c2 <SDMMC_GetResponse>
 8008c36:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8008c3a:	d113      	bne.n	8008c64 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8008c3c:	4669      	mov	r1, sp
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f7ff ff72 	bl	8008b28 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c44:	b980      	cbnz	r0, 8008c68 <SD_WideBus_Enable+0x44>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008c46:	9b01      	ldr	r3, [sp, #4]
 8008c48:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8008c4c:	d00e      	beq.n	8008c6c <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c4e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008c50:	0409      	lsls	r1, r1, #16
 8008c52:	6820      	ldr	r0, [r4, #0]
 8008c54:	f001 fd98 	bl	800a788 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c58:	b930      	cbnz	r0, 8008c68 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008c5a:	2102      	movs	r1, #2
 8008c5c:	6820      	ldr	r0, [r4, #0]
 8008c5e:	f001 fdc5 	bl	800a7ec <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c62:	e001      	b.n	8008c68 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008c64:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8008c68:	b002      	add	sp, #8
 8008c6a:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c6c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8008c70:	e7fa      	b.n	8008c68 <SD_WideBus_Enable+0x44>

08008c72 <SD_WideBus_Disable>:
{
 8008c72:	b510      	push	{r4, lr}
 8008c74:	b082      	sub	sp, #8
 8008c76:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8008c78:	2100      	movs	r1, #0
 8008c7a:	9100      	str	r1, [sp, #0]
 8008c7c:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c7e:	6800      	ldr	r0, [r0, #0]
 8008c80:	f001 fb9f 	bl	800a3c2 <SDMMC_GetResponse>
 8008c84:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8008c88:	d113      	bne.n	8008cb2 <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8008c8a:	4669      	mov	r1, sp
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f7ff ff4b 	bl	8008b28 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c92:	b980      	cbnz	r0, 8008cb6 <SD_WideBus_Disable+0x44>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008c94:	9b01      	ldr	r3, [sp, #4]
 8008c96:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008c9a:	d00e      	beq.n	8008cba <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c9c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008c9e:	0409      	lsls	r1, r1, #16
 8008ca0:	6820      	ldr	r0, [r4, #0]
 8008ca2:	f001 fd71 	bl	800a788 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ca6:	b930      	cbnz	r0, 8008cb6 <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008ca8:	2100      	movs	r1, #0
 8008caa:	6820      	ldr	r0, [r4, #0]
 8008cac:	f001 fd9e 	bl	800a7ec <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cb0:	e001      	b.n	8008cb6 <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008cb2:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8008cb6:	b002      	add	sp, #8
 8008cb8:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008cba:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8008cbe:	e7fa      	b.n	8008cb6 <SD_WideBus_Disable+0x44>

08008cc0 <SD_SendStatus>:
{
 8008cc0:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 8008cc2:	b181      	cbz	r1, 8008ce6 <SD_SendStatus+0x26>
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008cc8:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8008cca:	0409      	lsls	r1, r1, #16
 8008ccc:	6800      	ldr	r0, [r0, #0]
 8008cce:	f001 fdff 	bl	800a8d0 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cd2:	4605      	mov	r5, r0
 8008cd4:	b108      	cbz	r0, 8008cda <SD_SendStatus+0x1a>
}
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008cda:	2100      	movs	r1, #0
 8008cdc:	6820      	ldr	r0, [r4, #0]
 8008cde:	f001 fb70 	bl	800a3c2 <SDMMC_GetResponse>
 8008ce2:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8008ce4:	e7f7      	b.n	8008cd6 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8008ce6:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8008cea:	e7f4      	b.n	8008cd6 <SD_SendStatus+0x16>

08008cec <HAL_SD_MspInit>:
}
 8008cec:	4770      	bx	lr
	...

08008cf0 <HAL_SD_ReadBlocks>:
{
 8008cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf4:	b087      	sub	sp, #28
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	460d      	mov	r5, r1
 8008cfa:	4616      	mov	r6, r2
 8008cfc:	4699      	mov	r9, r3
 8008cfe:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8008d02:	f7fb f8f7 	bl	8003ef4 <HAL_GetTick>
  if(NULL == pData)
 8008d06:	b33d      	cbz	r5, 8008d58 <HAL_SD_ReadBlocks+0x68>
 8008d08:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8008d0a:	f894 7034 	ldrb.w	r7, [r4, #52]	; 0x34
 8008d0e:	b2ff      	uxtb	r7, r7
 8008d10:	2f01      	cmp	r7, #1
 8008d12:	f040 8114 	bne.w	8008f3e <HAL_SD_ReadBlocks+0x24e>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d16:	2300      	movs	r3, #0
 8008d18:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008d1a:	eb06 0309 	add.w	r3, r6, r9
 8008d1e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d81f      	bhi.n	8008d64 <HAL_SD_ReadBlocks+0x74>
    hsd->State = HAL_SD_STATE_BUSY;
 8008d24:	2303      	movs	r3, #3
 8008d26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008d30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d000      	beq.n	8008d38 <HAL_SD_ReadBlocks+0x48>
      add *= 512U;
 8008d36:	0276      	lsls	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d3c:	6820      	ldr	r0, [r4, #0]
 8008d3e:	f001 fc4f 	bl	800a5e0 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d42:	b1a0      	cbz	r0, 8008d6e <HAL_SD_ReadBlocks+0x7e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	4982      	ldr	r1, [pc, #520]	; (8008f50 <HAL_SD_ReadBlocks+0x260>)
 8008d48:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008d4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008d4c:	4303      	orrs	r3, r0
 8008d4e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d50:	2301      	movs	r3, #1
 8008d52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8008d56:	e0f7      	b.n	8008f48 <HAL_SD_ReadBlocks+0x258>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008d5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d5e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8008d60:	2701      	movs	r7, #1
 8008d62:	e0f1      	b.n	8008f48 <HAL_SD_ReadBlocks+0x258>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008d64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008d66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d6a:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8008d6c:	e0ec      	b.n	8008f48 <HAL_SD_ReadBlocks+0x258>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d72:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008d74:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8008d78:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008d7a:	2390      	movs	r3, #144	; 0x90
 8008d7c:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008d7e:	2302      	movs	r3, #2
 8008d80:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d82:	2300      	movs	r3, #0
 8008d84:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8008d86:	2301      	movs	r3, #1
 8008d88:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d8a:	4669      	mov	r1, sp
 8008d8c:	6820      	ldr	r0, [r4, #0]
 8008d8e:	f001 fc15 	bl	800a5bc <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 8008d92:	f1b9 0f01 	cmp.w	r9, #1
 8008d96:	d909      	bls.n	8008dac <HAL_SD_ReadBlocks+0xbc>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008d98:	2302      	movs	r3, #2
 8008d9a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008d9c:	4631      	mov	r1, r6
 8008d9e:	6820      	ldr	r0, [r4, #0]
 8008da0:	f001 fc4e 	bl	800a640 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008da4:	b948      	cbnz	r0, 8008dba <HAL_SD_ReadBlocks+0xca>
    dataremaining = config.DataLength;
 8008da6:	f8dd b004 	ldr.w	fp, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008daa:	e02d      	b.n	8008e08 <HAL_SD_ReadBlocks+0x118>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008dac:	2301      	movs	r3, #1
 8008dae:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008db0:	4631      	mov	r1, r6
 8008db2:	6820      	ldr	r0, [r4, #0]
 8008db4:	f001 fc2c 	bl	800a610 <SDMMC_CmdReadSingleBlock>
 8008db8:	e7f4      	b.n	8008da4 <HAL_SD_ReadBlocks+0xb4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008dba:	6823      	ldr	r3, [r4, #0]
 8008dbc:	4a64      	ldr	r2, [pc, #400]	; (8008f50 <HAL_SD_ReadBlocks+0x260>)
 8008dbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008dc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008dc2:	4318      	orrs	r0, r3
 8008dc4:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8008dd0:	e0ba      	b.n	8008f48 <HAL_SD_ReadBlocks+0x258>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008dd2:	6820      	ldr	r0, [r4, #0]
 8008dd4:	f001 facc 	bl	800a370 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008dd8:	7028      	strb	r0, [r5, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008dda:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8008dde:	706b      	strb	r3, [r5, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008de0:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8008de4:	70ab      	strb	r3, [r5, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008de6:	0e00      	lsrs	r0, r0, #24
 8008de8:	70e8      	strb	r0, [r5, #3]
          tempbuff++;
 8008dea:	3504      	adds	r5, #4
          dataremaining--;
 8008dec:	f1ab 0b04 	sub.w	fp, fp, #4
        for(count = 0U; count < 8U; count++)
 8008df0:	3601      	adds	r6, #1
 8008df2:	2e07      	cmp	r6, #7
 8008df4:	d9ed      	bls.n	8008dd2 <HAL_SD_ReadBlocks+0xe2>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008df6:	f7fb f87d 	bl	8003ef4 <HAL_GetTick>
 8008dfa:	eba0 0008 	sub.w	r0, r0, r8
 8008dfe:	4550      	cmp	r0, sl
 8008e00:	d20f      	bcs.n	8008e22 <HAL_SD_ReadBlocks+0x132>
 8008e02:	f1ba 0f00 	cmp.w	sl, #0
 8008e06:	d00c      	beq.n	8008e22 <HAL_SD_ReadBlocks+0x132>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008e08:	6820      	ldr	r0, [r4, #0]
 8008e0a:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8008e0c:	f416 7695 	ands.w	r6, r6, #298	; 0x12a
 8008e10:	d115      	bne.n	8008e3e <HAL_SD_ReadBlocks+0x14e>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008e12:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008e14:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8008e18:	d0ed      	beq.n	8008df6 <HAL_SD_ReadBlocks+0x106>
 8008e1a:	f1bb 0f00 	cmp.w	fp, #0
 8008e1e:	d0ea      	beq.n	8008df6 <HAL_SD_ReadBlocks+0x106>
 8008e20:	e7e7      	b.n	8008df2 <HAL_SD_ReadBlocks+0x102>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e22:	6823      	ldr	r3, [r4, #0]
 8008e24:	4a4a      	ldr	r2, [pc, #296]	; (8008f50 <HAL_SD_ReadBlocks+0x260>)
 8008e26:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008e28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008e2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e2e:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008e30:	2301      	movs	r3, #1
 8008e32:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008e36:	2300      	movs	r3, #0
 8008e38:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8008e3a:	2703      	movs	r7, #3
 8008e3c:	e084      	b.n	8008f48 <HAL_SD_ReadBlocks+0x258>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008e3e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008e40:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008e44:	d005      	beq.n	8008e52 <HAL_SD_ReadBlocks+0x162>
 8008e46:	f1b9 0f01 	cmp.w	r9, #1
 8008e4a:	d902      	bls.n	8008e52 <HAL_SD_ReadBlocks+0x162>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008e4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008e4e:	2b03      	cmp	r3, #3
 8008e50:	d138      	bne.n	8008ec4 <HAL_SD_ReadBlocks+0x1d4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e56:	f012 0f08 	tst.w	r2, #8
 8008e5a:	d144      	bne.n	8008ee6 <HAL_SD_ReadBlocks+0x1f6>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e5e:	f012 0f02 	tst.w	r2, #2
 8008e62:	d14c      	bne.n	8008efe <HAL_SD_ReadBlocks+0x20e>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e66:	f012 0f20 	tst.w	r2, #32
 8008e6a:	d154      	bne.n	8008f16 <HAL_SD_ReadBlocks+0x226>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008e6c:	6820      	ldr	r0, [r4, #0]
 8008e6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008e70:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8008e74:	d05b      	beq.n	8008f2e <HAL_SD_ReadBlocks+0x23e>
 8008e76:	f1bb 0f00 	cmp.w	fp, #0
 8008e7a:	d058      	beq.n	8008f2e <HAL_SD_ReadBlocks+0x23e>
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008e7c:	f001 fa78 	bl	800a370 <SDMMC_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008e80:	7028      	strb	r0, [r5, #0]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008e82:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8008e86:	706b      	strb	r3, [r5, #1]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008e88:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8008e8c:	70ab      	strb	r3, [r5, #2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008e8e:	0e00      	lsrs	r0, r0, #24
 8008e90:	70e8      	strb	r0, [r5, #3]
      tempbuff++;
 8008e92:	3504      	adds	r5, #4
      dataremaining--;
 8008e94:	f1ab 0b04 	sub.w	fp, fp, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008e98:	f7fb f82c 	bl	8003ef4 <HAL_GetTick>
 8008e9c:	eba0 0008 	sub.w	r0, r0, r8
 8008ea0:	4550      	cmp	r0, sl
 8008ea2:	d202      	bcs.n	8008eaa <HAL_SD_ReadBlocks+0x1ba>
 8008ea4:	f1ba 0f00 	cmp.w	sl, #0
 8008ea8:	d1e0      	bne.n	8008e6c <HAL_SD_ReadBlocks+0x17c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	4a28      	ldr	r2, [pc, #160]	; (8008f50 <HAL_SD_ReadBlocks+0x260>)
 8008eae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008eb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008eb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008eb6:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8008ec2:	e041      	b.n	8008f48 <HAL_SD_ReadBlocks+0x258>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ec4:	f001 fc04 	bl	800a6d0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	d0c1      	beq.n	8008e52 <HAL_SD_ReadBlocks+0x162>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ece:	6822      	ldr	r2, [r4, #0]
 8008ed0:	491f      	ldr	r1, [pc, #124]	; (8008f50 <HAL_SD_ReadBlocks+0x260>)
 8008ed2:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008ed4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008eda:	2301      	movs	r3, #1
 8008edc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8008ee4:	e030      	b.n	8008f48 <HAL_SD_ReadBlocks+0x258>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ee6:	4a1a      	ldr	r2, [pc, #104]	; (8008f50 <HAL_SD_ReadBlocks+0x260>)
 8008ee8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008eea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008eec:	f043 0308 	orr.w	r3, r3, #8
 8008ef0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8008efc:	e024      	b.n	8008f48 <HAL_SD_ReadBlocks+0x258>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008efe:	4a14      	ldr	r2, [pc, #80]	; (8008f50 <HAL_SD_ReadBlocks+0x260>)
 8008f00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f04:	f043 0302 	orr.w	r3, r3, #2
 8008f08:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f10:	2300      	movs	r3, #0
 8008f12:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8008f14:	e018      	b.n	8008f48 <HAL_SD_ReadBlocks+0x258>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f16:	4a0e      	ldr	r2, [pc, #56]	; (8008f50 <HAL_SD_ReadBlocks+0x260>)
 8008f18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008f1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f1c:	f043 0320 	orr.w	r3, r3, #32
 8008f20:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f22:	2301      	movs	r3, #1
 8008f24:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8008f2c:	e00c      	b.n	8008f48 <HAL_SD_ReadBlocks+0x258>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f2e:	f240 533a 	movw	r3, #1338	; 0x53a
 8008f32:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008f34:	2301      	movs	r3, #1
 8008f36:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8008f3a:	2700      	movs	r7, #0
 8008f3c:	e004      	b.n	8008f48 <HAL_SD_ReadBlocks+0x258>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008f3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f44:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8008f46:	2701      	movs	r7, #1
}
 8008f48:	4638      	mov	r0, r7
 8008f4a:	b007      	add	sp, #28
 8008f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f50:	004005ff 	.word	0x004005ff

08008f54 <HAL_SD_WriteBlocks>:
{
 8008f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f58:	b089      	sub	sp, #36	; 0x24
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	460d      	mov	r5, r1
 8008f5e:	4616      	mov	r6, r2
 8008f60:	4699      	mov	r9, r3
  uint32_t tickstart = HAL_GetTick();
 8008f62:	f7fa ffc7 	bl	8003ef4 <HAL_GetTick>
  if(NULL == pData)
 8008f66:	b33d      	cbz	r5, 8008fb8 <HAL_SD_WriteBlocks+0x64>
 8008f68:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8008f6a:	f894 7034 	ldrb.w	r7, [r4, #52]	; 0x34
 8008f6e:	b2ff      	uxtb	r7, r7
 8008f70:	2f01      	cmp	r7, #1
 8008f72:	f040 80ee 	bne.w	8009152 <HAL_SD_WriteBlocks+0x1fe>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f76:	2300      	movs	r3, #0
 8008f78:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008f7a:	eb06 0309 	add.w	r3, r6, r9
 8008f7e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d81f      	bhi.n	8008fc4 <HAL_SD_WriteBlocks+0x70>
    hsd->State = HAL_SD_STATE_BUSY;
 8008f84:	2303      	movs	r3, #3
 8008f86:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008f90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d000      	beq.n	8008f98 <HAL_SD_WriteBlocks+0x44>
      add *= 512U;
 8008f96:	0276      	lsls	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f9c:	6820      	ldr	r0, [r4, #0]
 8008f9e:	f001 fb1f 	bl	800a5e0 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fa2:	b1a0      	cbz	r0, 8008fce <HAL_SD_WriteBlocks+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fa4:	6823      	ldr	r3, [r4, #0]
 8008fa6:	496f      	ldr	r1, [pc, #444]	; (8009164 <HAL_SD_WriteBlocks+0x210>)
 8008fa8:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008faa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008fac:	4303      	orrs	r3, r0
 8008fae:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8008fb6:	e0d1      	b.n	800915c <HAL_SD_WriteBlocks+0x208>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008fb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008fba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fbe:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8008fc0:	2701      	movs	r7, #1
 8008fc2:	e0cb      	b.n	800915c <HAL_SD_WriteBlocks+0x208>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008fc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008fc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008fca:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8008fcc:	e0c6      	b.n	800915c <HAL_SD_WriteBlocks+0x208>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008fce:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd2:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008fd4:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8008fd8:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008fda:	2390      	movs	r3, #144	; 0x90
 8008fdc:	9304      	str	r3, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008fe2:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008fe8:	a902      	add	r1, sp, #8
 8008fea:	6820      	ldr	r0, [r4, #0]
 8008fec:	f001 fae6 	bl	800a5bc <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 8008ff0:	f1b9 0f01 	cmp.w	r9, #1
 8008ff4:	d90c      	bls.n	8009010 <HAL_SD_WriteBlocks+0xbc>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008ff6:	2320      	movs	r3, #32
 8008ff8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008ffa:	4631      	mov	r1, r6
 8008ffc:	6820      	ldr	r0, [r4, #0]
 8008ffe:	f001 fb4f 	bl	800a6a0 <SDMMC_CmdWriteMultiBlock>
 8009002:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8009004:	f1ba 0f00 	cmp.w	sl, #0
 8009008:	d10a      	bne.n	8009020 <HAL_SD_WriteBlocks+0xcc>
    dataremaining = config.DataLength;
 800900a:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800900e:	e031      	b.n	8009074 <HAL_SD_WriteBlocks+0x120>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009010:	2310      	movs	r3, #16
 8009012:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009014:	4631      	mov	r1, r6
 8009016:	6820      	ldr	r0, [r4, #0]
 8009018:	f001 fb2a 	bl	800a670 <SDMMC_CmdWriteSingleBlock>
 800901c:	4682      	mov	sl, r0
 800901e:	e7f1      	b.n	8009004 <HAL_SD_WriteBlocks+0xb0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	4a50      	ldr	r2, [pc, #320]	; (8009164 <HAL_SD_WriteBlocks+0x210>)
 8009024:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009026:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009028:	ea40 000a 	orr.w	r0, r0, sl
 800902c:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800902e:	2301      	movs	r3, #1
 8009030:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009034:	2300      	movs	r3, #0
 8009036:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8009038:	e090      	b.n	800915c <HAL_SD_WriteBlocks+0x208>
          data = (uint32_t)(*tempbuff);
 800903a:	782b      	ldrb	r3, [r5, #0]
          data |= ((uint32_t)(*tempbuff) << 8U);
 800903c:	786a      	ldrb	r2, [r5, #1]
 800903e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009042:	78aa      	ldrb	r2, [r5, #2]
 8009044:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009048:	78ea      	ldrb	r2, [r5, #3]
 800904a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800904e:	9301      	str	r3, [sp, #4]
          tempbuff++;
 8009050:	3504      	adds	r5, #4
          dataremaining--;
 8009052:	f1ab 0b04 	sub.w	fp, fp, #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009056:	a901      	add	r1, sp, #4
 8009058:	6820      	ldr	r0, [r4, #0]
 800905a:	f001 f98c 	bl	800a376 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800905e:	3601      	adds	r6, #1
 8009060:	2e07      	cmp	r6, #7
 8009062:	d9ea      	bls.n	800903a <HAL_SD_WriteBlocks+0xe6>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009064:	f7fa ff46 	bl	8003ef4 <HAL_GetTick>
 8009068:	eba0 0008 	sub.w	r0, r0, r8
 800906c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800906e:	4298      	cmp	r0, r3
 8009070:	d20d      	bcs.n	800908e <HAL_SD_WriteBlocks+0x13a>
 8009072:	b163      	cbz	r3, 800908e <HAL_SD_WriteBlocks+0x13a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009074:	6820      	ldr	r0, [r4, #0]
 8009076:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8009078:	f416 768d 	ands.w	r6, r6, #282	; 0x11a
 800907c:	d115      	bne.n	80090aa <HAL_SD_WriteBlocks+0x156>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800907e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009080:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8009084:	d0ee      	beq.n	8009064 <HAL_SD_WriteBlocks+0x110>
 8009086:	f1bb 0f00 	cmp.w	fp, #0
 800908a:	d0eb      	beq.n	8009064 <HAL_SD_WriteBlocks+0x110>
 800908c:	e7e8      	b.n	8009060 <HAL_SD_WriteBlocks+0x10c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	4a34      	ldr	r2, [pc, #208]	; (8009164 <HAL_SD_WriteBlocks+0x210>)
 8009092:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009094:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009096:	ea40 000a 	orr.w	r0, r0, sl
 800909a:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800909c:	2301      	movs	r3, #1
 800909e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80090a2:	2300      	movs	r3, #0
 80090a4:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80090a6:	2703      	movs	r7, #3
 80090a8:	e058      	b.n	800915c <HAL_SD_WriteBlocks+0x208>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80090aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80090ac:	f413 7f80 	tst.w	r3, #256	; 0x100
 80090b0:	d005      	beq.n	80090be <HAL_SD_WriteBlocks+0x16a>
 80090b2:	f1b9 0f01 	cmp.w	r9, #1
 80090b6:	d902      	bls.n	80090be <HAL_SD_WriteBlocks+0x16a>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80090b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	d118      	bne.n	80090f0 <HAL_SD_WriteBlocks+0x19c>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80090be:	6823      	ldr	r3, [r4, #0]
 80090c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090c2:	f012 0f08 	tst.w	r2, #8
 80090c6:	d124      	bne.n	8009112 <HAL_SD_WriteBlocks+0x1be>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80090c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090ca:	f012 0f02 	tst.w	r2, #2
 80090ce:	d12c      	bne.n	800912a <HAL_SD_WriteBlocks+0x1d6>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80090d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090d2:	f012 0f10 	tst.w	r2, #16
 80090d6:	d034      	beq.n	8009142 <HAL_SD_WriteBlocks+0x1ee>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090d8:	4a22      	ldr	r2, [pc, #136]	; (8009164 <HAL_SD_WriteBlocks+0x210>)
 80090da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80090dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80090de:	f043 0310 	orr.w	r3, r3, #16
 80090e2:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80090e4:	2301      	movs	r3, #1
 80090e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80090ea:	2300      	movs	r3, #0
 80090ec:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80090ee:	e035      	b.n	800915c <HAL_SD_WriteBlocks+0x208>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80090f0:	f001 faee 	bl	800a6d0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80090f4:	4603      	mov	r3, r0
 80090f6:	2800      	cmp	r0, #0
 80090f8:	d0e1      	beq.n	80090be <HAL_SD_WriteBlocks+0x16a>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090fa:	6822      	ldr	r2, [r4, #0]
 80090fc:	4919      	ldr	r1, [pc, #100]	; (8009164 <HAL_SD_WriteBlocks+0x210>)
 80090fe:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009100:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009102:	4313      	orrs	r3, r2
 8009104:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009106:	2301      	movs	r3, #1
 8009108:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800910c:	2300      	movs	r3, #0
 800910e:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8009110:	e024      	b.n	800915c <HAL_SD_WriteBlocks+0x208>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009112:	4a14      	ldr	r2, [pc, #80]	; (8009164 <HAL_SD_WriteBlocks+0x210>)
 8009114:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009118:	f043 0308 	orr.w	r3, r3, #8
 800911c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800911e:	2301      	movs	r3, #1
 8009120:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009124:	2300      	movs	r3, #0
 8009126:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8009128:	e018      	b.n	800915c <HAL_SD_WriteBlocks+0x208>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800912a:	4a0e      	ldr	r2, [pc, #56]	; (8009164 <HAL_SD_WriteBlocks+0x210>)
 800912c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800912e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009130:	f043 0302 	orr.w	r3, r3, #2
 8009134:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009136:	2301      	movs	r3, #1
 8009138:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800913c:	2300      	movs	r3, #0
 800913e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8009140:	e00c      	b.n	800915c <HAL_SD_WriteBlocks+0x208>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009142:	f240 523a 	movw	r2, #1338	; 0x53a
 8009146:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009148:	2301      	movs	r3, #1
 800914a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800914e:	2700      	movs	r7, #0
 8009150:	e004      	b.n	800915c <HAL_SD_WriteBlocks+0x208>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009152:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009154:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009158:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800915a:	2701      	movs	r7, #1
}
 800915c:	4638      	mov	r0, r7
 800915e:	b009      	add	sp, #36	; 0x24
 8009160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009164:	004005ff 	.word	0x004005ff

08009168 <HAL_SD_GetCardCSD>:
{
 8009168:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800916a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800916c:	0f9b      	lsrs	r3, r3, #30
 800916e:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009170:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8009172:	f3c3 6383 	ubfx	r3, r3, #26, #4
 8009176:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009178:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 800917c:	f003 0303 	and.w	r3, r3, #3
 8009180:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009182:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8009186:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009188:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 800918c:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800918e:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8009192:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009194:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009196:	0d1b      	lsrs	r3, r3, #20
 8009198:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800919a:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800919e:	f003 030f 	and.w	r3, r3, #15
 80091a2:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80091a4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80091a6:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80091aa:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80091ac:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80091ae:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80091b2:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80091b4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80091b6:	f3c3 3340 	ubfx	r3, r3, #13, #1
 80091ba:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80091bc:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80091be:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80091c2:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80091c4:	2300      	movs	r3, #0
 80091c6:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80091c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f040 8088 	bne.w	80092e0 <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80091d0:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80091d2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80091d6:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 80091da:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80091dc:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80091e0:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80091e2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80091e4:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 80091e8:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80091ea:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 80091ee:	f003 0307 	and.w	r3, r3, #7
 80091f2:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80091f4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80091f6:	f3c3 5342 	ubfx	r3, r3, #21, #3
 80091fa:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80091fc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80091fe:	f3c3 4382 	ubfx	r3, r3, #18, #3
 8009202:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009204:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009206:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 800920a:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800920c:	690b      	ldr	r3, [r1, #16]
 800920e:	3301      	adds	r3, #1
 8009210:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009212:	7e0a      	ldrb	r2, [r1, #24]
 8009214:	f002 0207 	and.w	r2, r2, #7
 8009218:	3202      	adds	r2, #2
 800921a:	fa03 f202 	lsl.w	r2, r3, r2
 800921e:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009220:	7a0b      	ldrb	r3, [r1, #8]
 8009222:	f003 040f 	and.w	r4, r3, #15
 8009226:	2301      	movs	r3, #1
 8009228:	40a3      	lsls	r3, r4
 800922a:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800922c:	0a5b      	lsrs	r3, r3, #9
 800922e:	fb03 f302 	mul.w	r3, r3, r2
 8009232:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009238:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800923a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800923c:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8009240:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009242:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009244:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8009248:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800924a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800924c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009250:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009252:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8009254:	0fdb      	lsrs	r3, r3, #31
 8009256:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009258:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800925a:	f3c3 7341 	ubfx	r3, r3, #29, #2
 800925e:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009260:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8009262:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8009266:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009268:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800926a:	f3c3 5383 	ubfx	r3, r3, #22, #4
 800926e:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009270:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8009272:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8009276:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 800927a:	2300      	movs	r3, #0
 800927c:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009280:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 8009284:	f002 0201 	and.w	r2, r2, #1
 8009288:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800928c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800928e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8009292:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009296:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8009298:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800929c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80092a0:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80092a2:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80092a6:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80092aa:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80092ac:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80092b0:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80092b4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80092b6:	f3c2 2281 	ubfx	r2, r2, #10, #2
 80092ba:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80092be:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80092c0:	f3c2 2201 	ubfx	r2, r2, #8, #2
 80092c4:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80092c8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80092ca:	f3c2 0246 	ubfx	r2, r2, #1, #7
 80092ce:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80092d2:	2201      	movs	r2, #1
 80092d4:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 80092d8:	4618      	mov	r0, r3
}
 80092da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092de:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d111      	bne.n	8009308 <HAL_SD_GetCardCSD+0x1a0>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80092e4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80092e6:	041b      	lsls	r3, r3, #16
 80092e8:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80092ec:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 80092f0:	4313      	orrs	r3, r2
 80092f2:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80092f4:	690b      	ldr	r3, [r1, #16]
 80092f6:	3301      	adds	r3, #1
 80092f8:	029b      	lsls	r3, r3, #10
 80092fa:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80092fc:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80092fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009302:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009304:	6603      	str	r3, [r0, #96]	; 0x60
 8009306:	e798      	b.n	800923a <HAL_SD_GetCardCSD+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009308:	6803      	ldr	r3, [r0, #0]
 800930a:	4a05      	ldr	r2, [pc, #20]	; (8009320 <HAL_SD_GetCardCSD+0x1b8>)
 800930c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800930e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009314:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009316:	2301      	movs	r3, #1
 8009318:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800931c:	4618      	mov	r0, r3
 800931e:	e7dc      	b.n	80092da <HAL_SD_GetCardCSD+0x172>
 8009320:	004005ff 	.word	0x004005ff

08009324 <SD_InitCard>:
{
 8009324:	b570      	push	{r4, r5, r6, lr}
 8009326:	b090      	sub	sp, #64	; 0x40
 8009328:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 800932a:	2301      	movs	r3, #1
 800932c:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009330:	6800      	ldr	r0, [r0, #0]
 8009332:	f001 f82d 	bl	800a390 <SDMMC_GetPowerState>
 8009336:	2800      	cmp	r0, #0
 8009338:	d06c      	beq.n	8009414 <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800933a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800933c:	2b03      	cmp	r3, #3
 800933e:	d145      	bne.n	80093cc <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009340:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009342:	2b03      	cmp	r3, #3
 8009344:	d15d      	bne.n	8009402 <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009346:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009348:	2b03      	cmp	r3, #3
 800934a:	d01d      	beq.n	8009388 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 800934c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8009350:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009352:	0409      	lsls	r1, r1, #16
 8009354:	6820      	ldr	r0, [r4, #0]
 8009356:	f001 fa8e 	bl	800a876 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800935a:	4605      	mov	r5, r0
 800935c:	2800      	cmp	r0, #0
 800935e:	d15b      	bne.n	8009418 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009360:	2100      	movs	r1, #0
 8009362:	6820      	ldr	r0, [r4, #0]
 8009364:	f001 f82d 	bl	800a3c2 <SDMMC_GetResponse>
 8009368:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800936a:	2104      	movs	r1, #4
 800936c:	6820      	ldr	r0, [r4, #0]
 800936e:	f001 f828 	bl	800a3c2 <SDMMC_GetResponse>
 8009372:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009374:	2108      	movs	r1, #8
 8009376:	6820      	ldr	r0, [r4, #0]
 8009378:	f001 f823 	bl	800a3c2 <SDMMC_GetResponse>
 800937c:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800937e:	210c      	movs	r1, #12
 8009380:	6820      	ldr	r0, [r4, #0]
 8009382:	f001 f81e 	bl	800a3c2 <SDMMC_GetResponse>
 8009386:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009388:	2104      	movs	r1, #4
 800938a:	6820      	ldr	r0, [r4, #0]
 800938c:	f001 f819 	bl	800a3c2 <SDMMC_GetResponse>
 8009390:	0d00      	lsrs	r0, r0, #20
 8009392:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009394:	a905      	add	r1, sp, #20
 8009396:	4620      	mov	r0, r4
 8009398:	f7ff fee6 	bl	8009168 <HAL_SD_GetCardCSD>
 800939c:	2800      	cmp	r0, #0
 800939e:	d13e      	bne.n	800941e <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80093a0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80093a2:	0412      	lsls	r2, r2, #16
 80093a4:	2300      	movs	r3, #0
 80093a6:	6820      	ldr	r0, [r4, #0]
 80093a8:	f001 f9ac 	bl	800a704 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80093ac:	4605      	mov	r5, r0
 80093ae:	bb98      	cbnz	r0, 8009418 <SD_InitCard+0xf4>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80093b0:	4623      	mov	r3, r4
 80093b2:	f853 6b10 	ldr.w	r6, [r3], #16
 80093b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80093ba:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80093be:	3404      	adds	r4, #4
 80093c0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80093c4:	4630      	mov	r0, r6
 80093c6:	f000 ffb7 	bl	800a338 <SDMMC_Init>
  return HAL_SD_ERROR_NONE;
 80093ca:	e025      	b.n	8009418 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80093cc:	6820      	ldr	r0, [r4, #0]
 80093ce:	f001 fa3d 	bl	800a84c <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80093d2:	4605      	mov	r5, r0
 80093d4:	bb00      	cbnz	r0, 8009418 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80093d6:	2100      	movs	r1, #0
 80093d8:	6820      	ldr	r0, [r4, #0]
 80093da:	f000 fff2 	bl	800a3c2 <SDMMC_GetResponse>
 80093de:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80093e0:	2104      	movs	r1, #4
 80093e2:	6820      	ldr	r0, [r4, #0]
 80093e4:	f000 ffed 	bl	800a3c2 <SDMMC_GetResponse>
 80093e8:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80093ea:	2108      	movs	r1, #8
 80093ec:	6820      	ldr	r0, [r4, #0]
 80093ee:	f000 ffe8 	bl	800a3c2 <SDMMC_GetResponse>
 80093f2:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80093f4:	210c      	movs	r1, #12
 80093f6:	6820      	ldr	r0, [r4, #0]
 80093f8:	f000 ffe3 	bl	800a3c2 <SDMMC_GetResponse>
 80093fc:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8009400:	e79e      	b.n	8009340 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009402:	f10d 0112 	add.w	r1, sp, #18
 8009406:	6820      	ldr	r0, [r4, #0]
 8009408:	f001 fa4a 	bl	800a8a0 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800940c:	4605      	mov	r5, r0
 800940e:	2800      	cmp	r0, #0
 8009410:	d099      	beq.n	8009346 <SD_InitCard+0x22>
 8009412:	e001      	b.n	8009418 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009414:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8009418:	4628      	mov	r0, r5
 800941a:	b010      	add	sp, #64	; 0x40
 800941c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800941e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8009422:	e7f9      	b.n	8009418 <SD_InitCard+0xf4>

08009424 <HAL_SD_InitCard>:
{
 8009424:	b530      	push	{r4, r5, lr}
 8009426:	b08b      	sub	sp, #44	; 0x2c
 8009428:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800942a:	2300      	movs	r3, #0
 800942c:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800942e:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009430:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009432:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009434:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8009436:	2376      	movs	r3, #118	; 0x76
 8009438:	9309      	str	r3, [sp, #36]	; 0x24
  status = SDMMC_Init(hsd->Instance, Init);
 800943a:	ab0a      	add	r3, sp, #40	; 0x28
 800943c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8009440:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009444:	ab04      	add	r3, sp, #16
 8009446:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009448:	6820      	ldr	r0, [r4, #0]
 800944a:	f000 ff75 	bl	800a338 <SDMMC_Init>
  if(status != HAL_OK)
 800944e:	b118      	cbz	r0, 8009458 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8009450:	2501      	movs	r5, #1
}
 8009452:	4628      	mov	r0, r5
 8009454:	b00b      	add	sp, #44	; 0x2c
 8009456:	bd30      	pop	{r4, r5, pc}
 8009458:	4605      	mov	r5, r0
  __HAL_SD_DISABLE(hsd);
 800945a:	6822      	ldr	r2, [r4, #0]
 800945c:	6853      	ldr	r3, [r2, #4]
 800945e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009462:	6053      	str	r3, [r2, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009464:	6820      	ldr	r0, [r4, #0]
 8009466:	f000 ff8b 	bl	800a380 <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 800946a:	6822      	ldr	r2, [r4, #0]
 800946c:	6853      	ldr	r3, [r2, #4]
 800946e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009472:	6053      	str	r3, [r2, #4]
  errorstate = SD_PowerON(hsd);
 8009474:	4620      	mov	r0, r4
 8009476:	f7ff faf7 	bl	8008a68 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 800947a:	b130      	cbz	r0, 800948a <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 800947c:	2501      	movs	r5, #1
 800947e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009482:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009484:	4303      	orrs	r3, r0
 8009486:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8009488:	e7e3      	b.n	8009452 <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 800948a:	4620      	mov	r0, r4
 800948c:	f7ff ff4a 	bl	8009324 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009490:	2800      	cmp	r0, #0
 8009492:	d0de      	beq.n	8009452 <HAL_SD_InitCard+0x2e>
    hsd->State = HAL_SD_STATE_READY;
 8009494:	2501      	movs	r5, #1
 8009496:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800949a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800949c:	4303      	orrs	r3, r0
 800949e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80094a0:	e7d7      	b.n	8009452 <HAL_SD_InitCard+0x2e>

080094a2 <HAL_SD_Init>:
  if(hsd == NULL)
 80094a2:	b1a8      	cbz	r0, 80094d0 <HAL_SD_Init+0x2e>
{
 80094a4:	b510      	push	{r4, lr}
 80094a6:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 80094a8:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80094ac:	b163      	cbz	r3, 80094c8 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 80094ae:	2303      	movs	r3, #3
 80094b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80094b4:	4620      	mov	r0, r4
 80094b6:	f7ff ffb5 	bl	8009424 <HAL_SD_InitCard>
 80094ba:	b958      	cbnz	r0, 80094d4 <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80094bc:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80094be:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80094c0:	2301      	movs	r3, #1
 80094c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80094c6:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 80094c8:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 80094ca:	f7ff fc0f 	bl	8008cec <HAL_SD_MspInit>
 80094ce:	e7ee      	b.n	80094ae <HAL_SD_Init+0xc>
    return HAL_ERROR;
 80094d0:	2001      	movs	r0, #1
}
 80094d2:	4770      	bx	lr
    return HAL_ERROR;
 80094d4:	2001      	movs	r0, #1
 80094d6:	e7f6      	b.n	80094c6 <HAL_SD_Init+0x24>

080094d8 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80094d8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80094da:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80094dc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80094de:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80094e0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80094e2:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80094e4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80094e6:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80094e8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80094ea:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80094ec:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80094ee:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80094f0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80094f2:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80094f4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80094f6:	61cb      	str	r3, [r1, #28]
}
 80094f8:	2000      	movs	r0, #0
 80094fa:	4770      	bx	lr

080094fc <HAL_SD_ConfigWideBusOperation>:
{
 80094fc:	b530      	push	{r4, r5, lr}
 80094fe:	b08b      	sub	sp, #44	; 0x2c
 8009500:	4604      	mov	r4, r0
 8009502:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8009504:	2303      	movs	r3, #3
 8009506:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 800950a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800950c:	2b03      	cmp	r3, #3
 800950e:	d01c      	beq.n	800954a <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009510:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009514:	d008      	beq.n	8009528 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009516:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800951a:	d00a      	beq.n	8009532 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800951c:	b179      	cbz	r1, 800953e <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800951e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009520:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009524:	6383      	str	r3, [r0, #56]	; 0x38
 8009526:	e014      	b.n	8009552 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009528:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800952a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800952e:	6383      	str	r3, [r0, #56]	; 0x38
 8009530:	e00f      	b.n	8009552 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8009532:	f7ff fb77 	bl	8008c24 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8009536:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009538:	4303      	orrs	r3, r0
 800953a:	63a3      	str	r3, [r4, #56]	; 0x38
 800953c:	e009      	b.n	8009552 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 800953e:	f7ff fb98 	bl	8008c72 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8009542:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009544:	4303      	orrs	r3, r0
 8009546:	63a3      	str	r3, [r4, #56]	; 0x38
 8009548:	e003      	b.n	8009552 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800954a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800954c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009550:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009552:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009554:	b13b      	cbz	r3, 8009566 <HAL_SD_ConfigWideBusOperation+0x6a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	4a10      	ldr	r2, [pc, #64]	; (800959c <HAL_SD_ConfigWideBusOperation+0xa0>)
 800955a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800955c:	2001      	movs	r0, #1
 800955e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8009562:	b00b      	add	sp, #44	; 0x2c
 8009564:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009566:	6863      	ldr	r3, [r4, #4]
 8009568:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800956a:	68a3      	ldr	r3, [r4, #8]
 800956c:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800956e:	68e3      	ldr	r3, [r4, #12]
 8009570:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8009572:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009574:	6963      	ldr	r3, [r4, #20]
 8009576:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009578:	69a3      	ldr	r3, [r4, #24]
 800957a:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 800957c:	ab0a      	add	r3, sp, #40	; 0x28
 800957e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8009582:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009586:	ab04      	add	r3, sp, #16
 8009588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800958a:	6820      	ldr	r0, [r4, #0]
 800958c:	f000 fed4 	bl	800a338 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 8009590:	2301      	movs	r3, #1
 8009592:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8009596:	2000      	movs	r0, #0
 8009598:	e7e3      	b.n	8009562 <HAL_SD_ConfigWideBusOperation+0x66>
 800959a:	bf00      	nop
 800959c:	004005ff 	.word	0x004005ff

080095a0 <HAL_SD_GetCardState>:
{
 80095a0:	b510      	push	{r4, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 80095a6:	2300      	movs	r3, #0
 80095a8:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 80095aa:	a901      	add	r1, sp, #4
 80095ac:	f7ff fb88 	bl	8008cc0 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80095b0:	b110      	cbz	r0, 80095b8 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 80095b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80095b4:	4303      	orrs	r3, r0
 80095b6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80095b8:	9801      	ldr	r0, [sp, #4]
 80095ba:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80095be:	b002      	add	sp, #8
 80095c0:	bd10      	pop	{r4, pc}

080095c2 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 80095c2:	4770      	bx	lr

080095c4 <HAL_SDRAM_Init>:
  if(hsdram == NULL)
 80095c4:	b1e0      	cbz	r0, 8009600 <HAL_SDRAM_Init+0x3c>
{   
 80095c6:	b538      	push	{r3, r4, r5, lr}
 80095c8:	460d      	mov	r5, r1
 80095ca:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80095cc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80095d0:	b18b      	cbz	r3, 80095f6 <HAL_SDRAM_Init+0x32>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095d2:	2302      	movs	r3, #2
 80095d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80095d8:	4621      	mov	r1, r4
 80095da:	f851 0b04 	ldr.w	r0, [r1], #4
 80095de:	f000 fd67 	bl	800a0b0 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80095e2:	6862      	ldr	r2, [r4, #4]
 80095e4:	4629      	mov	r1, r5
 80095e6:	6820      	ldr	r0, [r4, #0]
 80095e8:	f000 fd9c 	bl	800a124 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 80095ec:	2301      	movs	r3, #1
 80095ee:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80095f2:	2000      	movs	r0, #0
}
 80095f4:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 80095f6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80095fa:	f7ff ffe2 	bl	80095c2 <HAL_SDRAM_MspInit>
 80095fe:	e7e8      	b.n	80095d2 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8009600:	2001      	movs	r0, #1
}
 8009602:	4770      	bx	lr

08009604 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009608:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800960c:	b2c0      	uxtb	r0, r0
 800960e:	2802      	cmp	r0, #2
 8009610:	d00d      	beq.n	800962e <HAL_SDRAM_SendCommand+0x2a>
 8009612:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009614:	2302      	movs	r3, #2
 8009616:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800961a:	6820      	ldr	r0, [r4, #0]
 800961c:	f000 fdce 	bl	800a1bc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	2b02      	cmp	r3, #2
 8009624:	d004      	beq.n	8009630 <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009626:	2301      	movs	r3, #1
 8009628:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800962c:	2000      	movs	r0, #0
}
 800962e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009630:	2305      	movs	r3, #5
 8009632:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 8009636:	2000      	movs	r0, #0
 8009638:	e7f9      	b.n	800962e <HAL_SDRAM_SendCommand+0x2a>

0800963a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800963a:	b510      	push	{r4, lr}
 800963c:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800963e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8009642:	b2c0      	uxtb	r0, r0
 8009644:	2802      	cmp	r0, #2
 8009646:	d009      	beq.n	800965c <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009648:	2302      	movs	r3, #2
 800964a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800964e:	6820      	ldr	r0, [r4, #0]
 8009650:	f000 fdca 	bl	800a1e8 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009654:	2301      	movs	r3, #1
 8009656:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 800965a:	2000      	movs	r0, #0
}
 800965c:	bd10      	pop	{r4, pc}

0800965e <HAL_TIM_Base_MspInit>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800965e:	4770      	bx	lr

08009660 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009660:	6802      	ldr	r2, [r0, #0]
 8009662:	68d3      	ldr	r3, [r2, #12]
 8009664:	f043 0301 	orr.w	r3, r3, #1
 8009668:	60d3      	str	r3, [r2, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800966a:	6802      	ldr	r2, [r0, #0]
 800966c:	6813      	ldr	r3, [r2, #0]
 800966e:	f043 0301 	orr.w	r3, r3, #1
 8009672:	6013      	str	r3, [r2, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8009674:	2000      	movs	r0, #0
 8009676:	4770      	bx	lr

08009678 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009678:	4770      	bx	lr

0800967a <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800967a:	4770      	bx	lr

0800967c <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800967c:	4770      	bx	lr

0800967e <HAL_TIM_TriggerCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800967e:	4770      	bx	lr

08009680 <HAL_TIM_IRQHandler>:
{
 8009680:	b510      	push	{r4, lr}
 8009682:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009684:	6803      	ldr	r3, [r0, #0]
 8009686:	691a      	ldr	r2, [r3, #16]
 8009688:	f012 0f02 	tst.w	r2, #2
 800968c:	d011      	beq.n	80096b2 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800968e:	68da      	ldr	r2, [r3, #12]
 8009690:	f012 0f02 	tst.w	r2, #2
 8009694:	d00d      	beq.n	80096b2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009696:	f06f 0202 	mvn.w	r2, #2
 800969a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800969c:	2301      	movs	r3, #1
 800969e:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80096a0:	6803      	ldr	r3, [r0, #0]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	f013 0f03 	tst.w	r3, #3
 80096a8:	d079      	beq.n	800979e <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80096aa:	f7ff ffe6 	bl	800967a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096ae:	2300      	movs	r3, #0
 80096b0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	691a      	ldr	r2, [r3, #16]
 80096b6:	f012 0f04 	tst.w	r2, #4
 80096ba:	d012      	beq.n	80096e2 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80096bc:	68da      	ldr	r2, [r3, #12]
 80096be:	f012 0f04 	tst.w	r2, #4
 80096c2:	d00e      	beq.n	80096e2 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096c4:	f06f 0204 	mvn.w	r2, #4
 80096c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096ca:	2302      	movs	r3, #2
 80096cc:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80096d6:	d068      	beq.n	80097aa <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80096d8:	4620      	mov	r0, r4
 80096da:	f7ff ffce 	bl	800967a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096de:	2300      	movs	r3, #0
 80096e0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	691a      	ldr	r2, [r3, #16]
 80096e6:	f012 0f08 	tst.w	r2, #8
 80096ea:	d012      	beq.n	8009712 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80096ec:	68da      	ldr	r2, [r3, #12]
 80096ee:	f012 0f08 	tst.w	r2, #8
 80096f2:	d00e      	beq.n	8009712 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80096f4:	f06f 0208 	mvn.w	r2, #8
 80096f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096fa:	2304      	movs	r3, #4
 80096fc:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	f013 0f03 	tst.w	r3, #3
 8009706:	d057      	beq.n	80097b8 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8009708:	4620      	mov	r0, r4
 800970a:	f7ff ffb6 	bl	800967a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800970e:	2300      	movs	r3, #0
 8009710:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	691a      	ldr	r2, [r3, #16]
 8009716:	f012 0f10 	tst.w	r2, #16
 800971a:	d012      	beq.n	8009742 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800971c:	68da      	ldr	r2, [r3, #12]
 800971e:	f012 0f10 	tst.w	r2, #16
 8009722:	d00e      	beq.n	8009742 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009724:	f06f 0210 	mvn.w	r2, #16
 8009728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800972a:	2308      	movs	r3, #8
 800972c:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800972e:	6823      	ldr	r3, [r4, #0]
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009736:	d046      	beq.n	80097c6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8009738:	4620      	mov	r0, r4
 800973a:	f7ff ff9e 	bl	800967a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800973e:	2300      	movs	r3, #0
 8009740:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	691a      	ldr	r2, [r3, #16]
 8009746:	f012 0f01 	tst.w	r2, #1
 800974a:	d003      	beq.n	8009754 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800974c:	68da      	ldr	r2, [r3, #12]
 800974e:	f012 0f01 	tst.w	r2, #1
 8009752:	d13f      	bne.n	80097d4 <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009754:	6823      	ldr	r3, [r4, #0]
 8009756:	691a      	ldr	r2, [r3, #16]
 8009758:	f012 0f80 	tst.w	r2, #128	; 0x80
 800975c:	d003      	beq.n	8009766 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800975e:	68da      	ldr	r2, [r3, #12]
 8009760:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009764:	d13d      	bne.n	80097e2 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009766:	6823      	ldr	r3, [r4, #0]
 8009768:	691a      	ldr	r2, [r3, #16]
 800976a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800976e:	d003      	beq.n	8009778 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8009770:	68da      	ldr	r2, [r3, #12]
 8009772:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009776:	d13b      	bne.n	80097f0 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	691a      	ldr	r2, [r3, #16]
 800977c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009780:	d003      	beq.n	800978a <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8009782:	68da      	ldr	r2, [r3, #12]
 8009784:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009788:	d139      	bne.n	80097fe <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	691a      	ldr	r2, [r3, #16]
 800978e:	f012 0f20 	tst.w	r2, #32
 8009792:	d003      	beq.n	800979c <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8009794:	68da      	ldr	r2, [r3, #12]
 8009796:	f012 0f20 	tst.w	r2, #32
 800979a:	d137      	bne.n	800980c <HAL_TIM_IRQHandler+0x18c>
}
 800979c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800979e:	f7ff ff6b 	bl	8009678 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097a2:	4620      	mov	r0, r4
 80097a4:	f7ff ff6a 	bl	800967c <HAL_TIM_PWM_PulseFinishedCallback>
 80097a8:	e781      	b.n	80096ae <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097aa:	4620      	mov	r0, r4
 80097ac:	f7ff ff64 	bl	8009678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097b0:	4620      	mov	r0, r4
 80097b2:	f7ff ff63 	bl	800967c <HAL_TIM_PWM_PulseFinishedCallback>
 80097b6:	e792      	b.n	80096de <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097b8:	4620      	mov	r0, r4
 80097ba:	f7ff ff5d 	bl	8009678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80097be:	4620      	mov	r0, r4
 80097c0:	f7ff ff5c 	bl	800967c <HAL_TIM_PWM_PulseFinishedCallback>
 80097c4:	e7a3      	b.n	800970e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097c6:	4620      	mov	r0, r4
 80097c8:	f7ff ff56 	bl	8009678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097cc:	4620      	mov	r0, r4
 80097ce:	f7ff ff55 	bl	800967c <HAL_TIM_PWM_PulseFinishedCallback>
 80097d2:	e7b4      	b.n	800973e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097d4:	f06f 0201 	mvn.w	r2, #1
 80097d8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80097da:	4620      	mov	r0, r4
 80097dc:	f003 f8b6 	bl	800c94c <HAL_TIM_PeriodElapsedCallback>
 80097e0:	e7b8      	b.n	8009754 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80097e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80097e8:	4620      	mov	r0, r4
 80097ea:	f000 f8b8 	bl	800995e <HAL_TIMEx_BreakCallback>
 80097ee:	e7ba      	b.n	8009766 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80097f4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80097f6:	4620      	mov	r0, r4
 80097f8:	f000 f8b1 	bl	800995e <HAL_TIMEx_BreakCallback>
 80097fc:	e7bc      	b.n	8009778 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80097fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009802:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009804:	4620      	mov	r0, r4
 8009806:	f7ff ff3a 	bl	800967e <HAL_TIM_TriggerCallback>
 800980a:	e7be      	b.n	800978a <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800980c:	f06f 0220 	mvn.w	r2, #32
 8009810:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8009812:	4620      	mov	r0, r4
 8009814:	f000 f8a2 	bl	800995c <HAL_TIMEx_CommutCallback>
}
 8009818:	e7c0      	b.n	800979c <HAL_TIM_IRQHandler+0x11c>
	...

0800981c <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800981c:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 800981e:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8009820:	4c3a      	ldr	r4, [pc, #232]	; (800990c <TIM_Base_SetConfig+0xf0>)
 8009822:	42a0      	cmp	r0, r4
 8009824:	bf14      	ite	ne
 8009826:	2400      	movne	r4, #0
 8009828:	2401      	moveq	r4, #1
 800982a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800982e:	bf14      	ite	ne
 8009830:	4622      	movne	r2, r4
 8009832:	f044 0201 	orreq.w	r2, r4, #1
 8009836:	b9aa      	cbnz	r2, 8009864 <TIM_Base_SetConfig+0x48>
 8009838:	4d35      	ldr	r5, [pc, #212]	; (8009910 <TIM_Base_SetConfig+0xf4>)
 800983a:	42a8      	cmp	r0, r5
 800983c:	bf14      	ite	ne
 800983e:	2500      	movne	r5, #0
 8009840:	2501      	moveq	r5, #1
 8009842:	4e34      	ldr	r6, [pc, #208]	; (8009914 <TIM_Base_SetConfig+0xf8>)
 8009844:	42b0      	cmp	r0, r6
 8009846:	d00d      	beq.n	8009864 <TIM_Base_SetConfig+0x48>
 8009848:	b965      	cbnz	r5, 8009864 <TIM_Base_SetConfig+0x48>
 800984a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800984e:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8009852:	42a8      	cmp	r0, r5
 8009854:	bf14      	ite	ne
 8009856:	2500      	movne	r5, #0
 8009858:	2501      	moveq	r5, #1
 800985a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800985e:	42b0      	cmp	r0, r6
 8009860:	d000      	beq.n	8009864 <TIM_Base_SetConfig+0x48>
 8009862:	b11d      	cbz	r5, 800986c <TIM_Base_SetConfig+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009868:	684d      	ldr	r5, [r1, #4]
 800986a:	432b      	orrs	r3, r5
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800986c:	2a00      	cmp	r2, #0
 800986e:	d133      	bne.n	80098d8 <TIM_Base_SetConfig+0xbc>
 8009870:	4a27      	ldr	r2, [pc, #156]	; (8009910 <TIM_Base_SetConfig+0xf4>)
 8009872:	4290      	cmp	r0, r2
 8009874:	bf14      	ite	ne
 8009876:	2200      	movne	r2, #0
 8009878:	2201      	moveq	r2, #1
 800987a:	4d26      	ldr	r5, [pc, #152]	; (8009914 <TIM_Base_SetConfig+0xf8>)
 800987c:	42a8      	cmp	r0, r5
 800987e:	d02b      	beq.n	80098d8 <TIM_Base_SetConfig+0xbc>
 8009880:	bb52      	cbnz	r2, 80098d8 <TIM_Base_SetConfig+0xbc>
 8009882:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8009886:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800988a:	4290      	cmp	r0, r2
 800988c:	bf14      	ite	ne
 800988e:	2200      	movne	r2, #0
 8009890:	2201      	moveq	r2, #1
 8009892:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009896:	42a8      	cmp	r0, r5
 8009898:	d01e      	beq.n	80098d8 <TIM_Base_SetConfig+0xbc>
 800989a:	b9ea      	cbnz	r2, 80098d8 <TIM_Base_SetConfig+0xbc>
 800989c:	4a1e      	ldr	r2, [pc, #120]	; (8009918 <TIM_Base_SetConfig+0xfc>)
 800989e:	4290      	cmp	r0, r2
 80098a0:	bf14      	ite	ne
 80098a2:	2200      	movne	r2, #0
 80098a4:	2201      	moveq	r2, #1
 80098a6:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 80098aa:	42a8      	cmp	r0, r5
 80098ac:	d014      	beq.n	80098d8 <TIM_Base_SetConfig+0xbc>
 80098ae:	b99a      	cbnz	r2, 80098d8 <TIM_Base_SetConfig+0xbc>
 80098b0:	4a1a      	ldr	r2, [pc, #104]	; (800991c <TIM_Base_SetConfig+0x100>)
 80098b2:	4290      	cmp	r0, r2
 80098b4:	bf14      	ite	ne
 80098b6:	2200      	movne	r2, #0
 80098b8:	2201      	moveq	r2, #1
 80098ba:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80098be:	42a8      	cmp	r0, r5
 80098c0:	d00a      	beq.n	80098d8 <TIM_Base_SetConfig+0xbc>
 80098c2:	b94a      	cbnz	r2, 80098d8 <TIM_Base_SetConfig+0xbc>
 80098c4:	4a16      	ldr	r2, [pc, #88]	; (8009920 <TIM_Base_SetConfig+0x104>)
 80098c6:	4290      	cmp	r0, r2
 80098c8:	bf14      	ite	ne
 80098ca:	2200      	movne	r2, #0
 80098cc:	2201      	moveq	r2, #1
 80098ce:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 80098d2:	42a8      	cmp	r0, r5
 80098d4:	d000      	beq.n	80098d8 <TIM_Base_SetConfig+0xbc>
 80098d6:	b11a      	cbz	r2, 80098e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098dc:	68ca      	ldr	r2, [r1, #12]
 80098de:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098e4:	694a      	ldr	r2, [r1, #20]
 80098e6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80098e8:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098ea:	688a      	ldr	r2, [r1, #8]
 80098ec:	62c2      	str	r2, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80098ee:	680a      	ldr	r2, [r1, #0]
 80098f0:	6282      	str	r2, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80098f2:	4b0c      	ldr	r3, [pc, #48]	; (8009924 <TIM_Base_SetConfig+0x108>)
 80098f4:	4298      	cmp	r0, r3
 80098f6:	bf14      	ite	ne
 80098f8:	4623      	movne	r3, r4
 80098fa:	f044 0301 	orreq.w	r3, r4, #1
 80098fe:	b10b      	cbz	r3, 8009904 <TIM_Base_SetConfig+0xe8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009900:	690b      	ldr	r3, [r1, #16]
 8009902:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009904:	2301      	movs	r3, #1
 8009906:	6143      	str	r3, [r0, #20]
}
 8009908:	bc70      	pop	{r4, r5, r6}
 800990a:	4770      	bx	lr
 800990c:	40010000 	.word	0x40010000
 8009910:	40000800 	.word	0x40000800
 8009914:	40000400 	.word	0x40000400
 8009918:	40014400 	.word	0x40014400
 800991c:	40001800 	.word	0x40001800
 8009920:	40002000 	.word	0x40002000
 8009924:	40010400 	.word	0x40010400

08009928 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8009928:	b1b0      	cbz	r0, 8009958 <HAL_TIM_Base_Init+0x30>
{ 
 800992a:	b510      	push	{r4, lr}
 800992c:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800992e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009932:	b163      	cbz	r3, 800994e <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8009934:	2302      	movs	r3, #2
 8009936:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800993a:	4621      	mov	r1, r4
 800993c:	f851 0b04 	ldr.w	r0, [r1], #4
 8009940:	f7ff ff6c 	bl	800981c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8009944:	2301      	movs	r3, #1
 8009946:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800994a:	2000      	movs	r0, #0
}
 800994c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800994e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009952:	f7ff fe84 	bl	800965e <HAL_TIM_Base_MspInit>
 8009956:	e7ed      	b.n	8009934 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8009958:	2001      	movs	r0, #1
}
 800995a:	4770      	bx	lr

0800995c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800995c:	4770      	bx	lr

0800995e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800995e:	4770      	bx	lr

08009960 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009964:	4605      	mov	r5, r0
 8009966:	460f      	mov	r7, r1
 8009968:	4616      	mov	r6, r2
 800996a:	4699      	mov	r9, r3
 800996c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009970:	682c      	ldr	r4, [r5, #0]
 8009972:	69e4      	ldr	r4, [r4, #28]
 8009974:	ea37 0304 	bics.w	r3, r7, r4
 8009978:	bf0c      	ite	eq
 800997a:	2401      	moveq	r4, #1
 800997c:	2400      	movne	r4, #0
 800997e:	42b4      	cmp	r4, r6
 8009980:	d11f      	bne.n	80099c2 <UART_WaitOnFlagUntilTimeout+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009982:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009986:	d0f3      	beq.n	8009970 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8009988:	f1b8 0f00 	cmp.w	r8, #0
 800998c:	d005      	beq.n	800999a <UART_WaitOnFlagUntilTimeout+0x3a>
 800998e:	f7fa fab1 	bl	8003ef4 <HAL_GetTick>
 8009992:	eba0 0009 	sub.w	r0, r0, r9
 8009996:	4540      	cmp	r0, r8
 8009998:	d3ea      	bcc.n	8009970 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800999a:	682a      	ldr	r2, [r5, #0]
 800999c:	6813      	ldr	r3, [r2, #0]
 800999e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80099a2:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099a4:	682a      	ldr	r2, [r5, #0]
 80099a6:	6893      	ldr	r3, [r2, #8]
 80099a8:	f023 0301 	bic.w	r3, r3, #1
 80099ac:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 80099ae:	2320      	movs	r3, #32
 80099b0:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80099b4:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80099b8:	2300      	movs	r3, #0
 80099ba:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 80099be:	2003      	movs	r0, #3
 80099c0:	e000      	b.n	80099c4 <UART_WaitOnFlagUntilTimeout+0x64>
      }
    }
  }
  return HAL_OK;
 80099c2:	2000      	movs	r0, #0
}
 80099c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080099c8 <HAL_UART_Transmit>:
{
 80099c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099cc:	b082      	sub	sp, #8
 80099ce:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80099d0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b20      	cmp	r3, #32
 80099d8:	d152      	bne.n	8009a80 <HAL_UART_Transmit+0xb8>
 80099da:	4604      	mov	r4, r0
 80099dc:	460d      	mov	r5, r1
 80099de:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 80099e0:	fab2 f382 	clz	r3, r2
 80099e4:	095b      	lsrs	r3, r3, #5
 80099e6:	2900      	cmp	r1, #0
 80099e8:	bf08      	it	eq
 80099ea:	2301      	moveq	r3, #1
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d14b      	bne.n	8009a88 <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 80099f0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d049      	beq.n	8009a8c <HAL_UART_Transmit+0xc4>
 80099f8:	2301      	movs	r3, #1
 80099fa:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099fe:	2300      	movs	r3, #0
 8009a00:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a02:	2321      	movs	r3, #33	; 0x21
 8009a04:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8009a08:	f7fa fa74 	bl	8003ef4 <HAL_GetTick>
 8009a0c:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8009a0e:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8009a12:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8009a16:	e003      	b.n	8009a20 <HAL_UART_Transmit+0x58>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8009a18:	f815 2b01 	ldrb.w	r2, [r5], #1
 8009a1c:	6823      	ldr	r3, [r4, #0]
 8009a1e:	629a      	str	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8009a20:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	b1e3      	cbz	r3, 8009a62 <HAL_UART_Transmit+0x9a>
      huart->TxXferCount--;
 8009a28:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8009a2c:	b292      	uxth	r2, r2
 8009a2e:	3a01      	subs	r2, #1
 8009a30:	b292      	uxth	r2, r2
 8009a32:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a36:	9600      	str	r6, [sp, #0]
 8009a38:	463b      	mov	r3, r7
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	2180      	movs	r1, #128	; 0x80
 8009a3e:	4620      	mov	r0, r4
 8009a40:	f7ff ff8e 	bl	8009960 <UART_WaitOnFlagUntilTimeout>
 8009a44:	bb20      	cbnz	r0, 8009a90 <HAL_UART_Transmit+0xc8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a46:	68a3      	ldr	r3, [r4, #8]
 8009a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a4c:	d1e4      	bne.n	8009a18 <HAL_UART_Transmit+0x50>
 8009a4e:	6923      	ldr	r3, [r4, #16]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1e1      	bne.n	8009a18 <HAL_UART_Transmit+0x50>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8009a54:	f835 3b02 	ldrh.w	r3, [r5], #2
 8009a58:	6822      	ldr	r2, [r4, #0]
 8009a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a5e:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 8009a60:	e7de      	b.n	8009a20 <HAL_UART_Transmit+0x58>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a62:	9600      	str	r6, [sp, #0]
 8009a64:	463b      	mov	r3, r7
 8009a66:	2200      	movs	r2, #0
 8009a68:	2140      	movs	r1, #64	; 0x40
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f7ff ff78 	bl	8009960 <UART_WaitOnFlagUntilTimeout>
 8009a70:	b980      	cbnz	r0, 8009a94 <HAL_UART_Transmit+0xcc>
    huart->gState = HAL_UART_STATE_READY;
 8009a72:	2320      	movs	r3, #32
 8009a74:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    return HAL_OK;
 8009a7e:	e000      	b.n	8009a82 <HAL_UART_Transmit+0xba>
    return HAL_BUSY;
 8009a80:	2002      	movs	r0, #2
}
 8009a82:	b002      	add	sp, #8
 8009a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8009a88:	2001      	movs	r0, #1
 8009a8a:	e7fa      	b.n	8009a82 <HAL_UART_Transmit+0xba>
    __HAL_LOCK(huart);
 8009a8c:	2002      	movs	r0, #2
 8009a8e:	e7f8      	b.n	8009a82 <HAL_UART_Transmit+0xba>
        return HAL_TIMEOUT;
 8009a90:	2003      	movs	r0, #3
 8009a92:	e7f6      	b.n	8009a82 <HAL_UART_Transmit+0xba>
      return HAL_TIMEOUT;
 8009a94:	2003      	movs	r0, #3
 8009a96:	e7f4      	b.n	8009a82 <HAL_UART_Transmit+0xba>

08009a98 <HAL_UART_Receive>:
{
 8009a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a9c:	b082      	sub	sp, #8
 8009a9e:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8009aa0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b20      	cmp	r3, #32
 8009aa8:	d176      	bne.n	8009b98 <HAL_UART_Receive+0x100>
 8009aaa:	4604      	mov	r4, r0
 8009aac:	460d      	mov	r5, r1
 8009aae:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8009ab0:	fab2 f382 	clz	r3, r2
 8009ab4:	095b      	lsrs	r3, r3, #5
 8009ab6:	2900      	cmp	r1, #0
 8009ab8:	bf08      	it	eq
 8009aba:	2301      	moveq	r3, #1
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d16f      	bne.n	8009ba0 <HAL_UART_Receive+0x108>
    __HAL_LOCK(huart);
 8009ac0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d06d      	beq.n	8009ba4 <HAL_UART_Receive+0x10c>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ad2:	2322      	movs	r3, #34	; 0x22
 8009ad4:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 8009ad8:	f7fa fa0c 	bl	8003ef4 <HAL_GetTick>
 8009adc:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8009ade:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8009ae2:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8009ae6:	68a3      	ldr	r3, [r4, #8]
 8009ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aec:	d006      	beq.n	8009afc <HAL_UART_Receive+0x64>
 8009aee:	b9a3      	cbnz	r3, 8009b1a <HAL_UART_Receive+0x82>
 8009af0:	6923      	ldr	r3, [r4, #16]
 8009af2:	b973      	cbnz	r3, 8009b12 <HAL_UART_Receive+0x7a>
 8009af4:	23ff      	movs	r3, #255	; 0xff
 8009af6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8009afa:	e011      	b.n	8009b20 <HAL_UART_Receive+0x88>
 8009afc:	6923      	ldr	r3, [r4, #16]
 8009afe:	b923      	cbnz	r3, 8009b0a <HAL_UART_Receive+0x72>
 8009b00:	f240 13ff 	movw	r3, #511	; 0x1ff
 8009b04:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8009b08:	e00a      	b.n	8009b20 <HAL_UART_Receive+0x88>
 8009b0a:	23ff      	movs	r3, #255	; 0xff
 8009b0c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8009b10:	e006      	b.n	8009b20 <HAL_UART_Receive+0x88>
 8009b12:	237f      	movs	r3, #127	; 0x7f
 8009b14:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8009b18:	e002      	b.n	8009b20 <HAL_UART_Receive+0x88>
 8009b1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b1e:	d002      	beq.n	8009b26 <HAL_UART_Receive+0x8e>
    uhMask = huart->Mask;
 8009b20:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 8009b24:	e010      	b.n	8009b48 <HAL_UART_Receive+0xb0>
    UART_MASK_COMPUTATION(huart);
 8009b26:	6923      	ldr	r3, [r4, #16]
 8009b28:	b91b      	cbnz	r3, 8009b32 <HAL_UART_Receive+0x9a>
 8009b2a:	237f      	movs	r3, #127	; 0x7f
 8009b2c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8009b30:	e7f6      	b.n	8009b20 <HAL_UART_Receive+0x88>
 8009b32:	233f      	movs	r3, #63	; 0x3f
 8009b34:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8009b38:	e7f2      	b.n	8009b20 <HAL_UART_Receive+0x88>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009b3a:	6823      	ldr	r3, [r4, #0]
 8009b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b3e:	fa5f f388 	uxtb.w	r3, r8
 8009b42:	4013      	ands	r3, r2
 8009b44:	f805 3b01 	strb.w	r3, [r5], #1
    while(huart->RxXferCount > 0U)
 8009b48:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	b1e3      	cbz	r3, 8009b8a <HAL_UART_Receive+0xf2>
      huart->RxXferCount--;
 8009b50:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8009b54:	b292      	uxth	r2, r2
 8009b56:	3a01      	subs	r2, #1
 8009b58:	b292      	uxth	r2, r2
 8009b5a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009b5e:	9600      	str	r6, [sp, #0]
 8009b60:	463b      	mov	r3, r7
 8009b62:	2200      	movs	r2, #0
 8009b64:	2120      	movs	r1, #32
 8009b66:	4620      	mov	r0, r4
 8009b68:	f7ff fefa 	bl	8009960 <UART_WaitOnFlagUntilTimeout>
 8009b6c:	b9e0      	cbnz	r0, 8009ba8 <HAL_UART_Receive+0x110>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b6e:	68a3      	ldr	r3, [r4, #8]
 8009b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b74:	d1e1      	bne.n	8009b3a <HAL_UART_Receive+0xa2>
 8009b76:	6923      	ldr	r3, [r4, #16]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1de      	bne.n	8009b3a <HAL_UART_Receive+0xa2>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b80:	ea08 0303 	and.w	r3, r8, r3
 8009b84:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8009b88:	e7de      	b.n	8009b48 <HAL_UART_Receive+0xb0>
    huart->RxState = HAL_UART_STATE_READY;
 8009b8a:	2320      	movs	r3, #32
 8009b8c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8009b90:	2000      	movs	r0, #0
 8009b92:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8009b96:	e000      	b.n	8009b9a <HAL_UART_Receive+0x102>
    return HAL_BUSY;
 8009b98:	2002      	movs	r0, #2
}
 8009b9a:	b002      	add	sp, #8
 8009b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8009ba0:	2001      	movs	r0, #1
 8009ba2:	e7fa      	b.n	8009b9a <HAL_UART_Receive+0x102>
    __HAL_LOCK(huart);
 8009ba4:	2002      	movs	r0, #2
 8009ba6:	e7f8      	b.n	8009b9a <HAL_UART_Receive+0x102>
        return HAL_TIMEOUT;
 8009ba8:	2003      	movs	r0, #3
 8009baa:	e7f6      	b.n	8009b9a <HAL_UART_Receive+0x102>

08009bac <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bb0:	6883      	ldr	r3, [r0, #8]
 8009bb2:	6902      	ldr	r2, [r0, #16]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	6942      	ldr	r2, [r0, #20]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	69c2      	ldr	r2, [r0, #28]
 8009bbc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8009bbe:	6801      	ldr	r1, [r0, #0]
 8009bc0:	6808      	ldr	r0, [r1, #0]
 8009bc2:	4aa0      	ldr	r2, [pc, #640]	; (8009e44 <UART_SetConfig+0x298>)
 8009bc4:	4002      	ands	r2, r0
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bca:	6822      	ldr	r2, [r4, #0]
 8009bcc:	6853      	ldr	r3, [r2, #4]
 8009bce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009bd2:	68e1      	ldr	r1, [r4, #12]
 8009bd4:	430b      	orrs	r3, r1
 8009bd6:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8009bd8:	69a3      	ldr	r3, [r4, #24]
 8009bda:	6a22      	ldr	r2, [r4, #32]
 8009bdc:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8009bde:	6821      	ldr	r1, [r4, #0]
 8009be0:	688b      	ldr	r3, [r1, #8]
 8009be2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009be6:	4313      	orrs	r3, r2
 8009be8:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009bea:	6823      	ldr	r3, [r4, #0]
 8009bec:	4a96      	ldr	r2, [pc, #600]	; (8009e48 <UART_SetConfig+0x29c>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d019      	beq.n	8009c26 <UART_SetConfig+0x7a>
 8009bf2:	4a96      	ldr	r2, [pc, #600]	; (8009e4c <UART_SetConfig+0x2a0>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d02a      	beq.n	8009c4e <UART_SetConfig+0xa2>
 8009bf8:	4a95      	ldr	r2, [pc, #596]	; (8009e50 <UART_SetConfig+0x2a4>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d040      	beq.n	8009c80 <UART_SetConfig+0xd4>
 8009bfe:	4a95      	ldr	r2, [pc, #596]	; (8009e54 <UART_SetConfig+0x2a8>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d065      	beq.n	8009cd0 <UART_SetConfig+0x124>
 8009c04:	4a94      	ldr	r2, [pc, #592]	; (8009e58 <UART_SetConfig+0x2ac>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d075      	beq.n	8009cf6 <UART_SetConfig+0x14a>
 8009c0a:	4a94      	ldr	r2, [pc, #592]	; (8009e5c <UART_SetConfig+0x2b0>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	f000 8088 	beq.w	8009d22 <UART_SetConfig+0x176>
 8009c12:	4a93      	ldr	r2, [pc, #588]	; (8009e60 <UART_SetConfig+0x2b4>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	f000 809a 	beq.w	8009d4e <UART_SetConfig+0x1a2>
 8009c1a:	4a92      	ldr	r2, [pc, #584]	; (8009e64 <UART_SetConfig+0x2b8>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	f000 80ac 	beq.w	8009d7a <UART_SetConfig+0x1ce>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8009c22:	2510      	movs	r5, #16
 8009c24:	e03d      	b.n	8009ca2 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c26:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009c2a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009c2e:	f002 0203 	and.w	r2, r2, #3
 8009c32:	2a03      	cmp	r2, #3
 8009c34:	d803      	bhi.n	8009c3e <UART_SetConfig+0x92>
 8009c36:	e8df f002 	tbb	[pc, r2]
 8009c3a:	06b5      	.short	0x06b5
 8009c3c:	0804      	.short	0x0804
 8009c3e:	2510      	movs	r5, #16
 8009c40:	e02f      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009c42:	2502      	movs	r5, #2
 8009c44:	e02d      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009c46:	2504      	movs	r5, #4
 8009c48:	e02b      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009c4a:	2508      	movs	r5, #8
 8009c4c:	e029      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009c4e:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8009c52:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009c56:	f002 020c 	and.w	r2, r2, #12
 8009c5a:	2a0c      	cmp	r2, #12
 8009c5c:	d808      	bhi.n	8009c70 <UART_SetConfig+0xc4>
 8009c5e:	e8df f002 	tbb	[pc, r2]
 8009c62:	07a3      	.short	0x07a3
 8009c64:	070b0707 	.word	0x070b0707
 8009c68:	07090707 	.word	0x07090707
 8009c6c:	0707      	.short	0x0707
 8009c6e:	0d          	.byte	0x0d
 8009c6f:	00          	.byte	0x00
 8009c70:	2510      	movs	r5, #16
 8009c72:	e016      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009c74:	2502      	movs	r5, #2
 8009c76:	e014      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009c78:	2504      	movs	r5, #4
 8009c7a:	e012      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009c7c:	2508      	movs	r5, #8
 8009c7e:	e010      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009c80:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8009c84:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009c88:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8009c8c:	2a20      	cmp	r2, #32
 8009c8e:	f000 808d 	beq.w	8009dac <UART_SetConfig+0x200>
 8009c92:	d819      	bhi.n	8009cc8 <UART_SetConfig+0x11c>
 8009c94:	2a00      	cmp	r2, #0
 8009c96:	f000 808b 	beq.w	8009db0 <UART_SetConfig+0x204>
 8009c9a:	2a10      	cmp	r2, #16
 8009c9c:	f040 808a 	bne.w	8009db4 <UART_SetConfig+0x208>
 8009ca0:	2504      	movs	r5, #4

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ca2:	69e2      	ldr	r2, [r4, #28]
 8009ca4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009ca8:	f000 80b0 	beq.w	8009e0c <UART_SetConfig+0x260>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8009cac:	2d08      	cmp	r5, #8
 8009cae:	f200 813d 	bhi.w	8009f2c <UART_SetConfig+0x380>
 8009cb2:	e8df f015 	tbh	[pc, r5, lsl #1]
 8009cb6:	0104      	.short	0x0104
 8009cb8:	011b010f 	.word	0x011b010f
 8009cbc:	0125013b 	.word	0x0125013b
 8009cc0:	013b013b 	.word	0x013b013b
 8009cc4:	0131013b 	.word	0x0131013b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009cc8:	2a30      	cmp	r2, #48	; 0x30
 8009cca:	d175      	bne.n	8009db8 <UART_SetConfig+0x20c>
 8009ccc:	2508      	movs	r5, #8
 8009cce:	e7e8      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009cd0:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8009cd4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009cd8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8009cdc:	2a80      	cmp	r2, #128	; 0x80
 8009cde:	d06d      	beq.n	8009dbc <UART_SetConfig+0x210>
 8009ce0:	d805      	bhi.n	8009cee <UART_SetConfig+0x142>
 8009ce2:	2a00      	cmp	r2, #0
 8009ce4:	d06c      	beq.n	8009dc0 <UART_SetConfig+0x214>
 8009ce6:	2a40      	cmp	r2, #64	; 0x40
 8009ce8:	d16c      	bne.n	8009dc4 <UART_SetConfig+0x218>
 8009cea:	2504      	movs	r5, #4
 8009cec:	e7d9      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009cee:	2ac0      	cmp	r2, #192	; 0xc0
 8009cf0:	d16a      	bne.n	8009dc8 <UART_SetConfig+0x21c>
 8009cf2:	2508      	movs	r5, #8
 8009cf4:	e7d5      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009cf6:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8009cfa:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009cfe:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8009d02:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009d06:	d061      	beq.n	8009dcc <UART_SetConfig+0x220>
 8009d08:	d806      	bhi.n	8009d18 <UART_SetConfig+0x16c>
 8009d0a:	2a00      	cmp	r2, #0
 8009d0c:	d060      	beq.n	8009dd0 <UART_SetConfig+0x224>
 8009d0e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009d12:	d15f      	bne.n	8009dd4 <UART_SetConfig+0x228>
 8009d14:	2504      	movs	r5, #4
 8009d16:	e7c4      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009d18:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009d1c:	d15c      	bne.n	8009dd8 <UART_SetConfig+0x22c>
 8009d1e:	2508      	movs	r5, #8
 8009d20:	e7bf      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009d22:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8009d26:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009d2a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8009d2e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009d32:	d053      	beq.n	8009ddc <UART_SetConfig+0x230>
 8009d34:	d806      	bhi.n	8009d44 <UART_SetConfig+0x198>
 8009d36:	2a00      	cmp	r2, #0
 8009d38:	d052      	beq.n	8009de0 <UART_SetConfig+0x234>
 8009d3a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009d3e:	d151      	bne.n	8009de4 <UART_SetConfig+0x238>
 8009d40:	2504      	movs	r5, #4
 8009d42:	e7ae      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009d44:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8009d48:	d14e      	bne.n	8009de8 <UART_SetConfig+0x23c>
 8009d4a:	2508      	movs	r5, #8
 8009d4c:	e7a9      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009d4e:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8009d52:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009d56:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8009d5a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009d5e:	d045      	beq.n	8009dec <UART_SetConfig+0x240>
 8009d60:	d806      	bhi.n	8009d70 <UART_SetConfig+0x1c4>
 8009d62:	2a00      	cmp	r2, #0
 8009d64:	d044      	beq.n	8009df0 <UART_SetConfig+0x244>
 8009d66:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009d6a:	d143      	bne.n	8009df4 <UART_SetConfig+0x248>
 8009d6c:	2504      	movs	r5, #4
 8009d6e:	e798      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009d70:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8009d74:	d140      	bne.n	8009df8 <UART_SetConfig+0x24c>
 8009d76:	2508      	movs	r5, #8
 8009d78:	e793      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009d7a:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8009d7e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009d82:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8009d86:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009d8a:	d037      	beq.n	8009dfc <UART_SetConfig+0x250>
 8009d8c:	d805      	bhi.n	8009d9a <UART_SetConfig+0x1ee>
 8009d8e:	b3ba      	cbz	r2, 8009e00 <UART_SetConfig+0x254>
 8009d90:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009d94:	d136      	bne.n	8009e04 <UART_SetConfig+0x258>
 8009d96:	2504      	movs	r5, #4
 8009d98:	e783      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009d9a:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8009d9e:	d133      	bne.n	8009e08 <UART_SetConfig+0x25c>
 8009da0:	2508      	movs	r5, #8
 8009da2:	e77e      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009da4:	2501      	movs	r5, #1
 8009da6:	e77c      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009da8:	2500      	movs	r5, #0
 8009daa:	e77a      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009dac:	2502      	movs	r5, #2
 8009dae:	e778      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009db0:	2500      	movs	r5, #0
 8009db2:	e776      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009db4:	2510      	movs	r5, #16
 8009db6:	e774      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009db8:	2510      	movs	r5, #16
 8009dba:	e772      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009dbc:	2502      	movs	r5, #2
 8009dbe:	e770      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009dc0:	2500      	movs	r5, #0
 8009dc2:	e76e      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009dc4:	2510      	movs	r5, #16
 8009dc6:	e76c      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009dc8:	2510      	movs	r5, #16
 8009dca:	e76a      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009dcc:	2502      	movs	r5, #2
 8009dce:	e768      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009dd0:	2500      	movs	r5, #0
 8009dd2:	e766      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009dd4:	2510      	movs	r5, #16
 8009dd6:	e764      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009dd8:	2510      	movs	r5, #16
 8009dda:	e762      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009ddc:	2502      	movs	r5, #2
 8009dde:	e760      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009de0:	2501      	movs	r5, #1
 8009de2:	e75e      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009de4:	2510      	movs	r5, #16
 8009de6:	e75c      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009de8:	2510      	movs	r5, #16
 8009dea:	e75a      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009dec:	2502      	movs	r5, #2
 8009dee:	e758      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009df0:	2500      	movs	r5, #0
 8009df2:	e756      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009df4:	2510      	movs	r5, #16
 8009df6:	e754      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009df8:	2510      	movs	r5, #16
 8009dfa:	e752      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009dfc:	2502      	movs	r5, #2
 8009dfe:	e750      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009e00:	2500      	movs	r5, #0
 8009e02:	e74e      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009e04:	2510      	movs	r5, #16
 8009e06:	e74c      	b.n	8009ca2 <UART_SetConfig+0xf6>
 8009e08:	2510      	movs	r5, #16
 8009e0a:	e74a      	b.n	8009ca2 <UART_SetConfig+0xf6>
    switch (clocksource)
 8009e0c:	2d08      	cmp	r5, #8
 8009e0e:	d853      	bhi.n	8009eb8 <UART_SetConfig+0x30c>
 8009e10:	e8df f005 	tbb	[pc, r5]
 8009e14:	52352a05 	.word	0x52352a05
 8009e18:	5252523e 	.word	0x5252523e
 8009e1c:	49          	.byte	0x49
 8009e1d:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009e1e:	f7fd fd63 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 8009e22:	6862      	ldr	r2, [r4, #4]
 8009e24:	0853      	lsrs	r3, r2, #1
 8009e26:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8009e2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e2e:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8009e30:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e34:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8009e38:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8009e3a:	6822      	ldr	r2, [r4, #0]
 8009e3c:	60d3      	str	r3, [r2, #12]
    }
  }

  return ret;

}
 8009e3e:	4628      	mov	r0, r5
 8009e40:	bd38      	pop	{r3, r4, r5, pc}
 8009e42:	bf00      	nop
 8009e44:	efff69f3 	.word	0xefff69f3
 8009e48:	40011000 	.word	0x40011000
 8009e4c:	40004400 	.word	0x40004400
 8009e50:	40004800 	.word	0x40004800
 8009e54:	40004c00 	.word	0x40004c00
 8009e58:	40005000 	.word	0x40005000
 8009e5c:	40011400 	.word	0x40011400
 8009e60:	40007800 	.word	0x40007800
 8009e64:	40007c00 	.word	0x40007c00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009e68:	f7fd fd54 	bl	8007914 <HAL_RCC_GetPCLK2Freq>
 8009e6c:	6862      	ldr	r2, [r4, #4]
 8009e6e:	0853      	lsrs	r3, r2, #1
 8009e70:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8009e74:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e78:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e7a:	2500      	movs	r5, #0
      break;
 8009e7c:	e7d8      	b.n	8009e30 <UART_SetConfig+0x284>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009e7e:	6862      	ldr	r2, [r4, #4]
 8009e80:	4b2b      	ldr	r3, [pc, #172]	; (8009f30 <UART_SetConfig+0x384>)
 8009e82:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8009e86:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e8a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e8c:	2500      	movs	r5, #0
      break;
 8009e8e:	e7cf      	b.n	8009e30 <UART_SetConfig+0x284>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009e90:	f7fd fc16 	bl	80076c0 <HAL_RCC_GetSysClockFreq>
 8009e94:	6862      	ldr	r2, [r4, #4]
 8009e96:	0853      	lsrs	r3, r2, #1
 8009e98:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8009e9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ea0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ea2:	2500      	movs	r5, #0
      break;
 8009ea4:	e7c4      	b.n	8009e30 <UART_SetConfig+0x284>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009ea6:	6862      	ldr	r2, [r4, #4]
 8009ea8:	0853      	lsrs	r3, r2, #1
 8009eaa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009eae:	fbb3 f3f2 	udiv	r3, r3, r2
 8009eb2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8009eb4:	2500      	movs	r5, #0
      break;
 8009eb6:	e7bb      	b.n	8009e30 <UART_SetConfig+0x284>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009eb8:	2501      	movs	r5, #1
 8009eba:	2300      	movs	r3, #0
 8009ebc:	e7b8      	b.n	8009e30 <UART_SetConfig+0x284>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009ebe:	f7fd fd13 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 8009ec2:	6862      	ldr	r2, [r4, #4]
 8009ec4:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8009ec8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ecc:	6822      	ldr	r2, [r4, #0]
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	60d3      	str	r3, [r2, #12]
      break;
 8009ed2:	e7b4      	b.n	8009e3e <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009ed4:	f7fd fd1e 	bl	8007914 <HAL_RCC_GetPCLK2Freq>
 8009ed8:	6862      	ldr	r2, [r4, #4]
 8009eda:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8009ede:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ee2:	6822      	ldr	r2, [r4, #0]
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ee8:	2500      	movs	r5, #0
      break;
 8009eea:	e7a8      	b.n	8009e3e <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009eec:	6861      	ldr	r1, [r4, #4]
 8009eee:	4a11      	ldr	r2, [pc, #68]	; (8009f34 <UART_SetConfig+0x388>)
 8009ef0:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8009ef4:	fbb2 f2f1 	udiv	r2, r2, r1
 8009ef8:	b292      	uxth	r2, r2
 8009efa:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009efc:	2500      	movs	r5, #0
      break;
 8009efe:	e79e      	b.n	8009e3e <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009f00:	f7fd fbde 	bl	80076c0 <HAL_RCC_GetSysClockFreq>
 8009f04:	6862      	ldr	r2, [r4, #4]
 8009f06:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8009f0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f0e:	6822      	ldr	r2, [r4, #0]
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f14:	2500      	movs	r5, #0
      break;
 8009f16:	e792      	b.n	8009e3e <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009f18:	6861      	ldr	r1, [r4, #4]
 8009f1a:	084a      	lsrs	r2, r1, #1
 8009f1c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8009f20:	fbb2 f2f1 	udiv	r2, r2, r1
 8009f24:	b292      	uxth	r2, r2
 8009f26:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f28:	2500      	movs	r5, #0
      break;
 8009f2a:	e788      	b.n	8009e3e <UART_SetConfig+0x292>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f2c:	2501      	movs	r5, #1
 8009f2e:	e786      	b.n	8009e3e <UART_SetConfig+0x292>
 8009f30:	01e84800 	.word	0x01e84800
 8009f34:	00f42400 	.word	0x00f42400

08009f38 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009f3a:	f013 0f01 	tst.w	r3, #1
 8009f3e:	d006      	beq.n	8009f4e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f40:	6802      	ldr	r2, [r0, #0]
 8009f42:	6853      	ldr	r3, [r2, #4]
 8009f44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009f48:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009f4a:	430b      	orrs	r3, r1
 8009f4c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f4e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009f50:	f013 0f02 	tst.w	r3, #2
 8009f54:	d006      	beq.n	8009f64 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f56:	6802      	ldr	r2, [r0, #0]
 8009f58:	6853      	ldr	r3, [r2, #4]
 8009f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f5e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009f60:	430b      	orrs	r3, r1
 8009f62:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009f66:	f013 0f04 	tst.w	r3, #4
 8009f6a:	d006      	beq.n	8009f7a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f6c:	6802      	ldr	r2, [r0, #0]
 8009f6e:	6853      	ldr	r3, [r2, #4]
 8009f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f74:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8009f76:	430b      	orrs	r3, r1
 8009f78:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009f7c:	f013 0f08 	tst.w	r3, #8
 8009f80:	d006      	beq.n	8009f90 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f82:	6802      	ldr	r2, [r0, #0]
 8009f84:	6853      	ldr	r3, [r2, #4]
 8009f86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f8a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8009f8c:	430b      	orrs	r3, r1
 8009f8e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009f92:	f013 0f10 	tst.w	r3, #16
 8009f96:	d006      	beq.n	8009fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f98:	6802      	ldr	r2, [r0, #0]
 8009f9a:	6893      	ldr	r3, [r2, #8]
 8009f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fa0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8009fa2:	430b      	orrs	r3, r1
 8009fa4:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fa6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009fa8:	f013 0f20 	tst.w	r3, #32
 8009fac:	d006      	beq.n	8009fbc <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fae:	6802      	ldr	r2, [r0, #0]
 8009fb0:	6893      	ldr	r3, [r2, #8]
 8009fb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009fb6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8009fb8:	430b      	orrs	r3, r1
 8009fba:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009fbe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009fc2:	d00a      	beq.n	8009fda <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fc4:	6802      	ldr	r2, [r0, #0]
 8009fc6:	6853      	ldr	r3, [r2, #4]
 8009fc8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009fcc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8009fce:	430b      	orrs	r3, r1
 8009fd0:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fd2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009fd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fd8:	d00b      	beq.n	8009ff2 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fda:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009fdc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009fe0:	d006      	beq.n	8009ff0 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009fe2:	6802      	ldr	r2, [r0, #0]
 8009fe4:	6853      	ldr	r3, [r2, #4]
 8009fe6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8009fea:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8009fec:	430b      	orrs	r3, r1
 8009fee:	6053      	str	r3, [r2, #4]
  }
}
 8009ff0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ff2:	6802      	ldr	r2, [r0, #0]
 8009ff4:	6853      	ldr	r3, [r2, #4]
 8009ff6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009ffa:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8009ffc:	430b      	orrs	r3, r1
 8009ffe:	6053      	str	r3, [r2, #4]
 800a000:	e7eb      	b.n	8009fda <UART_AdvFeatureConfig+0xa2>

0800a002 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a002:	b510      	push	{r4, lr}
 800a004:	b082      	sub	sp, #8
 800a006:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a008:	2300      	movs	r3, #0
 800a00a:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a00c:	f7f9 ff72 	bl	8003ef4 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a010:	6823      	ldr	r3, [r4, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f013 0f08 	tst.w	r3, #8
 800a018:	d109      	bne.n	800a02e <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800a01a:	2320      	movs	r3, #32
 800a01c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 800a020:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a024:	2000      	movs	r0, #0
 800a026:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return HAL_OK;
}
 800a02a:	b002      	add	sp, #8
 800a02c:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a02e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	4603      	mov	r3, r0
 800a036:	2200      	movs	r2, #0
 800a038:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a03c:	4620      	mov	r0, r4
 800a03e:	f7ff fc8f 	bl	8009960 <UART_WaitOnFlagUntilTimeout>
 800a042:	2800      	cmp	r0, #0
 800a044:	d0e9      	beq.n	800a01a <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800a046:	2003      	movs	r0, #3
 800a048:	e7ef      	b.n	800a02a <UART_CheckIdleState+0x28>

0800a04a <HAL_UART_Init>:
  if(huart == NULL)
 800a04a:	b378      	cbz	r0, 800a0ac <HAL_UART_Init+0x62>
{
 800a04c:	b510      	push	{r4, lr}
 800a04e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 800a050:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800a054:	b30b      	cbz	r3, 800a09a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800a056:	2324      	movs	r3, #36	; 0x24
 800a058:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800a05c:	6822      	ldr	r2, [r4, #0]
 800a05e:	6813      	ldr	r3, [r2, #0]
 800a060:	f023 0301 	bic.w	r3, r3, #1
 800a064:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a066:	4620      	mov	r0, r4
 800a068:	f7ff fda0 	bl	8009bac <UART_SetConfig>
 800a06c:	2801      	cmp	r0, #1
 800a06e:	d013      	beq.n	800a098 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a072:	b9bb      	cbnz	r3, 800a0a4 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a074:	6822      	ldr	r2, [r4, #0]
 800a076:	6853      	ldr	r3, [r2, #4]
 800a078:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800a07c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a07e:	6822      	ldr	r2, [r4, #0]
 800a080:	6893      	ldr	r3, [r2, #8]
 800a082:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800a086:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800a088:	6822      	ldr	r2, [r4, #0]
 800a08a:	6813      	ldr	r3, [r2, #0]
 800a08c:	f043 0301 	orr.w	r3, r3, #1
 800a090:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800a092:	4620      	mov	r0, r4
 800a094:	f7ff ffb5 	bl	800a002 <UART_CheckIdleState>
}
 800a098:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800a09a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800a09e:	f002 fcab 	bl	800c9f8 <HAL_UART_MspInit>
 800a0a2:	e7d8      	b.n	800a056 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f7ff ff47 	bl	8009f38 <UART_AdvFeatureConfig>
 800a0aa:	e7e3      	b.n	800a074 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800a0ac:	2001      	movs	r0, #1
}
 800a0ae:	4770      	bx	lr

0800a0b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a0b0:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a0b2:	680b      	ldr	r3, [r1, #0]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d018      	beq.n	800a0ea <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a0b8:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a0ba:	4a19      	ldr	r2, [pc, #100]	; (800a120 <FMC_SDRAM_Init+0x70>)
 800a0bc:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a0be:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 800a0c0:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a0c2:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 800a0c4:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 800a0c6:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 800a0c8:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 800a0ca:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 800a0cc:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 800a0ce:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 800a0d0:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 800a0d2:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 800a0d4:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 800a0d6:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 800a0d8:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 800a0da:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 800a0dc:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 800a0de:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a0e0:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a0e2:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	bc30      	pop	{r4, r5}
 800a0e8:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a0ea:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a0ec:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a0f0:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 800a0f2:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a0f4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a0f6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 800a0f8:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a0fa:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a0fc:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a0fe:	4c08      	ldr	r4, [pc, #32]	; (800a120 <FMC_SDRAM_Init+0x70>)
 800a100:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a102:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber       |\
 800a104:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a106:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 800a108:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber       |\
 800a10a:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 800a10c:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth     |\
 800a10e:	432b      	orrs	r3, r5
                       Init->CASLatency          |\
 800a110:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber  |\
 800a112:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 800a114:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 800a116:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a118:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a11a:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a11c:	6043      	str	r3, [r0, #4]
 800a11e:	e7e1      	b.n	800a0e4 <FMC_SDRAM_Init+0x34>
 800a120:	ffff8000 	.word	0xffff8000

0800a124 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a124:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a126:	2a01      	cmp	r2, #1
 800a128:	d021      	beq.n	800a16e <FMC_SDRAM_Timing_Init+0x4a>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a12a:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a12c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a130:	680b      	ldr	r3, [r1, #0]
 800a132:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a134:	684c      	ldr	r4, [r1, #4]
 800a136:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a138:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a13c:	688c      	ldr	r4, [r1, #8]
 800a13e:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a140:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a144:	68cc      	ldr	r4, [r1, #12]
 800a146:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a148:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a14c:	690c      	ldr	r4, [r1, #16]
 800a14e:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a150:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 800a154:	694c      	ldr	r4, [r1, #20]
 800a156:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a158:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 800a15c:	6989      	ldr	r1, [r1, #24]
 800a15e:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a160:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a164:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a166:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800a168:	2000      	movs	r0, #0
 800a16a:	bc30      	pop	{r4, r5}
 800a16c:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a16e:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a170:	4c11      	ldr	r4, [pc, #68]	; (800a1b8 <FMC_SDRAM_Timing_Init+0x94>)
 800a172:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a174:	68ca      	ldr	r2, [r1, #12]
 800a176:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1) << 20)); 
 800a178:	694b      	ldr	r3, [r1, #20]
 800a17a:	1e5a      	subs	r2, r3, #1
 800a17c:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a17e:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 800a182:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a184:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a186:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a18a:	680b      	ldr	r3, [r1, #0]
 800a18c:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a18e:	684d      	ldr	r5, [r1, #4]
 800a190:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a192:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a196:	688d      	ldr	r5, [r1, #8]
 800a198:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a19a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a19e:	690d      	ldr	r5, [r1, #16]
 800a1a0:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a1a2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 800a1a6:	6989      	ldr	r1, [r1, #24]
 800a1a8:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a1aa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a1ae:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a1b0:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a1b2:	60c3      	str	r3, [r0, #12]
 800a1b4:	e7d8      	b.n	800a168 <FMC_SDRAM_Timing_Init+0x44>
 800a1b6:	bf00      	nop
 800a1b8:	ff0f0fff 	.word	0xff0f0fff

0800a1bc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a1bc:	b410      	push	{r4}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	4602      	mov	r2, r0
  __IO uint32_t tmpr = 0;
 800a1c2:	2000      	movs	r0, #0
 800a1c4:	9001      	str	r0, [sp, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a1c6:	680b      	ldr	r3, [r1, #0]
                    (Command->CommandTarget)                |\
 800a1c8:	684c      	ldr	r4, [r1, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a1ca:	4323      	orrs	r3, r4
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800a1cc:	688c      	ldr	r4, [r1, #8]
 800a1ce:	3c01      	subs	r4, #1
                    (Command->CommandTarget)                |\
 800a1d0:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
                    ((Command->ModeRegisterDefinition) << 9)
 800a1d4:	68c9      	ldr	r1, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a1d6:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800a1da:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 800a1dc:	9b01      	ldr	r3, [sp, #4]
 800a1de:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
}
 800a1e0:	b003      	add	sp, #12
 800a1e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800a1e8:	6943      	ldr	r3, [r0, #20]
 800a1ea:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800a1ee:	6143      	str	r3, [r0, #20]
  
  return HAL_OK;   
}
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	4770      	bx	lr

0800a1f4 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a1f4:	4b0b      	ldr	r3, [pc, #44]	; (800a224 <SDMMC_GetCmdError+0x30>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a0b      	ldr	r2, [pc, #44]	; (800a228 <SDMMC_GetCmdError+0x34>)
 800a1fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a1fe:	0a5a      	lsrs	r2, r3, #9
 800a200:	f241 3388 	movw	r3, #5000	; 0x1388
 800a204:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 800a208:	461a      	mov	r2, r3
 800a20a:	3b01      	subs	r3, #1
 800a20c:	b13a      	cbz	r2, 800a21e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a20e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a210:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a214:	d0f8      	beq.n	800a208 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a216:	23c5      	movs	r3, #197	; 0xc5
 800a218:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a21a:	2000      	movs	r0, #0
 800a21c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800a21e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800a222:	4770      	bx	lr
 800a224:	20000094 	.word	0x20000094
 800a228:	10624dd3 	.word	0x10624dd3

0800a22c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a22c:	4601      	mov	r1, r0
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a22e:	4b14      	ldr	r3, [pc, #80]	; (800a280 <SDMMC_GetCmdResp2+0x54>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a14      	ldr	r2, [pc, #80]	; (800a284 <SDMMC_GetCmdResp2+0x58>)
 800a234:	fba2 2303 	umull	r2, r3, r2, r3
 800a238:	0a5a      	lsrs	r2, r3, #9
 800a23a:	f241 3388 	movw	r3, #5000	; 0x1388
 800a23e:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 800a242:	461a      	mov	r2, r3
 800a244:	3b01      	subs	r3, #1
 800a246:	b1ba      	cbz	r2, 800a278 <SDMMC_GetCmdResp2+0x4c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800a248:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a24a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800a24e:	d0f8      	beq.n	800a242 <SDMMC_GetCmdResp2+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a250:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800a254:	d1f5      	bne.n	800a242 <SDMMC_GetCmdResp2+0x16>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a256:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a258:	f013 0f04 	tst.w	r3, #4
 800a25c:	d106      	bne.n	800a26c <SDMMC_GetCmdResp2+0x40>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a25e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800a260:	f010 0001 	ands.w	r0, r0, #1
 800a264:	d105      	bne.n	800a272 <SDMMC_GetCmdResp2+0x46>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a266:	23c5      	movs	r3, #197	; 0xc5
 800a268:	638b      	str	r3, [r1, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a26a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a26c:	2004      	movs	r0, #4
 800a26e:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a270:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a272:	2001      	movs	r0, #1
 800a274:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a276:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800a278:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	20000094 	.word	0x20000094
 800a284:	10624dd3 	.word	0x10624dd3

0800a288 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a288:	4601      	mov	r1, r0
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a28a:	4b10      	ldr	r3, [pc, #64]	; (800a2cc <SDMMC_GetCmdResp3+0x44>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a10      	ldr	r2, [pc, #64]	; (800a2d0 <SDMMC_GetCmdResp3+0x48>)
 800a290:	fba2 2303 	umull	r2, r3, r2, r3
 800a294:	0a5a      	lsrs	r2, r3, #9
 800a296:	f241 3388 	movw	r3, #5000	; 0x1388
 800a29a:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 800a29e:	461a      	mov	r2, r3
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	b182      	cbz	r2, 800a2c6 <SDMMC_GetCmdResp3+0x3e>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800a2a4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a2a6:	f012 0f45 	tst.w	r2, #69	; 0x45
 800a2aa:	d0f8      	beq.n	800a29e <SDMMC_GetCmdResp3+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2ac:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800a2b0:	d1f5      	bne.n	800a29e <SDMMC_GetCmdResp3+0x16>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a2b2:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800a2b4:	f010 0004 	ands.w	r0, r0, #4
 800a2b8:	d102      	bne.n	800a2c0 <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a2ba:	23c5      	movs	r3, #197	; 0xc5
 800a2bc:	638b      	str	r3, [r1, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a2be:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a2c0:	2004      	movs	r0, #4
 800a2c2:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2c4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800a2c6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800a2ca:	4770      	bx	lr
 800a2cc:	20000094 	.word	0x20000094
 800a2d0:	10624dd3 	.word	0x10624dd3

0800a2d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a2d4:	4601      	mov	r1, r0
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a2d6:	4b16      	ldr	r3, [pc, #88]	; (800a330 <SDMMC_GetCmdResp7+0x5c>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a16      	ldr	r2, [pc, #88]	; (800a334 <SDMMC_GetCmdResp7+0x60>)
 800a2dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e0:	0a5a      	lsrs	r2, r3, #9
 800a2e2:	f241 3388 	movw	r3, #5000	; 0x1388
 800a2e6:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	b1e2      	cbz	r2, 800a32a <SDMMC_GetCmdResp7+0x56>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800a2f0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a2f2:	f012 0f45 	tst.w	r2, #69	; 0x45
 800a2f6:	d0f8      	beq.n	800a2ea <SDMMC_GetCmdResp7+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2f8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800a2fc:	d1f5      	bne.n	800a2ea <SDMMC_GetCmdResp7+0x16>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a2fe:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a300:	f013 0f04 	tst.w	r3, #4
 800a304:	d10b      	bne.n	800a31e <SDMMC_GetCmdResp7+0x4a>
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a306:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a308:	f013 0301 	ands.w	r3, r3, #1
 800a30c:	d10a      	bne.n	800a324 <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a30e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800a310:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800a314:	d00b      	beq.n	800a32e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a316:	2240      	movs	r2, #64	; 0x40
 800a318:	638a      	str	r2, [r1, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a31a:	4618      	mov	r0, r3
 800a31c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a31e:	2004      	movs	r0, #4
 800a320:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a322:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a324:	2001      	movs	r0, #1
 800a326:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a328:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800a32a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  
}
 800a32e:	4770      	bx	lr
 800a330:	20000094 	.word	0x20000094
 800a334:	10624dd3 	.word	0x10624dd3

0800a338 <SDMMC_Init>:
{
 800a338:	b084      	sub	sp, #16
 800a33a:	b410      	push	{r4}
 800a33c:	ac02      	add	r4, sp, #8
 800a33e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800a342:	460b      	mov	r3, r1
 800a344:	9a03      	ldr	r2, [sp, #12]
 800a346:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 800a348:	9a04      	ldr	r2, [sp, #16]
             Init.ClockBypass         |\
 800a34a:	4313      	orrs	r3, r2
             Init.BusWide             |\
 800a34c:	9a05      	ldr	r2, [sp, #20]
             Init.ClockPowerSave      |\
 800a34e:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 800a350:	9a06      	ldr	r2, [sp, #24]
             Init.BusWide             |\
 800a352:	4313      	orrs	r3, r2
             Init.ClockDiv
 800a354:	9a07      	ldr	r2, [sp, #28]
             Init.HardwareFlowControl |\
 800a356:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a358:	6841      	ldr	r1, [r0, #4]
 800a35a:	4a04      	ldr	r2, [pc, #16]	; (800a36c <SDMMC_Init+0x34>)
 800a35c:	400a      	ands	r2, r1
 800a35e:	4313      	orrs	r3, r2
 800a360:	6043      	str	r3, [r0, #4]
}
 800a362:	2000      	movs	r0, #0
 800a364:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a368:	b004      	add	sp, #16
 800a36a:	4770      	bx	lr
 800a36c:	ffff8100 	.word	0xffff8100

0800a370 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800a370:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800a374:	4770      	bx	lr

0800a376 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800a376:	680b      	ldr	r3, [r1, #0]
 800a378:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800a37c:	2000      	movs	r0, #0
 800a37e:	4770      	bx	lr

0800a380 <SDMMC_PowerState_ON>:
{  
 800a380:	b508      	push	{r3, lr}
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a382:	2303      	movs	r3, #3
 800a384:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 800a386:	2002      	movs	r0, #2
 800a388:	f7f9 fdba 	bl	8003f00 <HAL_Delay>
}
 800a38c:	2000      	movs	r0, #0
 800a38e:	bd08      	pop	{r3, pc}

0800a390 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a390:	6800      	ldr	r0, [r0, #0]
}
 800a392:	f000 0003 	and.w	r0, r0, #3
 800a396:	4770      	bx	lr

0800a398 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800a398:	680b      	ldr	r3, [r1, #0]
 800a39a:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a39c:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 800a39e:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a3a0:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 800a3a2:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 800a3a4:	4313      	orrs	r3, r2
                       Command->CPSM);
 800a3a6:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 800a3a8:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a3aa:	68c1      	ldr	r1, [r0, #12]
 800a3ac:	4a02      	ldr	r2, [pc, #8]	; (800a3b8 <SDMMC_SendCommand+0x20>)
 800a3ae:	400a      	ands	r2, r1
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	60c3      	str	r3, [r0, #12]
}
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	4770      	bx	lr
 800a3b8:	fffff000 	.word	0xfffff000

0800a3bc <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 800a3bc:	6900      	ldr	r0, [r0, #16]
}
 800a3be:	b2c0      	uxtb	r0, r0
 800a3c0:	4770      	bx	lr

0800a3c2 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a3c2:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800a3c4:	5840      	ldr	r0, [r0, r1]
}  
 800a3c6:	4770      	bx	lr

0800a3c8 <SDMMC_GetCmdResp1>:
{
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	460d      	mov	r5, r1
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a3ce:	4b50      	ldr	r3, [pc, #320]	; (800a510 <SDMMC_GetCmdResp1+0x148>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4950      	ldr	r1, [pc, #320]	; (800a514 <SDMMC_GetCmdResp1+0x14c>)
 800a3d4:	fba1 1303 	umull	r1, r3, r1, r3
 800a3d8:	0a5b      	lsrs	r3, r3, #9
 800a3da:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 800a3de:	4613      	mov	r3, r2
 800a3e0:	3a01      	subs	r2, #1
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d05d      	beq.n	800a4a2 <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDMMCx->STA;
 800a3e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a3e8:	f013 0f45 	tst.w	r3, #69	; 0x45
 800a3ec:	d0f7      	beq.n	800a3de <SDMMC_GetCmdResp1+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a3ee:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a3f2:	d1f4      	bne.n	800a3de <SDMMC_GetCmdResp1+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a3f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3f6:	f013 0f04 	tst.w	r3, #4
 800a3fa:	d106      	bne.n	800a40a <SDMMC_GetCmdResp1+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a3fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3fe:	f013 0f01 	tst.w	r3, #1
 800a402:	d005      	beq.n	800a410 <SDMMC_GetCmdResp1+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a404:	2001      	movs	r0, #1
 800a406:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a408:	e04d      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a40a:	2004      	movs	r0, #4
 800a40c:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a40e:	e04a      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a410:	23c5      	movs	r3, #197	; 0xc5
 800a412:	63a3      	str	r3, [r4, #56]	; 0x38
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a414:	4620      	mov	r0, r4
 800a416:	f7ff ffd1 	bl	800a3bc <SDMMC_GetCommandResponse>
 800a41a:	42a8      	cmp	r0, r5
 800a41c:	d001      	beq.n	800a422 <SDMMC_GetCmdResp1+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a41e:	2001      	movs	r0, #1
 800a420:	e041      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a422:	2100      	movs	r1, #0
 800a424:	4620      	mov	r0, r4
 800a426:	f7ff ffcc 	bl	800a3c2 <SDMMC_GetResponse>
 800a42a:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a42c:	483a      	ldr	r0, [pc, #232]	; (800a518 <SDMMC_GetCmdResp1+0x150>)
 800a42e:	4018      	ands	r0, r3
 800a430:	b3c8      	cbz	r0, 800a4a6 <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a432:	2b00      	cmp	r3, #0
 800a434:	db38      	blt.n	800a4a8 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a436:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a43a:	d138      	bne.n	800a4ae <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a43c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800a440:	d137      	bne.n	800a4b2 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a442:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800a446:	d136      	bne.n	800a4b6 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a448:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800a44c:	d136      	bne.n	800a4bc <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a44e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800a452:	d136      	bne.n	800a4c2 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a454:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800a458:	d136      	bne.n	800a4c8 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a45a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800a45e:	d136      	bne.n	800a4ce <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a460:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800a464:	d136      	bne.n	800a4d4 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a466:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800a46a:	d136      	bne.n	800a4da <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a46c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800a470:	d136      	bne.n	800a4e0 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a472:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800a476:	d136      	bne.n	800a4e6 <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a478:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a47c:	d136      	bne.n	800a4ec <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a47e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800a482:	d136      	bne.n	800a4f2 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a484:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a488:	d136      	bne.n	800a4f8 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a48a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800a48e:	d136      	bne.n	800a4fe <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a490:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800a494:	d136      	bne.n	800a504 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a496:	f013 0f08 	tst.w	r3, #8
 800a49a:	d036      	beq.n	800a50a <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a49c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a4a0:	e001      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 800a4a2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800a4a6:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a4a8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800a4ac:	e7fb      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a4ae:	2040      	movs	r0, #64	; 0x40
 800a4b0:	e7f9      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a4b2:	2080      	movs	r0, #128	; 0x80
 800a4b4:	e7f7      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a4b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a4ba:	e7f4      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a4bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a4c0:	e7f1      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a4c2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a4c6:	e7ee      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a4c8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a4cc:	e7eb      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a4ce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a4d2:	e7e8      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a4d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a4d8:	e7e5      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a4da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a4de:	e7e2      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 800a4e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a4e4:	e7df      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a4e6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a4ea:	e7dc      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a4ec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800a4f0:	e7d9      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a4f2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a4f6:	e7d6      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a4f8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a4fc:	e7d3      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a4fe:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800a502:	e7d0      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 800a504:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800a508:	e7cd      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a50a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a50e:	e7ca      	b.n	800a4a6 <SDMMC_GetCmdResp1+0xde>
 800a510:	20000094 	.word	0x20000094
 800a514:	10624dd3 	.word	0x10624dd3
 800a518:	fdffe008 	.word	0xfdffe008

0800a51c <SDMMC_GetCmdResp6>:
{
 800a51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a51e:	4605      	mov	r5, r0
 800a520:	460e      	mov	r6, r1
 800a522:	4617      	mov	r7, r2
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a524:	4b23      	ldr	r3, [pc, #140]	; (800a5b4 <SDMMC_GetCmdResp6+0x98>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4823      	ldr	r0, [pc, #140]	; (800a5b8 <SDMMC_GetCmdResp6+0x9c>)
 800a52a:	fba0 2303 	umull	r2, r3, r0, r3
 800a52e:	0a58      	lsrs	r0, r3, #9
 800a530:	f241 3388 	movw	r3, #5000	; 0x1388
 800a534:	fb03 f300 	mul.w	r3, r3, r0
    if (count-- == 0U)
 800a538:	461c      	mov	r4, r3
 800a53a:	3b01      	subs	r3, #1
 800a53c:	b38c      	cbz	r4, 800a5a2 <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDMMCx->STA;
 800a53e:	6b6c      	ldr	r4, [r5, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a540:	f014 0f45 	tst.w	r4, #69	; 0x45
 800a544:	d0f8      	beq.n	800a538 <SDMMC_GetCmdResp6+0x1c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a546:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800a54a:	d1f5      	bne.n	800a538 <SDMMC_GetCmdResp6+0x1c>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a54c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a54e:	f013 0f04 	tst.w	r3, #4
 800a552:	d106      	bne.n	800a562 <SDMMC_GetCmdResp6+0x46>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a554:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a556:	f013 0f01 	tst.w	r3, #1
 800a55a:	d005      	beq.n	800a568 <SDMMC_GetCmdResp6+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a55c:	2001      	movs	r0, #1
 800a55e:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a560:	e021      	b.n	800a5a6 <SDMMC_GetCmdResp6+0x8a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a562:	2004      	movs	r0, #4
 800a564:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a566:	e01e      	b.n	800a5a6 <SDMMC_GetCmdResp6+0x8a>
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a568:	4628      	mov	r0, r5
 800a56a:	f7ff ff27 	bl	800a3bc <SDMMC_GetCommandResponse>
 800a56e:	42b0      	cmp	r0, r6
 800a570:	d001      	beq.n	800a576 <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a572:	2001      	movs	r0, #1
 800a574:	e017      	b.n	800a5a6 <SDMMC_GetCmdResp6+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a576:	23c5      	movs	r3, #197	; 0xc5
 800a578:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a57a:	2100      	movs	r1, #0
 800a57c:	4628      	mov	r0, r5
 800a57e:	f7ff ff20 	bl	800a3c2 <SDMMC_GetResponse>
 800a582:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a584:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 800a588:	d008      	beq.n	800a59c <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a58a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800a58e:	d10b      	bne.n	800a5a8 <SDMMC_GetCmdResp6+0x8c>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a590:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a594:	d00b      	beq.n	800a5ae <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a596:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a59a:	e004      	b.n	800a5a6 <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a59c:	0c1b      	lsrs	r3, r3, #16
 800a59e:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 800a5a0:	e001      	b.n	800a5a6 <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 800a5a2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800a5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a5a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a5ac:	e7fb      	b.n	800a5a6 <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a5ae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a5b2:	e7f8      	b.n	800a5a6 <SDMMC_GetCmdResp6+0x8a>
 800a5b4:	20000094 	.word	0x20000094
 800a5b8:	10624dd3 	.word	0x10624dd3

0800a5bc <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a5bc:	680b      	ldr	r3, [r1, #0]
 800a5be:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800a5c0:	684b      	ldr	r3, [r1, #4]
 800a5c2:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5c4:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 800a5c6:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5c8:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 800a5ca:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 800a5cc:	4313      	orrs	r3, r2
                       Data->DPSM);
 800a5ce:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 800a5d0:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a5d2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800a5d4:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800a5dc:	2000      	movs	r0, #0
 800a5de:	4770      	bx	lr

0800a5e0 <SDMMC_CmdBlockLength>:
{
 800a5e0:	b530      	push	{r4, r5, lr}
 800a5e2:	b087      	sub	sp, #28
 800a5e4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a5e6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a5e8:	2510      	movs	r5, #16
 800a5ea:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5ec:	2340      	movs	r3, #64	; 0x40
 800a5ee:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5f8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5fa:	a901      	add	r1, sp, #4
 800a5fc:	f7ff fecc 	bl	800a398 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a600:	f241 3288 	movw	r2, #5000	; 0x1388
 800a604:	4629      	mov	r1, r5
 800a606:	4620      	mov	r0, r4
 800a608:	f7ff fede 	bl	800a3c8 <SDMMC_GetCmdResp1>
}
 800a60c:	b007      	add	sp, #28
 800a60e:	bd30      	pop	{r4, r5, pc}

0800a610 <SDMMC_CmdReadSingleBlock>:
{
 800a610:	b530      	push	{r4, r5, lr}
 800a612:	b087      	sub	sp, #28
 800a614:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a616:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a618:	2511      	movs	r5, #17
 800a61a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a61c:	2340      	movs	r3, #64	; 0x40
 800a61e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a620:	2300      	movs	r3, #0
 800a622:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a628:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a62a:	a901      	add	r1, sp, #4
 800a62c:	f7ff feb4 	bl	800a398 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a630:	f241 3288 	movw	r2, #5000	; 0x1388
 800a634:	4629      	mov	r1, r5
 800a636:	4620      	mov	r0, r4
 800a638:	f7ff fec6 	bl	800a3c8 <SDMMC_GetCmdResp1>
}
 800a63c:	b007      	add	sp, #28
 800a63e:	bd30      	pop	{r4, r5, pc}

0800a640 <SDMMC_CmdReadMultiBlock>:
{
 800a640:	b530      	push	{r4, r5, lr}
 800a642:	b087      	sub	sp, #28
 800a644:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a646:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a648:	2512      	movs	r5, #18
 800a64a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a64c:	2340      	movs	r3, #64	; 0x40
 800a64e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a650:	2300      	movs	r3, #0
 800a652:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a658:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a65a:	a901      	add	r1, sp, #4
 800a65c:	f7ff fe9c 	bl	800a398 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a660:	f241 3288 	movw	r2, #5000	; 0x1388
 800a664:	4629      	mov	r1, r5
 800a666:	4620      	mov	r0, r4
 800a668:	f7ff feae 	bl	800a3c8 <SDMMC_GetCmdResp1>
}
 800a66c:	b007      	add	sp, #28
 800a66e:	bd30      	pop	{r4, r5, pc}

0800a670 <SDMMC_CmdWriteSingleBlock>:
{
 800a670:	b530      	push	{r4, r5, lr}
 800a672:	b087      	sub	sp, #28
 800a674:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a676:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a678:	2518      	movs	r5, #24
 800a67a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a67c:	2340      	movs	r3, #64	; 0x40
 800a67e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a680:	2300      	movs	r3, #0
 800a682:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a688:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a68a:	a901      	add	r1, sp, #4
 800a68c:	f7ff fe84 	bl	800a398 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a690:	f241 3288 	movw	r2, #5000	; 0x1388
 800a694:	4629      	mov	r1, r5
 800a696:	4620      	mov	r0, r4
 800a698:	f7ff fe96 	bl	800a3c8 <SDMMC_GetCmdResp1>
}
 800a69c:	b007      	add	sp, #28
 800a69e:	bd30      	pop	{r4, r5, pc}

0800a6a0 <SDMMC_CmdWriteMultiBlock>:
{
 800a6a0:	b530      	push	{r4, r5, lr}
 800a6a2:	b087      	sub	sp, #28
 800a6a4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a6a6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a6a8:	2519      	movs	r5, #25
 800a6aa:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6ac:	2340      	movs	r3, #64	; 0x40
 800a6ae:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6b8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6ba:	a901      	add	r1, sp, #4
 800a6bc:	f7ff fe6c 	bl	800a398 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a6c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f7ff fe7e 	bl	800a3c8 <SDMMC_GetCmdResp1>
}
 800a6cc:	b007      	add	sp, #28
 800a6ce:	bd30      	pop	{r4, r5, pc}

0800a6d0 <SDMMC_CmdStopTransfer>:
{
 800a6d0:	b530      	push	{r4, r5, lr}
 800a6d2:	b087      	sub	sp, #28
 800a6d4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a6da:	250c      	movs	r5, #12
 800a6dc:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6de:	2240      	movs	r2, #64	; 0x40
 800a6e0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6e2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6e8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6ea:	a901      	add	r1, sp, #4
 800a6ec:	f7ff fe54 	bl	800a398 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a6f0:	4a03      	ldr	r2, [pc, #12]	; (800a700 <SDMMC_CmdStopTransfer+0x30>)
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	f7ff fe67 	bl	800a3c8 <SDMMC_GetCmdResp1>
}
 800a6fa:	b007      	add	sp, #28
 800a6fc:	bd30      	pop	{r4, r5, pc}
 800a6fe:	bf00      	nop
 800a700:	05f5e100 	.word	0x05f5e100

0800a704 <SDMMC_CmdSelDesel>:
{
 800a704:	b530      	push	{r4, r5, lr}
 800a706:	b087      	sub	sp, #28
 800a708:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a70a:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a70c:	2507      	movs	r5, #7
 800a70e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a710:	2340      	movs	r3, #64	; 0x40
 800a712:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a714:	2300      	movs	r3, #0
 800a716:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a71c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a71e:	a901      	add	r1, sp, #4
 800a720:	f7ff fe3a 	bl	800a398 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a724:	f241 3288 	movw	r2, #5000	; 0x1388
 800a728:	4629      	mov	r1, r5
 800a72a:	4620      	mov	r0, r4
 800a72c:	f7ff fe4c 	bl	800a3c8 <SDMMC_GetCmdResp1>
}
 800a730:	b007      	add	sp, #28
 800a732:	bd30      	pop	{r4, r5, pc}

0800a734 <SDMMC_CmdGoIdleState>:
{
 800a734:	b510      	push	{r4, lr}
 800a736:	b086      	sub	sp, #24
 800a738:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800a73a:	2300      	movs	r3, #0
 800a73c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a73e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a740:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a742:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a748:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a74a:	a901      	add	r1, sp, #4
 800a74c:	f7ff fe24 	bl	800a398 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a750:	4620      	mov	r0, r4
 800a752:	f7ff fd4f 	bl	800a1f4 <SDMMC_GetCmdError>
}
 800a756:	b006      	add	sp, #24
 800a758:	bd10      	pop	{r4, pc}

0800a75a <SDMMC_CmdOperCond>:
{
 800a75a:	b510      	push	{r4, lr}
 800a75c:	b086      	sub	sp, #24
 800a75e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a760:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a764:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a766:	2308      	movs	r3, #8
 800a768:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a76a:	2340      	movs	r3, #64	; 0x40
 800a76c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a76e:	2300      	movs	r3, #0
 800a770:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a776:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a778:	a901      	add	r1, sp, #4
 800a77a:	f7ff fe0d 	bl	800a398 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a77e:	4620      	mov	r0, r4
 800a780:	f7ff fda8 	bl	800a2d4 <SDMMC_GetCmdResp7>
}
 800a784:	b006      	add	sp, #24
 800a786:	bd10      	pop	{r4, pc}

0800a788 <SDMMC_CmdAppCommand>:
{
 800a788:	b530      	push	{r4, r5, lr}
 800a78a:	b087      	sub	sp, #28
 800a78c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a78e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a790:	2537      	movs	r5, #55	; 0x37
 800a792:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a794:	2340      	movs	r3, #64	; 0x40
 800a796:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a798:	2300      	movs	r3, #0
 800a79a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a79c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7a0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7a2:	a901      	add	r1, sp, #4
 800a7a4:	f7ff fdf8 	bl	800a398 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a7a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ac:	4629      	mov	r1, r5
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f7ff fe0a 	bl	800a3c8 <SDMMC_GetCmdResp1>
}
 800a7b4:	b007      	add	sp, #28
 800a7b6:	bd30      	pop	{r4, r5, pc}

0800a7b8 <SDMMC_CmdAppOperCommand>:
{
 800a7b8:	b510      	push	{r4, lr}
 800a7ba:	b086      	sub	sp, #24
 800a7bc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a7be:	4b0a      	ldr	r3, [pc, #40]	; (800a7e8 <SDMMC_CmdAppOperCommand+0x30>)
 800a7c0:	430b      	orrs	r3, r1
 800a7c2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a7c4:	2329      	movs	r3, #41	; 0x29
 800a7c6:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7c8:	2340      	movs	r3, #64	; 0x40
 800a7ca:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7d4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7d6:	a901      	add	r1, sp, #4
 800a7d8:	f7ff fdde 	bl	800a398 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f7ff fd53 	bl	800a288 <SDMMC_GetCmdResp3>
}
 800a7e2:	b006      	add	sp, #24
 800a7e4:	bd10      	pop	{r4, pc}
 800a7e6:	bf00      	nop
 800a7e8:	80100000 	.word	0x80100000

0800a7ec <SDMMC_CmdBusWidth>:
{
 800a7ec:	b530      	push	{r4, r5, lr}
 800a7ee:	b087      	sub	sp, #28
 800a7f0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a7f2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a7f4:	2506      	movs	r5, #6
 800a7f6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7f8:	2340      	movs	r3, #64	; 0x40
 800a7fa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a804:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a806:	a901      	add	r1, sp, #4
 800a808:	f7ff fdc6 	bl	800a398 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a80c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a810:	4629      	mov	r1, r5
 800a812:	4620      	mov	r0, r4
 800a814:	f7ff fdd8 	bl	800a3c8 <SDMMC_GetCmdResp1>
}
 800a818:	b007      	add	sp, #28
 800a81a:	bd30      	pop	{r4, r5, pc}

0800a81c <SDMMC_CmdSendSCR>:
{
 800a81c:	b530      	push	{r4, r5, lr}
 800a81e:	b087      	sub	sp, #28
 800a820:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800a822:	2300      	movs	r3, #0
 800a824:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a826:	2533      	movs	r5, #51	; 0x33
 800a828:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a82a:	2240      	movs	r2, #64	; 0x40
 800a82c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a82e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a834:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a836:	a901      	add	r1, sp, #4
 800a838:	f7ff fdae 	bl	800a398 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a83c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a840:	4629      	mov	r1, r5
 800a842:	4620      	mov	r0, r4
 800a844:	f7ff fdc0 	bl	800a3c8 <SDMMC_GetCmdResp1>
}
 800a848:	b007      	add	sp, #28
 800a84a:	bd30      	pop	{r4, r5, pc}

0800a84c <SDMMC_CmdSendCID>:
{
 800a84c:	b510      	push	{r4, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800a852:	2300      	movs	r3, #0
 800a854:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a856:	2202      	movs	r2, #2
 800a858:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a85a:	22c0      	movs	r2, #192	; 0xc0
 800a85c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a85e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a864:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a866:	a901      	add	r1, sp, #4
 800a868:	f7ff fd96 	bl	800a398 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a86c:	4620      	mov	r0, r4
 800a86e:	f7ff fcdd 	bl	800a22c <SDMMC_GetCmdResp2>
}
 800a872:	b006      	add	sp, #24
 800a874:	bd10      	pop	{r4, pc}

0800a876 <SDMMC_CmdSendCSD>:
{
 800a876:	b510      	push	{r4, lr}
 800a878:	b086      	sub	sp, #24
 800a87a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800a87c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a87e:	2309      	movs	r3, #9
 800a880:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a882:	23c0      	movs	r3, #192	; 0xc0
 800a884:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a886:	2300      	movs	r3, #0
 800a888:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a88a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a88e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a890:	a901      	add	r1, sp, #4
 800a892:	f7ff fd81 	bl	800a398 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a896:	4620      	mov	r0, r4
 800a898:	f7ff fcc8 	bl	800a22c <SDMMC_GetCmdResp2>
}
 800a89c:	b006      	add	sp, #24
 800a89e:	bd10      	pop	{r4, pc}

0800a8a0 <SDMMC_CmdSetRelAdd>:
{
 800a8a0:	b570      	push	{r4, r5, r6, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a8ac:	2603      	movs	r6, #3
 800a8ae:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8b0:	2240      	movs	r2, #64	; 0x40
 800a8b2:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8b4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8ba:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8bc:	a901      	add	r1, sp, #4
 800a8be:	f7ff fd6b 	bl	800a398 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a8c2:	462a      	mov	r2, r5
 800a8c4:	4631      	mov	r1, r6
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f7ff fe28 	bl	800a51c <SDMMC_GetCmdResp6>
}
 800a8cc:	b006      	add	sp, #24
 800a8ce:	bd70      	pop	{r4, r5, r6, pc}

0800a8d0 <SDMMC_CmdSendStatus>:
{
 800a8d0:	b530      	push	{r4, r5, lr}
 800a8d2:	b087      	sub	sp, #28
 800a8d4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800a8d6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a8d8:	250d      	movs	r5, #13
 800a8da:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8dc:	2340      	movs	r3, #64	; 0x40
 800a8de:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8e8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8ea:	a901      	add	r1, sp, #4
 800a8ec:	f7ff fd54 	bl	800a398 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a8f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f7ff fd66 	bl	800a3c8 <SDMMC_GetCmdResp1>
}
 800a8fc:	b007      	add	sp, #28
 800a8fe:	bd30      	pop	{r4, r5, pc}

0800a900 <USB_SetTurnaroundTime>:

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a900:	2a02      	cmp	r2, #2
 800a902:	d00a      	beq.n	800a91a <USB_SetTurnaroundTime+0x1a>
      UsbTrd = 0x6U;
    }
  }
  else if (speed == USBD_HS_SPEED)
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a904:	2109      	movs	r1, #9
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a906:	68c2      	ldr	r2, [r0, #12]
 800a908:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800a90c:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a90e:	68c3      	ldr	r3, [r0, #12]
 800a910:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800a914:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 800a916:	2000      	movs	r0, #0
 800a918:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a91a:	4b20      	ldr	r3, [pc, #128]	; (800a99c <USB_SetTurnaroundTime+0x9c>)
 800a91c:	440b      	add	r3, r1
 800a91e:	4a20      	ldr	r2, [pc, #128]	; (800a9a0 <USB_SetTurnaroundTime+0xa0>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d929      	bls.n	800a978 <USB_SetTurnaroundTime+0x78>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a924:	4b1f      	ldr	r3, [pc, #124]	; (800a9a4 <USB_SetTurnaroundTime+0xa4>)
 800a926:	440b      	add	r3, r1
 800a928:	4a1f      	ldr	r2, [pc, #124]	; (800a9a8 <USB_SetTurnaroundTime+0xa8>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d926      	bls.n	800a97c <USB_SetTurnaroundTime+0x7c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a92e:	4b1f      	ldr	r3, [pc, #124]	; (800a9ac <USB_SetTurnaroundTime+0xac>)
 800a930:	440b      	add	r3, r1
 800a932:	4a1f      	ldr	r2, [pc, #124]	; (800a9b0 <USB_SetTurnaroundTime+0xb0>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d923      	bls.n	800a980 <USB_SetTurnaroundTime+0x80>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a938:	4b1e      	ldr	r3, [pc, #120]	; (800a9b4 <USB_SetTurnaroundTime+0xb4>)
 800a93a:	440b      	add	r3, r1
 800a93c:	4a1e      	ldr	r2, [pc, #120]	; (800a9b8 <USB_SetTurnaroundTime+0xb8>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d320      	bcc.n	800a984 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a942:	4b1e      	ldr	r3, [pc, #120]	; (800a9bc <USB_SetTurnaroundTime+0xbc>)
 800a944:	440b      	add	r3, r1
 800a946:	4a1e      	ldr	r2, [pc, #120]	; (800a9c0 <USB_SetTurnaroundTime+0xc0>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d91d      	bls.n	800a988 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a94c:	4b1d      	ldr	r3, [pc, #116]	; (800a9c4 <USB_SetTurnaroundTime+0xc4>)
 800a94e:	440b      	add	r3, r1
 800a950:	4a1d      	ldr	r2, [pc, #116]	; (800a9c8 <USB_SetTurnaroundTime+0xc8>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d31a      	bcc.n	800a98c <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a956:	4b1d      	ldr	r3, [pc, #116]	; (800a9cc <USB_SetTurnaroundTime+0xcc>)
 800a958:	440b      	add	r3, r1
 800a95a:	4a1d      	ldr	r2, [pc, #116]	; (800a9d0 <USB_SetTurnaroundTime+0xd0>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d317      	bcc.n	800a990 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a960:	4b1c      	ldr	r3, [pc, #112]	; (800a9d4 <USB_SetTurnaroundTime+0xd4>)
 800a962:	440b      	add	r3, r1
 800a964:	4a1c      	ldr	r2, [pc, #112]	; (800a9d8 <USB_SetTurnaroundTime+0xd8>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d314      	bcc.n	800a994 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a96a:	4b1c      	ldr	r3, [pc, #112]	; (800a9dc <USB_SetTurnaroundTime+0xdc>)
 800a96c:	440b      	add	r3, r1
 800a96e:	4a1c      	ldr	r2, [pc, #112]	; (800a9e0 <USB_SetTurnaroundTime+0xe0>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d211      	bcs.n	800a998 <USB_SetTurnaroundTime+0x98>
      UsbTrd = 0x7U;
 800a974:	2107      	movs	r1, #7
 800a976:	e7c6      	b.n	800a906 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 800a978:	210f      	movs	r1, #15
 800a97a:	e7c4      	b.n	800a906 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 800a97c:	210e      	movs	r1, #14
 800a97e:	e7c2      	b.n	800a906 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 800a980:	210d      	movs	r1, #13
 800a982:	e7c0      	b.n	800a906 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 800a984:	210c      	movs	r1, #12
 800a986:	e7be      	b.n	800a906 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 800a988:	210b      	movs	r1, #11
 800a98a:	e7bc      	b.n	800a906 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 800a98c:	210a      	movs	r1, #10
 800a98e:	e7ba      	b.n	800a906 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 800a990:	2109      	movs	r1, #9
 800a992:	e7b8      	b.n	800a906 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 800a994:	2108      	movs	r1, #8
 800a996:	e7b6      	b.n	800a906 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 800a998:	2106      	movs	r1, #6
 800a99a:	e7b4      	b.n	800a906 <USB_SetTurnaroundTime+0x6>
 800a99c:	ff275340 	.word	0xff275340
 800a9a0:	000c34ff 	.word	0x000c34ff
 800a9a4:	ff1b1e40 	.word	0xff1b1e40
 800a9a8:	000f423f 	.word	0x000f423f
 800a9ac:	ff0bdc00 	.word	0xff0bdc00
 800a9b0:	00124f7f 	.word	0x00124f7f
 800a9b4:	fef98c80 	.word	0xfef98c80
 800a9b8:	0013d620 	.word	0x0013d620
 800a9bc:	fee5b660 	.word	0xfee5b660
 800a9c0:	0016e35f 	.word	0x0016e35f
 800a9c4:	feced300 	.word	0xfeced300
 800a9c8:	001b7740 	.word	0x001b7740
 800a9cc:	feb35bc0 	.word	0xfeb35bc0
 800a9d0:	002191c0 	.word	0x002191c0
 800a9d4:	fe91ca00 	.word	0xfe91ca00
 800a9d8:	00387520 	.word	0x00387520
 800a9dc:	fe5954e0 	.word	0xfe5954e0
 800a9e0:	00419ce0 	.word	0x00419ce0

0800a9e4 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a9e4:	0189      	lsls	r1, r1, #6
 800a9e6:	f041 0120 	orr.w	r1, r1, #32
 800a9ea:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 800a9ec:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	4a05      	ldr	r2, [pc, #20]	; (800aa08 <USB_FlushTxFifo+0x24>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d805      	bhi.n	800aa02 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a9f6:	6902      	ldr	r2, [r0, #16]
 800a9f8:	f012 0f20 	tst.w	r2, #32
 800a9fc:	d1f7      	bne.n	800a9ee <USB_FlushTxFifo+0xa>

  return HAL_OK;
 800a9fe:	2000      	movs	r0, #0
 800aa00:	4770      	bx	lr
      return HAL_TIMEOUT;
 800aa02:	2003      	movs	r0, #3
}
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	00030d40 	.word	0x00030d40

0800aa0c <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800aa0c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800aa10:	f013 0306 	ands.w	r3, r3, #6
 800aa14:	d005      	beq.n	800aa22 <USB_GetDevSpeed+0x16>
  {
    speed = USBD_HS_SPEED;
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800aa16:	2b06      	cmp	r3, #6
 800aa18:	bf18      	it	ne
 800aa1a:	2b02      	cmpne	r3, #2
 800aa1c:	d103      	bne.n	800aa26 <USB_GetDevSpeed+0x1a>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800aa1e:	2002      	movs	r0, #2
 800aa20:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 800aa22:	2000      	movs	r0, #0
 800aa24:	4770      	bx	lr
  }
  else
  {
    speed = 0xFU;
 800aa26:	200f      	movs	r0, #15
  }

  return speed;
}
 800aa28:	4770      	bx	lr
	...

0800aa2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa2c:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 800aa2e:	780c      	ldrb	r4, [r1, #0]

  if (ep->is_in == 1U)
 800aa30:	784b      	ldrb	r3, [r1, #1]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d020      	beq.n	800aa78 <USB_ActivateEndpoint+0x4c>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aa36:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 800aa3a:	f004 060f 	and.w	r6, r4, #15
 800aa3e:	2201      	movs	r2, #1
 800aa40:	40b2      	lsls	r2, r6
 800aa42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa46:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aa4a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800aa4e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800aa52:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800aa56:	d10c      	bne.n	800aa72 <USB_ActivateEndpoint+0x46>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aa58:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800aa5c:	688b      	ldr	r3, [r1, #8]
 800aa5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800aa62:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aa64:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	4a13      	ldr	r2, [pc, #76]	; (800aab8 <USB_ActivateEndpoint+0x8c>)
 800aa6c:	431a      	orrs	r2, r3
 800aa6e:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
}
 800aa72:	2000      	movs	r0, #0
 800aa74:	bc70      	pop	{r4, r5, r6}
 800aa76:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800aa78:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800aa7c:	f004 060f 	and.w	r6, r4, #15
 800aa80:	40b3      	lsls	r3, r6
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	4313      	orrs	r3, r2
 800aa86:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800aa8a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800aa8e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800aa92:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800aa96:	d1ec      	bne.n	800aa72 <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa98:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800aa9c:	688b      	ldr	r3, [r1, #8]
 800aa9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aaa2:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aaa4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aaa8:	ea43 5484 	orr.w	r4, r3, r4, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aaac:	4314      	orrs	r4, r2
 800aaae:	4b02      	ldr	r3, [pc, #8]	; (800aab8 <USB_ActivateEndpoint+0x8c>)
 800aab0:	4323      	orrs	r3, r4
 800aab2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800aab6:	e7dc      	b.n	800aa72 <USB_ActivateEndpoint+0x46>
 800aab8:	10008000 	.word	0x10008000

0800aabc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aabc:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 800aabe:	780b      	ldrb	r3, [r1, #0]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aac0:	784c      	ldrb	r4, [r1, #1]
 800aac2:	2c01      	cmp	r4, #1
 800aac4:	d024      	beq.n	800ab10 <USB_EP0StartXfer+0x54>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aac6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800aaca:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800aace:	691d      	ldr	r5, [r3, #16]
 800aad0:	4c3e      	ldr	r4, [pc, #248]	; (800abcc <USB_EP0StartXfer+0x110>)
 800aad2:	402c      	ands	r4, r5
 800aad4:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aad6:	691d      	ldr	r5, [r3, #16]
 800aad8:	4c3d      	ldr	r4, [pc, #244]	; (800abd0 <USB_EP0StartXfer+0x114>)
 800aada:	402c      	ands	r4, r5
 800aadc:	611c      	str	r4, [r3, #16]

    if (ep->xfer_len > 0U)
 800aade:	694c      	ldr	r4, [r1, #20]
 800aae0:	b10c      	cbz	r4, 800aae6 <USB_EP0StartXfer+0x2a>
    {
      ep->xfer_len = ep->maxpacket;
 800aae2:	688c      	ldr	r4, [r1, #8]
 800aae4:	614c      	str	r4, [r1, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aae6:	691c      	ldr	r4, [r3, #16]
 800aae8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800aaec:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800aaee:	691c      	ldr	r4, [r3, #16]
 800aaf0:	688d      	ldr	r5, [r1, #8]
 800aaf2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800aaf6:	432c      	orrs	r4, r5
 800aaf8:	611c      	str	r4, [r3, #16]

    if (dma == 1U)
 800aafa:	2a01      	cmp	r2, #1
 800aafc:	d061      	beq.n	800abc2 <USB_EP0StartXfer+0x106>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aafe:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ab02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab06:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 800ab0a:	2000      	movs	r0, #0
 800ab0c:	bc70      	pop	{r4, r5, r6}
 800ab0e:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 800ab10:	694c      	ldr	r4, [r1, #20]
 800ab12:	bb5c      	cbnz	r4, 800ab6c <USB_EP0StartXfer+0xb0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab14:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800ab18:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800ab1c:	4d2c      	ldr	r5, [pc, #176]	; (800abd0 <USB_EP0StartXfer+0x114>)
 800ab1e:	4035      	ands	r5, r6
 800ab20:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab24:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800ab28:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800ab2c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab30:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800ab34:	4d25      	ldr	r5, [pc, #148]	; (800abcc <USB_EP0StartXfer+0x110>)
 800ab36:	4035      	ands	r5, r6
 800ab38:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 800ab3c:	2a01      	cmp	r2, #1
 800ab3e:	d031      	beq.n	800aba4 <USB_EP0StartXfer+0xe8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab40:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800ab44:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800ab48:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800ab4c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800ab50:	694b      	ldr	r3, [r1, #20]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d0d9      	beq.n	800ab0a <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ab56:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800ab5a:	780a      	ldrb	r2, [r1, #0]
 800ab5c:	f002 010f 	and.w	r1, r2, #15
 800ab60:	2201      	movs	r2, #1
 800ab62:	408a      	lsls	r2, r1
 800ab64:	4313      	orrs	r3, r2
 800ab66:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800ab6a:	e7ce      	b.n	800ab0a <USB_EP0StartXfer+0x4e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab6c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800ab70:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 800ab74:	6926      	ldr	r6, [r4, #16]
 800ab76:	4d15      	ldr	r5, [pc, #84]	; (800abcc <USB_EP0StartXfer+0x110>)
 800ab78:	4035      	ands	r5, r6
 800ab7a:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab7c:	6926      	ldr	r6, [r4, #16]
 800ab7e:	4d14      	ldr	r5, [pc, #80]	; (800abd0 <USB_EP0StartXfer+0x114>)
 800ab80:	4035      	ands	r5, r6
 800ab82:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 800ab84:	694e      	ldr	r6, [r1, #20]
 800ab86:	688d      	ldr	r5, [r1, #8]
 800ab88:	42ae      	cmp	r6, r5
 800ab8a:	d900      	bls.n	800ab8e <USB_EP0StartXfer+0xd2>
        ep->xfer_len = ep->maxpacket;
 800ab8c:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab8e:	6925      	ldr	r5, [r4, #16]
 800ab90:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800ab94:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ab96:	6925      	ldr	r5, [r4, #16]
 800ab98:	694e      	ldr	r6, [r1, #20]
 800ab9a:	f3c6 0612 	ubfx	r6, r6, #0, #19
 800ab9e:	4335      	orrs	r5, r6
 800aba0:	6125      	str	r5, [r4, #16]
 800aba2:	e7cb      	b.n	800ab3c <USB_EP0StartXfer+0x80>
      if ((uint32_t)ep->dma_addr != 0U)
 800aba4:	690a      	ldr	r2, [r1, #16]
 800aba6:	b11a      	cbz	r2, 800abb0 <USB_EP0StartXfer+0xf4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aba8:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800abac:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800abb0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800abb4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800abb8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800abbc:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 800abc0:	e7a3      	b.n	800ab0a <USB_EP0StartXfer+0x4e>
      if ((uint32_t)ep->xfer_buff != 0U)
 800abc2:	68ca      	ldr	r2, [r1, #12]
 800abc4:	2a00      	cmp	r2, #0
 800abc6:	d09a      	beq.n	800aafe <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800abc8:	615a      	str	r2, [r3, #20]
 800abca:	e798      	b.n	800aafe <USB_EP0StartXfer+0x42>
 800abcc:	fff80000 	.word	0xfff80000
 800abd0:	e007ffff 	.word	0xe007ffff

0800abd4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800abd4:	b470      	push	{r4, r5, r6}
 800abd6:	f89d 400c 	ldrb.w	r4, [sp, #12]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pSrc = (uint32_t *)src;
  uint32_t count32b, i;

  if (dma == 0U)
 800abda:	b964      	cbnz	r4, 800abf6 <USB_WritePacket+0x22>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800abdc:	3303      	adds	r3, #3
 800abde:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 800abe0:	42ac      	cmp	r4, r5
 800abe2:	d208      	bcs.n	800abf6 <USB_WritePacket+0x22>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800abe4:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 800abe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abec:	f851 6b04 	ldr.w	r6, [r1], #4
 800abf0:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 800abf2:	3401      	adds	r4, #1
 800abf4:	e7f4      	b.n	800abe0 <USB_WritePacket+0xc>
      pSrc++;
    }
  }

  return HAL_OK;
}
 800abf6:	2000      	movs	r0, #0
 800abf8:	bc70      	pop	{r4, r5, r6}
 800abfa:	4770      	bx	lr

0800abfc <USB_EPStartXfer>:
{
 800abfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abfe:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 800ac00:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800ac02:	784c      	ldrb	r4, [r1, #1]
 800ac04:	2c01      	cmp	r4, #1
 800ac06:	d029      	beq.n	800ac5c <USB_EPStartXfer+0x60>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ac08:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800ac0c:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 800ac10:	6926      	ldr	r6, [r4, #16]
 800ac12:	4d7c      	ldr	r5, [pc, #496]	; (800ae04 <USB_EPStartXfer+0x208>)
 800ac14:	4035      	ands	r5, r6
 800ac16:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ac18:	6926      	ldr	r6, [r4, #16]
 800ac1a:	4d7b      	ldr	r5, [pc, #492]	; (800ae08 <USB_EPStartXfer+0x20c>)
 800ac1c:	4035      	ands	r5, r6
 800ac1e:	6125      	str	r5, [r4, #16]
    if (ep->xfer_len == 0U)
 800ac20:	694d      	ldr	r5, [r1, #20]
 800ac22:	2d00      	cmp	r5, #0
 800ac24:	f040 80bf 	bne.w	800ada6 <USB_EPStartXfer+0x1aa>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ac28:	6925      	ldr	r5, [r4, #16]
 800ac2a:	688e      	ldr	r6, [r1, #8]
 800ac2c:	f3c6 0612 	ubfx	r6, r6, #0, #19
 800ac30:	4335      	orrs	r5, r6
 800ac32:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac34:	6925      	ldr	r5, [r4, #16]
 800ac36:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800ac3a:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 800ac3c:	2a01      	cmp	r2, #1
 800ac3e:	f000 80c7 	beq.w	800add0 <USB_EPStartXfer+0x1d4>
    if (ep->type == EP_TYPE_ISOC)
 800ac42:	78ca      	ldrb	r2, [r1, #3]
 800ac44:	2a01      	cmp	r2, #1
 800ac46:	f000 80c9 	beq.w	800addc <USB_EPStartXfer+0x1e0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ac4a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800ac4e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800ac52:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800ac56:	2000      	movs	r0, #0
 800ac58:	b003      	add	sp, #12
 800ac5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 800ac5c:	694c      	ldr	r4, [r1, #20]
 800ac5e:	bb74      	cbnz	r4, 800acbe <USB_EPStartXfer+0xc2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ac60:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800ac64:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800ac68:	4d67      	ldr	r5, [pc, #412]	; (800ae08 <USB_EPStartXfer+0x20c>)
 800ac6a:	4035      	ands	r5, r6
 800ac6c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ac70:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800ac74:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800ac78:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ac7c:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800ac80:	4d60      	ldr	r5, [pc, #384]	; (800ae04 <USB_EPStartXfer+0x208>)
 800ac82:	4035      	ands	r5, r6
 800ac84:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 800ac88:	2a01      	cmp	r2, #1
 800ac8a:	d04a      	beq.n	800ad22 <USB_EPStartXfer+0x126>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac8c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800ac90:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800ac94:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800ac98:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800ac9c:	78cc      	ldrb	r4, [r1, #3]
 800ac9e:	2c01      	cmp	r4, #1
 800aca0:	d068      	beq.n	800ad74 <USB_EPStartXfer+0x178>
        if (ep->xfer_len > 0U)
 800aca2:	694b      	ldr	r3, [r1, #20]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d0d6      	beq.n	800ac56 <USB_EPStartXfer+0x5a>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aca8:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800acac:	7809      	ldrb	r1, [r1, #0]
 800acae:	f001 040f 	and.w	r4, r1, #15
 800acb2:	2101      	movs	r1, #1
 800acb4:	40a1      	lsls	r1, r4
 800acb6:	430a      	orrs	r2, r1
 800acb8:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 800acbc:	e7cb      	b.n	800ac56 <USB_EPStartXfer+0x5a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800acbe:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800acc2:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800acc6:	4d4f      	ldr	r5, [pc, #316]	; (800ae04 <USB_EPStartXfer+0x208>)
 800acc8:	4035      	ands	r5, r6
 800acca:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800acce:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800acd2:	4d4d      	ldr	r5, [pc, #308]	; (800ae08 <USB_EPStartXfer+0x20c>)
 800acd4:	4035      	ands	r5, r6
 800acd6:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800acda:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800acde:	694d      	ldr	r5, [r1, #20]
 800ace0:	688f      	ldr	r7, [r1, #8]
 800ace2:	443d      	add	r5, r7
 800ace4:	3d01      	subs	r5, #1
 800ace6:	fbb5 f5f7 	udiv	r5, r5, r7
 800acea:	4f48      	ldr	r7, [pc, #288]	; (800ae0c <USB_EPStartXfer+0x210>)
 800acec:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 800acf0:	4335      	orrs	r5, r6
 800acf2:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800acf6:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800acfa:	694e      	ldr	r6, [r1, #20]
 800acfc:	f3c6 0612 	ubfx	r6, r6, #0, #19
 800ad00:	4335      	orrs	r5, r6
 800ad02:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad06:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800ad0a:	78cd      	ldrb	r5, [r1, #3]
 800ad0c:	2d01      	cmp	r5, #1
 800ad0e:	d1bb      	bne.n	800ac88 <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ad10:	6925      	ldr	r5, [r4, #16]
 800ad12:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800ad16:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ad18:	6925      	ldr	r5, [r4, #16]
 800ad1a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ad1e:	6125      	str	r5, [r4, #16]
 800ad20:	e7b2      	b.n	800ac88 <USB_EPStartXfer+0x8c>
      if ((uint32_t)ep->dma_addr != 0U)
 800ad22:	690a      	ldr	r2, [r1, #16]
 800ad24:	b11a      	cbz	r2, 800ad2e <USB_EPStartXfer+0x132>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ad26:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800ad2a:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 800ad2e:	78ca      	ldrb	r2, [r1, #3]
 800ad30:	2a01      	cmp	r2, #1
 800ad32:	d008      	beq.n	800ad46 <USB_EPStartXfer+0x14a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ad34:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800ad38:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800ad3c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800ad40:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800ad44:	e787      	b.n	800ac56 <USB_EPStartXfer+0x5a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad46:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800ad4a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800ad4e:	d108      	bne.n	800ad62 <USB_EPStartXfer+0x166>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ad50:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800ad54:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 800ad58:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800ad5c:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 800ad60:	e7e8      	b.n	800ad34 <USB_EPStartXfer+0x138>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ad62:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800ad66:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 800ad6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ad6e:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 800ad72:	e7df      	b.n	800ad34 <USB_EPStartXfer+0x138>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad74:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 800ad78:	f414 7f80 	tst.w	r4, #256	; 0x100
 800ad7c:	d10c      	bne.n	800ad98 <USB_EPStartXfer+0x19c>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ad7e:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800ad82:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800ad86:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ad8a:	9200      	str	r2, [sp, #0]
 800ad8c:	8a8b      	ldrh	r3, [r1, #20]
 800ad8e:	780a      	ldrb	r2, [r1, #0]
 800ad90:	68c9      	ldr	r1, [r1, #12]
 800ad92:	f7ff ff1f 	bl	800abd4 <USB_WritePacket>
 800ad96:	e75e      	b.n	800ac56 <USB_EPStartXfer+0x5a>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ad98:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800ad9c:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800ada0:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 800ada4:	e7f1      	b.n	800ad8a <USB_EPStartXfer+0x18e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ada6:	688e      	ldr	r6, [r1, #8]
 800ada8:	4435      	add	r5, r6
 800adaa:	3d01      	subs	r5, #1
 800adac:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800adb0:	6926      	ldr	r6, [r4, #16]
 800adb2:	4f16      	ldr	r7, [pc, #88]	; (800ae0c <USB_EPStartXfer+0x210>)
 800adb4:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 800adb8:	433e      	orrs	r6, r7
 800adba:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800adbc:	6927      	ldr	r7, [r4, #16]
 800adbe:	688e      	ldr	r6, [r1, #8]
 800adc0:	b2ad      	uxth	r5, r5
 800adc2:	fb06 f505 	mul.w	r5, r6, r5
 800adc6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800adca:	433d      	orrs	r5, r7
 800adcc:	6125      	str	r5, [r4, #16]
 800adce:	e735      	b.n	800ac3c <USB_EPStartXfer+0x40>
      if ((uint32_t)ep->xfer_buff != 0U)
 800add0:	68ca      	ldr	r2, [r1, #12]
 800add2:	2a00      	cmp	r2, #0
 800add4:	f43f af35 	beq.w	800ac42 <USB_EPStartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800add8:	6162      	str	r2, [r4, #20]
 800adda:	e732      	b.n	800ac42 <USB_EPStartXfer+0x46>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800addc:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800ade0:	f412 7f80 	tst.w	r2, #256	; 0x100
 800ade4:	d106      	bne.n	800adf4 <USB_EPStartXfer+0x1f8>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ade6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800adea:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800adee:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800adf2:	e72a      	b.n	800ac4a <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800adf4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800adf8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800adfc:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800ae00:	e723      	b.n	800ac4a <USB_EPStartXfer+0x4e>
 800ae02:	bf00      	nop
 800ae04:	fff80000 	.word	0xfff80000
 800ae08:	e007ffff 	.word	0xe007ffff
 800ae0c:	1ff80000 	.word	0x1ff80000

0800ae10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ae10:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ae12:	3203      	adds	r2, #3
 800ae14:	0894      	lsrs	r4, r2, #2

  for (i = 0U; i < count32b; i++)
 800ae16:	2300      	movs	r3, #0
 800ae18:	42a3      	cmp	r3, r4
 800ae1a:	d206      	bcs.n	800ae2a <USB_ReadPacket+0x1a>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ae1c:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
 800ae20:	6812      	ldr	r2, [r2, #0]
 800ae22:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0U; i < count32b; i++)
 800ae26:	3301      	adds	r3, #1
 800ae28:	e7f6      	b.n	800ae18 <USB_ReadPacket+0x8>
    pDest++;
  }

  return ((void *)pDest);
}
 800ae2a:	4608      	mov	r0, r1
 800ae2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <USB_EPSetStall>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 800ae32:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 800ae34:	784a      	ldrb	r2, [r1, #1]
 800ae36:	2a01      	cmp	r2, #1
 800ae38:	d014      	beq.n	800ae64 <USB_EPSetStall+0x32>
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ae3a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800ae3e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800ae42:	2a00      	cmp	r2, #0
 800ae44:	db06      	blt.n	800ae54 <USB_EPSetStall+0x22>
 800ae46:	b12b      	cbz	r3, 800ae54 <USB_EPSetStall+0x22>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ae48:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ae4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ae50:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ae54:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ae58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ae5c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 800ae60:	2000      	movs	r0, #0
 800ae62:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ae64:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800ae68:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800ae6c:	2a00      	cmp	r2, #0
 800ae6e:	db06      	blt.n	800ae7e <USB_EPSetStall+0x4c>
 800ae70:	b12b      	cbz	r3, 800ae7e <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ae72:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800ae76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ae7a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ae7e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800ae82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ae86:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800ae8a:	e7e9      	b.n	800ae60 <USB_EPSetStall+0x2e>

0800ae8c <USB_EPClearStall>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 800ae8c:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 800ae8e:	784a      	ldrb	r2, [r1, #1]
 800ae90:	2a01      	cmp	r2, #1
 800ae92:	d00e      	beq.n	800aeb2 <USB_EPClearStall+0x26>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ae94:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800ae98:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ae9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aea0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aea4:	78cb      	ldrb	r3, [r1, #3]
 800aea6:	3b02      	subs	r3, #2
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d915      	bls.n	800aeda <USB_EPClearStall+0x4e>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }
  }
  return HAL_OK;
}
 800aeae:	2000      	movs	r0, #0
 800aeb0:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aeb2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800aeb6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800aeba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aebe:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aec2:	78cb      	ldrb	r3, [r1, #3]
 800aec4:	3b02      	subs	r3, #2
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d8f0      	bhi.n	800aeae <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aecc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800aed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aed4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800aed8:	e7e9      	b.n	800aeae <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aeda:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800aede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aee2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800aee6:	e7e2      	b.n	800aeae <USB_EPClearStall+0x22>

0800aee8 <USB_SetDevAddress>:
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aee8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800aeec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800aef0:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aef4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800aef8:	0109      	lsls	r1, r1, #4
 800aefa:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800aefe:	4319      	orrs	r1, r3
 800af00:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800

  return HAL_OK;
}
 800af04:	2000      	movs	r0, #0
 800af06:	4770      	bx	lr

0800af08 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800af08:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800af0a:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
 800af0c:	4010      	ands	r0, r2
 800af0e:	4770      	bx	lr

0800af10 <USB_ReadDevAllOutEpInterrupt>:
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800af10:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800af14:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800af18:	69c0      	ldr	r0, [r0, #28]
 800af1a:	4018      	ands	r0, r3

  return ((tmpreg & 0xffff0000U) >> 16);
}
 800af1c:	0c00      	lsrs	r0, r0, #16
 800af1e:	4770      	bx	lr

0800af20 <USB_ReadDevAllInEpInterrupt>:
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800af20:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800af24:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800af28:	69c0      	ldr	r0, [r0, #28]
 800af2a:	4018      	ands	r0, r3

  return ((tmpreg & 0xFFFFU));
}
 800af2c:	b280      	uxth	r0, r0
 800af2e:	4770      	bx	lr

0800af30 <USB_ReadDevOutEPInterrupt>:
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800af30:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800af34:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800af38:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800af3c:	6940      	ldr	r0, [r0, #20]

  return tmpreg;
}
 800af3e:	4010      	ands	r0, r2
 800af40:	4770      	bx	lr

0800af42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800af42:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800af44:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800af48:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800af4c:	f001 020f 	and.w	r2, r1, #15
 800af50:	40d3      	lsrs	r3, r2
 800af52:	01db      	lsls	r3, r3, #7
 800af54:	b2db      	uxtb	r3, r3
 800af56:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800af58:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800af5c:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800af60:	6880      	ldr	r0, [r0, #8]

  return tmpreg;
}
 800af62:	4018      	ands	r0, r3
 800af64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af68:	4770      	bx	lr

0800af6a <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
 800af6a:	6940      	ldr	r0, [r0, #20]
}
 800af6c:	f000 0001 	and.w	r0, r0, #1
 800af70:	4770      	bx	lr
	...

0800af74 <USB_ActivateSetup>:
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800af74:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800af78:	4b05      	ldr	r3, [pc, #20]	; (800af90 <USB_ActivateSetup+0x1c>)
 800af7a:	4013      	ands	r3, r2
 800af7c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800af80:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800af84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af88:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804

  return HAL_OK;
}
 800af8c:	2000      	movs	r0, #0
 800af8e:	4770      	bx	lr
 800af90:	fffff800 	.word	0xfffff800

0800af94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800af94:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800af96:	6c04      	ldr	r4, [r0, #64]	; 0x40

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800af98:	4b15      	ldr	r3, [pc, #84]	; (800aff0 <USB_EP0_OutStart+0x5c>)
 800af9a:	429c      	cmp	r4, r3
 800af9c:	d903      	bls.n	800afa6 <USB_EP0_OutStart+0x12>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af9e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	db16      	blt.n	800afd4 <USB_EP0_OutStart+0x40>
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800afa6:	2400      	movs	r4, #0
 800afa8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800afac:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800afb0:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800afb4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800afb8:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800afbc:	f044 0418 	orr.w	r4, r4, #24
 800afc0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800afc4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800afc8:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800afcc:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10

  if (dma == 1U)
 800afd0:	2901      	cmp	r1, #1
 800afd2:	d003      	beq.n	800afdc <USB_EP0_OutStart+0x48>
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
  }

  return HAL_OK;
}
 800afd4:	2000      	movs	r0, #0
 800afd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afda:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800afdc:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800afe0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800afe4:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800afe8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800afec:	e7f2      	b.n	800afd4 <USB_EP0_OutStart+0x40>
 800afee:	bf00      	nop
 800aff0:	4f54300a 	.word	0x4f54300a

0800aff4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800aff4:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800aff6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800affa:	b12b      	cbz	r3, 800b008 <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4798      	blx	r3
 800b000:	b900      	cbnz	r0, 800b004 <USBD_SetClassConfig+0x10>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800b002:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800b004:	2003      	movs	r0, #3
 800b006:	e7fc      	b.n	800b002 <USBD_SetClassConfig+0xe>
 800b008:	2003      	movs	r0, #3
 800b00a:	e7fa      	b.n	800b002 <USBD_SetClassConfig+0xe>

0800b00c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b00c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800b00e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	4798      	blx	r3
  return USBD_OK;
}
 800b016:	2000      	movs	r0, #0
 800b018:	bd08      	pop	{r3, pc}

0800b01a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b01a:	b538      	push	{r3, r4, r5, lr}
 800b01c:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b01e:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800b022:	4628      	mov	r0, r5
 800b024:	f000 f925 	bl	800b272 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800b028:	2301      	movs	r3, #1
 800b02a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800b02e:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800b032:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  
  switch (pdev->request.bmRequest & 0x1F) 
 800b036:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800b03a:	f001 031f 	and.w	r3, r1, #31
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d00e      	beq.n	800b060 <USBD_LL_SetupStage+0x46>
 800b042:	2b02      	cmp	r3, #2
 800b044:	d011      	beq.n	800b06a <USBD_LL_SetupStage+0x50>
 800b046:	b12b      	cbz	r3, 800b054 <USBD_LL_SetupStage+0x3a>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800b048:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800b04c:	4620      	mov	r0, r4
 800b04e:	f002 fdb1 	bl	800dbb4 <USBD_LL_StallEP>
    break;
 800b052:	e003      	b.n	800b05c <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800b054:	4629      	mov	r1, r5
 800b056:	4620      	mov	r0, r4
 800b058:	f000 fac6 	bl	800b5e8 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 800b05c:	2000      	movs	r0, #0
 800b05e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800b060:	4629      	mov	r1, r5
 800b062:	4620      	mov	r0, r4
 800b064:	f000 faf8 	bl	800b658 <USBD_StdItfReq>
    break;
 800b068:	e7f8      	b.n	800b05c <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 800b06a:	4629      	mov	r1, r5
 800b06c:	4620      	mov	r0, r4
 800b06e:	f000 fb27 	bl	800b6c0 <USBD_StdEPReq>
    break;
 800b072:	e7f3      	b.n	800b05c <USBD_LL_SetupStage+0x42>

0800b074 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800b074:	b510      	push	{r4, lr}
 800b076:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800b078:	bb21      	cbnz	r1, 800b0c4 <USBD_LL_DataOutStage+0x50>
 800b07a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b07c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800b080:	2a03      	cmp	r2, #3
 800b082:	d001      	beq.n	800b088 <USBD_LL_DataOutStage+0x14>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800b084:	2000      	movs	r0, #0
 800b086:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 800b088:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 800b08c:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800b090:	4291      	cmp	r1, r2
 800b092:	d80b      	bhi.n	800b0ac <USBD_LL_DataOutStage+0x38>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800b094:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b098:	691b      	ldr	r3, [r3, #16]
 800b09a:	b11b      	cbz	r3, 800b0a4 <USBD_LL_DataOutStage+0x30>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b09c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800b0a0:	2a03      	cmp	r2, #3
 800b0a2:	d00d      	beq.n	800b0c0 <USBD_LL_DataOutStage+0x4c>
        USBD_CtlSendStatus(pdev);
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f000 fc31 	bl	800b90c <USBD_CtlSendStatus>
 800b0aa:	e7eb      	b.n	800b084 <USBD_LL_DataOutStage+0x10>
        pep->rem_length -=  pep->maxpacket;
 800b0ac:	1a89      	subs	r1, r1, r2
 800b0ae:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        USBD_CtlContinueRx (pdev, 
 800b0b2:	428a      	cmp	r2, r1
 800b0b4:	bf28      	it	cs
 800b0b6:	460a      	movcs	r2, r1
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	f000 fc1f 	bl	800b8fc <USBD_CtlContinueRx>
 800b0be:	e7e1      	b.n	800b084 <USBD_LL_DataOutStage+0x10>
          pdev->pClass->EP0_RxReady(pdev); 
 800b0c0:	4798      	blx	r3
 800b0c2:	e7ef      	b.n	800b0a4 <USBD_LL_DataOutStage+0x30>
 800b0c4:	460a      	mov	r2, r1
  else if((pdev->pClass->DataOut != NULL)&&
 800b0c6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b0ca:	699b      	ldr	r3, [r3, #24]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d0d9      	beq.n	800b084 <USBD_LL_DataOutStage+0x10>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0d0:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if((pdev->pClass->DataOut != NULL)&&
 800b0d4:	2903      	cmp	r1, #3
 800b0d6:	d1d5      	bne.n	800b084 <USBD_LL_DataOutStage+0x10>
    pdev->pClass->DataOut(pdev, epnum); 
 800b0d8:	4611      	mov	r1, r2
 800b0da:	4798      	blx	r3
 800b0dc:	e7d2      	b.n	800b084 <USBD_LL_DataOutStage+0x10>

0800b0de <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800b0de:	b510      	push	{r4, lr}
 800b0e0:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800b0e2:	2900      	cmp	r1, #0
 800b0e4:	d146      	bne.n	800b174 <USBD_LL_DataInStage+0x96>
 800b0e6:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800b0e8:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800b0ec:	2a02      	cmp	r2, #2
 800b0ee:	d005      	beq.n	800b0fc <USBD_LL_DataInStage+0x1e>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800b0f0:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d039      	beq.n	800b16c <USBD_LL_DataInStage+0x8e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 800b0fc:	69c1      	ldr	r1, [r0, #28]
 800b0fe:	6a02      	ldr	r2, [r0, #32]
 800b100:	4291      	cmp	r1, r2
 800b102:	d817      	bhi.n	800b134 <USBD_LL_DataInStage+0x56>
        if((pep->total_length % pep->maxpacket == 0) &&
 800b104:	6981      	ldr	r1, [r0, #24]
 800b106:	fbb1 f3f2 	udiv	r3, r1, r2
 800b10a:	fb02 1313 	mls	r3, r2, r3, r1
 800b10e:	b92b      	cbnz	r3, 800b11c <USBD_LL_DataInStage+0x3e>
 800b110:	428a      	cmp	r2, r1
 800b112:	d803      	bhi.n	800b11c <USBD_LL_DataInStage+0x3e>
             (pep->total_length < pdev->ep0_data_len ))
 800b114:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
           (pep->total_length >= pep->maxpacket) &&
 800b118:	4299      	cmp	r1, r3
 800b11a:	d317      	bcc.n	800b14c <USBD_LL_DataInStage+0x6e>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800b11c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	b11b      	cbz	r3, 800b12c <USBD_LL_DataInStage+0x4e>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b124:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800b128:	2a03      	cmp	r2, #3
 800b12a:	d01c      	beq.n	800b166 <USBD_LL_DataInStage+0x88>
          USBD_CtlReceiveStatus(pdev);
 800b12c:	4620      	mov	r0, r4
 800b12e:	f000 fbf8 	bl	800b922 <USBD_CtlReceiveStatus>
 800b132:	e7dd      	b.n	800b0f0 <USBD_LL_DataInStage+0x12>
        pep->rem_length -=  pep->maxpacket;
 800b134:	1a8a      	subs	r2, r1, r2
 800b136:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 800b138:	4619      	mov	r1, r3
 800b13a:	f000 fbd7 	bl	800b8ec <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 800b13e:	2300      	movs	r3, #0
 800b140:	461a      	mov	r2, r3
 800b142:	4619      	mov	r1, r3
 800b144:	4620      	mov	r0, r4
 800b146:	f002 fd68 	bl	800dc1a <USBD_LL_PrepareReceive>
 800b14a:	e7d1      	b.n	800b0f0 <USBD_LL_DataInStage+0x12>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800b14c:	2200      	movs	r2, #0
 800b14e:	4611      	mov	r1, r2
 800b150:	f000 fbcc 	bl	800b8ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800b154:	2100      	movs	r1, #0
 800b156:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
        USBD_LL_PrepareReceive (pdev,
 800b15a:	460b      	mov	r3, r1
 800b15c:	460a      	mov	r2, r1
 800b15e:	4620      	mov	r0, r4
 800b160:	f002 fd5b 	bl	800dc1a <USBD_LL_PrepareReceive>
 800b164:	e7c4      	b.n	800b0f0 <USBD_LL_DataInStage+0x12>
            pdev->pClass->EP0_TxSent(pdev); 
 800b166:	4620      	mov	r0, r4
 800b168:	4798      	blx	r3
 800b16a:	e7df      	b.n	800b12c <USBD_LL_DataInStage+0x4e>
      pdev->dev_test_mode = 0;
 800b16c:	2300      	movs	r3, #0
 800b16e:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
 800b172:	e7c1      	b.n	800b0f8 <USBD_LL_DataInStage+0x1a>
 800b174:	460a      	mov	r2, r1
  else if((pdev->pClass->DataIn != NULL)&& 
 800b176:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b17a:	695b      	ldr	r3, [r3, #20]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d0bb      	beq.n	800b0f8 <USBD_LL_DataInStage+0x1a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b180:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if((pdev->pClass->DataIn != NULL)&& 
 800b184:	2903      	cmp	r1, #3
 800b186:	d1b7      	bne.n	800b0f8 <USBD_LL_DataInStage+0x1a>
    pdev->pClass->DataIn(pdev, epnum); 
 800b188:	4611      	mov	r1, r2
 800b18a:	4798      	blx	r3
 800b18c:	e7b4      	b.n	800b0f8 <USBD_LL_DataInStage+0x1a>

0800b18e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800b18e:	b538      	push	{r3, r4, r5, lr}
 800b190:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800b192:	2340      	movs	r3, #64	; 0x40
 800b194:	2200      	movs	r2, #0
 800b196:	4611      	mov	r1, r2
 800b198:	f002 fd02 	bl	800dba0 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b19c:	2540      	movs	r5, #64	; 0x40
 800b19e:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800b1a2:	462b      	mov	r3, r5
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	2180      	movs	r1, #128	; 0x80
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f002 fcf9 	bl	800dba0 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b1ae:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
  
  if (pdev->pClassData) 
 800b1b6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800b1ba:	b12b      	cbz	r3, 800b1c8 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800b1bc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	7921      	ldrb	r1, [r4, #4]
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800b1c8:	2000      	movs	r0, #0
 800b1ca:	bd38      	pop	{r3, r4, r5, pc}

0800b1cc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800b1cc:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	4770      	bx	lr

0800b1d2 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800b1d2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b1d6:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b1da:	2304      	movs	r3, #4
 800b1dc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  return USBD_OK;
}
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	4770      	bx	lr

0800b1e4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 800b1e4:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800b1e8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  return USBD_OK;
}
 800b1ec:	2000      	movs	r0, #0
 800b1ee:	4770      	bx	lr

0800b1f0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800b1f0:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1f2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b1f6:	2b03      	cmp	r3, #3
 800b1f8:	d001      	beq.n	800b1fe <USBD_LL_SOF+0xe>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 800b1fa:	2000      	movs	r0, #0
 800b1fc:	bd08      	pop	{r3, pc}
    if(pdev->pClass->SOF != NULL)
 800b1fe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b202:	69db      	ldr	r3, [r3, #28]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d0f8      	beq.n	800b1fa <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 800b208:	4798      	blx	r3
 800b20a:	e7f6      	b.n	800b1fa <USBD_LL_SOF+0xa>

0800b20c <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800b20c:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800b20e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b212:	2b03      	cmp	r3, #3
 800b214:	d001      	beq.n	800b21a <USBD_LL_IsoINIncomplete+0xe>
    {
      pdev->pClass->IsoINIncomplete(pdev,epnum);
    }
  }
  return USBD_OK;
}
 800b216:	2000      	movs	r0, #0
 800b218:	bd08      	pop	{r3, pc}
    if(pdev->pClass->IsoINIncomplete != NULL)
 800b21a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b21e:	6a1b      	ldr	r3, [r3, #32]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d0f8      	beq.n	800b216 <USBD_LL_IsoINIncomplete+0xa>
      pdev->pClass->IsoINIncomplete(pdev,epnum);
 800b224:	4798      	blx	r3
 800b226:	e7f6      	b.n	800b216 <USBD_LL_IsoINIncomplete+0xa>

0800b228 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800b228:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800b22a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b22e:	2b03      	cmp	r3, #3
 800b230:	d001      	beq.n	800b236 <USBD_LL_IsoOUTIncomplete+0xe>
    {
      pdev->pClass->IsoOUTIncomplete(pdev,epnum);
    }
  }
  return USBD_OK;
}
 800b232:	2000      	movs	r0, #0
 800b234:	bd08      	pop	{r3, pc}
    if(pdev->pClass->IsoOUTIncomplete != NULL)
 800b236:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d0f8      	beq.n	800b232 <USBD_LL_IsoOUTIncomplete+0xa>
      pdev->pClass->IsoOUTIncomplete(pdev,epnum);
 800b240:	4798      	blx	r3
 800b242:	e7f6      	b.n	800b232 <USBD_LL_IsoOUTIncomplete+0xa>

0800b244 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 800b244:	2000      	movs	r0, #0
 800b246:	4770      	bx	lr

0800b248 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800b248:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b24a:	2201      	movs	r2, #1
 800b24c:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800b250:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800b254:	6852      	ldr	r2, [r2, #4]
 800b256:	7901      	ldrb	r1, [r0, #4]
 800b258:	4790      	blx	r2
   
  return USBD_OK;
}
 800b25a:	2000      	movs	r0, #0
 800b25c:	bd08      	pop	{r3, pc}

0800b25e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b25e:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b260:	884b      	ldrh	r3, [r1, #2]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d000      	beq.n	800b268 <USBD_SetFeature+0xa>
  {
    pdev->dev_remote_wakeup = 1U;
    (void)USBD_CtlSendStatus(pdev);
  }
}
 800b266:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800b268:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b26c:	f000 fb4e 	bl	800b90c <USBD_CtlSendStatus>
}
 800b270:	e7f9      	b.n	800b266 <USBD_SetFeature+0x8>

0800b272 <USBD_ParseSetupRequest>:

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  uint8_t *pbuff = pdata;

  req->bmRequest = *(uint8_t *)(pbuff);
 800b272:	780b      	ldrb	r3, [r1, #0]
 800b274:	7003      	strb	r3, [r0, #0]

  pbuff++;
  req->bRequest = *(uint8_t *)(pbuff);
 800b276:	784b      	ldrb	r3, [r1, #1]
 800b278:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800b27a:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800b27c:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b27e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  req->wValue = SWAPBYTE(pbuff);
 800b282:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800b284:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800b286:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b288:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  pbuff++;
  req->wIndex = SWAPBYTE(pbuff);
 800b28c:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800b28e:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800b290:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b292:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  pbuff++;
  req->wLength = SWAPBYTE(pbuff);
 800b296:	80c3      	strh	r3, [r0, #6]
}
 800b298:	4770      	bx	lr

0800b29a <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b29a:	b510      	push	{r4, lr}
 800b29c:	4604      	mov	r4, r0
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b29e:	2180      	movs	r1, #128	; 0x80
 800b2a0:	f002 fc88 	bl	800dbb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f002 fc84 	bl	800dbb4 <USBD_LL_StallEP>
}
 800b2ac:	bd10      	pop	{r4, pc}

0800b2ae <USBD_GetDescriptor>:
{
 800b2ae:	b530      	push	{r4, r5, lr}
 800b2b0:	b083      	sub	sp, #12
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800b2bc:	884a      	ldrh	r2, [r1, #2]
 800b2be:	0a13      	lsrs	r3, r2, #8
 800b2c0:	3b01      	subs	r3, #1
 800b2c2:	2b06      	cmp	r3, #6
 800b2c4:	f200 80ab 	bhi.w	800b41e <USBD_GetDescriptor+0x170>
 800b2c8:	e8df f003 	tbb	[pc, r3]
 800b2cc:	a9331f04 	.word	0xa9331f04
 800b2d0:	8da9      	.short	0x8da9
 800b2d2:	9a          	.byte	0x9a
 800b2d3:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b2d4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f10d 0106 	add.w	r1, sp, #6
 800b2de:	7c00      	ldrb	r0, [r0, #16]
 800b2e0:	4798      	blx	r3
    if (req->wLength != 0U)
 800b2e2:	88ea      	ldrh	r2, [r5, #6]
 800b2e4:	2a00      	cmp	r2, #0
 800b2e6:	f000 80a3 	beq.w	800b430 <USBD_GetDescriptor+0x182>
      if (len != 0U)
 800b2ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f000 8099 	beq.w	800b426 <USBD_GetDescriptor+0x178>
        len = MIN(len, req->wLength);
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	bf28      	it	cs
 800b2f8:	461a      	movcs	r2, r3
 800b2fa:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b2fe:	4601      	mov	r1, r0
 800b300:	4620      	mov	r0, r4
 800b302:	f000 fae6 	bl	800b8d2 <USBD_CtlSendData>
}
 800b306:	b003      	add	sp, #12
 800b308:	bd30      	pop	{r4, r5, pc}
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b30a:	7c03      	ldrb	r3, [r0, #16]
 800b30c:	b943      	cbnz	r3, 800b320 <USBD_GetDescriptor+0x72>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b30e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b314:	f10d 0006 	add.w	r0, sp, #6
 800b318:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b31a:	2302      	movs	r3, #2
 800b31c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800b31e:	e7e0      	b.n	800b2e2 <USBD_GetDescriptor+0x34>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b320:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b326:	f10d 0006 	add.w	r0, sp, #6
 800b32a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b32c:	2302      	movs	r3, #2
 800b32e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800b330:	e7d7      	b.n	800b2e2 <USBD_GetDescriptor+0x34>
    switch ((uint8_t)(req->wValue))
 800b332:	b2d2      	uxtb	r2, r2
 800b334:	2a05      	cmp	r2, #5
 800b336:	d852      	bhi.n	800b3de <USBD_GetDescriptor+0x130>
 800b338:	e8df f002 	tbb	[pc, r2]
 800b33c:	2a1d1003 	.word	0x2a1d1003
 800b340:	4437      	.short	0x4437
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b342:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	b123      	cbz	r3, 800b354 <USBD_GetDescriptor+0xa6>
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b34a:	f10d 0106 	add.w	r1, sp, #6
 800b34e:	7c00      	ldrb	r0, [r0, #16]
 800b350:	4798      	blx	r3
  if (err != 0U)
 800b352:	e7c6      	b.n	800b2e2 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800b354:	4629      	mov	r1, r5
 800b356:	f7ff ffa0 	bl	800b29a <USBD_CtlError>
  if (err != 0U)
 800b35a:	e7d4      	b.n	800b306 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b35c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	b123      	cbz	r3, 800b36e <USBD_GetDescriptor+0xc0>
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b364:	f10d 0106 	add.w	r1, sp, #6
 800b368:	7c00      	ldrb	r0, [r0, #16]
 800b36a:	4798      	blx	r3
  if (err != 0U)
 800b36c:	e7b9      	b.n	800b2e2 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800b36e:	4629      	mov	r1, r5
 800b370:	f7ff ff93 	bl	800b29a <USBD_CtlError>
  if (err != 0U)
 800b374:	e7c7      	b.n	800b306 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b376:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b37a:	68db      	ldr	r3, [r3, #12]
 800b37c:	b123      	cbz	r3, 800b388 <USBD_GetDescriptor+0xda>
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b37e:	f10d 0106 	add.w	r1, sp, #6
 800b382:	7c00      	ldrb	r0, [r0, #16]
 800b384:	4798      	blx	r3
  if (err != 0U)
 800b386:	e7ac      	b.n	800b2e2 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800b388:	4629      	mov	r1, r5
 800b38a:	f7ff ff86 	bl	800b29a <USBD_CtlError>
  if (err != 0U)
 800b38e:	e7ba      	b.n	800b306 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b390:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	b123      	cbz	r3, 800b3a2 <USBD_GetDescriptor+0xf4>
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b398:	f10d 0106 	add.w	r1, sp, #6
 800b39c:	7c00      	ldrb	r0, [r0, #16]
 800b39e:	4798      	blx	r3
  if (err != 0U)
 800b3a0:	e79f      	b.n	800b2e2 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	f7ff ff79 	bl	800b29a <USBD_CtlError>
  if (err != 0U)
 800b3a8:	e7ad      	b.n	800b306 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b3aa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b3ae:	695b      	ldr	r3, [r3, #20]
 800b3b0:	b123      	cbz	r3, 800b3bc <USBD_GetDescriptor+0x10e>
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b3b2:	f10d 0106 	add.w	r1, sp, #6
 800b3b6:	7c00      	ldrb	r0, [r0, #16]
 800b3b8:	4798      	blx	r3
  if (err != 0U)
 800b3ba:	e792      	b.n	800b2e2 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800b3bc:	4629      	mov	r1, r5
 800b3be:	f7ff ff6c 	bl	800b29a <USBD_CtlError>
  if (err != 0U)
 800b3c2:	e7a0      	b.n	800b306 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3c4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b3c8:	699b      	ldr	r3, [r3, #24]
 800b3ca:	b123      	cbz	r3, 800b3d6 <USBD_GetDescriptor+0x128>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b3cc:	f10d 0106 	add.w	r1, sp, #6
 800b3d0:	7c00      	ldrb	r0, [r0, #16]
 800b3d2:	4798      	blx	r3
  if (err != 0U)
 800b3d4:	e785      	b.n	800b2e2 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	f7ff ff5f 	bl	800b29a <USBD_CtlError>
  if (err != 0U)
 800b3dc:	e793      	b.n	800b306 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800b3de:	4629      	mov	r1, r5
 800b3e0:	f7ff ff5b 	bl	800b29a <USBD_CtlError>
  if (err != 0U)
 800b3e4:	e78f      	b.n	800b306 <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3e6:	7c03      	ldrb	r3, [r0, #16]
 800b3e8:	b933      	cbnz	r3, 800b3f8 <USBD_GetDescriptor+0x14a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b3ea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b3ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f0:	f10d 0006 	add.w	r0, sp, #6
 800b3f4:	4798      	blx	r3
  if (err != 0U)
 800b3f6:	e774      	b.n	800b2e2 <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	f7ff ff4e 	bl	800b29a <USBD_CtlError>
  if (err != 0U)
 800b3fe:	e782      	b.n	800b306 <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b400:	7c03      	ldrb	r3, [r0, #16]
 800b402:	b943      	cbnz	r3, 800b416 <USBD_GetDescriptor+0x168>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b404:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40a:	f10d 0006 	add.w	r0, sp, #6
 800b40e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b410:	2307      	movs	r3, #7
 800b412:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800b414:	e765      	b.n	800b2e2 <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 800b416:	4629      	mov	r1, r5
 800b418:	f7ff ff3f 	bl	800b29a <USBD_CtlError>
  if (err != 0U)
 800b41c:	e773      	b.n	800b306 <USBD_GetDescriptor+0x58>
    USBD_CtlError(pdev, req);
 800b41e:	4629      	mov	r1, r5
 800b420:	f7ff ff3b 	bl	800b29a <USBD_CtlError>
    return;
 800b424:	e76f      	b.n	800b306 <USBD_GetDescriptor+0x58>
        USBD_CtlError(pdev, req);
 800b426:	4629      	mov	r1, r5
 800b428:	4620      	mov	r0, r4
 800b42a:	f7ff ff36 	bl	800b29a <USBD_CtlError>
 800b42e:	e76a      	b.n	800b306 <USBD_GetDescriptor+0x58>
      (void)USBD_CtlSendStatus(pdev);
 800b430:	4620      	mov	r0, r4
 800b432:	f000 fa6b 	bl	800b90c <USBD_CtlSendStatus>
 800b436:	e766      	b.n	800b306 <USBD_GetDescriptor+0x58>

0800b438 <USBD_SetAddress>:
{
 800b438:	b538      	push	{r3, r4, r5, lr}
 800b43a:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b43c:	888b      	ldrh	r3, [r1, #4]
 800b43e:	b9f3      	cbnz	r3, 800b47e <USBD_SetAddress+0x46>
 800b440:	88cb      	ldrh	r3, [r1, #6]
 800b442:	b9e3      	cbnz	r3, 800b47e <USBD_SetAddress+0x46>
 800b444:	884b      	ldrh	r3, [r1, #2]
 800b446:	2b7f      	cmp	r3, #127	; 0x7f
 800b448:	d819      	bhi.n	800b47e <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b44a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b44e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b452:	2b03      	cmp	r3, #3
 800b454:	d00c      	beq.n	800b470 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 800b456:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b45a:	4629      	mov	r1, r5
 800b45c:	f002 fbcf 	bl	800dbfe <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b460:	4620      	mov	r0, r4
 800b462:	f000 fa53 	bl	800b90c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800b466:	b135      	cbz	r5, 800b476 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b468:	2302      	movs	r3, #2
 800b46a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800b46e:	e009      	b.n	800b484 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 800b470:	f7ff ff13 	bl	800b29a <USBD_CtlError>
 800b474:	e006      	b.n	800b484 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b476:	2301      	movs	r3, #1
 800b478:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800b47c:	e002      	b.n	800b484 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 800b47e:	4620      	mov	r0, r4
 800b480:	f7ff ff0b 	bl	800b29a <USBD_CtlError>
}
 800b484:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b488 <USBD_SetConfig>:
{
 800b488:	b570      	push	{r4, r5, r6, lr}
 800b48a:	4604      	mov	r4, r0
 800b48c:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800b48e:	788d      	ldrb	r5, [r1, #2]
 800b490:	4b2d      	ldr	r3, [pc, #180]	; (800b548 <USBD_SetConfig+0xc0>)
 800b492:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b494:	2d01      	cmp	r5, #1
 800b496:	d80f      	bhi.n	800b4b8 <USBD_SetConfig+0x30>
  switch (pdev->dev_state)
 800b498:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b49c:	2b02      	cmp	r3, #2
 800b49e:	d00f      	beq.n	800b4c0 <USBD_SetConfig+0x38>
 800b4a0:	2b03      	cmp	r3, #3
 800b4a2:	d023      	beq.n	800b4ec <USBD_SetConfig+0x64>
    USBD_CtlError(pdev, req);
 800b4a4:	f7ff fef9 	bl	800b29a <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b4a8:	4b27      	ldr	r3, [pc, #156]	; (800b548 <USBD_SetConfig+0xc0>)
 800b4aa:	7819      	ldrb	r1, [r3, #0]
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f7ff fdad 	bl	800b00c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b4b2:	2503      	movs	r5, #3
}
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800b4b8:	f7ff feef 	bl	800b29a <USBD_CtlError>
    return USBD_FAIL;
 800b4bc:	2503      	movs	r5, #3
 800b4be:	e7f9      	b.n	800b4b4 <USBD_SetConfig+0x2c>
    if (cfgidx != 0U)
 800b4c0:	b18d      	cbz	r5, 800b4e6 <USBD_SetConfig+0x5e>
      pdev->dev_config = cfgidx;
 800b4c2:	6045      	str	r5, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b4c4:	4629      	mov	r1, r5
 800b4c6:	f7ff fd95 	bl	800aff4 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800b4ca:	4605      	mov	r5, r0
 800b4cc:	b120      	cbz	r0, 800b4d8 <USBD_SetConfig+0x50>
        USBD_CtlError(pdev, req);
 800b4ce:	4631      	mov	r1, r6
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f7ff fee2 	bl	800b29a <USBD_CtlError>
 800b4d6:	e7ed      	b.n	800b4b4 <USBD_SetConfig+0x2c>
        (void)USBD_CtlSendStatus(pdev);
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f000 fa17 	bl	800b90c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800b4e4:	e7e6      	b.n	800b4b4 <USBD_SetConfig+0x2c>
      (void)USBD_CtlSendStatus(pdev);
 800b4e6:	f000 fa11 	bl	800b90c <USBD_CtlSendStatus>
 800b4ea:	e7e3      	b.n	800b4b4 <USBD_SetConfig+0x2c>
    if (cfgidx == 0U)
 800b4ec:	b1cd      	cbz	r5, 800b522 <USBD_SetConfig+0x9a>
    else if (cfgidx != pdev->dev_config)
 800b4ee:	6841      	ldr	r1, [r0, #4]
 800b4f0:	428d      	cmp	r5, r1
 800b4f2:	d025      	beq.n	800b540 <USBD_SetConfig+0xb8>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b4f4:	b2c9      	uxtb	r1, r1
 800b4f6:	f7ff fd89 	bl	800b00c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800b4fa:	4b13      	ldr	r3, [pc, #76]	; (800b548 <USBD_SetConfig+0xc0>)
 800b4fc:	7819      	ldrb	r1, [r3, #0]
 800b4fe:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b500:	4620      	mov	r0, r4
 800b502:	f7ff fd77 	bl	800aff4 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800b506:	4605      	mov	r5, r0
 800b508:	b1b0      	cbz	r0, 800b538 <USBD_SetConfig+0xb0>
        USBD_CtlError(pdev, req);
 800b50a:	4631      	mov	r1, r6
 800b50c:	4620      	mov	r0, r4
 800b50e:	f7ff fec4 	bl	800b29a <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b512:	7921      	ldrb	r1, [r4, #4]
 800b514:	4620      	mov	r0, r4
 800b516:	f7ff fd79 	bl	800b00c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b51a:	2302      	movs	r3, #2
 800b51c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800b520:	e7c8      	b.n	800b4b4 <USBD_SetConfig+0x2c>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b522:	2302      	movs	r3, #2
 800b524:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800b528:	6045      	str	r5, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b52a:	4629      	mov	r1, r5
 800b52c:	f7ff fd6e 	bl	800b00c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b530:	4620      	mov	r0, r4
 800b532:	f000 f9eb 	bl	800b90c <USBD_CtlSendStatus>
 800b536:	e7bd      	b.n	800b4b4 <USBD_SetConfig+0x2c>
        (void)USBD_CtlSendStatus(pdev);
 800b538:	4620      	mov	r0, r4
 800b53a:	f000 f9e7 	bl	800b90c <USBD_CtlSendStatus>
 800b53e:	e7b9      	b.n	800b4b4 <USBD_SetConfig+0x2c>
      (void)USBD_CtlSendStatus(pdev);
 800b540:	f000 f9e4 	bl	800b90c <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800b544:	2500      	movs	r5, #0
 800b546:	e7b5      	b.n	800b4b4 <USBD_SetConfig+0x2c>
 800b548:	200006c0 	.word	0x200006c0

0800b54c <USBD_GetConfig>:
{
 800b54c:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800b54e:	88cb      	ldrh	r3, [r1, #6]
 800b550:	2b01      	cmp	r3, #1
 800b552:	d10a      	bne.n	800b56a <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 800b554:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b558:	2b02      	cmp	r3, #2
 800b55a:	d909      	bls.n	800b570 <USBD_GetConfig+0x24>
 800b55c:	2b03      	cmp	r3, #3
 800b55e:	d109      	bne.n	800b574 <USBD_GetConfig+0x28>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b560:	2201      	movs	r2, #1
 800b562:	1d01      	adds	r1, r0, #4
 800b564:	f000 f9b5 	bl	800b8d2 <USBD_CtlSendData>
      break;
 800b568:	e001      	b.n	800b56e <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 800b56a:	f7ff fe96 	bl	800b29a <USBD_CtlError>
}
 800b56e:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800b570:	b25b      	sxtb	r3, r3
 800b572:	b913      	cbnz	r3, 800b57a <USBD_GetConfig+0x2e>
      USBD_CtlError(pdev, req);
 800b574:	f7ff fe91 	bl	800b29a <USBD_CtlError>
}
 800b578:	e7f9      	b.n	800b56e <USBD_GetConfig+0x22>
      pdev->dev_default_config = 0U;
 800b57a:	4601      	mov	r1, r0
 800b57c:	2300      	movs	r3, #0
 800b57e:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b582:	2201      	movs	r2, #1
 800b584:	f000 f9a5 	bl	800b8d2 <USBD_CtlSendData>
      break;
 800b588:	e7f1      	b.n	800b56e <USBD_GetConfig+0x22>

0800b58a <USBD_GetStatus>:
{
 800b58a:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800b58c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b590:	3b01      	subs	r3, #1
 800b592:	2b02      	cmp	r3, #2
 800b594:	d812      	bhi.n	800b5bc <USBD_GetStatus+0x32>
    if (req->wLength != 0x2U)
 800b596:	88cb      	ldrh	r3, [r1, #6]
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d10c      	bne.n	800b5b6 <USBD_GetStatus+0x2c>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b59c:	2301      	movs	r3, #1
 800b59e:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 800b5a0:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800b5a4:	b10b      	cbz	r3, 800b5aa <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b5aa:	2202      	movs	r2, #2
 800b5ac:	f100 010c 	add.w	r1, r0, #12
 800b5b0:	f000 f98f 	bl	800b8d2 <USBD_CtlSendData>
}
 800b5b4:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 800b5b6:	f7ff fe70 	bl	800b29a <USBD_CtlError>
      break;
 800b5ba:	e7fb      	b.n	800b5b4 <USBD_GetStatus+0x2a>
    USBD_CtlError(pdev, req);
 800b5bc:	f7ff fe6d 	bl	800b29a <USBD_CtlError>
}
 800b5c0:	e7f8      	b.n	800b5b4 <USBD_GetStatus+0x2a>

0800b5c2 <USBD_ClrFeature>:
{
 800b5c2:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800b5c4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	2b02      	cmp	r3, #2
 800b5cc:	d809      	bhi.n	800b5e2 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5ce:	884b      	ldrh	r3, [r1, #2]
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d000      	beq.n	800b5d6 <USBD_ClrFeature+0x14>
}
 800b5d4:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b5dc:	f000 f996 	bl	800b90c <USBD_CtlSendStatus>
 800b5e0:	e7f8      	b.n	800b5d4 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800b5e2:	f7ff fe5a 	bl	800b29a <USBD_CtlError>
}
 800b5e6:	e7f5      	b.n	800b5d4 <USBD_ClrFeature+0x12>

0800b5e8 <USBD_StdDevReq>:
{
 800b5e8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5ea:	780c      	ldrb	r4, [r1, #0]
 800b5ec:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800b5f0:	2c20      	cmp	r4, #32
 800b5f2:	d006      	beq.n	800b602 <USBD_StdDevReq+0x1a>
 800b5f4:	2c40      	cmp	r4, #64	; 0x40
 800b5f6:	d004      	beq.n	800b602 <USBD_StdDevReq+0x1a>
 800b5f8:	b154      	cbz	r4, 800b610 <USBD_StdDevReq+0x28>
    USBD_CtlError(pdev, req);
 800b5fa:	f7ff fe4e 	bl	800b29a <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b5fe:	2400      	movs	r4, #0
    break;
 800b600:	e004      	b.n	800b60c <USBD_StdDevReq+0x24>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b602:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	4798      	blx	r3
 800b60a:	4604      	mov	r4, r0
}
 800b60c:	4620      	mov	r0, r4
 800b60e:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 800b610:	784d      	ldrb	r5, [r1, #1]
 800b612:	2d09      	cmp	r5, #9
 800b614:	d81d      	bhi.n	800b652 <USBD_StdDevReq+0x6a>
 800b616:	e8df f005 	tbb	[pc, r5]
 800b61a:	1912      	.short	0x1912
 800b61c:	081c161c 	.word	0x081c161c
 800b620:	0b0f1c05 	.word	0x0b0f1c05
      USBD_GetDescriptor(pdev, req);
 800b624:	f7ff fe43 	bl	800b2ae <USBD_GetDescriptor>
      break;
 800b628:	e7f0      	b.n	800b60c <USBD_StdDevReq+0x24>
      USBD_SetAddress(pdev, req);
 800b62a:	f7ff ff05 	bl	800b438 <USBD_SetAddress>
      break;
 800b62e:	e7ed      	b.n	800b60c <USBD_StdDevReq+0x24>
      ret = USBD_SetConfig(pdev, req);
 800b630:	f7ff ff2a 	bl	800b488 <USBD_SetConfig>
 800b634:	4604      	mov	r4, r0
      break;
 800b636:	e7e9      	b.n	800b60c <USBD_StdDevReq+0x24>
      USBD_GetConfig(pdev, req);
 800b638:	f7ff ff88 	bl	800b54c <USBD_GetConfig>
      break;
 800b63c:	e7e6      	b.n	800b60c <USBD_StdDevReq+0x24>
      USBD_GetStatus(pdev, req);
 800b63e:	f7ff ffa4 	bl	800b58a <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800b642:	462c      	mov	r4, r5
      break;
 800b644:	e7e2      	b.n	800b60c <USBD_StdDevReq+0x24>
      USBD_SetFeature(pdev, req);
 800b646:	f7ff fe0a 	bl	800b25e <USBD_SetFeature>
      break;
 800b64a:	e7df      	b.n	800b60c <USBD_StdDevReq+0x24>
      USBD_ClrFeature(pdev, req);
 800b64c:	f7ff ffb9 	bl	800b5c2 <USBD_ClrFeature>
      break;
 800b650:	e7dc      	b.n	800b60c <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 800b652:	f7ff fe22 	bl	800b29a <USBD_CtlError>
      break;
 800b656:	e7d9      	b.n	800b60c <USBD_StdDevReq+0x24>

0800b658 <USBD_StdItfReq>:
{
 800b658:	b570      	push	{r4, r5, r6, lr}
 800b65a:	4605      	mov	r5, r0
 800b65c:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b65e:	780b      	ldrb	r3, [r1, #0]
 800b660:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b664:	2b20      	cmp	r3, #32
 800b666:	d007      	beq.n	800b678 <USBD_StdItfReq+0x20>
 800b668:	2b40      	cmp	r3, #64	; 0x40
 800b66a:	d005      	beq.n	800b678 <USBD_StdItfReq+0x20>
 800b66c:	b123      	cbz	r3, 800b678 <USBD_StdItfReq+0x20>
    USBD_CtlError(pdev, req);
 800b66e:	f7ff fe14 	bl	800b29a <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b672:	2600      	movs	r6, #0
}
 800b674:	4630      	mov	r0, r6
 800b676:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 800b678:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800b67c:	3b01      	subs	r3, #1
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d818      	bhi.n	800b6b4 <USBD_StdItfReq+0x5c>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b682:	7923      	ldrb	r3, [r4, #4]
 800b684:	2b02      	cmp	r3, #2
 800b686:	d80f      	bhi.n	800b6a8 <USBD_StdItfReq+0x50>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b688:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800b68c:	689b      	ldr	r3, [r3, #8]
 800b68e:	4621      	mov	r1, r4
 800b690:	4628      	mov	r0, r5
 800b692:	4798      	blx	r3
 800b694:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800b696:	88e3      	ldrh	r3, [r4, #6]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d1eb      	bne.n	800b674 <USBD_StdItfReq+0x1c>
 800b69c:	2800      	cmp	r0, #0
 800b69e:	d1e9      	bne.n	800b674 <USBD_StdItfReq+0x1c>
          (void)USBD_CtlSendStatus(pdev);
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	f000 f933 	bl	800b90c <USBD_CtlSendStatus>
 800b6a6:	e7e5      	b.n	800b674 <USBD_StdItfReq+0x1c>
        USBD_CtlError(pdev, req);
 800b6a8:	4621      	mov	r1, r4
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	f7ff fdf5 	bl	800b29a <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b6b0:	2600      	movs	r6, #0
 800b6b2:	e7df      	b.n	800b674 <USBD_StdItfReq+0x1c>
      USBD_CtlError(pdev, req);
 800b6b4:	4621      	mov	r1, r4
 800b6b6:	4628      	mov	r0, r5
 800b6b8:	f7ff fdef 	bl	800b29a <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b6bc:	2600      	movs	r6, #0
      break;
 800b6be:	e7d9      	b.n	800b674 <USBD_StdItfReq+0x1c>

0800b6c0 <USBD_StdEPReq>:
{
 800b6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c2:	4606      	mov	r6, r0
 800b6c4:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800b6c6:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6c8:	780c      	ldrb	r4, [r1, #0]
 800b6ca:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800b6ce:	2c20      	cmp	r4, #32
 800b6d0:	d008      	beq.n	800b6e4 <USBD_StdEPReq+0x24>
 800b6d2:	b2d9      	uxtb	r1, r3
 800b6d4:	2c40      	cmp	r4, #64	; 0x40
 800b6d6:	d005      	beq.n	800b6e4 <USBD_StdEPReq+0x24>
 800b6d8:	b16c      	cbz	r4, 800b6f6 <USBD_StdEPReq+0x36>
    USBD_CtlError(pdev, req);
 800b6da:	4629      	mov	r1, r5
 800b6dc:	f7ff fddd 	bl	800b29a <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b6e0:	2400      	movs	r4, #0
    break;
 800b6e2:	e006      	b.n	800b6f2 <USBD_StdEPReq+0x32>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b6e4:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	4629      	mov	r1, r5
 800b6ec:	4630      	mov	r0, r6
 800b6ee:	4798      	blx	r3
 800b6f0:	4604      	mov	r4, r0
}
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (req->bRequest)
 800b6f6:	786f      	ldrb	r7, [r5, #1]
 800b6f8:	2f01      	cmp	r7, #1
 800b6fa:	d037      	beq.n	800b76c <USBD_StdEPReq+0xac>
 800b6fc:	2f03      	cmp	r7, #3
 800b6fe:	d005      	beq.n	800b70c <USBD_StdEPReq+0x4c>
 800b700:	2f00      	cmp	r7, #0
 800b702:	d063      	beq.n	800b7cc <USBD_StdEPReq+0x10c>
      USBD_CtlError(pdev, req);
 800b704:	4629      	mov	r1, r5
 800b706:	f7ff fdc8 	bl	800b29a <USBD_CtlError>
      break;
 800b70a:	e7f2      	b.n	800b6f2 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 800b70c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b710:	2b02      	cmp	r3, #2
 800b712:	d005      	beq.n	800b720 <USBD_StdEPReq+0x60>
 800b714:	2b03      	cmp	r3, #3
 800b716:	d016      	beq.n	800b746 <USBD_StdEPReq+0x86>
        USBD_CtlError(pdev, req);
 800b718:	4629      	mov	r1, r5
 800b71a:	f7ff fdbe 	bl	800b29a <USBD_CtlError>
        break;
 800b71e:	e7e8      	b.n	800b6f2 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b720:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 800b724:	bf18      	it	ne
 800b726:	2301      	movne	r3, #1
 800b728:	2900      	cmp	r1, #0
 800b72a:	bf08      	it	eq
 800b72c:	2300      	moveq	r3, #0
 800b72e:	b133      	cbz	r3, 800b73e <USBD_StdEPReq+0x7e>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b730:	f002 fa40 	bl	800dbb4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b734:	2180      	movs	r1, #128	; 0x80
 800b736:	4630      	mov	r0, r6
 800b738:	f002 fa3c 	bl	800dbb4 <USBD_LL_StallEP>
 800b73c:	e7d9      	b.n	800b6f2 <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 800b73e:	4629      	mov	r1, r5
 800b740:	f7ff fdab 	bl	800b29a <USBD_CtlError>
 800b744:	e7d5      	b.n	800b6f2 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b746:	886b      	ldrh	r3, [r5, #2]
 800b748:	b94b      	cbnz	r3, 800b75e <USBD_StdEPReq+0x9e>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b74a:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 800b74e:	bf18      	it	ne
 800b750:	2301      	movne	r3, #1
 800b752:	2900      	cmp	r1, #0
 800b754:	bf08      	it	eq
 800b756:	2300      	moveq	r3, #0
 800b758:	b10b      	cbz	r3, 800b75e <USBD_StdEPReq+0x9e>
 800b75a:	88eb      	ldrh	r3, [r5, #6]
 800b75c:	b11b      	cbz	r3, 800b766 <USBD_StdEPReq+0xa6>
        (void)USBD_CtlSendStatus(pdev);
 800b75e:	4630      	mov	r0, r6
 800b760:	f000 f8d4 	bl	800b90c <USBD_CtlSendStatus>
        break;
 800b764:	e7c5      	b.n	800b6f2 <USBD_StdEPReq+0x32>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800b766:	f002 fa25 	bl	800dbb4 <USBD_LL_StallEP>
 800b76a:	e7f8      	b.n	800b75e <USBD_StdEPReq+0x9e>
      switch (pdev->dev_state)
 800b76c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b770:	2b02      	cmp	r3, #2
 800b772:	d005      	beq.n	800b780 <USBD_StdEPReq+0xc0>
 800b774:	2b03      	cmp	r3, #3
 800b776:	d016      	beq.n	800b7a6 <USBD_StdEPReq+0xe6>
        USBD_CtlError(pdev, req);
 800b778:	4629      	mov	r1, r5
 800b77a:	f7ff fd8e 	bl	800b29a <USBD_CtlError>
        break;
 800b77e:	e7b8      	b.n	800b6f2 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b780:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 800b784:	bf18      	it	ne
 800b786:	2301      	movne	r3, #1
 800b788:	2900      	cmp	r1, #0
 800b78a:	bf08      	it	eq
 800b78c:	2300      	moveq	r3, #0
 800b78e:	b133      	cbz	r3, 800b79e <USBD_StdEPReq+0xde>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b790:	f002 fa10 	bl	800dbb4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b794:	2180      	movs	r1, #128	; 0x80
 800b796:	4630      	mov	r0, r6
 800b798:	f002 fa0c 	bl	800dbb4 <USBD_LL_StallEP>
 800b79c:	e7a9      	b.n	800b6f2 <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 800b79e:	4629      	mov	r1, r5
 800b7a0:	f7ff fd7b 	bl	800b29a <USBD_CtlError>
 800b7a4:	e7a5      	b.n	800b6f2 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b7a6:	886b      	ldrh	r3, [r5, #2]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d1a2      	bne.n	800b6f2 <USBD_StdEPReq+0x32>
          if ((ep_addr & 0x7FU) != 0x00U)
 800b7ac:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800b7b0:	d109      	bne.n	800b7c6 <USBD_StdEPReq+0x106>
          (void)USBD_CtlSendStatus(pdev);
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	f000 f8aa 	bl	800b90c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b7b8:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	4629      	mov	r1, r5
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	4798      	blx	r3
 800b7c4:	e795      	b.n	800b6f2 <USBD_StdEPReq+0x32>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b7c6:	f002 f9fc 	bl	800dbc2 <USBD_LL_ClearStallEP>
 800b7ca:	e7f2      	b.n	800b7b2 <USBD_StdEPReq+0xf2>
      switch (pdev->dev_state)
 800b7cc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800b7d0:	2a02      	cmp	r2, #2
 800b7d2:	d006      	beq.n	800b7e2 <USBD_StdEPReq+0x122>
 800b7d4:	2a03      	cmp	r2, #3
 800b7d6:	d02e      	beq.n	800b836 <USBD_StdEPReq+0x176>
        USBD_CtlError(pdev, req);
 800b7d8:	4629      	mov	r1, r5
 800b7da:	f7ff fd5e 	bl	800b29a <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b7de:	463c      	mov	r4, r7
        break;
 800b7e0:	e787      	b.n	800b6f2 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7e2:	f1b1 0280 	subs.w	r2, r1, #128	; 0x80
 800b7e6:	bf18      	it	ne
 800b7e8:	2201      	movne	r2, #1
 800b7ea:	2900      	cmp	r1, #0
 800b7ec:	bf08      	it	eq
 800b7ee:	2200      	moveq	r2, #0
 800b7f0:	b99a      	cbnz	r2, 800b81a <USBD_StdEPReq+0x15a>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b7f6:	d115      	bne.n	800b824 <USBD_StdEPReq+0x164>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b7f8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7fc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b800:	0089      	lsls	r1, r1, #2
 800b802:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800b806:	4401      	add	r1, r0
 800b808:	3104      	adds	r1, #4
        pep->status = 0x0000U;
 800b80a:	2300      	movs	r3, #0
 800b80c:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b80e:	2202      	movs	r2, #2
 800b810:	4630      	mov	r0, r6
 800b812:	f000 f85e 	bl	800b8d2 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800b816:	463c      	mov	r4, r7
        break;
 800b818:	e76b      	b.n	800b6f2 <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 800b81a:	4629      	mov	r1, r5
 800b81c:	f7ff fd3d 	bl	800b29a <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b820:	463c      	mov	r4, r7
          break;
 800b822:	e766      	b.n	800b6f2 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b824:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800b828:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b82c:	0089      	lsls	r1, r1, #2
 800b82e:	3110      	adds	r1, #16
 800b830:	4401      	add	r1, r0
 800b832:	3104      	adds	r1, #4
 800b834:	e7e9      	b.n	800b80a <USBD_StdEPReq+0x14a>
        if ((ep_addr & 0x80U) == 0x80U)
 800b836:	b25b      	sxtb	r3, r3
 800b838:	2b00      	cmp	r3, #0
 800b83a:	db24      	blt.n	800b886 <USBD_StdEPReq+0x1c6>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b83c:	f001 020f 	and.w	r2, r1, #15
 800b840:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b844:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b848:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800b84c:	b34a      	cbz	r2, 800b8a2 <USBD_StdEPReq+0x1e2>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b84e:	2b00      	cmp	r3, #0
 800b850:	db2c      	blt.n	800b8ac <USBD_StdEPReq+0x1ec>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b852:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b856:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b85a:	009c      	lsls	r4, r3, #2
 800b85c:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 800b860:	4434      	add	r4, r6
 800b862:	3404      	adds	r4, #4
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b864:	2980      	cmp	r1, #128	; 0x80
 800b866:	bf14      	ite	ne
 800b868:	2300      	movne	r3, #0
 800b86a:	2301      	moveq	r3, #1
 800b86c:	2900      	cmp	r1, #0
 800b86e:	bf08      	it	eq
 800b870:	2301      	moveq	r3, #1
 800b872:	b323      	cbz	r3, 800b8be <USBD_StdEPReq+0x1fe>
            pep->status = 0x0000U;
 800b874:	2300      	movs	r3, #0
 800b876:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b878:	2202      	movs	r2, #2
 800b87a:	4621      	mov	r1, r4
 800b87c:	4630      	mov	r0, r6
 800b87e:	f000 f828 	bl	800b8d2 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800b882:	463c      	mov	r4, r7
          break;
 800b884:	e735      	b.n	800b6f2 <USBD_StdEPReq+0x32>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b886:	f001 020f 	and.w	r2, r1, #15
 800b88a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b88e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b892:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800b894:	2a00      	cmp	r2, #0
 800b896:	d1da      	bne.n	800b84e <USBD_StdEPReq+0x18e>
            USBD_CtlError(pdev, req);
 800b898:	4629      	mov	r1, r5
 800b89a:	f7ff fcfe 	bl	800b29a <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b89e:	463c      	mov	r4, r7
            break;
 800b8a0:	e727      	b.n	800b6f2 <USBD_StdEPReq+0x32>
            USBD_CtlError(pdev, req);
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	f7ff fcf9 	bl	800b29a <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b8a8:	463c      	mov	r4, r7
            break;
 800b8aa:	e722      	b.n	800b6f2 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8ac:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800b8b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b8b4:	009c      	lsls	r4, r3, #2
 800b8b6:	3410      	adds	r4, #16
 800b8b8:	4434      	add	r4, r6
 800b8ba:	3404      	adds	r4, #4
 800b8bc:	e7d2      	b.n	800b864 <USBD_StdEPReq+0x1a4>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b8be:	4630      	mov	r0, r6
 800b8c0:	f002 f986 	bl	800dbd0 <USBD_LL_IsStallEP>
 800b8c4:	b110      	cbz	r0, 800b8cc <USBD_StdEPReq+0x20c>
            pep->status = 0x0001U;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	6023      	str	r3, [r4, #0]
 800b8ca:	e7d5      	b.n	800b878 <USBD_StdEPReq+0x1b8>
            pep->status = 0x0000U;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	6023      	str	r3, [r4, #0]
 800b8d0:	e7d2      	b.n	800b878 <USBD_StdEPReq+0x1b8>

0800b8d2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b8d2:	b510      	push	{r4, lr}
 800b8d4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b8d6:	2202      	movs	r2, #2
 800b8d8:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b8dc:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length = len;
 800b8de:	61c3      	str	r3, [r0, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b8e0:	460a      	mov	r2, r1
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	f002 f992 	bl	800dc0c <USBD_LL_Transmit>

  return USBD_OK;
}
 800b8e8:	2000      	movs	r0, #0
 800b8ea:	bd10      	pop	{r4, pc}

0800b8ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b8ec:	b508      	push	{r3, lr}
 800b8ee:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b8f0:	460a      	mov	r2, r1
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	f002 f98a 	bl	800dc0c <USBD_LL_Transmit>

  return USBD_OK;
}
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	bd08      	pop	{r3, pc}

0800b8fc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b8fc:	b508      	push	{r3, lr}
 800b8fe:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b900:	460a      	mov	r2, r1
 800b902:	2100      	movs	r1, #0
 800b904:	f002 f989 	bl	800dc1a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b908:	2000      	movs	r0, #0
 800b90a:	bd08      	pop	{r3, pc}

0800b90c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b90c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b90e:	2304      	movs	r3, #4
 800b910:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b914:	2300      	movs	r3, #0
 800b916:	461a      	mov	r2, r3
 800b918:	4619      	mov	r1, r3
 800b91a:	f002 f977 	bl	800dc0c <USBD_LL_Transmit>

  return USBD_OK;
}
 800b91e:	2000      	movs	r0, #0
 800b920:	bd08      	pop	{r3, pc}

0800b922 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b922:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b924:	2305      	movs	r3, #5
 800b926:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b92a:	2300      	movs	r3, #0
 800b92c:	461a      	mov	r2, r3
 800b92e:	4619      	mov	r1, r3
 800b930:	f002 f973 	bl	800dc1a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b934:	2000      	movs	r0, #0
 800b936:	bd08      	pop	{r3, pc}

0800b938 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800b938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b93c:	b089      	sub	sp, #36	; 0x24
 800b93e:	9003      	str	r0, [sp, #12]
 800b940:	9105      	str	r1, [sp, #20]
 800b942:	4611      	mov	r1, r2
 800b944:	9207      	str	r2, [sp, #28]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800b946:	4a67      	ldr	r2, [pc, #412]	; (800bae4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ac>)
 800b948:	fba2 2303 	umull	r2, r3, r2, r3
 800b94c:	0a1b      	lsrs	r3, r3, #8
 800b94e:	9306      	str	r3, [sp, #24]
  currentMCU = BlockIndex;
 800b950:	9104      	str	r1, [sp, #16]
  

  while(currentMCU < (numberMCU + BlockIndex))
 800b952:	e0a4      	b.n	800ba9e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x166>
    
    for(i= 0; i <  16; i+=2)
    {
      if(i == 8)
      {
        pLum = pInBuffer + 128;
 800b954:	9b03      	ldr	r3, [sp, #12]
 800b956:	f103 0780 	add.w	r7, r3, #128	; 0x80
 800b95a:	e08e      	b.n	800ba7a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x142>
        
        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
          {           
            cbcomp = (int32_t)(*(pChrom));
 800b95c:	f898 5000 	ldrb.w	r5, [r8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800b960:	4b61      	ldr	r3, [pc, #388]	; (800bae8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b0>)
 800b962:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800b966:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
            
            crcomp = (int32_t)(*(pChrom + 64));
 800b96a:	f898 2040 	ldrb.w	r2, [r8, #64]	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800b96e:	f503 6188 	add.w	r1, r3, #1088	; 0x440
 800b972:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800b976:	f503 6604 	add.w	r6, r3, #2112	; 0x840
 800b97a:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800b97e:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 800b982:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b986:	441a      	add	r2, r3
          
            
            
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
            ycomp = (int32_t)(*(pLum +j));
 800b988:	5d3e      	ldrb	r6, [r7, r4]
            
            *(__IO uint32_t *)pOutAddr = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800b98a:	198d      	adds	r5, r1, r6
 800b98c:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800b990:	4b56      	ldr	r3, [pc, #344]	; (800baec <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b4>)
 800b992:	f813 9005 	ldrb.w	r9, [r3, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800b996:	eb06 4522 	add.w	r5, r6, r2, asr #16
 800b99a:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800b99e:	5d5d      	ldrb	r5, [r3, r5]
 800b9a0:	022d      	lsls	r5, r5, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800b9a2:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 800b9a6:	4406      	add	r6, r0
 800b9a8:	f506 7680 	add.w	r6, r6, #256	; 0x100
 800b9ac:	5d9e      	ldrb	r6, [r3, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800b9ae:	4335      	orrs	r5, r6
            *(__IO uint32_t *)pOutAddr = 
 800b9b0:	f8cc 5000 	str.w	r5, [ip]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 800b9b4:	1c65      	adds	r5, r4, #1
 800b9b6:	5d7e      	ldrb	r6, [r7, r5]
            
            *((__IO uint32_t *)(pOutAddr + 4)) = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800b9b8:	198d      	adds	r5, r1, r6
 800b9ba:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800b9be:	f813 9005 	ldrb.w	r9, [r3, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800b9c2:	eb06 4522 	add.w	r5, r6, r2, asr #16
 800b9c6:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800b9ca:	5d5d      	ldrb	r5, [r3, r5]
 800b9cc:	022d      	lsls	r5, r5, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800b9ce:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 800b9d2:	4406      	add	r6, r0
 800b9d4:	f506 7680 	add.w	r6, r6, #256	; 0x100
 800b9d8:	5d9e      	ldrb	r6, [r3, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800b9da:	4335      	orrs	r5, r6
            *((__IO uint32_t *)(pOutAddr + 4)) = 
 800b9dc:	f8cc 5004 	str.w	r5, [ip, #4]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 800b9e0:	f104 0508 	add.w	r5, r4, #8
 800b9e4:	5d7e      	ldrb	r6, [r7, r5]
            
            *(__IO uint32_t *)pOutAddr2 = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800b9e6:	198d      	adds	r5, r1, r6
 800b9e8:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800b9ec:	f813 9005 	ldrb.w	r9, [r3, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800b9f0:	eb06 4522 	add.w	r5, r6, r2, asr #16
 800b9f4:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800b9f8:	5d5d      	ldrb	r5, [r3, r5]
 800b9fa:	022d      	lsls	r5, r5, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800b9fc:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 800ba00:	4406      	add	r6, r0
 800ba02:	f506 7680 	add.w	r6, r6, #256	; 0x100
 800ba06:	5d9e      	ldrb	r6, [r3, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800ba08:	4335      	orrs	r5, r6
            *(__IO uint32_t *)pOutAddr2 = 
 800ba0a:	f8ce 5000 	str.w	r5, [lr]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 800ba0e:	f104 0509 	add.w	r5, r4, #9
 800ba12:	5d7d      	ldrb	r5, [r7, r5]
            
            *((__IO uint32_t *)(pOutAddr2 +4)) = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800ba14:	4429      	add	r1, r5
 800ba16:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800ba1a:	5c5e      	ldrb	r6, [r3, r1]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800ba1c:	eb05 4122 	add.w	r1, r5, r2, asr #16
 800ba20:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800ba24:	5c59      	ldrb	r1, [r3, r1]
 800ba26:	0209      	lsls	r1, r1, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800ba28:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 800ba2c:	1942      	adds	r2, r0, r5
 800ba2e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800ba32:	5c9b      	ldrb	r3, [r3, r2]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800ba34:	430b      	orrs	r3, r1
            *((__IO uint32_t *)(pOutAddr2 +4)) = 
 800ba36:	f8ce 3004 	str.w	r3, [lr, #4]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 800ba3a:	f10c 0c08 	add.w	ip, ip, #8
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 800ba3e:	f10e 0e08 	add.w	lr, lr, #8
          
            pChrom++;
 800ba42:	f108 0801 	add.w	r8, r8, #1
          for(j=0; j < 8; j+=2)
 800ba46:	3402      	adds	r4, #2
 800ba48:	2c07      	cmp	r4, #7
 800ba4a:	d987      	bls.n	800b95c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x24>
          }
          pLum += 64;                      
 800ba4c:	3740      	adds	r7, #64	; 0x40
        for(k= 0; k<2; k++)
 800ba4e:	f10b 0b01 	add.w	fp, fp, #1
 800ba52:	f1bb 0f01 	cmp.w	fp, #1
 800ba56:	d801      	bhi.n	800ba5c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x124>
          for(j=0; j < 8; j+=2)
 800ba58:	2400      	movs	r4, #0
 800ba5a:	e7f5      	b.n	800ba48 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x110>
        }

        pLum = pLum - 128 + 16;
 800ba5c:	3f70      	subs	r7, #112	; 0x70
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800ba5e:	9b01      	ldr	r3, [sp, #4]
 800ba60:	9a02      	ldr	r2, [sp, #8]
 800ba62:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800ba66:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
 800ba68:	f10a 0a02 	add.w	sl, sl, #2
 800ba6c:	f1ba 0f0f 	cmp.w	sl, #15
 800ba70:	d811      	bhi.n	800ba96 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x15e>
      if(i == 8)
 800ba72:	f1ba 0f08 	cmp.w	sl, #8
 800ba76:	f43f af6d 	beq.w	800b954 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1c>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800ba7a:	4b1b      	ldr	r3, [pc, #108]	; (800bae8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b0>)
 800ba7c:	691b      	ldr	r3, [r3, #16]
 800ba7e:	9a01      	ldr	r2, [sp, #4]
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d9f1      	bls.n	800ba68 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x130>
        pOutAddr = pOutBuffer + refline;
 800ba84:	9b05      	ldr	r3, [sp, #20]
 800ba86:	eb03 0c02 	add.w	ip, r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800ba8a:	9b02      	ldr	r3, [sp, #8]
 800ba8c:	eb0c 0e03 	add.w	lr, ip, r3
        for(k= 0; k<2; k++)
 800ba90:	f04f 0b00 	mov.w	fp, #0
 800ba94:	e7dd      	b.n	800ba52 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x11a>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 800ba96:	9b03      	ldr	r3, [sp, #12]
 800ba98:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800ba9c:	9303      	str	r3, [sp, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 800ba9e:	9b06      	ldr	r3, [sp, #24]
 800baa0:	9a07      	ldr	r2, [sp, #28]
 800baa2:	4413      	add	r3, r2
 800baa4:	9a04      	ldr	r2, [sp, #16]
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d917      	bls.n	800bada <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1a2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800baaa:	9c04      	ldr	r4, [sp, #16]
 800baac:	0120      	lsls	r0, r4, #4
 800baae:	490e      	ldr	r1, [pc, #56]	; (800bae8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b0>)
 800bab0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800bab2:	fbb0 f2f3 	udiv	r2, r0, r3
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800bab6:	fb03 0312 	mls	r3, r3, r2, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800baba:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800babc:	9102      	str	r1, [sp, #8]
 800babe:	fb01 f202 	mul.w	r2, r1, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800bac8:	9301      	str	r3, [sp, #4]
    currentMCU++;
 800baca:	1c63      	adds	r3, r4, #1
 800bacc:	9304      	str	r3, [sp, #16]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 800bace:	9f03      	ldr	r7, [sp, #12]
 800bad0:	f507 7880 	add.w	r8, r7, #256	; 0x100
    for(i= 0; i <  16; i+=2)
 800bad4:	f04f 0a00 	mov.w	sl, #0
 800bad8:	e7c8      	b.n	800ba6c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x134>
  }
  return numberMCU;
}
 800bada:	9806      	ldr	r0, [sp, #24]
 800badc:	b009      	add	sp, #36	; 0x24
 800bade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae2:	bf00      	nop
 800bae4:	aaaaaaab 	.word	0xaaaaaaab
 800bae8:	200006c4 	.word	0x200006c4
 800baec:	08012f90 	.word	0x08012f90

0800baf0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800baf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf4:	b087      	sub	sp, #28
 800baf6:	9002      	str	r0, [sp, #8]
 800baf8:	9103      	str	r1, [sp, #12]
 800bafa:	9205      	str	r2, [sp, #20]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800bafc:	0a1b      	lsrs	r3, r3, #8
 800bafe:	9304      	str	r3, [sp, #16]
  currentMCU = BlockIndex;
 800bb00:	9200      	str	r2, [sp, #0]
  

  while(currentMCU < (numberMCU + BlockIndex))
 800bb02:	e066      	b.n	800bbd2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xe2>
        
        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
          {           
            cbcomp = (int32_t)(*(pChrom));
 800bb04:	f89c 4000 	ldrb.w	r4, [ip]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800bb08:	4a44      	ldr	r2, [pc, #272]	; (800bc1c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x12c>)
 800bb0a:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800bb0e:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            
            crcomp = (int32_t)(*(pChrom + 64));
 800bb12:	f89c 3040 	ldrb.w	r3, [ip, #64]	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800bb16:	f502 6588 	add.w	r5, r2, #1088	; 0x440
 800bb1a:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800bb1e:	f502 6504 	add.w	r5, r2, #2112	; 0x840
 800bb22:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 800bb26:	f502 6244 	add.w	r2, r2, #3136	; 0xc40
 800bb2a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800bb2e:	442b      	add	r3, r5
          
            
            
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888) 
          
            ycomp = (int32_t)(*(pLum +j));
 800bb30:	f81e 5000 	ldrb.w	r5, [lr, r0]
            
            *(__IO uint32_t *)pOutAddr = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800bb34:	1972      	adds	r2, r6, r5
 800bb36:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800bb3a:	4c39      	ldr	r4, [pc, #228]	; (800bc20 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x130>)
 800bb3c:	f814 8002 	ldrb.w	r8, [r4, r2]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800bb40:	eb05 4223 	add.w	r2, r5, r3, asr #16
 800bb44:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800bb48:	5ca2      	ldrb	r2, [r4, r2]
 800bb4a:	0212      	lsls	r2, r2, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800bb4c:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 800bb50:	440d      	add	r5, r1
 800bb52:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800bb56:	5d65      	ldrb	r5, [r4, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800bb58:	432a      	orrs	r2, r5
            *(__IO uint32_t *)pOutAddr = 
 800bb5a:	603a      	str	r2, [r7, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 800bb5c:	1c42      	adds	r2, r0, #1
 800bb5e:	f81e 2002 	ldrb.w	r2, [lr, r2]
            
            *((__IO uint32_t *)(pOutAddr + 4)) = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800bb62:	4416      	add	r6, r2
 800bb64:	f506 7680 	add.w	r6, r6, #256	; 0x100
 800bb68:	5da5      	ldrb	r5, [r4, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800bb6a:	eb02 4323 	add.w	r3, r2, r3, asr #16
 800bb6e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bb72:	5ce3      	ldrb	r3, [r4, r3]
 800bb74:	021b      	lsls	r3, r3, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800bb76:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);         
 800bb7a:	4411      	add	r1, r2
 800bb7c:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800bb80:	5c62      	ldrb	r2, [r4, r1]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800bb82:	4313      	orrs	r3, r2
            *((__IO uint32_t *)(pOutAddr + 4)) = 
 800bb84:	607b      	str	r3, [r7, #4]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
          
#endif /* JPEG_RGB_FORMAT*/          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 800bb86:	3708      	adds	r7, #8
          
            pChrom++;
 800bb88:	f10c 0c01 	add.w	ip, ip, #1
          for(j=0; j < 8; j+=2)
 800bb8c:	3002      	adds	r0, #2
 800bb8e:	2807      	cmp	r0, #7
 800bb90:	d9b8      	bls.n	800bb04 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14>
          }
          pLum += 64;                      
 800bb92:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
        for(k= 0; k<2; k++)
 800bb96:	f10b 0b01 	add.w	fp, fp, #1
 800bb9a:	f1bb 0f01 	cmp.w	fp, #1
 800bb9e:	d801      	bhi.n	800bba4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xb4>
          for(j=0; j < 8; j+=2)
 800bba0:	2000      	movs	r0, #0
 800bba2:	e7f4      	b.n	800bb8e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9e>
        }
        
        pLum = pLum - 128 + 8;
 800bba4:	f1ae 0e78 	sub.w	lr, lr, #120	; 0x78
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800bba8:	9b01      	ldr	r3, [sp, #4]
 800bbaa:	449a      	add	sl, r3
    for(i= 0; i <  8; i++)
 800bbac:	f109 0901 	add.w	r9, r9, #1
 800bbb0:	f1b9 0f07 	cmp.w	r9, #7
 800bbb4:	d809      	bhi.n	800bbca <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xda>
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800bbb6:	4b19      	ldr	r3, [pc, #100]	; (800bc1c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x12c>)
 800bbb8:	691b      	ldr	r3, [r3, #16]
 800bbba:	4553      	cmp	r3, sl
 800bbbc:	d9f6      	bls.n	800bbac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xbc>
        pOutAddr = pOutBuffer + refline;
 800bbbe:	9b03      	ldr	r3, [sp, #12]
 800bbc0:	eb03 070a 	add.w	r7, r3, sl
        for(k= 0; k<2; k++)
 800bbc4:	f04f 0b00 	mov.w	fp, #0
 800bbc8:	e7e7      	b.n	800bb9a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xaa>
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 800bbca:	9b02      	ldr	r3, [sp, #8]
 800bbcc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bbd0:	9302      	str	r3, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 800bbd2:	9b04      	ldr	r3, [sp, #16]
 800bbd4:	9a05      	ldr	r2, [sp, #20]
 800bbd6:	4413      	add	r3, r2
 800bbd8:	9a00      	ldr	r2, [sp, #0]
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d919      	bls.n	800bc12 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x122>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800bbde:	9800      	ldr	r0, [sp, #0]
 800bbe0:	ea4f 1a00 	mov.w	sl, r0, lsl #4
 800bbe4:	490d      	ldr	r1, [pc, #52]	; (800bc1c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x12c>)
 800bbe6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800bbe8:	fbba f2f3 	udiv	r2, sl, r3
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800bbec:	fb03 aa12 	mls	sl, r3, r2, sl
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800bbf0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800bbf2:	9301      	str	r3, [sp, #4]
 800bbf4:	fb03 f202 	mul.w	r2, r3, r2
 800bbf8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800bbfc:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
    currentMCU++;
 800bc00:	1c43      	adds	r3, r0, #1
 800bc02:	9300      	str	r3, [sp, #0]
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 800bc04:	9b02      	ldr	r3, [sp, #8]
 800bc06:	f103 0c80 	add.w	ip, r3, #128	; 0x80
    pLum = pInBuffer;
 800bc0a:	469e      	mov	lr, r3
    for(i= 0; i <  8; i++)
 800bc0c:	f04f 0900 	mov.w	r9, #0
 800bc10:	e7ce      	b.n	800bbb0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xc0>
  }
  return numberMCU;
}
 800bc12:	9804      	ldr	r0, [sp, #16]
 800bc14:	b007      	add	sp, #28
 800bc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1a:	bf00      	nop
 800bc1c:	200006c4 	.word	0x200006c4
 800bc20:	08012f90 	.word	0x08012f90

0800bc24 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800bc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc28:	b085      	sub	sp, #20
 800bc2a:	9000      	str	r0, [sp, #0]
 800bc2c:	9101      	str	r1, [sp, #4]
 800bc2e:	4692      	mov	sl, r2
 800bc30:	9203      	str	r2, [sp, #12]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800bc32:	4a35      	ldr	r2, [pc, #212]	; (800bd08 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe4>)
 800bc34:	fba2 2303 	umull	r2, r3, r2, r3
 800bc38:	09db      	lsrs	r3, r3, #7
 800bc3a:	9302      	str	r3, [sp, #8]
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
 800bc3c:	e042      	b.n	800bcc4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xa0>
        pOutAddr = pOutBuffer+ refline;
        

          for(j=0; j < 8; j++)
          {           
            cbcomp = (int32_t)(*pChrom);
 800bc3e:	7825      	ldrb	r5, [r4, #0]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800bc40:	4b32      	ldr	r3, [pc, #200]	; (800bd0c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
 800bc42:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800bc46:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
            
            crcomp = (int32_t)(*(pChrom + 64));
 800bc4a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800bc4e:	f503 6688 	add.w	r6, r3, #1088	; 0x440
 800bc52:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800bc56:	f503 6c04 	add.w	ip, r3, #2112	; 0x840
 800bc5a:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 800bc5e:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 800bc62:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bc66:	441a      	add	r2, r3
                      
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
            ycomp = (int32_t)(*(pLum +j));
 800bc68:	f818 3000 	ldrb.w	r3, [r8, r0]
            
            *(__IO uint32_t *)pOutAddr = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800bc6c:	441e      	add	r6, r3
 800bc6e:	f506 7680 	add.w	r6, r6, #256	; 0x100
 800bc72:	4d27      	ldr	r5, [pc, #156]	; (800bd10 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
 800bc74:	5dae      	ldrb	r6, [r5, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800bc76:	eb03 4222 	add.w	r2, r3, r2, asr #16
 800bc7a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800bc7e:	5caa      	ldrb	r2, [r5, r2]
 800bc80:	0212      	lsls	r2, r2, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800bc82:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);       
 800bc86:	440b      	add	r3, r1
 800bc88:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bc8c:	5ceb      	ldrb	r3, [r5, r3]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800bc8e:	431e      	orrs	r6, r3
            *(__IO uint32_t *)pOutAddr = 
 800bc90:	f847 6b04 	str.w	r6, [r7], #4
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
          
            pChrom++;
 800bc94:	3401      	adds	r4, #1
          for(j=0; j < 8; j++)
 800bc96:	3001      	adds	r0, #1
 800bc98:	2807      	cmp	r0, #7
 800bc9a:	d9d0      	bls.n	800bc3e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x1a>
          }
          pLum += 8;
 800bc9c:	f108 0808 	add.w	r8, r8, #8

        refline += JPEG_ConvertorParams.ScaledWidth;          
 800bca0:	44d9      	add	r9, fp
    for(i= 0; i <  8; i++)
 800bca2:	f10e 0e01 	add.w	lr, lr, #1
 800bca6:	f1be 0f07 	cmp.w	lr, #7
 800bcaa:	d808      	bhi.n	800bcbe <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x9a>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800bcac:	4b17      	ldr	r3, [pc, #92]	; (800bd0c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	454b      	cmp	r3, r9
 800bcb2:	d9f6      	bls.n	800bca2 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7e>
        pOutAddr = pOutBuffer+ refline;
 800bcb4:	9b01      	ldr	r3, [sp, #4]
 800bcb6:	eb03 0709 	add.w	r7, r3, r9
          for(j=0; j < 8; j++)
 800bcba:	2000      	movs	r0, #0
 800bcbc:	e7ec      	b.n	800bc98 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x74>
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 800bcbe:	9b00      	ldr	r3, [sp, #0]
 800bcc0:	33c0      	adds	r3, #192	; 0xc0
 800bcc2:	9300      	str	r3, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 800bcc4:	9b02      	ldr	r3, [sp, #8]
 800bcc6:	9a03      	ldr	r2, [sp, #12]
 800bcc8:	4413      	add	r3, r2
 800bcca:	4553      	cmp	r3, sl
 800bccc:	d918      	bls.n	800bd00 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xdc>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800bcce:	ea4f 09ca 	mov.w	r9, sl, lsl #3
 800bcd2:	490e      	ldr	r1, [pc, #56]	; (800bd0c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
 800bcd4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800bcd6:	fbb9 f2f3 	udiv	r2, r9, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800bcda:	fb03 9912 	mls	r9, r3, r2, r9
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800bcde:	f8d1 b028 	ldr.w	fp, [r1, #40]	; 0x28
 800bce2:	fb0b f202 	mul.w	r2, fp, r2
 800bce6:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800bcea:	eb09 09c2 	add.w	r9, r9, r2, lsl #3
    currentMCU++;   
 800bcee:	f10a 0a01 	add.w	sl, sl, #1
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 800bcf2:	9b00      	ldr	r3, [sp, #0]
 800bcf4:	f103 0440 	add.w	r4, r3, #64	; 0x40
    pLum = pInBuffer;
 800bcf8:	4698      	mov	r8, r3
    for(i= 0; i <  8; i++)
 800bcfa:	f04f 0e00 	mov.w	lr, #0
 800bcfe:	e7d2      	b.n	800bca6 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x82>
  }
  return numberMCU;
}
 800bd00:	9802      	ldr	r0, [sp, #8]
 800bd02:	b005      	add	sp, #20
 800bd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd08:	aaaaaaab 	.word	0xaaaaaaab
 800bd0c:	200006c4 	.word	0x200006c4
 800bd10:	08012f90 	.word	0x08012f90

0800bd14 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 800bd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd18:	4681      	mov	r9, r0
 800bd1a:	4692      	mov	sl, r2

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 800bd1c:	0998      	lsrs	r0, r3, #6
  currentMCU = BlockIndex;
 800bd1e:	4690      	mov	r8, r2
  
  while(currentMCU < (numberMCU + BlockIndex))
 800bd20:	e01a      	b.n	800bd58 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x44>
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
      {  
        for(j=0; j < 8; j++)
        { 
          ySample =   (uint32_t)(*pLum);
 800bd22:	f817 4b01 	ldrb.w	r4, [r7], #1

#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
          *(__IO uint32_t *)pOutAddr = ySample |  (ySample << 8) | (ySample << 16);
 800bd26:	ea44 2304 	orr.w	r3, r4, r4, lsl #8
 800bd2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bd2e:	f846 3b04 	str.w	r3, [r6], #4
        for(j=0; j < 8; j++)
 800bd32:	3501      	adds	r5, #1
 800bd34:	2d07      	cmp	r5, #7
 800bd36:	d9f4      	bls.n	800bd22 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xe>
          
          pOutAddr += JPEG_BYTES_PER_PIXEL;
          pLum++;
        }

        refline += JPEG_ConvertorParams.ScaledWidth;        
 800bd38:	4494      	add	ip, r2
    for(i= 0; i <  8; i++)
 800bd3a:	f10e 0e01 	add.w	lr, lr, #1
 800bd3e:	f1be 0f07 	cmp.w	lr, #7
 800bd42:	d807      	bhi.n	800bd54 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x40>
      pOutAddr = pOutBuffer + refline;
 800bd44:	eb01 060c 	add.w	r6, r1, ip
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800bd48:	4b11      	ldr	r3, [pc, #68]	; (800bd90 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
 800bd4a:	691b      	ldr	r3, [r3, #16]
 800bd4c:	4563      	cmp	r3, ip
 800bd4e:	d9f4      	bls.n	800bd3a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
        for(j=0; j < 8; j++)
 800bd50:	2500      	movs	r5, #0
 800bd52:	e7ef      	b.n	800bd34 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x20>
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 800bd54:	f109 0940 	add.w	r9, r9, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
 800bd58:	eb00 030a 	add.w	r3, r0, sl
 800bd5c:	4543      	cmp	r3, r8
 800bd5e:	d914      	bls.n	800bd8a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x76>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800bd60:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800bd64:	4a0a      	ldr	r2, [pc, #40]	; (800bd90 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
 800bd66:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800bd68:	fbbc f4f3 	udiv	r4, ip, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800bd6c:	fb03 cc14 	mls	ip, r3, r4, ip
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800bd70:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800bd72:	fb02 f404 	mul.w	r4, r2, r4
 800bd76:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800bd7a:	eb0c 0cc4 	add.w	ip, ip, r4, lsl #3
    currentMCU++;
 800bd7e:	f108 0801 	add.w	r8, r8, #1
    pLum = pInBuffer;
 800bd82:	464f      	mov	r7, r9
    for(i= 0; i <  8; i++)
 800bd84:	f04f 0e00 	mov.w	lr, #0
 800bd88:	e7d9      	b.n	800bd3e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
 800bd8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd8e:	bf00      	nop
 800bd90:	200006c4 	.word	0x200006c4

0800bd94 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800bd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd98:	b085      	sub	sp, #20
 800bd9a:	9203      	str	r2, [sp, #12]
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 800bd9c:	0a1b      	lsrs	r3, r3, #8
 800bd9e:	9302      	str	r3, [sp, #8]
  currentMCU = BlockIndex;
 800bda0:	4691      	mov	r9, r2
 800bda2:	468a      	mov	sl, r1
  

  while(currentMCU < (numberMCU + BlockIndex))
 800bda4:	e035      	b.n	800be12 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7e>
      {
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
 800bda6:	f894 c0c0 	ldrb.w	ip, [r4, #192]	; 0xc0
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800bdaa:	7823      	ldrb	r3, [r4, #0]
 800bdac:	fb0c f303 	mul.w	r3, ip, r3
 800bdb0:	4a27      	ldr	r2, [pc, #156]	; (800be50 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xbc>)
 800bdb2:	fb82 b703 	smull	fp, r7, r2, r3
 800bdb6:	443b      	add	r3, r7
 800bdb8:	11df      	asrs	r7, r3, #7
            
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 800bdba:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800bdbe:	fb0c f303 	mul.w	r3, ip, r3
 800bdc2:	fb82 1b03 	smull	r1, fp, r2, r3
 800bdc6:	445b      	add	r3, fp
 800bdc8:	11db      	asrs	r3, r3, #7
            
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 800bdca:	f894 b080 	ldrb.w	fp, [r4, #128]	; 0x80
 800bdce:	fb0c fc0b 	mul.w	ip, ip, fp
 800bdd2:	fb82 120c 	smull	r1, r2, r2, ip
 800bdd6:	4462      	add	r2, ip
                      
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
          *(__IO uint32_t *)pOutAddr = 
            (c_red << JPEG_RED_OFFSET) | \
            (c_green << JPEG_GREEN_OFFSET) | \
 800bdd8:	021b      	lsls	r3, r3, #8
            (c_red << JPEG_RED_OFFSET) | \
 800bdda:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
            (c_green << JPEG_GREEN_OFFSET) | \
 800bdde:	ea43 13e2 	orr.w	r3, r3, r2, asr #7
          *(__IO uint32_t *)pOutAddr = 
 800bde2:	f846 3b04 	str.w	r3, [r6], #4
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
          
            pChrom++;
 800bde6:	3401      	adds	r4, #1
          for(j=0; j < 8; j++)
 800bde8:	3501      	adds	r5, #1
 800bdea:	2d07      	cmp	r5, #7
 800bdec:	d9db      	bls.n	800bda6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x12>
 800bdee:	9901      	ldr	r1, [sp, #4]
          }

        refline += JPEG_ConvertorParams.ScaledWidth;          
 800bdf0:	4488      	add	r8, r1
    for(i= 0; i <  8; i++)
 800bdf2:	f10e 0e01 	add.w	lr, lr, #1
 800bdf6:	f1be 0f07 	cmp.w	lr, #7
 800bdfa:	d808      	bhi.n	800be0e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7a>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800bdfc:	4b15      	ldr	r3, [pc, #84]	; (800be54 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xc0>)
 800bdfe:	691b      	ldr	r3, [r3, #16]
 800be00:	4543      	cmp	r3, r8
 800be02:	d9f6      	bls.n	800bdf2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x5e>
        pOutAddr = pOutBuffer+ refline;        
 800be04:	eb0a 0608 	add.w	r6, sl, r8
          for(j=0; j < 8; j++)
 800be08:	2500      	movs	r5, #0
 800be0a:	9101      	str	r1, [sp, #4]
 800be0c:	e7ed      	b.n	800bdea <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x56>
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 800be0e:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
 800be12:	9b02      	ldr	r3, [sp, #8]
 800be14:	9a03      	ldr	r2, [sp, #12]
 800be16:	4413      	add	r3, r2
 800be18:	454b      	cmp	r3, r9
 800be1a:	d914      	bls.n	800be46 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb2>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800be1c:	ea4f 08c9 	mov.w	r8, r9, lsl #3
 800be20:	490c      	ldr	r1, [pc, #48]	; (800be54 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xc0>)
 800be22:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800be24:	fbb8 f2f3 	udiv	r2, r8, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800be28:	fb03 8812 	mls	r8, r3, r2, r8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800be2c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800be2e:	fb01 f202 	mul.w	r2, r1, r2
 800be32:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800be36:	eb08 08c2 	add.w	r8, r8, r2, lsl #3
    currentMCU++;
 800be3a:	f109 0901 	add.w	r9, r9, #1
    pChrom = pInBuffer;
 800be3e:	4604      	mov	r4, r0
    for(i= 0; i <  8; i++)
 800be40:	f04f 0e00 	mov.w	lr, #0
 800be44:	e7d7      	b.n	800bdf6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x62>
  }
  return numberMCU;
}
 800be46:	9802      	ldr	r0, [sp, #8]
 800be48:	b005      	add	sp, #20
 800be4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be4e:	bf00      	nop
 800be50:	80808081 	.word	0x80808081
 800be54:	200006c4 	.word	0x200006c4

0800be58 <JPEG_InitPostProcColorTables>:
  */
void JPEG_InitPostProcColorTables(void)
{
  int32_t index, i; 
    
  for (i = 0; i <= 255; i++) 
 800be58:	2100      	movs	r1, #0
 800be5a:	29ff      	cmp	r1, #255	; 0xff
 800be5c:	dc1f      	bgt.n	800be9e <JPEG_InitPostProcColorTables+0x46>
  {
    index = (i * 2) - 256;
 800be5e:	f1a1 0080 	sub.w	r0, r1, #128	; 0x80
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800be62:	4b0f      	ldr	r3, [pc, #60]	; (800bea0 <JPEG_InitPostProcColorTables+0x48>)
 800be64:	fb03 f300 	mul.w	r3, r3, r0
 800be68:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800be6c:	141b      	asrs	r3, r3, #16
 800be6e:	4a0d      	ldr	r2, [pc, #52]	; (800bea4 <JPEG_InitPostProcColorTables+0x4c>)
 800be70:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800be74:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800be78:	4b0b      	ldr	r3, [pc, #44]	; (800bea8 <JPEG_InitPostProcColorTables+0x50>)
 800be7a:	fb03 f300 	mul.w	r3, r3, r0
 800be7e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800be82:	141b      	asrs	r3, r3, #16
 800be84:	6413      	str	r3, [r2, #64]	; 0x40
    
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 800be86:	4b09      	ldr	r3, [pc, #36]	; (800beac <JPEG_InitPostProcColorTables+0x54>)
 800be88:	fb03 f300 	mul.w	r3, r3, r0
 800be8c:	f8c2 3840 	str.w	r3, [r2, #2112]	; 0x840
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800be90:	4b07      	ldr	r3, [pc, #28]	; (800beb0 <JPEG_InitPostProcColorTables+0x58>)
 800be92:	fb03 f000 	mul.w	r0, r3, r0
 800be96:	f8c2 0c40 	str.w	r0, [r2, #3136]	; 0xc40
  for (i = 0; i <= 255; i++) 
 800be9a:	3101      	adds	r1, #1
 800be9c:	e7dd      	b.n	800be5a <JPEG_InitPostProcColorTables+0x2>
  }  
}
 800be9e:	4770      	bx	lr
 800bea0:	000166e8 	.word	0x000166e8
 800bea4:	200006c4 	.word	0x200006c4
 800bea8:	0001c5a0 	.word	0x0001c5a0
 800beac:	ffff4930 	.word	0xffff4930
 800beb0:	ffffa7e8 	.word	0xffffa7e8

0800beb4 <JPEG_GetDecodeColorConvertFunc>:
{
 800beb4:	b4f0      	push	{r4, r5, r6, r7}
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800beb6:	6807      	ldr	r7, [r0, #0]
 800beb8:	4c3f      	ldr	r4, [pc, #252]	; (800bfb8 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800beba:	6027      	str	r7, [r4, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800bebc:	68c3      	ldr	r3, [r0, #12]
 800bebe:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800bec0:	6885      	ldr	r5, [r0, #8]
 800bec2:	60e5      	str	r5, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800bec4:	fb05 f603 	mul.w	r6, r5, r3
 800bec8:	00b6      	lsls	r6, r6, #2
 800beca:	6126      	str	r6, [r4, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800becc:	6840      	ldr	r0, [r0, #4]
 800bece:	6060      	str	r0, [r4, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800bed0:	2f10      	cmp	r7, #16
 800bed2:	d02c      	beq.n	800bf2e <JPEG_GetDecodeColorConvertFunc+0x7a>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 800bed4:	2f00      	cmp	r7, #0
 800bed6:	d15b      	bne.n	800bf90 <JPEG_GetDecodeColorConvertFunc+0xdc>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800bed8:	4838      	ldr	r0, [pc, #224]	; (800bfbc <JPEG_GetDecodeColorConvertFunc+0x108>)
 800beda:	6008      	str	r0, [r1, #0]
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800bedc:	f003 0107 	and.w	r1, r3, #7
 800bee0:	4835      	ldr	r0, [pc, #212]	; (800bfb8 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800bee2:	6141      	str	r1, [r0, #20]
    if(JPEG_ConvertorParams.LineOffset != 0)
 800bee4:	b111      	cbz	r1, 800beec <JPEG_GetDecodeColorConvertFunc+0x38>
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800bee6:	f1c1 0108 	rsb	r1, r1, #8
 800beea:	6141      	str	r1, [r0, #20]
    JPEG_ConvertorParams.H_factor = 8;
 800beec:	4932      	ldr	r1, [pc, #200]	; (800bfb8 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800beee:	2008      	movs	r0, #8
 800bef0:	61c8      	str	r0, [r1, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 800bef2:	6208      	str	r0, [r1, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800bef4:	4930      	ldr	r1, [pc, #192]	; (800bfb8 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800bef6:	6948      	ldr	r0, [r1, #20]
 800bef8:	4418      	add	r0, r3
 800befa:	6248      	str	r0, [r1, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 800befc:	0098      	lsls	r0, r3, #2
 800befe:	6288      	str	r0, [r1, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800bf00:	69c9      	ldr	r1, [r1, #28]
 800bf02:	fbb3 f0f1 	udiv	r0, r3, r1
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 800bf06:	fb01 3110 	mls	r1, r1, r0, r3
 800bf0a:	b101      	cbz	r1, 800bf0e <JPEG_GetDecodeColorConvertFunc+0x5a>
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 800bf0c:	3001      	adds	r0, #1
  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 800bf0e:	4b2a      	ldr	r3, [pc, #168]	; (800bfb8 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800bf10:	6a19      	ldr	r1, [r3, #32]
 800bf12:	fbb5 f3f1 	udiv	r3, r5, r1
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 800bf16:	fb01 5513 	mls	r5, r1, r3, r5
 800bf1a:	b105      	cbz	r5, 800bf1e <JPEG_GetDecodeColorConvertFunc+0x6a>
    vMCU++; /*+1 for vertical incomplete MCU */                
 800bf1c:	3301      	adds	r3, #1
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800bf1e:	fb03 f300 	mul.w	r3, r3, r0
 800bf22:	4925      	ldr	r1, [pc, #148]	; (800bfb8 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800bf24:	62cb      	str	r3, [r1, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 800bf26:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800bf28:	2000      	movs	r0, #0
}
 800bf2a:	bcf0      	pop	{r4, r5, r6, r7}
 800bf2c:	4770      	bx	lr
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800bf2e:	2801      	cmp	r0, #1
 800bf30:	d010      	beq.n	800bf54 <JPEG_GetDecodeColorConvertFunc+0xa0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800bf32:	2802      	cmp	r0, #2
 800bf34:	d01c      	beq.n	800bf70 <JPEG_GetDecodeColorConvertFunc+0xbc>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 800bf36:	4822      	ldr	r0, [pc, #136]	; (800bfc0 <JPEG_GetDecodeColorConvertFunc+0x10c>)
 800bf38:	6008      	str	r0, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800bf3a:	f003 0107 	and.w	r1, r3, #7
 800bf3e:	481e      	ldr	r0, [pc, #120]	; (800bfb8 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800bf40:	6141      	str	r1, [r0, #20]
      if(JPEG_ConvertorParams.LineOffset != 0)
 800bf42:	b111      	cbz	r1, 800bf4a <JPEG_GetDecodeColorConvertFunc+0x96>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800bf44:	f1c1 0108 	rsb	r1, r1, #8
 800bf48:	6141      	str	r1, [r0, #20]
      JPEG_ConvertorParams.H_factor = 8;
 800bf4a:	491b      	ldr	r1, [pc, #108]	; (800bfb8 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800bf4c:	2008      	movs	r0, #8
 800bf4e:	61c8      	str	r0, [r1, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800bf50:	6208      	str	r0, [r1, #32]
 800bf52:	e7cf      	b.n	800bef4 <JPEG_GetDecodeColorConvertFunc+0x40>
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 800bf54:	481b      	ldr	r0, [pc, #108]	; (800bfc4 <JPEG_GetDecodeColorConvertFunc+0x110>)
 800bf56:	6008      	str	r0, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 800bf58:	f003 010f 	and.w	r1, r3, #15
 800bf5c:	6161      	str	r1, [r4, #20]
      if(JPEG_ConvertorParams.LineOffset != 0)
 800bf5e:	b111      	cbz	r1, 800bf66 <JPEG_GetDecodeColorConvertFunc+0xb2>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800bf60:	f1c1 0110 	rsb	r1, r1, #16
 800bf64:	6161      	str	r1, [r4, #20]
      JPEG_ConvertorParams.H_factor = 16;
 800bf66:	4914      	ldr	r1, [pc, #80]	; (800bfb8 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800bf68:	2010      	movs	r0, #16
 800bf6a:	61c8      	str	r0, [r1, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 800bf6c:	6208      	str	r0, [r1, #32]
 800bf6e:	e7c1      	b.n	800bef4 <JPEG_GetDecodeColorConvertFunc+0x40>
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 800bf70:	4815      	ldr	r0, [pc, #84]	; (800bfc8 <JPEG_GetDecodeColorConvertFunc+0x114>)
 800bf72:	6008      	str	r0, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 800bf74:	f003 010f 	and.w	r1, r3, #15
 800bf78:	480f      	ldr	r0, [pc, #60]	; (800bfb8 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800bf7a:	6141      	str	r1, [r0, #20]
      if(JPEG_ConvertorParams.LineOffset != 0)
 800bf7c:	b111      	cbz	r1, 800bf84 <JPEG_GetDecodeColorConvertFunc+0xd0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800bf7e:	f1c1 0110 	rsb	r1, r1, #16
 800bf82:	6141      	str	r1, [r0, #20]
      JPEG_ConvertorParams.H_factor = 16;
 800bf84:	490c      	ldr	r1, [pc, #48]	; (800bfb8 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800bf86:	2010      	movs	r0, #16
 800bf88:	61c8      	str	r0, [r1, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800bf8a:	2008      	movs	r0, #8
 800bf8c:	6208      	str	r0, [r1, #32]
 800bf8e:	e7b1      	b.n	800bef4 <JPEG_GetDecodeColorConvertFunc+0x40>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 800bf90:	2f30      	cmp	r7, #48	; 0x30
 800bf92:	d10e      	bne.n	800bfb2 <JPEG_GetDecodeColorConvertFunc+0xfe>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 800bf94:	480d      	ldr	r0, [pc, #52]	; (800bfcc <JPEG_GetDecodeColorConvertFunc+0x118>)
 800bf96:	6008      	str	r0, [r1, #0]
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800bf98:	f003 0107 	and.w	r1, r3, #7
 800bf9c:	4806      	ldr	r0, [pc, #24]	; (800bfb8 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800bf9e:	6141      	str	r1, [r0, #20]
    if(JPEG_ConvertorParams.LineOffset != 0)
 800bfa0:	b111      	cbz	r1, 800bfa8 <JPEG_GetDecodeColorConvertFunc+0xf4>
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800bfa2:	f1c1 0108 	rsb	r1, r1, #8
 800bfa6:	6141      	str	r1, [r0, #20]
    JPEG_ConvertorParams.H_factor = 8;
 800bfa8:	4903      	ldr	r1, [pc, #12]	; (800bfb8 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800bfaa:	2008      	movs	r0, #8
 800bfac:	61c8      	str	r0, [r1, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 800bfae:	6208      	str	r0, [r1, #32]
 800bfb0:	e7a0      	b.n	800bef4 <JPEG_GetDecodeColorConvertFunc+0x40>
    return HAL_ERROR; /* Color space Not supported*/
 800bfb2:	2001      	movs	r0, #1
 800bfb4:	e7b9      	b.n	800bf2a <JPEG_GetDecodeColorConvertFunc+0x76>
 800bfb6:	bf00      	nop
 800bfb8:	200006c4 	.word	0x200006c4
 800bfbc:	0800bd15 	.word	0x0800bd15
 800bfc0:	0800bc25 	.word	0x0800bc25
 800bfc4:	0800b939 	.word	0x0800b939
 800bfc8:	0800baf1 	.word	0x0800baf1
 800bfcc:	0800bd95 	.word	0x0800bd95

0800bfd0 <JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitColorTables(void)
{
 800bfd0:	b508      	push	{r3, lr}
  JPEG_InitPreProcColorTables();
  JPEG_Init_MCU_LUT();
#endif

#if (USE_JPEG_DECODER == 1)
  JPEG_InitPostProcColorTables();
 800bfd2:	f7ff ff41 	bl	800be58 <JPEG_InitPostProcColorTables>
#endif

}
 800bfd6:	bd08      	pop	{r3, pc}

0800bfd8 <SAIx_In_DeInit>:
     /**
       * @brief  Deinitializes the output Audio Codec audio interface (SAI).
       * @retval None
       */
     static void SAIx_In_DeInit(void)
     {
 800bfd8:	b510      	push	{r4, lr}
         /* Initialize the haudio_in_sai Instance parameter */
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800bfda:	4808      	ldr	r0, [pc, #32]	; (800bffc <SAIx_In_DeInit+0x24>)
 800bfdc:	4b08      	ldr	r3, [pc, #32]	; (800c000 <SAIx_In_DeInit+0x28>)
 800bfde:	6003      	str	r3, [r0, #0]
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800bfe0:	4c08      	ldr	r4, [pc, #32]	; (800c004 <SAIx_In_DeInit+0x2c>)
 800bfe2:	4a09      	ldr	r2, [pc, #36]	; (800c008 <SAIx_In_DeInit+0x30>)
 800bfe4:	6022      	str	r2, [r4, #0]
         /* Disable SAI peripheral */
         __HAL_SAI_DISABLE(&haudio_in_sai);
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bfec:	601a      	str	r2, [r3, #0]

         HAL_SAI_DeInit(&haudio_in_sai);
 800bfee:	f7fc fbe6 	bl	80087be <HAL_SAI_DeInit>
         HAL_SAI_DeInit(&haudio_out_sai);
 800bff2:	4620      	mov	r0, r4
 800bff4:	f7fc fbe3 	bl	80087be <HAL_SAI_DeInit>
     }
 800bff8:	bd10      	pop	{r4, pc}
 800bffa:	bf00      	nop
 800bffc:	200017ec 	.word	0x200017ec
 800c000:	40015824 	.word	0x40015824
 800c004:	200018d0 	.word	0x200018d0
 800c008:	40015804 	.word	0x40015804

0800c00c <SAI_AUDIO_IN_MspInit>:
       * @brief  Initializes SAI Audio IN MSP.
       * @param  hsai: SAI handle
       * @retval None
       */
     static void SAI_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
     {
 800c00c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c00e:	b08b      	sub	sp, #44	; 0x2c
 800c010:	4605      	mov	r5, r0
         static DMA_HandleTypeDef hdma_sai_rx;
         GPIO_InitTypeDef  gpio_init_structure;

         /* Enable SAI clock */
         AUDIO_IN_SAIx_CLK_ENABLE();
 800c012:	4c3b      	ldr	r4, [pc, #236]	; (800c100 <SAI_AUDIO_IN_MspInit+0xf4>)
 800c014:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c016:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c01a:	6463      	str	r3, [r4, #68]	; 0x44
 800c01c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c01e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c022:	9301      	str	r3, [sp, #4]
 800c024:	9b01      	ldr	r3, [sp, #4]

         /* Enable SD GPIO clock */
         AUDIO_IN_SAIx_SD_ENABLE();
 800c026:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c028:	f043 0310 	orr.w	r3, r3, #16
 800c02c:	6323      	str	r3, [r4, #48]	; 0x30
 800c02e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c030:	f003 0310 	and.w	r3, r3, #16
 800c034:	9302      	str	r3, [sp, #8]
 800c036:	9b02      	ldr	r3, [sp, #8]
         /* CODEC_SAI pin configuration: SD pin */
         gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800c038:	2308      	movs	r3, #8
 800c03a:	9305      	str	r3, [sp, #20]
         gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800c03c:	2602      	movs	r6, #2
 800c03e:	9606      	str	r6, [sp, #24]
         gpio_init_structure.Pull = GPIO_NOPULL;
 800c040:	2700      	movs	r7, #0
 800c042:	9707      	str	r7, [sp, #28]
         gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800c044:	9608      	str	r6, [sp, #32]
         gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 800c046:	2306      	movs	r3, #6
 800c048:	9309      	str	r3, [sp, #36]	; 0x24
         HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800c04a:	a905      	add	r1, sp, #20
 800c04c:	482d      	ldr	r0, [pc, #180]	; (800c104 <SAI_AUDIO_IN_MspInit+0xf8>)
 800c04e:	f7f8 fecd 	bl	8004dec <HAL_GPIO_Init>

         /* Enable Audio INT GPIO clock */
         AUDIO_IN_INT_GPIO_ENABLE();
 800c052:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c054:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c058:	6323      	str	r3, [r4, #48]	; 0x30
 800c05a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c05c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c060:	9303      	str	r3, [sp, #12]
 800c062:	9b03      	ldr	r3, [sp, #12]
         /* Audio INT pin configuration: input */
         gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 800c064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c068:	9305      	str	r3, [sp, #20]
         gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800c06a:	9706      	str	r7, [sp, #24]
         gpio_init_structure.Pull = GPIO_NOPULL;
 800c06c:	9707      	str	r7, [sp, #28]
         gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800c06e:	9608      	str	r6, [sp, #32]
         HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 800c070:	a905      	add	r1, sp, #20
 800c072:	4825      	ldr	r0, [pc, #148]	; (800c108 <SAI_AUDIO_IN_MspInit+0xfc>)
 800c074:	f7f8 feba 	bl	8004dec <HAL_GPIO_Init>

         /* Enable the DMA clock */
         AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800c078:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c07a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c07e:	6323      	str	r3, [r4, #48]	; 0x30
 800c080:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c086:	9304      	str	r3, [sp, #16]
 800c088:	9b04      	ldr	r3, [sp, #16]

         if (hsai->Instance == AUDIO_IN_SAIx)
 800c08a:	682a      	ldr	r2, [r5, #0]
 800c08c:	4b1f      	ldr	r3, [pc, #124]	; (800c10c <SAI_AUDIO_IN_MspInit+0x100>)
 800c08e:	429a      	cmp	r2, r3
 800c090:	d011      	beq.n	800c0b6 <SAI_AUDIO_IN_MspInit+0xaa>
             /* Configure the DMA Stream */
             HAL_DMA_Init(&hdma_sai_rx);
         }

         /* SAI DMA IRQ Channel configuration */
         HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800c092:	2200      	movs	r2, #0
 800c094:	210f      	movs	r1, #15
 800c096:	203c      	movs	r0, #60	; 0x3c
 800c098:	f7f7 ff52 	bl	8003f40 <HAL_NVIC_SetPriority>
         HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800c09c:	203c      	movs	r0, #60	; 0x3c
 800c09e:	f7f7 ff81 	bl	8003fa4 <HAL_NVIC_EnableIRQ>

         /* Audio INT IRQ Channel configuration */
         HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	210f      	movs	r1, #15
 800c0a6:	2028      	movs	r0, #40	; 0x28
 800c0a8:	f7f7 ff4a 	bl	8003f40 <HAL_NVIC_SetPriority>
         HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 800c0ac:	2028      	movs	r0, #40	; 0x28
 800c0ae:	f7f7 ff79 	bl	8003fa4 <HAL_NVIC_EnableIRQ>
     }
 800c0b2:	b00b      	add	sp, #44	; 0x2c
 800c0b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
             hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 800c0b6:	4c16      	ldr	r4, [pc, #88]	; (800c110 <SAI_AUDIO_IN_MspInit+0x104>)
 800c0b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c0bc:	6063      	str	r3, [r4, #4]
             hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800c0be:	60a7      	str	r7, [r4, #8]
             hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800c0c0:	60e7      	str	r7, [r4, #12]
             hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800c0c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c0c6:	6122      	str	r2, [r4, #16]
             hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800c0c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0cc:	6162      	str	r2, [r4, #20]
             hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 800c0ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c0d2:	61a2      	str	r2, [r4, #24]
             hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800c0d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c0d8:	61e2      	str	r2, [r4, #28]
             hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800c0da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c0de:	6222      	str	r2, [r4, #32]
             hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800c0e0:	6267      	str	r7, [r4, #36]	; 0x24
             hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800c0e2:	2203      	movs	r2, #3
 800c0e4:	62a2      	str	r2, [r4, #40]	; 0x28
             hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800c0e6:	62e7      	str	r7, [r4, #44]	; 0x2c
             hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800c0e8:	6327      	str	r7, [r4, #48]	; 0x30
             hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800c0ea:	4b0a      	ldr	r3, [pc, #40]	; (800c114 <SAI_AUDIO_IN_MspInit+0x108>)
 800c0ec:	6023      	str	r3, [r4, #0]
             __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800c0ee:	672c      	str	r4, [r5, #112]	; 0x70
 800c0f0:	63a5      	str	r5, [r4, #56]	; 0x38
             HAL_DMA_DeInit(&hdma_sai_rx);
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f7f8 f85c 	bl	80041b0 <HAL_DMA_DeInit>
             HAL_DMA_Init(&hdma_sai_rx);
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f7f7 fff3 	bl	80040e4 <HAL_DMA_Init>
 800c0fe:	e7c8      	b.n	800c092 <SAI_AUDIO_IN_MspInit+0x86>
 800c100:	40023800 	.word	0x40023800
 800c104:	40021000 	.word	0x40021000
 800c108:	40022400 	.word	0x40022400
 800c10c:	40015824 	.word	0x40015824
 800c110:	20001704 	.word	0x20001704
 800c114:	40026470 	.word	0x40026470

0800c118 <SAIx_In_Init>:
     {
 800c118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c11c:	b083      	sub	sp, #12
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800c11e:	4c38      	ldr	r4, [pc, #224]	; (800c200 <SAIx_In_Init+0xe8>)
 800c120:	4b38      	ldr	r3, [pc, #224]	; (800c204 <SAIx_In_Init+0xec>)
 800c122:	6023      	str	r3, [r4, #0]
         __HAL_SAI_DISABLE(&haudio_out_sai);
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c12a:	601a      	str	r2, [r3, #0]
         haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 800c12c:	2600      	movs	r6, #0
 800c12e:	6266      	str	r6, [r4, #36]	; 0x24
         haudio_out_sai.Init.AudioFrequency = AudioFreq;
 800c130:	9001      	str	r0, [sp, #4]
 800c132:	61e0      	str	r0, [r4, #28]
         haudio_out_sai.Init.AudioMode      = SAI_MODEMASTER_TX;
 800c134:	6066      	str	r6, [r4, #4]
         haudio_out_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 800c136:	6166      	str	r6, [r4, #20]
         haudio_out_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 800c138:	6326      	str	r6, [r4, #48]	; 0x30
         haudio_out_sai.Init.DataSize       = SAI_DATASIZE_16;
 800c13a:	f04f 0b80 	mov.w	fp, #128	; 0x80
 800c13e:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
         haudio_out_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 800c142:	63a6      	str	r6, [r4, #56]	; 0x38
         haudio_out_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 800c144:	63e6      	str	r6, [r4, #60]	; 0x3c
         haudio_out_sai.Init.Synchro        = SAI_ASYNCHRONOUS;
 800c146:	60a6      	str	r6, [r4, #8]
         haudio_out_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 800c148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c14c:	6123      	str	r3, [r4, #16]
         haudio_out_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 800c14e:	2701      	movs	r7, #1
 800c150:	61a7      	str	r7, [r4, #24]
         haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 800c152:	60e6      	str	r6, [r4, #12]
         haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 800c154:	62a6      	str	r6, [r4, #40]	; 0x28
         haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 800c156:	62e6      	str	r6, [r4, #44]	; 0x2c
         haudio_out_sai.Init.Mckdiv         = 0;
 800c158:	6226      	str	r6, [r4, #32]
         haudio_out_sai.FrameInit.FrameLength       = 64;
 800c15a:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800c15e:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
         haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800c162:	f04f 0920 	mov.w	r9, #32
 800c166:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
         haudio_out_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 800c16a:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800c16e:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
         haudio_out_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800c172:	64e6      	str	r6, [r4, #76]	; 0x4c
         haudio_out_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 800c174:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c178:	6522      	str	r2, [r4, #80]	; 0x50
         haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800c17a:	6566      	str	r6, [r4, #84]	; 0x54
         haudio_out_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 800c17c:	65a6      	str	r6, [r4, #88]	; 0x58
         haudio_out_sai.SlotInit.SlotNumber     = 4;
 800c17e:	2204      	movs	r2, #4
 800c180:	65e2      	str	r2, [r4, #92]	; 0x5c
         haudio_out_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 800c182:	220f      	movs	r2, #15
 800c184:	6622      	str	r2, [r4, #96]	; 0x60
         HAL_SAI_Init(&haudio_out_sai);
 800c186:	4620      	mov	r0, r4
 800c188:	f7fc fa14 	bl	80085b4 <HAL_SAI_Init>
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800c18c:	4d1e      	ldr	r5, [pc, #120]	; (800c208 <SAIx_In_Init+0xf0>)
 800c18e:	4b1f      	ldr	r3, [pc, #124]	; (800c20c <SAIx_In_Init+0xf4>)
 800c190:	602b      	str	r3, [r5, #0]
         __HAL_SAI_DISABLE(&haudio_in_sai);
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c198:	601a      	str	r2, [r3, #0]
         haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 800c19a:	626e      	str	r6, [r5, #36]	; 0x24
         haudio_in_sai.Init.AudioFrequency = AudioFreq;
 800c19c:	9b01      	ldr	r3, [sp, #4]
 800c19e:	61eb      	str	r3, [r5, #28]
         haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 800c1a0:	2303      	movs	r3, #3
 800c1a2:	606b      	str	r3, [r5, #4]
         haudio_in_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 800c1a4:	616e      	str	r6, [r5, #20]
         haudio_in_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 800c1a6:	632e      	str	r6, [r5, #48]	; 0x30
         haudio_in_sai.Init.DataSize       = SAI_DATASIZE_16;
 800c1a8:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
         haudio_in_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 800c1ac:	63ae      	str	r6, [r5, #56]	; 0x38
         haudio_in_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 800c1ae:	63ee      	str	r6, [r5, #60]	; 0x3c
         haudio_in_sai.Init.Synchro        = SAI_SYNCHRONOUS;
 800c1b0:	60af      	str	r7, [r5, #8]
         haudio_in_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_DISABLE;
 800c1b2:	612e      	str	r6, [r5, #16]
         haudio_in_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 800c1b4:	61af      	str	r7, [r5, #24]
         haudio_in_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 800c1b6:	60ee      	str	r6, [r5, #12]
         haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 800c1b8:	62ae      	str	r6, [r5, #40]	; 0x28
         haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 800c1ba:	2310      	movs	r3, #16
 800c1bc:	62eb      	str	r3, [r5, #44]	; 0x2c
         haudio_in_sai.Init.Mckdiv         = 0;
 800c1be:	622e      	str	r6, [r5, #32]
         haudio_in_sai.FrameInit.FrameLength       = 64;
 800c1c0:	f8c5 a040 	str.w	sl, [r5, #64]	; 0x40
         haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 800c1c4:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
         haudio_in_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 800c1c8:	f8c5 8048 	str.w	r8, [r5, #72]	; 0x48
         haudio_in_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800c1cc:	64ee      	str	r6, [r5, #76]	; 0x4c
         haudio_in_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 800c1ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c1d2:	652b      	str	r3, [r5, #80]	; 0x50
         haudio_in_sai.SlotInit.FirstBitOffset = 0;
 800c1d4:	656e      	str	r6, [r5, #84]	; 0x54
         haudio_in_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 800c1d6:	65ae      	str	r6, [r5, #88]	; 0x58
         haudio_in_sai.SlotInit.SlotNumber     = 4;
 800c1d8:	2304      	movs	r3, #4
 800c1da:	65eb      	str	r3, [r5, #92]	; 0x5c
         haudio_in_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 800c1dc:	230f      	movs	r3, #15
 800c1de:	662b      	str	r3, [r5, #96]	; 0x60
         HAL_SAI_Init(&haudio_in_sai);
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	f7fc f9e7 	bl	80085b4 <HAL_SAI_Init>
         __HAL_SAI_ENABLE(&haudio_in_sai);
 800c1e6:	682a      	ldr	r2, [r5, #0]
 800c1e8:	6813      	ldr	r3, [r2, #0]
 800c1ea:	ea43 0308 	orr.w	r3, r3, r8
 800c1ee:	6013      	str	r3, [r2, #0]
         __HAL_SAI_ENABLE(&haudio_out_sai);
 800c1f0:	6822      	ldr	r2, [r4, #0]
 800c1f2:	6813      	ldr	r3, [r2, #0]
 800c1f4:	ea43 0308 	orr.w	r3, r3, r8
 800c1f8:	6013      	str	r3, [r2, #0]
     }
 800c1fa:	b003      	add	sp, #12
 800c1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c200:	200018d0 	.word	0x200018d0
 800c204:	40015804 	.word	0x40015804
 800c208:	200017ec 	.word	0x200017ec
 800c20c:	40015824 	.word	0x40015824

0800c210 <BSP_AUDIO_IN_OUT_Init>:



uint8_t BSP_AUDIO_IN_OUT_Init(uint32_t AudioFreq)
     {
 800c210:	b538      	push	{r3, r4, r5, lr}
 800c212:	4604      	mov	r4, r0
         uint8_t ret = AUDIO_ERROR;

         /* Disable SAI */
         SAIx_In_DeInit();
 800c214:	f7ff fee0 	bl	800bfd8 <SAIx_In_DeInit>

         /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
         BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL);
 800c218:	4d19      	ldr	r5, [pc, #100]	; (800c280 <BSP_AUDIO_IN_OUT_Init+0x70>)
 800c21a:	2200      	movs	r2, #0
 800c21c:	4621      	mov	r1, r4
 800c21e:	4628      	mov	r0, r5
 800c220:	f7f5 faee 	bl	8001800 <BSP_AUDIO_OUT_ClockConfig>
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800c224:	4b17      	ldr	r3, [pc, #92]	; (800c284 <BSP_AUDIO_IN_OUT_Init+0x74>)
 800c226:	4a18      	ldr	r2, [pc, #96]	; (800c288 <BSP_AUDIO_IN_OUT_Init+0x78>)
 800c228:	601a      	str	r2, [r3, #0]
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800c22a:	4b18      	ldr	r3, [pc, #96]	; (800c28c <BSP_AUDIO_IN_OUT_Init+0x7c>)
 800c22c:	602b      	str	r3, [r5, #0]
         if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 800c22e:	4628      	mov	r0, r5
 800c230:	f7fc fc17 	bl	8008a62 <HAL_SAI_GetState>
 800c234:	b160      	cbz	r0, 800c250 <BSP_AUDIO_IN_OUT_Init+0x40>
             BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
             SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
         }


         SAIx_In_Init(AudioFreq); // inclu déja le code de SAIx_Out_Init()
 800c236:	4620      	mov	r0, r4
 800c238:	f7ff ff6e 	bl	800c118 <SAIx_In_Init>


         if ((wm8994_drv.ReadID(AUDIO_I2C_ADDRESS)) == WM8994_ID)
 800c23c:	4b14      	ldr	r3, [pc, #80]	; (800c290 <BSP_AUDIO_IN_OUT_Init+0x80>)
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	2034      	movs	r0, #52	; 0x34
 800c242:	4798      	blx	r3
 800c244:	f648 1394 	movw	r3, #35220	; 0x8994
 800c248:	4298      	cmp	r0, r3
 800c24a:	d00a      	beq.n	800c262 <BSP_AUDIO_IN_OUT_Init+0x52>
             wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
             /* Initialize the audio driver structure */
             audio_drv = &wm8994_drv;
             ret = AUDIO_OK;
         } else {
             ret = AUDIO_ERROR;
 800c24c:	2001      	movs	r0, #1
             audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_ANALOG_MIC | OUTPUT_DEVICE_HEADPHONE , 100, AudioFreq);
         }

         /* Return AUDIO_OK when all operations are correctly done */
         return ret;
     }
 800c24e:	bd38      	pop	{r3, r4, r5, pc}
             BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 800c250:	2100      	movs	r1, #0
 800c252:	480c      	ldr	r0, [pc, #48]	; (800c284 <BSP_AUDIO_IN_OUT_Init+0x74>)
 800c254:	f7f5 fa40 	bl	80016d8 <BSP_AUDIO_OUT_MspInit>
             SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 800c258:	2100      	movs	r1, #0
 800c25a:	4628      	mov	r0, r5
 800c25c:	f7ff fed6 	bl	800c00c <SAI_AUDIO_IN_MspInit>
 800c260:	e7e9      	b.n	800c236 <BSP_AUDIO_IN_OUT_Init+0x26>
             wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800c262:	4d0b      	ldr	r5, [pc, #44]	; (800c290 <BSP_AUDIO_IN_OUT_Init+0x80>)
 800c264:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c266:	2034      	movs	r0, #52	; 0x34
 800c268:	4798      	blx	r3
             audio_drv = &wm8994_drv;
 800c26a:	4b0a      	ldr	r3, [pc, #40]	; (800c294 <BSP_AUDIO_IN_OUT_Init+0x84>)
 800c26c:	661d      	str	r5, [r3, #96]	; 0x60
             audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_ANALOG_MIC | OUTPUT_DEVICE_HEADPHONE , 100, AudioFreq);
 800c26e:	682d      	ldr	r5, [r5, #0]
 800c270:	4623      	mov	r3, r4
 800c272:	2264      	movs	r2, #100	; 0x64
 800c274:	f240 3102 	movw	r1, #770	; 0x302
 800c278:	2034      	movs	r0, #52	; 0x34
 800c27a:	47a8      	blx	r5
             ret = AUDIO_OK;
 800c27c:	2000      	movs	r0, #0
 800c27e:	e7e6      	b.n	800c24e <BSP_AUDIO_IN_OUT_Init+0x3e>
 800c280:	200017ec 	.word	0x200017ec
 800c284:	200018d0 	.word	0x200018d0
 800c288:	40015804 	.word	0x40015804
 800c28c:	40015824 	.word	0x40015824
 800c290:	20000028 	.word	0x20000028
 800c294:	20001704 	.word	0x20001704

0800c298 <_BSP_AUDIO_OUT_Play>:


     uint8_t _BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
     {
 800c298:	b538      	push	{r3, r4, r5, lr}
 800c29a:	4604      	mov	r4, r0
         /* Call the audio Codec Play function */
         if (audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *)pBuffer, Size) != 0)
 800c29c:	4b09      	ldr	r3, [pc, #36]	; (800c2c4 <_BSP_AUDIO_OUT_Play+0x2c>)
 800c29e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	b28d      	uxth	r5, r1
 800c2a4:	462a      	mov	r2, r5
 800c2a6:	4601      	mov	r1, r0
 800c2a8:	2034      	movs	r0, #52	; 0x34
 800c2aa:	4798      	blx	r3
 800c2ac:	b108      	cbz	r0, 800c2b2 <_BSP_AUDIO_OUT_Play+0x1a>
         {
             return AUDIO_ERROR;
 800c2ae:	2001      	movs	r0, #1
             //if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE)) !=  HAL_OK)
             if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, Size) !=  HAL_OK)
                 return AUDIO_ERROR;
             return AUDIO_OK;
         }
     }
 800c2b0:	bd38      	pop	{r3, r4, r5, pc}
             if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, Size) !=  HAL_OK)
 800c2b2:	462a      	mov	r2, r5
 800c2b4:	4621      	mov	r1, r4
 800c2b6:	4804      	ldr	r0, [pc, #16]	; (800c2c8 <_BSP_AUDIO_OUT_Play+0x30>)
 800c2b8:	f7fc faa2 	bl	8008800 <HAL_SAI_Transmit_DMA>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	d0f7      	beq.n	800c2b0 <_BSP_AUDIO_OUT_Play+0x18>
                 return AUDIO_ERROR;
 800c2c0:	2001      	movs	r0, #1
 800c2c2:	e7f5      	b.n	800c2b0 <_BSP_AUDIO_OUT_Play+0x18>
 800c2c4:	20001704 	.word	0x20001704
 800c2c8:	200018d0 	.word	0x200018d0
 800c2cc:	00000000 	.word	0x00000000

0800c2d0 <FFT>:
 *  Created on: Dec 7, 2021
 *      Author: Patrick
 */
#include <fft.h>

short FFT(short int dir, long m, double* x,double* y) { // m == -1 --> FFT, m == 1 --> IFFT
 800c2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d4:	ed2d 8b04 	vpush	{d8-d9}
 800c2d8:	4682      	mov	sl, r0
 800c2da:	4689      	mov	r9, r1
 800c2dc:	4614      	mov	r4, r2
 800c2de:	461d      	mov	r5, r3
	long n,i,i1,j,k,i2,l,l1,l2;
	double c1,c2,tx,ty,t1,t2,u1,u2,z;

	/* Calculate the number of points */
	n = 1;
	for (i=0;i<m;i++)
 800c2e0:	2300      	movs	r3, #0
	n = 1;
 800c2e2:	2601      	movs	r6, #1
	for (i=0;i<m;i++)
 800c2e4:	e001      	b.n	800c2ea <FFT+0x1a>
	n *= 2;
 800c2e6:	0076      	lsls	r6, r6, #1
	for (i=0;i<m;i++)
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	454b      	cmp	r3, r9
 800c2ec:	dbfb      	blt.n	800c2e6 <FFT+0x16>

	/* Do the bit reversal */
	i2 = n >> 1;
 800c2ee:	ea4f 0c66 	mov.w	ip, r6, asr #1
	j = 0;
 800c2f2:	2200      	movs	r2, #0
	for (i=0;i<n-1;i++) {
 800c2f4:	4611      	mov	r1, r2
 800c2f6:	e005      	b.n	800c304 <FFT+0x34>
		 x[j] = tx;
		 y[j] = ty;
	  }
	  k = i2;
	  while (k <= j) {
		 j -= k;
 800c2f8:	1ad2      	subs	r2, r2, r3
		 k >>= 1;
 800c2fa:	105b      	asrs	r3, r3, #1
	  while (k <= j) {
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	dafb      	bge.n	800c2f8 <FFT+0x28>
	  }
	  j += k;
 800c300:	441a      	add	r2, r3
	for (i=0;i<n-1;i++) {
 800c302:	3101      	adds	r1, #1
 800c304:	1e73      	subs	r3, r6, #1
 800c306:	428b      	cmp	r3, r1
 800c308:	dd1b      	ble.n	800c342 <FFT+0x72>
	  if (i < j) {
 800c30a:	4291      	cmp	r1, r2
 800c30c:	da17      	bge.n	800c33e <FFT+0x6e>
		 tx = x[i];
 800c30e:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 800c312:	ed93 6b00 	vldr	d6, [r3]
		 ty = y[i];
 800c316:	eb05 07c1 	add.w	r7, r5, r1, lsl #3
 800c31a:	ed97 7b00 	vldr	d7, [r7]
		 x[i] = x[j];
 800c31e:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 800c322:	ed90 5b00 	vldr	d5, [r0]
 800c326:	ed83 5b00 	vstr	d5, [r3]
		 y[i] = y[j];
 800c32a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 800c32e:	ed93 5b00 	vldr	d5, [r3]
 800c332:	ed87 5b00 	vstr	d5, [r7]
		 x[j] = tx;
 800c336:	ed80 6b00 	vstr	d6, [r0]
		 y[j] = ty;
 800c33a:	ed83 7b00 	vstr	d7, [r3]
	  k = i2;
 800c33e:	4663      	mov	r3, ip
	  while (k <= j) {
 800c340:	e7dc      	b.n	800c2fc <FFT+0x2c>
	}

	/* Compute the FFT */
	c1 = -1.0;
	c2 = 0.0;
 800c342:	ed9f 9b4d 	vldr	d9, [pc, #308]	; 800c478 <FFT+0x1a8>
	c1 = -1.0;
 800c346:	eebf 8b00 	vmov.f64	d8, #240	; 0xbf800000 -1.0
	l2 = 1;
 800c34a:	f04f 0c01 	mov.w	ip, #1
	for (l=0;l<m;l++) {
 800c34e:	f04f 0800 	mov.w	r8, #0
 800c352:	e05e      	b.n	800c412 <FFT+0x142>
	  l2 <<= 1;
	  u1 = 1.0;
	  u2 = 0.0;
	  for (j=0;j<l1;j++) {
		 for (i=j;i<n;i+=l2) {
			i1 = i + l1;
 800c354:	eb03 020c 	add.w	r2, r3, ip
			t1 = u1 * x[i1] - u2 * y[i1];
 800c358:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
 800c35c:	ed91 7b00 	vldr	d7, [r1]
 800c360:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800c364:	ed92 5b00 	vldr	d5, [r2]
 800c368:	ee25 2b04 	vmul.f64	d2, d5, d4
 800c36c:	ee17 2b03 	vnmls.f64	d2, d7, d3
			t2 = u1 * y[i1] + u2 * x[i1];
 800c370:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c374:	ee05 7b03 	vmla.f64	d7, d5, d3
			x[i1] = x[i] - t1;
 800c378:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
 800c37c:	ed90 5b00 	vldr	d5, [r0]
 800c380:	ee35 5b42 	vsub.f64	d5, d5, d2
 800c384:	ed81 5b00 	vstr	d5, [r1]
			y[i1] = y[i] - t2;
 800c388:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 800c38c:	ed91 5b00 	vldr	d5, [r1]
 800c390:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c394:	ed82 5b00 	vstr	d5, [r2]
			x[i] += t1;
 800c398:	ed90 6b00 	vldr	d6, [r0]
 800c39c:	ee36 6b02 	vadd.f64	d6, d6, d2
 800c3a0:	ed80 6b00 	vstr	d6, [r0]
			y[i] += t2;
 800c3a4:	ed91 6b00 	vldr	d6, [r1]
 800c3a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c3ac:	ed81 7b00 	vstr	d7, [r1]
		 for (i=j;i<n;i+=l2) {
 800c3b0:	443b      	add	r3, r7
 800c3b2:	429e      	cmp	r6, r3
 800c3b4:	dcce      	bgt.n	800c354 <FFT+0x84>
		 }
		 z =  u1 * c1 - u2 * c2;
 800c3b6:	ee29 7b04 	vmul.f64	d7, d9, d4
		 u2 = u1 * c2 + u2 * c1;
 800c3ba:	ee28 4b04 	vmul.f64	d4, d8, d4
 800c3be:	ee09 4b03 	vmla.f64	d4, d9, d3
	  for (j=0;j<l1;j++) {
 800c3c2:	f10e 0e01 	add.w	lr, lr, #1
		 u1 = z;
 800c3c6:	ee18 7b03 	vnmls.f64	d7, d8, d3
 800c3ca:	eeb0 3b47 	vmov.f64	d3, d7
	  for (j=0;j<l1;j++) {
 800c3ce:	45e6      	cmp	lr, ip
 800c3d0:	da01      	bge.n	800c3d6 <FFT+0x106>
		 for (i=j;i<n;i+=l2) {
 800c3d2:	4673      	mov	r3, lr
 800c3d4:	e7ed      	b.n	800c3b2 <FFT+0xe2>
	  }
	  c2 = sqrt((1.0 - c1) / 2.0);
 800c3d6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c3da:	ee37 7b48 	vsub.f64	d7, d7, d8
 800c3de:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 800c3e2:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c3e6:	f002 fc63 	bl	800ecb0 <sqrt>
 800c3ea:	eeb0 9b40 	vmov.f64	d9, d0
	  if (dir == 1)
 800c3ee:	f1ba 0f01 	cmp.w	sl, #1
 800c3f2:	d019      	beq.n	800c428 <FFT+0x158>
		 c2 = -c2;
	  c1 = sqrt((1.0 + c1) / 2.0);
 800c3f4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c3f8:	ee38 8b07 	vadd.f64	d8, d8, d7
 800c3fc:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 800c400:	ee28 0b00 	vmul.f64	d0, d8, d0
 800c404:	f002 fc54 	bl	800ecb0 <sqrt>
 800c408:	eeb0 8b40 	vmov.f64	d8, d0
	for (l=0;l<m;l++) {
 800c40c:	f108 0801 	add.w	r8, r8, #1
	  l2 <<= 1;
 800c410:	46bc      	mov	ip, r7
	for (l=0;l<m;l++) {
 800c412:	45c8      	cmp	r8, r9
 800c414:	da0b      	bge.n	800c42e <FFT+0x15e>
	  l2 <<= 1;
 800c416:	ea4f 074c 	mov.w	r7, ip, lsl #1
	  u2 = 0.0;
 800c41a:	ed9f 4b17 	vldr	d4, [pc, #92]	; 800c478 <FFT+0x1a8>
	  u1 = 1.0;
 800c41e:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
	  for (j=0;j<l1;j++) {
 800c422:	f04f 0e00 	mov.w	lr, #0
 800c426:	e7d2      	b.n	800c3ce <FFT+0xfe>
		 c2 = -c2;
 800c428:	eeb1 9b40 	vneg.f64	d9, d0
 800c42c:	e7e2      	b.n	800c3f4 <FFT+0x124>
	}

	/* Scaling for forward transform */
	if (dir == 1) {
 800c42e:	f1ba 0f01 	cmp.w	sl, #1
 800c432:	d01c      	beq.n	800c46e <FFT+0x19e>
		 y[i] /= n;
	  }
	}

	return(1);
}
 800c434:	2001      	movs	r0, #1
 800c436:	ecbd 8b04 	vpop	{d8-d9}
 800c43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 x[i] /= n;
 800c43e:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 800c442:	ee07 6a90 	vmov	s15, r6
 800c446:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c44a:	ed92 5b00 	vldr	d5, [r2]
 800c44e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800c452:	ed82 6b00 	vstr	d6, [r2]
		 y[i] /= n;
 800c456:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800c45a:	ed92 5b00 	vldr	d5, [r2]
 800c45e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800c462:	ed82 6b00 	vstr	d6, [r2]
	  for (i=0;i<n;i++) {
 800c466:	3301      	adds	r3, #1
 800c468:	429e      	cmp	r6, r3
 800c46a:	dce8      	bgt.n	800c43e <FFT+0x16e>
 800c46c:	e7e2      	b.n	800c434 <FFT+0x164>
 800c46e:	2300      	movs	r3, #0
 800c470:	e7fa      	b.n	800c468 <FFT+0x198>
 800c472:	bf00      	nop
 800c474:	f3af 8000 	nop.w
	...

0800c480 <FX1>:
//
//
// -- Functions -----
//
void FX1(int16_t* pBufferFilt, int16_t* pBuffer, uint16_t Buffer_Size) {
	for (int i = 1; i < Buffer_Size; i++) {
 800c480:	2301      	movs	r3, #1
 800c482:	429a      	cmp	r2, r3
 800c484:	dd28      	ble.n	800c4d8 <FX1+0x58>
void FX1(int16_t* pBufferFilt, int16_t* pBuffer, uint16_t Buffer_Size) {
 800c486:	b410      	push	{r4}
		//Lowpass Filter
		pBufferFilt[i] = pBufferFilt[i-1]*alpha_fx1 + (pBuffer[i])*(1-alpha_fx1);
 800c488:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800c48c:	441c      	add	r4, r3
 800c48e:	f930 4014 	ldrsh.w	r4, [r0, r4, lsl #1]
 800c492:	ee07 4a90 	vmov	s15, r4
 800c496:	4c11      	ldr	r4, [pc, #68]	; (800c4dc <FX1+0x5c>)
 800c498:	ed94 6a00 	vldr	s12, [r4]
 800c49c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4a0:	ee27 7a86 	vmul.f32	s14, s15, s12
 800c4a4:	f931 4013 	ldrsh.w	r4, [r1, r3, lsl #1]
 800c4a8:	ee07 4a90 	vmov	s15, r4
 800c4ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4b0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800c4b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c4bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4c4:	ee17 4a90 	vmov	r4, s15
 800c4c8:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
	for (int i = 1; i < Buffer_Size; i++) {
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	dcda      	bgt.n	800c488 <FX1+0x8>
	}
}
 800c4d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	4770      	bx	lr
 800c4da:	bf00      	nop
 800c4dc:	2000008c 	.word	0x2000008c

0800c4e0 <FX2>:

void FX2(int16_t* pBufferFilt, int16_t* pBuffer, uint16_t Buffer_Size) {
	for (int i = 1; i < Buffer_Size; i++) {
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	dd28      	ble.n	800c538 <FX2+0x58>
void FX2(int16_t* pBufferFilt, int16_t* pBuffer, uint16_t Buffer_Size) {
 800c4e6:	b410      	push	{r4}
		//Highpass Filter
		pBufferFilt[i] = (pBufferFilt[i-1])*alpha_fx2 + (pBuffer[i])*(1-alpha_fx2);
 800c4e8:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800c4ec:	441c      	add	r4, r3
 800c4ee:	f930 4014 	ldrsh.w	r4, [r0, r4, lsl #1]
 800c4f2:	ee07 4a90 	vmov	s15, r4
 800c4f6:	4c11      	ldr	r4, [pc, #68]	; (800c53c <FX2+0x5c>)
 800c4f8:	ed94 6a01 	vldr	s12, [r4, #4]
 800c4fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c500:	ee27 7a86 	vmul.f32	s14, s15, s12
 800c504:	f931 4013 	ldrsh.w	r4, [r1, r3, lsl #1]
 800c508:	ee07 4a90 	vmov	s15, r4
 800c50c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c510:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800c514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c518:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c51c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c524:	ee17 4a90 	vmov	r4, s15
 800c528:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
	for (int i = 1; i < Buffer_Size; i++) {
 800c52c:	3301      	adds	r3, #1
 800c52e:	429a      	cmp	r2, r3
 800c530:	dcda      	bgt.n	800c4e8 <FX2+0x8>

	}
}
 800c532:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c536:	4770      	bx	lr
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	2000008c 	.word	0x2000008c

0800c540 <FX3>:

void FX3(int16_t* pBufferFilt, int16_t* pBuffer, uint16_t Buffer_Size) {
	//Bandpass Filter
	for (int i = 1; i < Buffer_Size; i++) {
 800c540:	2301      	movs	r3, #1
 800c542:	429a      	cmp	r2, r3
 800c544:	dd34      	ble.n	800c5b0 <FX3+0x70>
void FX3(int16_t* pBufferFilt, int16_t* pBuffer, uint16_t Buffer_Size) {
 800c546:	b410      	push	{r4}
		pBufferFilt[i] = ((pBufferFilt[i-1])*alpha_fx2 + (pBuffer[i])*(1-alpha_fx2)) - (pBufferFilt[i-1]*alpha_fx1 + (pBuffer[i])*(1-alpha_fx1));
 800c548:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800c54c:	441c      	add	r4, r3
 800c54e:	f930 4014 	ldrsh.w	r4, [r0, r4, lsl #1]
 800c552:	ee07 4a90 	vmov	s15, r4
 800c556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c55a:	4c16      	ldr	r4, [pc, #88]	; (800c5b4 <FX3+0x74>)
 800c55c:	ed94 6a01 	vldr	s12, [r4, #4]
 800c560:	ee27 7a86 	vmul.f32	s14, s15, s12
 800c564:	f931 c013 	ldrsh.w	ip, [r1, r3, lsl #1]
 800c568:	ee06 ca90 	vmov	s13, ip
 800c56c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c570:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c574:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800c578:	ee26 6a86 	vmul.f32	s12, s13, s12
 800c57c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c580:	ed94 6a00 	vldr	s12, [r4]
 800c584:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c588:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800c58c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800c590:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c594:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c59c:	ee17 4a90 	vmov	r4, s15
 800c5a0:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
	for (int i = 1; i < Buffer_Size; i++) {
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	dcce      	bgt.n	800c548 <FX3+0x8>
	}
}
 800c5aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5ae:	4770      	bx	lr
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	2000008c 	.word	0x2000008c

0800c5b8 <FX4>:

void FX4(int16_t* pBufferFilt, int16_t* pBuffer, uint16_t Buffer_Size) {
	for (int i = 0; i < Buffer_Size; i++) {
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	dd04      	ble.n	800c5c8 <FX4+0x10>
		pBufferFilt++;
		*pBufferFilt = 0;
 800c5be:	2100      	movs	r1, #0
 800c5c0:	f820 1f02 	strh.w	r1, [r0, #2]!
	for (int i = 0; i < Buffer_Size; i++) {
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	e7f8      	b.n	800c5ba <FX4+0x2>
	}
}
 800c5c8:	4770      	bx	lr

0800c5ca <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 800c5ca:	b500      	push	{lr}
 800c5cc:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c5d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c5d6:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c5d8:	2302      	movs	r3, #2
 800c5da:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c5dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800c5e0:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 800c5e2:	2219      	movs	r2, #25
 800c5e4:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 800c5e6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800c5ea:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c5ec:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800c5ee:	2309      	movs	r3, #9
 800c5f0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 800c5f2:	2307      	movs	r3, #7
 800c5f4:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800c5f6:	4668      	mov	r0, sp
 800c5f8:	f7fa fe54 	bl	80072a4 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 800c5fc:	b100      	cbz	r0, 800c600 <SystemClock_Config+0x36>
    while(1) { ; }
 800c5fe:	e7fe      	b.n	800c5fe <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800c600:	f7fa fe12 	bl	8007228 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800c604:	b100      	cbz	r0, 800c608 <SystemClock_Config+0x3e>
    while(1) { ; }
 800c606:	e7fe      	b.n	800c606 <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800c608:	230f      	movs	r3, #15
 800c60a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c60c:	2302      	movs	r3, #2
 800c60e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c610:	2300      	movs	r3, #0
 800c612:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c614:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c618:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c61a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c61e:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800c620:	2107      	movs	r1, #7
 800c622:	a80d      	add	r0, sp, #52	; 0x34
 800c624:	f7fb f896 	bl	8007754 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 800c628:	b100      	cbz	r0, 800c62c <SystemClock_Config+0x62>
    while(1) { ; }
 800c62a:	e7fe      	b.n	800c62a <SystemClock_Config+0x60>
  }
}
 800c62c:	b013      	add	sp, #76	; 0x4c
 800c62e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c634 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 800c634:	b410      	push	{r4}
  __ASM volatile ("dsb 0xF":::"memory");
 800c636:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c63a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800c63e:	4b1a      	ldr	r3, [pc, #104]	; (800c6a8 <CPU_CACHE_Enable+0x74>)
 800c640:	2100      	movs	r1, #0
 800c642:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800c646:	695a      	ldr	r2, [r3, #20]
 800c648:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c64c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c64e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c652:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 800c656:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800c65a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800c65e:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800c662:	f3c0 324e 	ubfx	r2, r0, #13, #15
 800c666:	e000      	b.n	800c66a <CPU_CACHE_Enable+0x36>
    } while(sets--);
 800c668:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800c66a:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800c66e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800c672:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 800c676:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 800c67a:	4c0b      	ldr	r4, [pc, #44]	; (800c6a8 <CPU_CACHE_Enable+0x74>)
 800c67c:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
 800c680:	460b      	mov	r3, r1
 800c682:	3901      	subs	r1, #1
 800c684:	2b00      	cmp	r3, #0
 800c686:	d1f2      	bne.n	800c66e <CPU_CACHE_Enable+0x3a>
    } while(sets--);
 800c688:	1e53      	subs	r3, r2, #1
 800c68a:	2a00      	cmp	r2, #0
 800c68c:	d1ec      	bne.n	800c668 <CPU_CACHE_Enable+0x34>
 800c68e:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800c692:	6963      	ldr	r3, [r4, #20]
 800c694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c698:	6163      	str	r3, [r4, #20]
 800c69a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c69e:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800c6a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6a6:	4770      	bx	lr
 800c6a8:	e000ed00 	.word	0xe000ed00

0800c6ac <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 800c6ac:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 800c6ae:	f7ff ffc1 	bl	800c634 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 800c6b2:	f7f7 fc0b 	bl	8003ecc <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 800c6b6:	f7ff ff88 	bl	800c5ca <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 800c6ba:	4a04      	ldr	r2, [pc, #16]	; (800c6cc <Sys_Init+0x20>)
 800c6bc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800c6c0:	4803      	ldr	r0, [pc, #12]	; (800c6d0 <Sys_Init+0x24>)
 800c6c2:	f000 fa03 	bl	800cacc <initUart>

	/* Initialization for setting up JPEG Color Conversion */
	JPEG_InitColorTables();
 800c6c6:	f7ff fc83 	bl	800bfd0 <JPEG_InitColorTables>

}
 800c6ca:	bd08      	pop	{r3, pc}
 800c6cc:	40011000 	.word	0x40011000
 800c6d0:	20005e2c 	.word	0x20005e2c

0800c6d4 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 800c6d4:	b508      	push	{r3, lr}
  HAL_IncTick();
 800c6d6:	f7f7 fc05 	bl	8003ee4 <HAL_IncTick>
}
 800c6da:	bd08      	pop	{r3, pc}

0800c6dc <Timer_Init>:

//
//
// -- Timer Initialization and Callbacks --
//
void Timer_Init() {
 800c6dc:	b510      	push	{r4, lr}
 800c6de:	b082      	sub	sp, #8
	__HAL_RCC_TIM7_CLK_ENABLE(); // Clock Enable
 800c6e0:	4b0e      	ldr	r3, [pc, #56]	; (800c71c <Timer_Init+0x40>)
 800c6e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c6e4:	f042 0220 	orr.w	r2, r2, #32
 800c6e8:	641a      	str	r2, [r3, #64]	; 0x40
 800c6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ec:	f003 0320 	and.w	r3, r3, #32
 800c6f0:	9301      	str	r3, [sp, #4]
 800c6f2:	9b01      	ldr	r3, [sp, #4]
	htim.Instance = TIM7;
 800c6f4:	4c0a      	ldr	r4, [pc, #40]	; (800c720 <Timer_Init+0x44>)
 800c6f6:	4b0b      	ldr	r3, [pc, #44]	; (800c724 <Timer_Init+0x48>)
 800c6f8:	6023      	str	r3, [r4, #0]
	htim.Init.Prescaler = 1079U; //108MHz/1080 = 100000Hz
 800c6fa:	f240 4337 	movw	r3, #1079	; 0x437
 800c6fe:	6063      	str	r3, [r4, #4]
	htim.Init.Period = 3333U; //100000Hz/3334 = 30Hz
 800c700:	f640 5305 	movw	r3, #3333	; 0xd05
 800c704:	60e3      	str	r3, [r4, #12]
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800c706:	2037      	movs	r0, #55	; 0x37
 800c708:	f7f7 fc4c 	bl	8003fa4 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Init(&htim);
 800c70c:	4620      	mov	r0, r4
 800c70e:	f7fd f90b 	bl	8009928 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim);
 800c712:	4620      	mov	r0, r4
 800c714:	f7fc ffa4 	bl	8009660 <HAL_TIM_Base_Start_IT>
}
 800c718:	b002      	add	sp, #8
 800c71a:	bd10      	pop	{r4, pc}
 800c71c:	40023800 	.word	0x40023800
 800c720:	2000e190 	.word	0x2000e190
 800c724:	40001400 	.word	0x40001400

0800c728 <main>:
int main(void) {
 800c728:	b530      	push	{r4, r5, lr}
 800c72a:	b087      	sub	sp, #28
	Sys_Init(); // Initialize STM32 System
 800c72c:	f7ff ffbe 	bl	800c6ac <Sys_Init>
	Timer_Init(); // Initialize Program Timer
 800c730:	f7ff ffd4 	bl	800c6dc <Timer_Init>
	UI_Init(); // Initialize SD Card, LCD, JPEG Peripheral, and Pushbutton
 800c734:	f000 fc18 	bl	800cf68 <UI_Init>
	Line_Audio_Init(); // Initialize Audio Functionality
 800c738:	f001 f95c 	bl	800d9f4 <Line_Audio_Init>
 800c73c:	e0a5      	b.n	800c88a <main+0x162>
			if (sv_state == SV_STATE_SCOPE) {
 800c73e:	4b71      	ldr	r3, [pc, #452]	; (800c904 <main+0x1dc>)
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	b9cb      	cbnz	r3, 800c778 <main+0x50>
				ui_data = UI_Handler((int16_t*)&audio_out_buffer, fx_state, usb_state, sv_state);
 800c744:	4d70      	ldr	r5, [pc, #448]	; (800c908 <main+0x1e0>)
 800c746:	ac02      	add	r4, sp, #8
 800c748:	4a6e      	ldr	r2, [pc, #440]	; (800c904 <main+0x1dc>)
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	9300      	str	r3, [sp, #0]
 800c74e:	8913      	ldrh	r3, [r2, #8]
 800c750:	8992      	ldrh	r2, [r2, #12]
 800c752:	496e      	ldr	r1, [pc, #440]	; (800c90c <main+0x1e4>)
 800c754:	4620      	mov	r0, r4
 800c756:	f001 f89b 	bl	800d890 <UI_Handler>
 800c75a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c75e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			fx_state = ui_data.fx_selection_state;
 800c762:	4a69      	ldr	r2, [pc, #420]	; (800c908 <main+0x1e0>)
 800c764:	6811      	ldr	r1, [r2, #0]
 800c766:	4b67      	ldr	r3, [pc, #412]	; (800c904 <main+0x1dc>)
 800c768:	60d9      	str	r1, [r3, #12]
			usb_state = ui_data.usb_selection_state;
 800c76a:	6851      	ldr	r1, [r2, #4]
 800c76c:	6099      	str	r1, [r3, #8]
			sv_state = ui_data.sv_selection_state;
 800c76e:	6892      	ldr	r2, [r2, #8]
 800c770:	605a      	str	r2, [r3, #4]
			TIM_TICK = 0;
 800c772:	2200      	movs	r2, #0
 800c774:	601a      	str	r2, [r3, #0]
 800c776:	e08d      	b.n	800c894 <main+0x16c>
				for (int i = 0; i < RECORD_BUFFER_SIZE; i++) {
 800c778:	2300      	movs	r3, #0
 800c77a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c77e:	da14      	bge.n	800c7aa <main+0x82>
					audio_ft_buffer_real[i] = (double)audio_in_buffer[i];
 800c780:	4a63      	ldr	r2, [pc, #396]	; (800c910 <main+0x1e8>)
 800c782:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800c786:	ee07 2a10 	vmov	s14, r2
 800c78a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800c78e:	4a61      	ldr	r2, [pc, #388]	; (800c914 <main+0x1ec>)
 800c790:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c794:	ed82 7b00 	vstr	d7, [r2]
					audio_ft_buffer_imag[i] = 0;
 800c798:	4a5f      	ldr	r2, [pc, #380]	; (800c918 <main+0x1f0>)
 800c79a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c79e:	2000      	movs	r0, #0
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	e9c2 0100 	strd	r0, r1, [r2]
				for (int i = 0; i < RECORD_BUFFER_SIZE; i++) {
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	e7e7      	b.n	800c77a <main+0x52>
				FFT(-1, 12, (double*)&audio_ft_buffer_real, (double*)&audio_ft_buffer_imag);
 800c7aa:	4b5b      	ldr	r3, [pc, #364]	; (800c918 <main+0x1f0>)
 800c7ac:	4a59      	ldr	r2, [pc, #356]	; (800c914 <main+0x1ec>)
 800c7ae:	210c      	movs	r1, #12
 800c7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b4:	f7ff fd8c 	bl	800c2d0 <FFT>
				for (int i = 0; i < RECORD_BUFFER_SIZE; i++) {
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	e004      	b.n	800c7c6 <main+0x9e>
					audio_ft_out_buffer[i] = (int16_t)audio_ft_buffer_real[i]/2;
 800c7bc:	1049      	asrs	r1, r1, #1
 800c7be:	4b57      	ldr	r3, [pc, #348]	; (800c91c <main+0x1f4>)
 800c7c0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				for (int i = 0; i < RECORD_BUFFER_SIZE; i++) {
 800c7c4:	3201      	adds	r2, #1
 800c7c6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800c7ca:	da0e      	bge.n	800c7ea <main+0xc2>
					audio_ft_out_buffer[i] = (int16_t)audio_ft_buffer_real[i]/2;
 800c7cc:	4b51      	ldr	r3, [pc, #324]	; (800c914 <main+0x1ec>)
 800c7ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7d2:	ed93 7b00 	vldr	d7, [r3]
 800c7d6:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c7da:	ee17 3a10 	vmov	r3, s14
 800c7de:	b21b      	sxth	r3, r3
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	daea      	bge.n	800c7bc <main+0x94>
 800c7e6:	1c59      	adds	r1, r3, #1
 800c7e8:	e7e8      	b.n	800c7bc <main+0x94>
				ui_data = UI_Handler((int16_t*)&audio_ft_out_buffer, fx_state, usb_state, sv_state);
 800c7ea:	4d47      	ldr	r5, [pc, #284]	; (800c908 <main+0x1e0>)
 800c7ec:	ac02      	add	r4, sp, #8
 800c7ee:	4a45      	ldr	r2, [pc, #276]	; (800c904 <main+0x1dc>)
 800c7f0:	8893      	ldrh	r3, [r2, #4]
 800c7f2:	9300      	str	r3, [sp, #0]
 800c7f4:	8913      	ldrh	r3, [r2, #8]
 800c7f6:	8992      	ldrh	r2, [r2, #12]
 800c7f8:	4948      	ldr	r1, [pc, #288]	; (800c91c <main+0x1f4>)
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f001 f848 	bl	800d890 <UI_Handler>
 800c800:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c804:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c808:	e7ab      	b.n	800c762 <main+0x3a>
				if (fx_state == FX_STATE_1) {
 800c80a:	4b3e      	ldr	r3, [pc, #248]	; (800c904 <main+0x1dc>)
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d00c      	beq.n	800c82c <main+0x104>
				} else if (fx_state == FX_STATE_2) {
 800c812:	2b02      	cmp	r3, #2
 800c814:	d011      	beq.n	800c83a <main+0x112>
				} else if (fx_state == FX_STATE_3) {
 800c816:	2b03      	cmp	r3, #3
 800c818:	d016      	beq.n	800c848 <main+0x120>
				} else if (fx_state == FX_STATE_4) {
 800c81a:	2b04      	cmp	r3, #4
 800c81c:	d01b      	beq.n	800c856 <main+0x12e>
					memcpy((int16_t*)&audio_out_buffer[0], (int16_t*)&audio_in_buffer[0], RECORD_BUFFER_SIZE);
 800c81e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c822:	493b      	ldr	r1, [pc, #236]	; (800c910 <main+0x1e8>)
 800c824:	4839      	ldr	r0, [pc, #228]	; (800c90c <main+0x1e4>)
 800c826:	f001 fc1a 	bl	800e05e <memcpy>
 800c82a:	e021      	b.n	800c870 <main+0x148>
					FX1((int16_t*)&audio_out_buffer, (int16_t*)&audio_in_buffer, RECORD_BUFFER_SIZE);
 800c82c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c830:	4937      	ldr	r1, [pc, #220]	; (800c910 <main+0x1e8>)
 800c832:	4836      	ldr	r0, [pc, #216]	; (800c90c <main+0x1e4>)
 800c834:	f7ff fe24 	bl	800c480 <FX1>
 800c838:	e01a      	b.n	800c870 <main+0x148>
					FX2((int16_t*)&audio_out_buffer, (int16_t*)&audio_in_buffer, RECORD_BUFFER_SIZE);
 800c83a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c83e:	4934      	ldr	r1, [pc, #208]	; (800c910 <main+0x1e8>)
 800c840:	4832      	ldr	r0, [pc, #200]	; (800c90c <main+0x1e4>)
 800c842:	f7ff fe4d 	bl	800c4e0 <FX2>
 800c846:	e013      	b.n	800c870 <main+0x148>
					FX3((int16_t*)&audio_out_buffer, (int16_t*)&audio_in_buffer, RECORD_BUFFER_SIZE);
 800c848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c84c:	4930      	ldr	r1, [pc, #192]	; (800c910 <main+0x1e8>)
 800c84e:	482f      	ldr	r0, [pc, #188]	; (800c90c <main+0x1e4>)
 800c850:	f7ff fe76 	bl	800c540 <FX3>
 800c854:	e00c      	b.n	800c870 <main+0x148>
					FX4((int16_t*)&audio_out_buffer, (int16_t*)&audio_in_buffer, RECORD_BUFFER_SIZE);
 800c856:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c85a:	492d      	ldr	r1, [pc, #180]	; (800c910 <main+0x1e8>)
 800c85c:	482b      	ldr	r0, [pc, #172]	; (800c90c <main+0x1e4>)
 800c85e:	f7ff feab 	bl	800c5b8 <FX4>
 800c862:	e005      	b.n	800c870 <main+0x148>
					FX1((int16_t*)&audio_out_buffer[RECORD_BUFFER_SIZE/2],
 800c864:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c868:	492d      	ldr	r1, [pc, #180]	; (800c920 <main+0x1f8>)
 800c86a:	482e      	ldr	r0, [pc, #184]	; (800c924 <main+0x1fc>)
 800c86c:	f7ff fe08 	bl	800c480 <FX1>
			audio_line_in_buffer_state = BUFFER_OFFSET_NONE;
 800c870:	4b2d      	ldr	r3, [pc, #180]	; (800c928 <main+0x200>)
 800c872:	2200      	movs	r2, #0
 800c874:	601a      	str	r2, [r3, #0]
		if(audio_usb_in_buffer_state != BUFFER_OFFSET_NONE){
 800c876:	4b2d      	ldr	r3, [pc, #180]	; (800c92c <main+0x204>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d138      	bne.n	800c8f0 <main+0x1c8>
		if (audio_line_out_buffer_state)
 800c87e:	4b2c      	ldr	r3, [pc, #176]	; (800c930 <main+0x208>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	b113      	cbz	r3, 800c88a <main+0x162>
			audio_line_out_buffer_state = 0;
 800c884:	4b2a      	ldr	r3, [pc, #168]	; (800c930 <main+0x208>)
 800c886:	2200      	movs	r2, #0
 800c888:	601a      	str	r2, [r3, #0]
		if (TIM_TICK == 1) {
 800c88a:	4b1e      	ldr	r3, [pc, #120]	; (800c904 <main+0x1dc>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2b01      	cmp	r3, #1
 800c890:	f43f af55 	beq.w	800c73e <main+0x16>
		if (audio_line_in_buffer_state != BUFFER_OFFSET_NONE)
 800c894:	4b24      	ldr	r3, [pc, #144]	; (800c928 <main+0x200>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d0ec      	beq.n	800c876 <main+0x14e>
			if (audio_line_in_buffer_state == BUFFER_OFFSET_HALF)
 800c89c:	4b22      	ldr	r3, [pc, #136]	; (800c928 <main+0x200>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d0b2      	beq.n	800c80a <main+0xe2>
				if (fx_state == FX_STATE_1) {
 800c8a4:	4b17      	ldr	r3, [pc, #92]	; (800c904 <main+0x1dc>)
 800c8a6:	68db      	ldr	r3, [r3, #12]
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d0db      	beq.n	800c864 <main+0x13c>
				} else if (fx_state == FX_STATE_2) {
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d00a      	beq.n	800c8c6 <main+0x19e>
				} else if (fx_state == FX_STATE_3) {
 800c8b0:	2b03      	cmp	r3, #3
 800c8b2:	d00f      	beq.n	800c8d4 <main+0x1ac>
				} else if (fx_state == FX_STATE_4) {
 800c8b4:	2b04      	cmp	r3, #4
 800c8b6:	d014      	beq.n	800c8e2 <main+0x1ba>
					memcpy((int16_t*)&audio_out_buffer[RECORD_BUFFER_SIZE/2],
 800c8b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c8bc:	4918      	ldr	r1, [pc, #96]	; (800c920 <main+0x1f8>)
 800c8be:	4819      	ldr	r0, [pc, #100]	; (800c924 <main+0x1fc>)
 800c8c0:	f001 fbcd 	bl	800e05e <memcpy>
 800c8c4:	e7d4      	b.n	800c870 <main+0x148>
					FX2((int16_t*)&audio_out_buffer[RECORD_BUFFER_SIZE/2],
 800c8c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c8ca:	4915      	ldr	r1, [pc, #84]	; (800c920 <main+0x1f8>)
 800c8cc:	4815      	ldr	r0, [pc, #84]	; (800c924 <main+0x1fc>)
 800c8ce:	f7ff fe07 	bl	800c4e0 <FX2>
 800c8d2:	e7cd      	b.n	800c870 <main+0x148>
					FX3((int16_t*)&audio_out_buffer[RECORD_BUFFER_SIZE/2],
 800c8d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c8d8:	4911      	ldr	r1, [pc, #68]	; (800c920 <main+0x1f8>)
 800c8da:	4812      	ldr	r0, [pc, #72]	; (800c924 <main+0x1fc>)
 800c8dc:	f7ff fe30 	bl	800c540 <FX3>
 800c8e0:	e7c6      	b.n	800c870 <main+0x148>
					FX4((int16_t*)&audio_out_buffer[RECORD_BUFFER_SIZE/2],
 800c8e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c8e6:	490e      	ldr	r1, [pc, #56]	; (800c920 <main+0x1f8>)
 800c8e8:	480e      	ldr	r0, [pc, #56]	; (800c924 <main+0x1fc>)
 800c8ea:	f7ff fe65 	bl	800c5b8 <FX4>
 800c8ee:	e7bf      	b.n	800c870 <main+0x148>
			printf("we got some data\r\n");
 800c8f0:	4810      	ldr	r0, [pc, #64]	; (800c934 <main+0x20c>)
 800c8f2:	f001 fcfb 	bl	800e2ec <puts>
			fflush(stdout);
 800c8f6:	4b10      	ldr	r3, [pc, #64]	; (800c938 <main+0x210>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	6898      	ldr	r0, [r3, #8]
 800c8fc:	f001 fa80 	bl	800de00 <fflush>
 800c900:	e7bd      	b.n	800c87e <main+0x156>
 800c902:	bf00      	nop
 800c904:	20001768 	.word	0x20001768
 800c908:	20005ea0 	.word	0x20005ea0
 800c90c:	20001e2c 	.word	0x20001e2c
 800c910:	20003e2c 	.word	0x20003e2c
 800c914:	200101d0 	.word	0x200101d0
 800c918:	20005eb0 	.word	0x20005eb0
 800c91c:	2000e1d0 	.word	0x2000e1d0
 800c920:	20004e2c 	.word	0x20004e2c
 800c924:	20002e2c 	.word	0x20002e2c
 800c928:	2000e188 	.word	0x2000e188
 800c92c:	2000e184 	.word	0x2000e184
 800c930:	2000e180 	.word	0x2000e180
 800c934:	080132ec 	.word	0x080132ec
 800c938:	200000bc 	.word	0x200000bc

0800c93c <TIM7_IRQHandler>:

void TIM7_IRQHandler(void) {
 800c93c:	b508      	push	{r3, lr}
	HAL_TIM_IRQHandler(&htim);
 800c93e:	4802      	ldr	r0, [pc, #8]	; (800c948 <TIM7_IRQHandler+0xc>)
 800c940:	f7fc fe9e 	bl	8009680 <HAL_TIM_IRQHandler>
}
 800c944:	bd08      	pop	{r3, pc}
 800c946:	bf00      	nop
 800c948:	2000e190 	.word	0x2000e190

0800c94c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim->Instance == TIM7) {
 800c94c:	6802      	ldr	r2, [r0, #0]
 800c94e:	4b04      	ldr	r3, [pc, #16]	; (800c960 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800c950:	429a      	cmp	r2, r3
 800c952:	d000      	beq.n	800c956 <HAL_TIM_PeriodElapsedCallback+0xa>
		TIM_TICK = 1;
	}
}
 800c954:	4770      	bx	lr
		TIM_TICK = 1;
 800c956:	4b03      	ldr	r3, [pc, #12]	; (800c964 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800c958:	2201      	movs	r2, #1
 800c95a:	601a      	str	r2, [r3, #0]
}
 800c95c:	e7fa      	b.n	800c954 <HAL_TIM_PeriodElapsedCallback+0x8>
 800c95e:	bf00      	nop
 800c960:	40001400 	.word	0x40001400
 800c964:	20001768 	.word	0x20001768

0800c968 <DMA2_Stream4_IRQHandler>:
/******************************************************************************/


/* ISR Handlers */
void DMA2_Stream4_IRQHandler(void)
{
 800c968:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800c96a:	4b02      	ldr	r3, [pc, #8]	; (800c974 <DMA2_Stream4_IRQHandler+0xc>)
 800c96c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800c96e:	f7f7 fc97 	bl	80042a0 <HAL_DMA_IRQHandler>
}
 800c972:	bd08      	pop	{r3, pc}
 800c974:	200017ec 	.word	0x200017ec

0800c978 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800c978:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800c97a:	4b02      	ldr	r3, [pc, #8]	; (800c984 <DMA2_Stream1_IRQHandler+0xc>)
 800c97c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800c97e:	f7f7 fc8f 	bl	80042a0 <HAL_DMA_IRQHandler>
}
 800c982:	bd08      	pop	{r3, pc}
 800c984:	200018d0 	.word	0x200018d0

0800c988 <OTG_HS_IRQHandler>:
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
#endif
{
 800c988:	b508      	push	{r3, lr}
  HAL_PCD_IRQHandler(&hpcd);
 800c98a:	4802      	ldr	r0, [pc, #8]	; (800c994 <OTG_HS_IRQHandler+0xc>)
 800c98c:	f7fa f8a4 	bl	8006ad8 <HAL_PCD_IRQHandler>
}
 800c990:	bd08      	pop	{r3, pc}
 800c992:	bf00      	nop
 800c994:	20058834 	.word	0x20058834

0800c998 <DMA2_Stream6_IRQHandler>:
  * @brief This function handles DMA2 Stream 5 interrupt request.
  * @param None
  * @retval None
  */
void DMA2_Stream6_IRQHandler(void)
{
 800c998:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800c99a:	4b02      	ldr	r3, [pc, #8]	; (800c9a4 <DMA2_Stream6_IRQHandler+0xc>)
 800c99c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800c99e:	f7f7 fc7f 	bl	80042a0 <HAL_DMA_IRQHandler>
}
 800c9a2:	bd08      	pop	{r3, pc}
 800c9a4:	200018d0 	.word	0x200018d0

0800c9a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c9a8:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c9aa:	4a0f      	ldr	r2, [pc, #60]	; (800c9e8 <SystemInit+0x40>)
 800c9ac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800c9b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c9b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c9b8:	4b0c      	ldr	r3, [pc, #48]	; (800c9ec <SystemInit+0x44>)
 800c9ba:	6819      	ldr	r1, [r3, #0]
 800c9bc:	f041 0101 	orr.w	r1, r1, #1
 800c9c0:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c9c2:	2000      	movs	r0, #0
 800c9c4:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c9c6:	681c      	ldr	r4, [r3, #0]
 800c9c8:	4909      	ldr	r1, [pc, #36]	; (800c9f0 <SystemInit+0x48>)
 800c9ca:	4021      	ands	r1, r4
 800c9cc:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c9ce:	4909      	ldr	r1, [pc, #36]	; (800c9f4 <SystemInit+0x4c>)
 800c9d0:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c9d2:	6819      	ldr	r1, [r3, #0]
 800c9d4:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800c9d8:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c9da:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c9dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c9e0:	6093      	str	r3, [r2, #8]
#endif
}
 800c9e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9e6:	4770      	bx	lr
 800c9e8:	e000ed00 	.word	0xe000ed00
 800c9ec:	40023800 	.word	0x40023800
 800c9f0:	fef6ffff 	.word	0xfef6ffff
 800c9f4:	24003010 	.word	0x24003010

0800c9f8 <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 800c9f8:	b530      	push	{r4, r5, lr}
 800c9fa:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 800c9fc:	6803      	ldr	r3, [r0, #0]
 800c9fe:	4a2e      	ldr	r2, [pc, #184]	; (800cab8 <HAL_UART_MspInit+0xc0>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d004      	beq.n	800ca0e <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 800ca04:	4a2d      	ldr	r2, [pc, #180]	; (800cabc <HAL_UART_MspInit+0xc4>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d02c      	beq.n	800ca64 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 800ca0a:	b00b      	add	sp, #44	; 0x2c
 800ca0c:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 800ca0e:	4c2c      	ldr	r4, [pc, #176]	; (800cac0 <HAL_UART_MspInit+0xc8>)
 800ca10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ca12:	f043 0301 	orr.w	r3, r3, #1
 800ca16:	6323      	str	r3, [r4, #48]	; 0x30
 800ca18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ca1a:	f003 0301 	and.w	r3, r3, #1
 800ca1e:	9301      	str	r3, [sp, #4]
 800ca20:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 800ca22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca26:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800ca28:	2302      	movs	r3, #2
 800ca2a:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800ca30:	2303      	movs	r3, #3
 800ca32:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ca34:	2307      	movs	r3, #7
 800ca36:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 800ca38:	4d22      	ldr	r5, [pc, #136]	; (800cac4 <HAL_UART_MspInit+0xcc>)
 800ca3a:	a905      	add	r1, sp, #20
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	f7f8 f9d5 	bl	8004dec <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 800ca42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca46:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 800ca48:	a905      	add	r1, sp, #20
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	f7f8 f9ce 	bl	8004dec <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 800ca50:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ca52:	f043 0310 	orr.w	r3, r3, #16
 800ca56:	6463      	str	r3, [r4, #68]	; 0x44
 800ca58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ca5a:	f003 0310 	and.w	r3, r3, #16
 800ca5e:	9302      	str	r3, [sp, #8]
 800ca60:	9b02      	ldr	r3, [sp, #8]
 800ca62:	e7d2      	b.n	800ca0a <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 800ca64:	4c16      	ldr	r4, [pc, #88]	; (800cac0 <HAL_UART_MspInit+0xc8>)
 800ca66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ca68:	f043 0304 	orr.w	r3, r3, #4
 800ca6c:	6323      	str	r3, [r4, #48]	; 0x30
 800ca6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ca70:	f003 0304 	and.w	r3, r3, #4
 800ca74:	9303      	str	r3, [sp, #12]
 800ca76:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 800ca78:	2340      	movs	r3, #64	; 0x40
 800ca7a:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800ca7c:	2302      	movs	r3, #2
 800ca7e:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800ca80:	2301      	movs	r3, #1
 800ca82:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800ca84:	2303      	movs	r3, #3
 800ca86:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800ca88:	2308      	movs	r3, #8
 800ca8a:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 800ca8c:	4d0e      	ldr	r5, [pc, #56]	; (800cac8 <HAL_UART_MspInit+0xd0>)
 800ca8e:	a905      	add	r1, sp, #20
 800ca90:	4628      	mov	r0, r5
 800ca92:	f7f8 f9ab 	bl	8004dec <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 800ca96:	2380      	movs	r3, #128	; 0x80
 800ca98:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 800ca9a:	a905      	add	r1, sp, #20
 800ca9c:	4628      	mov	r0, r5
 800ca9e:	f7f8 f9a5 	bl	8004dec <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 800caa2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800caa4:	f043 0320 	orr.w	r3, r3, #32
 800caa8:	6463      	str	r3, [r4, #68]	; 0x44
 800caaa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800caac:	f003 0320 	and.w	r3, r3, #32
 800cab0:	9304      	str	r3, [sp, #16]
 800cab2:	9b04      	ldr	r3, [sp, #16]
}
 800cab4:	e7a9      	b.n	800ca0a <HAL_UART_MspInit+0x12>
 800cab6:	bf00      	nop
 800cab8:	40011000 	.word	0x40011000
 800cabc:	40011400 	.word	0x40011400
 800cac0:	40023800 	.word	0x40023800
 800cac4:	40020000 	.word	0x40020000
 800cac8:	40020800 	.word	0x40020800

0800cacc <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 800cacc:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 800cace:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 800cad0:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 800cad2:	2200      	movs	r2, #0
 800cad4:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 800cad6:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 800cad8:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 800cada:	210c      	movs	r1, #12
 800cadc:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800cade:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 800cae0:	f7fd fab3 	bl	800a04a <HAL_UART_Init>
}
 800cae4:	bd08      	pop	{r3, pc}
	...

0800cae8 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 800cae8:	b510      	push	{r4, lr}
 800caea:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 800caec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800caf0:	b292      	uxth	r2, r2
 800caf2:	4802      	ldr	r0, [pc, #8]	; (800cafc <_write+0x14>)
 800caf4:	f7fc ff68 	bl	80099c8 <HAL_UART_Transmit>
	return len;
}
 800caf8:	4620      	mov	r0, r4
 800cafa:	bd10      	pop	{r4, pc}
 800cafc:	20005e2c 	.word	0x20005e2c

0800cb00 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 800cb00:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 800cb02:	2200      	movs	r2, #0
 800cb04:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800cb06:	f04f 33ff 	mov.w	r3, #4294967295
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	4802      	ldr	r0, [pc, #8]	; (800cb18 <_read+0x18>)
 800cb0e:	f7fc ffc3 	bl	8009a98 <HAL_UART_Receive>
	return len;
}
 800cb12:	2001      	movs	r0, #1
 800cb14:	bd08      	pop	{r3, pc}
 800cb16:	bf00      	nop
 800cb18:	20005e2c 	.word	0x20005e2c

0800cb1c <UI_Config_SV>:
		displayJPEG(iconName_FX4, iconPosX_FX4, iconPosY_FX4);
	}
}

/* Display Signal Viewer Screen */
void UI_Config_SV(uint16_t sv_state) {
 800cb1c:	b538      	push	{r3, r4, r5, lr}
 800cb1e:	4605      	mov	r5, r0
	// Clear LCD
	BSP_LCD_Clear(LCD_COLOR_LIGHTGRAY);
 800cb20:	4830      	ldr	r0, [pc, #192]	; (800cbe4 <UI_Config_SV+0xc8>)
 800cb22:	f7f4 ff87 	bl	8001a34 <BSP_LCD_Clear>
	// Major Axes
	for (int i = 1; i < 4; i++) BSP_LCD_DrawHLine(59, 419+i, axisScaleX);
 800cb26:	2401      	movs	r4, #1
 800cb28:	e008      	b.n	800cb3c <UI_Config_SV+0x20>
 800cb2a:	f204 11a3 	addw	r1, r4, #419	; 0x1a3
 800cb2e:	4b2e      	ldr	r3, [pc, #184]	; (800cbe8 <UI_Config_SV+0xcc>)
 800cb30:	881a      	ldrh	r2, [r3, #0]
 800cb32:	b289      	uxth	r1, r1
 800cb34:	203b      	movs	r0, #59	; 0x3b
 800cb36:	f7f4 ff9b 	bl	8001a70 <BSP_LCD_DrawHLine>
 800cb3a:	3401      	adds	r4, #1
 800cb3c:	2c03      	cmp	r4, #3
 800cb3e:	ddf4      	ble.n	800cb2a <UI_Config_SV+0xe>
	for (int i = 1; i < 4; i++) BSP_LCD_DrawVLine(57+i, 49, axisScaleY+10);
 800cb40:	2401      	movs	r4, #1
 800cb42:	e00a      	b.n	800cb5a <UI_Config_SV+0x3e>
 800cb44:	4b29      	ldr	r3, [pc, #164]	; (800cbec <UI_Config_SV+0xd0>)
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	320a      	adds	r2, #10
 800cb4a:	f104 0039 	add.w	r0, r4, #57	; 0x39
 800cb4e:	b292      	uxth	r2, r2
 800cb50:	2131      	movs	r1, #49	; 0x31
 800cb52:	b280      	uxth	r0, r0
 800cb54:	f7f4 ffb4 	bl	8001ac0 <BSP_LCD_DrawVLine>
 800cb58:	3401      	adds	r4, #1
 800cb5a:	2c03      	cmp	r4, #3
 800cb5c:	ddf2      	ble.n	800cb44 <UI_Config_SV+0x28>
	// Axes Subdivision Lines
	for (int i = 1; i < 12; i++) BSP_LCD_DrawVLine(60+62*i, 410, 25);
 800cb5e:	2401      	movs	r4, #1
 800cb60:	e00a      	b.n	800cb78 <UI_Config_SV+0x5c>
 800cb62:	ebc4 1044 	rsb	r0, r4, r4, lsl #5
 800cb66:	0040      	lsls	r0, r0, #1
 800cb68:	303c      	adds	r0, #60	; 0x3c
 800cb6a:	b280      	uxth	r0, r0
 800cb6c:	2219      	movs	r2, #25
 800cb6e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800cb72:	f7f4 ffa5 	bl	8001ac0 <BSP_LCD_DrawVLine>
 800cb76:	3401      	adds	r4, #1
 800cb78:	2c0b      	cmp	r4, #11
 800cb7a:	ddf2      	ble.n	800cb62 <UI_Config_SV+0x46>
	for (int i = 0; i < 10; i++) BSP_LCD_DrawHLine(48, 49+37*i, 25);
 800cb7c:	2400      	movs	r4, #0
 800cb7e:	2c09      	cmp	r4, #9
 800cb80:	dc0b      	bgt.n	800cb9a <UI_Config_SV+0x7e>
 800cb82:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800cb86:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800cb8a:	3131      	adds	r1, #49	; 0x31
 800cb8c:	2219      	movs	r2, #25
 800cb8e:	b289      	uxth	r1, r1
 800cb90:	2030      	movs	r0, #48	; 0x30
 800cb92:	f7f4 ff6d 	bl	8001a70 <BSP_LCD_DrawHLine>
 800cb96:	3401      	adds	r4, #1
 800cb98:	e7f1      	b.n	800cb7e <UI_Config_SV+0x62>
	// Axes Labels
	BSP_LCD_DisplayStringAt(430, ySize_LCD-30, (uint8_t *)"0", CENTER_MODE);
 800cb9a:	4b15      	ldr	r3, [pc, #84]	; (800cbf0 <UI_Config_SV+0xd4>)
 800cb9c:	6819      	ldr	r1, [r3, #0]
 800cb9e:	391e      	subs	r1, #30
 800cba0:	2301      	movs	r3, #1
 800cba2:	4a14      	ldr	r2, [pc, #80]	; (800cbf4 <UI_Config_SV+0xd8>)
 800cba4:	b289      	uxth	r1, r1
 800cba6:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 800cbaa:	f7f5 f9e3 	bl	8001f74 <BSP_LCD_DisplayStringAt>
	if (sv_state == SV_STATE_SCOPE) {
 800cbae:	b115      	cbz	r5, 800cbb6 <UI_Config_SV+0x9a>
		BSP_LCD_DisplayStringAt(350, ySize_LCD-30, (uint8_t *)"TIME", CENTER_MODE);
	} else if (sv_state == SV_STATE_SPECTRUM) {
 800cbb0:	2d01      	cmp	r5, #1
 800cbb2:	d00b      	beq.n	800cbcc <UI_Config_SV+0xb0>
		BSP_LCD_DisplayStringAt(350, ySize_LCD-30, (uint8_t *)"FREQ", CENTER_MODE);
	}
}
 800cbb4:	bd38      	pop	{r3, r4, r5, pc}
		BSP_LCD_DisplayStringAt(350, ySize_LCD-30, (uint8_t *)"TIME", CENTER_MODE);
 800cbb6:	4b0e      	ldr	r3, [pc, #56]	; (800cbf0 <UI_Config_SV+0xd4>)
 800cbb8:	6819      	ldr	r1, [r3, #0]
 800cbba:	391e      	subs	r1, #30
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	4a0e      	ldr	r2, [pc, #56]	; (800cbf8 <UI_Config_SV+0xdc>)
 800cbc0:	b289      	uxth	r1, r1
 800cbc2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800cbc6:	f7f5 f9d5 	bl	8001f74 <BSP_LCD_DisplayStringAt>
 800cbca:	e7f3      	b.n	800cbb4 <UI_Config_SV+0x98>
		BSP_LCD_DisplayStringAt(350, ySize_LCD-30, (uint8_t *)"FREQ", CENTER_MODE);
 800cbcc:	4b08      	ldr	r3, [pc, #32]	; (800cbf0 <UI_Config_SV+0xd4>)
 800cbce:	6819      	ldr	r1, [r3, #0]
 800cbd0:	391e      	subs	r1, #30
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	4a09      	ldr	r2, [pc, #36]	; (800cbfc <UI_Config_SV+0xe0>)
 800cbd6:	b289      	uxth	r1, r1
 800cbd8:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800cbdc:	f7f5 f9ca 	bl	8001f74 <BSP_LCD_DisplayStringAt>
}
 800cbe0:	e7e8      	b.n	800cbb4 <UI_Config_SV+0x98>
 800cbe2:	bf00      	nop
 800cbe4:	ffd3d3d3 	.word	0xffd3d3d3
 800cbe8:	200186ec 	.word	0x200186ec
 800cbec:	200181dc 	.word	0x200181dc
 800cbf0:	2005881c 	.word	0x2005881c
 800cbf4:	08013300 	.word	0x08013300
 800cbf8:	08013304 	.word	0x08013304
 800cbfc:	0801330c 	.word	0x0801330c

0800cc00 <SV_Handler>:
	}
}

/* Handle Signal Viewer Display */
void SV_Handler(int16_t* pData, uint16_t sv_state) {
	if (menu_state == SV_MENU_STATE) {
 800cc00:	4b30      	ldr	r3, [pc, #192]	; (800ccc4 <SV_Handler+0xc4>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	d000      	beq.n	800cc0a <SV_Handler+0xa>
 800cc08:	4770      	bx	lr
void SV_Handler(int16_t* pData, uint16_t sv_state) {
 800cc0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc0e:	4607      	mov	r7, r0
 800cc10:	4688      	mov	r8, r1
		// Clear Graph
		UI_Config_SV(sv_state);
 800cc12:	4608      	mov	r0, r1
 800cc14:	f7ff ff82 	bl	800cb1c <UI_Config_SV>
		// Set Variables
		uint16_t avg = 0;
		uint16_t prev_y = axisScaleY/2;
 800cc18:	4b2b      	ldr	r3, [pc, #172]	; (800ccc8 <SV_Handler+0xc8>)
 800cc1a:	681e      	ldr	r6, [r3, #0]
 800cc1c:	f3c6 064f 	ubfx	r6, r6, #1, #16
		uint16_t inverse_scale_factor = 88;
		// Display plot lines for data array
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTRED);
 800cc20:	482a      	ldr	r0, [pc, #168]	; (800cccc <SV_Handler+0xcc>)
 800cc22:	f7f4 fee9 	bl	80019f8 <BSP_LCD_SetTextColor>
		for (int i = 0; i < 2048; i++) {
 800cc26:	2400      	movs	r4, #0
		uint16_t avg = 0;
 800cc28:	4621      	mov	r1, r4
		for (int i = 0; i < 2048; i++) {
 800cc2a:	e01e      	b.n	800cc6a <SV_Handler+0x6a>
			// Average every 6 samples and draw
			avg += (*pData+32767)/inverse_scale_factor; // Scale to fit on plot
			pData++;
			if (sv_state == SV_STATE_SPECTRUM) {
				pData++; // Increment again to prevent mirrored output on Spectrum Analyzer
 800cc2c:	1d3d      	adds	r5, r7, #4
 800cc2e:	e030      	b.n	800cc92 <SV_Handler+0x92>
			}
			if (i % 6 == 0) {
				avg /= 6;
				if (i > 6) {
					BSP_LCD_DrawLine(axisPosX_StartLeft+i/3, 244+prev_y,
 800cc30:	4827      	ldr	r0, [pc, #156]	; (800ccd0 <SV_Handler+0xd0>)
 800cc32:	fb80 3004 	smull	r3, r0, r0, r4
 800cc36:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
 800cc3a:	4b26      	ldr	r3, [pc, #152]	; (800ccd4 <SV_Handler+0xd4>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4418      	add	r0, r3
 800cc40:	b280      	uxth	r0, r0
							 	 	 axisPosX_StartLeft+i/3+1, 244+(axisScaleY-avg));
 800cc42:	4b21      	ldr	r3, [pc, #132]	; (800ccc8 <SV_Handler+0xc8>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	1bdb      	subs	r3, r3, r7
 800cc48:	b29b      	uxth	r3, r3
					BSP_LCD_DrawLine(axisPosX_StartLeft+i/3, 244+prev_y,
 800cc4a:	33f4      	adds	r3, #244	; 0xf4
 800cc4c:	1c42      	adds	r2, r0, #1
 800cc4e:	f106 01f4 	add.w	r1, r6, #244	; 0xf4
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	b292      	uxth	r2, r2
 800cc56:	b289      	uxth	r1, r1
 800cc58:	f7f5 f9ea 	bl	8002030 <BSP_LCD_DrawLine>
				}
				prev_y = axisScaleY-avg;
 800cc5c:	4b1a      	ldr	r3, [pc, #104]	; (800ccc8 <SV_Handler+0xc8>)
 800cc5e:	881e      	ldrh	r6, [r3, #0]
 800cc60:	1bf6      	subs	r6, r6, r7
 800cc62:	b2b6      	uxth	r6, r6
				avg = 0;
 800cc64:	2100      	movs	r1, #0
		for (int i = 0; i < 2048; i++) {
 800cc66:	3401      	adds	r4, #1
 800cc68:	462f      	mov	r7, r5
 800cc6a:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 800cc6e:	da22      	bge.n	800ccb6 <SV_Handler+0xb6>
			avg += (*pData+32767)/inverse_scale_factor; // Scale to fit on plot
 800cc70:	463d      	mov	r5, r7
 800cc72:	f935 2b02 	ldrsh.w	r2, [r5], #2
 800cc76:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800cc7a:	4413      	add	r3, r2
 800cc7c:	4a16      	ldr	r2, [pc, #88]	; (800ccd8 <SV_Handler+0xd8>)
 800cc7e:	fb82 0203 	smull	r0, r2, r2, r3
 800cc82:	17db      	asrs	r3, r3, #31
 800cc84:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 800cc88:	440b      	add	r3, r1
 800cc8a:	b299      	uxth	r1, r3
			if (sv_state == SV_STATE_SPECTRUM) {
 800cc8c:	f1b8 0f01 	cmp.w	r8, #1
 800cc90:	d0cc      	beq.n	800cc2c <SV_Handler+0x2c>
			if (i % 6 == 0) {
 800cc92:	4a12      	ldr	r2, [pc, #72]	; (800ccdc <SV_Handler+0xdc>)
 800cc94:	fb82 3204 	smull	r3, r2, r2, r4
 800cc98:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 800cc9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800cca0:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
 800cca4:	d1df      	bne.n	800cc66 <SV_Handler+0x66>
				avg /= 6;
 800cca6:	4b0e      	ldr	r3, [pc, #56]	; (800cce0 <SV_Handler+0xe0>)
 800cca8:	fba3 2301 	umull	r2, r3, r3, r1
 800ccac:	f3c3 078f 	ubfx	r7, r3, #2, #16
				if (i > 6) {
 800ccb0:	2c06      	cmp	r4, #6
 800ccb2:	dcbd      	bgt.n	800cc30 <SV_Handler+0x30>
 800ccb4:	e7d2      	b.n	800cc5c <SV_Handler+0x5c>
			}
		}
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800ccb6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800ccba:	f7f4 fe9d 	bl	80019f8 <BSP_LCD_SetTextColor>
	}
}
 800ccbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccc2:	bf00      	nop
 800ccc4:	20001778 	.word	0x20001778
 800ccc8:	200181dc 	.word	0x200181dc
 800cccc:	ffff8080 	.word	0xffff8080
 800ccd0:	55555556 	.word	0x55555556
 800ccd4:	200181d8 	.word	0x200181d8
 800ccd8:	2e8ba2e9 	.word	0x2e8ba2e9
 800ccdc:	2aaaaaab 	.word	0x2aaaaaab
 800cce0:	aaaaaaab 	.word	0xaaaaaaab

0800cce4 <colorConversion>:

//
//
// -- JPEG Functions -----
//
uint8_t *colorConversion(uint8_t *jpeg_addr, uint32_t num_bytes) {
 800cce4:	b530      	push	{r4, r5, lr}
 800cce6:	b085      	sub	sp, #20
 800cce8:	460b      	mov	r3, r1
	uint8_t *raw_out_buf = jpeg_addr + num_bytes;
 800ccea:	1844      	adds	r4, r0, r1
	uint32_t total_raw_data;
	pConvert_Function(jpeg_addr, raw_out_buf, 0, num_bytes, &total_raw_data);
 800ccec:	aa03      	add	r2, sp, #12
 800ccee:	9200      	str	r2, [sp, #0]
 800ccf0:	4a03      	ldr	r2, [pc, #12]	; (800cd00 <colorConversion+0x1c>)
 800ccf2:	6815      	ldr	r5, [r2, #0]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	4621      	mov	r1, r4
 800ccf8:	47a8      	blx	r5

	return raw_out_buf;
}
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	b005      	add	sp, #20
 800ccfe:	bd30      	pop	{r4, r5, pc}
 800cd00:	200586f0 	.word	0x200586f0

0800cd04 <DMA2D_CopyBuffer>:

void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, JPEG_ConfTypeDef *jpeg_info)
{
 800cd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd08:	b087      	sub	sp, #28
 800cd0a:	9003      	str	r0, [sp, #12]
 800cd0c:	4688      	mov	r8, r1
 800cd0e:	4617      	mov	r7, r2
 800cd10:	461e      	mov	r6, r3
 800cd12:	9d10      	ldr	r5, [sp, #64]	; 0x40
	uint32_t destination = (uint32_t)pDst;
	uint32_t source = (uint32_t)pSrc;

	// DMA2D Clock Enable
	__HAL_RCC_DMA2D_CLK_ENABLE();
 800cd14:	4b2c      	ldr	r3, [pc, #176]	; (800cdc8 <DMA2D_CopyBuffer+0xc4>)
 800cd16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd18:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800cd1c:	631a      	str	r2, [r3, #48]	; 0x30
 800cd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd24:	9305      	str	r3, [sp, #20]
 800cd26:	9b05      	ldr	r3, [sp, #20]

	// Width offset calculation (from STM32 examples)
	uint32_t width_offset = 0;
	if(jpeg_info->ChromaSubsampling == JPEG_420_SUBSAMPLING) {
 800cd28:	686b      	ldr	r3, [r5, #4]
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d03e      	beq.n	800cdac <DMA2D_CopyBuffer+0xa8>
	uint32_t width_offset = 0;
 800cd2e:	f04f 0900 	mov.w	r9, #0
		if((jpeg_info->ImageWidth % 16) != 0)
			width_offset = 16 - (jpeg_info->ImageWidth % 16);
	}

	if(jpeg_info->ChromaSubsampling == JPEG_422_SUBSAMPLING) {
 800cd32:	2b02      	cmp	r3, #2
 800cd34:	d041      	beq.n	800cdba <DMA2D_CopyBuffer+0xb6>
		if((jpeg_info->ImageWidth % 16) != 0)
			width_offset = 16 - (jpeg_info->ImageWidth % 16);
	}

	if(jpeg_info->ChromaSubsampling == JPEG_444_SUBSAMPLING) {
 800cd36:	b92b      	cbnz	r3, 800cd44 <DMA2D_CopyBuffer+0x40>
		if((jpeg_info->ImageWidth % 8) != 0)
 800cd38:	68eb      	ldr	r3, [r5, #12]
 800cd3a:	f013 0307 	ands.w	r3, r3, #7
 800cd3e:	d001      	beq.n	800cd44 <DMA2D_CopyBuffer+0x40>
			width_offset = 8 - (jpeg_info->ImageWidth % 8);
 800cd40:	f1c3 0908 	rsb	r9, r3, #8
	}

	/*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
	hdma2d.Instance 		  = DMA2D;
 800cd44:	4c21      	ldr	r4, [pc, #132]	; (800cdcc <DMA2D_CopyBuffer+0xc8>)
 800cd46:	4b22      	ldr	r3, [pc, #136]	; (800cdd0 <DMA2D_CopyBuffer+0xcc>)
 800cd48:	6023      	str	r3, [r4, #0]
	hdma2d.Init.Mode          = DMA2D_M2M_PFC;
 800cd4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cd4e:	6063      	str	r3, [r4, #4]
	hdma2d.Init.ColorMode     = DMA2D_OUTPUT_ARGB8888;
 800cd50:	f04f 0b00 	mov.w	fp, #0
 800cd54:	f8c4 b008 	str.w	fp, [r4, #8]
	hdma2d.Init.OutputOffset  = BSP_LCD_GetXSize() - jpeg_info->ImageWidth;
 800cd58:	f7f4 fdfe 	bl	8001958 <BSP_LCD_GetXSize>
 800cd5c:	68eb      	ldr	r3, [r5, #12]
 800cd5e:	1ac0      	subs	r0, r0, r3
 800cd60:	60e0      	str	r0, [r4, #12]

	/*##-2- Foreground Configuration ###########################################*/
	hdma2d.LayerCfg[1].AlphaMode 		= DMA2D_REPLACE_ALPHA;
 800cd62:	f04f 0a01 	mov.w	sl, #1
 800cd66:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
	hdma2d.LayerCfg[1].InputAlpha 		= 0xFF;
 800cd6a:	23ff      	movs	r3, #255	; 0xff
 800cd6c:	6463      	str	r3, [r4, #68]	; 0x44
	hdma2d.LayerCfg[1].InputColorMode 	= DMA2D_INPUT_ARGB8888;
 800cd6e:	f8c4 b03c 	str.w	fp, [r4, #60]	; 0x3c
	hdma2d.LayerCfg[1].InputOffset 		= width_offset;
 800cd72:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38

	/* DMA2D Initialization */
	HAL_DMA2D_Init(&hdma2d);
 800cd76:	4620      	mov	r0, r4
 800cd78:	f7f7 fbcc 	bl	8004514 <HAL_DMA2D_Init>

	/* DMA2D Config Layer */
	HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 800cd7c:	4651      	mov	r1, sl
 800cd7e:	4620      	mov	r0, r4
 800cd80:	f7f7 fcbe 	bl	8004700 <HAL_DMA2D_ConfigLayer>

	/* DMA2D Start */
	HAL_DMA2D_Start(&hdma2d, source, destination + ((y * BSP_LCD_GetXSize() + x) * 4),
 800cd84:	f7f4 fde8 	bl	8001958 <BSP_LCD_GetXSize>
 800cd88:	fb00 7206 	mla	r2, r0, r6, r7
 800cd8c:	68ab      	ldr	r3, [r5, #8]
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	68eb      	ldr	r3, [r5, #12]
 800cd92:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 800cd96:	9903      	ldr	r1, [sp, #12]
 800cd98:	4620      	mov	r0, r4
 800cd9a:	f7f7 fbf5 	bl	8004588 <HAL_DMA2D_Start>
					jpeg_info->ImageWidth, jpeg_info->ImageHeight);

	/* DMA2D Poll for Transfer */
	HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 800cd9e:	210a      	movs	r1, #10
 800cda0:	4620      	mov	r0, r4
 800cda2:	f7f7 fc0d 	bl	80045c0 <HAL_DMA2D_PollForTransfer>
}
 800cda6:	b007      	add	sp, #28
 800cda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if((jpeg_info->ImageWidth % 16) != 0)
 800cdac:	68ea      	ldr	r2, [r5, #12]
 800cdae:	f012 090f 	ands.w	r9, r2, #15
 800cdb2:	d0be      	beq.n	800cd32 <DMA2D_CopyBuffer+0x2e>
			width_offset = 16 - (jpeg_info->ImageWidth % 16);
 800cdb4:	f1c9 0910 	rsb	r9, r9, #16
 800cdb8:	e7bb      	b.n	800cd32 <DMA2D_CopyBuffer+0x2e>
		if((jpeg_info->ImageWidth % 16) != 0)
 800cdba:	68ea      	ldr	r2, [r5, #12]
 800cdbc:	f012 020f 	ands.w	r2, r2, #15
 800cdc0:	d0b9      	beq.n	800cd36 <DMA2D_CopyBuffer+0x32>
			width_offset = 16 - (jpeg_info->ImageWidth % 16);
 800cdc2:	f1c2 0910 	rsb	r9, r2, #16
 800cdc6:	e7b6      	b.n	800cd36 <DMA2D_CopyBuffer+0x32>
 800cdc8:	40023800 	.word	0x40023800
 800cdcc:	200587b4 	.word	0x200587b4
 800cdd0:	4002b000 	.word	0x4002b000

0800cdd4 <displayJPEG>:
void displayJPEG(char* fileName, uint32_t xPos, uint32_t yPos) {
 800cdd4:	b570      	push	{r4, r5, r6, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	4606      	mov	r6, r0
 800cdda:	460c      	mov	r4, r1
 800cddc:	4615      	mov	r5, r2
	f_opendir(&dir, path);
 800cdde:	4b1d      	ldr	r3, [pc, #116]	; (800ce54 <displayJPEG+0x80>)
 800cde0:	6819      	ldr	r1, [r3, #0]
 800cde2:	481d      	ldr	r0, [pc, #116]	; (800ce58 <displayJPEG+0x84>)
 800cde4:	f7f6 ff71 	bl	8003cca <f_opendir>
	if (f_open(&file, (TCHAR*)fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE) == FR_OK) {
 800cde8:	2213      	movs	r2, #19
 800cdea:	4631      	mov	r1, r6
 800cdec:	481b      	ldr	r0, [pc, #108]	; (800ce5c <displayJPEG+0x88>)
 800cdee:	f7f6 fd11 	bl	8003814 <f_open>
 800cdf2:	b330      	cbz	r0, 800ce42 <displayJPEG+0x6e>
	HAL_JPEG_Decode_IT(&hjpeg, (uint8_t*)jpeg_input_buffer, JPEG_BUFFER_SIZE,
 800cdf4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cdf8:	9200      	str	r2, [sp, #0]
 800cdfa:	4b16      	ldr	r3, [pc, #88]	; (800ce54 <displayJPEG+0x80>)
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	4918      	ldr	r1, [pc, #96]	; (800ce60 <displayJPEG+0x8c>)
 800ce00:	4818      	ldr	r0, [pc, #96]	; (800ce64 <displayJPEG+0x90>)
 800ce02:	f7f9 f88e 	bl	8005f22 <HAL_JPEG_Decode_IT>
	while (JPEG_DECODE_COMPLETE == 0); // Wait for Decode Completion
 800ce06:	4b18      	ldr	r3, [pc, #96]	; (800ce68 <displayJPEG+0x94>)
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d0fb      	beq.n	800ce06 <displayJPEG+0x32>
	JPEG_DECODE_COMPLETE = 0;
 800ce0e:	4b16      	ldr	r3, [pc, #88]	; (800ce68 <displayJPEG+0x94>)
 800ce10:	2200      	movs	r2, #0
 800ce12:	605a      	str	r2, [r3, #4]
	HAL_JPEG_GetInfo(&hjpeg, &jpeg_info);
 800ce14:	4e15      	ldr	r6, [pc, #84]	; (800ce6c <displayJPEG+0x98>)
 800ce16:	4631      	mov	r1, r6
 800ce18:	4812      	ldr	r0, [pc, #72]	; (800ce64 <displayJPEG+0x90>)
 800ce1a:	f7f9 f819 	bl	8005e50 <HAL_JPEG_GetInfo>
	uint8_t *raw_output = colorConversion((uint8_t *)jpeg_output_buffer, JPEG_BUFFER_SIZE);
 800ce1e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800ce22:	4b0c      	ldr	r3, [pc, #48]	; (800ce54 <displayJPEG+0x80>)
 800ce24:	6858      	ldr	r0, [r3, #4]
 800ce26:	f7ff ff5d 	bl	800cce4 <colorConversion>
	DMA2D_CopyBuffer((uint32_t *)raw_output, (uint32_t *)LCD_FRAME_BUFFER,
 800ce2a:	9600      	str	r6, [sp, #0]
 800ce2c:	b2ab      	uxth	r3, r5
 800ce2e:	b2a2      	uxth	r2, r4
 800ce30:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800ce34:	f7ff ff66 	bl	800cd04 <DMA2D_CopyBuffer>
	f_close(&file);
 800ce38:	4808      	ldr	r0, [pc, #32]	; (800ce5c <displayJPEG+0x88>)
 800ce3a:	f7f6 ff31 	bl	8003ca0 <f_close>
}
 800ce3e:	b002      	add	sp, #8
 800ce40:	bd70      	pop	{r4, r5, r6, pc}
		f_read(&file, jpeg_input_buffer, JPEG_BUFFER_SIZE, &br);
 800ce42:	4b0b      	ldr	r3, [pc, #44]	; (800ce70 <displayJPEG+0x9c>)
 800ce44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ce48:	4905      	ldr	r1, [pc, #20]	; (800ce60 <displayJPEG+0x8c>)
 800ce4a:	4804      	ldr	r0, [pc, #16]	; (800ce5c <displayJPEG+0x88>)
 800ce4c:	f7f6 fdfa 	bl	8003a44 <f_read>
 800ce50:	e7d0      	b.n	800cdf4 <displayJPEG+0x20>
 800ce52:	bf00      	nop
 800ce54:	20000098 	.word	0x20000098
 800ce58:	200586fc 	.word	0x200586fc
 800ce5c:	20018458 	.word	0x20018458
 800ce60:	200186f0 	.word	0x200186f0
 800ce64:	20018690 	.word	0x20018690
 800ce68:	20001778 	.word	0x20001778
 800ce6c:	2001842c 	.word	0x2001842c
 800ce70:	2001844c 	.word	0x2001844c

0800ce74 <UI_Config_Main>:
void UI_Config_Main() {
 800ce74:	b538      	push	{r3, r4, r5, lr}
	BSP_LCD_Clear(LCD_COLOR_LIGHTGRAY);
 800ce76:	482f      	ldr	r0, [pc, #188]	; (800cf34 <UI_Config_Main+0xc0>)
 800ce78:	f7f4 fddc 	bl	8001a34 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800ce7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce80:	f7f4 fdba 	bl	80019f8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(iconPosX_FX, iconPosY_SV, iconSize, iconSize);
 800ce84:	4c2c      	ldr	r4, [pc, #176]	; (800cf38 <UI_Config_Main+0xc4>)
 800ce86:	8822      	ldrh	r2, [r4, #0]
 800ce88:	4d2c      	ldr	r5, [pc, #176]	; (800cf3c <UI_Config_Main+0xc8>)
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	8829      	ldrh	r1, [r5, #0]
 800ce8e:	482c      	ldr	r0, [pc, #176]	; (800cf40 <UI_Config_Main+0xcc>)
 800ce90:	8800      	ldrh	r0, [r0, #0]
 800ce92:	f7f4 fe59 	bl	8001b48 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(iconPosX_SV, iconPosY_SV, iconSize, iconSize);
 800ce96:	8822      	ldrh	r2, [r4, #0]
 800ce98:	4613      	mov	r3, r2
 800ce9a:	8829      	ldrh	r1, [r5, #0]
 800ce9c:	4829      	ldr	r0, [pc, #164]	; (800cf44 <UI_Config_Main+0xd0>)
 800ce9e:	8800      	ldrh	r0, [r0, #0]
 800cea0:	f7f4 fe52 	bl	8001b48 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(xSize_LCD-80, 30, iconSize/2, iconSize/2);
 800cea4:	6822      	ldr	r2, [r4, #0]
 800cea6:	f3c2 024f 	ubfx	r2, r2, #1, #16
 800ceaa:	4b27      	ldr	r3, [pc, #156]	; (800cf48 <UI_Config_Main+0xd4>)
 800ceac:	6818      	ldr	r0, [r3, #0]
 800ceae:	3850      	subs	r0, #80	; 0x50
 800ceb0:	4613      	mov	r3, r2
 800ceb2:	211e      	movs	r1, #30
 800ceb4:	b280      	uxth	r0, r0
 800ceb6:	f7f4 fe47 	bl	8001b48 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800ceba:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800cebe:	f7f4 fd9b 	bl	80019f8 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(650, ySize_LCD/2 + 3*iconSize/4,
 800cec2:	4d22      	ldr	r5, [pc, #136]	; (800cf4c <UI_Config_Main+0xd8>)
 800cec4:	682a      	ldr	r2, [r5, #0]
 800cec6:	6821      	ldr	r1, [r4, #0]
 800cec8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800cecc:	0889      	lsrs	r1, r1, #2
 800cece:	eb01 0152 	add.w	r1, r1, r2, lsr #1
 800ced2:	2301      	movs	r3, #1
 800ced4:	4a1e      	ldr	r2, [pc, #120]	; (800cf50 <UI_Config_Main+0xdc>)
 800ced6:	b289      	uxth	r1, r1
 800ced8:	f240 208a 	movw	r0, #650	; 0x28a
 800cedc:	f7f5 f84a 	bl	8001f74 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(150, ySize_LCD/2 + 3*iconSize/4,
 800cee0:	682a      	ldr	r2, [r5, #0]
 800cee2:	6821      	ldr	r1, [r4, #0]
 800cee4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800cee8:	0889      	lsrs	r1, r1, #2
 800ceea:	eb01 0152 	add.w	r1, r1, r2, lsr #1
 800ceee:	2301      	movs	r3, #1
 800cef0:	4a18      	ldr	r2, [pc, #96]	; (800cf54 <UI_Config_Main+0xe0>)
 800cef2:	b289      	uxth	r1, r1
 800cef4:	2096      	movs	r0, #150	; 0x96
 800cef6:	f7f5 f83d 	bl	8001f74 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(275, 45,
 800cefa:	2301      	movs	r3, #1
 800cefc:	4a16      	ldr	r2, [pc, #88]	; (800cf58 <UI_Config_Main+0xe4>)
 800cefe:	212d      	movs	r1, #45	; 0x2d
 800cf00:	f240 1013 	movw	r0, #275	; 0x113
 800cf04:	f7f5 f836 	bl	8001f74 <BSP_LCD_DisplayStringAt>
	if (SD_CARD_ENABLED == 1) {
 800cf08:	4b14      	ldr	r3, [pc, #80]	; (800cf5c <UI_Config_Main+0xe8>)
 800cf0a:	689b      	ldr	r3, [r3, #8]
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d000      	beq.n	800cf12 <UI_Config_Main+0x9e>
}
 800cf10:	bd38      	pop	{r3, r4, r5, pc}
		displayJPEG(iconName_SV, iconPosX_SV, iconPosY_SV); // Signal Viewer
 800cf12:	4c13      	ldr	r4, [pc, #76]	; (800cf60 <UI_Config_Main+0xec>)
 800cf14:	4b09      	ldr	r3, [pc, #36]	; (800cf3c <UI_Config_Main+0xc8>)
 800cf16:	681a      	ldr	r2, [r3, #0]
 800cf18:	4b0a      	ldr	r3, [pc, #40]	; (800cf44 <UI_Config_Main+0xd0>)
 800cf1a:	6819      	ldr	r1, [r3, #0]
 800cf1c:	68a0      	ldr	r0, [r4, #8]
 800cf1e:	f7ff ff59 	bl	800cdd4 <displayJPEG>
		displayJPEG(iconName_FX, iconPosX_FX, iconPosY_FX); // Sound Effects
 800cf22:	4b10      	ldr	r3, [pc, #64]	; (800cf64 <UI_Config_Main+0xf0>)
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	4b06      	ldr	r3, [pc, #24]	; (800cf40 <UI_Config_Main+0xcc>)
 800cf28:	6819      	ldr	r1, [r3, #0]
 800cf2a:	68e0      	ldr	r0, [r4, #12]
 800cf2c:	f7ff ff52 	bl	800cdd4 <displayJPEG>
}
 800cf30:	e7ee      	b.n	800cf10 <UI_Config_Main+0x9c>
 800cf32:	bf00      	nop
 800cf34:	ffd3d3d3 	.word	0xffd3d3d3
 800cf38:	20018444 	.word	0x20018444
 800cf3c:	200587b0 	.word	0x200587b0
 800cf40:	200586f8 	.word	0x200586f8
 800cf44:	20018450 	.word	0x20018450
 800cf48:	200181d0 	.word	0x200181d0
 800cf4c:	2005881c 	.word	0x2005881c
 800cf50:	08013314 	.word	0x08013314
 800cf54:	08013324 	.word	0x08013324
 800cf58:	08013334 	.word	0x08013334
 800cf5c:	20001778 	.word	0x20001778
 800cf60:	20000098 	.word	0x20000098
 800cf64:	2001868c 	.word	0x2001868c

0800cf68 <UI_Init>:
void UI_Init() {
 800cf68:	b570      	push	{r4, r5, r6, lr}
 800cf6a:	b082      	sub	sp, #8
	if (FATFS_LinkDriver(&SD_Driver, path) == 0) {
 800cf6c:	4b58      	ldr	r3, [pc, #352]	; (800d0d0 <UI_Init+0x168>)
 800cf6e:	6819      	ldr	r1, [r3, #0]
 800cf70:	4858      	ldr	r0, [pc, #352]	; (800d0d4 <UI_Init+0x16c>)
 800cf72:	f7f6 ff13 	bl	8003d9c <FATFS_LinkDriver>
 800cf76:	2800      	cmp	r0, #0
 800cf78:	f000 8095 	beq.w	800d0a6 <UI_Init+0x13e>
    BSP_LCD_Init();
 800cf7c:	f7f4 ff56 	bl	8001e2c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER);
 800cf80:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800cf84:	2000      	movs	r0, #0
 800cf86:	f7f4 fcf3 	bl	8001970 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 800cf8a:	2000      	movs	r0, #0
 800cf8c:	f7f4 fd2e 	bl	80019ec <BSP_LCD_SelectLayer>
	BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGRAY);
 800cf90:	4851      	ldr	r0, [pc, #324]	; (800d0d8 <UI_Init+0x170>)
 800cf92:	f7f4 fd3b 	bl	8001a0c <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800cf96:	f04f 30ff 	mov.w	r0, #4294967295
 800cf9a:	f7f4 fd2d 	bl	80019f8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 800cf9e:	484f      	ldr	r0, [pc, #316]	; (800d0dc <UI_Init+0x174>)
 800cfa0:	f7f4 fd3e 	bl	8001a20 <BSP_LCD_SetFont>
	xSize_LCD = BSP_LCD_GetXSize(); // 800 pixels
 800cfa4:	f7f4 fcd8 	bl	8001958 <BSP_LCD_GetXSize>
 800cfa8:	4c4d      	ldr	r4, [pc, #308]	; (800d0e0 <UI_Init+0x178>)
 800cfaa:	6020      	str	r0, [r4, #0]
	ySize_LCD = BSP_LCD_GetYSize(); // 480 pixels
 800cfac:	f7f4 fcda 	bl	8001964 <BSP_LCD_GetYSize>
 800cfb0:	4b4c      	ldr	r3, [pc, #304]	; (800d0e4 <UI_Init+0x17c>)
 800cfb2:	6018      	str	r0, [r3, #0]
	iconSize = xSize_LCD/8; // 100 pixels
 800cfb4:	6823      	ldr	r3, [r4, #0]
 800cfb6:	08da      	lsrs	r2, r3, #3
 800cfb8:	494b      	ldr	r1, [pc, #300]	; (800d0e8 <UI_Init+0x180>)
 800cfba:	600a      	str	r2, [r1, #0]
	iconPosX_FX = xSize_LCD/4;
 800cfbc:	089d      	lsrs	r5, r3, #2
 800cfbe:	494b      	ldr	r1, [pc, #300]	; (800d0ec <UI_Init+0x184>)
 800cfc0:	600d      	str	r5, [r1, #0]
	iconPosY_FX = ySize_LCD/2-iconSize/2;
 800cfc2:	091c      	lsrs	r4, r3, #4
 800cfc4:	ebc4 0450 	rsb	r4, r4, r0, lsr #1
 800cfc8:	4949      	ldr	r1, [pc, #292]	; (800d0f0 <UI_Init+0x188>)
 800cfca:	600c      	str	r4, [r1, #0]
	iconPosX_SV = 5*xSize_LCD/8;
 800cfcc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800cfd0:	08c9      	lsrs	r1, r1, #3
 800cfd2:	4e48      	ldr	r6, [pc, #288]	; (800d0f4 <UI_Init+0x18c>)
 800cfd4:	6031      	str	r1, [r6, #0]
	iconPosY_SV = ySize_LCD/2-iconSize/2;
 800cfd6:	4e48      	ldr	r6, [pc, #288]	; (800d0f8 <UI_Init+0x190>)
 800cfd8:	6034      	str	r4, [r6, #0]
	iconPosX_FX1 = xSize_LCD/4;
 800cfda:	4c48      	ldr	r4, [pc, #288]	; (800d0fc <UI_Init+0x194>)
 800cfdc:	6025      	str	r5, [r4, #0]
	iconPosY_FX1 = ySize_LCD/4-iconSize/4;
 800cfde:	095b      	lsrs	r3, r3, #5
 800cfe0:	ebc3 0390 	rsb	r3, r3, r0, lsr #2
 800cfe4:	4c46      	ldr	r4, [pc, #280]	; (800d100 <UI_Init+0x198>)
 800cfe6:	6023      	str	r3, [r4, #0]
	iconPosX_FX2 = 5*xSize_LCD/8;
 800cfe8:	4c46      	ldr	r4, [pc, #280]	; (800d104 <UI_Init+0x19c>)
 800cfea:	6021      	str	r1, [r4, #0]
	iconPosY_FX2 = iconPosY_FX1;
 800cfec:	4c46      	ldr	r4, [pc, #280]	; (800d108 <UI_Init+0x1a0>)
 800cfee:	6023      	str	r3, [r4, #0]
	iconPosX_FX3 = iconPosX_FX1;
 800cff0:	4b46      	ldr	r3, [pc, #280]	; (800d10c <UI_Init+0x1a4>)
 800cff2:	601d      	str	r5, [r3, #0]
	iconPosY_FX3 = 3*ySize_LCD/4-3*iconSize/4;
 800cff4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800cff8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800cffc:	0892      	lsrs	r2, r2, #2
 800cffe:	ebc2 0290 	rsb	r2, r2, r0, lsr #2
 800d002:	4b43      	ldr	r3, [pc, #268]	; (800d110 <UI_Init+0x1a8>)
 800d004:	601a      	str	r2, [r3, #0]
	iconPosX_FX4 = iconPosX_FX2;
 800d006:	4b43      	ldr	r3, [pc, #268]	; (800d114 <UI_Init+0x1ac>)
 800d008:	6019      	str	r1, [r3, #0]
	iconPosY_FX4 = iconPosY_FX3;
 800d00a:	4b43      	ldr	r3, [pc, #268]	; (800d118 <UI_Init+0x1b0>)
 800d00c:	601a      	str	r2, [r3, #0]
	axisPosX_StartLeft = 59;
 800d00e:	233b      	movs	r3, #59	; 0x3b
 800d010:	4a42      	ldr	r2, [pc, #264]	; (800d11c <UI_Init+0x1b4>)
 800d012:	6013      	str	r3, [r2, #0]
	axisPosY_StartTop = 59;
 800d014:	4a42      	ldr	r2, [pc, #264]	; (800d120 <UI_Init+0x1b8>)
 800d016:	6013      	str	r3, [r2, #0]
	axisScaleX = 684;
 800d018:	4b42      	ldr	r3, [pc, #264]	; (800d124 <UI_Init+0x1bc>)
 800d01a:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 800d01e:	601a      	str	r2, [r3, #0]
	axisScaleY = 362;
 800d020:	4b41      	ldr	r3, [pc, #260]	; (800d128 <UI_Init+0x1c0>)
 800d022:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800d026:	601a      	str	r2, [r3, #0]
	__HAL_RCC_JPEG_CLK_ENABLE(); // Enable CLK
 800d028:	4c40      	ldr	r4, [pc, #256]	; (800d12c <UI_Init+0x1c4>)
 800d02a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d02c:	f043 0302 	orr.w	r3, r3, #2
 800d030:	6363      	str	r3, [r4, #52]	; 0x34
 800d032:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d034:	f003 0302 	and.w	r3, r3, #2
 800d038:	9300      	str	r3, [sp, #0]
 800d03a:	9b00      	ldr	r3, [sp, #0]
	hjpeg.Instance = JPEG;
 800d03c:	483c      	ldr	r0, [pc, #240]	; (800d130 <UI_Init+0x1c8>)
 800d03e:	4b3d      	ldr	r3, [pc, #244]	; (800d134 <UI_Init+0x1cc>)
 800d040:	6003      	str	r3, [r0, #0]
	HAL_JPEG_Init(&hjpeg); // Initialize
 800d042:	f7f8 feaf 	bl	8005da4 <HAL_JPEG_Init>
	HAL_NVIC_SetPriority(JPEG_IRQn, 7, 15); // Enable Interrupts
 800d046:	220f      	movs	r2, #15
 800d048:	2107      	movs	r1, #7
 800d04a:	206c      	movs	r0, #108	; 0x6c
 800d04c:	f7f6 ff78 	bl	8003f40 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800d050:	206c      	movs	r0, #108	; 0x6c
 800d052:	f7f6 ffa7 	bl	8003fa4 <HAL_NVIC_EnableIRQ>
	UI_Config_Main();
 800d056:	f7ff ff0d 	bl	800ce74 <UI_Config_Main>
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800d05a:	f7f4 fc7d 	bl	8001958 <BSP_LCD_GetXSize>
 800d05e:	4605      	mov	r5, r0
 800d060:	f7f4 fc80 	bl	8001964 <BSP_LCD_GetYSize>
 800d064:	b281      	uxth	r1, r0
 800d066:	b2a8      	uxth	r0, r5
 800d068:	f7f5 fb16 	bl	8002698 <BSP_TS_Init>
	__HAL_RCC_GPIOA_CLK_ENABLE(); // Enable CLK
 800d06c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d06e:	f043 0301 	orr.w	r3, r3, #1
 800d072:	6323      	str	r3, [r4, #48]	; 0x30
 800d074:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d076:	f003 0301 	and.w	r3, r3, #1
 800d07a:	9301      	str	r3, [sp, #4]
 800d07c:	9b01      	ldr	r3, [sp, #4]
	hgpio.Pin = GPIO_PIN_0;
 800d07e:	492e      	ldr	r1, [pc, #184]	; (800d138 <UI_Init+0x1d0>)
 800d080:	2301      	movs	r3, #1
 800d082:	600b      	str	r3, [r1, #0]
	hgpio.Mode = GPIO_MODE_INPUT;
 800d084:	2300      	movs	r3, #0
 800d086:	604b      	str	r3, [r1, #4]
	hgpio.Pull = GPIO_PULLDOWN;
 800d088:	2302      	movs	r3, #2
 800d08a:	608b      	str	r3, [r1, #8]
	HAL_GPIO_Init(GPIOA, &hgpio); // Initialize
 800d08c:	482b      	ldr	r0, [pc, #172]	; (800d13c <UI_Init+0x1d4>)
 800d08e:	f7f7 fead 	bl	8004dec <HAL_GPIO_Init>
	printf("\033[2J\033[;H\033c");
 800d092:	482b      	ldr	r0, [pc, #172]	; (800d140 <UI_Init+0x1d8>)
 800d094:	f001 f8a4 	bl	800e1e0 <iprintf>
	fflush(stdout);
 800d098:	4b2a      	ldr	r3, [pc, #168]	; (800d144 <UI_Init+0x1dc>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	6898      	ldr	r0, [r3, #8]
 800d09e:	f000 feaf 	bl	800de00 <fflush>
}
 800d0a2:	b002      	add	sp, #8
 800d0a4:	bd70      	pop	{r4, r5, r6, pc}
		if (f_mount(&fs, path, 1) == FR_OK) {
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	4b09      	ldr	r3, [pc, #36]	; (800d0d0 <UI_Init+0x168>)
 800d0aa:	6819      	ldr	r1, [r3, #0]
 800d0ac:	4826      	ldr	r0, [pc, #152]	; (800d148 <UI_Init+0x1e0>)
 800d0ae:	f7f6 fb7f 	bl	80037b0 <f_mount>
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	f47f af62 	bne.w	800cf7c <UI_Init+0x14>
			if (f_opendir(&dir, path) == FR_OK) {
 800d0b8:	4b05      	ldr	r3, [pc, #20]	; (800d0d0 <UI_Init+0x168>)
 800d0ba:	6819      	ldr	r1, [r3, #0]
 800d0bc:	4823      	ldr	r0, [pc, #140]	; (800d14c <UI_Init+0x1e4>)
 800d0be:	f7f6 fe04 	bl	8003cca <f_opendir>
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	f47f af5a 	bne.w	800cf7c <UI_Init+0x14>
				SD_CARD_ENABLED = 1;
 800d0c8:	4b21      	ldr	r3, [pc, #132]	; (800d150 <UI_Init+0x1e8>)
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	609a      	str	r2, [r3, #8]
 800d0ce:	e755      	b.n	800cf7c <UI_Init+0x14>
 800d0d0:	20000098 	.word	0x20000098
 800d0d4:	08012d14 	.word	0x08012d14
 800d0d8:	ffd3d3d3 	.word	0xffd3d3d3
 800d0dc:	20000060 	.word	0x20000060
 800d0e0:	200181d0 	.word	0x200181d0
 800d0e4:	2005881c 	.word	0x2005881c
 800d0e8:	20018444 	.word	0x20018444
 800d0ec:	200586f8 	.word	0x200586f8
 800d0f0:	2001868c 	.word	0x2001868c
 800d0f4:	20018450 	.word	0x20018450
 800d0f8:	200587b0 	.word	0x200587b0
 800d0fc:	20018428 	.word	0x20018428
 800d100:	200586f4 	.word	0x200586f4
 800d104:	20058818 	.word	0x20058818
 800d108:	20018448 	.word	0x20018448
 800d10c:	200186e8 	.word	0x200186e8
 800d110:	20018454 	.word	0x20018454
 800d114:	20018688 	.word	0x20018688
 800d118:	200181d4 	.word	0x200181d4
 800d11c:	200181d8 	.word	0x200181d8
 800d120:	20018440 	.word	0x20018440
 800d124:	200186ec 	.word	0x200186ec
 800d128:	200181dc 	.word	0x200181dc
 800d12c:	40023800 	.word	0x40023800
 800d130:	20018690 	.word	0x20018690
 800d134:	50051000 	.word	0x50051000
 800d138:	20058820 	.word	0x20058820
 800d13c:	40020000 	.word	0x40020000
 800d140:	0801333c 	.word	0x0801333c
 800d144:	200000bc 	.word	0x200000bc
 800d148:	200181f8 	.word	0x200181f8
 800d14c:	200586fc 	.word	0x200586fc
 800d150:	20001778 	.word	0x20001778

0800d154 <Button_Handler>:
void Button_Handler() {
 800d154:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && menu_state != MAIN_MENU_STATE) {
 800d156:	2101      	movs	r1, #1
 800d158:	4807      	ldr	r0, [pc, #28]	; (800d178 <Button_Handler+0x24>)
 800d15a:	f7f7 ff37 	bl	8004fcc <HAL_GPIO_ReadPin>
 800d15e:	2801      	cmp	r0, #1
 800d160:	d000      	beq.n	800d164 <Button_Handler+0x10>
}
 800d162:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && menu_state != MAIN_MENU_STATE) {
 800d164:	4b05      	ldr	r3, [pc, #20]	; (800d17c <Button_Handler+0x28>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d0fa      	beq.n	800d162 <Button_Handler+0xe>
		UI_Config_Main(); // Return to Main Menu on Button Press (if outside of main menu)
 800d16c:	f7ff fe82 	bl	800ce74 <UI_Config_Main>
		menu_state = MAIN_MENU_STATE;
 800d170:	4b02      	ldr	r3, [pc, #8]	; (800d17c <Button_Handler+0x28>)
 800d172:	2200      	movs	r2, #0
 800d174:	601a      	str	r2, [r3, #0]
}
 800d176:	e7f4      	b.n	800d162 <Button_Handler+0xe>
 800d178:	40020000 	.word	0x40020000
 800d17c:	20001778 	.word	0x20001778

0800d180 <UI_Config_FX>:
void UI_Config_FX() {
 800d180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BSP_LCD_Clear(LCD_COLOR_LIGHTGRAY);
 800d184:	483e      	ldr	r0, [pc, #248]	; (800d280 <UI_Config_FX+0x100>)
 800d186:	f7f4 fc55 	bl	8001a34 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d18a:	f04f 30ff 	mov.w	r0, #4294967295
 800d18e:	f7f4 fc33 	bl	80019f8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(iconPosX_FX1, iconPosY_FX1, iconSize, iconSize);
 800d192:	4c3c      	ldr	r4, [pc, #240]	; (800d284 <UI_Config_FX+0x104>)
 800d194:	8822      	ldrh	r2, [r4, #0]
 800d196:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800d2bc <UI_Config_FX+0x13c>
 800d19a:	4613      	mov	r3, r2
 800d19c:	f8b8 1000 	ldrh.w	r1, [r8]
 800d1a0:	4839      	ldr	r0, [pc, #228]	; (800d288 <UI_Config_FX+0x108>)
 800d1a2:	8800      	ldrh	r0, [r0, #0]
 800d1a4:	f7f4 fcd0 	bl	8001b48 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(iconPosX_FX2, iconPosY_FX2, iconSize, iconSize);
 800d1a8:	8822      	ldrh	r2, [r4, #0]
 800d1aa:	4f38      	ldr	r7, [pc, #224]	; (800d28c <UI_Config_FX+0x10c>)
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	8839      	ldrh	r1, [r7, #0]
 800d1b0:	4837      	ldr	r0, [pc, #220]	; (800d290 <UI_Config_FX+0x110>)
 800d1b2:	8800      	ldrh	r0, [r0, #0]
 800d1b4:	f7f4 fcc8 	bl	8001b48 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(iconPosX_FX3, iconPosY_FX3, iconSize, iconSize);
 800d1b8:	8822      	ldrh	r2, [r4, #0]
 800d1ba:	4e36      	ldr	r6, [pc, #216]	; (800d294 <UI_Config_FX+0x114>)
 800d1bc:	4613      	mov	r3, r2
 800d1be:	8831      	ldrh	r1, [r6, #0]
 800d1c0:	4835      	ldr	r0, [pc, #212]	; (800d298 <UI_Config_FX+0x118>)
 800d1c2:	8800      	ldrh	r0, [r0, #0]
 800d1c4:	f7f4 fcc0 	bl	8001b48 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(iconPosX_FX4, iconPosY_FX4, iconSize, iconSize);
 800d1c8:	8822      	ldrh	r2, [r4, #0]
 800d1ca:	4d34      	ldr	r5, [pc, #208]	; (800d29c <UI_Config_FX+0x11c>)
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	8829      	ldrh	r1, [r5, #0]
 800d1d0:	4833      	ldr	r0, [pc, #204]	; (800d2a0 <UI_Config_FX+0x120>)
 800d1d2:	8800      	ldrh	r0, [r0, #0]
 800d1d4:	f7f4 fcb8 	bl	8001b48 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d1d8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d1dc:	f7f4 fc0c 	bl	80019f8 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(650, iconPosY_FX1+iconSize+20, (uint8_t *)"Lowpass", CENTER_MODE);
 800d1e0:	f8d8 1000 	ldr.w	r1, [r8]
 800d1e4:	6823      	ldr	r3, [r4, #0]
 800d1e6:	4419      	add	r1, r3
 800d1e8:	b289      	uxth	r1, r1
 800d1ea:	3114      	adds	r1, #20
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	4a2d      	ldr	r2, [pc, #180]	; (800d2a4 <UI_Config_FX+0x124>)
 800d1f0:	b289      	uxth	r1, r1
 800d1f2:	f240 208a 	movw	r0, #650	; 0x28a
 800d1f6:	f7f4 febd 	bl	8001f74 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(150, iconPosY_FX2+iconSize+20, (uint8_t *)"Highpass", CENTER_MODE);
 800d1fa:	6839      	ldr	r1, [r7, #0]
 800d1fc:	6823      	ldr	r3, [r4, #0]
 800d1fe:	4419      	add	r1, r3
 800d200:	b289      	uxth	r1, r1
 800d202:	3114      	adds	r1, #20
 800d204:	2301      	movs	r3, #1
 800d206:	4a28      	ldr	r2, [pc, #160]	; (800d2a8 <UI_Config_FX+0x128>)
 800d208:	b289      	uxth	r1, r1
 800d20a:	2096      	movs	r0, #150	; 0x96
 800d20c:	f7f4 feb2 	bl	8001f74 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(650, iconPosY_FX3+iconSize+20, (uint8_t *)"Bandpass", CENTER_MODE);
 800d210:	6831      	ldr	r1, [r6, #0]
 800d212:	6823      	ldr	r3, [r4, #0]
 800d214:	4419      	add	r1, r3
 800d216:	b289      	uxth	r1, r1
 800d218:	3114      	adds	r1, #20
 800d21a:	2301      	movs	r3, #1
 800d21c:	4a23      	ldr	r2, [pc, #140]	; (800d2ac <UI_Config_FX+0x12c>)
 800d21e:	b289      	uxth	r1, r1
 800d220:	f240 208a 	movw	r0, #650	; 0x28a
 800d224:	f7f4 fea6 	bl	8001f74 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(150, iconPosY_FX4+iconSize+20, (uint8_t *)"Mute", CENTER_MODE);
 800d228:	6829      	ldr	r1, [r5, #0]
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	4419      	add	r1, r3
 800d22e:	b289      	uxth	r1, r1
 800d230:	3114      	adds	r1, #20
 800d232:	2301      	movs	r3, #1
 800d234:	4a1e      	ldr	r2, [pc, #120]	; (800d2b0 <UI_Config_FX+0x130>)
 800d236:	b289      	uxth	r1, r1
 800d238:	2096      	movs	r0, #150	; 0x96
 800d23a:	f7f4 fe9b 	bl	8001f74 <BSP_LCD_DisplayStringAt>
	if (SD_CARD_ENABLED == 1) {
 800d23e:	4b1d      	ldr	r3, [pc, #116]	; (800d2b4 <UI_Config_FX+0x134>)
 800d240:	689b      	ldr	r3, [r3, #8]
 800d242:	2b01      	cmp	r3, #1
 800d244:	d001      	beq.n	800d24a <UI_Config_FX+0xca>
}
 800d246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		displayJPEG(iconName_FX1, iconPosX_FX1, iconPosY_FX1);
 800d24a:	4c1b      	ldr	r4, [pc, #108]	; (800d2b8 <UI_Config_FX+0x138>)
 800d24c:	f8d8 2000 	ldr.w	r2, [r8]
 800d250:	4b0d      	ldr	r3, [pc, #52]	; (800d288 <UI_Config_FX+0x108>)
 800d252:	6819      	ldr	r1, [r3, #0]
 800d254:	6920      	ldr	r0, [r4, #16]
 800d256:	f7ff fdbd 	bl	800cdd4 <displayJPEG>
		displayJPEG(iconName_FX2, iconPosX_FX2, iconPosY_FX2);
 800d25a:	683a      	ldr	r2, [r7, #0]
 800d25c:	4b0c      	ldr	r3, [pc, #48]	; (800d290 <UI_Config_FX+0x110>)
 800d25e:	6819      	ldr	r1, [r3, #0]
 800d260:	6960      	ldr	r0, [r4, #20]
 800d262:	f7ff fdb7 	bl	800cdd4 <displayJPEG>
		displayJPEG(iconName_FX3, iconPosX_FX3, iconPosY_FX3);
 800d266:	6832      	ldr	r2, [r6, #0]
 800d268:	4b0b      	ldr	r3, [pc, #44]	; (800d298 <UI_Config_FX+0x118>)
 800d26a:	6819      	ldr	r1, [r3, #0]
 800d26c:	69a0      	ldr	r0, [r4, #24]
 800d26e:	f7ff fdb1 	bl	800cdd4 <displayJPEG>
		displayJPEG(iconName_FX4, iconPosX_FX4, iconPosY_FX4);
 800d272:	682a      	ldr	r2, [r5, #0]
 800d274:	4b0a      	ldr	r3, [pc, #40]	; (800d2a0 <UI_Config_FX+0x120>)
 800d276:	6819      	ldr	r1, [r3, #0]
 800d278:	69e0      	ldr	r0, [r4, #28]
 800d27a:	f7ff fdab 	bl	800cdd4 <displayJPEG>
}
 800d27e:	e7e2      	b.n	800d246 <UI_Config_FX+0xc6>
 800d280:	ffd3d3d3 	.word	0xffd3d3d3
 800d284:	20018444 	.word	0x20018444
 800d288:	20018428 	.word	0x20018428
 800d28c:	20018448 	.word	0x20018448
 800d290:	20058818 	.word	0x20058818
 800d294:	20018454 	.word	0x20018454
 800d298:	200186e8 	.word	0x200186e8
 800d29c:	200181d4 	.word	0x200181d4
 800d2a0:	20018688 	.word	0x20018688
 800d2a4:	08013348 	.word	0x08013348
 800d2a8:	08013350 	.word	0x08013350
 800d2ac:	0801335c 	.word	0x0801335c
 800d2b0:	08013368 	.word	0x08013368
 800d2b4:	20001778 	.word	0x20001778
 800d2b8:	20000098 	.word	0x20000098
 800d2bc:	200586f4 	.word	0x200586f4

0800d2c0 <TouchScreen_Handler>:
Struct TouchScreen_Handler(uint16_t fx_state_current, uint16_t usb_state_current, uint16_t sv_state_current) {
 800d2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2c4:	4604      	mov	r4, r0
 800d2c6:	460d      	mov	r5, r1
 800d2c8:	4617      	mov	r7, r2
 800d2ca:	461e      	mov	r6, r3
	ui_data.fx_selection_state = fx_state_current;
 800d2cc:	6001      	str	r1, [r0, #0]
	ui_data.usb_selection_state = usb_state_current;
 800d2ce:	6042      	str	r2, [r0, #4]
	ui_data.sv_selection_state = sv_state_current;
 800d2d0:	6083      	str	r3, [r0, #8]
	BSP_TS_GetState(&TS_State);
 800d2d2:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 800d57c <TouchScreen_Handler+0x2bc>
 800d2d6:	4640      	mov	r0, r8
 800d2d8:	f7f5 fa1a 	bl	8002710 <BSP_TS_GetState>
	if (TS_State.touchDetected == 1) {
 800d2dc:	f898 3000 	ldrb.w	r3, [r8]
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d002      	beq.n	800d2ea <TouchScreen_Handler+0x2a>
}
 800d2e4:	4620      	mov	r0, r4
 800d2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d2ea:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d2ee:	f7f4 fb83 	bl	80019f8 <BSP_LCD_SetTextColor>
		BSP_TS_GetState(&TS_State);
 800d2f2:	4640      	mov	r0, r8
 800d2f4:	f7f5 fa0c 	bl	8002710 <BSP_TS_GetState>
		if (menu_state == MAIN_MENU_STATE) {
 800d2f8:	4b9f      	ldr	r3, [pc, #636]	; (800d578 <TouchScreen_Handler+0x2b8>)
 800d2fa:	f8d3 8000 	ldr.w	r8, [r3]
 800d2fe:	f1b8 0f00 	cmp.w	r8, #0
 800d302:	f040 80a0 	bne.w	800d446 <TouchScreen_Handler+0x186>
			if ((TS_State.touchX[0] > iconPosX_FX) && (TS_State.touchX[0] < iconPosX_FX+iconSize) &&
 800d306:	4b9d      	ldr	r3, [pc, #628]	; (800d57c <TouchScreen_Handler+0x2bc>)
 800d308:	885b      	ldrh	r3, [r3, #2]
 800d30a:	4a9d      	ldr	r2, [pc, #628]	; (800d580 <TouchScreen_Handler+0x2c0>)
 800d30c:	6812      	ldr	r2, [r2, #0]
 800d30e:	4293      	cmp	r3, r2
 800d310:	d90d      	bls.n	800d32e <TouchScreen_Handler+0x6e>
 800d312:	499c      	ldr	r1, [pc, #624]	; (800d584 <TouchScreen_Handler+0x2c4>)
 800d314:	6809      	ldr	r1, [r1, #0]
 800d316:	440a      	add	r2, r1
 800d318:	4293      	cmp	r3, r2
 800d31a:	d208      	bcs.n	800d32e <TouchScreen_Handler+0x6e>
				(TS_State.touchY[0] > iconPosY_FX) && (TS_State.touchY[0] < iconPosY_FX+iconSize))
 800d31c:	4a97      	ldr	r2, [pc, #604]	; (800d57c <TouchScreen_Handler+0x2bc>)
 800d31e:	88d2      	ldrh	r2, [r2, #6]
 800d320:	4899      	ldr	r0, [pc, #612]	; (800d588 <TouchScreen_Handler+0x2c8>)
 800d322:	6800      	ldr	r0, [r0, #0]
			if ((TS_State.touchX[0] > iconPosX_FX) && (TS_State.touchX[0] < iconPosX_FX+iconSize) &&
 800d324:	4282      	cmp	r2, r0
 800d326:	d902      	bls.n	800d32e <TouchScreen_Handler+0x6e>
				(TS_State.touchY[0] > iconPosY_FX) && (TS_State.touchY[0] < iconPosY_FX+iconSize))
 800d328:	4401      	add	r1, r0
 800d32a:	428a      	cmp	r2, r1
 800d32c:	d372      	bcc.n	800d414 <TouchScreen_Handler+0x154>
			else if ((TS_State.touchX[0] > iconPosX_SV) && (TS_State.touchX[0] < iconPosX_SV+iconSize) &&
 800d32e:	4a97      	ldr	r2, [pc, #604]	; (800d58c <TouchScreen_Handler+0x2cc>)
 800d330:	6812      	ldr	r2, [r2, #0]
 800d332:	4293      	cmp	r3, r2
 800d334:	d90d      	bls.n	800d352 <TouchScreen_Handler+0x92>
 800d336:	4993      	ldr	r1, [pc, #588]	; (800d584 <TouchScreen_Handler+0x2c4>)
 800d338:	6809      	ldr	r1, [r1, #0]
 800d33a:	440a      	add	r2, r1
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d208      	bcs.n	800d352 <TouchScreen_Handler+0x92>
				(TS_State.touchY[0] > iconPosY_SV) && (TS_State.touchY[0] < iconPosY_SV+iconSize))
 800d340:	4b8e      	ldr	r3, [pc, #568]	; (800d57c <TouchScreen_Handler+0x2bc>)
 800d342:	88db      	ldrh	r3, [r3, #6]
 800d344:	4a92      	ldr	r2, [pc, #584]	; (800d590 <TouchScreen_Handler+0x2d0>)
 800d346:	6812      	ldr	r2, [r2, #0]
			else if ((TS_State.touchX[0] > iconPosX_SV) && (TS_State.touchX[0] < iconPosX_SV+iconSize) &&
 800d348:	4293      	cmp	r3, r2
 800d34a:	d902      	bls.n	800d352 <TouchScreen_Handler+0x92>
				(TS_State.touchY[0] > iconPosY_SV) && (TS_State.touchY[0] < iconPosY_SV+iconSize))
 800d34c:	4411      	add	r1, r2
 800d34e:	428b      	cmp	r3, r1
 800d350:	d363      	bcc.n	800d41a <TouchScreen_Handler+0x15a>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800d352:	4890      	ldr	r0, [pc, #576]	; (800d594 <TouchScreen_Handler+0x2d4>)
 800d354:	f7f4 fb50 	bl	80019f8 <BSP_LCD_SetTextColor>
				BSP_LCD_DrawRect(iconPosX_FX - 10, iconPosY_FX - 10, iconSize + 20, iconSize + 20);
 800d358:	4e8a      	ldr	r6, [pc, #552]	; (800d584 <TouchScreen_Handler+0x2c4>)
 800d35a:	6832      	ldr	r2, [r6, #0]
 800d35c:	3214      	adds	r2, #20
 800d35e:	b292      	uxth	r2, r2
 800d360:	4b89      	ldr	r3, [pc, #548]	; (800d588 <TouchScreen_Handler+0x2c8>)
 800d362:	6819      	ldr	r1, [r3, #0]
 800d364:	390a      	subs	r1, #10
 800d366:	4b86      	ldr	r3, [pc, #536]	; (800d580 <TouchScreen_Handler+0x2c0>)
 800d368:	6818      	ldr	r0, [r3, #0]
 800d36a:	380a      	subs	r0, #10
 800d36c:	4613      	mov	r3, r2
 800d36e:	b289      	uxth	r1, r1
 800d370:	b280      	uxth	r0, r0
 800d372:	f7f4 fbcf 	bl	8001b14 <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_SV - 10, iconPosY_SV - 10, iconSize + 20, iconSize + 20);
 800d376:	6832      	ldr	r2, [r6, #0]
 800d378:	3214      	adds	r2, #20
 800d37a:	b292      	uxth	r2, r2
 800d37c:	4b84      	ldr	r3, [pc, #528]	; (800d590 <TouchScreen_Handler+0x2d0>)
 800d37e:	6819      	ldr	r1, [r3, #0]
 800d380:	390a      	subs	r1, #10
 800d382:	4b82      	ldr	r3, [pc, #520]	; (800d58c <TouchScreen_Handler+0x2cc>)
 800d384:	6818      	ldr	r0, [r3, #0]
 800d386:	380a      	subs	r0, #10
 800d388:	4613      	mov	r3, r2
 800d38a:	b289      	uxth	r1, r1
 800d38c:	b280      	uxth	r0, r0
 800d38e:	f7f4 fbc1 	bl	8001b14 <BSP_LCD_DrawRect>
			if ((TS_State.touchX[0] > xSize_LCD-160) && (TS_State.touchX[0] < (xSize_LCD-80)+iconSize) &&
 800d392:	4b7a      	ldr	r3, [pc, #488]	; (800d57c <TouchScreen_Handler+0x2bc>)
 800d394:	885a      	ldrh	r2, [r3, #2]
 800d396:	4b80      	ldr	r3, [pc, #512]	; (800d598 <TouchScreen_Handler+0x2d8>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f1a3 01a0 	sub.w	r1, r3, #160	; 0xa0
 800d39e:	428a      	cmp	r2, r1
 800d3a0:	d928      	bls.n	800d3f4 <TouchScreen_Handler+0x134>
 800d3a2:	4978      	ldr	r1, [pc, #480]	; (800d584 <TouchScreen_Handler+0x2c4>)
 800d3a4:	6809      	ldr	r1, [r1, #0]
 800d3a6:	440b      	add	r3, r1
 800d3a8:	3b50      	subs	r3, #80	; 0x50
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d222      	bcs.n	800d3f4 <TouchScreen_Handler+0x134>
				(TS_State.touchY[0] > 0) && (TS_State.touchY[0] < 30+iconSize))
 800d3ae:	4b73      	ldr	r3, [pc, #460]	; (800d57c <TouchScreen_Handler+0x2bc>)
 800d3b0:	88db      	ldrh	r3, [r3, #6]
			if ((TS_State.touchX[0] > xSize_LCD-160) && (TS_State.touchX[0] < (xSize_LCD-80)+iconSize) &&
 800d3b2:	b1fb      	cbz	r3, 800d3f4 <TouchScreen_Handler+0x134>
				(TS_State.touchY[0] > 0) && (TS_State.touchY[0] < 30+iconSize))
 800d3b4:	311e      	adds	r1, #30
 800d3b6:	428b      	cmp	r3, r1
 800d3b8:	d21c      	bcs.n	800d3f4 <TouchScreen_Handler+0x134>
				if (ui_data.usb_selection_state == USB_STATE_OFF) {
 800d3ba:	bb8f      	cbnz	r7, 800d420 <TouchScreen_Handler+0x160>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d3bc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d3c0:	f7f4 fb1a 	bl	80019f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(xSize_LCD-80+iconSize/16, 30+iconSize/16, 3*iconSize/8, 3*iconSize/8);
 800d3c4:	4b6f      	ldr	r3, [pc, #444]	; (800d584 <TouchScreen_Handler+0x2c4>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f3c3 110f 	ubfx	r1, r3, #4, #16
 800d3cc:	4a72      	ldr	r2, [pc, #456]	; (800d598 <TouchScreen_Handler+0x2d8>)
 800d3ce:	6810      	ldr	r0, [r2, #0]
 800d3d0:	4408      	add	r0, r1
 800d3d2:	b280      	uxth	r0, r0
 800d3d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d3d8:	f3c3 02cf 	ubfx	r2, r3, #3, #16
 800d3dc:	311e      	adds	r1, #30
 800d3de:	3850      	subs	r0, #80	; 0x50
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	b289      	uxth	r1, r1
 800d3e4:	b280      	uxth	r0, r0
 800d3e6:	f7f4 fbaf 	bl	8001b48 <BSP_LCD_FillRect>
					ui_data.usb_selection_state = USB_STATE_ON;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	6063      	str	r3, [r4, #4]
				HAL_Delay(200);
 800d3ee:	20c8      	movs	r0, #200	; 0xc8
 800d3f0:	f7f6 fd86 	bl	8003f00 <HAL_Delay>
		if (menu_selection_state == 1) { // FX Menu
 800d3f4:	f1b8 0f01 	cmp.w	r8, #1
 800d3f8:	f000 81df 	beq.w	800d7ba <TouchScreen_Handler+0x4fa>
		} else if (menu_selection_state == 2) { // Signal Viewer
 800d3fc:	f1b8 0f02 	cmp.w	r8, #2
 800d400:	f47f af70 	bne.w	800d2e4 <TouchScreen_Handler+0x24>
			UI_Config_SV(SV_STATE_SCOPE);
 800d404:	2000      	movs	r0, #0
 800d406:	f7ff fb89 	bl	800cb1c <UI_Config_SV>
			menu_state = SV_MENU_STATE;
 800d40a:	4b5b      	ldr	r3, [pc, #364]	; (800d578 <TouchScreen_Handler+0x2b8>)
 800d40c:	2202      	movs	r2, #2
 800d40e:	601a      	str	r2, [r3, #0]
			ui_data.fx_selection_state = fx_state_current;
 800d410:	6025      	str	r5, [r4, #0]
	return ui_data;
 800d412:	e767      	b.n	800d2e4 <TouchScreen_Handler+0x24>
				menu_selection_state = 1;
 800d414:	f04f 0801 	mov.w	r8, #1
 800d418:	e7bb      	b.n	800d392 <TouchScreen_Handler+0xd2>
				menu_selection_state = 2;
 800d41a:	f04f 0802 	mov.w	r8, #2
 800d41e:	e7b8      	b.n	800d392 <TouchScreen_Handler+0xd2>
					BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d420:	f04f 30ff 	mov.w	r0, #4294967295
 800d424:	f7f4 fae8 	bl	80019f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(xSize_LCD-80, 30, iconSize/2, iconSize/2);
 800d428:	4b56      	ldr	r3, [pc, #344]	; (800d584 <TouchScreen_Handler+0x2c4>)
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	f3c2 024f 	ubfx	r2, r2, #1, #16
 800d430:	4b59      	ldr	r3, [pc, #356]	; (800d598 <TouchScreen_Handler+0x2d8>)
 800d432:	6818      	ldr	r0, [r3, #0]
 800d434:	3850      	subs	r0, #80	; 0x50
 800d436:	4613      	mov	r3, r2
 800d438:	211e      	movs	r1, #30
 800d43a:	b280      	uxth	r0, r0
 800d43c:	f7f4 fb84 	bl	8001b48 <BSP_LCD_FillRect>
					ui_data.usb_selection_state = USB_STATE_OFF;
 800d440:	2300      	movs	r3, #0
 800d442:	6063      	str	r3, [r4, #4]
 800d444:	e7d3      	b.n	800d3ee <TouchScreen_Handler+0x12e>
		else if (menu_state == FX_MENU_STATE) {
 800d446:	f1b8 0f01 	cmp.w	r8, #1
 800d44a:	d006      	beq.n	800d45a <TouchScreen_Handler+0x19a>
		else if (menu_state == SV_MENU_STATE) {
 800d44c:	f1b8 0f02 	cmp.w	r8, #2
 800d450:	f000 81a5 	beq.w	800d79e <TouchScreen_Handler+0x4de>
	int menu_selection_state = 0;
 800d454:	f04f 0800 	mov.w	r8, #0
 800d458:	e7d0      	b.n	800d3fc <TouchScreen_Handler+0x13c>
			if ((TS_State.touchX[0] > iconPosX_FX1) && (TS_State.touchX[0] < iconPosX_FX1+iconSize) &&
 800d45a:	4b48      	ldr	r3, [pc, #288]	; (800d57c <TouchScreen_Handler+0x2bc>)
 800d45c:	885b      	ldrh	r3, [r3, #2]
 800d45e:	4a4f      	ldr	r2, [pc, #316]	; (800d59c <TouchScreen_Handler+0x2dc>)
 800d460:	6810      	ldr	r0, [r2, #0]
 800d462:	4283      	cmp	r3, r0
 800d464:	d90e      	bls.n	800d484 <TouchScreen_Handler+0x1c4>
 800d466:	4a47      	ldr	r2, [pc, #284]	; (800d584 <TouchScreen_Handler+0x2c4>)
 800d468:	6812      	ldr	r2, [r2, #0]
 800d46a:	1881      	adds	r1, r0, r2
 800d46c:	428b      	cmp	r3, r1
 800d46e:	d209      	bcs.n	800d484 <TouchScreen_Handler+0x1c4>
				(TS_State.touchY[0] > iconPosY_FX1) && (TS_State.touchY[0] < iconPosY_FX1+iconSize))
 800d470:	4942      	ldr	r1, [pc, #264]	; (800d57c <TouchScreen_Handler+0x2bc>)
 800d472:	88ce      	ldrh	r6, [r1, #6]
 800d474:	494a      	ldr	r1, [pc, #296]	; (800d5a0 <TouchScreen_Handler+0x2e0>)
 800d476:	6809      	ldr	r1, [r1, #0]
			if ((TS_State.touchX[0] > iconPosX_FX1) && (TS_State.touchX[0] < iconPosX_FX1+iconSize) &&
 800d478:	428e      	cmp	r6, r1
 800d47a:	d903      	bls.n	800d484 <TouchScreen_Handler+0x1c4>
				(TS_State.touchY[0] > iconPosY_FX1) && (TS_State.touchY[0] < iconPosY_FX1+iconSize))
 800d47c:	1857      	adds	r7, r2, r1
 800d47e:	42be      	cmp	r6, r7
 800d480:	f0c0 809c 	bcc.w	800d5bc <TouchScreen_Handler+0x2fc>
			else if ((TS_State.touchX[0] > iconPosX_FX2) && (TS_State.touchX[0] < iconPosX_FX2+iconSize) &&
 800d484:	4a47      	ldr	r2, [pc, #284]	; (800d5a4 <TouchScreen_Handler+0x2e4>)
 800d486:	6810      	ldr	r0, [r2, #0]
 800d488:	4283      	cmp	r3, r0
 800d48a:	d90e      	bls.n	800d4aa <TouchScreen_Handler+0x1ea>
 800d48c:	4a3d      	ldr	r2, [pc, #244]	; (800d584 <TouchScreen_Handler+0x2c4>)
 800d48e:	6812      	ldr	r2, [r2, #0]
 800d490:	1881      	adds	r1, r0, r2
 800d492:	428b      	cmp	r3, r1
 800d494:	d209      	bcs.n	800d4aa <TouchScreen_Handler+0x1ea>
					(TS_State.touchY[0] > iconPosY_FX2) && (TS_State.touchY[0] < iconPosY_FX2+iconSize))
 800d496:	4939      	ldr	r1, [pc, #228]	; (800d57c <TouchScreen_Handler+0x2bc>)
 800d498:	88ce      	ldrh	r6, [r1, #6]
 800d49a:	4943      	ldr	r1, [pc, #268]	; (800d5a8 <TouchScreen_Handler+0x2e8>)
 800d49c:	6809      	ldr	r1, [r1, #0]
			else if ((TS_State.touchX[0] > iconPosX_FX2) && (TS_State.touchX[0] < iconPosX_FX2+iconSize) &&
 800d49e:	428e      	cmp	r6, r1
 800d4a0:	d903      	bls.n	800d4aa <TouchScreen_Handler+0x1ea>
					(TS_State.touchY[0] > iconPosY_FX2) && (TS_State.touchY[0] < iconPosY_FX2+iconSize))
 800d4a2:	1857      	adds	r7, r2, r1
 800d4a4:	42be      	cmp	r6, r7
 800d4a6:	f0c0 80c5 	bcc.w	800d634 <TouchScreen_Handler+0x374>
			else if ((TS_State.touchX[0] > iconPosX_FX3) && (TS_State.touchX[0] < iconPosX_FX3+iconSize) &&
 800d4aa:	4a40      	ldr	r2, [pc, #256]	; (800d5ac <TouchScreen_Handler+0x2ec>)
 800d4ac:	6810      	ldr	r0, [r2, #0]
 800d4ae:	4283      	cmp	r3, r0
 800d4b0:	d90e      	bls.n	800d4d0 <TouchScreen_Handler+0x210>
 800d4b2:	4a34      	ldr	r2, [pc, #208]	; (800d584 <TouchScreen_Handler+0x2c4>)
 800d4b4:	6812      	ldr	r2, [r2, #0]
 800d4b6:	1881      	adds	r1, r0, r2
 800d4b8:	428b      	cmp	r3, r1
 800d4ba:	d209      	bcs.n	800d4d0 <TouchScreen_Handler+0x210>
					(TS_State.touchY[0] > iconPosY_FX3) && (TS_State.touchY[0] < iconPosY_FX3+iconSize))
 800d4bc:	492f      	ldr	r1, [pc, #188]	; (800d57c <TouchScreen_Handler+0x2bc>)
 800d4be:	88ce      	ldrh	r6, [r1, #6]
 800d4c0:	493b      	ldr	r1, [pc, #236]	; (800d5b0 <TouchScreen_Handler+0x2f0>)
 800d4c2:	6809      	ldr	r1, [r1, #0]
			else if ((TS_State.touchX[0] > iconPosX_FX3) && (TS_State.touchX[0] < iconPosX_FX3+iconSize) &&
 800d4c4:	428e      	cmp	r6, r1
 800d4c6:	d903      	bls.n	800d4d0 <TouchScreen_Handler+0x210>
					(TS_State.touchY[0] > iconPosY_FX3) && (TS_State.touchY[0] < iconPosY_FX3+iconSize))
 800d4c8:	1857      	adds	r7, r2, r1
 800d4ca:	42be      	cmp	r6, r7
 800d4cc:	f0c0 80ee 	bcc.w	800d6ac <TouchScreen_Handler+0x3ec>
			else if ((TS_State.touchX[0] > iconPosX_FX4) && (TS_State.touchX[0] < iconPosX_FX4+iconSize) &&
 800d4d0:	4a38      	ldr	r2, [pc, #224]	; (800d5b4 <TouchScreen_Handler+0x2f4>)
 800d4d2:	6810      	ldr	r0, [r2, #0]
 800d4d4:	4283      	cmp	r3, r0
 800d4d6:	d90e      	bls.n	800d4f6 <TouchScreen_Handler+0x236>
 800d4d8:	4a2a      	ldr	r2, [pc, #168]	; (800d584 <TouchScreen_Handler+0x2c4>)
 800d4da:	6812      	ldr	r2, [r2, #0]
 800d4dc:	1881      	adds	r1, r0, r2
 800d4de:	428b      	cmp	r3, r1
 800d4e0:	d209      	bcs.n	800d4f6 <TouchScreen_Handler+0x236>
					(TS_State.touchY[0] > iconPosY_FX4) && (TS_State.touchY[0] < iconPosY_FX4+iconSize))
 800d4e2:	4b26      	ldr	r3, [pc, #152]	; (800d57c <TouchScreen_Handler+0x2bc>)
 800d4e4:	88d9      	ldrh	r1, [r3, #6]
 800d4e6:	4b34      	ldr	r3, [pc, #208]	; (800d5b8 <TouchScreen_Handler+0x2f8>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
			else if ((TS_State.touchX[0] > iconPosX_FX4) && (TS_State.touchX[0] < iconPosX_FX4+iconSize) &&
 800d4ea:	4299      	cmp	r1, r3
 800d4ec:	d903      	bls.n	800d4f6 <TouchScreen_Handler+0x236>
					(TS_State.touchY[0] > iconPosY_FX4) && (TS_State.touchY[0] < iconPosY_FX4+iconSize))
 800d4ee:	18d6      	adds	r6, r2, r3
 800d4f0:	42b1      	cmp	r1, r6
 800d4f2:	f0c0 8117 	bcc.w	800d724 <TouchScreen_Handler+0x464>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800d4f6:	4827      	ldr	r0, [pc, #156]	; (800d594 <TouchScreen_Handler+0x2d4>)
 800d4f8:	f7f4 fa7e 	bl	80019f8 <BSP_LCD_SetTextColor>
				BSP_LCD_DrawRect(iconPosX_FX1 - 10, iconPosY_FX1 - 10, iconSize + 20, iconSize + 20);
 800d4fc:	4e21      	ldr	r6, [pc, #132]	; (800d584 <TouchScreen_Handler+0x2c4>)
 800d4fe:	6832      	ldr	r2, [r6, #0]
 800d500:	3214      	adds	r2, #20
 800d502:	b292      	uxth	r2, r2
 800d504:	4b26      	ldr	r3, [pc, #152]	; (800d5a0 <TouchScreen_Handler+0x2e0>)
 800d506:	6819      	ldr	r1, [r3, #0]
 800d508:	390a      	subs	r1, #10
 800d50a:	4b24      	ldr	r3, [pc, #144]	; (800d59c <TouchScreen_Handler+0x2dc>)
 800d50c:	6818      	ldr	r0, [r3, #0]
 800d50e:	380a      	subs	r0, #10
 800d510:	4613      	mov	r3, r2
 800d512:	b289      	uxth	r1, r1
 800d514:	b280      	uxth	r0, r0
 800d516:	f7f4 fafd 	bl	8001b14 <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX2 - 10, iconPosY_FX2 - 10, iconSize + 20, iconSize + 20);
 800d51a:	6832      	ldr	r2, [r6, #0]
 800d51c:	3214      	adds	r2, #20
 800d51e:	b292      	uxth	r2, r2
 800d520:	4b21      	ldr	r3, [pc, #132]	; (800d5a8 <TouchScreen_Handler+0x2e8>)
 800d522:	6819      	ldr	r1, [r3, #0]
 800d524:	390a      	subs	r1, #10
 800d526:	4b1f      	ldr	r3, [pc, #124]	; (800d5a4 <TouchScreen_Handler+0x2e4>)
 800d528:	6818      	ldr	r0, [r3, #0]
 800d52a:	380a      	subs	r0, #10
 800d52c:	4613      	mov	r3, r2
 800d52e:	b289      	uxth	r1, r1
 800d530:	b280      	uxth	r0, r0
 800d532:	f7f4 faef 	bl	8001b14 <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX3 - 10, iconPosY_FX3 - 10, iconSize + 20, iconSize + 20);
 800d536:	6832      	ldr	r2, [r6, #0]
 800d538:	3214      	adds	r2, #20
 800d53a:	b292      	uxth	r2, r2
 800d53c:	4b1c      	ldr	r3, [pc, #112]	; (800d5b0 <TouchScreen_Handler+0x2f0>)
 800d53e:	6819      	ldr	r1, [r3, #0]
 800d540:	390a      	subs	r1, #10
 800d542:	4b1a      	ldr	r3, [pc, #104]	; (800d5ac <TouchScreen_Handler+0x2ec>)
 800d544:	6818      	ldr	r0, [r3, #0]
 800d546:	380a      	subs	r0, #10
 800d548:	4613      	mov	r3, r2
 800d54a:	b289      	uxth	r1, r1
 800d54c:	b280      	uxth	r0, r0
 800d54e:	f7f4 fae1 	bl	8001b14 <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX4 - 10, iconPosY_FX4 - 10, iconSize + 20, iconSize + 20);
 800d552:	6832      	ldr	r2, [r6, #0]
 800d554:	3214      	adds	r2, #20
 800d556:	b292      	uxth	r2, r2
 800d558:	4b17      	ldr	r3, [pc, #92]	; (800d5b8 <TouchScreen_Handler+0x2f8>)
 800d55a:	6819      	ldr	r1, [r3, #0]
 800d55c:	390a      	subs	r1, #10
 800d55e:	4b15      	ldr	r3, [pc, #84]	; (800d5b4 <TouchScreen_Handler+0x2f4>)
 800d560:	6818      	ldr	r0, [r3, #0]
 800d562:	380a      	subs	r0, #10
 800d564:	4613      	mov	r3, r2
 800d566:	b289      	uxth	r1, r1
 800d568:	b280      	uxth	r0, r0
 800d56a:	f7f4 fad3 	bl	8001b14 <BSP_LCD_DrawRect>
				ui_data.fx_selection_state = FX_STATE_NONE;
 800d56e:	2300      	movs	r3, #0
 800d570:	6023      	str	r3, [r4, #0]
	int menu_selection_state = 0;
 800d572:	4698      	mov	r8, r3
 800d574:	e742      	b.n	800d3fc <TouchScreen_Handler+0x13c>
 800d576:	bf00      	nop
 800d578:	20001778 	.word	0x20001778
 800d57c:	2005880c 	.word	0x2005880c
 800d580:	200586f8 	.word	0x200586f8
 800d584:	20018444 	.word	0x20018444
 800d588:	2001868c 	.word	0x2001868c
 800d58c:	20018450 	.word	0x20018450
 800d590:	200587b0 	.word	0x200587b0
 800d594:	ffd3d3d3 	.word	0xffd3d3d3
 800d598:	200181d0 	.word	0x200181d0
 800d59c:	20018428 	.word	0x20018428
 800d5a0:	200586f4 	.word	0x200586f4
 800d5a4:	20058818 	.word	0x20058818
 800d5a8:	20018448 	.word	0x20018448
 800d5ac:	200186e8 	.word	0x200186e8
 800d5b0:	20018454 	.word	0x20018454
 800d5b4:	20018688 	.word	0x20018688
 800d5b8:	200181d4 	.word	0x200181d4
				BSP_LCD_DrawRect(iconPosX_FX1 - 10, iconPosY_FX1 - 10, iconSize + 20, iconSize + 20);
 800d5bc:	3214      	adds	r2, #20
 800d5be:	b292      	uxth	r2, r2
 800d5c0:	390a      	subs	r1, #10
 800d5c2:	380a      	subs	r0, #10
 800d5c4:	4613      	mov	r3, r2
 800d5c6:	b289      	uxth	r1, r1
 800d5c8:	b280      	uxth	r0, r0
 800d5ca:	f7f4 faa3 	bl	8001b14 <BSP_LCD_DrawRect>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800d5ce:	48a5      	ldr	r0, [pc, #660]	; (800d864 <TouchScreen_Handler+0x5a4>)
 800d5d0:	f7f4 fa12 	bl	80019f8 <BSP_LCD_SetTextColor>
				BSP_LCD_DrawRect(iconPosX_FX2 - 10, iconPosY_FX2 - 10, iconSize + 20, iconSize + 20);
 800d5d4:	4ea4      	ldr	r6, [pc, #656]	; (800d868 <TouchScreen_Handler+0x5a8>)
 800d5d6:	6833      	ldr	r3, [r6, #0]
 800d5d8:	3314      	adds	r3, #20
 800d5da:	b29a      	uxth	r2, r3
 800d5dc:	4ba3      	ldr	r3, [pc, #652]	; (800d86c <TouchScreen_Handler+0x5ac>)
 800d5de:	6819      	ldr	r1, [r3, #0]
 800d5e0:	390a      	subs	r1, #10
 800d5e2:	4ba3      	ldr	r3, [pc, #652]	; (800d870 <TouchScreen_Handler+0x5b0>)
 800d5e4:	6818      	ldr	r0, [r3, #0]
 800d5e6:	380a      	subs	r0, #10
 800d5e8:	4613      	mov	r3, r2
 800d5ea:	b289      	uxth	r1, r1
 800d5ec:	b280      	uxth	r0, r0
 800d5ee:	f7f4 fa91 	bl	8001b14 <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX3 - 10, iconPosY_FX3 - 10, iconSize + 20, iconSize + 20);
 800d5f2:	6833      	ldr	r3, [r6, #0]
 800d5f4:	3314      	adds	r3, #20
 800d5f6:	b29a      	uxth	r2, r3
 800d5f8:	4b9e      	ldr	r3, [pc, #632]	; (800d874 <TouchScreen_Handler+0x5b4>)
 800d5fa:	6819      	ldr	r1, [r3, #0]
 800d5fc:	390a      	subs	r1, #10
 800d5fe:	4b9e      	ldr	r3, [pc, #632]	; (800d878 <TouchScreen_Handler+0x5b8>)
 800d600:	6818      	ldr	r0, [r3, #0]
 800d602:	380a      	subs	r0, #10
 800d604:	4613      	mov	r3, r2
 800d606:	b289      	uxth	r1, r1
 800d608:	b280      	uxth	r0, r0
 800d60a:	f7f4 fa83 	bl	8001b14 <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX4 - 10, iconPosY_FX4 - 10, iconSize + 20, iconSize + 20);
 800d60e:	6832      	ldr	r2, [r6, #0]
 800d610:	3214      	adds	r2, #20
 800d612:	b292      	uxth	r2, r2
 800d614:	4b99      	ldr	r3, [pc, #612]	; (800d87c <TouchScreen_Handler+0x5bc>)
 800d616:	6819      	ldr	r1, [r3, #0]
 800d618:	390a      	subs	r1, #10
 800d61a:	4b99      	ldr	r3, [pc, #612]	; (800d880 <TouchScreen_Handler+0x5c0>)
 800d61c:	6818      	ldr	r0, [r3, #0]
 800d61e:	380a      	subs	r0, #10
 800d620:	4613      	mov	r3, r2
 800d622:	b289      	uxth	r1, r1
 800d624:	b280      	uxth	r0, r0
 800d626:	f7f4 fa75 	bl	8001b14 <BSP_LCD_DrawRect>
				ui_data.fx_selection_state = FX_STATE_1;
 800d62a:	2301      	movs	r3, #1
 800d62c:	6023      	str	r3, [r4, #0]
	int menu_selection_state = 0;
 800d62e:	f04f 0800 	mov.w	r8, #0
 800d632:	e6e3      	b.n	800d3fc <TouchScreen_Handler+0x13c>
				BSP_LCD_DrawRect(iconPosX_FX2 - 10, iconPosY_FX2 - 10, iconSize + 20, iconSize + 20);
 800d634:	3214      	adds	r2, #20
 800d636:	b292      	uxth	r2, r2
 800d638:	390a      	subs	r1, #10
 800d63a:	380a      	subs	r0, #10
 800d63c:	4613      	mov	r3, r2
 800d63e:	b289      	uxth	r1, r1
 800d640:	b280      	uxth	r0, r0
 800d642:	f7f4 fa67 	bl	8001b14 <BSP_LCD_DrawRect>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800d646:	4887      	ldr	r0, [pc, #540]	; (800d864 <TouchScreen_Handler+0x5a4>)
 800d648:	f7f4 f9d6 	bl	80019f8 <BSP_LCD_SetTextColor>
				BSP_LCD_DrawRect(iconPosX_FX1 - 10, iconPosY_FX1 - 10, iconSize + 20, iconSize + 20);
 800d64c:	4e86      	ldr	r6, [pc, #536]	; (800d868 <TouchScreen_Handler+0x5a8>)
 800d64e:	6833      	ldr	r3, [r6, #0]
 800d650:	3314      	adds	r3, #20
 800d652:	b29a      	uxth	r2, r3
 800d654:	4b8b      	ldr	r3, [pc, #556]	; (800d884 <TouchScreen_Handler+0x5c4>)
 800d656:	6819      	ldr	r1, [r3, #0]
 800d658:	390a      	subs	r1, #10
 800d65a:	4b8b      	ldr	r3, [pc, #556]	; (800d888 <TouchScreen_Handler+0x5c8>)
 800d65c:	6818      	ldr	r0, [r3, #0]
 800d65e:	380a      	subs	r0, #10
 800d660:	4613      	mov	r3, r2
 800d662:	b289      	uxth	r1, r1
 800d664:	b280      	uxth	r0, r0
 800d666:	f7f4 fa55 	bl	8001b14 <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX3 - 10, iconPosY_FX3 - 10, iconSize + 20, iconSize + 20);
 800d66a:	6833      	ldr	r3, [r6, #0]
 800d66c:	3314      	adds	r3, #20
 800d66e:	b29a      	uxth	r2, r3
 800d670:	4b80      	ldr	r3, [pc, #512]	; (800d874 <TouchScreen_Handler+0x5b4>)
 800d672:	6819      	ldr	r1, [r3, #0]
 800d674:	390a      	subs	r1, #10
 800d676:	4b80      	ldr	r3, [pc, #512]	; (800d878 <TouchScreen_Handler+0x5b8>)
 800d678:	6818      	ldr	r0, [r3, #0]
 800d67a:	380a      	subs	r0, #10
 800d67c:	4613      	mov	r3, r2
 800d67e:	b289      	uxth	r1, r1
 800d680:	b280      	uxth	r0, r0
 800d682:	f7f4 fa47 	bl	8001b14 <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX4 - 10, iconPosY_FX4 - 10, iconSize + 20, iconSize + 20);
 800d686:	6832      	ldr	r2, [r6, #0]
 800d688:	3214      	adds	r2, #20
 800d68a:	b292      	uxth	r2, r2
 800d68c:	4b7b      	ldr	r3, [pc, #492]	; (800d87c <TouchScreen_Handler+0x5bc>)
 800d68e:	6819      	ldr	r1, [r3, #0]
 800d690:	390a      	subs	r1, #10
 800d692:	4b7b      	ldr	r3, [pc, #492]	; (800d880 <TouchScreen_Handler+0x5c0>)
 800d694:	6818      	ldr	r0, [r3, #0]
 800d696:	380a      	subs	r0, #10
 800d698:	4613      	mov	r3, r2
 800d69a:	b289      	uxth	r1, r1
 800d69c:	b280      	uxth	r0, r0
 800d69e:	f7f4 fa39 	bl	8001b14 <BSP_LCD_DrawRect>
				ui_data.fx_selection_state = FX_STATE_2;
 800d6a2:	2302      	movs	r3, #2
 800d6a4:	6023      	str	r3, [r4, #0]
	int menu_selection_state = 0;
 800d6a6:	f04f 0800 	mov.w	r8, #0
 800d6aa:	e6a7      	b.n	800d3fc <TouchScreen_Handler+0x13c>
				BSP_LCD_DrawRect(iconPosX_FX3 - 10, iconPosY_FX3 - 10, iconSize + 20, iconSize + 20);
 800d6ac:	3214      	adds	r2, #20
 800d6ae:	b292      	uxth	r2, r2
 800d6b0:	390a      	subs	r1, #10
 800d6b2:	380a      	subs	r0, #10
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	b289      	uxth	r1, r1
 800d6b8:	b280      	uxth	r0, r0
 800d6ba:	f7f4 fa2b 	bl	8001b14 <BSP_LCD_DrawRect>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800d6be:	4869      	ldr	r0, [pc, #420]	; (800d864 <TouchScreen_Handler+0x5a4>)
 800d6c0:	f7f4 f99a 	bl	80019f8 <BSP_LCD_SetTextColor>
				BSP_LCD_DrawRect(iconPosX_FX1 - 10, iconPosY_FX1 - 10, iconSize + 20, iconSize + 20);
 800d6c4:	4e68      	ldr	r6, [pc, #416]	; (800d868 <TouchScreen_Handler+0x5a8>)
 800d6c6:	6833      	ldr	r3, [r6, #0]
 800d6c8:	3314      	adds	r3, #20
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	4b6d      	ldr	r3, [pc, #436]	; (800d884 <TouchScreen_Handler+0x5c4>)
 800d6ce:	6819      	ldr	r1, [r3, #0]
 800d6d0:	390a      	subs	r1, #10
 800d6d2:	4b6d      	ldr	r3, [pc, #436]	; (800d888 <TouchScreen_Handler+0x5c8>)
 800d6d4:	6818      	ldr	r0, [r3, #0]
 800d6d6:	380a      	subs	r0, #10
 800d6d8:	4613      	mov	r3, r2
 800d6da:	b289      	uxth	r1, r1
 800d6dc:	b280      	uxth	r0, r0
 800d6de:	f7f4 fa19 	bl	8001b14 <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX2 - 10, iconPosY_FX2 - 10, iconSize + 20, iconSize + 20);
 800d6e2:	6833      	ldr	r3, [r6, #0]
 800d6e4:	3314      	adds	r3, #20
 800d6e6:	b29a      	uxth	r2, r3
 800d6e8:	4b60      	ldr	r3, [pc, #384]	; (800d86c <TouchScreen_Handler+0x5ac>)
 800d6ea:	6819      	ldr	r1, [r3, #0]
 800d6ec:	390a      	subs	r1, #10
 800d6ee:	4b60      	ldr	r3, [pc, #384]	; (800d870 <TouchScreen_Handler+0x5b0>)
 800d6f0:	6818      	ldr	r0, [r3, #0]
 800d6f2:	380a      	subs	r0, #10
 800d6f4:	4613      	mov	r3, r2
 800d6f6:	b289      	uxth	r1, r1
 800d6f8:	b280      	uxth	r0, r0
 800d6fa:	f7f4 fa0b 	bl	8001b14 <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX4 - 10, iconPosY_FX4 - 10, iconSize + 20, iconSize + 20);
 800d6fe:	6832      	ldr	r2, [r6, #0]
 800d700:	3214      	adds	r2, #20
 800d702:	b292      	uxth	r2, r2
 800d704:	4b5d      	ldr	r3, [pc, #372]	; (800d87c <TouchScreen_Handler+0x5bc>)
 800d706:	6819      	ldr	r1, [r3, #0]
 800d708:	390a      	subs	r1, #10
 800d70a:	4b5d      	ldr	r3, [pc, #372]	; (800d880 <TouchScreen_Handler+0x5c0>)
 800d70c:	6818      	ldr	r0, [r3, #0]
 800d70e:	380a      	subs	r0, #10
 800d710:	4613      	mov	r3, r2
 800d712:	b289      	uxth	r1, r1
 800d714:	b280      	uxth	r0, r0
 800d716:	f7f4 f9fd 	bl	8001b14 <BSP_LCD_DrawRect>
				ui_data.fx_selection_state = FX_STATE_3;
 800d71a:	2303      	movs	r3, #3
 800d71c:	6023      	str	r3, [r4, #0]
	int menu_selection_state = 0;
 800d71e:	f04f 0800 	mov.w	r8, #0
 800d722:	e66b      	b.n	800d3fc <TouchScreen_Handler+0x13c>
				BSP_LCD_DrawRect(iconPosX_FX4 - 10, iconPosY_FX4 - 10, iconSize + 20, iconSize + 20);
 800d724:	3214      	adds	r2, #20
 800d726:	b292      	uxth	r2, r2
 800d728:	f1a3 010a 	sub.w	r1, r3, #10
 800d72c:	380a      	subs	r0, #10
 800d72e:	4613      	mov	r3, r2
 800d730:	b289      	uxth	r1, r1
 800d732:	b280      	uxth	r0, r0
 800d734:	f7f4 f9ee 	bl	8001b14 <BSP_LCD_DrawRect>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800d738:	484a      	ldr	r0, [pc, #296]	; (800d864 <TouchScreen_Handler+0x5a4>)
 800d73a:	f7f4 f95d 	bl	80019f8 <BSP_LCD_SetTextColor>
				BSP_LCD_DrawRect(iconPosX_FX1 - 10, iconPosY_FX1 - 10, iconSize + 20, iconSize + 20);
 800d73e:	4e4a      	ldr	r6, [pc, #296]	; (800d868 <TouchScreen_Handler+0x5a8>)
 800d740:	6833      	ldr	r3, [r6, #0]
 800d742:	3314      	adds	r3, #20
 800d744:	b29a      	uxth	r2, r3
 800d746:	4b4f      	ldr	r3, [pc, #316]	; (800d884 <TouchScreen_Handler+0x5c4>)
 800d748:	6819      	ldr	r1, [r3, #0]
 800d74a:	390a      	subs	r1, #10
 800d74c:	4b4e      	ldr	r3, [pc, #312]	; (800d888 <TouchScreen_Handler+0x5c8>)
 800d74e:	6818      	ldr	r0, [r3, #0]
 800d750:	380a      	subs	r0, #10
 800d752:	4613      	mov	r3, r2
 800d754:	b289      	uxth	r1, r1
 800d756:	b280      	uxth	r0, r0
 800d758:	f7f4 f9dc 	bl	8001b14 <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX2 - 10, iconPosY_FX2 - 10, iconSize + 20, iconSize + 20);
 800d75c:	6833      	ldr	r3, [r6, #0]
 800d75e:	3314      	adds	r3, #20
 800d760:	b29a      	uxth	r2, r3
 800d762:	4b42      	ldr	r3, [pc, #264]	; (800d86c <TouchScreen_Handler+0x5ac>)
 800d764:	6819      	ldr	r1, [r3, #0]
 800d766:	390a      	subs	r1, #10
 800d768:	4b41      	ldr	r3, [pc, #260]	; (800d870 <TouchScreen_Handler+0x5b0>)
 800d76a:	6818      	ldr	r0, [r3, #0]
 800d76c:	380a      	subs	r0, #10
 800d76e:	4613      	mov	r3, r2
 800d770:	b289      	uxth	r1, r1
 800d772:	b280      	uxth	r0, r0
 800d774:	f7f4 f9ce 	bl	8001b14 <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX3 - 10, iconPosY_FX3 - 10, iconSize + 20, iconSize + 20);
 800d778:	6832      	ldr	r2, [r6, #0]
 800d77a:	3214      	adds	r2, #20
 800d77c:	b292      	uxth	r2, r2
 800d77e:	4b3d      	ldr	r3, [pc, #244]	; (800d874 <TouchScreen_Handler+0x5b4>)
 800d780:	6819      	ldr	r1, [r3, #0]
 800d782:	390a      	subs	r1, #10
 800d784:	4b3c      	ldr	r3, [pc, #240]	; (800d878 <TouchScreen_Handler+0x5b8>)
 800d786:	6818      	ldr	r0, [r3, #0]
 800d788:	380a      	subs	r0, #10
 800d78a:	4613      	mov	r3, r2
 800d78c:	b289      	uxth	r1, r1
 800d78e:	b280      	uxth	r0, r0
 800d790:	f7f4 f9c0 	bl	8001b14 <BSP_LCD_DrawRect>
				ui_data.fx_selection_state = FX_STATE_4;
 800d794:	2304      	movs	r3, #4
 800d796:	6023      	str	r3, [r4, #0]
	int menu_selection_state = 0;
 800d798:	f04f 0800 	mov.w	r8, #0
 800d79c:	e62e      	b.n	800d3fc <TouchScreen_Handler+0x13c>
			if (sv_state_current == SV_STATE_SCOPE) {
 800d79e:	b93e      	cbnz	r6, 800d7b0 <TouchScreen_Handler+0x4f0>
				ui_data.sv_selection_state = SV_STATE_SPECTRUM;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	60a3      	str	r3, [r4, #8]
			HAL_Delay(100);
 800d7a4:	2064      	movs	r0, #100	; 0x64
 800d7a6:	f7f6 fbab 	bl	8003f00 <HAL_Delay>
	int menu_selection_state = 0;
 800d7aa:	f04f 0800 	mov.w	r8, #0
 800d7ae:	e625      	b.n	800d3fc <TouchScreen_Handler+0x13c>
			else if (sv_state_current == SV_STATE_SPECTRUM) {
 800d7b0:	2e01      	cmp	r6, #1
 800d7b2:	d1f7      	bne.n	800d7a4 <TouchScreen_Handler+0x4e4>
				ui_data.sv_selection_state = SV_STATE_SCOPE;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	60a3      	str	r3, [r4, #8]
 800d7b8:	e7f4      	b.n	800d7a4 <TouchScreen_Handler+0x4e4>
			UI_Config_FX();
 800d7ba:	f7ff fce1 	bl	800d180 <UI_Config_FX>
			menu_state = FX_MENU_STATE;
 800d7be:	4b33      	ldr	r3, [pc, #204]	; (800d88c <TouchScreen_Handler+0x5cc>)
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	601a      	str	r2, [r3, #0]
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d7c4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d7c8:	f7f4 f916 	bl	80019f8 <BSP_LCD_SetTextColor>
			if (ui_data.fx_selection_state == FX_STATE_1) {
 800d7cc:	2d01      	cmp	r5, #1
 800d7ce:	d009      	beq.n	800d7e4 <TouchScreen_Handler+0x524>
			} else if (ui_data.fx_selection_state == FX_STATE_2) {
 800d7d0:	2d02      	cmp	r5, #2
 800d7d2:	d017      	beq.n	800d804 <TouchScreen_Handler+0x544>
			} else if (ui_data.fx_selection_state == FX_STATE_3) {
 800d7d4:	2d03      	cmp	r5, #3
 800d7d6:	d025      	beq.n	800d824 <TouchScreen_Handler+0x564>
			} else if (ui_data.fx_selection_state == FX_STATE_4) {
 800d7d8:	2d04      	cmp	r5, #4
 800d7da:	d033      	beq.n	800d844 <TouchScreen_Handler+0x584>
			BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800d7dc:	4821      	ldr	r0, [pc, #132]	; (800d864 <TouchScreen_Handler+0x5a4>)
 800d7de:	f7f4 f90b 	bl	80019f8 <BSP_LCD_SetTextColor>
 800d7e2:	e57f      	b.n	800d2e4 <TouchScreen_Handler+0x24>
				BSP_LCD_DrawRect(iconPosX_FX1 - 10, iconPosY_FX1 - 10, iconSize + 20, iconSize + 20);
 800d7e4:	4b20      	ldr	r3, [pc, #128]	; (800d868 <TouchScreen_Handler+0x5a8>)
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	3214      	adds	r2, #20
 800d7ea:	b292      	uxth	r2, r2
 800d7ec:	4b25      	ldr	r3, [pc, #148]	; (800d884 <TouchScreen_Handler+0x5c4>)
 800d7ee:	6819      	ldr	r1, [r3, #0]
 800d7f0:	390a      	subs	r1, #10
 800d7f2:	4b25      	ldr	r3, [pc, #148]	; (800d888 <TouchScreen_Handler+0x5c8>)
 800d7f4:	6818      	ldr	r0, [r3, #0]
 800d7f6:	380a      	subs	r0, #10
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	b289      	uxth	r1, r1
 800d7fc:	b280      	uxth	r0, r0
 800d7fe:	f7f4 f989 	bl	8001b14 <BSP_LCD_DrawRect>
 800d802:	e7eb      	b.n	800d7dc <TouchScreen_Handler+0x51c>
				BSP_LCD_DrawRect(iconPosX_FX2 - 10, iconPosY_FX2 - 10, iconSize + 20, iconSize + 20);
 800d804:	4b18      	ldr	r3, [pc, #96]	; (800d868 <TouchScreen_Handler+0x5a8>)
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	3214      	adds	r2, #20
 800d80a:	b292      	uxth	r2, r2
 800d80c:	4b17      	ldr	r3, [pc, #92]	; (800d86c <TouchScreen_Handler+0x5ac>)
 800d80e:	6819      	ldr	r1, [r3, #0]
 800d810:	390a      	subs	r1, #10
 800d812:	4b17      	ldr	r3, [pc, #92]	; (800d870 <TouchScreen_Handler+0x5b0>)
 800d814:	6818      	ldr	r0, [r3, #0]
 800d816:	380a      	subs	r0, #10
 800d818:	4613      	mov	r3, r2
 800d81a:	b289      	uxth	r1, r1
 800d81c:	b280      	uxth	r0, r0
 800d81e:	f7f4 f979 	bl	8001b14 <BSP_LCD_DrawRect>
 800d822:	e7db      	b.n	800d7dc <TouchScreen_Handler+0x51c>
				BSP_LCD_DrawRect(iconPosX_FX3 - 10, iconPosY_FX3 - 10, iconSize + 20, iconSize + 20);
 800d824:	4b10      	ldr	r3, [pc, #64]	; (800d868 <TouchScreen_Handler+0x5a8>)
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	3214      	adds	r2, #20
 800d82a:	b292      	uxth	r2, r2
 800d82c:	4b11      	ldr	r3, [pc, #68]	; (800d874 <TouchScreen_Handler+0x5b4>)
 800d82e:	6819      	ldr	r1, [r3, #0]
 800d830:	390a      	subs	r1, #10
 800d832:	4b11      	ldr	r3, [pc, #68]	; (800d878 <TouchScreen_Handler+0x5b8>)
 800d834:	6818      	ldr	r0, [r3, #0]
 800d836:	380a      	subs	r0, #10
 800d838:	4613      	mov	r3, r2
 800d83a:	b289      	uxth	r1, r1
 800d83c:	b280      	uxth	r0, r0
 800d83e:	f7f4 f969 	bl	8001b14 <BSP_LCD_DrawRect>
 800d842:	e7cb      	b.n	800d7dc <TouchScreen_Handler+0x51c>
				BSP_LCD_DrawRect(iconPosX_FX4 - 10, iconPosY_FX4 - 10, iconSize + 20, iconSize + 20);
 800d844:	4b08      	ldr	r3, [pc, #32]	; (800d868 <TouchScreen_Handler+0x5a8>)
 800d846:	681a      	ldr	r2, [r3, #0]
 800d848:	3214      	adds	r2, #20
 800d84a:	b292      	uxth	r2, r2
 800d84c:	4b0b      	ldr	r3, [pc, #44]	; (800d87c <TouchScreen_Handler+0x5bc>)
 800d84e:	6819      	ldr	r1, [r3, #0]
 800d850:	390a      	subs	r1, #10
 800d852:	4b0b      	ldr	r3, [pc, #44]	; (800d880 <TouchScreen_Handler+0x5c0>)
 800d854:	6818      	ldr	r0, [r3, #0]
 800d856:	380a      	subs	r0, #10
 800d858:	4613      	mov	r3, r2
 800d85a:	b289      	uxth	r1, r1
 800d85c:	b280      	uxth	r0, r0
 800d85e:	f7f4 f959 	bl	8001b14 <BSP_LCD_DrawRect>
 800d862:	e7bb      	b.n	800d7dc <TouchScreen_Handler+0x51c>
 800d864:	ffd3d3d3 	.word	0xffd3d3d3
 800d868:	20018444 	.word	0x20018444
 800d86c:	20018448 	.word	0x20018448
 800d870:	20058818 	.word	0x20058818
 800d874:	20018454 	.word	0x20018454
 800d878:	200186e8 	.word	0x200186e8
 800d87c:	200181d4 	.word	0x200181d4
 800d880:	20018688 	.word	0x20018688
 800d884:	200586f4 	.word	0x200586f4
 800d888:	20018428 	.word	0x20018428
 800d88c:	20001778 	.word	0x20001778

0800d890 <UI_Handler>:
				  uint16_t usb_state_current, uint16_t sv_state_current) {
 800d890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d894:	4604      	mov	r4, r0
 800d896:	460f      	mov	r7, r1
 800d898:	4615      	mov	r5, r2
 800d89a:	461e      	mov	r6, r3
 800d89c:	f8bd 8018 	ldrh.w	r8, [sp, #24]
	Button_Handler();
 800d8a0:	f7ff fc58 	bl	800d154 <Button_Handler>
	SV_Handler(pData, sv_state_current); // pData must have 4096 entries
 800d8a4:	4641      	mov	r1, r8
 800d8a6:	4638      	mov	r0, r7
 800d8a8:	f7ff f9aa 	bl	800cc00 <SV_Handler>
	Struct ui_data = TouchScreen_Handler(fx_state_current, usb_state_current, sv_state_current);
 800d8ac:	4643      	mov	r3, r8
 800d8ae:	4632      	mov	r2, r6
 800d8b0:	4629      	mov	r1, r5
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	f7ff fd04 	bl	800d2c0 <TouchScreen_Handler>
	if (ui_data.usb_selection_state == USB_STATE_ON && menu_state == MAIN_MENU_STATE) {
 800d8b8:	6863      	ldr	r3, [r4, #4]
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d002      	beq.n	800d8c4 <UI_Handler+0x34>
}
 800d8be:	4620      	mov	r0, r4
 800d8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ui_data.usb_selection_state == USB_STATE_ON && menu_state == MAIN_MENU_STATE) {
 800d8c4:	4b0d      	ldr	r3, [pc, #52]	; (800d8fc <UI_Handler+0x6c>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d1f8      	bne.n	800d8be <UI_Handler+0x2e>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d8cc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d8d0:	f7f4 f892 	bl	80019f8 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(xSize_LCD-80+iconSize/16, 30+iconSize/16, 3*iconSize/8, 3*iconSize/8);
 800d8d4:	4b0a      	ldr	r3, [pc, #40]	; (800d900 <UI_Handler+0x70>)
 800d8d6:	681a      	ldr	r2, [r3, #0]
 800d8d8:	f3c2 110f 	ubfx	r1, r2, #4, #16
 800d8dc:	4b09      	ldr	r3, [pc, #36]	; (800d904 <UI_Handler+0x74>)
 800d8de:	6818      	ldr	r0, [r3, #0]
 800d8e0:	4408      	add	r0, r1
 800d8e2:	b280      	uxth	r0, r0
 800d8e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d8e8:	f3c2 02cf 	ubfx	r2, r2, #3, #16
 800d8ec:	311e      	adds	r1, #30
 800d8ee:	3850      	subs	r0, #80	; 0x50
 800d8f0:	4613      	mov	r3, r2
 800d8f2:	b289      	uxth	r1, r1
 800d8f4:	b280      	uxth	r0, r0
 800d8f6:	f7f4 f927 	bl	8001b48 <BSP_LCD_FillRect>
	return ui_data;
 800d8fa:	e7e0      	b.n	800d8be <UI_Handler+0x2e>
 800d8fc:	20001778 	.word	0x20001778
 800d900:	20018444 	.word	0x20018444
 800d904:	200181d0 	.word	0x200181d0

0800d908 <JPEG_IRQHandler>:

//
//
// -- Interrupt & Callback FUnctions -----
//
void JPEG_IRQHandler(void) {
 800d908:	b508      	push	{r3, lr}
	HAL_JPEG_IRQHandler(&hjpeg); // Pass to HAL
 800d90a:	4802      	ldr	r0, [pc, #8]	; (800d914 <JPEG_IRQHandler+0xc>)
 800d90c:	f7f8 fe13 	bl	8006536 <HAL_JPEG_IRQHandler>
}
 800d910:	bd08      	pop	{r3, pc}
 800d912:	bf00      	nop
 800d914:	20018690 	.word	0x20018690

0800d918 <HAL_JPEG_GetDataCallback>:

void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData) {
 800d918:	b570      	push	{r4, r5, r6, lr}
 800d91a:	4604      	mov	r4, r0
	bzero(jpeg_input_buffer, JPEG_BUFFER_SIZE);
 800d91c:	4d06      	ldr	r5, [pc, #24]	; (800d938 <HAL_JPEG_GetDataCallback+0x20>)
 800d91e:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800d922:	4632      	mov	r2, r6
 800d924:	2100      	movs	r1, #0
 800d926:	4628      	mov	r0, r5
 800d928:	f000 fba7 	bl	800e07a <memset>
	HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)jpeg_input_buffer, JPEG_BUFFER_SIZE);
 800d92c:	4632      	mov	r2, r6
 800d92e:	4629      	mov	r1, r5
 800d930:	4620      	mov	r0, r4
 800d932:	f7f8 fb6f 	bl	8006014 <HAL_JPEG_ConfigInputBuffer>
}
 800d936:	bd70      	pop	{r4, r5, r6, pc}
 800d938:	200186f0 	.word	0x200186f0

0800d93c <HAL_JPEG_DataReadyCallback>:

void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength) {
 800d93c:	b508      	push	{r3, lr}
	OutputBufferAddress = JPEG_OUTPUT_DATA_BUFFER;
 800d93e:	4b03      	ldr	r3, [pc, #12]	; (800d94c <HAL_JPEG_DataReadyCallback+0x10>)
 800d940:	4a03      	ldr	r2, [pc, #12]	; (800d950 <HAL_JPEG_DataReadyCallback+0x14>)
 800d942:	621a      	str	r2, [r3, #32]
	HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)jpeg_output_buffer, OutputBufferAddress);
 800d944:	6859      	ldr	r1, [r3, #4]
 800d946:	f7f8 fb68 	bl	800601a <HAL_JPEG_ConfigOutputBuffer>
}
 800d94a:	bd08      	pop	{r3, pc}
 800d94c:	20000098 	.word	0x20000098
 800d950:	c0200000 	.word	0xc0200000

0800d954 <HAL_JPEG_DecodeCpltCallback>:

void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg) {
	JPEG_DECODE_COMPLETE = 1;
 800d954:	4b01      	ldr	r3, [pc, #4]	; (800d95c <HAL_JPEG_DecodeCpltCallback+0x8>)
 800d956:	2201      	movs	r2, #1
 800d958:	605a      	str	r2, [r3, #4]
}
 800d95a:	4770      	bx	lr
 800d95c:	20001778 	.word	0x20001778

0800d960 <HAL_JPEG_InfoReadyCallback>:
		printf("\r\nError Code: Unknown");
	fflush(stdout);
}

/* Adjust the width to be a multiple of 8 or 16 when JPEG header has been parsed */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo) {
 800d960:	b508      	push	{r3, lr}
 800d962:	4608      	mov	r0, r1
	// Have to add padding for DMA2D
	if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING) {
 800d964:	684a      	ldr	r2, [r1, #4]
 800d966:	2a01      	cmp	r2, #1
 800d968:	d018      	beq.n	800d99c <HAL_JPEG_InfoReadyCallback+0x3c>

		if((pInfo->ImageHeight % 16) != 0)
			pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
	}

	if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING) {
 800d96a:	2a02      	cmp	r2, #2
 800d96c:	d027      	beq.n	800d9be <HAL_JPEG_InfoReadyCallback+0x5e>

		if((pInfo->ImageHeight % 8) != 0)
			pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
	}

	if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING) {
 800d96e:	b97a      	cbnz	r2, 800d990 <HAL_JPEG_InfoReadyCallback+0x30>
		if((pInfo->ImageWidth % 8) != 0)
 800d970:	68c3      	ldr	r3, [r0, #12]
 800d972:	f013 0f07 	tst.w	r3, #7
 800d976:	d003      	beq.n	800d980 <HAL_JPEG_InfoReadyCallback+0x20>
			pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 800d978:	f023 0307 	bic.w	r3, r3, #7
 800d97c:	3308      	adds	r3, #8
 800d97e:	60c3      	str	r3, [r0, #12]

		if((pInfo->ImageHeight % 8) != 0)
 800d980:	6883      	ldr	r3, [r0, #8]
 800d982:	f013 0f07 	tst.w	r3, #7
 800d986:	d003      	beq.n	800d990 <HAL_JPEG_InfoReadyCallback+0x30>
			pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 800d988:	f023 0307 	bic.w	r3, r3, #7
 800d98c:	3308      	adds	r3, #8
 800d98e:	6083      	str	r3, [r0, #8]
	}

	if(JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb) != HAL_OK) {
 800d990:	4a15      	ldr	r2, [pc, #84]	; (800d9e8 <HAL_JPEG_InfoReadyCallback+0x88>)
 800d992:	4916      	ldr	r1, [pc, #88]	; (800d9ec <HAL_JPEG_InfoReadyCallback+0x8c>)
 800d994:	f7fe fa8e 	bl	800beb4 <JPEG_GetDecodeColorConvertFunc>
 800d998:	bb10      	cbnz	r0, 800d9e0 <HAL_JPEG_InfoReadyCallback+0x80>
		printf("Error getting DecodeColorConvertFunct\r\n");
		while(1);
	}
}
 800d99a:	bd08      	pop	{r3, pc}
		if((pInfo->ImageWidth % 16) != 0)
 800d99c:	68cb      	ldr	r3, [r1, #12]
 800d99e:	f013 0f0f 	tst.w	r3, #15
 800d9a2:	d003      	beq.n	800d9ac <HAL_JPEG_InfoReadyCallback+0x4c>
			pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800d9a4:	f023 030f 	bic.w	r3, r3, #15
 800d9a8:	3310      	adds	r3, #16
 800d9aa:	60cb      	str	r3, [r1, #12]
		if((pInfo->ImageHeight % 16) != 0)
 800d9ac:	6883      	ldr	r3, [r0, #8]
 800d9ae:	f013 0f0f 	tst.w	r3, #15
 800d9b2:	d0da      	beq.n	800d96a <HAL_JPEG_InfoReadyCallback+0xa>
			pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 800d9b4:	f023 030f 	bic.w	r3, r3, #15
 800d9b8:	3310      	adds	r3, #16
 800d9ba:	6083      	str	r3, [r0, #8]
 800d9bc:	e7d5      	b.n	800d96a <HAL_JPEG_InfoReadyCallback+0xa>
		if((pInfo->ImageWidth % 16) != 0)
 800d9be:	68c3      	ldr	r3, [r0, #12]
 800d9c0:	f013 0f0f 	tst.w	r3, #15
 800d9c4:	d003      	beq.n	800d9ce <HAL_JPEG_InfoReadyCallback+0x6e>
			pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800d9c6:	f023 030f 	bic.w	r3, r3, #15
 800d9ca:	3310      	adds	r3, #16
 800d9cc:	60c3      	str	r3, [r0, #12]
		if((pInfo->ImageHeight % 8) != 0)
 800d9ce:	6883      	ldr	r3, [r0, #8]
 800d9d0:	f013 0f07 	tst.w	r3, #7
 800d9d4:	d0cb      	beq.n	800d96e <HAL_JPEG_InfoReadyCallback+0xe>
			pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 800d9d6:	f023 0307 	bic.w	r3, r3, #7
 800d9da:	3308      	adds	r3, #8
 800d9dc:	6083      	str	r3, [r0, #8]
 800d9de:	e7c6      	b.n	800d96e <HAL_JPEG_InfoReadyCallback+0xe>
		printf("Error getting DecodeColorConvertFunct\r\n");
 800d9e0:	4803      	ldr	r0, [pc, #12]	; (800d9f0 <HAL_JPEG_InfoReadyCallback+0x90>)
 800d9e2:	f000 fc83 	bl	800e2ec <puts>
		while(1);
 800d9e6:	e7fe      	b.n	800d9e6 <HAL_JPEG_InfoReadyCallback+0x86>
 800d9e8:	20001784 	.word	0x20001784
 800d9ec:	200586f0 	.word	0x200586f0
 800d9f0:	08013440 	.word	0x08013440

0800d9f4 <Line_Audio_Init>:
/*
 * Line Audio Initalizaionts
 */


void Line_Audio_Init(void) {
 800d9f4:	b508      	push	{r3, lr}

	 /* Initialize Audio Recorder with 4 channels to be used */
	 if (BSP_AUDIO_IN_OUT_Init(BSP_AUDIO_FREQUENCY_48K) == AUDIO_OK)
 800d9f6:	f64b 3080 	movw	r0, #48000	; 0xbb80
 800d9fa:	f7fe fc09 	bl	800c210 <BSP_AUDIO_IN_OUT_Init>
 800d9fe:	bb00      	cbnz	r0, 800da42 <Line_Audio_Init+0x4e>
	 {
		 printf("Audio I/O initialization OK\r\n");
 800da00:	4816      	ldr	r0, [pc, #88]	; (800da5c <Line_Audio_Init+0x68>)
 800da02:	f000 fc73 	bl	800e2ec <puts>
	 } else {
		 printf("Audio I/O initialization failed.\r\n");
	 }

	 /* Start Recording */
	 HAL_StatusTypeDef res = HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)audio_in_buffer, RECORD_BUFFER_SIZE);
 800da06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800da0a:	4915      	ldr	r1, [pc, #84]	; (800da60 <Line_Audio_Init+0x6c>)
 800da0c:	4815      	ldr	r0, [pc, #84]	; (800da64 <Line_Audio_Init+0x70>)
 800da0e:	f7fa ff5b 	bl	80088c8 <HAL_SAI_Receive_DMA>
	 if (HAL_OK == res)
 800da12:	4601      	mov	r1, r0
 800da14:	b9c8      	cbnz	r0, 800da4a <Line_Audio_Init+0x56>
	 {
		 printf("SAI receive begin OK\r\n");
 800da16:	4814      	ldr	r0, [pc, #80]	; (800da68 <Line_Audio_Init+0x74>)
 800da18:	f000 fc68 	bl	800e2ec <puts>
	 } else {
		 printf("SAI receive error: %d\r\n", res);
	 }

	 printf("Copying Record buffer to Playback buffer\r\n");
 800da1c:	4813      	ldr	r0, [pc, #76]	; (800da6c <Line_Audio_Init+0x78>)
 800da1e:	f000 fc65 	bl	800e2ec <puts>

	 /* Play the Recorded buffer */
	 if (_BSP_AUDIO_OUT_Play((uint16_t *) &audio_out_buffer[0], RECORD_BUFFER_SIZE) == AUDIO_OK)
 800da22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800da26:	4812      	ldr	r0, [pc, #72]	; (800da70 <Line_Audio_Init+0x7c>)
 800da28:	f7fe fc36 	bl	800c298 <_BSP_AUDIO_OUT_Play>
 800da2c:	b988      	cbnz	r0, 800da52 <Line_Audio_Init+0x5e>
	 {
		 printf("Audio output OK\r\n");
 800da2e:	4811      	ldr	r0, [pc, #68]	; (800da74 <Line_Audio_Init+0x80>)
 800da30:	f000 fc5c 	bl	800e2ec <puts>
	 } else {
		 printf("Audio output error\r\n");
	 }
	 printf("\r\n");
 800da34:	4810      	ldr	r0, [pc, #64]	; (800da78 <Line_Audio_Init+0x84>)
 800da36:	f000 fc59 	bl	800e2ec <puts>

	 audio_line_in_buffer_state = BUFFER_OFFSET_NONE;
 800da3a:	4b10      	ldr	r3, [pc, #64]	; (800da7c <Line_Audio_Init+0x88>)
 800da3c:	2200      	movs	r2, #0
 800da3e:	601a      	str	r2, [r3, #0]

 }
 800da40:	bd08      	pop	{r3, pc}
		 printf("Audio I/O initialization failed.\r\n");
 800da42:	480f      	ldr	r0, [pc, #60]	; (800da80 <Line_Audio_Init+0x8c>)
 800da44:	f000 fc52 	bl	800e2ec <puts>
 800da48:	e7dd      	b.n	800da06 <Line_Audio_Init+0x12>
		 printf("SAI receive error: %d\r\n", res);
 800da4a:	480e      	ldr	r0, [pc, #56]	; (800da84 <Line_Audio_Init+0x90>)
 800da4c:	f000 fbc8 	bl	800e1e0 <iprintf>
 800da50:	e7e4      	b.n	800da1c <Line_Audio_Init+0x28>
		 printf("Audio output error\r\n");
 800da52:	480d      	ldr	r0, [pc, #52]	; (800da88 <Line_Audio_Init+0x94>)
 800da54:	f000 fc4a 	bl	800e2ec <puts>
 800da58:	e7ec      	b.n	800da34 <Line_Audio_Init+0x40>
 800da5a:	bf00      	nop
 800da5c:	080134a0 	.word	0x080134a0
 800da60:	20003e2c 	.word	0x20003e2c
 800da64:	200017ec 	.word	0x200017ec
 800da68:	080134e4 	.word	0x080134e4
 800da6c:	08013514 	.word	0x08013514
 800da70:	20001e2c 	.word	0x20001e2c
 800da74:	08013540 	.word	0x08013540
 800da78:	080134e0 	.word	0x080134e0
 800da7c:	2000e188 	.word	0x2000e188
 800da80:	080134c0 	.word	0x080134c0
 800da84:	080134fc 	.word	0x080134fc
 800da88:	08013554 	.word	0x08013554

0800da8c <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @retval None
  */

void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
	if(ui_data.usb_selection_state == USB_STATE_OFF){
 800da8c:	4b03      	ldr	r3, [pc, #12]	; (800da9c <BSP_AUDIO_IN_TransferComplete_CallBack+0x10>)
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	b913      	cbnz	r3, 800da98 <BSP_AUDIO_IN_TransferComplete_CallBack+0xc>
		 audio_line_in_buffer_state = BUFFER_OFFSET_FULL;
 800da92:	4b03      	ldr	r3, [pc, #12]	; (800daa0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 800da94:	2202      	movs	r2, #2
 800da96:	601a      	str	r2, [r3, #0]
	} else {
		//USB STUFF
		//audio_usb_in_buffer_state = BUFFER_OFFSET_FULL;

	}
}
 800da98:	4770      	bx	lr
 800da9a:	bf00      	nop
 800da9c:	20005ea0 	.word	0x20005ea0
 800daa0:	2000e188 	.word	0x2000e188

0800daa4 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  */

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{

	if(ui_data.usb_selection_state == USB_STATE_OFF){
 800daa4:	4b03      	ldr	r3, [pc, #12]	; (800dab4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x10>)
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	b913      	cbnz	r3, 800dab0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xc>
		 audio_line_in_buffer_state = BUFFER_OFFSET_HALF;
 800daaa:	4b03      	ldr	r3, [pc, #12]	; (800dab8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 800daac:	2201      	movs	r2, #1
 800daae:	601a      	str	r2, [r3, #0]
	} else {
		//USB STUFF
		//audio_usb_in_buffer_state = BUFFER_OFFSET_HALF;

	}
}
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop
 800dab4:	20005ea0 	.word	0x20005ea0
 800dab8:	2000e188 	.word	0x2000e188

0800dabc <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @retval None
  */

void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
	if(ui_data.usb_selection_state == USB_STATE_OFF){
 800dabc:	4b03      	ldr	r3, [pc, #12]	; (800dacc <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>)
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	b913      	cbnz	r3, 800dac8 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xc>
		 audio_line_out_buffer_state = BUFFER_OFFSET_FULL;
 800dac2:	4b03      	ldr	r3, [pc, #12]	; (800dad0 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
 800dac4:	2202      	movs	r2, #2
 800dac6:	601a      	str	r2, [r3, #0]
	} else {
		//USBD_AUDIO_Sync(&USBD_Device, AUDIO_OFFSET_FULL);

	}
}
 800dac8:	4770      	bx	lr
 800daca:	bf00      	nop
 800dacc:	20005ea0 	.word	0x20005ea0
 800dad0:	2000e180 	.word	0x2000e180

0800dad4 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @retval None
  */

void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
	if(ui_data.usb_selection_state == USB_STATE_OFF){
 800dad4:	4b03      	ldr	r3, [pc, #12]	; (800dae4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x10>)
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	b913      	cbnz	r3, 800dae0 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0xc>
		 audio_line_out_buffer_state = BUFFER_OFFSET_FULL;
 800dada:	4b03      	ldr	r3, [pc, #12]	; (800dae8 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>)
 800dadc:	2202      	movs	r2, #2
 800dade:	601a      	str	r2, [r3, #0]
	} else {
		//USBD_AUDIO_Sync(&USBD_Device, AUDIO_OFFSET_HALF);
	}
}
 800dae0:	4770      	bx	lr
 800dae2:	bf00      	nop
 800dae4:	20005ea0 	.word	0x20005ea0
 800dae8:	2000e180 	.word	0x2000e180

0800daec <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800daec:	b508      	push	{r3, lr}
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800daee:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800daf2:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800daf6:	f7fd fa90 	bl	800b01a <USBD_LL_SetupStage>
}
 800dafa:	bd08      	pop	{r3, pc}

0800dafc <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800dafc:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dafe:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800db02:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800db06:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800db0a:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800db0e:	f7fd fab1 	bl	800b074 <USBD_LL_DataOutStage>
}
 800db12:	bd08      	pop	{r3, pc}

0800db14 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800db14:	b508      	push	{r3, lr}
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800db16:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800db1a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800db1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db20:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800db24:	f7fd fadb 	bl	800b0de <USBD_LL_DataInStage>
}
 800db28:	bd08      	pop	{r3, pc}

0800db2a <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800db2a:	b508      	push	{r3, lr}
  USBD_LL_SOF(hpcd->pData);
 800db2c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800db30:	f7fd fb5e 	bl	800b1f0 <USBD_LL_SOF>
}
 800db34:	bd08      	pop	{r3, pc}

0800db36 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 800db36:	b538      	push	{r3, r4, r5, lr}
 800db38:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
  
  /* Set USB Current Speed */
  switch(hpcd->Init.speed)
 800db3a:	68c3      	ldr	r3, [r0, #12]
 800db3c:	b153      	cbz	r3, 800db54 <HAL_PCD_ResetCallback+0x1e>
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
    break;
    
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800db3e:	2501      	movs	r5, #1
    speed = USBD_SPEED_FULL;
    break;
  }
  
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 800db40:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 800db44:	f7fd fb23 	bl	800b18e <USBD_LL_Reset>
  
  USBD_LL_SetSpeed(hpcd->pData, speed);
 800db48:	4629      	mov	r1, r5
 800db4a:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 800db4e:	f7fd fb3d 	bl	800b1cc <USBD_LL_SetSpeed>
}
 800db52:	bd38      	pop	{r3, r4, r5, pc}
  switch(hpcd->Init.speed)
 800db54:	2500      	movs	r5, #0
 800db56:	e7f3      	b.n	800db40 <HAL_PCD_ResetCallback+0xa>

0800db58 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800db58:	b508      	push	{r3, lr}
  USBD_LL_Suspend(hpcd->pData);
 800db5a:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800db5e:	f7fd fb38 	bl	800b1d2 <USBD_LL_Suspend>
}
 800db62:	bd08      	pop	{r3, pc}

0800db64 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800db64:	b508      	push	{r3, lr}
  USBD_LL_Resume(hpcd->pData);
 800db66:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800db6a:	f7fd fb3b 	bl	800b1e4 <USBD_LL_Resume>
}
 800db6e:	bd08      	pop	{r3, pc}

0800db70 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800db70:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 800db72:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800db76:	f7fd fb57 	bl	800b228 <USBD_LL_IsoOUTIncomplete>
}
 800db7a:	bd08      	pop	{r3, pc}

0800db7c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800db7c:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 800db7e:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800db82:	f7fd fb43 	bl	800b20c <USBD_LL_IsoINIncomplete>
}
 800db86:	bd08      	pop	{r3, pc}

0800db88 <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800db88:	b508      	push	{r3, lr}
  USBD_LL_DevConnected(hpcd->pData);
 800db8a:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800db8e:	f7fd fb59 	bl	800b244 <USBD_LL_DevConnected>
}
 800db92:	bd08      	pop	{r3, pc}

0800db94 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800db94:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected(hpcd->pData);
 800db96:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800db9a:	f7fd fb55 	bl	800b248 <USBD_LL_DevDisconnected>
}
 800db9e:	bd08      	pop	{r3, pc}

0800dba0 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 800dba0:	b510      	push	{r4, lr}
 800dba2:	4614      	mov	r4, r2
 800dba4:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData,
 800dba6:	4623      	mov	r3, r4
 800dba8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800dbac:	f7f9 fa1f 	bl	8006fee <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 800dbb0:	2000      	movs	r0, #0
 800dbb2:	bd10      	pop	{r4, pc}

0800dbb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbb4:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dbb6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800dbba:	f7f9 fab5 	bl	8007128 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 800dbbe:	2000      	movs	r0, #0
 800dbc0:	bd08      	pop	{r3, pc}

0800dbc2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbc2:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dbc4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800dbc8:	f7f9 faf2 	bl	80071b0 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 800dbcc:	2000      	movs	r0, #0
 800dbce:	bd08      	pop	{r3, pc}

0800dbd0 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800dbd0:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  
  if((ep_addr & 0x80) == 0x80)
 800dbd4:	f011 0f80 	tst.w	r1, #128	; 0x80
 800dbd8:	d108      	bne.n	800dbec <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dbda:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800dbde:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800dbe2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dbe6:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 800dbea:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dbec:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800dbf0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800dbf4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dbf8:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 800dbfc:	4770      	bx	lr

0800dbfe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dbfe:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dc00:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800dc04:	f7f9 f9df 	bl	8006fc6 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 800dc08:	2000      	movs	r0, #0
 800dc0a:	bd08      	pop	{r3, pc}

0800dc0c <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
									uint32_t size)
{
 800dc0c:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc0e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800dc12:	f7f9 fa5e 	bl	80070d2 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 800dc16:	2000      	movs	r0, #0
 800dc18:	bd08      	pop	{r3, pc}

0800dc1a <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
										  uint32_t size)
{
 800dc1a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc1c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800dc20:	f7f9 fa28 	bl	8007074 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 800dc24:	2000      	movs	r0, #0
 800dc26:	bd08      	pop	{r3, pc}

0800dc28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800dc28:	f8df d034 	ldr.w	sp, [pc, #52]	; 800dc60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800dc2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800dc2e:	e003      	b.n	800dc38 <LoopCopyDataInit>

0800dc30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800dc30:	4b0c      	ldr	r3, [pc, #48]	; (800dc64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800dc32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800dc34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800dc36:	3104      	adds	r1, #4

0800dc38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800dc38:	480b      	ldr	r0, [pc, #44]	; (800dc68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800dc3a:	4b0c      	ldr	r3, [pc, #48]	; (800dc6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800dc3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800dc3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800dc40:	d3f6      	bcc.n	800dc30 <CopyDataInit>
  ldr  r2, =_sbss
 800dc42:	4a0b      	ldr	r2, [pc, #44]	; (800dc70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800dc44:	e002      	b.n	800dc4c <LoopFillZerobss>

0800dc46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800dc46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800dc48:	f842 3b04 	str.w	r3, [r2], #4

0800dc4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800dc4c:	4b09      	ldr	r3, [pc, #36]	; (800dc74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800dc4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800dc50:	d3f9      	bcc.n	800dc46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800dc52:	f7fe fea9 	bl	800c9a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800dc56:	f000 f9db 	bl	800e010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800dc5a:	f7fe fd65 	bl	800c728 <main>
  bx  lr    
 800dc5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800dc60:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800dc64:	08013608 	.word	0x08013608
  ldr  r0, =_sdata
 800dc68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800dc6c:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 800dc70:	20000128 	.word	0x20000128
  ldr  r3, = _ebss
 800dc74:	20058c48 	.word	0x20058c48

0800dc78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800dc78:	e7fe      	b.n	800dc78 <ADC_IRQHandler>
	...

0800dc7c <__sflush_r>:
 800dc7c:	898a      	ldrh	r2, [r1, #12]
 800dc7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc82:	4605      	mov	r5, r0
 800dc84:	0710      	lsls	r0, r2, #28
 800dc86:	460c      	mov	r4, r1
 800dc88:	d458      	bmi.n	800dd3c <__sflush_r+0xc0>
 800dc8a:	684b      	ldr	r3, [r1, #4]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	dc05      	bgt.n	800dc9c <__sflush_r+0x20>
 800dc90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	dc02      	bgt.n	800dc9c <__sflush_r+0x20>
 800dc96:	2000      	movs	r0, #0
 800dc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc9e:	2e00      	cmp	r6, #0
 800dca0:	d0f9      	beq.n	800dc96 <__sflush_r+0x1a>
 800dca2:	2300      	movs	r3, #0
 800dca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dca8:	682f      	ldr	r7, [r5, #0]
 800dcaa:	602b      	str	r3, [r5, #0]
 800dcac:	d032      	beq.n	800dd14 <__sflush_r+0x98>
 800dcae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dcb0:	89a3      	ldrh	r3, [r4, #12]
 800dcb2:	075a      	lsls	r2, r3, #29
 800dcb4:	d505      	bpl.n	800dcc2 <__sflush_r+0x46>
 800dcb6:	6863      	ldr	r3, [r4, #4]
 800dcb8:	1ac0      	subs	r0, r0, r3
 800dcba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dcbc:	b10b      	cbz	r3, 800dcc2 <__sflush_r+0x46>
 800dcbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dcc0:	1ac0      	subs	r0, r0, r3
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcc8:	6a21      	ldr	r1, [r4, #32]
 800dcca:	4628      	mov	r0, r5
 800dccc:	47b0      	blx	r6
 800dcce:	1c43      	adds	r3, r0, #1
 800dcd0:	89a3      	ldrh	r3, [r4, #12]
 800dcd2:	d106      	bne.n	800dce2 <__sflush_r+0x66>
 800dcd4:	6829      	ldr	r1, [r5, #0]
 800dcd6:	291d      	cmp	r1, #29
 800dcd8:	d82c      	bhi.n	800dd34 <__sflush_r+0xb8>
 800dcda:	4a2a      	ldr	r2, [pc, #168]	; (800dd84 <__sflush_r+0x108>)
 800dcdc:	40ca      	lsrs	r2, r1
 800dcde:	07d6      	lsls	r6, r2, #31
 800dce0:	d528      	bpl.n	800dd34 <__sflush_r+0xb8>
 800dce2:	2200      	movs	r2, #0
 800dce4:	6062      	str	r2, [r4, #4]
 800dce6:	04d9      	lsls	r1, r3, #19
 800dce8:	6922      	ldr	r2, [r4, #16]
 800dcea:	6022      	str	r2, [r4, #0]
 800dcec:	d504      	bpl.n	800dcf8 <__sflush_r+0x7c>
 800dcee:	1c42      	adds	r2, r0, #1
 800dcf0:	d101      	bne.n	800dcf6 <__sflush_r+0x7a>
 800dcf2:	682b      	ldr	r3, [r5, #0]
 800dcf4:	b903      	cbnz	r3, 800dcf8 <__sflush_r+0x7c>
 800dcf6:	6560      	str	r0, [r4, #84]	; 0x54
 800dcf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcfa:	602f      	str	r7, [r5, #0]
 800dcfc:	2900      	cmp	r1, #0
 800dcfe:	d0ca      	beq.n	800dc96 <__sflush_r+0x1a>
 800dd00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd04:	4299      	cmp	r1, r3
 800dd06:	d002      	beq.n	800dd0e <__sflush_r+0x92>
 800dd08:	4628      	mov	r0, r5
 800dd0a:	f000 f9bf 	bl	800e08c <_free_r>
 800dd0e:	2000      	movs	r0, #0
 800dd10:	6360      	str	r0, [r4, #52]	; 0x34
 800dd12:	e7c1      	b.n	800dc98 <__sflush_r+0x1c>
 800dd14:	6a21      	ldr	r1, [r4, #32]
 800dd16:	2301      	movs	r3, #1
 800dd18:	4628      	mov	r0, r5
 800dd1a:	47b0      	blx	r6
 800dd1c:	1c41      	adds	r1, r0, #1
 800dd1e:	d1c7      	bne.n	800dcb0 <__sflush_r+0x34>
 800dd20:	682b      	ldr	r3, [r5, #0]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d0c4      	beq.n	800dcb0 <__sflush_r+0x34>
 800dd26:	2b1d      	cmp	r3, #29
 800dd28:	d001      	beq.n	800dd2e <__sflush_r+0xb2>
 800dd2a:	2b16      	cmp	r3, #22
 800dd2c:	d101      	bne.n	800dd32 <__sflush_r+0xb6>
 800dd2e:	602f      	str	r7, [r5, #0]
 800dd30:	e7b1      	b.n	800dc96 <__sflush_r+0x1a>
 800dd32:	89a3      	ldrh	r3, [r4, #12]
 800dd34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd38:	81a3      	strh	r3, [r4, #12]
 800dd3a:	e7ad      	b.n	800dc98 <__sflush_r+0x1c>
 800dd3c:	690f      	ldr	r7, [r1, #16]
 800dd3e:	2f00      	cmp	r7, #0
 800dd40:	d0a9      	beq.n	800dc96 <__sflush_r+0x1a>
 800dd42:	0793      	lsls	r3, r2, #30
 800dd44:	680e      	ldr	r6, [r1, #0]
 800dd46:	bf08      	it	eq
 800dd48:	694b      	ldreq	r3, [r1, #20]
 800dd4a:	600f      	str	r7, [r1, #0]
 800dd4c:	bf18      	it	ne
 800dd4e:	2300      	movne	r3, #0
 800dd50:	eba6 0807 	sub.w	r8, r6, r7
 800dd54:	608b      	str	r3, [r1, #8]
 800dd56:	f1b8 0f00 	cmp.w	r8, #0
 800dd5a:	dd9c      	ble.n	800dc96 <__sflush_r+0x1a>
 800dd5c:	6a21      	ldr	r1, [r4, #32]
 800dd5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd60:	4643      	mov	r3, r8
 800dd62:	463a      	mov	r2, r7
 800dd64:	4628      	mov	r0, r5
 800dd66:	47b0      	blx	r6
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	dc06      	bgt.n	800dd7a <__sflush_r+0xfe>
 800dd6c:	89a3      	ldrh	r3, [r4, #12]
 800dd6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd72:	81a3      	strh	r3, [r4, #12]
 800dd74:	f04f 30ff 	mov.w	r0, #4294967295
 800dd78:	e78e      	b.n	800dc98 <__sflush_r+0x1c>
 800dd7a:	4407      	add	r7, r0
 800dd7c:	eba8 0800 	sub.w	r8, r8, r0
 800dd80:	e7e9      	b.n	800dd56 <__sflush_r+0xda>
 800dd82:	bf00      	nop
 800dd84:	20400001 	.word	0x20400001

0800dd88 <_fflush_r>:
 800dd88:	b538      	push	{r3, r4, r5, lr}
 800dd8a:	690b      	ldr	r3, [r1, #16]
 800dd8c:	4605      	mov	r5, r0
 800dd8e:	460c      	mov	r4, r1
 800dd90:	b913      	cbnz	r3, 800dd98 <_fflush_r+0x10>
 800dd92:	2500      	movs	r5, #0
 800dd94:	4628      	mov	r0, r5
 800dd96:	bd38      	pop	{r3, r4, r5, pc}
 800dd98:	b118      	cbz	r0, 800dda2 <_fflush_r+0x1a>
 800dd9a:	6983      	ldr	r3, [r0, #24]
 800dd9c:	b90b      	cbnz	r3, 800dda2 <_fflush_r+0x1a>
 800dd9e:	f000 f899 	bl	800ded4 <__sinit>
 800dda2:	4b14      	ldr	r3, [pc, #80]	; (800ddf4 <_fflush_r+0x6c>)
 800dda4:	429c      	cmp	r4, r3
 800dda6:	d11b      	bne.n	800dde0 <_fflush_r+0x58>
 800dda8:	686c      	ldr	r4, [r5, #4]
 800ddaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d0ef      	beq.n	800dd92 <_fflush_r+0xa>
 800ddb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ddb4:	07d0      	lsls	r0, r2, #31
 800ddb6:	d404      	bmi.n	800ddc2 <_fflush_r+0x3a>
 800ddb8:	0599      	lsls	r1, r3, #22
 800ddba:	d402      	bmi.n	800ddc2 <_fflush_r+0x3a>
 800ddbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddbe:	f000 f94c 	bl	800e05a <__retarget_lock_acquire_recursive>
 800ddc2:	4628      	mov	r0, r5
 800ddc4:	4621      	mov	r1, r4
 800ddc6:	f7ff ff59 	bl	800dc7c <__sflush_r>
 800ddca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddcc:	07da      	lsls	r2, r3, #31
 800ddce:	4605      	mov	r5, r0
 800ddd0:	d4e0      	bmi.n	800dd94 <_fflush_r+0xc>
 800ddd2:	89a3      	ldrh	r3, [r4, #12]
 800ddd4:	059b      	lsls	r3, r3, #22
 800ddd6:	d4dd      	bmi.n	800dd94 <_fflush_r+0xc>
 800ddd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddda:	f000 f93f 	bl	800e05c <__retarget_lock_release_recursive>
 800ddde:	e7d9      	b.n	800dd94 <_fflush_r+0xc>
 800dde0:	4b05      	ldr	r3, [pc, #20]	; (800ddf8 <_fflush_r+0x70>)
 800dde2:	429c      	cmp	r4, r3
 800dde4:	d101      	bne.n	800ddea <_fflush_r+0x62>
 800dde6:	68ac      	ldr	r4, [r5, #8]
 800dde8:	e7df      	b.n	800ddaa <_fflush_r+0x22>
 800ddea:	4b04      	ldr	r3, [pc, #16]	; (800ddfc <_fflush_r+0x74>)
 800ddec:	429c      	cmp	r4, r3
 800ddee:	bf08      	it	eq
 800ddf0:	68ec      	ldreq	r4, [r5, #12]
 800ddf2:	e7da      	b.n	800ddaa <_fflush_r+0x22>
 800ddf4:	08013588 	.word	0x08013588
 800ddf8:	080135a8 	.word	0x080135a8
 800ddfc:	08013568 	.word	0x08013568

0800de00 <fflush>:
 800de00:	4601      	mov	r1, r0
 800de02:	b920      	cbnz	r0, 800de0e <fflush+0xe>
 800de04:	4b04      	ldr	r3, [pc, #16]	; (800de18 <fflush+0x18>)
 800de06:	4905      	ldr	r1, [pc, #20]	; (800de1c <fflush+0x1c>)
 800de08:	6818      	ldr	r0, [r3, #0]
 800de0a:	f000 b8e1 	b.w	800dfd0 <_fwalk_reent>
 800de0e:	4b04      	ldr	r3, [pc, #16]	; (800de20 <fflush+0x20>)
 800de10:	6818      	ldr	r0, [r3, #0]
 800de12:	f7ff bfb9 	b.w	800dd88 <_fflush_r>
 800de16:	bf00      	nop
 800de18:	080135c8 	.word	0x080135c8
 800de1c:	0800dd89 	.word	0x0800dd89
 800de20:	200000bc 	.word	0x200000bc

0800de24 <std>:
 800de24:	2300      	movs	r3, #0
 800de26:	b510      	push	{r4, lr}
 800de28:	4604      	mov	r4, r0
 800de2a:	e9c0 3300 	strd	r3, r3, [r0]
 800de2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de32:	6083      	str	r3, [r0, #8]
 800de34:	8181      	strh	r1, [r0, #12]
 800de36:	6643      	str	r3, [r0, #100]	; 0x64
 800de38:	81c2      	strh	r2, [r0, #14]
 800de3a:	6183      	str	r3, [r0, #24]
 800de3c:	4619      	mov	r1, r3
 800de3e:	2208      	movs	r2, #8
 800de40:	305c      	adds	r0, #92	; 0x5c
 800de42:	f000 f91a 	bl	800e07a <memset>
 800de46:	4b05      	ldr	r3, [pc, #20]	; (800de5c <std+0x38>)
 800de48:	6263      	str	r3, [r4, #36]	; 0x24
 800de4a:	4b05      	ldr	r3, [pc, #20]	; (800de60 <std+0x3c>)
 800de4c:	62a3      	str	r3, [r4, #40]	; 0x28
 800de4e:	4b05      	ldr	r3, [pc, #20]	; (800de64 <std+0x40>)
 800de50:	62e3      	str	r3, [r4, #44]	; 0x2c
 800de52:	4b05      	ldr	r3, [pc, #20]	; (800de68 <std+0x44>)
 800de54:	6224      	str	r4, [r4, #32]
 800de56:	6323      	str	r3, [r4, #48]	; 0x30
 800de58:	bd10      	pop	{r4, pc}
 800de5a:	bf00      	nop
 800de5c:	0800e31d 	.word	0x0800e31d
 800de60:	0800e33f 	.word	0x0800e33f
 800de64:	0800e377 	.word	0x0800e377
 800de68:	0800e39b 	.word	0x0800e39b

0800de6c <_cleanup_r>:
 800de6c:	4901      	ldr	r1, [pc, #4]	; (800de74 <_cleanup_r+0x8>)
 800de6e:	f000 b8af 	b.w	800dfd0 <_fwalk_reent>
 800de72:	bf00      	nop
 800de74:	0800dd89 	.word	0x0800dd89

0800de78 <__sfmoreglue>:
 800de78:	b570      	push	{r4, r5, r6, lr}
 800de7a:	1e4a      	subs	r2, r1, #1
 800de7c:	2568      	movs	r5, #104	; 0x68
 800de7e:	4355      	muls	r5, r2
 800de80:	460e      	mov	r6, r1
 800de82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800de86:	f000 f951 	bl	800e12c <_malloc_r>
 800de8a:	4604      	mov	r4, r0
 800de8c:	b140      	cbz	r0, 800dea0 <__sfmoreglue+0x28>
 800de8e:	2100      	movs	r1, #0
 800de90:	e9c0 1600 	strd	r1, r6, [r0]
 800de94:	300c      	adds	r0, #12
 800de96:	60a0      	str	r0, [r4, #8]
 800de98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800de9c:	f000 f8ed 	bl	800e07a <memset>
 800dea0:	4620      	mov	r0, r4
 800dea2:	bd70      	pop	{r4, r5, r6, pc}

0800dea4 <__sfp_lock_acquire>:
 800dea4:	4801      	ldr	r0, [pc, #4]	; (800deac <__sfp_lock_acquire+0x8>)
 800dea6:	f000 b8d8 	b.w	800e05a <__retarget_lock_acquire_recursive>
 800deaa:	bf00      	nop
 800deac:	20058c40 	.word	0x20058c40

0800deb0 <__sfp_lock_release>:
 800deb0:	4801      	ldr	r0, [pc, #4]	; (800deb8 <__sfp_lock_release+0x8>)
 800deb2:	f000 b8d3 	b.w	800e05c <__retarget_lock_release_recursive>
 800deb6:	bf00      	nop
 800deb8:	20058c40 	.word	0x20058c40

0800debc <__sinit_lock_acquire>:
 800debc:	4801      	ldr	r0, [pc, #4]	; (800dec4 <__sinit_lock_acquire+0x8>)
 800debe:	f000 b8cc 	b.w	800e05a <__retarget_lock_acquire_recursive>
 800dec2:	bf00      	nop
 800dec4:	20058c3b 	.word	0x20058c3b

0800dec8 <__sinit_lock_release>:
 800dec8:	4801      	ldr	r0, [pc, #4]	; (800ded0 <__sinit_lock_release+0x8>)
 800deca:	f000 b8c7 	b.w	800e05c <__retarget_lock_release_recursive>
 800dece:	bf00      	nop
 800ded0:	20058c3b 	.word	0x20058c3b

0800ded4 <__sinit>:
 800ded4:	b510      	push	{r4, lr}
 800ded6:	4604      	mov	r4, r0
 800ded8:	f7ff fff0 	bl	800debc <__sinit_lock_acquire>
 800dedc:	69a3      	ldr	r3, [r4, #24]
 800dede:	b11b      	cbz	r3, 800dee8 <__sinit+0x14>
 800dee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dee4:	f7ff bff0 	b.w	800dec8 <__sinit_lock_release>
 800dee8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800deec:	6523      	str	r3, [r4, #80]	; 0x50
 800deee:	4b13      	ldr	r3, [pc, #76]	; (800df3c <__sinit+0x68>)
 800def0:	4a13      	ldr	r2, [pc, #76]	; (800df40 <__sinit+0x6c>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	62a2      	str	r2, [r4, #40]	; 0x28
 800def6:	42a3      	cmp	r3, r4
 800def8:	bf04      	itt	eq
 800defa:	2301      	moveq	r3, #1
 800defc:	61a3      	streq	r3, [r4, #24]
 800defe:	4620      	mov	r0, r4
 800df00:	f000 f820 	bl	800df44 <__sfp>
 800df04:	6060      	str	r0, [r4, #4]
 800df06:	4620      	mov	r0, r4
 800df08:	f000 f81c 	bl	800df44 <__sfp>
 800df0c:	60a0      	str	r0, [r4, #8]
 800df0e:	4620      	mov	r0, r4
 800df10:	f000 f818 	bl	800df44 <__sfp>
 800df14:	2200      	movs	r2, #0
 800df16:	60e0      	str	r0, [r4, #12]
 800df18:	2104      	movs	r1, #4
 800df1a:	6860      	ldr	r0, [r4, #4]
 800df1c:	f7ff ff82 	bl	800de24 <std>
 800df20:	68a0      	ldr	r0, [r4, #8]
 800df22:	2201      	movs	r2, #1
 800df24:	2109      	movs	r1, #9
 800df26:	f7ff ff7d 	bl	800de24 <std>
 800df2a:	68e0      	ldr	r0, [r4, #12]
 800df2c:	2202      	movs	r2, #2
 800df2e:	2112      	movs	r1, #18
 800df30:	f7ff ff78 	bl	800de24 <std>
 800df34:	2301      	movs	r3, #1
 800df36:	61a3      	str	r3, [r4, #24]
 800df38:	e7d2      	b.n	800dee0 <__sinit+0xc>
 800df3a:	bf00      	nop
 800df3c:	080135c8 	.word	0x080135c8
 800df40:	0800de6d 	.word	0x0800de6d

0800df44 <__sfp>:
 800df44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df46:	4607      	mov	r7, r0
 800df48:	f7ff ffac 	bl	800dea4 <__sfp_lock_acquire>
 800df4c:	4b1e      	ldr	r3, [pc, #120]	; (800dfc8 <__sfp+0x84>)
 800df4e:	681e      	ldr	r6, [r3, #0]
 800df50:	69b3      	ldr	r3, [r6, #24]
 800df52:	b913      	cbnz	r3, 800df5a <__sfp+0x16>
 800df54:	4630      	mov	r0, r6
 800df56:	f7ff ffbd 	bl	800ded4 <__sinit>
 800df5a:	3648      	adds	r6, #72	; 0x48
 800df5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800df60:	3b01      	subs	r3, #1
 800df62:	d503      	bpl.n	800df6c <__sfp+0x28>
 800df64:	6833      	ldr	r3, [r6, #0]
 800df66:	b30b      	cbz	r3, 800dfac <__sfp+0x68>
 800df68:	6836      	ldr	r6, [r6, #0]
 800df6a:	e7f7      	b.n	800df5c <__sfp+0x18>
 800df6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800df70:	b9d5      	cbnz	r5, 800dfa8 <__sfp+0x64>
 800df72:	4b16      	ldr	r3, [pc, #88]	; (800dfcc <__sfp+0x88>)
 800df74:	60e3      	str	r3, [r4, #12]
 800df76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800df7a:	6665      	str	r5, [r4, #100]	; 0x64
 800df7c:	f000 f86c 	bl	800e058 <__retarget_lock_init_recursive>
 800df80:	f7ff ff96 	bl	800deb0 <__sfp_lock_release>
 800df84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800df88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800df8c:	6025      	str	r5, [r4, #0]
 800df8e:	61a5      	str	r5, [r4, #24]
 800df90:	2208      	movs	r2, #8
 800df92:	4629      	mov	r1, r5
 800df94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800df98:	f000 f86f 	bl	800e07a <memset>
 800df9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dfa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfa8:	3468      	adds	r4, #104	; 0x68
 800dfaa:	e7d9      	b.n	800df60 <__sfp+0x1c>
 800dfac:	2104      	movs	r1, #4
 800dfae:	4638      	mov	r0, r7
 800dfb0:	f7ff ff62 	bl	800de78 <__sfmoreglue>
 800dfb4:	4604      	mov	r4, r0
 800dfb6:	6030      	str	r0, [r6, #0]
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d1d5      	bne.n	800df68 <__sfp+0x24>
 800dfbc:	f7ff ff78 	bl	800deb0 <__sfp_lock_release>
 800dfc0:	230c      	movs	r3, #12
 800dfc2:	603b      	str	r3, [r7, #0]
 800dfc4:	e7ee      	b.n	800dfa4 <__sfp+0x60>
 800dfc6:	bf00      	nop
 800dfc8:	080135c8 	.word	0x080135c8
 800dfcc:	ffff0001 	.word	0xffff0001

0800dfd0 <_fwalk_reent>:
 800dfd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfd4:	4606      	mov	r6, r0
 800dfd6:	4688      	mov	r8, r1
 800dfd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dfdc:	2700      	movs	r7, #0
 800dfde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dfe2:	f1b9 0901 	subs.w	r9, r9, #1
 800dfe6:	d505      	bpl.n	800dff4 <_fwalk_reent+0x24>
 800dfe8:	6824      	ldr	r4, [r4, #0]
 800dfea:	2c00      	cmp	r4, #0
 800dfec:	d1f7      	bne.n	800dfde <_fwalk_reent+0xe>
 800dfee:	4638      	mov	r0, r7
 800dff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dff4:	89ab      	ldrh	r3, [r5, #12]
 800dff6:	2b01      	cmp	r3, #1
 800dff8:	d907      	bls.n	800e00a <_fwalk_reent+0x3a>
 800dffa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dffe:	3301      	adds	r3, #1
 800e000:	d003      	beq.n	800e00a <_fwalk_reent+0x3a>
 800e002:	4629      	mov	r1, r5
 800e004:	4630      	mov	r0, r6
 800e006:	47c0      	blx	r8
 800e008:	4307      	orrs	r7, r0
 800e00a:	3568      	adds	r5, #104	; 0x68
 800e00c:	e7e9      	b.n	800dfe2 <_fwalk_reent+0x12>
	...

0800e010 <__libc_init_array>:
 800e010:	b570      	push	{r4, r5, r6, lr}
 800e012:	4d0d      	ldr	r5, [pc, #52]	; (800e048 <__libc_init_array+0x38>)
 800e014:	4c0d      	ldr	r4, [pc, #52]	; (800e04c <__libc_init_array+0x3c>)
 800e016:	1b64      	subs	r4, r4, r5
 800e018:	10a4      	asrs	r4, r4, #2
 800e01a:	2600      	movs	r6, #0
 800e01c:	42a6      	cmp	r6, r4
 800e01e:	d109      	bne.n	800e034 <__libc_init_array+0x24>
 800e020:	4d0b      	ldr	r5, [pc, #44]	; (800e050 <__libc_init_array+0x40>)
 800e022:	4c0c      	ldr	r4, [pc, #48]	; (800e054 <__libc_init_array+0x44>)
 800e024:	f000 fea6 	bl	800ed74 <_init>
 800e028:	1b64      	subs	r4, r4, r5
 800e02a:	10a4      	asrs	r4, r4, #2
 800e02c:	2600      	movs	r6, #0
 800e02e:	42a6      	cmp	r6, r4
 800e030:	d105      	bne.n	800e03e <__libc_init_array+0x2e>
 800e032:	bd70      	pop	{r4, r5, r6, pc}
 800e034:	f855 3b04 	ldr.w	r3, [r5], #4
 800e038:	4798      	blx	r3
 800e03a:	3601      	adds	r6, #1
 800e03c:	e7ee      	b.n	800e01c <__libc_init_array+0xc>
 800e03e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e042:	4798      	blx	r3
 800e044:	3601      	adds	r6, #1
 800e046:	e7f2      	b.n	800e02e <__libc_init_array+0x1e>
 800e048:	08013600 	.word	0x08013600
 800e04c:	08013600 	.word	0x08013600
 800e050:	08013600 	.word	0x08013600
 800e054:	08013604 	.word	0x08013604

0800e058 <__retarget_lock_init_recursive>:
 800e058:	4770      	bx	lr

0800e05a <__retarget_lock_acquire_recursive>:
 800e05a:	4770      	bx	lr

0800e05c <__retarget_lock_release_recursive>:
 800e05c:	4770      	bx	lr

0800e05e <memcpy>:
 800e05e:	440a      	add	r2, r1
 800e060:	4291      	cmp	r1, r2
 800e062:	f100 33ff 	add.w	r3, r0, #4294967295
 800e066:	d100      	bne.n	800e06a <memcpy+0xc>
 800e068:	4770      	bx	lr
 800e06a:	b510      	push	{r4, lr}
 800e06c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e070:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e074:	4291      	cmp	r1, r2
 800e076:	d1f9      	bne.n	800e06c <memcpy+0xe>
 800e078:	bd10      	pop	{r4, pc}

0800e07a <memset>:
 800e07a:	4402      	add	r2, r0
 800e07c:	4603      	mov	r3, r0
 800e07e:	4293      	cmp	r3, r2
 800e080:	d100      	bne.n	800e084 <memset+0xa>
 800e082:	4770      	bx	lr
 800e084:	f803 1b01 	strb.w	r1, [r3], #1
 800e088:	e7f9      	b.n	800e07e <memset+0x4>
	...

0800e08c <_free_r>:
 800e08c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e08e:	2900      	cmp	r1, #0
 800e090:	d048      	beq.n	800e124 <_free_r+0x98>
 800e092:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e096:	9001      	str	r0, [sp, #4]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	f1a1 0404 	sub.w	r4, r1, #4
 800e09e:	bfb8      	it	lt
 800e0a0:	18e4      	addlt	r4, r4, r3
 800e0a2:	f000 fad7 	bl	800e654 <__malloc_lock>
 800e0a6:	4a20      	ldr	r2, [pc, #128]	; (800e128 <_free_r+0x9c>)
 800e0a8:	9801      	ldr	r0, [sp, #4]
 800e0aa:	6813      	ldr	r3, [r2, #0]
 800e0ac:	4615      	mov	r5, r2
 800e0ae:	b933      	cbnz	r3, 800e0be <_free_r+0x32>
 800e0b0:	6063      	str	r3, [r4, #4]
 800e0b2:	6014      	str	r4, [r2, #0]
 800e0b4:	b003      	add	sp, #12
 800e0b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0ba:	f000 bad1 	b.w	800e660 <__malloc_unlock>
 800e0be:	42a3      	cmp	r3, r4
 800e0c0:	d90b      	bls.n	800e0da <_free_r+0x4e>
 800e0c2:	6821      	ldr	r1, [r4, #0]
 800e0c4:	1862      	adds	r2, r4, r1
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	bf04      	itt	eq
 800e0ca:	681a      	ldreq	r2, [r3, #0]
 800e0cc:	685b      	ldreq	r3, [r3, #4]
 800e0ce:	6063      	str	r3, [r4, #4]
 800e0d0:	bf04      	itt	eq
 800e0d2:	1852      	addeq	r2, r2, r1
 800e0d4:	6022      	streq	r2, [r4, #0]
 800e0d6:	602c      	str	r4, [r5, #0]
 800e0d8:	e7ec      	b.n	800e0b4 <_free_r+0x28>
 800e0da:	461a      	mov	r2, r3
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	b10b      	cbz	r3, 800e0e4 <_free_r+0x58>
 800e0e0:	42a3      	cmp	r3, r4
 800e0e2:	d9fa      	bls.n	800e0da <_free_r+0x4e>
 800e0e4:	6811      	ldr	r1, [r2, #0]
 800e0e6:	1855      	adds	r5, r2, r1
 800e0e8:	42a5      	cmp	r5, r4
 800e0ea:	d10b      	bne.n	800e104 <_free_r+0x78>
 800e0ec:	6824      	ldr	r4, [r4, #0]
 800e0ee:	4421      	add	r1, r4
 800e0f0:	1854      	adds	r4, r2, r1
 800e0f2:	42a3      	cmp	r3, r4
 800e0f4:	6011      	str	r1, [r2, #0]
 800e0f6:	d1dd      	bne.n	800e0b4 <_free_r+0x28>
 800e0f8:	681c      	ldr	r4, [r3, #0]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	6053      	str	r3, [r2, #4]
 800e0fe:	4421      	add	r1, r4
 800e100:	6011      	str	r1, [r2, #0]
 800e102:	e7d7      	b.n	800e0b4 <_free_r+0x28>
 800e104:	d902      	bls.n	800e10c <_free_r+0x80>
 800e106:	230c      	movs	r3, #12
 800e108:	6003      	str	r3, [r0, #0]
 800e10a:	e7d3      	b.n	800e0b4 <_free_r+0x28>
 800e10c:	6825      	ldr	r5, [r4, #0]
 800e10e:	1961      	adds	r1, r4, r5
 800e110:	428b      	cmp	r3, r1
 800e112:	bf04      	itt	eq
 800e114:	6819      	ldreq	r1, [r3, #0]
 800e116:	685b      	ldreq	r3, [r3, #4]
 800e118:	6063      	str	r3, [r4, #4]
 800e11a:	bf04      	itt	eq
 800e11c:	1949      	addeq	r1, r1, r5
 800e11e:	6021      	streq	r1, [r4, #0]
 800e120:	6054      	str	r4, [r2, #4]
 800e122:	e7c7      	b.n	800e0b4 <_free_r+0x28>
 800e124:	b003      	add	sp, #12
 800e126:	bd30      	pop	{r4, r5, pc}
 800e128:	2000178c 	.word	0x2000178c

0800e12c <_malloc_r>:
 800e12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e12e:	1ccd      	adds	r5, r1, #3
 800e130:	f025 0503 	bic.w	r5, r5, #3
 800e134:	3508      	adds	r5, #8
 800e136:	2d0c      	cmp	r5, #12
 800e138:	bf38      	it	cc
 800e13a:	250c      	movcc	r5, #12
 800e13c:	2d00      	cmp	r5, #0
 800e13e:	4606      	mov	r6, r0
 800e140:	db01      	blt.n	800e146 <_malloc_r+0x1a>
 800e142:	42a9      	cmp	r1, r5
 800e144:	d903      	bls.n	800e14e <_malloc_r+0x22>
 800e146:	230c      	movs	r3, #12
 800e148:	6033      	str	r3, [r6, #0]
 800e14a:	2000      	movs	r0, #0
 800e14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e14e:	f000 fa81 	bl	800e654 <__malloc_lock>
 800e152:	4921      	ldr	r1, [pc, #132]	; (800e1d8 <_malloc_r+0xac>)
 800e154:	680a      	ldr	r2, [r1, #0]
 800e156:	4614      	mov	r4, r2
 800e158:	b99c      	cbnz	r4, 800e182 <_malloc_r+0x56>
 800e15a:	4f20      	ldr	r7, [pc, #128]	; (800e1dc <_malloc_r+0xb0>)
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	b923      	cbnz	r3, 800e16a <_malloc_r+0x3e>
 800e160:	4621      	mov	r1, r4
 800e162:	4630      	mov	r0, r6
 800e164:	f000 f8ca 	bl	800e2fc <_sbrk_r>
 800e168:	6038      	str	r0, [r7, #0]
 800e16a:	4629      	mov	r1, r5
 800e16c:	4630      	mov	r0, r6
 800e16e:	f000 f8c5 	bl	800e2fc <_sbrk_r>
 800e172:	1c43      	adds	r3, r0, #1
 800e174:	d123      	bne.n	800e1be <_malloc_r+0x92>
 800e176:	230c      	movs	r3, #12
 800e178:	6033      	str	r3, [r6, #0]
 800e17a:	4630      	mov	r0, r6
 800e17c:	f000 fa70 	bl	800e660 <__malloc_unlock>
 800e180:	e7e3      	b.n	800e14a <_malloc_r+0x1e>
 800e182:	6823      	ldr	r3, [r4, #0]
 800e184:	1b5b      	subs	r3, r3, r5
 800e186:	d417      	bmi.n	800e1b8 <_malloc_r+0x8c>
 800e188:	2b0b      	cmp	r3, #11
 800e18a:	d903      	bls.n	800e194 <_malloc_r+0x68>
 800e18c:	6023      	str	r3, [r4, #0]
 800e18e:	441c      	add	r4, r3
 800e190:	6025      	str	r5, [r4, #0]
 800e192:	e004      	b.n	800e19e <_malloc_r+0x72>
 800e194:	6863      	ldr	r3, [r4, #4]
 800e196:	42a2      	cmp	r2, r4
 800e198:	bf0c      	ite	eq
 800e19a:	600b      	streq	r3, [r1, #0]
 800e19c:	6053      	strne	r3, [r2, #4]
 800e19e:	4630      	mov	r0, r6
 800e1a0:	f000 fa5e 	bl	800e660 <__malloc_unlock>
 800e1a4:	f104 000b 	add.w	r0, r4, #11
 800e1a8:	1d23      	adds	r3, r4, #4
 800e1aa:	f020 0007 	bic.w	r0, r0, #7
 800e1ae:	1ac2      	subs	r2, r0, r3
 800e1b0:	d0cc      	beq.n	800e14c <_malloc_r+0x20>
 800e1b2:	1a1b      	subs	r3, r3, r0
 800e1b4:	50a3      	str	r3, [r4, r2]
 800e1b6:	e7c9      	b.n	800e14c <_malloc_r+0x20>
 800e1b8:	4622      	mov	r2, r4
 800e1ba:	6864      	ldr	r4, [r4, #4]
 800e1bc:	e7cc      	b.n	800e158 <_malloc_r+0x2c>
 800e1be:	1cc4      	adds	r4, r0, #3
 800e1c0:	f024 0403 	bic.w	r4, r4, #3
 800e1c4:	42a0      	cmp	r0, r4
 800e1c6:	d0e3      	beq.n	800e190 <_malloc_r+0x64>
 800e1c8:	1a21      	subs	r1, r4, r0
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	f000 f896 	bl	800e2fc <_sbrk_r>
 800e1d0:	3001      	adds	r0, #1
 800e1d2:	d1dd      	bne.n	800e190 <_malloc_r+0x64>
 800e1d4:	e7cf      	b.n	800e176 <_malloc_r+0x4a>
 800e1d6:	bf00      	nop
 800e1d8:	2000178c 	.word	0x2000178c
 800e1dc:	20001790 	.word	0x20001790

0800e1e0 <iprintf>:
 800e1e0:	b40f      	push	{r0, r1, r2, r3}
 800e1e2:	4b0a      	ldr	r3, [pc, #40]	; (800e20c <iprintf+0x2c>)
 800e1e4:	b513      	push	{r0, r1, r4, lr}
 800e1e6:	681c      	ldr	r4, [r3, #0]
 800e1e8:	b124      	cbz	r4, 800e1f4 <iprintf+0x14>
 800e1ea:	69a3      	ldr	r3, [r4, #24]
 800e1ec:	b913      	cbnz	r3, 800e1f4 <iprintf+0x14>
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	f7ff fe70 	bl	800ded4 <__sinit>
 800e1f4:	ab05      	add	r3, sp, #20
 800e1f6:	9a04      	ldr	r2, [sp, #16]
 800e1f8:	68a1      	ldr	r1, [r4, #8]
 800e1fa:	9301      	str	r3, [sp, #4]
 800e1fc:	4620      	mov	r0, r4
 800e1fe:	f000 fa5f 	bl	800e6c0 <_vfiprintf_r>
 800e202:	b002      	add	sp, #8
 800e204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e208:	b004      	add	sp, #16
 800e20a:	4770      	bx	lr
 800e20c:	200000bc 	.word	0x200000bc

0800e210 <_puts_r>:
 800e210:	b570      	push	{r4, r5, r6, lr}
 800e212:	460e      	mov	r6, r1
 800e214:	4605      	mov	r5, r0
 800e216:	b118      	cbz	r0, 800e220 <_puts_r+0x10>
 800e218:	6983      	ldr	r3, [r0, #24]
 800e21a:	b90b      	cbnz	r3, 800e220 <_puts_r+0x10>
 800e21c:	f7ff fe5a 	bl	800ded4 <__sinit>
 800e220:	69ab      	ldr	r3, [r5, #24]
 800e222:	68ac      	ldr	r4, [r5, #8]
 800e224:	b913      	cbnz	r3, 800e22c <_puts_r+0x1c>
 800e226:	4628      	mov	r0, r5
 800e228:	f7ff fe54 	bl	800ded4 <__sinit>
 800e22c:	4b2c      	ldr	r3, [pc, #176]	; (800e2e0 <_puts_r+0xd0>)
 800e22e:	429c      	cmp	r4, r3
 800e230:	d120      	bne.n	800e274 <_puts_r+0x64>
 800e232:	686c      	ldr	r4, [r5, #4]
 800e234:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e236:	07db      	lsls	r3, r3, #31
 800e238:	d405      	bmi.n	800e246 <_puts_r+0x36>
 800e23a:	89a3      	ldrh	r3, [r4, #12]
 800e23c:	0598      	lsls	r0, r3, #22
 800e23e:	d402      	bmi.n	800e246 <_puts_r+0x36>
 800e240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e242:	f7ff ff0a 	bl	800e05a <__retarget_lock_acquire_recursive>
 800e246:	89a3      	ldrh	r3, [r4, #12]
 800e248:	0719      	lsls	r1, r3, #28
 800e24a:	d51d      	bpl.n	800e288 <_puts_r+0x78>
 800e24c:	6923      	ldr	r3, [r4, #16]
 800e24e:	b1db      	cbz	r3, 800e288 <_puts_r+0x78>
 800e250:	3e01      	subs	r6, #1
 800e252:	68a3      	ldr	r3, [r4, #8]
 800e254:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e258:	3b01      	subs	r3, #1
 800e25a:	60a3      	str	r3, [r4, #8]
 800e25c:	bb39      	cbnz	r1, 800e2ae <_puts_r+0x9e>
 800e25e:	2b00      	cmp	r3, #0
 800e260:	da38      	bge.n	800e2d4 <_puts_r+0xc4>
 800e262:	4622      	mov	r2, r4
 800e264:	210a      	movs	r1, #10
 800e266:	4628      	mov	r0, r5
 800e268:	f000 f89c 	bl	800e3a4 <__swbuf_r>
 800e26c:	3001      	adds	r0, #1
 800e26e:	d011      	beq.n	800e294 <_puts_r+0x84>
 800e270:	250a      	movs	r5, #10
 800e272:	e011      	b.n	800e298 <_puts_r+0x88>
 800e274:	4b1b      	ldr	r3, [pc, #108]	; (800e2e4 <_puts_r+0xd4>)
 800e276:	429c      	cmp	r4, r3
 800e278:	d101      	bne.n	800e27e <_puts_r+0x6e>
 800e27a:	68ac      	ldr	r4, [r5, #8]
 800e27c:	e7da      	b.n	800e234 <_puts_r+0x24>
 800e27e:	4b1a      	ldr	r3, [pc, #104]	; (800e2e8 <_puts_r+0xd8>)
 800e280:	429c      	cmp	r4, r3
 800e282:	bf08      	it	eq
 800e284:	68ec      	ldreq	r4, [r5, #12]
 800e286:	e7d5      	b.n	800e234 <_puts_r+0x24>
 800e288:	4621      	mov	r1, r4
 800e28a:	4628      	mov	r0, r5
 800e28c:	f000 f8ee 	bl	800e46c <__swsetup_r>
 800e290:	2800      	cmp	r0, #0
 800e292:	d0dd      	beq.n	800e250 <_puts_r+0x40>
 800e294:	f04f 35ff 	mov.w	r5, #4294967295
 800e298:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e29a:	07da      	lsls	r2, r3, #31
 800e29c:	d405      	bmi.n	800e2aa <_puts_r+0x9a>
 800e29e:	89a3      	ldrh	r3, [r4, #12]
 800e2a0:	059b      	lsls	r3, r3, #22
 800e2a2:	d402      	bmi.n	800e2aa <_puts_r+0x9a>
 800e2a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2a6:	f7ff fed9 	bl	800e05c <__retarget_lock_release_recursive>
 800e2aa:	4628      	mov	r0, r5
 800e2ac:	bd70      	pop	{r4, r5, r6, pc}
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	da04      	bge.n	800e2bc <_puts_r+0xac>
 800e2b2:	69a2      	ldr	r2, [r4, #24]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	dc06      	bgt.n	800e2c6 <_puts_r+0xb6>
 800e2b8:	290a      	cmp	r1, #10
 800e2ba:	d004      	beq.n	800e2c6 <_puts_r+0xb6>
 800e2bc:	6823      	ldr	r3, [r4, #0]
 800e2be:	1c5a      	adds	r2, r3, #1
 800e2c0:	6022      	str	r2, [r4, #0]
 800e2c2:	7019      	strb	r1, [r3, #0]
 800e2c4:	e7c5      	b.n	800e252 <_puts_r+0x42>
 800e2c6:	4622      	mov	r2, r4
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	f000 f86b 	bl	800e3a4 <__swbuf_r>
 800e2ce:	3001      	adds	r0, #1
 800e2d0:	d1bf      	bne.n	800e252 <_puts_r+0x42>
 800e2d2:	e7df      	b.n	800e294 <_puts_r+0x84>
 800e2d4:	6823      	ldr	r3, [r4, #0]
 800e2d6:	250a      	movs	r5, #10
 800e2d8:	1c5a      	adds	r2, r3, #1
 800e2da:	6022      	str	r2, [r4, #0]
 800e2dc:	701d      	strb	r5, [r3, #0]
 800e2de:	e7db      	b.n	800e298 <_puts_r+0x88>
 800e2e0:	08013588 	.word	0x08013588
 800e2e4:	080135a8 	.word	0x080135a8
 800e2e8:	08013568 	.word	0x08013568

0800e2ec <puts>:
 800e2ec:	4b02      	ldr	r3, [pc, #8]	; (800e2f8 <puts+0xc>)
 800e2ee:	4601      	mov	r1, r0
 800e2f0:	6818      	ldr	r0, [r3, #0]
 800e2f2:	f7ff bf8d 	b.w	800e210 <_puts_r>
 800e2f6:	bf00      	nop
 800e2f8:	200000bc 	.word	0x200000bc

0800e2fc <_sbrk_r>:
 800e2fc:	b538      	push	{r3, r4, r5, lr}
 800e2fe:	4d06      	ldr	r5, [pc, #24]	; (800e318 <_sbrk_r+0x1c>)
 800e300:	2300      	movs	r3, #0
 800e302:	4604      	mov	r4, r0
 800e304:	4608      	mov	r0, r1
 800e306:	602b      	str	r3, [r5, #0]
 800e308:	f000 fd26 	bl	800ed58 <_sbrk>
 800e30c:	1c43      	adds	r3, r0, #1
 800e30e:	d102      	bne.n	800e316 <_sbrk_r+0x1a>
 800e310:	682b      	ldr	r3, [r5, #0]
 800e312:	b103      	cbz	r3, 800e316 <_sbrk_r+0x1a>
 800e314:	6023      	str	r3, [r4, #0]
 800e316:	bd38      	pop	{r3, r4, r5, pc}
 800e318:	20058c44 	.word	0x20058c44

0800e31c <__sread>:
 800e31c:	b510      	push	{r4, lr}
 800e31e:	460c      	mov	r4, r1
 800e320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e324:	f000 fc90 	bl	800ec48 <_read_r>
 800e328:	2800      	cmp	r0, #0
 800e32a:	bfab      	itete	ge
 800e32c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e32e:	89a3      	ldrhlt	r3, [r4, #12]
 800e330:	181b      	addge	r3, r3, r0
 800e332:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e336:	bfac      	ite	ge
 800e338:	6563      	strge	r3, [r4, #84]	; 0x54
 800e33a:	81a3      	strhlt	r3, [r4, #12]
 800e33c:	bd10      	pop	{r4, pc}

0800e33e <__swrite>:
 800e33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e342:	461f      	mov	r7, r3
 800e344:	898b      	ldrh	r3, [r1, #12]
 800e346:	05db      	lsls	r3, r3, #23
 800e348:	4605      	mov	r5, r0
 800e34a:	460c      	mov	r4, r1
 800e34c:	4616      	mov	r6, r2
 800e34e:	d505      	bpl.n	800e35c <__swrite+0x1e>
 800e350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e354:	2302      	movs	r3, #2
 800e356:	2200      	movs	r2, #0
 800e358:	f000 f906 	bl	800e568 <_lseek_r>
 800e35c:	89a3      	ldrh	r3, [r4, #12]
 800e35e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e362:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e366:	81a3      	strh	r3, [r4, #12]
 800e368:	4632      	mov	r2, r6
 800e36a:	463b      	mov	r3, r7
 800e36c:	4628      	mov	r0, r5
 800e36e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e372:	f000 b869 	b.w	800e448 <_write_r>

0800e376 <__sseek>:
 800e376:	b510      	push	{r4, lr}
 800e378:	460c      	mov	r4, r1
 800e37a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e37e:	f000 f8f3 	bl	800e568 <_lseek_r>
 800e382:	1c43      	adds	r3, r0, #1
 800e384:	89a3      	ldrh	r3, [r4, #12]
 800e386:	bf15      	itete	ne
 800e388:	6560      	strne	r0, [r4, #84]	; 0x54
 800e38a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e38e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e392:	81a3      	strheq	r3, [r4, #12]
 800e394:	bf18      	it	ne
 800e396:	81a3      	strhne	r3, [r4, #12]
 800e398:	bd10      	pop	{r4, pc}

0800e39a <__sclose>:
 800e39a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e39e:	f000 b8d3 	b.w	800e548 <_close_r>
	...

0800e3a4 <__swbuf_r>:
 800e3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3a6:	460e      	mov	r6, r1
 800e3a8:	4614      	mov	r4, r2
 800e3aa:	4605      	mov	r5, r0
 800e3ac:	b118      	cbz	r0, 800e3b6 <__swbuf_r+0x12>
 800e3ae:	6983      	ldr	r3, [r0, #24]
 800e3b0:	b90b      	cbnz	r3, 800e3b6 <__swbuf_r+0x12>
 800e3b2:	f7ff fd8f 	bl	800ded4 <__sinit>
 800e3b6:	4b21      	ldr	r3, [pc, #132]	; (800e43c <__swbuf_r+0x98>)
 800e3b8:	429c      	cmp	r4, r3
 800e3ba:	d12b      	bne.n	800e414 <__swbuf_r+0x70>
 800e3bc:	686c      	ldr	r4, [r5, #4]
 800e3be:	69a3      	ldr	r3, [r4, #24]
 800e3c0:	60a3      	str	r3, [r4, #8]
 800e3c2:	89a3      	ldrh	r3, [r4, #12]
 800e3c4:	071a      	lsls	r2, r3, #28
 800e3c6:	d52f      	bpl.n	800e428 <__swbuf_r+0x84>
 800e3c8:	6923      	ldr	r3, [r4, #16]
 800e3ca:	b36b      	cbz	r3, 800e428 <__swbuf_r+0x84>
 800e3cc:	6923      	ldr	r3, [r4, #16]
 800e3ce:	6820      	ldr	r0, [r4, #0]
 800e3d0:	1ac0      	subs	r0, r0, r3
 800e3d2:	6963      	ldr	r3, [r4, #20]
 800e3d4:	b2f6      	uxtb	r6, r6
 800e3d6:	4283      	cmp	r3, r0
 800e3d8:	4637      	mov	r7, r6
 800e3da:	dc04      	bgt.n	800e3e6 <__swbuf_r+0x42>
 800e3dc:	4621      	mov	r1, r4
 800e3de:	4628      	mov	r0, r5
 800e3e0:	f7ff fcd2 	bl	800dd88 <_fflush_r>
 800e3e4:	bb30      	cbnz	r0, 800e434 <__swbuf_r+0x90>
 800e3e6:	68a3      	ldr	r3, [r4, #8]
 800e3e8:	3b01      	subs	r3, #1
 800e3ea:	60a3      	str	r3, [r4, #8]
 800e3ec:	6823      	ldr	r3, [r4, #0]
 800e3ee:	1c5a      	adds	r2, r3, #1
 800e3f0:	6022      	str	r2, [r4, #0]
 800e3f2:	701e      	strb	r6, [r3, #0]
 800e3f4:	6963      	ldr	r3, [r4, #20]
 800e3f6:	3001      	adds	r0, #1
 800e3f8:	4283      	cmp	r3, r0
 800e3fa:	d004      	beq.n	800e406 <__swbuf_r+0x62>
 800e3fc:	89a3      	ldrh	r3, [r4, #12]
 800e3fe:	07db      	lsls	r3, r3, #31
 800e400:	d506      	bpl.n	800e410 <__swbuf_r+0x6c>
 800e402:	2e0a      	cmp	r6, #10
 800e404:	d104      	bne.n	800e410 <__swbuf_r+0x6c>
 800e406:	4621      	mov	r1, r4
 800e408:	4628      	mov	r0, r5
 800e40a:	f7ff fcbd 	bl	800dd88 <_fflush_r>
 800e40e:	b988      	cbnz	r0, 800e434 <__swbuf_r+0x90>
 800e410:	4638      	mov	r0, r7
 800e412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e414:	4b0a      	ldr	r3, [pc, #40]	; (800e440 <__swbuf_r+0x9c>)
 800e416:	429c      	cmp	r4, r3
 800e418:	d101      	bne.n	800e41e <__swbuf_r+0x7a>
 800e41a:	68ac      	ldr	r4, [r5, #8]
 800e41c:	e7cf      	b.n	800e3be <__swbuf_r+0x1a>
 800e41e:	4b09      	ldr	r3, [pc, #36]	; (800e444 <__swbuf_r+0xa0>)
 800e420:	429c      	cmp	r4, r3
 800e422:	bf08      	it	eq
 800e424:	68ec      	ldreq	r4, [r5, #12]
 800e426:	e7ca      	b.n	800e3be <__swbuf_r+0x1a>
 800e428:	4621      	mov	r1, r4
 800e42a:	4628      	mov	r0, r5
 800e42c:	f000 f81e 	bl	800e46c <__swsetup_r>
 800e430:	2800      	cmp	r0, #0
 800e432:	d0cb      	beq.n	800e3cc <__swbuf_r+0x28>
 800e434:	f04f 37ff 	mov.w	r7, #4294967295
 800e438:	e7ea      	b.n	800e410 <__swbuf_r+0x6c>
 800e43a:	bf00      	nop
 800e43c:	08013588 	.word	0x08013588
 800e440:	080135a8 	.word	0x080135a8
 800e444:	08013568 	.word	0x08013568

0800e448 <_write_r>:
 800e448:	b538      	push	{r3, r4, r5, lr}
 800e44a:	4d07      	ldr	r5, [pc, #28]	; (800e468 <_write_r+0x20>)
 800e44c:	4604      	mov	r4, r0
 800e44e:	4608      	mov	r0, r1
 800e450:	4611      	mov	r1, r2
 800e452:	2200      	movs	r2, #0
 800e454:	602a      	str	r2, [r5, #0]
 800e456:	461a      	mov	r2, r3
 800e458:	f7fe fb46 	bl	800cae8 <_write>
 800e45c:	1c43      	adds	r3, r0, #1
 800e45e:	d102      	bne.n	800e466 <_write_r+0x1e>
 800e460:	682b      	ldr	r3, [r5, #0]
 800e462:	b103      	cbz	r3, 800e466 <_write_r+0x1e>
 800e464:	6023      	str	r3, [r4, #0]
 800e466:	bd38      	pop	{r3, r4, r5, pc}
 800e468:	20058c44 	.word	0x20058c44

0800e46c <__swsetup_r>:
 800e46c:	4b32      	ldr	r3, [pc, #200]	; (800e538 <__swsetup_r+0xcc>)
 800e46e:	b570      	push	{r4, r5, r6, lr}
 800e470:	681d      	ldr	r5, [r3, #0]
 800e472:	4606      	mov	r6, r0
 800e474:	460c      	mov	r4, r1
 800e476:	b125      	cbz	r5, 800e482 <__swsetup_r+0x16>
 800e478:	69ab      	ldr	r3, [r5, #24]
 800e47a:	b913      	cbnz	r3, 800e482 <__swsetup_r+0x16>
 800e47c:	4628      	mov	r0, r5
 800e47e:	f7ff fd29 	bl	800ded4 <__sinit>
 800e482:	4b2e      	ldr	r3, [pc, #184]	; (800e53c <__swsetup_r+0xd0>)
 800e484:	429c      	cmp	r4, r3
 800e486:	d10f      	bne.n	800e4a8 <__swsetup_r+0x3c>
 800e488:	686c      	ldr	r4, [r5, #4]
 800e48a:	89a3      	ldrh	r3, [r4, #12]
 800e48c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e490:	0719      	lsls	r1, r3, #28
 800e492:	d42c      	bmi.n	800e4ee <__swsetup_r+0x82>
 800e494:	06dd      	lsls	r5, r3, #27
 800e496:	d411      	bmi.n	800e4bc <__swsetup_r+0x50>
 800e498:	2309      	movs	r3, #9
 800e49a:	6033      	str	r3, [r6, #0]
 800e49c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e4a0:	81a3      	strh	r3, [r4, #12]
 800e4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e4a6:	e03e      	b.n	800e526 <__swsetup_r+0xba>
 800e4a8:	4b25      	ldr	r3, [pc, #148]	; (800e540 <__swsetup_r+0xd4>)
 800e4aa:	429c      	cmp	r4, r3
 800e4ac:	d101      	bne.n	800e4b2 <__swsetup_r+0x46>
 800e4ae:	68ac      	ldr	r4, [r5, #8]
 800e4b0:	e7eb      	b.n	800e48a <__swsetup_r+0x1e>
 800e4b2:	4b24      	ldr	r3, [pc, #144]	; (800e544 <__swsetup_r+0xd8>)
 800e4b4:	429c      	cmp	r4, r3
 800e4b6:	bf08      	it	eq
 800e4b8:	68ec      	ldreq	r4, [r5, #12]
 800e4ba:	e7e6      	b.n	800e48a <__swsetup_r+0x1e>
 800e4bc:	0758      	lsls	r0, r3, #29
 800e4be:	d512      	bpl.n	800e4e6 <__swsetup_r+0x7a>
 800e4c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4c2:	b141      	cbz	r1, 800e4d6 <__swsetup_r+0x6a>
 800e4c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4c8:	4299      	cmp	r1, r3
 800e4ca:	d002      	beq.n	800e4d2 <__swsetup_r+0x66>
 800e4cc:	4630      	mov	r0, r6
 800e4ce:	f7ff fddd 	bl	800e08c <_free_r>
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	6363      	str	r3, [r4, #52]	; 0x34
 800e4d6:	89a3      	ldrh	r3, [r4, #12]
 800e4d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e4dc:	81a3      	strh	r3, [r4, #12]
 800e4de:	2300      	movs	r3, #0
 800e4e0:	6063      	str	r3, [r4, #4]
 800e4e2:	6923      	ldr	r3, [r4, #16]
 800e4e4:	6023      	str	r3, [r4, #0]
 800e4e6:	89a3      	ldrh	r3, [r4, #12]
 800e4e8:	f043 0308 	orr.w	r3, r3, #8
 800e4ec:	81a3      	strh	r3, [r4, #12]
 800e4ee:	6923      	ldr	r3, [r4, #16]
 800e4f0:	b94b      	cbnz	r3, 800e506 <__swsetup_r+0x9a>
 800e4f2:	89a3      	ldrh	r3, [r4, #12]
 800e4f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e4f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4fc:	d003      	beq.n	800e506 <__swsetup_r+0x9a>
 800e4fe:	4621      	mov	r1, r4
 800e500:	4630      	mov	r0, r6
 800e502:	f000 f867 	bl	800e5d4 <__smakebuf_r>
 800e506:	89a0      	ldrh	r0, [r4, #12]
 800e508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e50c:	f010 0301 	ands.w	r3, r0, #1
 800e510:	d00a      	beq.n	800e528 <__swsetup_r+0xbc>
 800e512:	2300      	movs	r3, #0
 800e514:	60a3      	str	r3, [r4, #8]
 800e516:	6963      	ldr	r3, [r4, #20]
 800e518:	425b      	negs	r3, r3
 800e51a:	61a3      	str	r3, [r4, #24]
 800e51c:	6923      	ldr	r3, [r4, #16]
 800e51e:	b943      	cbnz	r3, 800e532 <__swsetup_r+0xc6>
 800e520:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e524:	d1ba      	bne.n	800e49c <__swsetup_r+0x30>
 800e526:	bd70      	pop	{r4, r5, r6, pc}
 800e528:	0781      	lsls	r1, r0, #30
 800e52a:	bf58      	it	pl
 800e52c:	6963      	ldrpl	r3, [r4, #20]
 800e52e:	60a3      	str	r3, [r4, #8]
 800e530:	e7f4      	b.n	800e51c <__swsetup_r+0xb0>
 800e532:	2000      	movs	r0, #0
 800e534:	e7f7      	b.n	800e526 <__swsetup_r+0xba>
 800e536:	bf00      	nop
 800e538:	200000bc 	.word	0x200000bc
 800e53c:	08013588 	.word	0x08013588
 800e540:	080135a8 	.word	0x080135a8
 800e544:	08013568 	.word	0x08013568

0800e548 <_close_r>:
 800e548:	b538      	push	{r3, r4, r5, lr}
 800e54a:	4d06      	ldr	r5, [pc, #24]	; (800e564 <_close_r+0x1c>)
 800e54c:	2300      	movs	r3, #0
 800e54e:	4604      	mov	r4, r0
 800e550:	4608      	mov	r0, r1
 800e552:	602b      	str	r3, [r5, #0]
 800e554:	f000 fbe0 	bl	800ed18 <_close>
 800e558:	1c43      	adds	r3, r0, #1
 800e55a:	d102      	bne.n	800e562 <_close_r+0x1a>
 800e55c:	682b      	ldr	r3, [r5, #0]
 800e55e:	b103      	cbz	r3, 800e562 <_close_r+0x1a>
 800e560:	6023      	str	r3, [r4, #0]
 800e562:	bd38      	pop	{r3, r4, r5, pc}
 800e564:	20058c44 	.word	0x20058c44

0800e568 <_lseek_r>:
 800e568:	b538      	push	{r3, r4, r5, lr}
 800e56a:	4d07      	ldr	r5, [pc, #28]	; (800e588 <_lseek_r+0x20>)
 800e56c:	4604      	mov	r4, r0
 800e56e:	4608      	mov	r0, r1
 800e570:	4611      	mov	r1, r2
 800e572:	2200      	movs	r2, #0
 800e574:	602a      	str	r2, [r5, #0]
 800e576:	461a      	mov	r2, r3
 800e578:	f000 fbe6 	bl	800ed48 <_lseek>
 800e57c:	1c43      	adds	r3, r0, #1
 800e57e:	d102      	bne.n	800e586 <_lseek_r+0x1e>
 800e580:	682b      	ldr	r3, [r5, #0]
 800e582:	b103      	cbz	r3, 800e586 <_lseek_r+0x1e>
 800e584:	6023      	str	r3, [r4, #0]
 800e586:	bd38      	pop	{r3, r4, r5, pc}
 800e588:	20058c44 	.word	0x20058c44

0800e58c <__swhatbuf_r>:
 800e58c:	b570      	push	{r4, r5, r6, lr}
 800e58e:	460e      	mov	r6, r1
 800e590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e594:	2900      	cmp	r1, #0
 800e596:	b096      	sub	sp, #88	; 0x58
 800e598:	4614      	mov	r4, r2
 800e59a:	461d      	mov	r5, r3
 800e59c:	da07      	bge.n	800e5ae <__swhatbuf_r+0x22>
 800e59e:	2300      	movs	r3, #0
 800e5a0:	602b      	str	r3, [r5, #0]
 800e5a2:	89b3      	ldrh	r3, [r6, #12]
 800e5a4:	061a      	lsls	r2, r3, #24
 800e5a6:	d410      	bmi.n	800e5ca <__swhatbuf_r+0x3e>
 800e5a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5ac:	e00e      	b.n	800e5cc <__swhatbuf_r+0x40>
 800e5ae:	466a      	mov	r2, sp
 800e5b0:	f000 fb5c 	bl	800ec6c <_fstat_r>
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	dbf2      	blt.n	800e59e <__swhatbuf_r+0x12>
 800e5b8:	9a01      	ldr	r2, [sp, #4]
 800e5ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e5be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e5c2:	425a      	negs	r2, r3
 800e5c4:	415a      	adcs	r2, r3
 800e5c6:	602a      	str	r2, [r5, #0]
 800e5c8:	e7ee      	b.n	800e5a8 <__swhatbuf_r+0x1c>
 800e5ca:	2340      	movs	r3, #64	; 0x40
 800e5cc:	2000      	movs	r0, #0
 800e5ce:	6023      	str	r3, [r4, #0]
 800e5d0:	b016      	add	sp, #88	; 0x58
 800e5d2:	bd70      	pop	{r4, r5, r6, pc}

0800e5d4 <__smakebuf_r>:
 800e5d4:	898b      	ldrh	r3, [r1, #12]
 800e5d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e5d8:	079d      	lsls	r5, r3, #30
 800e5da:	4606      	mov	r6, r0
 800e5dc:	460c      	mov	r4, r1
 800e5de:	d507      	bpl.n	800e5f0 <__smakebuf_r+0x1c>
 800e5e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e5e4:	6023      	str	r3, [r4, #0]
 800e5e6:	6123      	str	r3, [r4, #16]
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	6163      	str	r3, [r4, #20]
 800e5ec:	b002      	add	sp, #8
 800e5ee:	bd70      	pop	{r4, r5, r6, pc}
 800e5f0:	ab01      	add	r3, sp, #4
 800e5f2:	466a      	mov	r2, sp
 800e5f4:	f7ff ffca 	bl	800e58c <__swhatbuf_r>
 800e5f8:	9900      	ldr	r1, [sp, #0]
 800e5fa:	4605      	mov	r5, r0
 800e5fc:	4630      	mov	r0, r6
 800e5fe:	f7ff fd95 	bl	800e12c <_malloc_r>
 800e602:	b948      	cbnz	r0, 800e618 <__smakebuf_r+0x44>
 800e604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e608:	059a      	lsls	r2, r3, #22
 800e60a:	d4ef      	bmi.n	800e5ec <__smakebuf_r+0x18>
 800e60c:	f023 0303 	bic.w	r3, r3, #3
 800e610:	f043 0302 	orr.w	r3, r3, #2
 800e614:	81a3      	strh	r3, [r4, #12]
 800e616:	e7e3      	b.n	800e5e0 <__smakebuf_r+0xc>
 800e618:	4b0d      	ldr	r3, [pc, #52]	; (800e650 <__smakebuf_r+0x7c>)
 800e61a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e61c:	89a3      	ldrh	r3, [r4, #12]
 800e61e:	6020      	str	r0, [r4, #0]
 800e620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e624:	81a3      	strh	r3, [r4, #12]
 800e626:	9b00      	ldr	r3, [sp, #0]
 800e628:	6163      	str	r3, [r4, #20]
 800e62a:	9b01      	ldr	r3, [sp, #4]
 800e62c:	6120      	str	r0, [r4, #16]
 800e62e:	b15b      	cbz	r3, 800e648 <__smakebuf_r+0x74>
 800e630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e634:	4630      	mov	r0, r6
 800e636:	f000 fb2b 	bl	800ec90 <_isatty_r>
 800e63a:	b128      	cbz	r0, 800e648 <__smakebuf_r+0x74>
 800e63c:	89a3      	ldrh	r3, [r4, #12]
 800e63e:	f023 0303 	bic.w	r3, r3, #3
 800e642:	f043 0301 	orr.w	r3, r3, #1
 800e646:	81a3      	strh	r3, [r4, #12]
 800e648:	89a0      	ldrh	r0, [r4, #12]
 800e64a:	4305      	orrs	r5, r0
 800e64c:	81a5      	strh	r5, [r4, #12]
 800e64e:	e7cd      	b.n	800e5ec <__smakebuf_r+0x18>
 800e650:	0800de6d 	.word	0x0800de6d

0800e654 <__malloc_lock>:
 800e654:	4801      	ldr	r0, [pc, #4]	; (800e65c <__malloc_lock+0x8>)
 800e656:	f7ff bd00 	b.w	800e05a <__retarget_lock_acquire_recursive>
 800e65a:	bf00      	nop
 800e65c:	20058c3c 	.word	0x20058c3c

0800e660 <__malloc_unlock>:
 800e660:	4801      	ldr	r0, [pc, #4]	; (800e668 <__malloc_unlock+0x8>)
 800e662:	f7ff bcfb 	b.w	800e05c <__retarget_lock_release_recursive>
 800e666:	bf00      	nop
 800e668:	20058c3c 	.word	0x20058c3c

0800e66c <__sfputc_r>:
 800e66c:	6893      	ldr	r3, [r2, #8]
 800e66e:	3b01      	subs	r3, #1
 800e670:	2b00      	cmp	r3, #0
 800e672:	b410      	push	{r4}
 800e674:	6093      	str	r3, [r2, #8]
 800e676:	da08      	bge.n	800e68a <__sfputc_r+0x1e>
 800e678:	6994      	ldr	r4, [r2, #24]
 800e67a:	42a3      	cmp	r3, r4
 800e67c:	db01      	blt.n	800e682 <__sfputc_r+0x16>
 800e67e:	290a      	cmp	r1, #10
 800e680:	d103      	bne.n	800e68a <__sfputc_r+0x1e>
 800e682:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e686:	f7ff be8d 	b.w	800e3a4 <__swbuf_r>
 800e68a:	6813      	ldr	r3, [r2, #0]
 800e68c:	1c58      	adds	r0, r3, #1
 800e68e:	6010      	str	r0, [r2, #0]
 800e690:	7019      	strb	r1, [r3, #0]
 800e692:	4608      	mov	r0, r1
 800e694:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e698:	4770      	bx	lr

0800e69a <__sfputs_r>:
 800e69a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e69c:	4606      	mov	r6, r0
 800e69e:	460f      	mov	r7, r1
 800e6a0:	4614      	mov	r4, r2
 800e6a2:	18d5      	adds	r5, r2, r3
 800e6a4:	42ac      	cmp	r4, r5
 800e6a6:	d101      	bne.n	800e6ac <__sfputs_r+0x12>
 800e6a8:	2000      	movs	r0, #0
 800e6aa:	e007      	b.n	800e6bc <__sfputs_r+0x22>
 800e6ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6b0:	463a      	mov	r2, r7
 800e6b2:	4630      	mov	r0, r6
 800e6b4:	f7ff ffda 	bl	800e66c <__sfputc_r>
 800e6b8:	1c43      	adds	r3, r0, #1
 800e6ba:	d1f3      	bne.n	800e6a4 <__sfputs_r+0xa>
 800e6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e6c0 <_vfiprintf_r>:
 800e6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6c4:	460d      	mov	r5, r1
 800e6c6:	b09d      	sub	sp, #116	; 0x74
 800e6c8:	4614      	mov	r4, r2
 800e6ca:	4698      	mov	r8, r3
 800e6cc:	4606      	mov	r6, r0
 800e6ce:	b118      	cbz	r0, 800e6d8 <_vfiprintf_r+0x18>
 800e6d0:	6983      	ldr	r3, [r0, #24]
 800e6d2:	b90b      	cbnz	r3, 800e6d8 <_vfiprintf_r+0x18>
 800e6d4:	f7ff fbfe 	bl	800ded4 <__sinit>
 800e6d8:	4b89      	ldr	r3, [pc, #548]	; (800e900 <_vfiprintf_r+0x240>)
 800e6da:	429d      	cmp	r5, r3
 800e6dc:	d11b      	bne.n	800e716 <_vfiprintf_r+0x56>
 800e6de:	6875      	ldr	r5, [r6, #4]
 800e6e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6e2:	07d9      	lsls	r1, r3, #31
 800e6e4:	d405      	bmi.n	800e6f2 <_vfiprintf_r+0x32>
 800e6e6:	89ab      	ldrh	r3, [r5, #12]
 800e6e8:	059a      	lsls	r2, r3, #22
 800e6ea:	d402      	bmi.n	800e6f2 <_vfiprintf_r+0x32>
 800e6ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6ee:	f7ff fcb4 	bl	800e05a <__retarget_lock_acquire_recursive>
 800e6f2:	89ab      	ldrh	r3, [r5, #12]
 800e6f4:	071b      	lsls	r3, r3, #28
 800e6f6:	d501      	bpl.n	800e6fc <_vfiprintf_r+0x3c>
 800e6f8:	692b      	ldr	r3, [r5, #16]
 800e6fa:	b9eb      	cbnz	r3, 800e738 <_vfiprintf_r+0x78>
 800e6fc:	4629      	mov	r1, r5
 800e6fe:	4630      	mov	r0, r6
 800e700:	f7ff feb4 	bl	800e46c <__swsetup_r>
 800e704:	b1c0      	cbz	r0, 800e738 <_vfiprintf_r+0x78>
 800e706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e708:	07dc      	lsls	r4, r3, #31
 800e70a:	d50e      	bpl.n	800e72a <_vfiprintf_r+0x6a>
 800e70c:	f04f 30ff 	mov.w	r0, #4294967295
 800e710:	b01d      	add	sp, #116	; 0x74
 800e712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e716:	4b7b      	ldr	r3, [pc, #492]	; (800e904 <_vfiprintf_r+0x244>)
 800e718:	429d      	cmp	r5, r3
 800e71a:	d101      	bne.n	800e720 <_vfiprintf_r+0x60>
 800e71c:	68b5      	ldr	r5, [r6, #8]
 800e71e:	e7df      	b.n	800e6e0 <_vfiprintf_r+0x20>
 800e720:	4b79      	ldr	r3, [pc, #484]	; (800e908 <_vfiprintf_r+0x248>)
 800e722:	429d      	cmp	r5, r3
 800e724:	bf08      	it	eq
 800e726:	68f5      	ldreq	r5, [r6, #12]
 800e728:	e7da      	b.n	800e6e0 <_vfiprintf_r+0x20>
 800e72a:	89ab      	ldrh	r3, [r5, #12]
 800e72c:	0598      	lsls	r0, r3, #22
 800e72e:	d4ed      	bmi.n	800e70c <_vfiprintf_r+0x4c>
 800e730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e732:	f7ff fc93 	bl	800e05c <__retarget_lock_release_recursive>
 800e736:	e7e9      	b.n	800e70c <_vfiprintf_r+0x4c>
 800e738:	2300      	movs	r3, #0
 800e73a:	9309      	str	r3, [sp, #36]	; 0x24
 800e73c:	2320      	movs	r3, #32
 800e73e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e742:	f8cd 800c 	str.w	r8, [sp, #12]
 800e746:	2330      	movs	r3, #48	; 0x30
 800e748:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e90c <_vfiprintf_r+0x24c>
 800e74c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e750:	f04f 0901 	mov.w	r9, #1
 800e754:	4623      	mov	r3, r4
 800e756:	469a      	mov	sl, r3
 800e758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e75c:	b10a      	cbz	r2, 800e762 <_vfiprintf_r+0xa2>
 800e75e:	2a25      	cmp	r2, #37	; 0x25
 800e760:	d1f9      	bne.n	800e756 <_vfiprintf_r+0x96>
 800e762:	ebba 0b04 	subs.w	fp, sl, r4
 800e766:	d00b      	beq.n	800e780 <_vfiprintf_r+0xc0>
 800e768:	465b      	mov	r3, fp
 800e76a:	4622      	mov	r2, r4
 800e76c:	4629      	mov	r1, r5
 800e76e:	4630      	mov	r0, r6
 800e770:	f7ff ff93 	bl	800e69a <__sfputs_r>
 800e774:	3001      	adds	r0, #1
 800e776:	f000 80aa 	beq.w	800e8ce <_vfiprintf_r+0x20e>
 800e77a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e77c:	445a      	add	r2, fp
 800e77e:	9209      	str	r2, [sp, #36]	; 0x24
 800e780:	f89a 3000 	ldrb.w	r3, [sl]
 800e784:	2b00      	cmp	r3, #0
 800e786:	f000 80a2 	beq.w	800e8ce <_vfiprintf_r+0x20e>
 800e78a:	2300      	movs	r3, #0
 800e78c:	f04f 32ff 	mov.w	r2, #4294967295
 800e790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e794:	f10a 0a01 	add.w	sl, sl, #1
 800e798:	9304      	str	r3, [sp, #16]
 800e79a:	9307      	str	r3, [sp, #28]
 800e79c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7a0:	931a      	str	r3, [sp, #104]	; 0x68
 800e7a2:	4654      	mov	r4, sl
 800e7a4:	2205      	movs	r2, #5
 800e7a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7aa:	4858      	ldr	r0, [pc, #352]	; (800e90c <_vfiprintf_r+0x24c>)
 800e7ac:	f7f1 fd48 	bl	8000240 <memchr>
 800e7b0:	9a04      	ldr	r2, [sp, #16]
 800e7b2:	b9d8      	cbnz	r0, 800e7ec <_vfiprintf_r+0x12c>
 800e7b4:	06d1      	lsls	r1, r2, #27
 800e7b6:	bf44      	itt	mi
 800e7b8:	2320      	movmi	r3, #32
 800e7ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7be:	0713      	lsls	r3, r2, #28
 800e7c0:	bf44      	itt	mi
 800e7c2:	232b      	movmi	r3, #43	; 0x2b
 800e7c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7c8:	f89a 3000 	ldrb.w	r3, [sl]
 800e7cc:	2b2a      	cmp	r3, #42	; 0x2a
 800e7ce:	d015      	beq.n	800e7fc <_vfiprintf_r+0x13c>
 800e7d0:	9a07      	ldr	r2, [sp, #28]
 800e7d2:	4654      	mov	r4, sl
 800e7d4:	2000      	movs	r0, #0
 800e7d6:	f04f 0c0a 	mov.w	ip, #10
 800e7da:	4621      	mov	r1, r4
 800e7dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7e0:	3b30      	subs	r3, #48	; 0x30
 800e7e2:	2b09      	cmp	r3, #9
 800e7e4:	d94e      	bls.n	800e884 <_vfiprintf_r+0x1c4>
 800e7e6:	b1b0      	cbz	r0, 800e816 <_vfiprintf_r+0x156>
 800e7e8:	9207      	str	r2, [sp, #28]
 800e7ea:	e014      	b.n	800e816 <_vfiprintf_r+0x156>
 800e7ec:	eba0 0308 	sub.w	r3, r0, r8
 800e7f0:	fa09 f303 	lsl.w	r3, r9, r3
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	9304      	str	r3, [sp, #16]
 800e7f8:	46a2      	mov	sl, r4
 800e7fa:	e7d2      	b.n	800e7a2 <_vfiprintf_r+0xe2>
 800e7fc:	9b03      	ldr	r3, [sp, #12]
 800e7fe:	1d19      	adds	r1, r3, #4
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	9103      	str	r1, [sp, #12]
 800e804:	2b00      	cmp	r3, #0
 800e806:	bfbb      	ittet	lt
 800e808:	425b      	neglt	r3, r3
 800e80a:	f042 0202 	orrlt.w	r2, r2, #2
 800e80e:	9307      	strge	r3, [sp, #28]
 800e810:	9307      	strlt	r3, [sp, #28]
 800e812:	bfb8      	it	lt
 800e814:	9204      	strlt	r2, [sp, #16]
 800e816:	7823      	ldrb	r3, [r4, #0]
 800e818:	2b2e      	cmp	r3, #46	; 0x2e
 800e81a:	d10c      	bne.n	800e836 <_vfiprintf_r+0x176>
 800e81c:	7863      	ldrb	r3, [r4, #1]
 800e81e:	2b2a      	cmp	r3, #42	; 0x2a
 800e820:	d135      	bne.n	800e88e <_vfiprintf_r+0x1ce>
 800e822:	9b03      	ldr	r3, [sp, #12]
 800e824:	1d1a      	adds	r2, r3, #4
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	9203      	str	r2, [sp, #12]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	bfb8      	it	lt
 800e82e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e832:	3402      	adds	r4, #2
 800e834:	9305      	str	r3, [sp, #20]
 800e836:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e91c <_vfiprintf_r+0x25c>
 800e83a:	7821      	ldrb	r1, [r4, #0]
 800e83c:	2203      	movs	r2, #3
 800e83e:	4650      	mov	r0, sl
 800e840:	f7f1 fcfe 	bl	8000240 <memchr>
 800e844:	b140      	cbz	r0, 800e858 <_vfiprintf_r+0x198>
 800e846:	2340      	movs	r3, #64	; 0x40
 800e848:	eba0 000a 	sub.w	r0, r0, sl
 800e84c:	fa03 f000 	lsl.w	r0, r3, r0
 800e850:	9b04      	ldr	r3, [sp, #16]
 800e852:	4303      	orrs	r3, r0
 800e854:	3401      	adds	r4, #1
 800e856:	9304      	str	r3, [sp, #16]
 800e858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e85c:	482c      	ldr	r0, [pc, #176]	; (800e910 <_vfiprintf_r+0x250>)
 800e85e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e862:	2206      	movs	r2, #6
 800e864:	f7f1 fcec 	bl	8000240 <memchr>
 800e868:	2800      	cmp	r0, #0
 800e86a:	d03f      	beq.n	800e8ec <_vfiprintf_r+0x22c>
 800e86c:	4b29      	ldr	r3, [pc, #164]	; (800e914 <_vfiprintf_r+0x254>)
 800e86e:	bb1b      	cbnz	r3, 800e8b8 <_vfiprintf_r+0x1f8>
 800e870:	9b03      	ldr	r3, [sp, #12]
 800e872:	3307      	adds	r3, #7
 800e874:	f023 0307 	bic.w	r3, r3, #7
 800e878:	3308      	adds	r3, #8
 800e87a:	9303      	str	r3, [sp, #12]
 800e87c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e87e:	443b      	add	r3, r7
 800e880:	9309      	str	r3, [sp, #36]	; 0x24
 800e882:	e767      	b.n	800e754 <_vfiprintf_r+0x94>
 800e884:	fb0c 3202 	mla	r2, ip, r2, r3
 800e888:	460c      	mov	r4, r1
 800e88a:	2001      	movs	r0, #1
 800e88c:	e7a5      	b.n	800e7da <_vfiprintf_r+0x11a>
 800e88e:	2300      	movs	r3, #0
 800e890:	3401      	adds	r4, #1
 800e892:	9305      	str	r3, [sp, #20]
 800e894:	4619      	mov	r1, r3
 800e896:	f04f 0c0a 	mov.w	ip, #10
 800e89a:	4620      	mov	r0, r4
 800e89c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8a0:	3a30      	subs	r2, #48	; 0x30
 800e8a2:	2a09      	cmp	r2, #9
 800e8a4:	d903      	bls.n	800e8ae <_vfiprintf_r+0x1ee>
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d0c5      	beq.n	800e836 <_vfiprintf_r+0x176>
 800e8aa:	9105      	str	r1, [sp, #20]
 800e8ac:	e7c3      	b.n	800e836 <_vfiprintf_r+0x176>
 800e8ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	e7f0      	b.n	800e89a <_vfiprintf_r+0x1da>
 800e8b8:	ab03      	add	r3, sp, #12
 800e8ba:	9300      	str	r3, [sp, #0]
 800e8bc:	462a      	mov	r2, r5
 800e8be:	4b16      	ldr	r3, [pc, #88]	; (800e918 <_vfiprintf_r+0x258>)
 800e8c0:	a904      	add	r1, sp, #16
 800e8c2:	4630      	mov	r0, r6
 800e8c4:	f3af 8000 	nop.w
 800e8c8:	4607      	mov	r7, r0
 800e8ca:	1c78      	adds	r0, r7, #1
 800e8cc:	d1d6      	bne.n	800e87c <_vfiprintf_r+0x1bc>
 800e8ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8d0:	07d9      	lsls	r1, r3, #31
 800e8d2:	d405      	bmi.n	800e8e0 <_vfiprintf_r+0x220>
 800e8d4:	89ab      	ldrh	r3, [r5, #12]
 800e8d6:	059a      	lsls	r2, r3, #22
 800e8d8:	d402      	bmi.n	800e8e0 <_vfiprintf_r+0x220>
 800e8da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8dc:	f7ff fbbe 	bl	800e05c <__retarget_lock_release_recursive>
 800e8e0:	89ab      	ldrh	r3, [r5, #12]
 800e8e2:	065b      	lsls	r3, r3, #25
 800e8e4:	f53f af12 	bmi.w	800e70c <_vfiprintf_r+0x4c>
 800e8e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8ea:	e711      	b.n	800e710 <_vfiprintf_r+0x50>
 800e8ec:	ab03      	add	r3, sp, #12
 800e8ee:	9300      	str	r3, [sp, #0]
 800e8f0:	462a      	mov	r2, r5
 800e8f2:	4b09      	ldr	r3, [pc, #36]	; (800e918 <_vfiprintf_r+0x258>)
 800e8f4:	a904      	add	r1, sp, #16
 800e8f6:	4630      	mov	r0, r6
 800e8f8:	f000 f880 	bl	800e9fc <_printf_i>
 800e8fc:	e7e4      	b.n	800e8c8 <_vfiprintf_r+0x208>
 800e8fe:	bf00      	nop
 800e900:	08013588 	.word	0x08013588
 800e904:	080135a8 	.word	0x080135a8
 800e908:	08013568 	.word	0x08013568
 800e90c:	080135cc 	.word	0x080135cc
 800e910:	080135d6 	.word	0x080135d6
 800e914:	00000000 	.word	0x00000000
 800e918:	0800e69b 	.word	0x0800e69b
 800e91c:	080135d2 	.word	0x080135d2

0800e920 <_printf_common>:
 800e920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e924:	4616      	mov	r6, r2
 800e926:	4699      	mov	r9, r3
 800e928:	688a      	ldr	r2, [r1, #8]
 800e92a:	690b      	ldr	r3, [r1, #16]
 800e92c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e930:	4293      	cmp	r3, r2
 800e932:	bfb8      	it	lt
 800e934:	4613      	movlt	r3, r2
 800e936:	6033      	str	r3, [r6, #0]
 800e938:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e93c:	4607      	mov	r7, r0
 800e93e:	460c      	mov	r4, r1
 800e940:	b10a      	cbz	r2, 800e946 <_printf_common+0x26>
 800e942:	3301      	adds	r3, #1
 800e944:	6033      	str	r3, [r6, #0]
 800e946:	6823      	ldr	r3, [r4, #0]
 800e948:	0699      	lsls	r1, r3, #26
 800e94a:	bf42      	ittt	mi
 800e94c:	6833      	ldrmi	r3, [r6, #0]
 800e94e:	3302      	addmi	r3, #2
 800e950:	6033      	strmi	r3, [r6, #0]
 800e952:	6825      	ldr	r5, [r4, #0]
 800e954:	f015 0506 	ands.w	r5, r5, #6
 800e958:	d106      	bne.n	800e968 <_printf_common+0x48>
 800e95a:	f104 0a19 	add.w	sl, r4, #25
 800e95e:	68e3      	ldr	r3, [r4, #12]
 800e960:	6832      	ldr	r2, [r6, #0]
 800e962:	1a9b      	subs	r3, r3, r2
 800e964:	42ab      	cmp	r3, r5
 800e966:	dc26      	bgt.n	800e9b6 <_printf_common+0x96>
 800e968:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e96c:	1e13      	subs	r3, r2, #0
 800e96e:	6822      	ldr	r2, [r4, #0]
 800e970:	bf18      	it	ne
 800e972:	2301      	movne	r3, #1
 800e974:	0692      	lsls	r2, r2, #26
 800e976:	d42b      	bmi.n	800e9d0 <_printf_common+0xb0>
 800e978:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e97c:	4649      	mov	r1, r9
 800e97e:	4638      	mov	r0, r7
 800e980:	47c0      	blx	r8
 800e982:	3001      	adds	r0, #1
 800e984:	d01e      	beq.n	800e9c4 <_printf_common+0xa4>
 800e986:	6823      	ldr	r3, [r4, #0]
 800e988:	68e5      	ldr	r5, [r4, #12]
 800e98a:	6832      	ldr	r2, [r6, #0]
 800e98c:	f003 0306 	and.w	r3, r3, #6
 800e990:	2b04      	cmp	r3, #4
 800e992:	bf08      	it	eq
 800e994:	1aad      	subeq	r5, r5, r2
 800e996:	68a3      	ldr	r3, [r4, #8]
 800e998:	6922      	ldr	r2, [r4, #16]
 800e99a:	bf0c      	ite	eq
 800e99c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e9a0:	2500      	movne	r5, #0
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	bfc4      	itt	gt
 800e9a6:	1a9b      	subgt	r3, r3, r2
 800e9a8:	18ed      	addgt	r5, r5, r3
 800e9aa:	2600      	movs	r6, #0
 800e9ac:	341a      	adds	r4, #26
 800e9ae:	42b5      	cmp	r5, r6
 800e9b0:	d11a      	bne.n	800e9e8 <_printf_common+0xc8>
 800e9b2:	2000      	movs	r0, #0
 800e9b4:	e008      	b.n	800e9c8 <_printf_common+0xa8>
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	4652      	mov	r2, sl
 800e9ba:	4649      	mov	r1, r9
 800e9bc:	4638      	mov	r0, r7
 800e9be:	47c0      	blx	r8
 800e9c0:	3001      	adds	r0, #1
 800e9c2:	d103      	bne.n	800e9cc <_printf_common+0xac>
 800e9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9cc:	3501      	adds	r5, #1
 800e9ce:	e7c6      	b.n	800e95e <_printf_common+0x3e>
 800e9d0:	18e1      	adds	r1, r4, r3
 800e9d2:	1c5a      	adds	r2, r3, #1
 800e9d4:	2030      	movs	r0, #48	; 0x30
 800e9d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e9da:	4422      	add	r2, r4
 800e9dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e9e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e9e4:	3302      	adds	r3, #2
 800e9e6:	e7c7      	b.n	800e978 <_printf_common+0x58>
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	4622      	mov	r2, r4
 800e9ec:	4649      	mov	r1, r9
 800e9ee:	4638      	mov	r0, r7
 800e9f0:	47c0      	blx	r8
 800e9f2:	3001      	adds	r0, #1
 800e9f4:	d0e6      	beq.n	800e9c4 <_printf_common+0xa4>
 800e9f6:	3601      	adds	r6, #1
 800e9f8:	e7d9      	b.n	800e9ae <_printf_common+0x8e>
	...

0800e9fc <_printf_i>:
 800e9fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea00:	460c      	mov	r4, r1
 800ea02:	4691      	mov	r9, r2
 800ea04:	7e27      	ldrb	r7, [r4, #24]
 800ea06:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ea08:	2f78      	cmp	r7, #120	; 0x78
 800ea0a:	4680      	mov	r8, r0
 800ea0c:	469a      	mov	sl, r3
 800ea0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea12:	d807      	bhi.n	800ea24 <_printf_i+0x28>
 800ea14:	2f62      	cmp	r7, #98	; 0x62
 800ea16:	d80a      	bhi.n	800ea2e <_printf_i+0x32>
 800ea18:	2f00      	cmp	r7, #0
 800ea1a:	f000 80d8 	beq.w	800ebce <_printf_i+0x1d2>
 800ea1e:	2f58      	cmp	r7, #88	; 0x58
 800ea20:	f000 80a3 	beq.w	800eb6a <_printf_i+0x16e>
 800ea24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ea28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ea2c:	e03a      	b.n	800eaa4 <_printf_i+0xa8>
 800ea2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea32:	2b15      	cmp	r3, #21
 800ea34:	d8f6      	bhi.n	800ea24 <_printf_i+0x28>
 800ea36:	a001      	add	r0, pc, #4	; (adr r0, 800ea3c <_printf_i+0x40>)
 800ea38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ea3c:	0800ea95 	.word	0x0800ea95
 800ea40:	0800eaa9 	.word	0x0800eaa9
 800ea44:	0800ea25 	.word	0x0800ea25
 800ea48:	0800ea25 	.word	0x0800ea25
 800ea4c:	0800ea25 	.word	0x0800ea25
 800ea50:	0800ea25 	.word	0x0800ea25
 800ea54:	0800eaa9 	.word	0x0800eaa9
 800ea58:	0800ea25 	.word	0x0800ea25
 800ea5c:	0800ea25 	.word	0x0800ea25
 800ea60:	0800ea25 	.word	0x0800ea25
 800ea64:	0800ea25 	.word	0x0800ea25
 800ea68:	0800ebb5 	.word	0x0800ebb5
 800ea6c:	0800ead9 	.word	0x0800ead9
 800ea70:	0800eb97 	.word	0x0800eb97
 800ea74:	0800ea25 	.word	0x0800ea25
 800ea78:	0800ea25 	.word	0x0800ea25
 800ea7c:	0800ebd7 	.word	0x0800ebd7
 800ea80:	0800ea25 	.word	0x0800ea25
 800ea84:	0800ead9 	.word	0x0800ead9
 800ea88:	0800ea25 	.word	0x0800ea25
 800ea8c:	0800ea25 	.word	0x0800ea25
 800ea90:	0800eb9f 	.word	0x0800eb9f
 800ea94:	680b      	ldr	r3, [r1, #0]
 800ea96:	1d1a      	adds	r2, r3, #4
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	600a      	str	r2, [r1, #0]
 800ea9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eaa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	e0a3      	b.n	800ebf0 <_printf_i+0x1f4>
 800eaa8:	6825      	ldr	r5, [r4, #0]
 800eaaa:	6808      	ldr	r0, [r1, #0]
 800eaac:	062e      	lsls	r6, r5, #24
 800eaae:	f100 0304 	add.w	r3, r0, #4
 800eab2:	d50a      	bpl.n	800eaca <_printf_i+0xce>
 800eab4:	6805      	ldr	r5, [r0, #0]
 800eab6:	600b      	str	r3, [r1, #0]
 800eab8:	2d00      	cmp	r5, #0
 800eaba:	da03      	bge.n	800eac4 <_printf_i+0xc8>
 800eabc:	232d      	movs	r3, #45	; 0x2d
 800eabe:	426d      	negs	r5, r5
 800eac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eac4:	485e      	ldr	r0, [pc, #376]	; (800ec40 <_printf_i+0x244>)
 800eac6:	230a      	movs	r3, #10
 800eac8:	e019      	b.n	800eafe <_printf_i+0x102>
 800eaca:	f015 0f40 	tst.w	r5, #64	; 0x40
 800eace:	6805      	ldr	r5, [r0, #0]
 800ead0:	600b      	str	r3, [r1, #0]
 800ead2:	bf18      	it	ne
 800ead4:	b22d      	sxthne	r5, r5
 800ead6:	e7ef      	b.n	800eab8 <_printf_i+0xbc>
 800ead8:	680b      	ldr	r3, [r1, #0]
 800eada:	6825      	ldr	r5, [r4, #0]
 800eadc:	1d18      	adds	r0, r3, #4
 800eade:	6008      	str	r0, [r1, #0]
 800eae0:	0628      	lsls	r0, r5, #24
 800eae2:	d501      	bpl.n	800eae8 <_printf_i+0xec>
 800eae4:	681d      	ldr	r5, [r3, #0]
 800eae6:	e002      	b.n	800eaee <_printf_i+0xf2>
 800eae8:	0669      	lsls	r1, r5, #25
 800eaea:	d5fb      	bpl.n	800eae4 <_printf_i+0xe8>
 800eaec:	881d      	ldrh	r5, [r3, #0]
 800eaee:	4854      	ldr	r0, [pc, #336]	; (800ec40 <_printf_i+0x244>)
 800eaf0:	2f6f      	cmp	r7, #111	; 0x6f
 800eaf2:	bf0c      	ite	eq
 800eaf4:	2308      	moveq	r3, #8
 800eaf6:	230a      	movne	r3, #10
 800eaf8:	2100      	movs	r1, #0
 800eafa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eafe:	6866      	ldr	r6, [r4, #4]
 800eb00:	60a6      	str	r6, [r4, #8]
 800eb02:	2e00      	cmp	r6, #0
 800eb04:	bfa2      	ittt	ge
 800eb06:	6821      	ldrge	r1, [r4, #0]
 800eb08:	f021 0104 	bicge.w	r1, r1, #4
 800eb0c:	6021      	strge	r1, [r4, #0]
 800eb0e:	b90d      	cbnz	r5, 800eb14 <_printf_i+0x118>
 800eb10:	2e00      	cmp	r6, #0
 800eb12:	d04d      	beq.n	800ebb0 <_printf_i+0x1b4>
 800eb14:	4616      	mov	r6, r2
 800eb16:	fbb5 f1f3 	udiv	r1, r5, r3
 800eb1a:	fb03 5711 	mls	r7, r3, r1, r5
 800eb1e:	5dc7      	ldrb	r7, [r0, r7]
 800eb20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eb24:	462f      	mov	r7, r5
 800eb26:	42bb      	cmp	r3, r7
 800eb28:	460d      	mov	r5, r1
 800eb2a:	d9f4      	bls.n	800eb16 <_printf_i+0x11a>
 800eb2c:	2b08      	cmp	r3, #8
 800eb2e:	d10b      	bne.n	800eb48 <_printf_i+0x14c>
 800eb30:	6823      	ldr	r3, [r4, #0]
 800eb32:	07df      	lsls	r7, r3, #31
 800eb34:	d508      	bpl.n	800eb48 <_printf_i+0x14c>
 800eb36:	6923      	ldr	r3, [r4, #16]
 800eb38:	6861      	ldr	r1, [r4, #4]
 800eb3a:	4299      	cmp	r1, r3
 800eb3c:	bfde      	ittt	le
 800eb3e:	2330      	movle	r3, #48	; 0x30
 800eb40:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eb44:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eb48:	1b92      	subs	r2, r2, r6
 800eb4a:	6122      	str	r2, [r4, #16]
 800eb4c:	f8cd a000 	str.w	sl, [sp]
 800eb50:	464b      	mov	r3, r9
 800eb52:	aa03      	add	r2, sp, #12
 800eb54:	4621      	mov	r1, r4
 800eb56:	4640      	mov	r0, r8
 800eb58:	f7ff fee2 	bl	800e920 <_printf_common>
 800eb5c:	3001      	adds	r0, #1
 800eb5e:	d14c      	bne.n	800ebfa <_printf_i+0x1fe>
 800eb60:	f04f 30ff 	mov.w	r0, #4294967295
 800eb64:	b004      	add	sp, #16
 800eb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb6a:	4835      	ldr	r0, [pc, #212]	; (800ec40 <_printf_i+0x244>)
 800eb6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eb70:	6823      	ldr	r3, [r4, #0]
 800eb72:	680e      	ldr	r6, [r1, #0]
 800eb74:	061f      	lsls	r7, r3, #24
 800eb76:	f856 5b04 	ldr.w	r5, [r6], #4
 800eb7a:	600e      	str	r6, [r1, #0]
 800eb7c:	d514      	bpl.n	800eba8 <_printf_i+0x1ac>
 800eb7e:	07d9      	lsls	r1, r3, #31
 800eb80:	bf44      	itt	mi
 800eb82:	f043 0320 	orrmi.w	r3, r3, #32
 800eb86:	6023      	strmi	r3, [r4, #0]
 800eb88:	b91d      	cbnz	r5, 800eb92 <_printf_i+0x196>
 800eb8a:	6823      	ldr	r3, [r4, #0]
 800eb8c:	f023 0320 	bic.w	r3, r3, #32
 800eb90:	6023      	str	r3, [r4, #0]
 800eb92:	2310      	movs	r3, #16
 800eb94:	e7b0      	b.n	800eaf8 <_printf_i+0xfc>
 800eb96:	6823      	ldr	r3, [r4, #0]
 800eb98:	f043 0320 	orr.w	r3, r3, #32
 800eb9c:	6023      	str	r3, [r4, #0]
 800eb9e:	2378      	movs	r3, #120	; 0x78
 800eba0:	4828      	ldr	r0, [pc, #160]	; (800ec44 <_printf_i+0x248>)
 800eba2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eba6:	e7e3      	b.n	800eb70 <_printf_i+0x174>
 800eba8:	065e      	lsls	r6, r3, #25
 800ebaa:	bf48      	it	mi
 800ebac:	b2ad      	uxthmi	r5, r5
 800ebae:	e7e6      	b.n	800eb7e <_printf_i+0x182>
 800ebb0:	4616      	mov	r6, r2
 800ebb2:	e7bb      	b.n	800eb2c <_printf_i+0x130>
 800ebb4:	680b      	ldr	r3, [r1, #0]
 800ebb6:	6826      	ldr	r6, [r4, #0]
 800ebb8:	6960      	ldr	r0, [r4, #20]
 800ebba:	1d1d      	adds	r5, r3, #4
 800ebbc:	600d      	str	r5, [r1, #0]
 800ebbe:	0635      	lsls	r5, r6, #24
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	d501      	bpl.n	800ebc8 <_printf_i+0x1cc>
 800ebc4:	6018      	str	r0, [r3, #0]
 800ebc6:	e002      	b.n	800ebce <_printf_i+0x1d2>
 800ebc8:	0671      	lsls	r1, r6, #25
 800ebca:	d5fb      	bpl.n	800ebc4 <_printf_i+0x1c8>
 800ebcc:	8018      	strh	r0, [r3, #0]
 800ebce:	2300      	movs	r3, #0
 800ebd0:	6123      	str	r3, [r4, #16]
 800ebd2:	4616      	mov	r6, r2
 800ebd4:	e7ba      	b.n	800eb4c <_printf_i+0x150>
 800ebd6:	680b      	ldr	r3, [r1, #0]
 800ebd8:	1d1a      	adds	r2, r3, #4
 800ebda:	600a      	str	r2, [r1, #0]
 800ebdc:	681e      	ldr	r6, [r3, #0]
 800ebde:	6862      	ldr	r2, [r4, #4]
 800ebe0:	2100      	movs	r1, #0
 800ebe2:	4630      	mov	r0, r6
 800ebe4:	f7f1 fb2c 	bl	8000240 <memchr>
 800ebe8:	b108      	cbz	r0, 800ebee <_printf_i+0x1f2>
 800ebea:	1b80      	subs	r0, r0, r6
 800ebec:	6060      	str	r0, [r4, #4]
 800ebee:	6863      	ldr	r3, [r4, #4]
 800ebf0:	6123      	str	r3, [r4, #16]
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebf8:	e7a8      	b.n	800eb4c <_printf_i+0x150>
 800ebfa:	6923      	ldr	r3, [r4, #16]
 800ebfc:	4632      	mov	r2, r6
 800ebfe:	4649      	mov	r1, r9
 800ec00:	4640      	mov	r0, r8
 800ec02:	47d0      	blx	sl
 800ec04:	3001      	adds	r0, #1
 800ec06:	d0ab      	beq.n	800eb60 <_printf_i+0x164>
 800ec08:	6823      	ldr	r3, [r4, #0]
 800ec0a:	079b      	lsls	r3, r3, #30
 800ec0c:	d413      	bmi.n	800ec36 <_printf_i+0x23a>
 800ec0e:	68e0      	ldr	r0, [r4, #12]
 800ec10:	9b03      	ldr	r3, [sp, #12]
 800ec12:	4298      	cmp	r0, r3
 800ec14:	bfb8      	it	lt
 800ec16:	4618      	movlt	r0, r3
 800ec18:	e7a4      	b.n	800eb64 <_printf_i+0x168>
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	4632      	mov	r2, r6
 800ec1e:	4649      	mov	r1, r9
 800ec20:	4640      	mov	r0, r8
 800ec22:	47d0      	blx	sl
 800ec24:	3001      	adds	r0, #1
 800ec26:	d09b      	beq.n	800eb60 <_printf_i+0x164>
 800ec28:	3501      	adds	r5, #1
 800ec2a:	68e3      	ldr	r3, [r4, #12]
 800ec2c:	9903      	ldr	r1, [sp, #12]
 800ec2e:	1a5b      	subs	r3, r3, r1
 800ec30:	42ab      	cmp	r3, r5
 800ec32:	dcf2      	bgt.n	800ec1a <_printf_i+0x21e>
 800ec34:	e7eb      	b.n	800ec0e <_printf_i+0x212>
 800ec36:	2500      	movs	r5, #0
 800ec38:	f104 0619 	add.w	r6, r4, #25
 800ec3c:	e7f5      	b.n	800ec2a <_printf_i+0x22e>
 800ec3e:	bf00      	nop
 800ec40:	080135dd 	.word	0x080135dd
 800ec44:	080135ee 	.word	0x080135ee

0800ec48 <_read_r>:
 800ec48:	b538      	push	{r3, r4, r5, lr}
 800ec4a:	4d07      	ldr	r5, [pc, #28]	; (800ec68 <_read_r+0x20>)
 800ec4c:	4604      	mov	r4, r0
 800ec4e:	4608      	mov	r0, r1
 800ec50:	4611      	mov	r1, r2
 800ec52:	2200      	movs	r2, #0
 800ec54:	602a      	str	r2, [r5, #0]
 800ec56:	461a      	mov	r2, r3
 800ec58:	f7fd ff52 	bl	800cb00 <_read>
 800ec5c:	1c43      	adds	r3, r0, #1
 800ec5e:	d102      	bne.n	800ec66 <_read_r+0x1e>
 800ec60:	682b      	ldr	r3, [r5, #0]
 800ec62:	b103      	cbz	r3, 800ec66 <_read_r+0x1e>
 800ec64:	6023      	str	r3, [r4, #0]
 800ec66:	bd38      	pop	{r3, r4, r5, pc}
 800ec68:	20058c44 	.word	0x20058c44

0800ec6c <_fstat_r>:
 800ec6c:	b538      	push	{r3, r4, r5, lr}
 800ec6e:	4d07      	ldr	r5, [pc, #28]	; (800ec8c <_fstat_r+0x20>)
 800ec70:	2300      	movs	r3, #0
 800ec72:	4604      	mov	r4, r0
 800ec74:	4608      	mov	r0, r1
 800ec76:	4611      	mov	r1, r2
 800ec78:	602b      	str	r3, [r5, #0]
 800ec7a:	f000 f855 	bl	800ed28 <_fstat>
 800ec7e:	1c43      	adds	r3, r0, #1
 800ec80:	d102      	bne.n	800ec88 <_fstat_r+0x1c>
 800ec82:	682b      	ldr	r3, [r5, #0]
 800ec84:	b103      	cbz	r3, 800ec88 <_fstat_r+0x1c>
 800ec86:	6023      	str	r3, [r4, #0]
 800ec88:	bd38      	pop	{r3, r4, r5, pc}
 800ec8a:	bf00      	nop
 800ec8c:	20058c44 	.word	0x20058c44

0800ec90 <_isatty_r>:
 800ec90:	b538      	push	{r3, r4, r5, lr}
 800ec92:	4d06      	ldr	r5, [pc, #24]	; (800ecac <_isatty_r+0x1c>)
 800ec94:	2300      	movs	r3, #0
 800ec96:	4604      	mov	r4, r0
 800ec98:	4608      	mov	r0, r1
 800ec9a:	602b      	str	r3, [r5, #0]
 800ec9c:	f000 f84c 	bl	800ed38 <_isatty>
 800eca0:	1c43      	adds	r3, r0, #1
 800eca2:	d102      	bne.n	800ecaa <_isatty_r+0x1a>
 800eca4:	682b      	ldr	r3, [r5, #0]
 800eca6:	b103      	cbz	r3, 800ecaa <_isatty_r+0x1a>
 800eca8:	6023      	str	r3, [r4, #0]
 800ecaa:	bd38      	pop	{r3, r4, r5, pc}
 800ecac:	20058c44 	.word	0x20058c44

0800ecb0 <sqrt>:
 800ecb0:	b508      	push	{r3, lr}
 800ecb2:	ed2d 8b04 	vpush	{d8-d9}
 800ecb6:	eeb0 8b40 	vmov.f64	d8, d0
 800ecba:	f000 f823 	bl	800ed04 <__ieee754_sqrt>
 800ecbe:	4b10      	ldr	r3, [pc, #64]	; (800ed00 <sqrt+0x50>)
 800ecc0:	f993 3000 	ldrsb.w	r3, [r3]
 800ecc4:	3301      	adds	r3, #1
 800ecc6:	d011      	beq.n	800ecec <sqrt+0x3c>
 800ecc8:	eeb4 8b48 	vcmp.f64	d8, d8
 800eccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecd0:	d60c      	bvs.n	800ecec <sqrt+0x3c>
 800ecd2:	ed9f 9b09 	vldr	d9, [pc, #36]	; 800ecf8 <sqrt+0x48>
 800ecd6:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800ecda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecde:	d505      	bpl.n	800ecec <sqrt+0x3c>
 800ece0:	f000 f814 	bl	800ed0c <__errno>
 800ece4:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800ece8:	2321      	movs	r3, #33	; 0x21
 800ecea:	6003      	str	r3, [r0, #0]
 800ecec:	ecbd 8b04 	vpop	{d8-d9}
 800ecf0:	bd08      	pop	{r3, pc}
 800ecf2:	bf00      	nop
 800ecf4:	f3af 8000 	nop.w
	...
 800ed00:	20000120 	.word	0x20000120

0800ed04 <__ieee754_sqrt>:
 800ed04:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800ed08:	4770      	bx	lr
	...

0800ed0c <__errno>:
 800ed0c:	4b01      	ldr	r3, [pc, #4]	; (800ed14 <__errno+0x8>)
 800ed0e:	6818      	ldr	r0, [r3, #0]
 800ed10:	4770      	bx	lr
 800ed12:	bf00      	nop
 800ed14:	200000bc 	.word	0x200000bc

0800ed18 <_close>:
 800ed18:	4b02      	ldr	r3, [pc, #8]	; (800ed24 <_close+0xc>)
 800ed1a:	2258      	movs	r2, #88	; 0x58
 800ed1c:	601a      	str	r2, [r3, #0]
 800ed1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed22:	4770      	bx	lr
 800ed24:	20058c44 	.word	0x20058c44

0800ed28 <_fstat>:
 800ed28:	4b02      	ldr	r3, [pc, #8]	; (800ed34 <_fstat+0xc>)
 800ed2a:	2258      	movs	r2, #88	; 0x58
 800ed2c:	601a      	str	r2, [r3, #0]
 800ed2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed32:	4770      	bx	lr
 800ed34:	20058c44 	.word	0x20058c44

0800ed38 <_isatty>:
 800ed38:	4b02      	ldr	r3, [pc, #8]	; (800ed44 <_isatty+0xc>)
 800ed3a:	2258      	movs	r2, #88	; 0x58
 800ed3c:	601a      	str	r2, [r3, #0]
 800ed3e:	2000      	movs	r0, #0
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop
 800ed44:	20058c44 	.word	0x20058c44

0800ed48 <_lseek>:
 800ed48:	4b02      	ldr	r3, [pc, #8]	; (800ed54 <_lseek+0xc>)
 800ed4a:	2258      	movs	r2, #88	; 0x58
 800ed4c:	601a      	str	r2, [r3, #0]
 800ed4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed52:	4770      	bx	lr
 800ed54:	20058c44 	.word	0x20058c44

0800ed58 <_sbrk>:
 800ed58:	4b04      	ldr	r3, [pc, #16]	; (800ed6c <_sbrk+0x14>)
 800ed5a:	6819      	ldr	r1, [r3, #0]
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	b909      	cbnz	r1, 800ed64 <_sbrk+0xc>
 800ed60:	4903      	ldr	r1, [pc, #12]	; (800ed70 <_sbrk+0x18>)
 800ed62:	6019      	str	r1, [r3, #0]
 800ed64:	6818      	ldr	r0, [r3, #0]
 800ed66:	4402      	add	r2, r0
 800ed68:	601a      	str	r2, [r3, #0]
 800ed6a:	4770      	bx	lr
 800ed6c:	20001794 	.word	0x20001794
 800ed70:	20058c48 	.word	0x20058c48

0800ed74 <_init>:
 800ed74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed76:	bf00      	nop
 800ed78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed7a:	bc08      	pop	{r3}
 800ed7c:	469e      	mov	lr, r3
 800ed7e:	4770      	bx	lr

0800ed80 <_fini>:
 800ed80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed82:	bf00      	nop
 800ed84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed86:	bc08      	pop	{r3}
 800ed88:	469e      	mov	lr, r3
 800ed8a:	4770      	bx	lr
