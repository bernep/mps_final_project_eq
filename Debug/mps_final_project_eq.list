
mps_final_project_eq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008574  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b0  08008774  08008774  00018774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009024  08009024  00019024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009028  08009028  00019028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000bc  20000000  0800902c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00048570  200000bc  080090e8  000200bc  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2004862c  080090e8  0002862c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  9 .debug_info   000420ab  00000000  00000000  000200ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000063fc  00000000  00000000  00062195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0001c809  00000000  00000000  00068591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c20  00000000  00000000  00084da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001ab0  00000000  00000000  000869c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036561  00000000  00000000  00088470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00036785  00000000  00000000  000be9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001318f2  00000000  00000000  000f5156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00226a48  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000582c  00000000  00000000  00226a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         0000006c  00000000  00000000  0022c2c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000e3  00000000  00000000  0022c334  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000bc 	.word	0x200000bc
 800021c:	00000000 	.word	0x00000000
 8000220:	0800875c 	.word	0x0800875c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000c0 	.word	0x200000c0
 800023c:	0800875c 	.word	0x0800875c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80002e0:	b508      	push	{r3, lr}
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80002e2:	f000 feb9 	bl	8001058 <AUDIO_IO_Write>
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
}
 80002e6:	2000      	movs	r0, #0
 80002e8:	bd08      	pop	{r3, pc}
	...

080002ec <wm8994_SetMute>:
{
 80002ec:	b538      	push	{r3, r4, r5, lr}
 80002ee:	4603      	mov	r3, r0
  if (outputEnabled != 0)
 80002f0:	4a13      	ldr	r2, [pc, #76]	; (8000340 <wm8994_SetMute+0x54>)
 80002f2:	6810      	ldr	r0, [r2, #0]
 80002f4:	b180      	cbz	r0, 8000318 <wm8994_SetMute+0x2c>
    if(Cmd == AUDIO_MUTE_ON)
 80002f6:	2901      	cmp	r1, #1
 80002f8:	d00f      	beq.n	800031a <wm8994_SetMute+0x2e>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80002fa:	b2dd      	uxtb	r5, r3
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000302:	4628      	mov	r0, r5
 8000304:	f7ff ffec 	bl	80002e0 <CODEC_IO_Write>
 8000308:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 800030a:	2200      	movs	r2, #0
 800030c:	f240 4122 	movw	r1, #1058	; 0x422
 8000310:	4628      	mov	r0, r5
 8000312:	f7ff ffe5 	bl	80002e0 <CODEC_IO_Write>
 8000316:	4420      	add	r0, r4
}
 8000318:	bd38      	pop	{r3, r4, r5, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800031a:	b2dd      	uxtb	r5, r3
 800031c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000320:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000324:	4628      	mov	r0, r5
 8000326:	f7ff ffdb 	bl	80002e0 <CODEC_IO_Write>
 800032a:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800032c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000330:	f240 4122 	movw	r1, #1058	; 0x422
 8000334:	4628      	mov	r0, r5
 8000336:	f7ff ffd3 	bl	80002e0 <CODEC_IO_Write>
 800033a:	4420      	add	r0, r4
 800033c:	e7ec      	b.n	8000318 <wm8994_SetMute+0x2c>
 800033e:	bf00      	nop
 8000340:	200000d8 	.word	0x200000d8

08000344 <wm8994_Play>:
{
 8000344:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000346:	2100      	movs	r1, #0
 8000348:	f7ff ffd0 	bl	80002ec <wm8994_SetMute>
}
 800034c:	bd08      	pop	{r3, pc}

0800034e <wm8994_Resume>:
{
 800034e:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000350:	2100      	movs	r1, #0
 8000352:	f7ff ffcb 	bl	80002ec <wm8994_SetMute>
}
 8000356:	bd08      	pop	{r3, pc}

08000358 <wm8994_Pause>:
{  
 8000358:	b538      	push	{r3, r4, r5, lr}
 800035a:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800035c:	2101      	movs	r1, #1
 800035e:	f7ff ffc5 	bl	80002ec <wm8994_SetMute>
 8000362:	4604      	mov	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8000364:	2201      	movs	r2, #1
 8000366:	2102      	movs	r1, #2
 8000368:	b2e8      	uxtb	r0, r5
 800036a:	f7ff ffb9 	bl	80002e0 <CODEC_IO_Write>
}
 800036e:	4420      	add	r0, r4
 8000370:	bd38      	pop	{r3, r4, r5, pc}
	...

08000374 <wm8994_Stop>:
{
 8000374:	b570      	push	{r4, r5, r6, lr}
  if (outputEnabled != 0)
 8000376:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <wm8994_Stop+0x78>)
 8000378:	681c      	ldr	r4, [r3, #0]
 800037a:	b90c      	cbnz	r4, 8000380 <wm8994_Stop+0xc>
}
 800037c:	4620      	mov	r0, r4
 800037e:	bd70      	pop	{r4, r5, r6, pc}
 8000380:	4605      	mov	r5, r0
 8000382:	460e      	mov	r6, r1
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000384:	2101      	movs	r1, #1
 8000386:	f7ff ffb1 	bl	80002ec <wm8994_SetMute>
 800038a:	4604      	mov	r4, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 800038c:	2e02      	cmp	r6, #2
 800038e:	d0f5      	beq.n	800037c <wm8994_Stop+0x8>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8000390:	b2ed      	uxtb	r5, r5
 8000392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000396:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800039a:	4628      	mov	r0, r5
 800039c:	f7ff ffa0 	bl	80002e0 <CODEC_IO_Write>
 80003a0:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80003a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a6:	f240 4122 	movw	r1, #1058	; 0x422
 80003aa:	4628      	mov	r0, r5
 80003ac:	f7ff ff98 	bl	80002e0 <CODEC_IO_Write>
 80003b0:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80003b2:	2200      	movs	r2, #0
 80003b4:	212d      	movs	r1, #45	; 0x2d
 80003b6:	4628      	mov	r0, r5
 80003b8:	f7ff ff92 	bl	80002e0 <CODEC_IO_Write>
 80003bc:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 80003be:	2200      	movs	r2, #0
 80003c0:	212e      	movs	r1, #46	; 0x2e
 80003c2:	4628      	mov	r0, r5
 80003c4:	f7ff ff8c 	bl	80002e0 <CODEC_IO_Write>
 80003c8:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2105      	movs	r1, #5
 80003ce:	4628      	mov	r0, r5
 80003d0:	f7ff ff86 	bl	80002e0 <CODEC_IO_Write>
 80003d4:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80003d6:	2200      	movs	r2, #0
 80003d8:	4611      	mov	r1, r2
 80003da:	4628      	mov	r0, r5
 80003dc:	f7ff ff80 	bl	80002e0 <CODEC_IO_Write>
 80003e0:	4404      	add	r4, r0
      outputEnabled = 0;
 80003e2:	4b02      	ldr	r3, [pc, #8]	; (80003ec <wm8994_Stop+0x78>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
  return counter;
 80003e8:	e7c8      	b.n	800037c <wm8994_Stop+0x8>
 80003ea:	bf00      	nop
 80003ec:	200000d8 	.word	0x200000d8

080003f0 <wm8994_SetVolume>:
{
 80003f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003f4:	4606      	mov	r6, r0
 80003f6:	460c      	mov	r4, r1
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80003f8:	2964      	cmp	r1, #100	; 0x64
 80003fa:	d809      	bhi.n	8000410 <wm8994_SetVolume+0x20>
 80003fc:	ebc1 1381 	rsb	r3, r1, r1, lsl #6
 8000400:	4a46      	ldr	r2, [pc, #280]	; (800051c <wm8994_SetVolume+0x12c>)
 8000402:	fb82 1203 	smull	r1, r2, r2, r3
 8000406:	17df      	asrs	r7, r3, #31
 8000408:	ebc7 1762 	rsb	r7, r7, r2, asr #5
 800040c:	b2ff      	uxtb	r7, r7
 800040e:	e000      	b.n	8000412 <wm8994_SetVolume+0x22>
 8000410:	2764      	movs	r7, #100	; 0x64
  if (outputEnabled != 0)
 8000412:	4b43      	ldr	r3, [pc, #268]	; (8000520 <wm8994_SetVolume+0x130>)
 8000414:	681d      	ldr	r5, [r3, #0]
 8000416:	b13d      	cbz	r5, 8000428 <wm8994_SetVolume+0x38>
    if(convertedvol > 0x3E)
 8000418:	2f3e      	cmp	r7, #62	; 0x3e
 800041a:	d816      	bhi.n	800044a <wm8994_SetVolume+0x5a>
    else if (Volume == 0)
 800041c:	bbc4      	cbnz	r4, 8000490 <wm8994_SetVolume+0xa0>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800041e:	2101      	movs	r1, #1
 8000420:	4630      	mov	r0, r6
 8000422:	f7ff ff63 	bl	80002ec <wm8994_SetMute>
 8000426:	4605      	mov	r5, r0
  if (inputEnabled != 0)
 8000428:	4b3d      	ldr	r3, [pc, #244]	; (8000520 <wm8994_SetVolume+0x130>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d071      	beq.n	8000514 <wm8994_SetVolume+0x124>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8000430:	2c63      	cmp	r4, #99	; 0x63
 8000432:	d84f      	bhi.n	80004d4 <wm8994_SetVolume+0xe4>
 8000434:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8000438:	0124      	lsls	r4, r4, #4
 800043a:	4b38      	ldr	r3, [pc, #224]	; (800051c <wm8994_SetVolume+0x12c>)
 800043c:	fb83 2304 	smull	r2, r3, r3, r4
 8000440:	17e4      	asrs	r4, r4, #31
 8000442:	ebc4 1463 	rsb	r4, r4, r3, asr #5
 8000446:	b2e4      	uxtb	r4, r4
 8000448:	e045      	b.n	80004d6 <wm8994_SetVolume+0xe6>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800044a:	2100      	movs	r1, #0
 800044c:	4630      	mov	r0, r6
 800044e:	f7ff ff4d 	bl	80002ec <wm8994_SetMute>
 8000452:	4605      	mov	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8000454:	b2f7      	uxtb	r7, r6
 8000456:	f240 127f 	movw	r2, #383	; 0x17f
 800045a:	211c      	movs	r1, #28
 800045c:	4638      	mov	r0, r7
 800045e:	f7ff ff3f 	bl	80002e0 <CODEC_IO_Write>
 8000462:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8000464:	f240 127f 	movw	r2, #383	; 0x17f
 8000468:	211d      	movs	r1, #29
 800046a:	4638      	mov	r0, r7
 800046c:	f7ff ff38 	bl	80002e0 <CODEC_IO_Write>
 8000470:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8000472:	f240 127f 	movw	r2, #383	; 0x17f
 8000476:	2126      	movs	r1, #38	; 0x26
 8000478:	4638      	mov	r0, r7
 800047a:	f7ff ff31 	bl	80002e0 <CODEC_IO_Write>
 800047e:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8000480:	f240 127f 	movw	r2, #383	; 0x17f
 8000484:	2127      	movs	r1, #39	; 0x27
 8000486:	4638      	mov	r0, r7
 8000488:	f7ff ff2a 	bl	80002e0 <CODEC_IO_Write>
 800048c:	4405      	add	r5, r0
 800048e:	e7cb      	b.n	8000428 <wm8994_SetVolume+0x38>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000490:	2100      	movs	r1, #0
 8000492:	4630      	mov	r0, r6
 8000494:	f7ff ff2a 	bl	80002ec <wm8994_SetMute>
 8000498:	4605      	mov	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800049a:	fa5f f886 	uxtb.w	r8, r6
 800049e:	f447 77a0 	orr.w	r7, r7, #320	; 0x140
 80004a2:	463a      	mov	r2, r7
 80004a4:	211c      	movs	r1, #28
 80004a6:	4640      	mov	r0, r8
 80004a8:	f7ff ff1a 	bl	80002e0 <CODEC_IO_Write>
 80004ac:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80004ae:	463a      	mov	r2, r7
 80004b0:	211d      	movs	r1, #29
 80004b2:	4640      	mov	r0, r8
 80004b4:	f7ff ff14 	bl	80002e0 <CODEC_IO_Write>
 80004b8:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 80004ba:	463a      	mov	r2, r7
 80004bc:	2126      	movs	r1, #38	; 0x26
 80004be:	4640      	mov	r0, r8
 80004c0:	f7ff ff0e 	bl	80002e0 <CODEC_IO_Write>
 80004c4:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80004c6:	463a      	mov	r2, r7
 80004c8:	2127      	movs	r1, #39	; 0x27
 80004ca:	4640      	mov	r0, r8
 80004cc:	f7ff ff08 	bl	80002e0 <CODEC_IO_Write>
 80004d0:	4405      	add	r5, r0
 80004d2:	e7a9      	b.n	8000428 <wm8994_SetVolume+0x38>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80004d4:	24ef      	movs	r4, #239	; 0xef
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80004d6:	b2f6      	uxtb	r6, r6
 80004d8:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80004dc:	4622      	mov	r2, r4
 80004de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e2:	4630      	mov	r0, r6
 80004e4:	f7ff fefc 	bl	80002e0 <CODEC_IO_Write>
 80004e8:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80004ea:	4622      	mov	r2, r4
 80004ec:	f240 4101 	movw	r1, #1025	; 0x401
 80004f0:	4630      	mov	r0, r6
 80004f2:	f7ff fef5 	bl	80002e0 <CODEC_IO_Write>
 80004f6:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80004f8:	4622      	mov	r2, r4
 80004fa:	f240 4104 	movw	r1, #1028	; 0x404
 80004fe:	4630      	mov	r0, r6
 8000500:	f7ff feee 	bl	80002e0 <CODEC_IO_Write>
 8000504:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8000506:	4622      	mov	r2, r4
 8000508:	f240 4105 	movw	r1, #1029	; 0x405
 800050c:	4630      	mov	r0, r6
 800050e:	f7ff fee7 	bl	80002e0 <CODEC_IO_Write>
 8000512:	4405      	add	r5, r0
}
 8000514:	4628      	mov	r0, r5
 8000516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800051a:	bf00      	nop
 800051c:	51eb851f 	.word	0x51eb851f
 8000520:	200000d8 	.word	0x200000d8

08000524 <wm8994_Init>:
{
 8000524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000528:	4680      	mov	r8, r0
 800052a:	4691      	mov	r9, r2
 800052c:	469a      	mov	sl, r3
  uint16_t output_device = OutputInputDevice & 0xFF;
 800052e:	b2cf      	uxtb	r7, r1
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8000530:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
  AUDIO_IO_Init();
 8000534:	f000 fd86 	bl	8001044 <AUDIO_IO_Init>
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8000538:	fa5f f488 	uxtb.w	r4, r8
 800053c:	2203      	movs	r2, #3
 800053e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000542:	4620      	mov	r0, r4
 8000544:	f7ff fecc 	bl	80002e0 <CODEC_IO_Write>
 8000548:	4606      	mov	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 800054a:	2200      	movs	r2, #0
 800054c:	f640 0117 	movw	r1, #2071	; 0x817
 8000550:	4620      	mov	r0, r4
 8000552:	f7ff fec5 	bl	80002e0 <CODEC_IO_Write>
 8000556:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800055e:	4620      	mov	r0, r4
 8000560:	f7ff febe 	bl	80002e0 <CODEC_IO_Write>
 8000564:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8000566:	226c      	movs	r2, #108	; 0x6c
 8000568:	2139      	movs	r1, #57	; 0x39
 800056a:	4620      	mov	r0, r4
 800056c:	f7ff feb8 	bl	80002e0 <CODEC_IO_Write>
 8000570:	4406      	add	r6, r0
  if (input_device > 0)
 8000572:	b3c5      	cbz	r5, 80005e6 <wm8994_Init+0xc2>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8000574:	2213      	movs	r2, #19
 8000576:	2101      	movs	r1, #1
 8000578:	4620      	mov	r0, r4
 800057a:	f7ff feb1 	bl	80002e0 <CODEC_IO_Write>
 800057e:	4406      	add	r6, r0
  AUDIO_IO_Delay(50);
 8000580:	2032      	movs	r0, #50	; 0x32
 8000582:	f000 fd9d 	bl	80010c0 <AUDIO_IO_Delay>
  if (output_device > 0)
 8000586:	2f00      	cmp	r7, #0
 8000588:	f000 80c7 	beq.w	800071a <wm8994_Init+0x1f6>
    outputEnabled = 1;
 800058c:	4be6      	ldr	r3, [pc, #920]	; (8000928 <wm8994_Init+0x404>)
 800058e:	2201      	movs	r2, #1
 8000590:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8000592:	2f02      	cmp	r7, #2
 8000594:	d052      	beq.n	800063c <wm8994_Init+0x118>
 8000596:	2f03      	cmp	r7, #3
 8000598:	d074      	beq.n	8000684 <wm8994_Init+0x160>
 800059a:	4297      	cmp	r7, r2
 800059c:	d02a      	beq.n	80005f4 <wm8994_Init+0xd0>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800059e:	f240 3203 	movw	r2, #771	; 0x303
 80005a2:	2105      	movs	r1, #5
 80005a4:	4620      	mov	r0, r4
 80005a6:	f7ff fe9b 	bl	80002e0 <CODEC_IO_Write>
 80005aa:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f240 6101 	movw	r1, #1537	; 0x601
 80005b2:	4620      	mov	r0, r4
 80005b4:	f7ff fe94 	bl	80002e0 <CODEC_IO_Write>
 80005b8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80005ba:	2201      	movs	r2, #1
 80005bc:	f240 6102 	movw	r1, #1538	; 0x602
 80005c0:	4620      	mov	r0, r4
 80005c2:	f7ff fe8d 	bl	80002e0 <CODEC_IO_Write>
 80005c6:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f240 6104 	movw	r1, #1540	; 0x604
 80005ce:	4620      	mov	r0, r4
 80005d0:	f7ff fe86 	bl	80002e0 <CODEC_IO_Write>
 80005d4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f240 6105 	movw	r1, #1541	; 0x605
 80005dc:	4620      	mov	r0, r4
 80005de:	f7ff fe7f 	bl	80002e0 <CODEC_IO_Write>
 80005e2:	4406      	add	r6, r0
      break;
 80005e4:	e09c      	b.n	8000720 <wm8994_Init+0x1fc>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80005e6:	2203      	movs	r2, #3
 80005e8:	2101      	movs	r1, #1
 80005ea:	4620      	mov	r0, r4
 80005ec:	f7ff fe78 	bl	80002e0 <CODEC_IO_Write>
 80005f0:	4406      	add	r6, r0
 80005f2:	e7c5      	b.n	8000580 <wm8994_Init+0x5c>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80005f4:	f640 420c 	movw	r2, #3084	; 0xc0c
 80005f8:	2105      	movs	r1, #5
 80005fa:	4620      	mov	r0, r4
 80005fc:	f7ff fe70 	bl	80002e0 <CODEC_IO_Write>
 8000600:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8000602:	2200      	movs	r2, #0
 8000604:	f240 6101 	movw	r1, #1537	; 0x601
 8000608:	4620      	mov	r0, r4
 800060a:	f7ff fe69 	bl	80002e0 <CODEC_IO_Write>
 800060e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8000610:	2200      	movs	r2, #0
 8000612:	f240 6102 	movw	r1, #1538	; 0x602
 8000616:	4620      	mov	r0, r4
 8000618:	f7ff fe62 	bl	80002e0 <CODEC_IO_Write>
 800061c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800061e:	2202      	movs	r2, #2
 8000620:	f240 6104 	movw	r1, #1540	; 0x604
 8000624:	4620      	mov	r0, r4
 8000626:	f7ff fe5b 	bl	80002e0 <CODEC_IO_Write>
 800062a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800062c:	2202      	movs	r2, #2
 800062e:	f240 6105 	movw	r1, #1541	; 0x605
 8000632:	4620      	mov	r0, r4
 8000634:	f7ff fe54 	bl	80002e0 <CODEC_IO_Write>
 8000638:	4406      	add	r6, r0
      break;
 800063a:	e071      	b.n	8000720 <wm8994_Init+0x1fc>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800063c:	f240 3203 	movw	r2, #771	; 0x303
 8000640:	2105      	movs	r1, #5
 8000642:	4620      	mov	r0, r4
 8000644:	f7ff fe4c 	bl	80002e0 <CODEC_IO_Write>
 8000648:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800064a:	2201      	movs	r2, #1
 800064c:	f240 6101 	movw	r1, #1537	; 0x601
 8000650:	4620      	mov	r0, r4
 8000652:	f7ff fe45 	bl	80002e0 <CODEC_IO_Write>
 8000656:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000658:	2201      	movs	r2, #1
 800065a:	f240 6102 	movw	r1, #1538	; 0x602
 800065e:	4620      	mov	r0, r4
 8000660:	f7ff fe3e 	bl	80002e0 <CODEC_IO_Write>
 8000664:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000666:	2200      	movs	r2, #0
 8000668:	f240 6104 	movw	r1, #1540	; 0x604
 800066c:	4620      	mov	r0, r4
 800066e:	f7ff fe37 	bl	80002e0 <CODEC_IO_Write>
 8000672:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000674:	2200      	movs	r2, #0
 8000676:	f240 6105 	movw	r1, #1541	; 0x605
 800067a:	4620      	mov	r0, r4
 800067c:	f7ff fe30 	bl	80002e0 <CODEC_IO_Write>
 8000680:	4406      	add	r6, r0
      break;
 8000682:	e04d      	b.n	8000720 <wm8994_Init+0x1fc>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000684:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000688:	d023      	beq.n	80006d2 <wm8994_Init+0x1ae>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800068a:	f640 720f 	movw	r2, #3855	; 0xf0f
 800068e:	2105      	movs	r1, #5
 8000690:	4620      	mov	r0, r4
 8000692:	f7ff fe25 	bl	80002e0 <CODEC_IO_Write>
 8000696:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000698:	2201      	movs	r2, #1
 800069a:	f240 6101 	movw	r1, #1537	; 0x601
 800069e:	4620      	mov	r0, r4
 80006a0:	f7ff fe1e 	bl	80002e0 <CODEC_IO_Write>
 80006a4:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80006a6:	2201      	movs	r2, #1
 80006a8:	f240 6102 	movw	r1, #1538	; 0x602
 80006ac:	4620      	mov	r0, r4
 80006ae:	f7ff fe17 	bl	80002e0 <CODEC_IO_Write>
 80006b2:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80006b4:	2202      	movs	r2, #2
 80006b6:	f240 6104 	movw	r1, #1540	; 0x604
 80006ba:	4620      	mov	r0, r4
 80006bc:	f7ff fe10 	bl	80002e0 <CODEC_IO_Write>
 80006c0:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80006c2:	2202      	movs	r2, #2
 80006c4:	f240 6105 	movw	r1, #1541	; 0x605
 80006c8:	4620      	mov	r0, r4
 80006ca:	f7ff fe09 	bl	80002e0 <CODEC_IO_Write>
 80006ce:	4406      	add	r6, r0
 80006d0:	e026      	b.n	8000720 <wm8994_Init+0x1fc>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80006d2:	f640 720f 	movw	r2, #3855	; 0xf0f
 80006d6:	2105      	movs	r1, #5
 80006d8:	4620      	mov	r0, r4
 80006da:	f7ff fe01 	bl	80002e0 <CODEC_IO_Write>
 80006de:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80006e0:	2203      	movs	r2, #3
 80006e2:	f240 6101 	movw	r1, #1537	; 0x601
 80006e6:	4620      	mov	r0, r4
 80006e8:	f7ff fdfa 	bl	80002e0 <CODEC_IO_Write>
 80006ec:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80006ee:	2203      	movs	r2, #3
 80006f0:	f240 6102 	movw	r1, #1538	; 0x602
 80006f4:	4620      	mov	r0, r4
 80006f6:	f7ff fdf3 	bl	80002e0 <CODEC_IO_Write>
 80006fa:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80006fc:	2203      	movs	r2, #3
 80006fe:	f240 6104 	movw	r1, #1540	; 0x604
 8000702:	4620      	mov	r0, r4
 8000704:	f7ff fdec 	bl	80002e0 <CODEC_IO_Write>
 8000708:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 800070a:	2203      	movs	r2, #3
 800070c:	f240 6105 	movw	r1, #1541	; 0x605
 8000710:	4620      	mov	r0, r4
 8000712:	f7ff fde5 	bl	80002e0 <CODEC_IO_Write>
 8000716:	4406      	add	r6, r0
 8000718:	e002      	b.n	8000720 <wm8994_Init+0x1fc>
    outputEnabled = 0;
 800071a:	4b83      	ldr	r3, [pc, #524]	; (8000928 <wm8994_Init+0x404>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
  if (input_device > 0)
 8000720:	2d00      	cmp	r5, #0
 8000722:	f000 80e8 	beq.w	80008f6 <wm8994_Init+0x3d2>
    inputEnabled = 1;
 8000726:	4b80      	ldr	r3, [pc, #512]	; (8000928 <wm8994_Init+0x404>)
 8000728:	2201      	movs	r2, #1
 800072a:	605a      	str	r2, [r3, #4]
    switch (input_device)
 800072c:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8000730:	d077      	beq.n	8000822 <wm8994_Init+0x2fe>
 8000732:	d832      	bhi.n	800079a <wm8994_Init+0x276>
 8000734:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000738:	f000 80b0 	beq.w	800089c <wm8994_Init+0x378>
 800073c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8000740:	f040 80d7 	bne.w	80008f2 <wm8994_Init+0x3ce>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8000744:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8000748:	2104      	movs	r1, #4
 800074a:	4620      	mov	r0, r4
 800074c:	f7ff fdc8 	bl	80002e0 <CODEC_IO_Write>
 8000750:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8000752:	22db      	movs	r2, #219	; 0xdb
 8000754:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000758:	4620      	mov	r0, r4
 800075a:	f7ff fdc1 	bl	80002e0 <CODEC_IO_Write>
 800075e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8000760:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000764:	2102      	movs	r1, #2
 8000766:	4620      	mov	r0, r4
 8000768:	f7ff fdba 	bl	80002e0 <CODEC_IO_Write>
 800076c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800076e:	2202      	movs	r2, #2
 8000770:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000774:	4620      	mov	r0, r4
 8000776:	f7ff fdb3 	bl	80002e0 <CODEC_IO_Write>
 800077a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800077c:	2202      	movs	r2, #2
 800077e:	f240 6109 	movw	r1, #1545	; 0x609
 8000782:	4620      	mov	r0, r4
 8000784:	f7ff fdac 	bl	80002e0 <CODEC_IO_Write>
 8000788:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800078a:	220e      	movs	r2, #14
 800078c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000790:	4620      	mov	r0, r4
 8000792:	f7ff fda5 	bl	80002e0 <CODEC_IO_Write>
 8000796:	4406      	add	r6, r0
      break;
 8000798:	e0b0      	b.n	80008fc <wm8994_Init+0x3d8>
    switch (input_device)
 800079a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800079e:	f040 80a8 	bne.w	80008f2 <wm8994_Init+0x3ce>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80007a2:	f640 723c 	movw	r2, #3900	; 0xf3c
 80007a6:	2104      	movs	r1, #4
 80007a8:	4620      	mov	r0, r4
 80007aa:	f7ff fd99 	bl	80002e0 <CODEC_IO_Write>
 80007ae:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80007b0:	22db      	movs	r2, #219	; 0xdb
 80007b2:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80007b6:	4620      	mov	r0, r4
 80007b8:	f7ff fd92 	bl	80002e0 <CODEC_IO_Write>
 80007bc:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80007be:	22db      	movs	r2, #219	; 0xdb
 80007c0:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80007c4:	4620      	mov	r0, r4
 80007c6:	f7ff fd8b 	bl	80002e0 <CODEC_IO_Write>
 80007ca:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80007cc:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80007d0:	2102      	movs	r1, #2
 80007d2:	4620      	mov	r0, r4
 80007d4:	f7ff fd84 	bl	80002e0 <CODEC_IO_Write>
 80007d8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80007da:	2202      	movs	r2, #2
 80007dc:	f240 6106 	movw	r1, #1542	; 0x606
 80007e0:	4620      	mov	r0, r4
 80007e2:	f7ff fd7d 	bl	80002e0 <CODEC_IO_Write>
 80007e6:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80007e8:	2202      	movs	r2, #2
 80007ea:	f240 6107 	movw	r1, #1543	; 0x607
 80007ee:	4620      	mov	r0, r4
 80007f0:	f7ff fd76 	bl	80002e0 <CODEC_IO_Write>
 80007f4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80007f6:	2202      	movs	r2, #2
 80007f8:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80007fc:	4620      	mov	r0, r4
 80007fe:	f7ff fd6f 	bl	80002e0 <CODEC_IO_Write>
 8000802:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8000804:	2202      	movs	r2, #2
 8000806:	f240 6109 	movw	r1, #1545	; 0x609
 800080a:	4620      	mov	r0, r4
 800080c:	f7ff fd68 	bl	80002e0 <CODEC_IO_Write>
 8000810:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8000812:	220d      	movs	r2, #13
 8000814:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000818:	4620      	mov	r0, r4
 800081a:	f7ff fd61 	bl	80002e0 <CODEC_IO_Write>
 800081e:	4406      	add	r6, r0
      break;    
 8000820:	e06c      	b.n	80008fc <wm8994_Init+0x3d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8000822:	2211      	movs	r2, #17
 8000824:	2128      	movs	r1, #40	; 0x28
 8000826:	4620      	mov	r0, r4
 8000828:	f7ff fd5a 	bl	80002e0 <CODEC_IO_Write>
 800082c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 800082e:	2220      	movs	r2, #32
 8000830:	2129      	movs	r1, #41	; 0x29
 8000832:	4620      	mov	r0, r4
 8000834:	f7ff fd54 	bl	80002e0 <CODEC_IO_Write>
 8000838:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 800083a:	2220      	movs	r2, #32
 800083c:	212a      	movs	r1, #42	; 0x2a
 800083e:	4620      	mov	r0, r4
 8000840:	f7ff fd4e 	bl	80002e0 <CODEC_IO_Write>
 8000844:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8000846:	f240 3203 	movw	r2, #771	; 0x303
 800084a:	2104      	movs	r1, #4
 800084c:	4620      	mov	r0, r4
 800084e:	f7ff fd47 	bl	80002e0 <CODEC_IO_Write>
 8000852:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8000854:	22db      	movs	r2, #219	; 0xdb
 8000856:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800085a:	4620      	mov	r0, r4
 800085c:	f7ff fd40 	bl	80002e0 <CODEC_IO_Write>
 8000860:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8000862:	f246 3250 	movw	r2, #25424	; 0x6350
 8000866:	2102      	movs	r1, #2
 8000868:	4620      	mov	r0, r4
 800086a:	f7ff fd39 	bl	80002e0 <CODEC_IO_Write>
 800086e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8000870:	2202      	movs	r2, #2
 8000872:	f240 6106 	movw	r1, #1542	; 0x606
 8000876:	4620      	mov	r0, r4
 8000878:	f7ff fd32 	bl	80002e0 <CODEC_IO_Write>
 800087c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800087e:	2202      	movs	r2, #2
 8000880:	f240 6107 	movw	r1, #1543	; 0x607
 8000884:	4620      	mov	r0, r4
 8000886:	f7ff fd2b 	bl	80002e0 <CODEC_IO_Write>
 800088a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800088c:	220d      	movs	r2, #13
 800088e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000892:	4620      	mov	r0, r4
 8000894:	f7ff fd24 	bl	80002e0 <CODEC_IO_Write>
 8000898:	4406      	add	r6, r0
      break;
 800089a:	e02f      	b.n	80008fc <wm8994_Init+0x3d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 800089c:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80008a0:	2104      	movs	r1, #4
 80008a2:	4620      	mov	r0, r4
 80008a4:	f7ff fd1c 	bl	80002e0 <CODEC_IO_Write>
 80008a8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80008aa:	22db      	movs	r2, #219	; 0xdb
 80008ac:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80008b0:	4620      	mov	r0, r4
 80008b2:	f7ff fd15 	bl	80002e0 <CODEC_IO_Write>
 80008b6:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80008b8:	f246 3250 	movw	r2, #25424	; 0x6350
 80008bc:	2102      	movs	r1, #2
 80008be:	4620      	mov	r0, r4
 80008c0:	f7ff fd0e 	bl	80002e0 <CODEC_IO_Write>
 80008c4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80008c6:	2202      	movs	r2, #2
 80008c8:	f240 6106 	movw	r1, #1542	; 0x606
 80008cc:	4620      	mov	r0, r4
 80008ce:	f7ff fd07 	bl	80002e0 <CODEC_IO_Write>
 80008d2:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80008d4:	2202      	movs	r2, #2
 80008d6:	f240 6107 	movw	r1, #1543	; 0x607
 80008da:	4620      	mov	r0, r4
 80008dc:	f7ff fd00 	bl	80002e0 <CODEC_IO_Write>
 80008e0:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80008e2:	220d      	movs	r2, #13
 80008e4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80008e8:	4620      	mov	r0, r4
 80008ea:	f7ff fcf9 	bl	80002e0 <CODEC_IO_Write>
 80008ee:	4406      	add	r6, r0
      break; 
 80008f0:	e004      	b.n	80008fc <wm8994_Init+0x3d8>
      counter++;
 80008f2:	3601      	adds	r6, #1
      break;
 80008f4:	e002      	b.n	80008fc <wm8994_Init+0x3d8>
    inputEnabled = 0;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <wm8994_Init+0x404>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
  switch (AudioFreq)
 80008fc:	f5ba 4ffa 	cmp.w	sl, #32000	; 0x7d00
 8000900:	f000 8089 	beq.w	8000a16 <wm8994_Init+0x4f2>
 8000904:	d821      	bhi.n	800094a <wm8994_Init+0x426>
 8000906:	f5ba 5f7a 	cmp.w	sl, #16000	; 0x3e80
 800090a:	d07c      	beq.n	8000a06 <wm8994_Init+0x4e2>
 800090c:	d90e      	bls.n	800092c <wm8994_Init+0x408>
 800090e:	f245 6322 	movw	r3, #22050	; 0x5622
 8000912:	459a      	cmp	sl, r3
 8000914:	f040 808f 	bne.w	8000a36 <wm8994_Init+0x512>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8000918:	2243      	movs	r2, #67	; 0x43
 800091a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800091e:	4620      	mov	r0, r4
 8000920:	f7ff fcde 	bl	80002e0 <CODEC_IO_Write>
 8000924:	4406      	add	r6, r0
    break;
 8000926:	e032      	b.n	800098e <wm8994_Init+0x46a>
 8000928:	200000d8 	.word	0x200000d8
  switch (AudioFreq)
 800092c:	f5ba 5ffa 	cmp.w	sl, #8000	; 0x1f40
 8000930:	d026      	beq.n	8000980 <wm8994_Init+0x45c>
 8000932:	f642 3311 	movw	r3, #11025	; 0x2b11
 8000936:	459a      	cmp	sl, r3
 8000938:	d17d      	bne.n	8000a36 <wm8994_Init+0x512>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800093a:	2213      	movs	r2, #19
 800093c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000940:	4620      	mov	r0, r4
 8000942:	f7ff fccd 	bl	80002e0 <CODEC_IO_Write>
 8000946:	4406      	add	r6, r0
    break;
 8000948:	e021      	b.n	800098e <wm8994_Init+0x46a>
  switch (AudioFreq)
 800094a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800094e:	459a      	cmp	sl, r3
 8000950:	d069      	beq.n	8000a26 <wm8994_Init+0x502>
 8000952:	4bb5      	ldr	r3, [pc, #724]	; (8000c28 <wm8994_Init+0x704>)
 8000954:	459a      	cmp	sl, r3
 8000956:	d107      	bne.n	8000968 <wm8994_Init+0x444>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8000958:	22a3      	movs	r2, #163	; 0xa3
 800095a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800095e:	4620      	mov	r0, r4
 8000960:	f7ff fcbe 	bl	80002e0 <CODEC_IO_Write>
 8000964:	4406      	add	r6, r0
    break;
 8000966:	e012      	b.n	800098e <wm8994_Init+0x46a>
  switch (AudioFreq)
 8000968:	f64a 4344 	movw	r3, #44100	; 0xac44
 800096c:	459a      	cmp	sl, r3
 800096e:	d162      	bne.n	8000a36 <wm8994_Init+0x512>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8000970:	2273      	movs	r2, #115	; 0x73
 8000972:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000976:	4620      	mov	r0, r4
 8000978:	f7ff fcb2 	bl	80002e0 <CODEC_IO_Write>
 800097c:	4406      	add	r6, r0
    break; 
 800097e:	e006      	b.n	800098e <wm8994_Init+0x46a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8000980:	2203      	movs	r2, #3
 8000982:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000986:	4620      	mov	r0, r4
 8000988:	f7ff fcaa 	bl	80002e0 <CODEC_IO_Write>
 800098c:	4406      	add	r6, r0
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800098e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000992:	d058      	beq.n	8000a46 <wm8994_Init+0x522>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8000994:	f244 0210 	movw	r2, #16400	; 0x4010
 8000998:	f44f 7140 	mov.w	r1, #768	; 0x300
 800099c:	4620      	mov	r0, r4
 800099e:	f7ff fc9f 	bl	80002e0 <CODEC_IO_Write>
 80009a2:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f240 3102 	movw	r1, #770	; 0x302
 80009aa:	4620      	mov	r0, r4
 80009ac:	f7ff fc98 	bl	80002e0 <CODEC_IO_Write>
 80009b0:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80009b2:	220a      	movs	r2, #10
 80009b4:	f44f 7102 	mov.w	r1, #520	; 0x208
 80009b8:	4620      	mov	r0, r4
 80009ba:	f7ff fc91 	bl	80002e0 <CODEC_IO_Write>
 80009be:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c6:	4620      	mov	r0, r4
 80009c8:	f7ff fc8a 	bl	80002e0 <CODEC_IO_Write>
 80009cc:	4406      	add	r6, r0
  if (output_device > 0)  /* Audio output selected */
 80009ce:	2f00      	cmp	r7, #0
 80009d0:	d142      	bne.n	8000a58 <wm8994_Init+0x534>
  if (input_device > 0) /* Audio input selected */
 80009d2:	b1ad      	cbz	r5, 8000a00 <wm8994_Init+0x4dc>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80009d4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80009d8:	bf18      	it	ne
 80009da:	f5b5 7f80 	cmpne.w	r5, #256	; 0x100
 80009de:	f000 80d7 	beq.w	8000b90 <wm8994_Init+0x66c>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80009e2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80009e6:	f000 80ea 	beq.w	8000bbe <wm8994_Init+0x69a>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80009ea:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80009ee:	bf18      	it	ne
 80009f0:	f5b5 7f40 	cmpne.w	r5, #768	; 0x300
 80009f4:	f000 8102 	beq.w	8000bfc <wm8994_Init+0x6d8>
    wm8994_SetVolume(DeviceAddr, Volume);
 80009f8:	4649      	mov	r1, r9
 80009fa:	4640      	mov	r0, r8
 80009fc:	f7ff fcf8 	bl	80003f0 <wm8994_SetVolume>
}
 8000a00:	4630      	mov	r0, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8000a06:	2233      	movs	r2, #51	; 0x33
 8000a08:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a0c:	4620      	mov	r0, r4
 8000a0e:	f7ff fc67 	bl	80002e0 <CODEC_IO_Write>
 8000a12:	4406      	add	r6, r0
    break;
 8000a14:	e7bb      	b.n	800098e <wm8994_Init+0x46a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8000a16:	2263      	movs	r2, #99	; 0x63
 8000a18:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	f7ff fc5f 	bl	80002e0 <CODEC_IO_Write>
 8000a22:	4406      	add	r6, r0
    break;
 8000a24:	e7b3      	b.n	800098e <wm8994_Init+0x46a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000a26:	2283      	movs	r2, #131	; 0x83
 8000a28:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a2c:	4620      	mov	r0, r4
 8000a2e:	f7ff fc57 	bl	80002e0 <CODEC_IO_Write>
 8000a32:	4406      	add	r6, r0
    break;
 8000a34:	e7ab      	b.n	800098e <wm8994_Init+0x46a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000a36:	2283      	movs	r2, #131	; 0x83
 8000a38:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	f7ff fc4f 	bl	80002e0 <CODEC_IO_Write>
 8000a42:	4406      	add	r6, r0
    break; 
 8000a44:	e7a3      	b.n	800098e <wm8994_Init+0x46a>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8000a46:	f244 0218 	movw	r2, #16408	; 0x4018
 8000a4a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000a4e:	4620      	mov	r0, r4
 8000a50:	f7ff fc46 	bl	80002e0 <CODEC_IO_Write>
 8000a54:	4406      	add	r6, r0
 8000a56:	e7a5      	b.n	80009a4 <wm8994_Init+0x480>
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8000a58:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a5c:	2103      	movs	r1, #3
 8000a5e:	4620      	mov	r0, r4
 8000a60:	f7ff fc3e 	bl	80002e0 <CODEC_IO_Write>
 8000a64:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2122      	movs	r1, #34	; 0x22
 8000a6a:	4620      	mov	r0, r4
 8000a6c:	f7ff fc38 	bl	80002e0 <CODEC_IO_Write>
 8000a70:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2123      	movs	r1, #35	; 0x23
 8000a76:	4620      	mov	r0, r4
 8000a78:	f7ff fc32 	bl	80002e0 <CODEC_IO_Write>
 8000a7c:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8000a7e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a82:	2136      	movs	r1, #54	; 0x36
 8000a84:	4620      	mov	r0, r4
 8000a86:	f7ff fc2b 	bl	80002e0 <CODEC_IO_Write>
 8000a8a:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8000a8c:	f243 0203 	movw	r2, #12291	; 0x3003
 8000a90:	2101      	movs	r1, #1
 8000a92:	4620      	mov	r0, r4
 8000a94:	f7ff fc24 	bl	80002e0 <CODEC_IO_Write>
 8000a98:	4406      	add	r6, r0
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000a9a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000a9e:	d06f      	beq.n	8000b80 <wm8994_Init+0x65c>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8000aa0:	2205      	movs	r2, #5
 8000aa2:	2151      	movs	r1, #81	; 0x51
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f7ff fc1b 	bl	80002e0 <CODEC_IO_Write>
 8000aaa:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000aac:	f243 3203 	movw	r2, #13059	; 0x3303
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	f7ff fc14 	bl	80002e0 <CODEC_IO_Write>
 8000ab8:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8000aba:	2222      	movs	r2, #34	; 0x22
 8000abc:	2160      	movs	r1, #96	; 0x60
 8000abe:	4620      	mov	r0, r4
 8000ac0:	f7ff fc0e 	bl	80002e0 <CODEC_IO_Write>
 8000ac4:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8000ac6:	f649 7225 	movw	r2, #40741	; 0x9f25
 8000aca:	214c      	movs	r1, #76	; 0x4c
 8000acc:	4620      	mov	r0, r4
 8000ace:	f7ff fc07 	bl	80002e0 <CODEC_IO_Write>
 8000ad2:	4406      	add	r6, r0
    AUDIO_IO_Delay(15);
 8000ad4:	200f      	movs	r0, #15
 8000ad6:	f000 faf3 	bl	80010c0 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8000ada:	2201      	movs	r2, #1
 8000adc:	212d      	movs	r1, #45	; 0x2d
 8000ade:	4620      	mov	r0, r4
 8000ae0:	f7ff fbfe 	bl	80002e0 <CODEC_IO_Write>
 8000ae4:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	212e      	movs	r1, #46	; 0x2e
 8000aea:	4620      	mov	r0, r4
 8000aec:	f7ff fbf8 	bl	80002e0 <CODEC_IO_Write>
 8000af0:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8000af2:	f44f 724c 	mov.w	r2, #816	; 0x330
 8000af6:	2103      	movs	r1, #3
 8000af8:	4620      	mov	r0, r4
 8000afa:	f7ff fbf1 	bl	80002e0 <CODEC_IO_Write>
 8000afe:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8000b00:	2233      	movs	r2, #51	; 0x33
 8000b02:	2154      	movs	r1, #84	; 0x54
 8000b04:	4620      	mov	r0, r4
 8000b06:	f7ff fbeb 	bl	80002e0 <CODEC_IO_Write>
 8000b0a:	4406      	add	r6, r0
    AUDIO_IO_Delay(250);
 8000b0c:	20fa      	movs	r0, #250	; 0xfa
 8000b0e:	f000 fad7 	bl	80010c0 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8000b12:	22ee      	movs	r2, #238	; 0xee
 8000b14:	2160      	movs	r1, #96	; 0x60
 8000b16:	4620      	mov	r0, r4
 8000b18:	f7ff fbe2 	bl	80002e0 <CODEC_IO_Write>
 8000b1c:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8000b1e:	22c0      	movs	r2, #192	; 0xc0
 8000b20:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8000b24:	4620      	mov	r0, r4
 8000b26:	f7ff fbdb 	bl	80002e0 <CODEC_IO_Write>
 8000b2a:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8000b2c:	22c0      	movs	r2, #192	; 0xc0
 8000b2e:	f240 6111 	movw	r1, #1553	; 0x611
 8000b32:	4620      	mov	r0, r4
 8000b34:	f7ff fbd4 	bl	80002e0 <CODEC_IO_Write>
 8000b38:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000b40:	4620      	mov	r0, r4
 8000b42:	f7ff fbcd 	bl	80002e0 <CODEC_IO_Write>
 8000b46:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8000b48:	22c0      	movs	r2, #192	; 0xc0
 8000b4a:	f240 6112 	movw	r1, #1554	; 0x612
 8000b4e:	4620      	mov	r0, r4
 8000b50:	f7ff fbc6 	bl	80002e0 <CODEC_IO_Write>
 8000b54:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8000b56:	22c0      	movs	r2, #192	; 0xc0
 8000b58:	f240 6113 	movw	r1, #1555	; 0x613
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	f7ff fbbf 	bl	80002e0 <CODEC_IO_Write>
 8000b62:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f240 4122 	movw	r1, #1058	; 0x422
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	f7ff fbb8 	bl	80002e0 <CODEC_IO_Write>
 8000b70:	4406      	add	r6, r0
    wm8994_SetVolume(DeviceAddr, Volume);
 8000b72:	4649      	mov	r1, r9
 8000b74:	4640      	mov	r0, r8
 8000b76:	f7ff fc3b 	bl	80003f0 <wm8994_SetVolume>
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8000b7a:	f243 3703 	movw	r7, #13059	; 0x3303
 8000b7e:	e728      	b.n	80009d2 <wm8994_Init+0x4ae>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8000b80:	f240 2205 	movw	r2, #517	; 0x205
 8000b84:	2151      	movs	r1, #81	; 0x51
 8000b86:	4620      	mov	r0, r4
 8000b88:	f7ff fbaa 	bl	80002e0 <CODEC_IO_Write>
 8000b8c:	4406      	add	r6, r0
 8000b8e:	e78d      	b.n	8000aac <wm8994_Init+0x588>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000b90:	f047 0213 	orr.w	r2, r7, #19
 8000b94:	2101      	movs	r1, #1
 8000b96:	4620      	mov	r0, r4
 8000b98:	f7ff fba2 	bl	80002e0 <CODEC_IO_Write>
 8000b9c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000ba4:	4620      	mov	r0, r4
 8000ba6:	f7ff fb9b 	bl	80002e0 <CODEC_IO_Write>
 8000baa:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8000bac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000bb0:	f240 4111 	movw	r1, #1041	; 0x411
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f7ff fb93 	bl	80002e0 <CODEC_IO_Write>
 8000bba:	4406      	add	r6, r0
 8000bbc:	e71c      	b.n	80009f8 <wm8994_Init+0x4d4>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000bbe:	f047 0213 	orr.w	r2, r7, #19
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f7ff fb8b 	bl	80002e0 <CODEC_IO_Write>
 8000bca:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8000bcc:	2202      	movs	r2, #2
 8000bce:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	f7ff fb84 	bl	80002e0 <CODEC_IO_Write>
 8000bd8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8000bda:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000bde:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000be2:	4620      	mov	r0, r4
 8000be4:	f7ff fb7c 	bl	80002e0 <CODEC_IO_Write>
 8000be8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8000bea:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000bee:	f240 4111 	movw	r1, #1041	; 0x411
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	f7ff fb74 	bl	80002e0 <CODEC_IO_Write>
 8000bf8:	4406      	add	r6, r0
 8000bfa:	e6fd      	b.n	80009f8 <wm8994_Init+0x4d4>
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8000bfc:	220b      	movs	r2, #11
 8000bfe:	2118      	movs	r1, #24
 8000c00:	4620      	mov	r0, r4
 8000c02:	f7ff fb6d 	bl	80002e0 <CODEC_IO_Write>
 8000c06:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8000c08:	220b      	movs	r2, #11
 8000c0a:	211a      	movs	r1, #26
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f7ff fb67 	bl	80002e0 <CODEC_IO_Write>
 8000c12:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8000c14:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000c18:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f7ff fb5f 	bl	80002e0 <CODEC_IO_Write>
 8000c22:	4406      	add	r6, r0
 8000c24:	e6e8      	b.n	80009f8 <wm8994_Init+0x4d4>
 8000c26:	bf00      	nop
 8000c28:	00017700 	.word	0x00017700

08000c2c <wm8994_SetOutputMode>:
{
 8000c2c:	b538      	push	{r3, r4, r5, lr}
  switch (Output) 
 8000c2e:	2902      	cmp	r1, #2
 8000c30:	d04d      	beq.n	8000cce <wm8994_SetOutputMode+0xa2>
 8000c32:	2903      	cmp	r1, #3
 8000c34:	d070      	beq.n	8000d18 <wm8994_SetOutputMode+0xec>
 8000c36:	2901      	cmp	r1, #1
 8000c38:	d024      	beq.n	8000c84 <wm8994_SetOutputMode+0x58>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000c3a:	b2c4      	uxtb	r4, r0
 8000c3c:	f240 3203 	movw	r2, #771	; 0x303
 8000c40:	2105      	movs	r1, #5
 8000c42:	4620      	mov	r0, r4
 8000c44:	f7ff fb4c 	bl	80002e0 <CODEC_IO_Write>
 8000c48:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f240 6101 	movw	r1, #1537	; 0x601
 8000c50:	4620      	mov	r0, r4
 8000c52:	f7ff fb45 	bl	80002e0 <CODEC_IO_Write>
 8000c56:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f240 6102 	movw	r1, #1538	; 0x602
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f7ff fb3e 	bl	80002e0 <CODEC_IO_Write>
 8000c64:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f240 6104 	movw	r1, #1540	; 0x604
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f7ff fb37 	bl	80002e0 <CODEC_IO_Write>
 8000c72:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f240 6105 	movw	r1, #1541	; 0x605
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	f7ff fb30 	bl	80002e0 <CODEC_IO_Write>
 8000c80:	4428      	add	r0, r5
  return counter;
 8000c82:	e023      	b.n	8000ccc <wm8994_SetOutputMode+0xa0>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8000c84:	b2c4      	uxtb	r4, r0
 8000c86:	f640 420c 	movw	r2, #3084	; 0xc0c
 8000c8a:	2105      	movs	r1, #5
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f7ff fb27 	bl	80002e0 <CODEC_IO_Write>
 8000c92:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f240 6101 	movw	r1, #1537	; 0x601
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f7ff fb20 	bl	80002e0 <CODEC_IO_Write>
 8000ca0:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f240 6102 	movw	r1, #1538	; 0x602
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f7ff fb19 	bl	80002e0 <CODEC_IO_Write>
 8000cae:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	f240 6104 	movw	r1, #1540	; 0x604
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	f7ff fb12 	bl	80002e0 <CODEC_IO_Write>
 8000cbc:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	f240 6105 	movw	r1, #1541	; 0x605
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f7ff fb0b 	bl	80002e0 <CODEC_IO_Write>
 8000cca:	4428      	add	r0, r5
}
 8000ccc:	bd38      	pop	{r3, r4, r5, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000cce:	b2c4      	uxtb	r4, r0
 8000cd0:	f240 3203 	movw	r2, #771	; 0x303
 8000cd4:	2105      	movs	r1, #5
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f7ff fb02 	bl	80002e0 <CODEC_IO_Write>
 8000cdc:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f240 6101 	movw	r1, #1537	; 0x601
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f7ff fafb 	bl	80002e0 <CODEC_IO_Write>
 8000cea:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f240 6102 	movw	r1, #1538	; 0x602
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	f7ff faf4 	bl	80002e0 <CODEC_IO_Write>
 8000cf8:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f240 6104 	movw	r1, #1540	; 0x604
 8000d00:	4620      	mov	r0, r4
 8000d02:	f7ff faed 	bl	80002e0 <CODEC_IO_Write>
 8000d06:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f240 6105 	movw	r1, #1541	; 0x605
 8000d0e:	4620      	mov	r0, r4
 8000d10:	f7ff fae6 	bl	80002e0 <CODEC_IO_Write>
 8000d14:	4428      	add	r0, r5
    break;
 8000d16:	e7d9      	b.n	8000ccc <wm8994_SetOutputMode+0xa0>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8000d18:	b2c4      	uxtb	r4, r0
 8000d1a:	f640 720f 	movw	r2, #3855	; 0xf0f
 8000d1e:	2105      	movs	r1, #5
 8000d20:	4620      	mov	r0, r4
 8000d22:	f7ff fadd 	bl	80002e0 <CODEC_IO_Write>
 8000d26:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f240 6101 	movw	r1, #1537	; 0x601
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f7ff fad6 	bl	80002e0 <CODEC_IO_Write>
 8000d34:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f240 6102 	movw	r1, #1538	; 0x602
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	f7ff facf 	bl	80002e0 <CODEC_IO_Write>
 8000d42:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000d44:	2202      	movs	r2, #2
 8000d46:	f240 6104 	movw	r1, #1540	; 0x604
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	f7ff fac8 	bl	80002e0 <CODEC_IO_Write>
 8000d50:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000d52:	2202      	movs	r2, #2
 8000d54:	f240 6105 	movw	r1, #1541	; 0x605
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f7ff fac1 	bl	80002e0 <CODEC_IO_Write>
 8000d5e:	4428      	add	r0, r5
    break;
 8000d60:	e7b4      	b.n	8000ccc <wm8994_SetOutputMode+0xa0>
	...

08000d64 <wm8994_SetFrequency>:
{
 8000d64:	b508      	push	{r3, lr}
  switch (AudioFreq)
 8000d66:	f245 6322 	movw	r3, #22050	; 0x5622
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	d03f      	beq.n	8000dee <wm8994_SetFrequency+0x8a>
 8000d6e:	d817      	bhi.n	8000da0 <wm8994_SetFrequency+0x3c>
 8000d70:	f642 3311 	movw	r3, #11025	; 0x2b11
 8000d74:	4299      	cmp	r1, r3
 8000d76:	d033      	beq.n	8000de0 <wm8994_SetFrequency+0x7c>
 8000d78:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 8000d7c:	d106      	bne.n	8000d8c <wm8994_SetFrequency+0x28>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8000d7e:	2233      	movs	r2, #51	; 0x33
 8000d80:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d84:	b2c0      	uxtb	r0, r0
 8000d86:	f7ff faab 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000d8a:	e008      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 8000d8c:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 8000d90:	d134      	bne.n	8000dfc <wm8994_SetFrequency+0x98>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8000d92:	2203      	movs	r2, #3
 8000d94:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d98:	b2c0      	uxtb	r0, r0
 8000d9a:	f7ff faa1 	bl	80002e0 <CODEC_IO_Write>
}
 8000d9e:	bd08      	pop	{r3, pc}
  switch (AudioFreq)
 8000da0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8000da4:	4299      	cmp	r1, r3
 8000da6:	d014      	beq.n	8000dd2 <wm8994_SetFrequency+0x6e>
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <wm8994_SetFrequency+0xa8>)
 8000daa:	4299      	cmp	r1, r3
 8000dac:	d106      	bne.n	8000dbc <wm8994_SetFrequency+0x58>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8000dae:	22a3      	movs	r2, #163	; 0xa3
 8000db0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000db4:	b2c0      	uxtb	r0, r0
 8000db6:	f7ff fa93 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000dba:	e7f0      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 8000dbc:	f64a 4344 	movw	r3, #44100	; 0xac44
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d11b      	bne.n	8000dfc <wm8994_SetFrequency+0x98>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8000dc4:	2273      	movs	r2, #115	; 0x73
 8000dc6:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000dca:	b2c0      	uxtb	r0, r0
 8000dcc:	f7ff fa88 	bl	80002e0 <CODEC_IO_Write>
    break; 
 8000dd0:	e7e5      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000dd2:	2283      	movs	r2, #131	; 0x83
 8000dd4:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000dd8:	b2c0      	uxtb	r0, r0
 8000dda:	f7ff fa81 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000dde:	e7de      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8000de0:	2213      	movs	r2, #19
 8000de2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000de6:	b2c0      	uxtb	r0, r0
 8000de8:	f7ff fa7a 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000dec:	e7d7      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8000dee:	2243      	movs	r2, #67	; 0x43
 8000df0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000df4:	b2c0      	uxtb	r0, r0
 8000df6:	f7ff fa73 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000dfa:	e7d0      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000dfc:	2283      	movs	r2, #131	; 0x83
 8000dfe:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000e02:	b2c0      	uxtb	r0, r0
 8000e04:	f7ff fa6c 	bl	80002e0 <CODEC_IO_Write>
  return counter;
 8000e08:	e7c9      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
 8000e0a:	bf00      	nop
 8000e0c:	00017700 	.word	0x00017700

08000e10 <wm8994_Reset>:
{
 8000e10:	b508      	push	{r3, lr}
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8000e12:	2200      	movs	r2, #0
 8000e14:	4611      	mov	r1, r2
 8000e16:	b2c0      	uxtb	r0, r0
 8000e18:	f7ff fa62 	bl	80002e0 <CODEC_IO_Write>
  outputEnabled = 0;
 8000e1c:	4b02      	ldr	r3, [pc, #8]	; (8000e28 <wm8994_Reset+0x18>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8000e22:	605a      	str	r2, [r3, #4]
}
 8000e24:	bd08      	pop	{r3, pc}
 8000e26:	bf00      	nop
 8000e28:	200000d8 	.word	0x200000d8

08000e2c <wm8994_DeInit>:
{
 8000e2c:	b508      	push	{r3, lr}
  AUDIO_IO_DeInit();
 8000e2e:	f000 f911 	bl	8001054 <AUDIO_IO_DeInit>
}
 8000e32:	bd08      	pop	{r3, pc}

08000e34 <wm8994_ReadID>:
{
 8000e34:	b510      	push	{r4, lr}
 8000e36:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 8000e38:	f000 f904 	bl	8001044 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	b2e0      	uxtb	r0, r4
 8000e40:	f000 f922 	bl	8001088 <AUDIO_IO_Read>
}
 8000e44:	bd10      	pop	{r4, pc}
	...

08000e48 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000e48:	b570      	push	{r4, r5, r6, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e4c:	4b49      	ldr	r3, [pc, #292]	; (8000f74 <I2Cx_MspInit+0x12c>)
 8000e4e:	4283      	cmp	r3, r0
 8000e50:	d043      	beq.n	8000eda <I2Cx_MspInit+0x92>
  }
  else
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e52:	4c49      	ldr	r4, [pc, #292]	; (8000f78 <I2Cx_MspInit+0x130>)
 8000e54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	6323      	str	r3, [r4, #48]	; 0x30
 8000e5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	9303      	str	r3, [sp, #12]
 8000e64:	9b03      	ldr	r3, [sp, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e6a:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e6c:	2312      	movs	r3, #18
 8000e6e:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000e70:	2500      	movs	r5, #0
 8000e72:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000e74:	2302      	movs	r3, #2
 8000e76:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e7c:	4e3f      	ldr	r6, [pc, #252]	; (8000f7c <I2Cx_MspInit+0x134>)
 8000e7e:	a905      	add	r1, sp, #20
 8000e80:	4630      	mov	r0, r6
 8000e82:	f000 fcef 	bl	8001864 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000e86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e8a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e8c:	a905      	add	r1, sp, #20
 8000e8e:	4630      	mov	r0, r6
 8000e90:	f000 fce8 	bl	8001864 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000e94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e9a:	6423      	str	r3, [r4, #64]	; 0x40
 8000e9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea2:	9304      	str	r3, [sp, #16]
 8000ea4:	9b04      	ldr	r3, [sp, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000ea6:	6a23      	ldr	r3, [r4, #32]
 8000ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eac:	6223      	str	r3, [r4, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000eae:	6a23      	ldr	r3, [r4, #32]
 8000eb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000eb4:	6223      	str	r3, [r4, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000eb6:	462a      	mov	r2, r5
 8000eb8:	210f      	movs	r1, #15
 8000eba:	201f      	movs	r0, #31
 8000ebc:	f000 fa30 	bl	8001320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000ec0:	201f      	movs	r0, #31
 8000ec2:	f000 fa5f 	bl	8001384 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000ec6:	462a      	mov	r2, r5
 8000ec8:	210f      	movs	r1, #15
 8000eca:	2020      	movs	r0, #32
 8000ecc:	f000 fa28 	bl	8001320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000ed0:	2020      	movs	r0, #32
 8000ed2:	f000 fa57 	bl	8001384 <HAL_NVIC_EnableIRQ>
  }
}
 8000ed6:	b00a      	add	sp, #40	; 0x28
 8000ed8:	bd70      	pop	{r4, r5, r6, pc}
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000eda:	4c27      	ldr	r4, [pc, #156]	; (8000f78 <I2Cx_MspInit+0x130>)
 8000edc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ede:	f043 0308 	orr.w	r3, r3, #8
 8000ee2:	6323      	str	r3, [r4, #48]	; 0x30
 8000ee4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	9b00      	ldr	r3, [sp, #0]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000eee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	6323      	str	r3, [r4, #48]	; 0x30
 8000ef6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f04:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000f06:	2312      	movs	r3, #18
 8000f08:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000f0a:	2500      	movs	r5, #0
 8000f0c:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000f12:	2304      	movs	r3, #4
 8000f14:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000f16:	a905      	add	r1, sp, #20
 8000f18:	4819      	ldr	r0, [pc, #100]	; (8000f80 <I2Cx_MspInit+0x138>)
 8000f1a:	f000 fca3 	bl	8001864 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000f22:	230b      	movs	r3, #11
 8000f24:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000f26:	a905      	add	r1, sp, #20
 8000f28:	4814      	ldr	r0, [pc, #80]	; (8000f7c <I2Cx_MspInit+0x134>)
 8000f2a:	f000 fc9b 	bl	8001864 <HAL_GPIO_Init>
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000f2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f34:	6423      	str	r3, [r4, #64]	; 0x40
 8000f36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000f40:	6a23      	ldr	r3, [r4, #32]
 8000f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f46:	6223      	str	r3, [r4, #32]
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000f48:	6a23      	ldr	r3, [r4, #32]
 8000f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f4e:	6223      	str	r3, [r4, #32]
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000f50:	462a      	mov	r2, r5
 8000f52:	210f      	movs	r1, #15
 8000f54:	205f      	movs	r0, #95	; 0x5f
 8000f56:	f000 f9e3 	bl	8001320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000f5a:	205f      	movs	r0, #95	; 0x5f
 8000f5c:	f000 fa12 	bl	8001384 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000f60:	462a      	mov	r2, r5
 8000f62:	210f      	movs	r1, #15
 8000f64:	2060      	movs	r0, #96	; 0x60
 8000f66:	f000 f9db 	bl	8001320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000f6a:	2060      	movs	r0, #96	; 0x60
 8000f6c:	f000 fa0a 	bl	8001384 <HAL_NVIC_EnableIRQ>
 8000f70:	e7b1      	b.n	8000ed6 <I2Cx_MspInit+0x8e>
 8000f72:	bf00      	nop
 8000f74:	200000e0 	.word	0x200000e0
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	40020c00 	.word	0x40020c00

08000f84 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000f84:	b510      	push	{r4, lr}
 8000f86:	4604      	mov	r4, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000f88:	f001 f912 	bl	80021b0 <HAL_I2C_GetState>
 8000f8c:	b9a0      	cbnz	r0, 8000fb8 <I2Cx_Init+0x34>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <I2Cx_Init+0x3c>)
 8000f90:	429c      	cmp	r4, r3
 8000f92:	d012      	beq.n	8000fba <I2Cx_Init+0x36>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <I2Cx_Init+0x40>)
 8000f96:	6023      	str	r3, [r4, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <I2Cx_Init+0x44>)
 8000f9a:	6063      	str	r3, [r4, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60a3      	str	r3, [r4, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	60e2      	str	r2, [r4, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000fa4:	6123      	str	r3, [r4, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000fa6:	6163      	str	r3, [r4, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000fa8:	61e3      	str	r3, [r4, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000faa:	6223      	str	r3, [r4, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000fac:	4620      	mov	r0, r4
 8000fae:	f7ff ff4b 	bl	8000e48 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f000 feb2 	bl	8001d1c <HAL_I2C_Init>
  }
}
 8000fb8:	bd10      	pop	{r4, pc}
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <I2Cx_Init+0x48>)
 8000fbc:	6023      	str	r3, [r4, #0]
 8000fbe:	e7eb      	b.n	8000f98 <I2Cx_Init+0x14>
 8000fc0:	200000e0 	.word	0x200000e0
 8000fc4:	40005400 	.word	0x40005400
 8000fc8:	40912732 	.word	0x40912732
 8000fcc:	40006000 	.word	0x40006000

08000fd0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	4604      	mov	r4, r0
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000fd4:	f000 ff01 	bl	8001dda <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f7ff ffd3 	bl	8000f84 <I2Cx_Init>
}
 8000fde:	bd10      	pop	{r4, pc}

08000fe0 <I2Cx_WriteMultiple>:
{
 8000fe0:	b570      	push	{r4, r5, r6, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	4605      	mov	r5, r0
 8000fe6:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fe8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fec:	9102      	str	r1, [sp, #8]
 8000fee:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8000ff2:	9101      	str	r1, [sp, #4]
 8000ff4:	9908      	ldr	r1, [sp, #32]
 8000ff6:	9100      	str	r1, [sp, #0]
 8000ff8:	4621      	mov	r1, r4
 8000ffa:	f000 ff07 	bl	8001e0c <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8000ffe:	4606      	mov	r6, r0
 8001000:	b910      	cbnz	r0, 8001008 <I2Cx_WriteMultiple+0x28>
}
 8001002:	4630      	mov	r0, r6
 8001004:	b004      	add	sp, #16
 8001006:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 8001008:	4621      	mov	r1, r4
 800100a:	4628      	mov	r0, r5
 800100c:	f7ff ffe0 	bl	8000fd0 <I2Cx_Error>
 8001010:	e7f7      	b.n	8001002 <I2Cx_WriteMultiple+0x22>

08001012 <I2Cx_ReadMultiple>:
{
 8001012:	b570      	push	{r4, r5, r6, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	4605      	mov	r5, r0
 8001018:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800101a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800101e:	9102      	str	r1, [sp, #8]
 8001020:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8001024:	9101      	str	r1, [sp, #4]
 8001026:	9908      	ldr	r1, [sp, #32]
 8001028:	9100      	str	r1, [sp, #0]
 800102a:	4621      	mov	r1, r4
 800102c:	f000 ffd8 	bl	8001fe0 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001030:	4606      	mov	r6, r0
 8001032:	b910      	cbnz	r0, 800103a <I2Cx_ReadMultiple+0x28>
}
 8001034:	4630      	mov	r0, r6
 8001036:	b004      	add	sp, #16
 8001038:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 800103a:	4621      	mov	r1, r4
 800103c:	4628      	mov	r0, r5
 800103e:	f7ff ffc7 	bl	8000fd0 <I2Cx_Error>
 8001042:	e7f7      	b.n	8001034 <I2Cx_ReadMultiple+0x22>

08001044 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 8001044:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cAudioHandler);
 8001046:	4802      	ldr	r0, [pc, #8]	; (8001050 <AUDIO_IO_Init+0xc>)
 8001048:	f7ff ff9c 	bl	8000f84 <I2Cx_Init>
}
 800104c:	bd08      	pop	{r3, pc}
 800104e:	bf00      	nop
 8001050:	200000e0 	.word	0x200000e0

08001054 <AUDIO_IO_DeInit>:
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{

}
 8001054:	4770      	bx	lr
	...

08001058 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001058:	b500      	push	{lr}
 800105a:	b085      	sub	sp, #20
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800105c:	0213      	lsls	r3, r2, #8
 800105e:	b21b      	sxth	r3, r3
 8001060:	ea43 2212 	orr.w	r2, r3, r2, lsr #8
 8001064:	f8ad 200e 	strh.w	r2, [sp, #14]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001068:	2302      	movs	r3, #2
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	f10d 020e 	add.w	r2, sp, #14
 8001070:	9200      	str	r2, [sp, #0]
 8001072:	460a      	mov	r2, r1
 8001074:	4601      	mov	r1, r0
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <AUDIO_IO_Write+0x2c>)
 8001078:	f7ff ffb2 	bl	8000fe0 <I2Cx_WriteMultiple>
}
 800107c:	b005      	add	sp, #20
 800107e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001082:	bf00      	nop
 8001084:	200000e0 	.word	0x200000e0

08001088 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8001088:	b500      	push	{lr}
 800108a:	b085      	sub	sp, #20
 800108c:	460a      	mov	r2, r1
  uint16_t read_value = 0, tmp = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	f8ad 300e 	strh.w	r3, [sp, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001094:	2302      	movs	r3, #2
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	f10d 010e 	add.w	r1, sp, #14
 800109c:	9100      	str	r1, [sp, #0]
 800109e:	4601      	mov	r1, r0
 80010a0:	4806      	ldr	r0, [pc, #24]	; (80010bc <AUDIO_IO_Read+0x34>)
 80010a2:	f7ff ffb6 	bl	8001012 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80010a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80010aa:	0218      	lsls	r0, r3, #8
 80010ac:	b200      	sxth	r0, r0
 80010ae:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
  
  read_value = tmp;
  
  return read_value;
}
 80010b2:	b280      	uxth	r0, r0
 80010b4:	b005      	add	sp, #20
 80010b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80010ba:	bf00      	nop
 80010bc:	200000e0 	.word	0x200000e0

080010c0 <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80010c0:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 80010c2:	f000 f90d 	bl	80012e0 <HAL_Delay>
}
 80010c6:	bd08      	pop	{r3, pc}

080010c8 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80010c8:	b508      	push	{r3, lr}
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32f769i_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 80010ca:	f005 fe1f 	bl	8006d0c <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80010ce:	bd08      	pop	{r3, pc}

080010d0 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80010d0:	b508      	push	{r3, lr}
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32f769i_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80010d2:	f005 fe2f 	bl	8006d34 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80010d6:	bd08      	pop	{r3, pc}

080010d8 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
}
 80010d8:	4770      	bx	lr
	...

080010dc <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 80010dc:	b530      	push	{r4, r5, lr}
 80010de:	b08b      	sub	sp, #44	; 0x2c
 80010e0:	4605      	mov	r5, r0
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  
  
  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80010e2:	4c3a      	ldr	r4, [pc, #232]	; (80011cc <BSP_AUDIO_OUT_MspInit+0xf0>)
 80010e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ea:	6463      	str	r3, [r4, #68]	; 0x44
 80010ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	9b01      	ldr	r3, [sp, #4]
  
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 80010f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010fc:	6323      	str	r3, [r4, #48]	; 0x30
 80010fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 8001108:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800110a:	f043 0310 	orr.w	r3, r3, #16
 800110e:	6323      	str	r3, [r4, #48]	; 0x30
 8001110:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	9303      	str	r3, [sp, #12]
 8001118:	9b03      	ldr	r3, [sp, #12]
  
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 800111a:	2370      	movs	r3, #112	; 0x70
 800111c:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 800112a:	2306      	movs	r3, #6
 800112c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 800112e:	a905      	add	r1, sp, #20
 8001130:	4827      	ldr	r0, [pc, #156]	; (80011d0 <BSP_AUDIO_OUT_MspInit+0xf4>)
 8001132:	f000 fb97 	bl	8001864 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800113a:	a905      	add	r1, sp, #20
 800113c:	4825      	ldr	r0, [pc, #148]	; (80011d4 <BSP_AUDIO_OUT_MspInit+0xf8>)
 800113e:	f000 fb91 	bl	8001864 <HAL_GPIO_Init>
  
  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001142:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001144:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001148:	6323      	str	r3, [r4, #48]	; 0x30
 800114a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800114c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001150:	9304      	str	r3, [sp, #16]
 8001152:	9b04      	ldr	r3, [sp, #16]
  
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001154:	682a      	ldr	r2, [r5, #0]
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <BSP_AUDIO_OUT_MspInit+0xfc>)
 8001158:	429a      	cmp	r2, r3
 800115a:	d009      	beq.n	8001170 <BSP_AUDIO_OUT_MspInit+0x94>
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	210e      	movs	r1, #14
 8001160:	2039      	movs	r0, #57	; 0x39
 8001162:	f000 f8dd 	bl	8001320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8001166:	2039      	movs	r0, #57	; 0x39
 8001168:	f000 f90c 	bl	8001384 <HAL_NVIC_EnableIRQ>
}
 800116c:	b00b      	add	sp, #44	; 0x2c
 800116e:	bd30      	pop	{r4, r5, pc}
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <BSP_AUDIO_OUT_MspInit+0x100>)
 8001172:	2200      	movs	r2, #0
 8001174:	665a      	str	r2, [r3, #100]	; 0x64
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001176:	2140      	movs	r1, #64	; 0x40
 8001178:	6699      	str	r1, [r3, #104]	; 0x68
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800117a:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800117c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001180:	6719      	str	r1, [r3, #112]	; 0x70
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001182:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001186:	6759      	str	r1, [r3, #116]	; 0x74
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8001188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118c:	6799      	str	r1, [r3, #120]	; 0x78
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 800118e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001192:	67d9      	str	r1, [r3, #124]	; 0x7c
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001194:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001198:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 800119c:	2104      	movs	r1, #4
 800119e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80011a2:	2103      	movs	r1, #3
 80011a4:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80011a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80011ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80011b0:	461c      	mov	r4, r3
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <BSP_AUDIO_OUT_MspInit+0x104>)
 80011b4:	f844 2f60 	str.w	r2, [r4, #96]!
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80011b8:	66ec      	str	r4, [r5, #108]	; 0x6c
 80011ba:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    HAL_DMA_DeInit(&hdma_sai_tx);
 80011be:	4620      	mov	r0, r4
 80011c0:	f000 f9e6 	bl	8001590 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);
 80011c4:	4620      	mov	r0, r4
 80011c6:	f000 f97d 	bl	80014c4 <HAL_DMA_Init>
 80011ca:	e7c7      	b.n	800115c <BSP_AUDIO_OUT_MspInit+0x80>
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40021800 	.word	0x40021800
 80011d8:	40015804 	.word	0x40015804
 80011dc:	20000178 	.word	0x20000178
 80011e0:	40026428 	.word	0x40026428

080011e4 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 80011e4:	b510      	push	{r4, lr}
 80011e6:	b0a4      	sub	sp, #144	; 0x90
 80011e8:	460c      	mov	r4, r1
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80011ea:	4668      	mov	r0, sp
 80011ec:	f002 ffae 	bl	800414c <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 80011f0:	f642 3211 	movw	r2, #11025	; 0x2b11
 80011f4:	f245 6322 	movw	r3, #22050	; 0x5622
 80011f8:	429c      	cmp	r4, r3
 80011fa:	bf18      	it	ne
 80011fc:	4294      	cmpne	r4, r2
 80011fe:	d003      	beq.n	8001208 <BSP_AUDIO_OUT_ClockConfig+0x24>
 8001200:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001204:	429c      	cmp	r4, r3
 8001206:	d111      	bne.n	800122c <BSP_AUDIO_OUT_ClockConfig+0x48>
  {
    /* Configure PLLSAI prescalers */
    /* PLLSAI_VCO: VCO_429M 
    SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 214.5/19 = 11.289 Mhz */ 
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001208:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800120c:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 800120e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001212:	930f      	str	r3, [sp, #60]	; 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8001214:	f240 13ad 	movw	r3, #429	; 0x1ad
 8001218:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800121a:	2302      	movs	r3, #2
 800121c:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800121e:	2313      	movs	r3, #19
 8001220:	9309      	str	r3, [sp, #36]	; 0x24
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001222:	4668      	mov	r0, sp
 8001224:	f002 fb90 	bl	8003948 <HAL_RCCEx_PeriphCLKConfig>
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
  }
}
 8001228:	b024      	add	sp, #144	; 0x90
 800122a:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800122c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001230:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8001232:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001236:	930f      	str	r3, [sp, #60]	; 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344; 
 8001238:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800123c:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
 800123e:	2307      	movs	r3, #7
 8001240:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
 8001242:	2301      	movs	r3, #1
 8001244:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001246:	4668      	mov	r0, sp
 8001248:	f002 fb7e 	bl	8003948 <HAL_RCCEx_PeriphCLKConfig>
}
 800124c:	e7ec      	b.n	8001228 <BSP_AUDIO_OUT_ClockConfig+0x44>

0800124e <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai : SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800124e:	b508      	push	{r3, lr}
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001250:	f005 fd38 	bl	8006cc4 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001254:	bd08      	pop	{r3, pc}

08001256 <HAL_SAI_RxHalfCpltCallback>:
{
 8001256:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8001258:	f005 fd46 	bl	8006ce8 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 800125c:	bd08      	pop	{r3, pc}
	...

08001260 <HAL_SAI_ErrorCallback>:
{
 8001260:	b508      	push	{r3, lr}
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001262:	6802      	ldr	r2, [r0, #0]
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <HAL_SAI_ErrorCallback+0x18>)
 8001266:	429a      	cmp	r2, r3
 8001268:	d002      	beq.n	8001270 <HAL_SAI_ErrorCallback+0x10>
    BSP_AUDIO_IN_Error_CallBack();
 800126a:	f005 fd77 	bl	8006d5c <BSP_AUDIO_IN_Error_CallBack>
}
 800126e:	bd08      	pop	{r3, pc}
  BSP_AUDIO_OUT_Error_CallBack();
 8001270:	f7ff ff32 	bl	80010d8 <BSP_AUDIO_OUT_Error_CallBack>
 8001274:	e7fb      	b.n	800126e <HAL_SAI_ErrorCallback+0xe>
 8001276:	bf00      	nop
 8001278:	40015804 	.word	0x40015804

0800127c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800127c:	4770      	bx	lr
	...

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b510      	push	{r4, lr}
 8001282:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <HAL_InitTick+0x24>)
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <HAL_InitTick+0x28>)
 800128a:	fba3 3000 	umull	r3, r0, r3, r0
 800128e:	0980      	lsrs	r0, r0, #6
 8001290:	f000 f884 	bl	800139c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001294:	2200      	movs	r2, #0
 8001296:	4621      	mov	r1, r4
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f840 	bl	8001320 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80012a0:	2000      	movs	r0, #0
 80012a2:	bd10      	pop	{r4, pc}
 80012a4:	20000030 	.word	0x20000030
 80012a8:	10624dd3 	.word	0x10624dd3

080012ac <HAL_Init>:
{
 80012ac:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ae:	2003      	movs	r0, #3
 80012b0:	f000 f824 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff ffe3 	bl	8001280 <HAL_InitTick>
  HAL_MspInit();
 80012ba:	f7ff ffdf 	bl	800127c <HAL_MspInit>
}
 80012be:	2000      	movs	r0, #0
 80012c0:	bd08      	pop	{r3, pc}
	...

080012c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80012c4:	4a02      	ldr	r2, [pc, #8]	; (80012d0 <HAL_IncTick+0xc>)
 80012c6:	6813      	ldr	r3, [r2, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20001814 	.word	0x20001814

080012d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80012d4:	4b01      	ldr	r3, [pc, #4]	; (80012dc <HAL_GetTick+0x8>)
 80012d6:	6818      	ldr	r0, [r3, #0]
}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20001814 	.word	0x20001814

080012e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80012e0:	b510      	push	{r4, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80012e6:	f7ff fff5 	bl	80012d4 <HAL_GetTick>
 80012ea:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80012ec:	f7ff fff2 	bl	80012d4 <HAL_GetTick>
 80012f0:	1b00      	subs	r0, r0, r4
 80012f2:	9b01      	ldr	r3, [sp, #4]
 80012f4:	4298      	cmp	r0, r3
 80012f6:	d3f9      	bcc.n	80012ec <HAL_Delay+0xc>
  {
  }
}
 80012f8:	b002      	add	sp, #8
 80012fa:	bd10      	pop	{r4, pc}

080012fc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4906      	ldr	r1, [pc, #24]	; (8001318 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80012fe:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001300:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001304:	041b      	lsls	r3, r3, #16
 8001306:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001308:	0200      	lsls	r0, r0, #8
 800130a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001310:	4a02      	ldr	r2, [pc, #8]	; (800131c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001312:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8001314:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00
 800131c:	05fa0000 	.word	0x05fa0000

08001320 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001320:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_NVIC_SetPriority+0x58>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132a:	f1c3 0407 	rsb	r4, r3, #7
 800132e:	2c04      	cmp	r4, #4
 8001330:	bf28      	it	cs
 8001332:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001334:	1d1d      	adds	r5, r3, #4
 8001336:	2d06      	cmp	r5, #6
 8001338:	d914      	bls.n	8001364 <HAL_NVIC_SetPriority+0x44>
 800133a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 35ff 	mov.w	r5, #4294967295
 8001340:	fa05 f404 	lsl.w	r4, r5, r4
 8001344:	ea21 0104 	bic.w	r1, r1, r4
 8001348:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134a:	fa05 f303 	lsl.w	r3, r5, r3
 800134e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001352:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8001354:	2800      	cmp	r0, #0
 8001356:	db07      	blt.n	8001368 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	0109      	lsls	r1, r1, #4
 800135a:	b2c9      	uxtb	r1, r1
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <HAL_NVIC_SetPriority+0x5c>)
 800135e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001360:	bc30      	pop	{r4, r5}
 8001362:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001364:	2300      	movs	r3, #0
 8001366:	e7e9      	b.n	800133c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001368:	f000 000f 	and.w	r0, r0, #15
 800136c:	0109      	lsls	r1, r1, #4
 800136e:	b2c9      	uxtb	r1, r1
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_NVIC_SetPriority+0x60>)
 8001372:	5419      	strb	r1, [r3, r0]
 8001374:	e7f4      	b.n	8001360 <HAL_NVIC_SetPriority+0x40>
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00
 800137c:	e000e400 	.word	0xe000e400
 8001380:	e000ed14 	.word	0xe000ed14

08001384 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001384:	f000 021f 	and.w	r2, r0, #31
 8001388:	0940      	lsrs	r0, r0, #5
 800138a:	2301      	movs	r3, #1
 800138c:	4093      	lsls	r3, r2
 800138e:	4a02      	ldr	r2, [pc, #8]	; (8001398 <HAL_NVIC_EnableIRQ+0x14>)
 8001390:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e100 	.word	0xe000e100

0800139c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	3801      	subs	r0, #1
 800139e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013a2:	d20a      	bcs.n	80013ba <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_SYSTICK_Config+0x24>)
 80013a6:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <HAL_SYSTICK_Config+0x28>)
 80013aa:	21f0      	movs	r1, #240	; 0xf0
 80013ac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b0:	2000      	movs	r0, #0
 80013b2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b4:	2207      	movs	r2, #7
 80013b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013ba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000e010 	.word	0xe000e010
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013c8:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80013ca:	6805      	ldr	r5, [r0, #0]
 80013cc:	682c      	ldr	r4, [r5, #0]
 80013ce:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80013d2:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80013d4:	6804      	ldr	r4, [r0, #0]
 80013d6:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013d8:	6883      	ldr	r3, [r0, #8]
 80013da:	2b40      	cmp	r3, #64	; 0x40
 80013dc:	d005      	beq.n	80013ea <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80013de:	6803      	ldr	r3, [r0, #0]
 80013e0:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80013e2:	6803      	ldr	r3, [r0, #0]
 80013e4:	60da      	str	r2, [r3, #12]
  }
}
 80013e6:	bc30      	pop	{r4, r5}
 80013e8:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80013ea:	6803      	ldr	r3, [r0, #0]
 80013ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80013ee:	6803      	ldr	r3, [r0, #0]
 80013f0:	60d9      	str	r1, [r3, #12]
 80013f2:	e7f8      	b.n	80013e6 <DMA_SetConfig+0x1e>

080013f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013f4:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013f6:	6801      	ldr	r1, [r0, #0]
 80013f8:	b2ca      	uxtb	r2, r1
 80013fa:	3a10      	subs	r2, #16
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <DMA_CalcBaseAndBitshift+0x34>)
 80013fe:	fba3 4302 	umull	r4, r3, r3, r2
 8001402:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001404:	4c09      	ldr	r4, [pc, #36]	; (800142c <DMA_CalcBaseAndBitshift+0x38>)
 8001406:	5ce3      	ldrb	r3, [r4, r3]
 8001408:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 800140a:	2a5f      	cmp	r2, #95	; 0x5f
 800140c:	d907      	bls.n	800141e <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <DMA_CalcBaseAndBitshift+0x3c>)
 8001410:	400b      	ands	r3, r1
 8001412:	3304      	adds	r3, #4
 8001414:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001416:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001418:	f85d 4b04 	ldr.w	r4, [sp], #4
 800141c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <DMA_CalcBaseAndBitshift+0x3c>)
 8001420:	400b      	ands	r3, r1
 8001422:	6583      	str	r3, [r0, #88]	; 0x58
 8001424:	e7f7      	b.n	8001416 <DMA_CalcBaseAndBitshift+0x22>
 8001426:	bf00      	nop
 8001428:	aaaaaaab 	.word	0xaaaaaaab
 800142c:	08008774 	.word	0x08008774
 8001430:	fffffc00 	.word	0xfffffc00

08001434 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001434:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001436:	6982      	ldr	r2, [r0, #24]
 8001438:	b992      	cbnz	r2, 8001460 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800143a:	2b01      	cmp	r3, #1
 800143c:	d00a      	beq.n	8001454 <DMA_CheckFifoParam+0x20>
 800143e:	2b02      	cmp	r3, #2
 8001440:	d002      	beq.n	8001448 <DMA_CheckFifoParam+0x14>
 8001442:	b10b      	cbz	r3, 8001448 <DMA_CheckFifoParam+0x14>
 8001444:	2000      	movs	r0, #0
 8001446:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001448:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800144a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800144e:	d128      	bne.n	80014a2 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001450:	2000      	movs	r0, #0
 8001452:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001454:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001456:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800145a:	d024      	beq.n	80014a6 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 800145c:	2000      	movs	r0, #0
 800145e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001460:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001464:	d009      	beq.n	800147a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001466:	2b02      	cmp	r3, #2
 8001468:	d925      	bls.n	80014b6 <DMA_CheckFifoParam+0x82>
 800146a:	2b03      	cmp	r3, #3
 800146c:	d125      	bne.n	80014ba <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800146e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001470:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001474:	d123      	bne.n	80014be <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001476:	2000      	movs	r0, #0
 8001478:	4770      	bx	lr
    switch (tmp)
 800147a:	2b03      	cmp	r3, #3
 800147c:	d803      	bhi.n	8001486 <DMA_CheckFifoParam+0x52>
 800147e:	e8df f003 	tbb	[pc, r3]
 8001482:	0414      	.short	0x0414
 8001484:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001486:	2000      	movs	r0, #0
 8001488:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800148a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800148c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001490:	d10d      	bne.n	80014ae <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001492:	2000      	movs	r0, #0
 8001494:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001496:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001498:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800149c:	d009      	beq.n	80014b2 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800149e:	2000      	movs	r0, #0
 80014a0:	4770      	bx	lr
        status = HAL_ERROR;
 80014a2:	2001      	movs	r0, #1
 80014a4:	4770      	bx	lr
        status = HAL_ERROR;
 80014a6:	2001      	movs	r0, #1
 80014a8:	4770      	bx	lr
      status = HAL_ERROR;
 80014aa:	2001      	movs	r0, #1
 80014ac:	4770      	bx	lr
        status = HAL_ERROR;
 80014ae:	2001      	movs	r0, #1
 80014b0:	4770      	bx	lr
        status = HAL_ERROR;
 80014b2:	2001      	movs	r0, #1
 80014b4:	4770      	bx	lr
      status = HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
 80014b8:	4770      	bx	lr
    switch (tmp)
 80014ba:	2000      	movs	r0, #0
 80014bc:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80014be:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80014c0:	4770      	bx	lr
	...

080014c4 <HAL_DMA_Init>:
{
 80014c4:	b570      	push	{r4, r5, r6, lr}
 80014c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014c8:	f7ff ff04 	bl	80012d4 <HAL_GetTick>
  if(hdma == NULL)
 80014cc:	2c00      	cmp	r4, #0
 80014ce:	d05b      	beq.n	8001588 <HAL_DMA_Init+0xc4>
 80014d0:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80014d2:	2300      	movs	r3, #0
 80014d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80014d8:	2302      	movs	r3, #2
 80014da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80014de:	6822      	ldr	r2, [r4, #0]
 80014e0:	6813      	ldr	r3, [r2, #0]
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	f012 0f01 	tst.w	r2, #1
 80014f0:	d00a      	beq.n	8001508 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014f2:	f7ff feef 	bl	80012d4 <HAL_GetTick>
 80014f6:	1b43      	subs	r3, r0, r5
 80014f8:	2b05      	cmp	r3, #5
 80014fa:	d9f5      	bls.n	80014e8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014fc:	2320      	movs	r3, #32
 80014fe:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001500:	2003      	movs	r0, #3
 8001502:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001506:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001508:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800150a:	4820      	ldr	r0, [pc, #128]	; (800158c <HAL_DMA_Init+0xc8>)
 800150c:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800150e:	6861      	ldr	r1, [r4, #4]
 8001510:	68a2      	ldr	r2, [r4, #8]
 8001512:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001514:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001516:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001518:	6921      	ldr	r1, [r4, #16]
 800151a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800151c:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001520:	69a1      	ldr	r1, [r4, #24]
 8001522:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001524:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001526:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001528:	6a21      	ldr	r1, [r4, #32]
 800152a:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800152c:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800152e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001530:	2904      	cmp	r1, #4
 8001532:	d01e      	beq.n	8001572 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001534:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001536:	6826      	ldr	r6, [r4, #0]
 8001538:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800153a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800153e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001540:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001542:	2b04      	cmp	r3, #4
 8001544:	d107      	bne.n	8001556 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001548:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800154a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800154c:	b11b      	cbz	r3, 8001556 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800154e:	4620      	mov	r0, r4
 8001550:	f7ff ff70 	bl	8001434 <DMA_CheckFifoParam>
 8001554:	b990      	cbnz	r0, 800157c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001556:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001558:	4620      	mov	r0, r4
 800155a:	f7ff ff4b 	bl	80013f4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800155e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001560:	233f      	movs	r3, #63	; 0x3f
 8001562:	4093      	lsls	r3, r2
 8001564:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001566:	2000      	movs	r0, #0
 8001568:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800156a:	2301      	movs	r3, #1
 800156c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001570:	e7c9      	b.n	8001506 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001572:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001574:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001576:	4301      	orrs	r1, r0
 8001578:	430a      	orrs	r2, r1
 800157a:	e7db      	b.n	8001534 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800157c:	2340      	movs	r3, #64	; 0x40
 800157e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001580:	2001      	movs	r0, #1
 8001582:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001586:	e7be      	b.n	8001506 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001588:	2001      	movs	r0, #1
 800158a:	e7bc      	b.n	8001506 <HAL_DMA_Init+0x42>
 800158c:	e010803f 	.word	0xe010803f

08001590 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8001590:	b338      	cbz	r0, 80015e2 <HAL_DMA_DeInit+0x52>
{
 8001592:	b538      	push	{r3, r4, r5, lr}
 8001594:	4605      	mov	r5, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001596:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 800159a:	b2c0      	uxtb	r0, r0
 800159c:	2802      	cmp	r0, #2
 800159e:	d01f      	beq.n	80015e0 <HAL_DMA_DeInit+0x50>
  __HAL_DMA_DISABLE(hdma);
 80015a0:	682a      	ldr	r2, [r5, #0]
 80015a2:	6813      	ldr	r3, [r2, #0]
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 80015aa:	682b      	ldr	r3, [r5, #0]
 80015ac:	2400      	movs	r4, #0
 80015ae:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80015b0:	682b      	ldr	r3, [r5, #0]
 80015b2:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80015b4:	682b      	ldr	r3, [r5, #0]
 80015b6:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80015b8:	682b      	ldr	r3, [r5, #0]
 80015ba:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80015bc:	682b      	ldr	r3, [r5, #0]
 80015be:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80015c0:	682b      	ldr	r3, [r5, #0]
 80015c2:	2221      	movs	r2, #33	; 0x21
 80015c4:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015c6:	4628      	mov	r0, r5
 80015c8:	f7ff ff14 	bl	80013f4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015cc:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80015ce:	233f      	movs	r3, #63	; 0x3f
 80015d0:	4093      	lsls	r3, r2
 80015d2:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d4:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 80015d6:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80015da:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  return HAL_OK;
 80015de:	4620      	mov	r0, r4
}
 80015e0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80015e2:	2001      	movs	r0, #1
}
 80015e4:	4770      	bx	lr

080015e6 <HAL_DMA_Start_IT>:
{
 80015e6:	b538      	push	{r3, r4, r5, lr}
 80015e8:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ea:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80015ec:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80015f0:	2801      	cmp	r0, #1
 80015f2:	d030      	beq.n	8001656 <HAL_DMA_Start_IT+0x70>
 80015f4:	2001      	movs	r0, #1
 80015f6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80015fa:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80015fe:	b2c0      	uxtb	r0, r0
 8001600:	2801      	cmp	r0, #1
 8001602:	d004      	beq.n	800160e <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001604:	2300      	movs	r3, #0
 8001606:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 800160a:	2002      	movs	r0, #2
}
 800160c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800160e:	2002      	movs	r0, #2
 8001610:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001614:	2000      	movs	r0, #0
 8001616:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001618:	4620      	mov	r0, r4
 800161a:	f7ff fed5 	bl	80013c8 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800161e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001620:	233f      	movs	r3, #63	; 0x3f
 8001622:	4093      	lsls	r3, r2
 8001624:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001626:	6822      	ldr	r2, [r4, #0]
 8001628:	6813      	ldr	r3, [r2, #0]
 800162a:	f043 0316 	orr.w	r3, r3, #22
 800162e:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001630:	6822      	ldr	r2, [r4, #0]
 8001632:	6953      	ldr	r3, [r2, #20]
 8001634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001638:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800163a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800163c:	b123      	cbz	r3, 8001648 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 800163e:	6822      	ldr	r2, [r4, #0]
 8001640:	6813      	ldr	r3, [r2, #0]
 8001642:	f043 0308 	orr.w	r3, r3, #8
 8001646:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001648:	6822      	ldr	r2, [r4, #0]
 800164a:	6813      	ldr	r3, [r2, #0]
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001652:	2000      	movs	r0, #0
 8001654:	e7da      	b.n	800160c <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001656:	2002      	movs	r0, #2
 8001658:	e7d8      	b.n	800160c <HAL_DMA_Start_IT+0x26>

0800165a <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800165a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d003      	beq.n	800166c <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001668:	2001      	movs	r0, #1
 800166a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800166c:	2305      	movs	r3, #5
 800166e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001672:	6802      	ldr	r2, [r0, #0]
 8001674:	6813      	ldr	r3, [r2, #0]
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800167c:	2000      	movs	r0, #0
}
 800167e:	4770      	bx	lr

08001680 <HAL_DMA_IRQHandler>:
{
 8001680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001682:	b083      	sub	sp, #12
 8001684:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 800168a:	4b72      	ldr	r3, [pc, #456]	; (8001854 <HAL_DMA_IRQHandler+0x1d4>)
 800168c:	681d      	ldr	r5, [r3, #0]
 800168e:	4b72      	ldr	r3, [pc, #456]	; (8001858 <HAL_DMA_IRQHandler+0x1d8>)
 8001690:	fba3 3505 	umull	r3, r5, r3, r5
 8001694:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001696:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001698:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800169a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800169c:	2308      	movs	r3, #8
 800169e:	4093      	lsls	r3, r2
 80016a0:	4233      	tst	r3, r6
 80016a2:	d010      	beq.n	80016c6 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016a4:	6803      	ldr	r3, [r0, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	f012 0f04 	tst.w	r2, #4
 80016ac:	d00b      	beq.n	80016c6 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	f022 0204 	bic.w	r2, r2, #4
 80016b4:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016b6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80016b8:	2308      	movs	r3, #8
 80016ba:	4093      	lsls	r3, r2
 80016bc:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016be:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016c6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80016c8:	4b64      	ldr	r3, [pc, #400]	; (800185c <HAL_DMA_IRQHandler+0x1dc>)
 80016ca:	4093      	lsls	r3, r2
 80016cc:	4233      	tst	r3, r6
 80016ce:	d009      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016d0:	6822      	ldr	r2, [r4, #0]
 80016d2:	6952      	ldr	r2, [r2, #20]
 80016d4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80016d8:	d004      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016da:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016e4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80016e6:	4b5e      	ldr	r3, [pc, #376]	; (8001860 <HAL_DMA_IRQHandler+0x1e0>)
 80016e8:	4093      	lsls	r3, r2
 80016ea:	4233      	tst	r3, r6
 80016ec:	d009      	beq.n	8001702 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016ee:	6822      	ldr	r2, [r4, #0]
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	f012 0f02 	tst.w	r2, #2
 80016f6:	d004      	beq.n	8001702 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016f8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001702:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001704:	2310      	movs	r3, #16
 8001706:	4093      	lsls	r3, r2
 8001708:	4233      	tst	r3, r6
 800170a:	d024      	beq.n	8001756 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800170c:	6822      	ldr	r2, [r4, #0]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	f012 0f08 	tst.w	r2, #8
 8001714:	d01f      	beq.n	8001756 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001716:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001720:	d00d      	beq.n	800173e <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001728:	d104      	bne.n	8001734 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800172a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800172c:	b19b      	cbz	r3, 8001756 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800172e:	4620      	mov	r0, r4
 8001730:	4798      	blx	r3
 8001732:	e010      	b.n	8001756 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001734:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001736:	b173      	cbz	r3, 8001756 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001738:	4620      	mov	r0, r4
 800173a:	4798      	blx	r3
 800173c:	e00b      	b.n	8001756 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001744:	d103      	bne.n	800174e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	f022 0208 	bic.w	r2, r2, #8
 800174c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800174e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001750:	b10b      	cbz	r3, 8001756 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001752:	4620      	mov	r0, r4
 8001754:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001756:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001758:	2320      	movs	r3, #32
 800175a:	4093      	lsls	r3, r2
 800175c:	4233      	tst	r3, r6
 800175e:	d055      	beq.n	800180c <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001760:	6822      	ldr	r2, [r4, #0]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	f012 0f10 	tst.w	r2, #16
 8001768:	d050      	beq.n	800180c <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800176a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800176c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b05      	cmp	r3, #5
 8001774:	d00e      	beq.n	8001794 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001776:	6823      	ldr	r3, [r4, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800177e:	d033      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001786:	d12a      	bne.n	80017de <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001788:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800178a:	2b00      	cmp	r3, #0
 800178c:	d03e      	beq.n	800180c <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800178e:	4620      	mov	r0, r4
 8001790:	4798      	blx	r3
 8001792:	e03b      	b.n	800180c <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001794:	6822      	ldr	r2, [r4, #0]
 8001796:	6813      	ldr	r3, [r2, #0]
 8001798:	f023 0316 	bic.w	r3, r3, #22
 800179c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800179e:	6822      	ldr	r2, [r4, #0]
 80017a0:	6953      	ldr	r3, [r2, #20]
 80017a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017a6:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017aa:	b1a3      	cbz	r3, 80017d6 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017ac:	6822      	ldr	r2, [r4, #0]
 80017ae:	6813      	ldr	r3, [r2, #0]
 80017b0:	f023 0308 	bic.w	r3, r3, #8
 80017b4:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017b6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80017b8:	233f      	movs	r3, #63	; 0x3f
 80017ba:	4093      	lsls	r3, r2
 80017bc:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80017be:	2300      	movs	r3, #0
 80017c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80017c4:	2301      	movs	r3, #1
 80017c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80017ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d03f      	beq.n	8001850 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80017d0:	4620      	mov	r0, r4
 80017d2:	4798      	blx	r3
        return;
 80017d4:	e03c      	b.n	8001850 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1e7      	bne.n	80017ac <HAL_DMA_IRQHandler+0x12c>
 80017dc:	e7eb      	b.n	80017b6 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80017de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017e0:	b1a3      	cbz	r3, 800180c <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80017e2:	4620      	mov	r0, r4
 80017e4:	4798      	blx	r3
 80017e6:	e011      	b.n	800180c <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	f412 7f80 	tst.w	r2, #256	; 0x100
 80017ee:	d109      	bne.n	8001804 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	f022 0210 	bic.w	r2, r2, #16
 80017f6:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80017f8:	2300      	movs	r3, #0
 80017fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80017fe:	2301      	movs	r3, #1
 8001800:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001804:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001806:	b10b      	cbz	r3, 800180c <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001808:	4620      	mov	r0, r4
 800180a:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800180c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800180e:	b1fb      	cbz	r3, 8001850 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001810:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001812:	f013 0f01 	tst.w	r3, #1
 8001816:	d017      	beq.n	8001848 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001818:	2305      	movs	r3, #5
 800181a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800181e:	6822      	ldr	r2, [r4, #0]
 8001820:	6813      	ldr	r3, [r2, #0]
 8001822:	f023 0301 	bic.w	r3, r3, #1
 8001826:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001828:	9b01      	ldr	r3, [sp, #4]
 800182a:	3301      	adds	r3, #1
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	42ab      	cmp	r3, r5
 8001830:	d804      	bhi.n	800183c <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f013 0f01 	tst.w	r3, #1
 800183a:	d1f5      	bne.n	8001828 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 800183c:	2300      	movs	r3, #0
 800183e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001842:	2301      	movs	r3, #1
 8001844:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001848:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800184a:	b10b      	cbz	r3, 8001850 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 800184c:	4620      	mov	r0, r4
 800184e:	4798      	blx	r3
}
 8001850:	b003      	add	sp, #12
 8001852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001854:	20000030 	.word	0x20000030
 8001858:	1b4e81b5 	.word	0x1b4e81b5
 800185c:	00800001 	.word	0x00800001
 8001860:	00800004 	.word	0x00800004

08001864 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001864:	2300      	movs	r3, #0
 8001866:	2b0f      	cmp	r3, #15
 8001868:	f200 80e3 	bhi.w	8001a32 <HAL_GPIO_Init+0x1ce>
{
 800186c:	b4f0      	push	{r4, r5, r6, r7}
 800186e:	b082      	sub	sp, #8
 8001870:	e039      	b.n	80018e6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001872:	2209      	movs	r2, #9
 8001874:	e000      	b.n	8001878 <HAL_GPIO_Init+0x14>
 8001876:	2200      	movs	r2, #0
 8001878:	40b2      	lsls	r2, r6
 800187a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800187c:	3402      	adds	r4, #2
 800187e:	4e6d      	ldr	r6, [pc, #436]	; (8001a34 <HAL_GPIO_Init+0x1d0>)
 8001880:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001884:	4a6c      	ldr	r2, [pc, #432]	; (8001a38 <HAL_GPIO_Init+0x1d4>)
 8001886:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001888:	43ea      	mvns	r2, r5
 800188a:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800188e:	684f      	ldr	r7, [r1, #4]
 8001890:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001894:	d001      	beq.n	800189a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001896:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 800189a:	4c67      	ldr	r4, [pc, #412]	; (8001a38 <HAL_GPIO_Init+0x1d4>)
 800189c:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800189e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80018a0:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a4:	684f      	ldr	r7, [r1, #4]
 80018a6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80018aa:	d001      	beq.n	80018b0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80018ac:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80018b0:	4c61      	ldr	r4, [pc, #388]	; (8001a38 <HAL_GPIO_Init+0x1d4>)
 80018b2:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018b4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80018b6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ba:	684f      	ldr	r7, [r1, #4]
 80018bc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80018c0:	d001      	beq.n	80018c6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80018c2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80018c6:	4c5c      	ldr	r4, [pc, #368]	; (8001a38 <HAL_GPIO_Init+0x1d4>)
 80018c8:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80018ca:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80018cc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018ce:	684e      	ldr	r6, [r1, #4]
 80018d0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80018d4:	d001      	beq.n	80018da <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80018d6:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80018da:	4c57      	ldr	r4, [pc, #348]	; (8001a38 <HAL_GPIO_Init+0x1d4>)
 80018dc:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80018de:	3301      	adds	r3, #1
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	f200 80a3 	bhi.w	8001a2c <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
 80018e6:	2201      	movs	r2, #1
 80018e8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ea:	680c      	ldr	r4, [r1, #0]
 80018ec:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80018f0:	ea32 0404 	bics.w	r4, r2, r4
 80018f4:	d1f3      	bne.n	80018de <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f6:	684c      	ldr	r4, [r1, #4]
 80018f8:	2c12      	cmp	r4, #18
 80018fa:	bf18      	it	ne
 80018fc:	2c02      	cmpne	r4, #2
 80018fe:	d110      	bne.n	8001922 <HAL_GPIO_Init+0xbe>
        temp = GPIOx->AFR[position >> 3];
 8001900:	08de      	lsrs	r6, r3, #3
 8001902:	3608      	adds	r6, #8
 8001904:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001908:	f003 0407 	and.w	r4, r3, #7
 800190c:	00a7      	lsls	r7, r4, #2
 800190e:	240f      	movs	r4, #15
 8001910:	40bc      	lsls	r4, r7
 8001912:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001916:	690c      	ldr	r4, [r1, #16]
 8001918:	40bc      	lsls	r4, r7
 800191a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 800191e:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8001922:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001926:	005e      	lsls	r6, r3, #1
 8001928:	2403      	movs	r4, #3
 800192a:	40b4      	lsls	r4, r6
 800192c:	43e7      	mvns	r7, r4
 800192e:	ea2c 0c04 	bic.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001932:	684c      	ldr	r4, [r1, #4]
 8001934:	f004 0403 	and.w	r4, r4, #3
 8001938:	40b4      	lsls	r4, r6
 800193a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800193e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001940:	684c      	ldr	r4, [r1, #4]
 8001942:	f104 3cff 	add.w	ip, r4, #4294967295
 8001946:	2c11      	cmp	r4, #17
 8001948:	bf18      	it	ne
 800194a:	f1bc 0f01 	cmpne.w	ip, #1
 800194e:	d901      	bls.n	8001954 <HAL_GPIO_Init+0xf0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001950:	2c12      	cmp	r4, #18
 8001952:	d110      	bne.n	8001976 <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8001954:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001956:	ea07 0c04 	and.w	ip, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 800195a:	68cc      	ldr	r4, [r1, #12]
 800195c:	40b4      	lsls	r4, r6
 800195e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8001962:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001964:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001966:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800196a:	684c      	ldr	r4, [r1, #4]
 800196c:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8001970:	409c      	lsls	r4, r3
 8001972:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8001974:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8001976:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001978:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800197a:	688a      	ldr	r2, [r1, #8]
 800197c:	40b2      	lsls	r2, r6
 800197e:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8001980:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001982:	684a      	ldr	r2, [r1, #4]
 8001984:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001988:	d0a9      	beq.n	80018de <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	4a2c      	ldr	r2, [pc, #176]	; (8001a3c <HAL_GPIO_Init+0x1d8>)
 800198c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800198e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001992:	6454      	str	r4, [r2, #68]	; 0x44
 8001994:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001996:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800199a:	9201      	str	r2, [sp, #4]
 800199c:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800199e:	089c      	lsrs	r4, r3, #2
 80019a0:	1ca6      	adds	r6, r4, #2
 80019a2:	4a24      	ldr	r2, [pc, #144]	; (8001a34 <HAL_GPIO_Init+0x1d0>)
 80019a4:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019a8:	f003 0203 	and.w	r2, r3, #3
 80019ac:	0096      	lsls	r6, r2, #2
 80019ae:	220f      	movs	r2, #15
 80019b0:	40b2      	lsls	r2, r6
 80019b2:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019b6:	4a22      	ldr	r2, [pc, #136]	; (8001a40 <HAL_GPIO_Init+0x1dc>)
 80019b8:	4290      	cmp	r0, r2
 80019ba:	f43f af5c 	beq.w	8001876 <HAL_GPIO_Init+0x12>
 80019be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019c2:	4290      	cmp	r0, r2
 80019c4:	d022      	beq.n	8001a0c <HAL_GPIO_Init+0x1a8>
 80019c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019ca:	4290      	cmp	r0, r2
 80019cc:	d020      	beq.n	8001a10 <HAL_GPIO_Init+0x1ac>
 80019ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019d2:	4290      	cmp	r0, r2
 80019d4:	d01e      	beq.n	8001a14 <HAL_GPIO_Init+0x1b0>
 80019d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019da:	4290      	cmp	r0, r2
 80019dc:	d01c      	beq.n	8001a18 <HAL_GPIO_Init+0x1b4>
 80019de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019e2:	4290      	cmp	r0, r2
 80019e4:	d01a      	beq.n	8001a1c <HAL_GPIO_Init+0x1b8>
 80019e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019ea:	4290      	cmp	r0, r2
 80019ec:	d018      	beq.n	8001a20 <HAL_GPIO_Init+0x1bc>
 80019ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019f2:	4290      	cmp	r0, r2
 80019f4:	d016      	beq.n	8001a24 <HAL_GPIO_Init+0x1c0>
 80019f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019fa:	4290      	cmp	r0, r2
 80019fc:	d014      	beq.n	8001a28 <HAL_GPIO_Init+0x1c4>
 80019fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a02:	4290      	cmp	r0, r2
 8001a04:	f43f af35 	beq.w	8001872 <HAL_GPIO_Init+0xe>
 8001a08:	220a      	movs	r2, #10
 8001a0a:	e735      	b.n	8001878 <HAL_GPIO_Init+0x14>
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	e733      	b.n	8001878 <HAL_GPIO_Init+0x14>
 8001a10:	2202      	movs	r2, #2
 8001a12:	e731      	b.n	8001878 <HAL_GPIO_Init+0x14>
 8001a14:	2203      	movs	r2, #3
 8001a16:	e72f      	b.n	8001878 <HAL_GPIO_Init+0x14>
 8001a18:	2204      	movs	r2, #4
 8001a1a:	e72d      	b.n	8001878 <HAL_GPIO_Init+0x14>
 8001a1c:	2205      	movs	r2, #5
 8001a1e:	e72b      	b.n	8001878 <HAL_GPIO_Init+0x14>
 8001a20:	2206      	movs	r2, #6
 8001a22:	e729      	b.n	8001878 <HAL_GPIO_Init+0x14>
 8001a24:	2207      	movs	r2, #7
 8001a26:	e727      	b.n	8001878 <HAL_GPIO_Init+0x14>
 8001a28:	2208      	movs	r2, #8
 8001a2a:	e725      	b.n	8001878 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001a2c:	b002      	add	sp, #8
 8001a2e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a30:	4770      	bx	lr
 8001a32:	4770      	bx	lr
 8001a34:	40013800 	.word	0x40013800
 8001a38:	40013c00 	.word	0x40013c00
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020000 	.word	0x40020000

08001a44 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a44:	6803      	ldr	r3, [r0, #0]
 8001a46:	699a      	ldr	r2, [r3, #24]
 8001a48:	f012 0f02 	tst.w	r2, #2
 8001a4c:	d001      	beq.n	8001a52 <I2C_Flush_TXDR+0xe>
  {
     hi2c->Instance->TXDR = 0x00U;
 8001a4e:	2200      	movs	r2, #0
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a52:	6803      	ldr	r3, [r0, #0]
 8001a54:	699a      	ldr	r2, [r3, #24]
 8001a56:	f012 0f01 	tst.w	r2, #1
 8001a5a:	d103      	bne.n	8001a64 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a5c:	699a      	ldr	r2, [r3, #24]
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	619a      	str	r2, [r3, #24]
  }
}
 8001a64:	4770      	bx	lr

08001a66 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001a66:	b410      	push	{r4}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8001a68:	6804      	ldr	r4, [r0, #0]
 8001a6a:	6860      	ldr	r0, [r4, #4]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001a6c:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 8001a70:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
 8001a74:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8001a78:	f020 0003 	bic.w	r0, r0, #3

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8001a7c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001a80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001a84:	4319      	orrs	r1, r3
 8001a86:	9b01      	ldr	r3, [sp, #4]
 8001a88:	4319      	orrs	r1, r3
 8001a8a:	4301      	orrs	r1, r0
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8001a8c:	6061      	str	r1, [r4, #4]
}
 8001a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <I2C_IsAcknowledgeFailed>:
{
 8001a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a96:	4605      	mov	r5, r0
 8001a98:	460e      	mov	r6, r1
 8001a9a:	4617      	mov	r7, r2
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a9c:	6803      	ldr	r3, [r0, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f013 0f10 	tst.w	r3, #16
 8001aa4:	d101      	bne.n	8001aaa <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8001aa6:	2000      	movs	r0, #0
}
 8001aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001aaa:	682b      	ldr	r3, [r5, #0]
 8001aac:	699c      	ldr	r4, [r3, #24]
 8001aae:	f014 0f20 	tst.w	r4, #32
 8001ab2:	d112      	bne.n	8001ada <I2C_IsAcknowledgeFailed+0x46>
      if(Timeout != HAL_MAX_DELAY)
 8001ab4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001ab8:	d0f7      	beq.n	8001aaa <I2C_IsAcknowledgeFailed+0x16>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001aba:	b126      	cbz	r6, 8001ac6 <I2C_IsAcknowledgeFailed+0x32>
 8001abc:	f7ff fc0a 	bl	80012d4 <HAL_GetTick>
 8001ac0:	1bc0      	subs	r0, r0, r7
 8001ac2:	42b0      	cmp	r0, r6
 8001ac4:	d9f1      	bls.n	8001aaa <I2C_IsAcknowledgeFailed+0x16>
          hi2c->State= HAL_I2C_STATE_READY;
 8001ac6:	2320      	movs	r3, #32
 8001ac8:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8001ad2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_TIMEOUT;
 8001ad6:	2003      	movs	r0, #3
 8001ad8:	e7e6      	b.n	8001aa8 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ada:	2210      	movs	r2, #16
 8001adc:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ade:	682b      	ldr	r3, [r5, #0]
 8001ae0:	2420      	movs	r4, #32
 8001ae2:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001ae4:	4628      	mov	r0, r5
 8001ae6:	f7ff ffad 	bl	8001a44 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001aea:	682a      	ldr	r2, [r5, #0]
 8001aec:	6853      	ldr	r3, [r2, #4]
 8001aee:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001af2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001af6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001b00:	2304      	movs	r3, #4
 8001b02:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 8001b04:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001b0e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8001b12:	2001      	movs	r0, #1
 8001b14:	e7c8      	b.n	8001aa8 <I2C_IsAcknowledgeFailed+0x14>

08001b16 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001b16:	b570      	push	{r4, r5, r6, lr}
 8001b18:	4604      	mov	r4, r0
 8001b1a:	460d      	mov	r5, r1
 8001b1c:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f013 0f02 	tst.w	r3, #2
 8001b26:	d11c      	bne.n	8001b62 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b28:	4632      	mov	r2, r6
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f7ff ffb1 	bl	8001a94 <I2C_IsAcknowledgeFailed>
 8001b32:	b9c0      	cbnz	r0, 8001b66 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8001b34:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001b38:	d0f1      	beq.n	8001b1e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001b3a:	b125      	cbz	r5, 8001b46 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8001b3c:	f7ff fbca 	bl	80012d4 <HAL_GetTick>
 8001b40:	1b80      	subs	r0, r0, r6
 8001b42:	42a8      	cmp	r0, r5
 8001b44:	d9eb      	bls.n	8001b1e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b48:	f043 0320 	orr.w	r3, r3, #32
 8001b4c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 8001b4e:	2320      	movs	r3, #32
 8001b50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001b5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8001b5e:	2003      	movs	r0, #3
 8001b60:	e000      	b.n	8001b64 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001b62:	2000      	movs	r0, #0
}
 8001b64:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001b66:	2001      	movs	r0, #1
 8001b68:	e7fc      	b.n	8001b64 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

08001b6a <I2C_WaitOnFlagUntilTimeout>:
{
 8001b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b6e:	4606      	mov	r6, r0
 8001b70:	4688      	mov	r8, r1
 8001b72:	4617      	mov	r7, r2
 8001b74:	461d      	mov	r5, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b76:	6834      	ldr	r4, [r6, #0]
 8001b78:	69a4      	ldr	r4, [r4, #24]
 8001b7a:	ea38 0304 	bics.w	r3, r8, r4
 8001b7e:	bf0c      	ite	eq
 8001b80:	2401      	moveq	r4, #1
 8001b82:	2400      	movne	r4, #0
 8001b84:	42bc      	cmp	r4, r7
 8001b86:	d113      	bne.n	8001bb0 <I2C_WaitOnFlagUntilTimeout+0x46>
    if(Timeout != HAL_MAX_DELAY)
 8001b88:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001b8c:	d0f3      	beq.n	8001b76 <I2C_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001b8e:	b12d      	cbz	r5, 8001b9c <I2C_WaitOnFlagUntilTimeout+0x32>
 8001b90:	f7ff fba0 	bl	80012d4 <HAL_GetTick>
 8001b94:	9b06      	ldr	r3, [sp, #24]
 8001b96:	1ac0      	subs	r0, r0, r3
 8001b98:	42a8      	cmp	r0, r5
 8001b9a:	d9ec      	bls.n	8001b76 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->State= HAL_I2C_STATE_READY;
 8001b9c:	2320      	movs	r3, #32
 8001b9e:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001ba8:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_TIMEOUT;
 8001bac:	2003      	movs	r0, #3
 8001bae:	e000      	b.n	8001bb2 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8001bb0:	2000      	movs	r0, #0
}
 8001bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001bb6 <I2C_RequestMemoryWrite>:
{
 8001bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	4690      	mov	r8, r2
 8001bc0:	461d      	mov	r5, r3
 8001bc2:	9e08      	ldr	r6, [sp, #32]
 8001bc4:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001bc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bd0:	b2ea      	uxtb	r2, r5
 8001bd2:	f7ff ff48 	bl	8001a66 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bd6:	463a      	mov	r2, r7
 8001bd8:	4631      	mov	r1, r6
 8001bda:	4620      	mov	r0, r4
 8001bdc:	f7ff ff9b 	bl	8001b16 <I2C_WaitOnTXISFlagUntilTimeout>
 8001be0:	b130      	cbz	r0, 8001bf0 <I2C_RequestMemoryWrite+0x3a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001be2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d001      	beq.n	8001bec <I2C_RequestMemoryWrite+0x36>
      return HAL_TIMEOUT;
 8001be8:	2003      	movs	r0, #3
 8001bea:	e00f      	b.n	8001c0c <I2C_RequestMemoryWrite+0x56>
      return HAL_ERROR;
 8001bec:	2001      	movs	r0, #1
 8001bee:	e00d      	b.n	8001c0c <I2C_RequestMemoryWrite+0x56>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bf0:	2d01      	cmp	r5, #1
 8001bf2:	d10e      	bne.n	8001c12 <I2C_RequestMemoryWrite+0x5c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	fa5f f288 	uxtb.w	r2, r8
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001bfc:	9700      	str	r7, [sp, #0]
 8001bfe:	4633      	mov	r3, r6
 8001c00:	2200      	movs	r2, #0
 8001c02:	2180      	movs	r1, #128	; 0x80
 8001c04:	4620      	mov	r0, r4
 8001c06:	f7ff ffb0 	bl	8001b6a <I2C_WaitOnFlagUntilTimeout>
 8001c0a:	b9c0      	cbnz	r0, 8001c3e <I2C_RequestMemoryWrite+0x88>
}
 8001c0c:	b002      	add	sp, #8
 8001c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001c18:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c1a:	463a      	mov	r2, r7
 8001c1c:	4631      	mov	r1, r6
 8001c1e:	4620      	mov	r0, r4
 8001c20:	f7ff ff79 	bl	8001b16 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c24:	b130      	cbz	r0, 8001c34 <I2C_RequestMemoryWrite+0x7e>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d001      	beq.n	8001c30 <I2C_RequestMemoryWrite+0x7a>
        return HAL_TIMEOUT;
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	e7ed      	b.n	8001c0c <I2C_RequestMemoryWrite+0x56>
        return HAL_ERROR;
 8001c30:	2001      	movs	r0, #1
 8001c32:	e7eb      	b.n	8001c0c <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	fa5f f288 	uxtb.w	r2, r8
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
 8001c3c:	e7de      	b.n	8001bfc <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 8001c3e:	2003      	movs	r0, #3
 8001c40:	e7e4      	b.n	8001c0c <I2C_RequestMemoryWrite+0x56>

08001c42 <I2C_RequestMemoryRead>:
{
 8001c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	4604      	mov	r4, r0
 8001c4a:	4690      	mov	r8, r2
 8001c4c:	461d      	mov	r5, r3
 8001c4e:	9e08      	ldr	r6, [sp, #32]
 8001c50:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	b2ea      	uxtb	r2, r5
 8001c5c:	f7ff ff03 	bl	8001a66 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c60:	463a      	mov	r2, r7
 8001c62:	4631      	mov	r1, r6
 8001c64:	4620      	mov	r0, r4
 8001c66:	f7ff ff56 	bl	8001b16 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c6a:	b130      	cbz	r0, 8001c7a <I2C_RequestMemoryRead+0x38>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d001      	beq.n	8001c76 <I2C_RequestMemoryRead+0x34>
      return HAL_TIMEOUT;
 8001c72:	2003      	movs	r0, #3
 8001c74:	e00f      	b.n	8001c96 <I2C_RequestMemoryRead+0x54>
      return HAL_ERROR;
 8001c76:	2001      	movs	r0, #1
 8001c78:	e00d      	b.n	8001c96 <I2C_RequestMemoryRead+0x54>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c7a:	2d01      	cmp	r5, #1
 8001c7c:	d10e      	bne.n	8001c9c <I2C_RequestMemoryRead+0x5a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	fa5f f288 	uxtb.w	r2, r8
 8001c84:	629a      	str	r2, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001c86:	9700      	str	r7, [sp, #0]
 8001c88:	4633      	mov	r3, r6
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2140      	movs	r1, #64	; 0x40
 8001c8e:	4620      	mov	r0, r4
 8001c90:	f7ff ff6b 	bl	8001b6a <I2C_WaitOnFlagUntilTimeout>
 8001c94:	b9c0      	cbnz	r0, 8001cc8 <I2C_RequestMemoryRead+0x86>
}
 8001c96:	b002      	add	sp, #8
 8001c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001ca2:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca4:	463a      	mov	r2, r7
 8001ca6:	4631      	mov	r1, r6
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f7ff ff34 	bl	8001b16 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cae:	b130      	cbz	r0, 8001cbe <I2C_RequestMemoryRead+0x7c>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d001      	beq.n	8001cba <I2C_RequestMemoryRead+0x78>
        return HAL_TIMEOUT;
 8001cb6:	2003      	movs	r0, #3
 8001cb8:	e7ed      	b.n	8001c96 <I2C_RequestMemoryRead+0x54>
        return HAL_ERROR;
 8001cba:	2001      	movs	r0, #1
 8001cbc:	e7eb      	b.n	8001c96 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	fa5f f288 	uxtb.w	r2, r8
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28
 8001cc6:	e7de      	b.n	8001c86 <I2C_RequestMemoryRead+0x44>
    return HAL_TIMEOUT;
 8001cc8:	2003      	movs	r0, #3
 8001cca:	e7e4      	b.n	8001c96 <I2C_RequestMemoryRead+0x54>

08001ccc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001ccc:	b570      	push	{r4, r5, r6, lr}
 8001cce:	4605      	mov	r5, r0
 8001cd0:	460c      	mov	r4, r1
 8001cd2:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cd4:	682b      	ldr	r3, [r5, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f013 0f20 	tst.w	r3, #32
 8001cdc:	d119      	bne.n	8001d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cde:	4632      	mov	r2, r6
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	4628      	mov	r0, r5
 8001ce4:	f7ff fed6 	bl	8001a94 <I2C_IsAcknowledgeFailed>
 8001ce8:	b9a8      	cbnz	r0, 8001d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001cea:	b124      	cbz	r4, 8001cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
 8001cec:	f7ff faf2 	bl	80012d4 <HAL_GetTick>
 8001cf0:	1b80      	subs	r0, r0, r6
 8001cf2:	42a0      	cmp	r0, r4
 8001cf4:	d9ee      	bls.n	8001cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001cf8:	f043 0320 	orr.w	r3, r3, #32
 8001cfc:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8001cfe:	2320      	movs	r3, #32
 8001d00:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001d0a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_TIMEOUT;
 8001d0e:	2003      	movs	r0, #3
}
 8001d10:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001d12:	2000      	movs	r0, #0
 8001d14:	e7fc      	b.n	8001d10 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
      return HAL_ERROR;
 8001d16:	2001      	movs	r0, #1
 8001d18:	e7fa      	b.n	8001d10 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

08001d1a <HAL_I2C_MspInit>:
}
 8001d1a:	4770      	bx	lr

08001d1c <HAL_I2C_Init>:
  if(hi2c == NULL)
 8001d1c:	2800      	cmp	r0, #0
 8001d1e:	d057      	beq.n	8001dd0 <HAL_I2C_Init+0xb4>
{
 8001d20:	b510      	push	{r4, lr}
 8001d22:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001d24:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d041      	beq.n	8001db0 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d2c:	2324      	movs	r3, #36	; 0x24
 8001d2e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001d32:	6822      	ldr	r2, [r4, #0]
 8001d34:	6813      	ldr	r3, [r2, #0]
 8001d36:	f023 0301 	bic.w	r3, r3, #1
 8001d3a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d3c:	6863      	ldr	r3, [r4, #4]
 8001d3e:	6822      	ldr	r2, [r4, #0]
 8001d40:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001d44:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d46:	6822      	ldr	r2, [r4, #0]
 8001d48:	6893      	ldr	r3, [r2, #8]
 8001d4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d4e:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d50:	68e3      	ldr	r3, [r4, #12]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d031      	beq.n	8001dba <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d56:	68a3      	ldr	r3, [r4, #8]
 8001d58:	6822      	ldr	r2, [r4, #0]
 8001d5a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001d5e:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d60:	68e3      	ldr	r3, [r4, #12]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d02f      	beq.n	8001dc6 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d66:	6822      	ldr	r2, [r4, #0]
 8001d68:	6851      	ldr	r1, [r2, #4]
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <HAL_I2C_Init+0xb8>)
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d70:	6822      	ldr	r2, [r4, #0]
 8001d72:	68d3      	ldr	r3, [r2, #12]
 8001d74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d78:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d7a:	6923      	ldr	r3, [r4, #16]
 8001d7c:	6962      	ldr	r2, [r4, #20]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	69a1      	ldr	r1, [r4, #24]
 8001d82:	6822      	ldr	r2, [r4, #0]
 8001d84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d88:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d8a:	69e3      	ldr	r3, [r4, #28]
 8001d8c:	6a21      	ldr	r1, [r4, #32]
 8001d8e:	6822      	ldr	r2, [r4, #0]
 8001d90:	430b      	orrs	r3, r1
 8001d92:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001d94:	6822      	ldr	r2, [r4, #0]
 8001d96:	6813      	ldr	r3, [r2, #0]
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d9e:	2000      	movs	r0, #0
 8001da0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001da2:	2320      	movs	r3, #32
 8001da4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001da8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001daa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001dae:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001db0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001db4:	f7ff ffb1 	bl	8001d1a <HAL_I2C_MspInit>
 8001db8:	e7b8      	b.n	8001d2c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dba:	68a3      	ldr	r3, [r4, #8]
 8001dbc:	6822      	ldr	r2, [r4, #0]
 8001dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dc2:	6093      	str	r3, [r2, #8]
 8001dc4:	e7cc      	b.n	8001d60 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	e7ca      	b.n	8001d66 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001dd0:	2001      	movs	r0, #1
}
 8001dd2:	4770      	bx	lr
 8001dd4:	02008000 	.word	0x02008000

08001dd8 <HAL_I2C_MspDeInit>:
}
 8001dd8:	4770      	bx	lr

08001dda <HAL_I2C_DeInit>:
  if(hi2c == NULL)
 8001dda:	b1a8      	cbz	r0, 8001e08 <HAL_I2C_DeInit+0x2e>
{
 8001ddc:	b510      	push	{r4, lr}
 8001dde:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de0:	2324      	movs	r3, #36	; 0x24
 8001de2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001de6:	6802      	ldr	r2, [r0, #0]
 8001de8:	6813      	ldr	r3, [r2, #0]
 8001dea:	f023 0301 	bic.w	r3, r3, #1
 8001dee:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8001df0:	f7ff fff2 	bl	8001dd8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df4:	2000      	movs	r0, #0
 8001df6:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001df8:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dfc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfe:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 8001e02:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8001e06:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e08:	2001      	movs	r0, #1
}
 8001e0a:	4770      	bx	lr

08001e0c <HAL_I2C_Mem_Write>:
{
 8001e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e10:	b083      	sub	sp, #12
 8001e12:	460d      	mov	r5, r1
 8001e14:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8001e18:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001e1a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8001e1e:	b2c9      	uxtb	r1, r1
 8001e20:	2920      	cmp	r1, #32
 8001e22:	f040 80d1 	bne.w	8001fc8 <HAL_I2C_Mem_Write+0x1bc>
 8001e26:	4604      	mov	r4, r0
 8001e28:	4690      	mov	r8, r2
 8001e2a:	4699      	mov	r9, r3
    if((pData == NULL) || (Size == 0U))
 8001e2c:	faba f38a 	clz	r3, sl
 8001e30:	095b      	lsrs	r3, r3, #5
 8001e32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001e34:	2a00      	cmp	r2, #0
 8001e36:	bf08      	it	eq
 8001e38:	2301      	moveq	r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f040 80c8 	bne.w	8001fd0 <HAL_I2C_Mem_Write+0x1c4>
    __HAL_LOCK(hi2c);
 8001e40:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	f000 80c5 	beq.w	8001fd4 <HAL_I2C_Mem_Write+0x1c8>
 8001e4a:	f04f 0b01 	mov.w	fp, #1
 8001e4e:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001e52:	f7ff fa3f 	bl	80012d4 <HAL_GetTick>
 8001e56:	4606      	mov	r6, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e58:	9000      	str	r0, [sp, #0]
 8001e5a:	2319      	movs	r3, #25
 8001e5c:	465a      	mov	r2, fp
 8001e5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7ff fe81 	bl	8001b6a <I2C_WaitOnFlagUntilTimeout>
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	f040 80b5 	bne.w	8001fd8 <HAL_I2C_Mem_Write+0x1cc>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e6e:	2321      	movs	r3, #33	; 0x21
 8001e70:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e74:	2340      	movs	r3, #64	; 0x40
 8001e76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001e7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001e80:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e82:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e86:	6363      	str	r3, [r4, #52]	; 0x34
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e88:	9601      	str	r6, [sp, #4]
 8001e8a:	9700      	str	r7, [sp, #0]
 8001e8c:	464b      	mov	r3, r9
 8001e8e:	4642      	mov	r2, r8
 8001e90:	4629      	mov	r1, r5
 8001e92:	4620      	mov	r0, r4
 8001e94:	f7ff fe8f 	bl	8001bb6 <I2C_RequestMemoryWrite>
 8001e98:	b160      	cbz	r0, 8001eb4 <HAL_I2C_Mem_Write+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d004      	beq.n	8001eaa <HAL_I2C_Mem_Write+0x9e>
        __HAL_UNLOCK(hi2c);
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8001ea6:	2003      	movs	r0, #3
 8001ea8:	e08f      	b.n	8001fca <HAL_I2C_Mem_Write+0x1be>
        __HAL_UNLOCK(hi2c);
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001eb0:	4658      	mov	r0, fp
 8001eb2:	e08a      	b.n	8001fca <HAL_I2C_Mem_Write+0x1be>
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eb4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	2bff      	cmp	r3, #255	; 0xff
 8001eba:	d90a      	bls.n	8001ed2 <HAL_I2C_Mem_Write+0xc6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ebc:	22ff      	movs	r2, #255	; 0xff
 8001ebe:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ec8:	4629      	mov	r1, r5
 8001eca:	4620      	mov	r0, r4
 8001ecc:	f7ff fdcb 	bl	8001a66 <I2C_TransferConfig>
 8001ed0:	e023      	b.n	8001f1a <HAL_I2C_Mem_Write+0x10e>
      hi2c->XferSize = hi2c->XferCount;
 8001ed2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ed4:	b292      	uxth	r2, r2
 8001ed6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ed8:	2300      	movs	r3, #0
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	4629      	mov	r1, r5
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f7ff fdbe 	bl	8001a66 <I2C_TransferConfig>
 8001eea:	e016      	b.n	8001f1a <HAL_I2C_Mem_Write+0x10e>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_Mem_Write+0xea>
          return HAL_TIMEOUT;
 8001ef2:	2003      	movs	r0, #3
 8001ef4:	e069      	b.n	8001fca <HAL_I2C_Mem_Write+0x1be>
          return HAL_ERROR;
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	e067      	b.n	8001fca <HAL_I2C_Mem_Write+0x1be>
          hi2c->XferSize = hi2c->XferCount;
 8001efa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001efc:	b292      	uxth	r2, r2
 8001efe:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f00:	2300      	movs	r3, #0
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f7ff fdaa 	bl	8001a66 <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 8001f12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d033      	beq.n	8001f82 <HAL_I2C_Mem_Write+0x176>
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f1a:	4632      	mov	r2, r6
 8001f1c:	4639      	mov	r1, r7
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f7ff fdf9 	bl	8001b16 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f24:	2800      	cmp	r0, #0
 8001f26:	d1e1      	bne.n	8001eec <HAL_I2C_Mem_Write+0xe0>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	6262      	str	r2, [r4, #36]	; 0x24
 8001f2e:	6822      	ldr	r2, [r4, #0]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8001f34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001f3e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	8523      	strh	r3, [r4, #40]	; 0x28
      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1e3      	bne.n	8001f12 <HAL_I2C_Mem_Write+0x106>
 8001f4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0df      	beq.n	8001f12 <HAL_I2C_Mem_Write+0x106>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f52:	9600      	str	r6, [sp, #0]
 8001f54:	463b      	mov	r3, r7
 8001f56:	2200      	movs	r2, #0
 8001f58:	2180      	movs	r1, #128	; 0x80
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f7ff fe05 	bl	8001b6a <I2C_WaitOnFlagUntilTimeout>
 8001f60:	2800      	cmp	r0, #0
 8001f62:	d13b      	bne.n	8001fdc <HAL_I2C_Mem_Write+0x1d0>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	2bff      	cmp	r3, #255	; 0xff
 8001f6a:	d9c6      	bls.n	8001efa <HAL_I2C_Mem_Write+0xee>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f6c:	22ff      	movs	r2, #255	; 0xff
 8001f6e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f70:	2300      	movs	r3, #0
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f78:	4629      	mov	r1, r5
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	f7ff fd73 	bl	8001a66 <I2C_TransferConfig>
 8001f80:	e7c7      	b.n	8001f12 <HAL_I2C_Mem_Write+0x106>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f82:	4632      	mov	r2, r6
 8001f84:	4639      	mov	r1, r7
 8001f86:	4620      	mov	r0, r4
 8001f88:	f7ff fea0 	bl	8001ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f8c:	b130      	cbz	r0, 8001f9c <HAL_I2C_Mem_Write+0x190>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d001      	beq.n	8001f98 <HAL_I2C_Mem_Write+0x18c>
        return HAL_TIMEOUT;
 8001f94:	2003      	movs	r0, #3
 8001f96:	e018      	b.n	8001fca <HAL_I2C_Mem_Write+0x1be>
        return HAL_ERROR;
 8001f98:	2001      	movs	r0, #1
 8001f9a:	e016      	b.n	8001fca <HAL_I2C_Mem_Write+0x1be>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001fa2:	6821      	ldr	r1, [r4, #0]
 8001fa4:	684b      	ldr	r3, [r1, #4]
 8001fa6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001faa:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001fae:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001fb8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001fc2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8001fc6:	e000      	b.n	8001fca <HAL_I2C_Mem_Write+0x1be>
    return HAL_BUSY;
 8001fc8:	2002      	movs	r0, #2
}
 8001fca:	b003      	add	sp, #12
 8001fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	e7fa      	b.n	8001fca <HAL_I2C_Mem_Write+0x1be>
    __HAL_LOCK(hi2c);
 8001fd4:	2002      	movs	r0, #2
 8001fd6:	e7f8      	b.n	8001fca <HAL_I2C_Mem_Write+0x1be>
      return HAL_TIMEOUT;
 8001fd8:	2003      	movs	r0, #3
 8001fda:	e7f6      	b.n	8001fca <HAL_I2C_Mem_Write+0x1be>
          return HAL_TIMEOUT;
 8001fdc:	2003      	movs	r0, #3
 8001fde:	e7f4      	b.n	8001fca <HAL_I2C_Mem_Write+0x1be>

08001fe0 <HAL_I2C_Mem_Read>:
{
 8001fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	460d      	mov	r5, r1
 8001fe8:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8001fec:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001fee:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8001ff2:	b2c9      	uxtb	r1, r1
 8001ff4:	2920      	cmp	r1, #32
 8001ff6:	f040 80cd 	bne.w	8002194 <HAL_I2C_Mem_Read+0x1b4>
 8001ffa:	4604      	mov	r4, r0
 8001ffc:	4690      	mov	r8, r2
 8001ffe:	4699      	mov	r9, r3
    if((pData == NULL) || (Size == 0U))
 8002000:	faba f38a 	clz	r3, sl
 8002004:	095b      	lsrs	r3, r3, #5
 8002006:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002008:	2a00      	cmp	r2, #0
 800200a:	bf08      	it	eq
 800200c:	2301      	moveq	r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	f040 80c4 	bne.w	800219c <HAL_I2C_Mem_Read+0x1bc>
    __HAL_LOCK(hi2c);
 8002014:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002018:	2b01      	cmp	r3, #1
 800201a:	f000 80c1 	beq.w	80021a0 <HAL_I2C_Mem_Read+0x1c0>
 800201e:	f04f 0b01 	mov.w	fp, #1
 8002022:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002026:	f7ff f955 	bl	80012d4 <HAL_GetTick>
 800202a:	4606      	mov	r6, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800202c:	9000      	str	r0, [sp, #0]
 800202e:	2319      	movs	r3, #25
 8002030:	465a      	mov	r2, fp
 8002032:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002036:	4620      	mov	r0, r4
 8002038:	f7ff fd97 	bl	8001b6a <I2C_WaitOnFlagUntilTimeout>
 800203c:	2800      	cmp	r0, #0
 800203e:	f040 80b1 	bne.w	80021a4 <HAL_I2C_Mem_Read+0x1c4>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002042:	2322      	movs	r3, #34	; 0x22
 8002044:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002048:	2340      	movs	r3, #64	; 0x40
 800204a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800204e:	2300      	movs	r3, #0
 8002050:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002054:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002056:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800205a:	6363      	str	r3, [r4, #52]	; 0x34
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800205c:	9601      	str	r6, [sp, #4]
 800205e:	9700      	str	r7, [sp, #0]
 8002060:	464b      	mov	r3, r9
 8002062:	4642      	mov	r2, r8
 8002064:	4629      	mov	r1, r5
 8002066:	4620      	mov	r0, r4
 8002068:	f7ff fdeb 	bl	8001c42 <I2C_RequestMemoryRead>
 800206c:	b160      	cbz	r0, 8002088 <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800206e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002070:	2b04      	cmp	r3, #4
 8002072:	d004      	beq.n	800207e <HAL_I2C_Mem_Read+0x9e>
        __HAL_UNLOCK(hi2c);
 8002074:	2300      	movs	r3, #0
 8002076:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800207a:	2003      	movs	r0, #3
 800207c:	e08b      	b.n	8002196 <HAL_I2C_Mem_Read+0x1b6>
        __HAL_UNLOCK(hi2c);
 800207e:	2300      	movs	r3, #0
 8002080:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002084:	4658      	mov	r0, fp
 8002086:	e086      	b.n	8002196 <HAL_I2C_Mem_Read+0x1b6>
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002088:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800208a:	b29b      	uxth	r3, r3
 800208c:	2bff      	cmp	r3, #255	; 0xff
 800208e:	d90b      	bls.n	80020a8 <HAL_I2C_Mem_Read+0xc8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002090:	22ff      	movs	r2, #255	; 0xff
 8002092:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002094:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800209e:	4629      	mov	r1, r5
 80020a0:	4620      	mov	r0, r4
 80020a2:	f7ff fce0 	bl	8001a66 <I2C_TransferConfig>
 80020a6:	e01d      	b.n	80020e4 <HAL_I2C_Mem_Read+0x104>
      hi2c->XferSize = hi2c->XferCount;
 80020a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80020aa:	b292      	uxth	r2, r2
 80020ac:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80020ae:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	4629      	mov	r1, r5
 80020bc:	4620      	mov	r0, r4
 80020be:	f7ff fcd2 	bl	8001a66 <I2C_TransferConfig>
 80020c2:	e00f      	b.n	80020e4 <HAL_I2C_Mem_Read+0x104>
          hi2c->XferSize = hi2c->XferCount;
 80020c4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80020c6:	b292      	uxth	r2, r2
 80020c8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020ca:	2300      	movs	r3, #0
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	4629      	mov	r1, r5
 80020d6:	4620      	mov	r0, r4
 80020d8:	f7ff fcc5 	bl	8001a66 <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 80020dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d034      	beq.n	800214e <HAL_I2C_Mem_Read+0x16e>
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80020e4:	9600      	str	r6, [sp, #0]
 80020e6:	463b      	mov	r3, r7
 80020e8:	2200      	movs	r2, #0
 80020ea:	2104      	movs	r1, #4
 80020ec:	4620      	mov	r0, r4
 80020ee:	f7ff fd3c 	bl	8001b6a <I2C_WaitOnFlagUntilTimeout>
 80020f2:	2800      	cmp	r0, #0
 80020f4:	d158      	bne.n	80021a8 <HAL_I2C_Mem_Read+0x1c8>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020fc:	1c59      	adds	r1, r3, #1
 80020fe:	6261      	str	r1, [r4, #36]	; 0x24
 8002100:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8002102:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002104:	3a01      	subs	r2, #1
 8002106:	b292      	uxth	r2, r2
 8002108:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800210a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800210c:	b29b      	uxth	r3, r3
 800210e:	3b01      	subs	r3, #1
 8002110:	b29b      	uxth	r3, r3
 8002112:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002114:	2a00      	cmp	r2, #0
 8002116:	d1e1      	bne.n	80020dc <HAL_I2C_Mem_Read+0xfc>
 8002118:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0dd      	beq.n	80020dc <HAL_I2C_Mem_Read+0xfc>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002120:	9600      	str	r6, [sp, #0]
 8002122:	463b      	mov	r3, r7
 8002124:	2180      	movs	r1, #128	; 0x80
 8002126:	4620      	mov	r0, r4
 8002128:	f7ff fd1f 	bl	8001b6a <I2C_WaitOnFlagUntilTimeout>
 800212c:	2800      	cmp	r0, #0
 800212e:	d13d      	bne.n	80021ac <HAL_I2C_Mem_Read+0x1cc>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002130:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	2bff      	cmp	r3, #255	; 0xff
 8002136:	d9c5      	bls.n	80020c4 <HAL_I2C_Mem_Read+0xe4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002138:	22ff      	movs	r2, #255	; 0xff
 800213a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800213c:	2300      	movs	r3, #0
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002144:	4629      	mov	r1, r5
 8002146:	4620      	mov	r0, r4
 8002148:	f7ff fc8d 	bl	8001a66 <I2C_TransferConfig>
 800214c:	e7c6      	b.n	80020dc <HAL_I2C_Mem_Read+0xfc>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800214e:	4632      	mov	r2, r6
 8002150:	4639      	mov	r1, r7
 8002152:	4620      	mov	r0, r4
 8002154:	f7ff fdba 	bl	8001ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002158:	b130      	cbz	r0, 8002168 <HAL_I2C_Mem_Read+0x188>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800215a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800215c:	2b04      	cmp	r3, #4
 800215e:	d001      	beq.n	8002164 <HAL_I2C_Mem_Read+0x184>
        return HAL_TIMEOUT;
 8002160:	2003      	movs	r0, #3
 8002162:	e018      	b.n	8002196 <HAL_I2C_Mem_Read+0x1b6>
        return HAL_ERROR;
 8002164:	2001      	movs	r0, #1
 8002166:	e016      	b.n	8002196 <HAL_I2C_Mem_Read+0x1b6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002168:	6823      	ldr	r3, [r4, #0]
 800216a:	2220      	movs	r2, #32
 800216c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800216e:	6821      	ldr	r1, [r4, #0]
 8002170:	684b      	ldr	r3, [r1, #4]
 8002172:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002176:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800217a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800217e:	f023 0301 	bic.w	r3, r3, #1
 8002182:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002184:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002188:	2300      	movs	r3, #0
 800218a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800218e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8002192:	e000      	b.n	8002196 <HAL_I2C_Mem_Read+0x1b6>
    return HAL_BUSY;
 8002194:	2002      	movs	r0, #2
}
 8002196:	b003      	add	sp, #12
 8002198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 800219c:	2001      	movs	r0, #1
 800219e:	e7fa      	b.n	8002196 <HAL_I2C_Mem_Read+0x1b6>
    __HAL_LOCK(hi2c);
 80021a0:	2002      	movs	r0, #2
 80021a2:	e7f8      	b.n	8002196 <HAL_I2C_Mem_Read+0x1b6>
      return HAL_TIMEOUT;
 80021a4:	2003      	movs	r0, #3
 80021a6:	e7f6      	b.n	8002196 <HAL_I2C_Mem_Read+0x1b6>
        return HAL_TIMEOUT;
 80021a8:	2003      	movs	r0, #3
 80021aa:	e7f4      	b.n	8002196 <HAL_I2C_Mem_Read+0x1b6>
          return HAL_TIMEOUT;
 80021ac:	2003      	movs	r0, #3
 80021ae:	e7f2      	b.n	8002196 <HAL_I2C_Mem_Read+0x1b6>

080021b0 <HAL_I2C_GetState>:
  return hi2c->State;
 80021b0:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80021b4:	4770      	bx	lr
	...

080021b8 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 80021b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 80021ba:	6807      	ldr	r7, [r0, #0]
 80021bc:	3750      	adds	r7, #80	; 0x50

  i = 0;
 80021be:	2500      	movs	r5, #0
  uint32_t quality = 0;
 80021c0:	462c      	mov	r4, r5
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80021c2:	e027      	b.n	8002214 <JPEG_GetQuality+0x5c>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
      if (quantVal == 1UL)
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 80021c4:	3464      	adds	r4, #100	; 0x64
    for (j = 0; j < 4UL; j++)
 80021c6:	3101      	adds	r1, #1
 80021c8:	2903      	cmp	r1, #3
 80021ca:	d821      	bhi.n	8002210 <JPEG_GetQuality+0x58>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80021cc:	00cb      	lsls	r3, r1, #3
 80021ce:	fa26 f303 	lsr.w	r3, r6, r3
 80021d2:	b2db      	uxtb	r3, r3
      if (quantVal == 1UL)
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d0f5      	beq.n	80021c4 <JPEG_GetQuality+0xc>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80021d8:	2264      	movs	r2, #100	; 0x64
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	eb05 0e01 	add.w	lr, r5, r1
 80021e2:	4a10      	ldr	r2, [pc, #64]	; (8002224 <JPEG_GetQuality+0x6c>)
 80021e4:	eb02 0c0e 	add.w	ip, r2, lr
 80021e8:	f89c c1a0 	ldrb.w	ip, [ip, #416]	; 0x1a0
 80021ec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80021ee:	f812 200c 	ldrb.w	r2, [r2, ip]
 80021f2:	fbb3 f3f2 	udiv	r3, r3, r2

        if (scale <= 100UL)
 80021f6:	2b64      	cmp	r3, #100	; 0x64
 80021f8:	d804      	bhi.n	8002204 <JPEG_GetQuality+0x4c>
        {
          quality += (200UL - scale) / 2UL;
 80021fa:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80021fe:	eb04 0453 	add.w	r4, r4, r3, lsr #1
 8002202:	e7e0      	b.n	80021c6 <JPEG_GetQuality+0xe>
        }
        else
        {
          quality += 5000UL / scale;
 8002204:	f241 3288 	movw	r2, #5000	; 0x1388
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	441c      	add	r4, r3
 800220e:	e7da      	b.n	80021c6 <JPEG_GetQuality+0xe>
        }
      }
    }

    i += 4UL;
 8002210:	3504      	adds	r5, #4
    tableAddress ++;
 8002212:	3704      	adds	r7, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8002214:	2d3c      	cmp	r5, #60	; 0x3c
 8002216:	d802      	bhi.n	800221e <JPEG_GetQuality+0x66>
    quantRow = *tableAddress;
 8002218:	683e      	ldr	r6, [r7, #0]
    for (j = 0; j < 4UL; j++)
 800221a:	2100      	movs	r1, #0
 800221c:	e7d4      	b.n	80021c8 <JPEG_GetQuality+0x10>
  }

  return (quality / 64UL);
}
 800221e:	09a0      	lsrs	r0, r4, #6
 8002220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002222:	bf00      	nop
 8002224:	0800877c 	.word	0x0800877c

08002228 <HAL_JPEG_GetInfo>:
{
 8002228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 800222a:	460c      	mov	r4, r1
 800222c:	fab1 f181 	clz	r1, r1
 8002230:	0949      	lsrs	r1, r1, #5
 8002232:	2800      	cmp	r0, #0
 8002234:	bf08      	it	eq
 8002236:	2101      	moveq	r1, #1
 8002238:	2900      	cmp	r1, #0
 800223a:	d15a      	bne.n	80022f2 <HAL_JPEG_GetInfo+0xca>
 800223c:	4603      	mov	r3, r0
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800223e:	6801      	ldr	r1, [r0, #0]
 8002240:	684a      	ldr	r2, [r1, #4]
 8002242:	f002 0203 	and.w	r2, r2, #3
 8002246:	2a02      	cmp	r2, #2
 8002248:	d006      	beq.n	8002258 <HAL_JPEG_GetInfo+0x30>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800224a:	684a      	ldr	r2, [r1, #4]
 800224c:	f012 0f03 	tst.w	r2, #3
 8002250:	d12a      	bne.n	80022a8 <HAL_JPEG_GetInfo+0x80>
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8002252:	2200      	movs	r2, #0
 8002254:	6022      	str	r2, [r4, #0]
 8002256:	e001      	b.n	800225c <HAL_JPEG_GetInfo+0x34>
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8002258:	2210      	movs	r2, #16
 800225a:	6022      	str	r2, [r4, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	6852      	ldr	r2, [r2, #4]
 8002260:	0c12      	lsrs	r2, r2, #16
 8002262:	60a2      	str	r2, [r4, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68d2      	ldr	r2, [r2, #12]
 8002268:	0c12      	lsrs	r2, r2, #16
 800226a:	60e2      	str	r2, [r4, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800226c:	6822      	ldr	r2, [r4, #0]
 800226e:	2a30      	cmp	r2, #48	; 0x30
 8002270:	bf18      	it	ne
 8002272:	2a10      	cmpne	r2, #16
 8002274:	d135      	bne.n	80022e2 <HAL_JPEG_GetInfo+0xba>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8002276:	6819      	ldr	r1, [r3, #0]
 8002278:	690a      	ldr	r2, [r1, #16]
 800227a:	0915      	lsrs	r5, r2, #4
 800227c:	f3c2 1203 	ubfx	r2, r2, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8002280:	6948      	ldr	r0, [r1, #20]
 8002282:	0907      	lsrs	r7, r0, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8002284:	6989      	ldr	r1, [r1, #24]
 8002286:	f3c1 1103 	ubfx	r1, r1, #4, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800228a:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 800228e:	bf0c      	ite	eq
 8002290:	2001      	moveq	r0, #1
 8002292:	2000      	movne	r0, #0
 8002294:	2a01      	cmp	r2, #1
 8002296:	bf14      	ite	ne
 8002298:	2600      	movne	r6, #0
 800229a:	f000 0601 	andeq.w	r6, r0, #1
 800229e:	b15e      	cbz	r6, 80022b8 <HAL_JPEG_GetInfo+0x90>
 80022a0:	b951      	cbnz	r1, 80022b8 <HAL_JPEG_GetInfo+0x90>
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 80022a2:	2202      	movs	r2, #2
 80022a4:	6062      	str	r2, [r4, #4]
 80022a6:	e01e      	b.n	80022e6 <HAL_JPEG_GetInfo+0xbe>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80022a8:	684a      	ldr	r2, [r1, #4]
 80022aa:	f002 0203 	and.w	r2, r2, #3
 80022ae:	2a03      	cmp	r2, #3
 80022b0:	d121      	bne.n	80022f6 <HAL_JPEG_GetInfo+0xce>
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 80022b2:	2230      	movs	r2, #48	; 0x30
 80022b4:	6022      	str	r2, [r4, #0]
 80022b6:	e7d1      	b.n	800225c <HAL_JPEG_GetInfo+0x34>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80022b8:	433d      	orrs	r5, r7
 80022ba:	f015 0f0f 	tst.w	r5, #15
 80022be:	d103      	bne.n	80022c8 <HAL_JPEG_GetInfo+0xa0>
 80022c0:	b911      	cbnz	r1, 80022c8 <HAL_JPEG_GetInfo+0xa0>
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80022c2:	2200      	movs	r2, #0
 80022c4:	6062      	str	r2, [r4, #4]
 80022c6:	e00e      	b.n	80022e6 <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80022c8:	2a03      	cmp	r2, #3
 80022ca:	bf14      	ite	ne
 80022cc:	2200      	movne	r2, #0
 80022ce:	f000 0201 	andeq.w	r2, r0, #1
 80022d2:	b11a      	cbz	r2, 80022dc <HAL_JPEG_GetInfo+0xb4>
 80022d4:	b911      	cbnz	r1, 80022dc <HAL_JPEG_GetInfo+0xb4>
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 80022d6:	2201      	movs	r2, #1
 80022d8:	6062      	str	r2, [r4, #4]
 80022da:	e004      	b.n	80022e6 <HAL_JPEG_GetInfo+0xbe>
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80022dc:	2200      	movs	r2, #0
 80022de:	6062      	str	r2, [r4, #4]
 80022e0:	e001      	b.n	80022e6 <HAL_JPEG_GetInfo+0xbe>
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80022e2:	2200      	movs	r2, #0
 80022e4:	6062      	str	r2, [r4, #4]
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff66 	bl	80021b8 <JPEG_GetQuality>
 80022ec:	6120      	str	r0, [r4, #16]
  return HAL_OK;
 80022ee:	2000      	movs	r0, #0
}
 80022f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80022f2:	2001      	movs	r0, #1
 80022f4:	e7fc      	b.n	80022f0 <HAL_JPEG_GetInfo+0xc8>
    return HAL_ERROR;
 80022f6:	2001      	movs	r0, #1
 80022f8:	e7fa      	b.n	80022f0 <HAL_JPEG_GetInfo+0xc8>

080022fa <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80022fa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b0c      	cmp	r3, #12
 8002302:	d006      	beq.n	8002312 <HAL_JPEG_Pause+0x18>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002304:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b08      	cmp	r3, #8
 800230c:	d01b      	beq.n	8002346 <HAL_JPEG_Pause+0x4c>
}
 800230e:	2000      	movs	r0, #0
 8002310:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8002312:	f011 0301 	ands.w	r3, r1, #1
 8002316:	d005      	beq.n	8002324 <HAL_JPEG_Pause+0x2a>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8002318:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800231a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800231e:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 8002320:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8002324:	f011 0f02 	tst.w	r1, #2
 8002328:	d005      	beq.n	8002336 <HAL_JPEG_Pause+0x3c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800232a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800232c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002330:	6542      	str	r2, [r0, #84]	; 0x54
      mask |= JPEG_DMA_ODMA;
 8002332:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    JPEG_DISABLE_DMA(hjpeg, mask);
 8002336:	6801      	ldr	r1, [r0, #0]
 8002338:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800233a:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800233e:	ea22 0303 	bic.w	r3, r2, r3
 8002342:	630b      	str	r3, [r1, #48]	; 0x30
 8002344:	e7e3      	b.n	800230e <HAL_JPEG_Pause+0x14>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8002346:	f011 0201 	ands.w	r2, r1, #1
 800234a:	d004      	beq.n	8002356 <HAL_JPEG_Pause+0x5c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800234c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800234e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002352:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8002354:	2206      	movs	r2, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8002356:	f011 0f02 	tst.w	r1, #2
 800235a:	d005      	beq.n	8002368 <HAL_JPEG_Pause+0x6e>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800235c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800235e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002362:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8002364:	f042 0228 	orr.w	r2, r2, #40	; 0x28
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8002368:	6801      	ldr	r1, [r0, #0]
 800236a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800236c:	ea23 0302 	bic.w	r3, r3, r2
 8002370:	630b      	str	r3, [r1, #48]	; 0x30
 8002372:	e7cc      	b.n	800230e <HAL_JPEG_Pause+0x14>

08002374 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8002374:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8002376:	6282      	str	r2, [r0, #40]	; 0x28
}
 8002378:	4770      	bx	lr

0800237a <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800237a:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800237c:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 800237e:	4770      	bx	lr

08002380 <HAL_JPEG_EncodeCpltCallback>:
}
 8002380:	4770      	bx	lr

08002382 <JPEG_ReadInputData>:
{
 8002382:	b570      	push	{r4, r5, r6, lr}
 8002384:	4604      	mov	r4, r0
 8002386:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8002388:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800238a:	b103      	cbz	r3, 800238e <JPEG_ReadInputData+0xc>
 800238c:	b991      	cbnz	r1, 80023b4 <JPEG_ReadInputData+0x32>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800238e:	2101      	movs	r1, #1
 8002390:	4620      	mov	r0, r4
 8002392:	f7ff ffb2 	bl	80022fa <HAL_JPEG_Pause>
  uint32_t nbBytes = 0, nBwords, index, Dataword, inputCount;
 8002396:	2200      	movs	r2, #0
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nbBytes > 0UL))
 8002398:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800239a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800239e:	d15d      	bne.n	800245c <JPEG_ReadInputData+0xda>
 80023a0:	2a00      	cmp	r2, #0
 80023a2:	d05b      	beq.n	800245c <JPEG_ReadInputData+0xda>
    nBwords = nbBytes / 4UL;
 80023a4:	0896      	lsrs	r6, r2, #2
    if (nBwords >= nbRequestWords)
 80023a6:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 80023aa:	d91b      	bls.n	80023e4 <JPEG_ReadInputData+0x62>
      if (nBwords > 0UL)
 80023ac:	2a03      	cmp	r2, #3
 80023ae:	d82f      	bhi.n	8002410 <JPEG_ReadInputData+0x8e>
        Dataword = 0;
 80023b0:	461d      	mov	r5, r3
 80023b2:	e04f      	b.n	8002454 <JPEG_ReadInputData+0xd2>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80023b4:	6a02      	ldr	r2, [r0, #32]
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d902      	bls.n	80023c0 <JPEG_ReadInputData+0x3e>
    nbBytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80023ba:	6a02      	ldr	r2, [r0, #32]
 80023bc:	1a9a      	subs	r2, r3, r2
 80023be:	e7eb      	b.n	8002398 <JPEG_ReadInputData+0x16>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80023c0:	6a02      	ldr	r2, [r0, #32]
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d001      	beq.n	80023ca <JPEG_ReadInputData+0x48>
  uint32_t nbBytes = 0, nBwords, index, Dataword, inputCount;
 80023c6:	2200      	movs	r2, #0
 80023c8:	e7e6      	b.n	8002398 <JPEG_ReadInputData+0x16>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80023ca:	6a01      	ldr	r1, [r0, #32]
 80023cc:	f005 f848 	bl	8007460 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 80023d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d902      	bls.n	80023dc <JPEG_ReadInputData+0x5a>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80023d6:	f023 0303 	bic.w	r3, r3, #3
 80023da:	62a3      	str	r3, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	6223      	str	r3, [r4, #32]
    nbBytes = hjpeg->InDataLength;
 80023e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80023e2:	e7d9      	b.n	8002398 <JPEG_ReadInputData+0x16>
      for (index = 0; index < nbRequestWords; index++)
 80023e4:	42ab      	cmp	r3, r5
 80023e6:	d239      	bcs.n	800245c <JPEG_ReadInputData+0xda>
        inputCount = hjpeg->JpegInCount;
 80023e8:	6a21      	ldr	r1, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 80023ea:	69a0      	ldr	r0, [r4, #24]
 80023ec:	5c42      	ldrb	r2, [r0, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 80023ee:	4408      	add	r0, r1
 80023f0:	7841      	ldrb	r1, [r0, #1]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 80023f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 80023f6:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 80023f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 3UL])) << 24));
 80023fc:	78c0      	ldrb	r0, [r0, #3]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 80023fe:	6821      	ldr	r1, [r4, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 8002400:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8002404:	640a      	str	r2, [r1, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
 8002406:	6a22      	ldr	r2, [r4, #32]
 8002408:	3204      	adds	r2, #4
 800240a:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800240c:	3301      	adds	r3, #1
 800240e:	e7e9      	b.n	80023e4 <JPEG_ReadInputData+0x62>
        for (index = 0; index < nBwords; index++)
 8002410:	42b3      	cmp	r3, r6
 8002412:	d223      	bcs.n	800245c <JPEG_ReadInputData+0xda>
          inputCount = hjpeg->JpegInCount;
 8002414:	6a20      	ldr	r0, [r4, #32]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8002416:	69a1      	ldr	r1, [r4, #24]
 8002418:	5c0a      	ldrb	r2, [r1, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 800241a:	4401      	add	r1, r0
 800241c:	7848      	ldrb	r0, [r1, #1]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 800241e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 8002422:	7888      	ldrb	r0, [r1, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8002424:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 3UL])) << 24));
 8002428:	78c8      	ldrb	r0, [r1, #3]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 800242a:	6821      	ldr	r1, [r4, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 800242c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8002430:	640a      	str	r2, [r1, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 8002432:	6a22      	ldr	r2, [r4, #32]
 8002434:	3204      	adds	r2, #4
 8002436:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nBwords; index++)
 8002438:	3301      	adds	r3, #1
 800243a:	e7e9      	b.n	8002410 <JPEG_ReadInputData+0x8e>
          Dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800243c:	69a0      	ldr	r0, [r4, #24]
 800243e:	6a21      	ldr	r1, [r4, #32]
 8002440:	5c41      	ldrb	r1, [r0, r1]
 8002442:	f003 0003 	and.w	r0, r3, #3
 8002446:	00c0      	lsls	r0, r0, #3
 8002448:	4081      	lsls	r1, r0
 800244a:	430d      	orrs	r5, r1
          hjpeg->JpegInCount++;
 800244c:	6a21      	ldr	r1, [r4, #32]
 800244e:	3101      	adds	r1, #1
 8002450:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nbBytes; index++)
 8002452:	3301      	adds	r3, #1
 8002454:	429a      	cmp	r2, r3
 8002456:	d8f1      	bhi.n	800243c <JPEG_ReadInputData+0xba>
        hjpeg->Instance->DIR = Dataword;
 8002458:	6823      	ldr	r3, [r4, #0]
 800245a:	641d      	str	r5, [r3, #64]	; 0x40
}
 800245c:	bd70      	pop	{r4, r5, r6, pc}

0800245e <JPEG_StoreOutputData>:
{
 800245e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002460:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8002462:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002464:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002466:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800246a:	4298      	cmp	r0, r3
 800246c:	d223      	bcs.n	80024b6 <JPEG_StoreOutputData+0x58>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800246e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002470:	4298      	cmp	r0, r3
 8002472:	d942      	bls.n	80024fa <JPEG_StoreOutputData+0x9c>
    nBwords = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8002474:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002476:	1ac0      	subs	r0, r0, r3
 8002478:	0880      	lsrs	r0, r0, #2
    for (index = 0; index < nBwords; index++)
 800247a:	2100      	movs	r1, #0
 800247c:	4281      	cmp	r1, r0
 800247e:	d245      	bcs.n	800250c <JPEG_StoreOutputData+0xae>
      dataword = hjpeg->Instance->DOR;
 8002480:	6823      	ldr	r3, [r4, #0]
 8002482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8002484:	69e5      	ldr	r5, [r4, #28]
 8002486:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002488:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800248a:	69e5      	ldr	r5, [r4, #28]
 800248c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800248e:	3201      	adds	r2, #1
 8002490:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8002494:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8002496:	69e5      	ldr	r5, [r4, #28]
 8002498:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800249a:	3202      	adds	r2, #2
 800249c:	f3c3 4607 	ubfx	r6, r3, #16, #8
 80024a0:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80024a2:	69e5      	ldr	r5, [r4, #28]
 80024a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024a6:	3203      	adds	r2, #3
 80024a8:	0e1b      	lsrs	r3, r3, #24
 80024aa:	54ab      	strb	r3, [r5, r2]
      hjpeg->JpegOutCount += 4UL;
 80024ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024ae:	3304      	adds	r3, #4
 80024b0:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nBwords; index++)
 80024b2:	3101      	adds	r1, #1
 80024b4:	e7e2      	b.n	800247c <JPEG_StoreOutputData+0x1e>
    for (index = 0; index < nbOutputWords; index++)
 80024b6:	2000      	movs	r0, #0
 80024b8:	4288      	cmp	r0, r1
 80024ba:	d21a      	bcs.n	80024f2 <JPEG_StoreOutputData+0x94>
      dataword = hjpeg->Instance->DOR;
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80024c0:	69e5      	ldr	r5, [r4, #28]
 80024c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024c4:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80024c6:	69e5      	ldr	r5, [r4, #28]
 80024c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024ca:	3201      	adds	r2, #1
 80024cc:	f3c3 2607 	ubfx	r6, r3, #8, #8
 80024d0:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80024d2:	69e5      	ldr	r5, [r4, #28]
 80024d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024d6:	3202      	adds	r2, #2
 80024d8:	f3c3 4607 	ubfx	r6, r3, #16, #8
 80024dc:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80024de:	69e5      	ldr	r5, [r4, #28]
 80024e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024e2:	3203      	adds	r2, #3
 80024e4:	0e1b      	lsrs	r3, r3, #24
 80024e6:	54ab      	strb	r3, [r5, r2]
      hjpeg->JpegOutCount += 4UL;
 80024e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024ea:	3304      	adds	r3, #4
 80024ec:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 80024ee:	3001      	adds	r0, #1
 80024f0:	e7e2      	b.n	80024b8 <JPEG_StoreOutputData+0x5a>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80024f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80024f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d000      	beq.n	80024fc <JPEG_StoreOutputData+0x9e>
}
 80024fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80024fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024fe:	69e1      	ldr	r1, [r4, #28]
 8002500:	4620      	mov	r0, r4
 8002502:	f004 ffbf 	bl	8007484 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	6263      	str	r3, [r4, #36]	; 0x24
 800250a:	e7f6      	b.n	80024fa <JPEG_StoreOutputData+0x9c>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800250c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800250e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002510:	429f      	cmp	r7, r3
 8002512:	d006      	beq.n	8002522 <JPEG_StoreOutputData+0xc4>
      nbBytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8002514:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002516:	eba7 0c05 	sub.w	ip, r7, r5
      dataword = hjpeg->Instance->DOR;
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	6c5e      	ldr	r6, [r3, #68]	; 0x44
      for (index = 0; index < nbBytes; index++)
 800251e:	2200      	movs	r2, #0
 8002520:	e013      	b.n	800254a <JPEG_StoreOutputData+0xec>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002522:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002524:	69e1      	ldr	r1, [r4, #28]
 8002526:	4620      	mov	r0, r4
 8002528:	f004 ffac 	bl	8007484 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	6263      	str	r3, [r4, #36]	; 0x24
 8002530:	e7e3      	b.n	80024fa <JPEG_StoreOutputData+0x9c>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8002532:	f002 0303 	and.w	r3, r2, #3
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	fa26 f303 	lsr.w	r3, r6, r3
 800253c:	69e0      	ldr	r0, [r4, #28]
 800253e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002540:	5443      	strb	r3, [r0, r1]
        hjpeg->JpegOutCount++;
 8002542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002544:	3301      	adds	r3, #1
 8002546:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nbBytes; index++)
 8002548:	3201      	adds	r2, #1
 800254a:	4562      	cmp	r2, ip
 800254c:	d3f1      	bcc.n	8002532 <JPEG_StoreOutputData+0xd4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800254e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002550:	69e1      	ldr	r1, [r4, #28]
 8002552:	4620      	mov	r0, r4
 8002554:	f004 ff96 	bl	8007484 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	6263      	str	r3, [r4, #36]	; 0x24
      nbBytes = 4UL - nbBytes;
 800255c:	1bed      	subs	r5, r5, r7
 800255e:	3504      	adds	r5, #4
      for (index = nbBytes; index < 4UL; index++)
 8002560:	e009      	b.n	8002576 <JPEG_StoreOutputData+0x118>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8002562:	00eb      	lsls	r3, r5, #3
 8002564:	fa26 f303 	lsr.w	r3, r6, r3
 8002568:	69e1      	ldr	r1, [r4, #28]
 800256a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800256c:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
 800256e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002570:	3301      	adds	r3, #1
 8002572:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nbBytes; index < 4UL; index++)
 8002574:	3501      	adds	r5, #1
 8002576:	2d03      	cmp	r5, #3
 8002578:	d9f3      	bls.n	8002562 <JPEG_StoreOutputData+0x104>
 800257a:	e7be      	b.n	80024fa <JPEG_StoreOutputData+0x9c>

0800257c <JPEG_Process>:
{
 800257c:	b538      	push	{r3, r4, r5, lr}
 800257e:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002580:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d021      	beq.n	80025ce <JPEG_Process+0x52>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800258a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800258c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002590:	d108      	bne.n	80025a4 <JPEG_Process+0x28>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002596:	f012 0f02 	tst.w	r2, #2
 800259a:	d132      	bne.n	8002602 <JPEG_Process+0x86>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800259c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259e:	f013 0f04 	tst.w	r3, #4
 80025a2:	d133      	bne.n	800260c <JPEG_Process+0x90>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80025a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025a6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80025aa:	d108      	bne.n	80025be <JPEG_Process+0x42>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 80025ac:	6823      	ldr	r3, [r4, #0]
 80025ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025b0:	f012 0f08 	tst.w	r2, #8
 80025b4:	d12f      	bne.n	8002616 <JPEG_Process+0x9a>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80025b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b8:	f013 0f10 	tst.w	r3, #16
 80025bc:	d130      	bne.n	8002620 <JPEG_Process+0xa4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80025be:	6822      	ldr	r2, [r4, #0]
 80025c0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80025c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	d02f      	beq.n	800262a <JPEG_Process+0xae>
  return JPEG_PROCESS_ONGOING;
 80025ca:	2000      	movs	r0, #0
}
 80025cc:	bd38      	pop	{r3, r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80025ce:	6803      	ldr	r3, [r0, #0]
 80025d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80025d6:	d0d8      	beq.n	800258a <JPEG_Process+0xe>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80025d8:	1d05      	adds	r5, r0, #4
 80025da:	4629      	mov	r1, r5
 80025dc:	f7ff fe24 	bl	8002228 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80025e4:	4629      	mov	r1, r5
 80025e6:	4620      	mov	r0, r4
 80025e8:	f004 ff5e 	bl	80074a8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80025ec:	6822      	ldr	r2, [r4, #0]
 80025ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80025f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80025f6:	6822      	ldr	r2, [r4, #0]
 80025f8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80025fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025fe:	6393      	str	r3, [r2, #56]	; 0x38
 8002600:	e7c3      	b.n	800258a <JPEG_Process+0xe>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8002602:	2104      	movs	r1, #4
 8002604:	4620      	mov	r0, r4
 8002606:	f7ff febc 	bl	8002382 <JPEG_ReadInputData>
 800260a:	e7cb      	b.n	80025a4 <JPEG_Process+0x28>
      JPEG_ReadInputData(hjpeg, 1);
 800260c:	2101      	movs	r1, #1
 800260e:	4620      	mov	r0, r4
 8002610:	f7ff feb7 	bl	8002382 <JPEG_ReadInputData>
 8002614:	e7c6      	b.n	80025a4 <JPEG_Process+0x28>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8002616:	2104      	movs	r1, #4
 8002618:	4620      	mov	r0, r4
 800261a:	f7ff ff20 	bl	800245e <JPEG_StoreOutputData>
 800261e:	e7ce      	b.n	80025be <JPEG_Process+0x42>
      JPEG_StoreOutputData(hjpeg, 1);
 8002620:	2101      	movs	r1, #1
 8002622:	4620      	mov	r0, r4
 8002624:	f7ff ff1b 	bl	800245e <JPEG_StoreOutputData>
 8002628:	e7c9      	b.n	80025be <JPEG_Process+0x42>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800262a:	6813      	ldr	r3, [r2, #0]
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	6013      	str	r3, [r2, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002632:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b08      	cmp	r3, #8
 800263a:	d01a      	beq.n	8002672 <JPEG_Process+0xf6>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800263c:	6822      	ldr	r2, [r4, #0]
 800263e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002640:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002644:	6393      	str	r3, [r2, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8002646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002648:	b9cb      	cbnz	r3, 800267e <JPEG_Process+0x102>
    tmpContext = hjpeg->Context;
 800264a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800264c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800264e:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
 8002652:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 8002654:	2200      	movs	r2, #0
 8002656:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800265a:	2201      	movs	r2, #1
 800265c:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d012      	beq.n	800268e <JPEG_Process+0x112>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8002668:	4620      	mov	r0, r4
 800266a:	f7ff fe89 	bl	8002380 <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800266e:	2001      	movs	r0, #1
 8002670:	e7ac      	b.n	80025cc <JPEG_Process+0x50>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002672:	6822      	ldr	r2, [r4, #0]
 8002674:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002676:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 800267a:	6313      	str	r3, [r2, #48]	; 0x30
 800267c:	e7de      	b.n	800263c <JPEG_Process+0xc0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800267e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002680:	69e1      	ldr	r1, [r4, #28]
 8002682:	4620      	mov	r0, r4
 8002684:	f004 fefe 	bl	8007484 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	6263      	str	r3, [r4, #36]	; 0x24
 800268c:	e7dd      	b.n	800264a <JPEG_Process+0xce>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800268e:	4620      	mov	r0, r4
 8002690:	f004 ff04 	bl	800749c <HAL_JPEG_DecodeCpltCallback>
 8002694:	e7eb      	b.n	800266e <JPEG_Process+0xf2>

08002696 <JPEG_DMA_PollResidualData>:
{
 8002696:	b538      	push	{r3, r4, r5, lr}
 8002698:	4604      	mov	r4, r0
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800269a:	2510      	movs	r5, #16
 800269c:	e007      	b.n	80026ae <JPEG_DMA_PollResidualData+0x18>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800269e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026a0:	69e1      	ldr	r1, [r4, #28]
 80026a2:	4620      	mov	r0, r4
 80026a4:	f004 feee 	bl	8007484 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	6263      	str	r3, [r4, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80026ac:	3d01      	subs	r5, #1
 80026ae:	b32d      	cbz	r5, 80026fc <JPEG_DMA_PollResidualData+0x66>
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80026b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026b2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80026b6:	d1f9      	bne.n	80026ac <JPEG_DMA_PollResidualData+0x16>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80026b8:	6823      	ldr	r3, [r4, #0]
 80026ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026bc:	f012 0f10 	tst.w	r2, #16
 80026c0:	d0f4      	beq.n	80026ac <JPEG_DMA_PollResidualData+0x16>
        dataOut = hjpeg->Instance->DOR;
 80026c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 80026c4:	69e1      	ldr	r1, [r4, #28]
 80026c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026c8:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 80026ca:	69e1      	ldr	r1, [r4, #28]
 80026cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026ce:	3201      	adds	r2, #1
 80026d0:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80026d4:	5488      	strb	r0, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 80026d6:	69e1      	ldr	r1, [r4, #28]
 80026d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026da:	3202      	adds	r2, #2
 80026dc:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80026e0:	5488      	strb	r0, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80026e2:	69e1      	ldr	r1, [r4, #28]
 80026e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026e6:	3203      	adds	r2, #3
 80026e8:	0e1b      	lsrs	r3, r3, #24
 80026ea:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount += 4UL;
 80026ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026ee:	3304      	adds	r3, #4
 80026f0:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80026f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d1d8      	bne.n	80026ac <JPEG_DMA_PollResidualData+0x16>
 80026fa:	e7d0      	b.n	800269e <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
 80026fc:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002702:	f012 0f10 	tst.w	r2, #16
 8002706:	d002      	beq.n	800270e <JPEG_DMA_PollResidualData+0x78>
 8002708:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 800270c:	d117      	bne.n	800273e <JPEG_DMA_PollResidualData+0xa8>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8002716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002718:	b993      	cbnz	r3, 8002740 <JPEG_DMA_PollResidualData+0xaa>
    tmpContext = hjpeg->Context;
 800271a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800271c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800271e:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
 8002722:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 8002724:	2200      	movs	r2, #0
 8002726:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800272a:	2201      	movs	r2, #1
 800272c:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d00b      	beq.n	8002750 <JPEG_DMA_PollResidualData+0xba>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8002738:	4620      	mov	r0, r4
 800273a:	f7ff fe21 	bl	8002380 <HAL_JPEG_EncodeCpltCallback>
}
 800273e:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002740:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002742:	69e1      	ldr	r1, [r4, #28]
 8002744:	4620      	mov	r0, r4
 8002746:	f004 fe9d 	bl	8007484 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	6263      	str	r3, [r4, #36]	; 0x24
 800274e:	e7e4      	b.n	800271a <JPEG_DMA_PollResidualData+0x84>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8002750:	4620      	mov	r0, r4
 8002752:	f004 fea3 	bl	800749c <HAL_JPEG_DecodeCpltCallback>
 8002756:	e7f2      	b.n	800273e <JPEG_DMA_PollResidualData+0xa8>

08002758 <JPEG_DMA_EndProcess>:
{
 8002758:	b510      	push	{r4, lr}
 800275a:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 800275c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800275e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	4b21      	ldr	r3, [pc, #132]	; (80027ec <JPEG_DMA_EndProcess+0x94>)
 8002766:	ea03 0381 	and.w	r3, r3, r1, lsl #2
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	6243      	str	r3, [r0, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800276e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002770:	429a      	cmp	r2, r3
 8002772:	d01e      	beq.n	80027b2 <JPEG_DMA_EndProcess+0x5a>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8002774:	6823      	ldr	r3, [r4, #0]
 8002776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002778:	f013 0f10 	tst.w	r3, #16
 800277c:	d12c      	bne.n	80027d8 <JPEG_DMA_EndProcess+0x80>
    if (hjpeg->JpegOutCount > 0UL)
 800277e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002780:	b9f3      	cbnz	r3, 80027c0 <JPEG_DMA_EndProcess+0x68>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002782:	6822      	ldr	r2, [r4, #0]
 8002784:	6813      	ldr	r3, [r2, #0]
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800278c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800278e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002790:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
 8002794:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 8002796:	2200      	movs	r2, #0
 8002798:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800279c:	2201      	movs	r2, #1
 800279e:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d012      	beq.n	80027d0 <JPEG_DMA_EndProcess+0x78>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80027aa:	4620      	mov	r0, r4
 80027ac:	f7ff fde8 	bl	8002380 <HAL_JPEG_EncodeCpltCallback>
 80027b0:	e016      	b.n	80027e0 <JPEG_DMA_EndProcess+0x88>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80027b2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80027b4:	69c1      	ldr	r1, [r0, #28]
 80027b6:	f004 fe65 	bl	8007484 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	6263      	str	r3, [r4, #36]	; 0x24
 80027be:	e7d9      	b.n	8002774 <JPEG_DMA_EndProcess+0x1c>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80027c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027c2:	69e1      	ldr	r1, [r4, #28]
 80027c4:	4620      	mov	r0, r4
 80027c6:	f004 fe5d 	bl	8007484 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	6263      	str	r3, [r4, #36]	; 0x24
 80027ce:	e7d8      	b.n	8002782 <JPEG_DMA_EndProcess+0x2a>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80027d0:	4620      	mov	r0, r4
 80027d2:	f004 fe63 	bl	800749c <HAL_JPEG_DecodeCpltCallback>
 80027d6:	e003      	b.n	80027e0 <JPEG_DMA_EndProcess+0x88>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80027d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027da:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80027de:	d000      	beq.n	80027e2 <JPEG_DMA_EndProcess+0x8a>
}
 80027e0:	bd10      	pop	{r4, pc}
    JPEG_DMA_PollResidualData(hjpeg);
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7ff ff57 	bl	8002696 <JPEG_DMA_PollResidualData>
}
 80027e8:	e7fa      	b.n	80027e0 <JPEG_DMA_EndProcess+0x88>
 80027ea:	bf00      	nop
 80027ec:	0003fffc 	.word	0x0003fffc

080027f0 <JPEG_DMA_ContinueProcess>:
{
 80027f0:	b538      	push	{r3, r4, r5, lr}
 80027f2:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80027f4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d02b      	beq.n	8002856 <JPEG_DMA_ContinueProcess+0x66>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80027fe:	6823      	ldr	r3, [r4, #0]
 8002800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002802:	f012 0f20 	tst.w	r2, #32
 8002806:	d025      	beq.n	8002854 <JPEG_DMA_ContinueProcess+0x64>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 8002808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800280a:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8002810:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002816:	6563      	str	r3, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002818:	6822      	ldr	r2, [r4, #0]
 800281a:	6813      	ldr	r3, [r2, #0]
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	6013      	str	r3, [r2, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002822:	6822      	ldr	r2, [r4, #0]
 8002824:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002826:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 800282a:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800282c:	6822      	ldr	r2, [r4, #0]
 800282e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002830:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002834:	6393      	str	r3, [r2, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 8002836:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002838:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d023      	beq.n	800288a <JPEG_DMA_ContinueProcess+0x9a>
    if (hjpeg->hdmaout->State == HAL_DMA_STATE_BUSY)
 8002842:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002844:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d020      	beq.n	8002890 <JPEG_DMA_ContinueProcess+0xa0>
      JPEG_DMA_EndProcess(hjpeg);
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff ff82 	bl	8002758 <JPEG_DMA_EndProcess>
}
 8002854:	bd38      	pop	{r3, r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8002856:	6803      	ldr	r3, [r0, #0]
 8002858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800285e:	d0ce      	beq.n	80027fe <JPEG_DMA_ContinueProcess+0xe>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8002860:	1d05      	adds	r5, r0, #4
 8002862:	4629      	mov	r1, r5
 8002864:	f7ff fce0 	bl	8002228 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800286c:	4629      	mov	r1, r5
 800286e:	4620      	mov	r0, r4
 8002870:	f004 fe1a 	bl	80074a8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8002874:	6822      	ldr	r2, [r4, #0]
 8002876:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800287e:	6822      	ldr	r2, [r4, #0]
 8002880:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002886:	6393      	str	r3, [r2, #56]	; 0x38
 8002888:	e7b9      	b.n	80027fe <JPEG_DMA_ContinueProcess+0xe>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmain);
 800288a:	f7fe fee6 	bl	800165a <HAL_DMA_Abort_IT>
 800288e:	e7d8      	b.n	8002842 <JPEG_DMA_ContinueProcess+0x52>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmaout);
 8002890:	f7fe fee3 	bl	800165a <HAL_DMA_Abort_IT>
 8002894:	e7de      	b.n	8002854 <JPEG_DMA_ContinueProcess+0x64>

08002896 <HAL_JPEG_IRQHandler>:
{
 8002896:	b508      	push	{r3, lr}
  switch (hjpeg->State)
 8002898:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 800289c:	3b03      	subs	r3, #3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d900      	bls.n	80028a4 <HAL_JPEG_IRQHandler+0xe>
}
 80028a2:	bd08      	pop	{r3, pc}
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80028a4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d007      	beq.n	80028be <HAL_JPEG_IRQHandler+0x28>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80028ae:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b0c      	cmp	r3, #12
 80028b6:	d1f4      	bne.n	80028a2 <HAL_JPEG_IRQHandler+0xc>
        JPEG_DMA_ContinueProcess(hjpeg);
 80028b8:	f7ff ff9a 	bl	80027f0 <JPEG_DMA_ContinueProcess>
}
 80028bc:	e7f1      	b.n	80028a2 <HAL_JPEG_IRQHandler+0xc>
        (void) JPEG_Process(hjpeg);
 80028be:	f7ff fe5d 	bl	800257c <JPEG_Process>
 80028c2:	e7ee      	b.n	80028a2 <HAL_JPEG_IRQHandler+0xc>

080028c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028c8:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ca:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 80028ce:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80028d2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80028d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028da:	429a      	cmp	r2, r3
 80028dc:	d855      	bhi.n	800298a <PCD_WriteEmptyTxFifo+0xc6>
 80028de:	4607      	mov	r7, r0
 80028e0:	460c      	mov	r4, r1
 80028e2:	46c1      	mov	r9, r8
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 80028e4:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 80028e6:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 80028ea:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80028ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d300      	bcc.n	80028f6 <PCD_WriteEmptyTxFifo+0x32>
  len = ep->xfer_len - ep->xfer_count;
 80028f4:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 80028f6:	f102 0a03 	add.w	sl, r2, #3
 80028fa:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028fe:	e015      	b.n	800292c <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8002900:	f106 0a03 	add.w	sl, r6, #3
 8002904:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002908:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 800290c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8002910:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8002912:	7c3b      	ldrb	r3, [r7, #16]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	b2b3      	uxth	r3, r6
 8002918:	b2e2      	uxtb	r2, r4
 800291a:	4640      	mov	r0, r8
 800291c:	f002 ff3a 	bl	8005794 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8002920:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8002922:	4433      	add	r3, r6
 8002924:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8002926:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8002928:	441e      	add	r6, r3
 800292a:	656e      	str	r6, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800292c:	eb09 1344 	add.w	r3, r9, r4, lsl #5
 8002930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	b29b      	uxth	r3, r3
 8002938:	4553      	cmp	r3, sl
 800293a:	d312      	bcc.n	8002962 <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800293c:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8002940:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8002944:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8002946:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002948:	4299      	cmp	r1, r3
 800294a:	d20a      	bcs.n	8002962 <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800294c:	b14b      	cbz	r3, 8002962 <PCD_WriteEmptyTxFifo+0x9e>
    len = ep->xfer_len - ep->xfer_count;
 800294e:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 8002950:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8002954:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8002958:	6c56      	ldr	r6, [r2, #68]	; 0x44
 800295a:	429e      	cmp	r6, r3
 800295c:	d3d0      	bcc.n	8002900 <PCD_WriteEmptyTxFifo+0x3c>
    len = ep->xfer_len - ep->xfer_count;
 800295e:	461e      	mov	r6, r3
 8002960:	e7ce      	b.n	8002900 <PCD_WriteEmptyTxFifo+0x3c>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002962:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 8002966:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 800296a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800296c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296e:	429a      	cmp	r2, r3
 8002970:	d80f      	bhi.n	8002992 <PCD_WriteEmptyTxFifo+0xce>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002972:	f004 040f 	and.w	r4, r4, #15
 8002976:	2301      	movs	r3, #1
 8002978:	40a3      	lsls	r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800297a:	f8d8 4834 	ldr.w	r4, [r8, #2100]	; 0x834
 800297e:	ea24 0403 	bic.w	r4, r4, r3
 8002982:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 8002986:	2000      	movs	r0, #0
 8002988:	e000      	b.n	800298c <PCD_WriteEmptyTxFifo+0xc8>
    return HAL_ERROR;
 800298a:	2001      	movs	r0, #1
}
 800298c:	b002      	add	sp, #8
 800298e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 8002992:	2000      	movs	r0, #0
 8002994:	e7fa      	b.n	800298c <PCD_WriteEmptyTxFifo+0xc8>
	...

08002998 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002998:	b570      	push	{r4, r5, r6, lr}
 800299a:	4604      	mov	r4, r0
 800299c:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800299e:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80029a0:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029a2:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80029a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029aa:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 80029ac:	6921      	ldr	r1, [r4, #16]
 80029ae:	2901      	cmp	r1, #1
 80029b0:	d011      	beq.n	80029d6 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80029b2:	4935      	ldr	r1, [pc, #212]	; (8002a88 <PCD_EP_OutXfrComplete_int+0xf0>)
 80029b4:	428e      	cmp	r6, r1
 80029b6:	d050      	beq.n	8002a5a <PCD_EP_OutXfrComplete_int+0xc2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80029b8:	b93d      	cbnz	r5, 80029ca <PCD_EP_OutXfrComplete_int+0x32>
 80029ba:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80029be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80029c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d058      	beq.n	8002a7c <PCD_EP_OutXfrComplete_int+0xe4>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029ca:	b2e9      	uxtb	r1, r5
 80029cc:	4620      	mov	r0, r4
 80029ce:	f004 fdbd 	bl	800754c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 80029d2:	2000      	movs	r0, #0
 80029d4:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80029d6:	f012 0f08 	tst.w	r2, #8
 80029da:	d009      	beq.n	80029f0 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029dc:	492b      	ldr	r1, [pc, #172]	; (8002a8c <PCD_EP_OutXfrComplete_int+0xf4>)
 80029de:	428e      	cmp	r6, r1
 80029e0:	d9f7      	bls.n	80029d2 <PCD_EP_OutXfrComplete_int+0x3a>
 80029e2:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80029e6:	d0f4      	beq.n	80029d2 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80029ec:	609a      	str	r2, [r3, #8]
 80029ee:	e7f0      	b.n	80029d2 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80029f0:	f012 0f20 	tst.w	r2, #32
 80029f4:	d002      	beq.n	80029fc <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029f6:	2220      	movs	r2, #32
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	e7ea      	b.n	80029d2 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80029fc:	f012 0f28 	tst.w	r2, #40	; 0x28
 8002a00:	d1e7      	bne.n	80029d2 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a02:	4922      	ldr	r1, [pc, #136]	; (8002a8c <PCD_EP_OutXfrComplete_int+0xf4>)
 8002a04:	428e      	cmp	r6, r1
 8002a06:	d906      	bls.n	8002a16 <PCD_EP_OutXfrComplete_int+0x7e>
 8002a08:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002a0c:	d003      	beq.n	8002a16 <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e7dd      	b.n	80029d2 <PCD_EP_OutXfrComplete_int+0x3a>
          hpcd->OUT_ep[epnum].maxpacket -
 8002a16:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8002a1a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002a1e:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002a28:	1ac9      	subs	r1, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002a2a:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002a2e:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8002a32:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8002a36:	440b      	add	r3, r1
 8002a38:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a3c:	b915      	cbnz	r5, 8002a44 <PCD_EP_OutXfrComplete_int+0xac>
 8002a3e:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8002a42:	b123      	cbz	r3, 8002a4e <PCD_EP_OutXfrComplete_int+0xb6>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a44:	b2e9      	uxtb	r1, r5
 8002a46:	4620      	mov	r0, r4
 8002a48:	f004 fd80 	bl	800754c <HAL_PCD_DataOutStageCallback>
 8002a4c:	e7c1      	b.n	80029d2 <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a4e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002a52:	2101      	movs	r1, #1
 8002a54:	f003 f87e 	bl	8005b54 <USB_EP0_OutStart>
 8002a58:	e7f4      	b.n	8002a44 <PCD_EP_OutXfrComplete_int+0xac>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a5a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002a5e:	d003      	beq.n	8002a68 <PCD_EP_OutXfrComplete_int+0xd0>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	e7b4      	b.n	80029d2 <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a68:	f012 0f20 	tst.w	r2, #32
 8002a6c:	d001      	beq.n	8002a72 <PCD_EP_OutXfrComplete_int+0xda>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a6e:	2220      	movs	r2, #32
 8002a70:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a72:	b2e9      	uxtb	r1, r5
 8002a74:	4620      	mov	r0, r4
 8002a76:	f004 fd69 	bl	800754c <HAL_PCD_DataOutStageCallback>
 8002a7a:	e7aa      	b.n	80029d2 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a7c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002a80:	2100      	movs	r1, #0
 8002a82:	f003 f867 	bl	8005b54 <USB_EP0_OutStart>
 8002a86:	e7a0      	b.n	80029ca <PCD_EP_OutXfrComplete_int+0x32>
 8002a88:	4f54310a 	.word	0x4f54310a
 8002a8c:	4f54300a 	.word	0x4f54300a

08002a90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a90:	b538      	push	{r3, r4, r5, lr}
 8002a92:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a94:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a96:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a98:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8002a9c:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aa0:	4a0e      	ldr	r2, [pc, #56]	; (8002adc <PCD_EP_OutSetupPacket_int+0x4c>)
 8002aa2:	4295      	cmp	r5, r2
 8002aa4:	d907      	bls.n	8002ab6 <PCD_EP_OutSetupPacket_int+0x26>
 8002aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aaa:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8002aae:	d002      	beq.n	8002ab6 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ab0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ab4:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f004 fd40 	bl	800753c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002abc:	4b07      	ldr	r3, [pc, #28]	; (8002adc <PCD_EP_OutSetupPacket_int+0x4c>)
 8002abe:	429d      	cmp	r5, r3
 8002ac0:	d902      	bls.n	8002ac8 <PCD_EP_OutSetupPacket_int+0x38>
 8002ac2:	6923      	ldr	r3, [r4, #16]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d001      	beq.n	8002acc <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8002ac8:	2000      	movs	r0, #0
 8002aca:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002acc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	6820      	ldr	r0, [r4, #0]
 8002ad4:	f003 f83e 	bl	8005b54 <USB_EP0_OutStart>
 8002ad8:	e7f6      	b.n	8002ac8 <PCD_EP_OutSetupPacket_int+0x38>
 8002ada:	bf00      	nop
 8002adc:	4f54300a 	.word	0x4f54300a

08002ae0 <HAL_PCD_IRQHandler>:
{
 8002ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ae8:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002aea:	4628      	mov	r0, r5
 8002aec:	f003 f81d 	bl	8005b2a <USB_GetMode>
 8002af0:	b110      	cbz	r0, 8002af8 <HAL_PCD_IRQHandler+0x18>
}
 8002af2:	b003      	add	sp, #12
 8002af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002af8:	462f      	mov	r7, r5
 8002afa:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002afc:	6820      	ldr	r0, [r4, #0]
 8002afe:	f002 ffe3 	bl	8005ac8 <USB_ReadInterrupts>
 8002b02:	2800      	cmp	r0, #0
 8002b04:	d0f5      	beq.n	8002af2 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b06:	6820      	ldr	r0, [r4, #0]
 8002b08:	f002 ffde 	bl	8005ac8 <USB_ReadInterrupts>
 8002b0c:	f010 0f02 	tst.w	r0, #2
 8002b10:	d004      	beq.n	8002b1c <HAL_PCD_IRQHandler+0x3c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b12:	6822      	ldr	r2, [r4, #0]
 8002b14:	6953      	ldr	r3, [r2, #20]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b1c:	6820      	ldr	r0, [r4, #0]
 8002b1e:	f002 ffd3 	bl	8005ac8 <USB_ReadInterrupts>
 8002b22:	f010 0f10 	tst.w	r0, #16
 8002b26:	d015      	beq.n	8002b54 <HAL_PCD_IRQHandler+0x74>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b28:	6822      	ldr	r2, [r4, #0]
 8002b2a:	6993      	ldr	r3, [r2, #24]
 8002b2c:	f023 0310 	bic.w	r3, r3, #16
 8002b30:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8002b32:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002b36:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b3a:	f3c8 4343 	ubfx	r3, r8, #17, #4
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	f000 8085 	beq.w	8002c4e <HAL_PCD_IRQHandler+0x16e>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002b44:	2b06      	cmp	r3, #6
 8002b46:	f000 80aa 	beq.w	8002c9e <HAL_PCD_IRQHandler+0x1be>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b4a:	6822      	ldr	r2, [r4, #0]
 8002b4c:	6993      	ldr	r3, [r2, #24]
 8002b4e:	f043 0310 	orr.w	r3, r3, #16
 8002b52:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b54:	6820      	ldr	r0, [r4, #0]
 8002b56:	f002 ffb7 	bl	8005ac8 <USB_ReadInterrupts>
 8002b5a:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8002b5e:	f040 80b0 	bne.w	8002cc2 <HAL_PCD_IRQHandler+0x1e2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b62:	6820      	ldr	r0, [r4, #0]
 8002b64:	f002 ffb0 	bl	8005ac8 <USB_ReadInterrupts>
 8002b68:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8002b6c:	f040 80f4 	bne.w	8002d58 <HAL_PCD_IRQHandler+0x278>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b70:	6820      	ldr	r0, [r4, #0]
 8002b72:	f002 ffa9 	bl	8005ac8 <USB_ReadInterrupts>
 8002b76:	2800      	cmp	r0, #0
 8002b78:	f2c0 8160 	blt.w	8002e3c <HAL_PCD_IRQHandler+0x35c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b7c:	6820      	ldr	r0, [r4, #0]
 8002b7e:	f002 ffa3 	bl	8005ac8 <USB_ReadInterrupts>
 8002b82:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8002b86:	d00a      	beq.n	8002b9e <HAL_PCD_IRQHandler+0xbe>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b88:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8002b8c:	f013 0f01 	tst.w	r3, #1
 8002b90:	f040 816e 	bne.w	8002e70 <HAL_PCD_IRQHandler+0x390>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b94:	6822      	ldr	r2, [r4, #0]
 8002b96:	6953      	ldr	r3, [r2, #20]
 8002b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b9c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002b9e:	6820      	ldr	r0, [r4, #0]
 8002ba0:	f002 ff92 	bl	8005ac8 <USB_ReadInterrupts>
 8002ba4:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8002ba8:	d015      	beq.n	8002bd6 <HAL_PCD_IRQHandler+0xf6>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002baa:	6822      	ldr	r2, [r4, #0]
 8002bac:	6953      	ldr	r3, [r2, #20]
 8002bae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bb2:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8002bb4:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f040 815d 	bne.w	8002e78 <HAL_PCD_IRQHandler+0x398>
        hpcd->LPM_State = LPM_L1;
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8002bcc:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	f000 fb2c 	bl	800322e <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002bd6:	6820      	ldr	r0, [r4, #0]
 8002bd8:	f002 ff76 	bl	8005ac8 <USB_ReadInterrupts>
 8002bdc:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8002be0:	f040 814e 	bne.w	8002e80 <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002be4:	6820      	ldr	r0, [r4, #0]
 8002be6:	f002 ff6f 	bl	8005ac8 <USB_ReadInterrupts>
 8002bea:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8002bee:	f040 81ac 	bne.w	8002f4a <HAL_PCD_IRQHandler+0x46a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bf2:	6820      	ldr	r0, [r4, #0]
 8002bf4:	f002 ff68 	bl	8005ac8 <USB_ReadInterrupts>
 8002bf8:	f010 0f08 	tst.w	r0, #8
 8002bfc:	f040 81bd 	bne.w	8002f7a <HAL_PCD_IRQHandler+0x49a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c00:	6820      	ldr	r0, [r4, #0]
 8002c02:	f002 ff61 	bl	8005ac8 <USB_ReadInterrupts>
 8002c06:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8002c0a:	f040 81bf 	bne.w	8002f8c <HAL_PCD_IRQHandler+0x4ac>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c0e:	6820      	ldr	r0, [r4, #0]
 8002c10:	f002 ff5a 	bl	8005ac8 <USB_ReadInterrupts>
 8002c14:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8002c18:	f040 81c2 	bne.w	8002fa0 <HAL_PCD_IRQHandler+0x4c0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c1c:	6820      	ldr	r0, [r4, #0]
 8002c1e:	f002 ff53 	bl	8005ac8 <USB_ReadInterrupts>
 8002c22:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8002c26:	f040 81c5 	bne.w	8002fb4 <HAL_PCD_IRQHandler+0x4d4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c2a:	6820      	ldr	r0, [r4, #0]
 8002c2c:	f002 ff4c 	bl	8005ac8 <USB_ReadInterrupts>
 8002c30:	f010 0f04 	tst.w	r0, #4
 8002c34:	f43f af5d 	beq.w	8002af2 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c3c:	f015 0f04 	tst.w	r5, #4
 8002c40:	f040 81c1 	bne.w	8002fc6 <HAL_PCD_IRQHandler+0x4e6>
      hpcd->Instance->GOTGINT |= temp;
 8002c44:	6822      	ldr	r2, [r4, #0]
 8002c46:	6853      	ldr	r3, [r2, #4]
 8002c48:	432b      	orrs	r3, r5
 8002c4a:	6053      	str	r3, [r2, #4]
 8002c4c:	e751      	b.n	8002af2 <HAL_PCD_IRQHandler+0x12>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c4e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002c52:	ea18 0f03 	tst.w	r8, r3
 8002c56:	f43f af78 	beq.w	8002b4a <HAL_PCD_IRQHandler+0x6a>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c5a:	ea4f 1b18 	mov.w	fp, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
 8002c68:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8002c6c:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8002c70:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 8002c74:	4628      	mov	r0, r5
 8002c76:	f002 feab 	bl	80059d0 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c7a:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 8002c7e:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 8002c82:	445b      	add	r3, fp
 8002c84:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c88:	9b01      	ldr	r3, [sp, #4]
 8002c8a:	eba3 0309 	sub.w	r3, r3, r9
 8002c8e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002c92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002c96:	445b      	add	r3, fp
 8002c98:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 8002c9c:	e755      	b.n	8002b4a <HAL_PCD_IRQHandler+0x6a>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8002ca4:	4628      	mov	r0, r5
 8002ca6:	f002 fe93 	bl	80059d0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002caa:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8002cae:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 8002cb2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002cb6:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8002cba:	4443      	add	r3, r8
 8002cbc:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8002cc0:	e743      	b.n	8002b4a <HAL_PCD_IRQHandler+0x6a>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002cc2:	6820      	ldr	r0, [r4, #0]
 8002cc4:	f002 ff04 	bl	8005ad0 <USB_ReadDevAllOutEpInterrupt>
 8002cc8:	4680      	mov	r8, r0
      epnum = 0U;
 8002cca:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8002ccc:	e017      	b.n	8002cfe <HAL_PCD_IRQHandler+0x21e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002cce:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002cd8:	4649      	mov	r1, r9
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f7ff fe5c 	bl	8002998 <PCD_EP_OutXfrComplete_int>
 8002ce0:	e01d      	b.n	8002d1e <HAL_PCD_IRQHandler+0x23e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ce2:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002cec:	4649      	mov	r1, r9
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f7ff fece 	bl	8002a90 <PCD_EP_OutSetupPacket_int>
 8002cf4:	e016      	b.n	8002d24 <HAL_PCD_IRQHandler+0x244>
        epnum++;
 8002cf6:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8002cfa:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8002cfe:	f1b8 0f00 	cmp.w	r8, #0
 8002d02:	f43f af2e 	beq.w	8002b62 <HAL_PCD_IRQHandler+0x82>
        if ((ep_intr & 0x1U) != 0U)
 8002d06:	f018 0f01 	tst.w	r8, #1
 8002d0a:	d0f4      	beq.n	8002cf6 <HAL_PCD_IRQHandler+0x216>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d0c:	fa5f f189 	uxtb.w	r1, r9
 8002d10:	6820      	ldr	r0, [r4, #0]
 8002d12:	f002 feed 	bl	8005af0 <USB_ReadDevOutEPInterrupt>
 8002d16:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d18:	f010 0f01 	tst.w	r0, #1
 8002d1c:	d1d7      	bne.n	8002cce <HAL_PCD_IRQHandler+0x1ee>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d1e:	f01a 0f08 	tst.w	sl, #8
 8002d22:	d1de      	bne.n	8002ce2 <HAL_PCD_IRQHandler+0x202>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d24:	f01a 0f10 	tst.w	sl, #16
 8002d28:	d004      	beq.n	8002d34 <HAL_PCD_IRQHandler+0x254>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d2a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002d2e:	2210      	movs	r2, #16
 8002d30:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d34:	f01a 0f20 	tst.w	sl, #32
 8002d38:	d004      	beq.n	8002d44 <HAL_PCD_IRQHandler+0x264>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d3a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d44:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8002d48:	d0d5      	beq.n	8002cf6 <HAL_PCD_IRQHandler+0x216>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d4a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d52:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8002d56:	e7ce      	b.n	8002cf6 <HAL_PCD_IRQHandler+0x216>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d58:	6820      	ldr	r0, [r4, #0]
 8002d5a:	f002 fec1 	bl	8005ae0 <USB_ReadDevAllInEpInterrupt>
 8002d5e:	4680      	mov	r8, r0
      epnum = 0U;
 8002d60:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8002d62:	e02a      	b.n	8002dba <HAL_PCD_IRQHandler+0x2da>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d64:	4659      	mov	r1, fp
 8002d66:	4620      	mov	r0, r4
 8002d68:	f004 fbfc 	bl	8007564 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d6c:	f01a 0f08 	tst.w	sl, #8
 8002d70:	d004      	beq.n	8002d7c <HAL_PCD_IRQHandler+0x29c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d72:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002d76:	2208      	movs	r2, #8
 8002d78:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d7c:	f01a 0f10 	tst.w	sl, #16
 8002d80:	d004      	beq.n	8002d8c <HAL_PCD_IRQHandler+0x2ac>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d82:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002d86:	2210      	movs	r2, #16
 8002d88:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d8c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8002d90:	d004      	beq.n	8002d9c <HAL_PCD_IRQHandler+0x2bc>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d92:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002d96:	2240      	movs	r2, #64	; 0x40
 8002d98:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d9c:	f01a 0f02 	tst.w	sl, #2
 8002da0:	d004      	beq.n	8002dac <HAL_PCD_IRQHandler+0x2cc>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002da2:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002da6:	2202      	movs	r2, #2
 8002da8:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002dac:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8002db0:	d13f      	bne.n	8002e32 <HAL_PCD_IRQHandler+0x352>
        epnum++;
 8002db2:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8002db6:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8002dba:	f1b8 0f00 	cmp.w	r8, #0
 8002dbe:	f43f aed7 	beq.w	8002b70 <HAL_PCD_IRQHandler+0x90>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002dc2:	f018 0f01 	tst.w	r8, #1
 8002dc6:	d0f4      	beq.n	8002db2 <HAL_PCD_IRQHandler+0x2d2>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dc8:	fa5f fb89 	uxtb.w	fp, r9
 8002dcc:	4659      	mov	r1, fp
 8002dce:	6820      	ldr	r0, [r4, #0]
 8002dd0:	f002 fe97 	bl	8005b02 <USB_ReadDevInEPInterrupt>
 8002dd4:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002dd6:	f010 0f01 	tst.w	r0, #1
 8002dda:	d0c7      	beq.n	8002d6c <HAL_PCD_IRQHandler+0x28c>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ddc:	f009 030f 	and.w	r3, r9, #15
 8002de0:	2101      	movs	r1, #1
 8002de2:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002de6:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8002dea:	ea23 0302 	bic.w	r3, r3, r2
 8002dee:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002df2:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002df6:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 8002dfa:	6923      	ldr	r3, [r4, #16]
 8002dfc:	428b      	cmp	r3, r1
 8002dfe:	d1b1      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x284>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e00:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8002e04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002e08:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002e0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e0c:	440a      	add	r2, r1
 8002e0e:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e10:	f1b9 0f00 	cmp.w	r9, #0
 8002e14:	d1a6      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x284>
 8002e16:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8002e1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d19f      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x284>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e24:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002e28:	2101      	movs	r1, #1
 8002e2a:	6820      	ldr	r0, [r4, #0]
 8002e2c:	f002 fe92 	bl	8005b54 <USB_EP0_OutStart>
 8002e30:	e798      	b.n	8002d64 <HAL_PCD_IRQHandler+0x284>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e32:	4649      	mov	r1, r9
 8002e34:	4620      	mov	r0, r4
 8002e36:	f7ff fd45 	bl	80028c4 <PCD_WriteEmptyTxFifo>
 8002e3a:	e7ba      	b.n	8002db2 <HAL_PCD_IRQHandler+0x2d2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e3c:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8002e48:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d008      	beq.n	8002e62 <HAL_PCD_IRQHandler+0x382>
        HAL_PCD_ResumeCallback(hpcd);
 8002e50:	4620      	mov	r0, r4
 8002e52:	f004 fbaf 	bl	80075b4 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e56:	6822      	ldr	r2, [r4, #0]
 8002e58:	6953      	ldr	r3, [r2, #20]
 8002e5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e5e:	6153      	str	r3, [r2, #20]
 8002e60:	e68c      	b.n	8002b7c <HAL_PCD_IRQHandler+0x9c>
        hpcd->LPM_State = LPM_L0;
 8002e62:	2100      	movs	r1, #0
 8002e64:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f000 f9e0 	bl	800322e <HAL_PCDEx_LPM_Callback>
 8002e6e:	e7f2      	b.n	8002e56 <HAL_PCD_IRQHandler+0x376>
        HAL_PCD_SuspendCallback(hpcd);
 8002e70:	4620      	mov	r0, r4
 8002e72:	f004 fb99 	bl	80075a8 <HAL_PCD_SuspendCallback>
 8002e76:	e68d      	b.n	8002b94 <HAL_PCD_IRQHandler+0xb4>
        HAL_PCD_SuspendCallback(hpcd);
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f004 fb95 	bl	80075a8 <HAL_PCD_SuspendCallback>
 8002e7e:	e6aa      	b.n	8002bd6 <HAL_PCD_IRQHandler+0xf6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e80:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 8002e84:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002e88:	f023 0301 	bic.w	r3, r3, #1
 8002e8c:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e90:	2110      	movs	r1, #16
 8002e92:	6820      	ldr	r0, [r4, #0]
 8002e94:	f002 fb86 	bl	80055a4 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e98:	e020      	b.n	8002edc <HAL_PCD_IRQHandler+0x3fc>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e9a:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 8002e9e:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8002ea2:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ea6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002eaa:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002eae:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002eb2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002eb6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002eba:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ebe:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ec2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002ec6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002eca:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ece:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002ed2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002ed6:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eda:	3601      	adds	r6, #1
 8002edc:	6863      	ldr	r3, [r4, #4]
 8002ede:	42b3      	cmp	r3, r6
 8002ee0:	d8db      	bhi.n	8002e9a <HAL_PCD_IRQHandler+0x3ba>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ee2:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8002ee6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002eea:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002eee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ef0:	b1eb      	cbz	r3, 8002f2e <HAL_PCD_IRQHandler+0x44e>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ef2:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 8002ef6:	f043 030b 	orr.w	r3, r3, #11
 8002efa:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002efe:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8002f02:	f043 030b 	orr.w	r3, r3, #11
 8002f06:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f0a:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8002f0e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f12:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f16:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002f1a:	7c21      	ldrb	r1, [r4, #16]
 8002f1c:	6820      	ldr	r0, [r4, #0]
 8002f1e:	f002 fe19 	bl	8005b54 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f22:	6822      	ldr	r2, [r4, #0]
 8002f24:	6953      	ldr	r3, [r2, #20]
 8002f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f2a:	6153      	str	r3, [r2, #20]
 8002f2c:	e65a      	b.n	8002be4 <HAL_PCD_IRQHandler+0x104>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f2e:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8002f32:	f242 032b 	movw	r3, #8235	; 0x202b
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f3c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8002f40:	f043 030b 	orr.w	r3, r3, #11
 8002f44:	f8c8 3010 	str.w	r3, [r8, #16]
 8002f48:	e7df      	b.n	8002f0a <HAL_PCD_IRQHandler+0x42a>
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f4a:	6820      	ldr	r0, [r4, #0]
 8002f4c:	f002 fdf2 	bl	8005b34 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f50:	6820      	ldr	r0, [r4, #0]
 8002f52:	f002 fb3b 	bl	80055cc <USB_GetDevSpeed>
 8002f56:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f58:	6825      	ldr	r5, [r4, #0]
 8002f5a:	f000 fcc3 	bl	80038e4 <HAL_RCC_GetHCLKFreq>
 8002f5e:	4601      	mov	r1, r0
 8002f60:	7b22      	ldrb	r2, [r4, #12]
 8002f62:	4628      	mov	r0, r5
 8002f64:	f002 faac 	bl	80054c0 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8002f68:	4620      	mov	r0, r4
 8002f6a:	f004 fb0c 	bl	8007586 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f6e:	6822      	ldr	r2, [r4, #0]
 8002f70:	6953      	ldr	r3, [r2, #20]
 8002f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f76:	6153      	str	r3, [r2, #20]
 8002f78:	e63b      	b.n	8002bf2 <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SOFCallback(hpcd);
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	f004 fafd 	bl	800757a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f80:	6822      	ldr	r2, [r4, #0]
 8002f82:	6953      	ldr	r3, [r2, #20]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	6153      	str	r3, [r2, #20]
 8002f8a:	e639      	b.n	8002c00 <HAL_PCD_IRQHandler+0x120>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f004 fb1c 	bl	80075cc <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f94:	6822      	ldr	r2, [r4, #0]
 8002f96:	6953      	ldr	r3, [r2, #20]
 8002f98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f9c:	6153      	str	r3, [r2, #20]
 8002f9e:	e636      	b.n	8002c0e <HAL_PCD_IRQHandler+0x12e>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f004 fb0c 	bl	80075c0 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fa8:	6822      	ldr	r2, [r4, #0]
 8002faa:	6953      	ldr	r3, [r2, #20]
 8002fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb0:	6153      	str	r3, [r2, #20]
 8002fb2:	e633      	b.n	8002c1c <HAL_PCD_IRQHandler+0x13c>
      HAL_PCD_ConnectCallback(hpcd);
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f004 fb0f 	bl	80075d8 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fba:	6822      	ldr	r2, [r4, #0]
 8002fbc:	6953      	ldr	r3, [r2, #20]
 8002fbe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fc2:	6153      	str	r3, [r2, #20]
 8002fc4:	e631      	b.n	8002c2a <HAL_PCD_IRQHandler+0x14a>
        HAL_PCD_DisconnectCallback(hpcd);
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	f004 fb0c 	bl	80075e4 <HAL_PCD_DisconnectCallback>
 8002fcc:	e63a      	b.n	8002c44 <HAL_PCD_IRQHandler+0x164>

08002fce <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002fce:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d00d      	beq.n	8002ff2 <HAL_PCD_SetAddress+0x24>
{
 8002fd6:	b510      	push	{r4, lr}
 8002fd8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002fda:	2301      	movs	r3, #1
 8002fdc:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002fe0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fe4:	6800      	ldr	r0, [r0, #0]
 8002fe6:	f002 fd5f 	bl	8005aa8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fea:	2000      	movs	r0, #0
 8002fec:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002ff0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002ff2:	2002      	movs	r0, #2
}
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_PCD_EP_Open>:
{
 8002ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff8:	4607      	mov	r7, r0
 8002ffa:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002ffc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003000:	d127      	bne.n	8003052 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003002:	f001 050f 	and.w	r5, r1, #15
 8003006:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 800300a:	00b6      	lsls	r6, r6, #2
 800300c:	f506 76fc 	add.w	r6, r6, #504	; 0x1f8
 8003010:	4406      	add	r6, r0
 8003012:	1d31      	adds	r1, r6, #4
    ep->is_in = 0U;
 8003014:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8003018:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800301c:	2000      	movs	r0, #0
 800301e:	f885 01fd 	strb.w	r0, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8003022:	f004 040f 	and.w	r4, r4, #15
 8003026:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8003028:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 800302a:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800302c:	784a      	ldrb	r2, [r1, #1]
 800302e:	b102      	cbz	r2, 8003032 <HAL_PCD_EP_Open+0x3c>
    ep->tx_fifo_num = ep->num;
 8003030:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8003032:	2b02      	cmp	r3, #2
 8003034:	d01d      	beq.n	8003072 <HAL_PCD_EP_Open+0x7c>
  __HAL_LOCK(hpcd);
 8003036:	f897 33bc 	ldrb.w	r3, [r7, #956]	; 0x3bc
 800303a:	2b01      	cmp	r3, #1
 800303c:	d01c      	beq.n	8003078 <HAL_PCD_EP_Open+0x82>
 800303e:	2301      	movs	r3, #1
 8003040:	f887 33bc 	strb.w	r3, [r7, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003044:	6838      	ldr	r0, [r7, #0]
 8003046:	f002 fad1 	bl	80055ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800304a:	2000      	movs	r0, #0
 800304c:	f887 03bc 	strb.w	r0, [r7, #956]	; 0x3bc
}
 8003050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003052:	f001 000f 	and.w	r0, r1, #15
 8003056:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 800305a:	0089      	lsls	r1, r1, #2
 800305c:	3138      	adds	r1, #56	; 0x38
 800305e:	4439      	add	r1, r7
 8003060:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8003062:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8003066:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800306a:	2501      	movs	r5, #1
 800306c:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
 8003070:	e7d7      	b.n	8003022 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	710b      	strb	r3, [r1, #4]
 8003076:	e7de      	b.n	8003036 <HAL_PCD_EP_Open+0x40>
  __HAL_LOCK(hpcd);
 8003078:	2002      	movs	r0, #2
 800307a:	e7e9      	b.n	8003050 <HAL_PCD_EP_Open+0x5a>

0800307c <HAL_PCD_EP_Receive>:
{
 800307c:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800307e:	f001 040f 	and.w	r4, r1, #15
 8003082:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8003086:	0089      	lsls	r1, r1, #2
 8003088:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 800308c:	4401      	add	r1, r0
 800308e:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8003090:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8003094:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8003098:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
  ep->xfer_len = len;
 800309c:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
  ep->xfer_count = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  ep->is_in = 0U;
 80030a6:	f885 31fd 	strb.w	r3, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80030aa:	f885 41fc 	strb.w	r4, [r5, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 80030ae:	6903      	ldr	r3, [r0, #16]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d006      	beq.n	80030c2 <HAL_PCD_EP_Receive+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030b4:	b964      	cbnz	r4, 80030d0 <HAL_PCD_EP_Receive+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	6800      	ldr	r0, [r0, #0]
 80030ba:	f002 fadf 	bl	800567c <USB_EP0StartXfer>
}
 80030be:	2000      	movs	r0, #0
 80030c0:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80030c2:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80030c6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80030ca:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
 80030ce:	e7f1      	b.n	80030b4 <HAL_PCD_EP_Receive+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	6800      	ldr	r0, [r0, #0]
 80030d4:	f002 fb72 	bl	80057bc <USB_EPStartXfer>
 80030d8:	e7f1      	b.n	80030be <HAL_PCD_EP_Receive+0x42>

080030da <HAL_PCD_EP_Transmit>:
{
 80030da:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030dc:	f001 040f 	and.w	r4, r1, #15
 80030e0:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 80030e4:	0089      	lsls	r1, r1, #2
 80030e6:	3138      	adds	r1, #56	; 0x38
 80030e8:	4401      	add	r1, r0
 80030ea:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80030ec:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80030f0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80030f4:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 80030f6:	652b      	str	r3, [r5, #80]	; 0x50
  ep->xfer_count = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1U;
 80030fc:	2301      	movs	r3, #1
 80030fe:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8003102:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8003106:	6903      	ldr	r3, [r0, #16]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d006      	beq.n	800311a <HAL_PCD_EP_Transmit+0x40>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800310c:	b95c      	cbnz	r4, 8003126 <HAL_PCD_EP_Transmit+0x4c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800310e:	b2da      	uxtb	r2, r3
 8003110:	6800      	ldr	r0, [r0, #0]
 8003112:	f002 fab3 	bl	800567c <USB_EP0StartXfer>
}
 8003116:	2000      	movs	r0, #0
 8003118:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800311a:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 800311e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8003122:	64ea      	str	r2, [r5, #76]	; 0x4c
 8003124:	e7f2      	b.n	800310c <HAL_PCD_EP_Transmit+0x32>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003126:	b2da      	uxtb	r2, r3
 8003128:	6800      	ldr	r0, [r0, #0]
 800312a:	f002 fb47 	bl	80057bc <USB_EPStartXfer>
 800312e:	e7f2      	b.n	8003116 <HAL_PCD_EP_Transmit+0x3c>

08003130 <HAL_PCD_EP_SetStall>:
{
 8003130:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003132:	f001 050f 	and.w	r5, r1, #15
 8003136:	6842      	ldr	r2, [r0, #4]
 8003138:	4295      	cmp	r5, r2
 800313a:	d839      	bhi.n	80031b0 <HAL_PCD_EP_SetStall+0x80>
 800313c:	4604      	mov	r4, r0
 800313e:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8003140:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003144:	d11f      	bne.n	8003186 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8003146:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800314a:	0089      	lsls	r1, r1, #2
 800314c:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8003150:	4401      	add	r1, r0
 8003152:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8003154:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003158:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800315c:	2200      	movs	r2, #0
 800315e:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8003162:	2301      	movs	r3, #1
 8003164:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003166:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8003168:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800316c:	2b01      	cmp	r3, #1
 800316e:	d021      	beq.n	80031b4 <HAL_PCD_EP_SetStall+0x84>
 8003170:	2301      	movs	r3, #1
 8003172:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003176:	6820      	ldr	r0, [r4, #0]
 8003178:	f002 fc3b 	bl	80059f2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800317c:	b18d      	cbz	r5, 80031a2 <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 800317e:	2000      	movs	r0, #0
 8003180:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8003184:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003186:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 800318a:	0089      	lsls	r1, r1, #2
 800318c:	3138      	adds	r1, #56	; 0x38
 800318e:	4401      	add	r1, r0
 8003190:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8003192:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8003196:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80031a0:	e7df      	b.n	8003162 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031a2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80031a6:	7c21      	ldrb	r1, [r4, #16]
 80031a8:	6820      	ldr	r0, [r4, #0]
 80031aa:	f002 fcd3 	bl	8005b54 <USB_EP0_OutStart>
 80031ae:	e7e6      	b.n	800317e <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 80031b0:	2001      	movs	r0, #1
 80031b2:	e7e7      	b.n	8003184 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 80031b4:	2002      	movs	r0, #2
 80031b6:	e7e5      	b.n	8003184 <HAL_PCD_EP_SetStall+0x54>

080031b8 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031b8:	f001 030f 	and.w	r3, r1, #15
 80031bc:	6842      	ldr	r2, [r0, #4]
 80031be:	4293      	cmp	r3, r2
 80031c0:	d831      	bhi.n	8003226 <HAL_PCD_EP_ClrStall+0x6e>
{
 80031c2:	b510      	push	{r4, lr}
 80031c4:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80031c6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80031ca:	d11e      	bne.n	800320a <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031cc:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80031d0:	0089      	lsls	r1, r1, #2
 80031d2:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 80031d6:	4401      	add	r1, r0
 80031d8:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80031da:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80031de:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80031e2:	2000      	movs	r0, #0
 80031e4:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 80031e8:	2200      	movs	r2, #0
 80031ea:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ec:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80031ee:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d019      	beq.n	800322a <HAL_PCD_EP_ClrStall+0x72>
 80031f6:	2301      	movs	r3, #1
 80031f8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031fc:	6820      	ldr	r0, [r4, #0]
 80031fe:	f002 fc25 	bl	8005a4c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003202:	2000      	movs	r0, #0
 8003204:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8003208:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800320a:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800320e:	0089      	lsls	r1, r1, #2
 8003210:	3138      	adds	r1, #56	; 0x38
 8003212:	4401      	add	r1, r0
 8003214:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8003216:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800321a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800321e:	2001      	movs	r0, #1
 8003220:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 8003224:	e7e0      	b.n	80031e8 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8003226:	2001      	movs	r0, #1
}
 8003228:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 800322a:	2002      	movs	r0, #2
 800322c:	e7ec      	b.n	8003208 <HAL_PCD_EP_ClrStall+0x50>

0800322e <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800322e:	4770      	bx	lr

08003230 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003230:	b510      	push	{r4, lr}
 8003232:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003234:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <HAL_PWREx_EnableOverDrive+0x74>)
 8003236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003238:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800323c:	641a      	str	r2, [r3, #64]	; 0x40
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003248:	4a17      	ldr	r2, [pc, #92]	; (80032a8 <HAL_PWREx_EnableOverDrive+0x78>)
 800324a:	6813      	ldr	r3, [r2, #0]
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003252:	f7fe f83f 	bl	80012d4 <HAL_GetTick>
 8003256:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003258:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <HAL_PWREx_EnableOverDrive+0x78>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003260:	d108      	bne.n	8003274 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003262:	f7fe f837 	bl	80012d4 <HAL_GetTick>
 8003266:	1b00      	subs	r0, r0, r4
 8003268:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800326c:	d9f4      	bls.n	8003258 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800326e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8003270:	b002      	add	sp, #8
 8003272:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003274:	4a0c      	ldr	r2, [pc, #48]	; (80032a8 <HAL_PWREx_EnableOverDrive+0x78>)
 8003276:	6813      	ldr	r3, [r2, #0]
 8003278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800327c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800327e:	f7fe f829 	bl	80012d4 <HAL_GetTick>
 8003282:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003284:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <HAL_PWREx_EnableOverDrive+0x78>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800328c:	d107      	bne.n	800329e <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800328e:	f7fe f821 	bl	80012d4 <HAL_GetTick>
 8003292:	1b00      	subs	r0, r0, r4
 8003294:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003298:	d9f4      	bls.n	8003284 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 800329a:	2003      	movs	r0, #3
 800329c:	e7e8      	b.n	8003270 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800329e:	2000      	movs	r0, #0
 80032a0:	e7e6      	b.n	8003270 <HAL_PWREx_EnableOverDrive+0x40>
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800
 80032a8:	40007000 	.word	0x40007000

080032ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032ac:	b570      	push	{r4, r5, r6, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b2:	6803      	ldr	r3, [r0, #0]
 80032b4:	f013 0f01 	tst.w	r3, #1
 80032b8:	d029      	beq.n	800330e <HAL_RCC_OscConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032ba:	4ba8      	ldr	r3, [pc, #672]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d01a      	beq.n	80032fc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c6:	4ba5      	ldr	r3, [pc, #660]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d00f      	beq.n	80032f2 <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032d2:	6863      	ldr	r3, [r4, #4]
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d8:	d040      	beq.n	800335c <HAL_RCC_OscConfig+0xb0>
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d154      	bne.n	8003388 <HAL_RCC_OscConfig+0xdc>
 80032de:	4b9f      	ldr	r3, [pc, #636]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	e039      	b.n	8003366 <HAL_RCC_OscConfig+0xba>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f2:	4b9a      	ldr	r3, [pc, #616]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80032fa:	d0ea      	beq.n	80032d2 <HAL_RCC_OscConfig+0x26>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032fc:	4b97      	ldr	r3, [pc, #604]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003304:	d003      	beq.n	800330e <HAL_RCC_OscConfig+0x62>
 8003306:	6863      	ldr	r3, [r4, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 81d1 	beq.w	80036b0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	f013 0f02 	tst.w	r3, #2
 8003314:	d07a      	beq.n	800340c <HAL_RCC_OscConfig+0x160>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003316:	4b91      	ldr	r3, [pc, #580]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f013 0f0c 	tst.w	r3, #12
 800331e:	d05e      	beq.n	80033de <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003320:	4b8e      	ldr	r3, [pc, #568]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 030c 	and.w	r3, r3, #12
 8003328:	2b08      	cmp	r3, #8
 800332a:	d053      	beq.n	80033d4 <HAL_RCC_OscConfig+0x128>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800332c:	68e3      	ldr	r3, [r4, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 8096 	beq.w	8003460 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003334:	4a89      	ldr	r2, [pc, #548]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 8003336:	6813      	ldr	r3, [r2, #0]
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333e:	f7fd ffc9 	bl	80012d4 <HAL_GetTick>
 8003342:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003344:	4b85      	ldr	r3, [pc, #532]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f013 0f02 	tst.w	r3, #2
 800334c:	d179      	bne.n	8003442 <HAL_RCC_OscConfig+0x196>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334e:	f7fd ffc1 	bl	80012d4 <HAL_GetTick>
 8003352:	1b40      	subs	r0, r0, r5
 8003354:	2802      	cmp	r0, #2
 8003356:	d9f5      	bls.n	8003344 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003358:	2003      	movs	r0, #3
 800335a:	e1ae      	b.n	80036ba <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335c:	4a7f      	ldr	r2, [pc, #508]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 800335e:	6813      	ldr	r3, [r2, #0]
 8003360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003364:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003366:	6863      	ldr	r3, [r4, #4]
 8003368:	b32b      	cbz	r3, 80033b6 <HAL_RCC_OscConfig+0x10a>
        tickstart = HAL_GetTick();
 800336a:	f7fd ffb3 	bl	80012d4 <HAL_GetTick>
 800336e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003370:	4b7a      	ldr	r3, [pc, #488]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003378:	d1c9      	bne.n	800330e <HAL_RCC_OscConfig+0x62>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800337a:	f7fd ffab 	bl	80012d4 <HAL_GetTick>
 800337e:	1b40      	subs	r0, r0, r5
 8003380:	2864      	cmp	r0, #100	; 0x64
 8003382:	d9f5      	bls.n	8003370 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 8003384:	2003      	movs	r0, #3
 8003386:	e198      	b.n	80036ba <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800338c:	d009      	beq.n	80033a2 <HAL_RCC_OscConfig+0xf6>
 800338e:	4b73      	ldr	r3, [pc, #460]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	e7e1      	b.n	8003366 <HAL_RCC_OscConfig+0xba>
 80033a2:	4b6e      	ldr	r3, [pc, #440]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	e7d7      	b.n	8003366 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 80033b6:	f7fd ff8d 	bl	80012d4 <HAL_GetTick>
 80033ba:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033bc:	4b67      	ldr	r3, [pc, #412]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80033c4:	d0a3      	beq.n	800330e <HAL_RCC_OscConfig+0x62>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c6:	f7fd ff85 	bl	80012d4 <HAL_GetTick>
 80033ca:	1b40      	subs	r0, r0, r5
 80033cc:	2864      	cmp	r0, #100	; 0x64
 80033ce:	d9f5      	bls.n	80033bc <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 80033d0:	2003      	movs	r0, #3
 80033d2:	e172      	b.n	80036ba <HAL_RCC_OscConfig+0x40e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033d4:	4b61      	ldr	r3, [pc, #388]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80033dc:	d1a6      	bne.n	800332c <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033de:	4b5f      	ldr	r3, [pc, #380]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f013 0f02 	tst.w	r3, #2
 80033e6:	d003      	beq.n	80033f0 <HAL_RCC_OscConfig+0x144>
 80033e8:	68e3      	ldr	r3, [r4, #12]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	f040 8162 	bne.w	80036b4 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f0:	485a      	ldr	r0, [pc, #360]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 80033f2:	6803      	ldr	r3, [r0, #0]
 80033f4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80033f8:	6921      	ldr	r1, [r4, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fa:	22f8      	movs	r2, #248	; 0xf8
 80033fc:	fa92 f2a2 	rbit	r2, r2
 8003400:	fab2 f282 	clz	r2, r2
 8003404:	fa01 f202 	lsl.w	r2, r1, r2
 8003408:	4313      	orrs	r3, r2
 800340a:	6003      	str	r3, [r0, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	f013 0f08 	tst.w	r3, #8
 8003412:	d04d      	beq.n	80034b0 <HAL_RCC_OscConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003414:	6963      	ldr	r3, [r4, #20]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d036      	beq.n	8003488 <HAL_RCC_OscConfig+0x1dc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341a:	4a50      	ldr	r2, [pc, #320]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 800341c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003424:	f7fd ff56 	bl	80012d4 <HAL_GetTick>
 8003428:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342a:	4b4c      	ldr	r3, [pc, #304]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 800342c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800342e:	f013 0f02 	tst.w	r3, #2
 8003432:	d13d      	bne.n	80034b0 <HAL_RCC_OscConfig+0x204>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003434:	f7fd ff4e 	bl	80012d4 <HAL_GetTick>
 8003438:	1b40      	subs	r0, r0, r5
 800343a:	2802      	cmp	r0, #2
 800343c:	d9f5      	bls.n	800342a <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 800343e:	2003      	movs	r0, #3
 8003440:	e13b      	b.n	80036ba <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003442:	4846      	ldr	r0, [pc, #280]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 8003444:	6803      	ldr	r3, [r0, #0]
 8003446:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800344a:	6921      	ldr	r1, [r4, #16]
 800344c:	22f8      	movs	r2, #248	; 0xf8
 800344e:	fa92 f2a2 	rbit	r2, r2
 8003452:	fab2 f282 	clz	r2, r2
 8003456:	fa01 f202 	lsl.w	r2, r1, r2
 800345a:	4313      	orrs	r3, r2
 800345c:	6003      	str	r3, [r0, #0]
 800345e:	e7d5      	b.n	800340c <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_DISABLE();
 8003460:	4a3e      	ldr	r2, [pc, #248]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 8003462:	6813      	ldr	r3, [r2, #0]
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800346a:	f7fd ff33 	bl	80012d4 <HAL_GetTick>
 800346e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003470:	4b3a      	ldr	r3, [pc, #232]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f013 0f02 	tst.w	r3, #2
 8003478:	d0c8      	beq.n	800340c <HAL_RCC_OscConfig+0x160>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800347a:	f7fd ff2b 	bl	80012d4 <HAL_GetTick>
 800347e:	1b40      	subs	r0, r0, r5
 8003480:	2802      	cmp	r0, #2
 8003482:	d9f5      	bls.n	8003470 <HAL_RCC_OscConfig+0x1c4>
            return HAL_TIMEOUT;
 8003484:	2003      	movs	r0, #3
 8003486:	e118      	b.n	80036ba <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003488:	4a34      	ldr	r2, [pc, #208]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 800348a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003492:	f7fd ff1f 	bl	80012d4 <HAL_GetTick>
 8003496:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003498:	4b30      	ldr	r3, [pc, #192]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 800349a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349c:	f013 0f02 	tst.w	r3, #2
 80034a0:	d006      	beq.n	80034b0 <HAL_RCC_OscConfig+0x204>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034a2:	f7fd ff17 	bl	80012d4 <HAL_GetTick>
 80034a6:	1b40      	subs	r0, r0, r5
 80034a8:	2802      	cmp	r0, #2
 80034aa:	d9f5      	bls.n	8003498 <HAL_RCC_OscConfig+0x1ec>
        {
          return HAL_TIMEOUT;
 80034ac:	2003      	movs	r0, #3
 80034ae:	e104      	b.n	80036ba <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	f013 0f04 	tst.w	r3, #4
 80034b6:	d07d      	beq.n	80035b4 <HAL_RCC_OscConfig+0x308>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b8:	4b28      	ldr	r3, [pc, #160]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80034c0:	d10b      	bne.n	80034da <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c2:	4b26      	ldr	r3, [pc, #152]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 80034c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80034d6:	2501      	movs	r5, #1
 80034d8:	e000      	b.n	80034dc <HAL_RCC_OscConfig+0x230>
  FlagStatus pwrclkchanged = RESET;
 80034da:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034dc:	4b20      	ldr	r3, [pc, #128]	; (8003560 <HAL_RCC_OscConfig+0x2b4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80034e4:	d00e      	beq.n	8003504 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e6:	68a3      	ldr	r3, [r4, #8]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d01f      	beq.n	800352c <HAL_RCC_OscConfig+0x280>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d139      	bne.n	8003564 <HAL_RCC_OscConfig+0x2b8>
 80034f0:	4b1a      	ldr	r3, [pc, #104]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 80034f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034f4:	f022 0201 	bic.w	r2, r2, #1
 80034f8:	671a      	str	r2, [r3, #112]	; 0x70
 80034fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034fc:	f022 0204 	bic.w	r2, r2, #4
 8003500:	671a      	str	r2, [r3, #112]	; 0x70
 8003502:	e018      	b.n	8003536 <HAL_RCC_OscConfig+0x28a>
      PWR->CR1 |= PWR_CR1_DBP;
 8003504:	4a16      	ldr	r2, [pc, #88]	; (8003560 <HAL_RCC_OscConfig+0x2b4>)
 8003506:	6813      	ldr	r3, [r2, #0]
 8003508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800350e:	f7fd fee1 	bl	80012d4 <HAL_GetTick>
 8003512:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003514:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_RCC_OscConfig+0x2b4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f413 7f80 	tst.w	r3, #256	; 0x100
 800351c:	d1e3      	bne.n	80034e6 <HAL_RCC_OscConfig+0x23a>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800351e:	f7fd fed9 	bl	80012d4 <HAL_GetTick>
 8003522:	1b80      	subs	r0, r0, r6
 8003524:	2864      	cmp	r0, #100	; 0x64
 8003526:	d9f5      	bls.n	8003514 <HAL_RCC_OscConfig+0x268>
          return HAL_TIMEOUT;
 8003528:	2003      	movs	r0, #3
 800352a:	e0c6      	b.n	80036ba <HAL_RCC_OscConfig+0x40e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800352c:	4a0b      	ldr	r2, [pc, #44]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 800352e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003536:	68a3      	ldr	r3, [r4, #8]
 8003538:	b353      	cbz	r3, 8003590 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353a:	f7fd fecb 	bl	80012d4 <HAL_GetTick>
 800353e:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_RCC_OscConfig+0x2b0>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	f013 0f02 	tst.w	r3, #2
 8003548:	d133      	bne.n	80035b2 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fd fec3 	bl	80012d4 <HAL_GetTick>
 800354e:	1b80      	subs	r0, r0, r6
 8003550:	f241 3388 	movw	r3, #5000	; 0x1388
 8003554:	4298      	cmp	r0, r3
 8003556:	d9f3      	bls.n	8003540 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8003558:	2003      	movs	r0, #3
 800355a:	e0ae      	b.n	80036ba <HAL_RCC_OscConfig+0x40e>
 800355c:	40023800 	.word	0x40023800
 8003560:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003564:	2b05      	cmp	r3, #5
 8003566:	d009      	beq.n	800357c <HAL_RCC_OscConfig+0x2d0>
 8003568:	4b56      	ldr	r3, [pc, #344]	; (80036c4 <HAL_RCC_OscConfig+0x418>)
 800356a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	671a      	str	r2, [r3, #112]	; 0x70
 8003572:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003574:	f022 0204 	bic.w	r2, r2, #4
 8003578:	671a      	str	r2, [r3, #112]	; 0x70
 800357a:	e7dc      	b.n	8003536 <HAL_RCC_OscConfig+0x28a>
 800357c:	4b51      	ldr	r3, [pc, #324]	; (80036c4 <HAL_RCC_OscConfig+0x418>)
 800357e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003580:	f042 0204 	orr.w	r2, r2, #4
 8003584:	671a      	str	r2, [r3, #112]	; 0x70
 8003586:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003588:	f042 0201 	orr.w	r2, r2, #1
 800358c:	671a      	str	r2, [r3, #112]	; 0x70
 800358e:	e7d2      	b.n	8003536 <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003590:	f7fd fea0 	bl	80012d4 <HAL_GetTick>
 8003594:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003596:	4b4b      	ldr	r3, [pc, #300]	; (80036c4 <HAL_RCC_OscConfig+0x418>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	f013 0f02 	tst.w	r3, #2
 800359e:	d008      	beq.n	80035b2 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a0:	f7fd fe98 	bl	80012d4 <HAL_GetTick>
 80035a4:	1b80      	subs	r0, r0, r6
 80035a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80035aa:	4298      	cmp	r0, r3
 80035ac:	d9f3      	bls.n	8003596 <HAL_RCC_OscConfig+0x2ea>
        {
          return HAL_TIMEOUT;
 80035ae:	2003      	movs	r0, #3
 80035b0:	e083      	b.n	80036ba <HAL_RCC_OscConfig+0x40e>
        }       
      }
    }
    
    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035b2:	b9f5      	cbnz	r5, 80035f2 <HAL_RCC_OscConfig+0x346>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035b4:	69a3      	ldr	r3, [r4, #24]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d07e      	beq.n	80036b8 <HAL_RCC_OscConfig+0x40c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ba:	4a42      	ldr	r2, [pc, #264]	; (80036c4 <HAL_RCC_OscConfig+0x418>)
 80035bc:	6892      	ldr	r2, [r2, #8]
 80035be:	f002 020c 	and.w	r2, r2, #12
 80035c2:	2a08      	cmp	r2, #8
 80035c4:	d07b      	beq.n	80036be <HAL_RCC_OscConfig+0x412>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d019      	beq.n	80035fe <HAL_RCC_OscConfig+0x352>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ca:	4a3e      	ldr	r2, [pc, #248]	; (80036c4 <HAL_RCC_OscConfig+0x418>)
 80035cc:	6813      	ldr	r3, [r2, #0]
 80035ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fd fe7e 	bl	80012d4 <HAL_GetTick>
 80035d8:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035da:	4b3a      	ldr	r3, [pc, #232]	; (80036c4 <HAL_RCC_OscConfig+0x418>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80035e2:	d063      	beq.n	80036ac <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e4:	f7fd fe76 	bl	80012d4 <HAL_GetTick>
 80035e8:	1b00      	subs	r0, r0, r4
 80035ea:	2802      	cmp	r0, #2
 80035ec:	d9f5      	bls.n	80035da <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 80035ee:	2003      	movs	r0, #3
 80035f0:	e063      	b.n	80036ba <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f2:	4a34      	ldr	r2, [pc, #208]	; (80036c4 <HAL_RCC_OscConfig+0x418>)
 80035f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80035f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fa:	6413      	str	r3, [r2, #64]	; 0x40
 80035fc:	e7da      	b.n	80035b4 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80035fe:	4a31      	ldr	r2, [pc, #196]	; (80036c4 <HAL_RCC_OscConfig+0x418>)
 8003600:	6813      	ldr	r3, [r2, #0]
 8003602:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003606:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003608:	f7fd fe64 	bl	80012d4 <HAL_GetTick>
 800360c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360e:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <HAL_RCC_OscConfig+0x418>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003616:	d006      	beq.n	8003626 <HAL_RCC_OscConfig+0x37a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003618:	f7fd fe5c 	bl	80012d4 <HAL_GetTick>
 800361c:	1b40      	subs	r0, r0, r5
 800361e:	2802      	cmp	r0, #2
 8003620:	d9f5      	bls.n	800360e <HAL_RCC_OscConfig+0x362>
            return HAL_TIMEOUT;
 8003622:	2003      	movs	r0, #3
 8003624:	e049      	b.n	80036ba <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003626:	69e3      	ldr	r3, [r4, #28]
 8003628:	6a22      	ldr	r2, [r4, #32]
 800362a:	4313      	orrs	r3, r2
 800362c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800362e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003632:	fa92 f2a2 	rbit	r2, r2
 8003636:	fab2 f282 	clz	r2, r2
 800363a:	fa01 f202 	lsl.w	r2, r1, r2
 800363e:	4313      	orrs	r3, r2
 8003640:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003642:	0852      	lsrs	r2, r2, #1
 8003644:	3a01      	subs	r2, #1
 8003646:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800364a:	fa91 f1a1 	rbit	r1, r1
 800364e:	fab1 f181 	clz	r1, r1
 8003652:	408a      	lsls	r2, r1
 8003654:	4313      	orrs	r3, r2
 8003656:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003658:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800365c:	fa92 f2a2 	rbit	r2, r2
 8003660:	fab2 f282 	clz	r2, r2
 8003664:	fa01 f202 	lsl.w	r2, r1, r2
 8003668:	4313      	orrs	r3, r2
 800366a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800366c:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003670:	fa92 f2a2 	rbit	r2, r2
 8003674:	fab2 f282 	clz	r2, r2
 8003678:	fa01 f202 	lsl.w	r2, r1, r2
 800367c:	4313      	orrs	r3, r2
 800367e:	4a11      	ldr	r2, [pc, #68]	; (80036c4 <HAL_RCC_OscConfig+0x418>)
 8003680:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003682:	6813      	ldr	r3, [r2, #0]
 8003684:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003688:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800368a:	f7fd fe23 	bl	80012d4 <HAL_GetTick>
 800368e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <HAL_RCC_OscConfig+0x418>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003698:	d106      	bne.n	80036a8 <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800369a:	f7fd fe1b 	bl	80012d4 <HAL_GetTick>
 800369e:	1b00      	subs	r0, r0, r4
 80036a0:	2802      	cmp	r0, #2
 80036a2:	d9f5      	bls.n	8003690 <HAL_RCC_OscConfig+0x3e4>
            return HAL_TIMEOUT;
 80036a4:	2003      	movs	r0, #3
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x40e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80036a8:	2000      	movs	r0, #0
 80036aa:	e006      	b.n	80036ba <HAL_RCC_OscConfig+0x40e>
 80036ac:	2000      	movs	r0, #0
 80036ae:	e004      	b.n	80036ba <HAL_RCC_OscConfig+0x40e>
        return HAL_ERROR;
 80036b0:	2001      	movs	r0, #1
 80036b2:	e002      	b.n	80036ba <HAL_RCC_OscConfig+0x40e>
        return HAL_ERROR;
 80036b4:	2001      	movs	r0, #1
 80036b6:	e000      	b.n	80036ba <HAL_RCC_OscConfig+0x40e>
  return HAL_OK;
 80036b8:	2000      	movs	r0, #0
}
 80036ba:	b002      	add	sp, #8
 80036bc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80036be:	2001      	movs	r0, #1
 80036c0:	e7fb      	b.n	80036ba <HAL_RCC_OscConfig+0x40e>
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800

080036c8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c8:	4b21      	ldr	r3, [pc, #132]	; (8003750 <HAL_RCC_GetSysClockFreq+0x88>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d038      	beq.n	8003746 <HAL_RCC_GetSysClockFreq+0x7e>
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d138      	bne.n	800374a <HAL_RCC_GetSysClockFreq+0x82>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036d8:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_RCC_GetSysClockFreq+0x88>)
 80036da:	6858      	ldr	r0, [r3, #4]
 80036dc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80036e6:	d01e      	beq.n	8003726 <HAL_RCC_GetSysClockFreq+0x5e>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80036e8:	4a1a      	ldr	r2, [pc, #104]	; (8003754 <HAL_RCC_GetSysClockFreq+0x8c>)
 80036ea:	fbb2 f2f0 	udiv	r2, r2, r0
 80036ee:	4b18      	ldr	r3, [pc, #96]	; (8003750 <HAL_RCC_GetSysClockFreq+0x88>)
 80036f0:	6858      	ldr	r0, [r3, #4]
 80036f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036f6:	4018      	ands	r0, r3
 80036f8:	fa93 f3a3 	rbit	r3, r3
 80036fc:	fab3 f383 	clz	r3, r3
 8003700:	40d8      	lsrs	r0, r3
 8003702:	fb00 f002 	mul.w	r0, r0, r2
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8003706:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_RCC_GetSysClockFreq+0x88>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800370e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003712:	fa92 f2a2 	rbit	r2, r2
 8003716:	fab2 f282 	clz	r2, r2
 800371a:	40d3      	lsrs	r3, r2
 800371c:	3301      	adds	r3, #1
 800371e:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 8003720:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003724:	4770      	bx	lr
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8003726:	4a0c      	ldr	r2, [pc, #48]	; (8003758 <HAL_RCC_GetSysClockFreq+0x90>)
 8003728:	fbb2 f2f0 	udiv	r2, r2, r0
 800372c:	4b08      	ldr	r3, [pc, #32]	; (8003750 <HAL_RCC_GetSysClockFreq+0x88>)
 800372e:	6858      	ldr	r0, [r3, #4]
 8003730:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003734:	4018      	ands	r0, r3
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	40d8      	lsrs	r0, r3
 8003740:	fb00 f002 	mul.w	r0, r0, r2
 8003744:	e7df      	b.n	8003706 <HAL_RCC_GetSysClockFreq+0x3e>
      sysclockfreq = HSE_VALUE;
 8003746:	4803      	ldr	r0, [pc, #12]	; (8003754 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003748:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800374a:	4803      	ldr	r0, [pc, #12]	; (8003758 <HAL_RCC_GetSysClockFreq+0x90>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	017d7840 	.word	0x017d7840
 8003758:	00f42400 	.word	0x00f42400

0800375c <HAL_RCC_ClockConfig>:
{
 800375c:	b570      	push	{r4, r5, r6, lr}
 800375e:	4604      	mov	r4, r0
 8003760:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003762:	4b5c      	ldr	r3, [pc, #368]	; (80038d4 <HAL_RCC_ClockConfig+0x178>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	428b      	cmp	r3, r1
 800376c:	d20b      	bcs.n	8003786 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376e:	4a59      	ldr	r2, [pc, #356]	; (80038d4 <HAL_RCC_ClockConfig+0x178>)
 8003770:	6813      	ldr	r3, [r2, #0]
 8003772:	f023 030f 	bic.w	r3, r3, #15
 8003776:	430b      	orrs	r3, r1
 8003778:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800377a:	6813      	ldr	r3, [r2, #0]
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	428b      	cmp	r3, r1
 8003782:	f040 80a0 	bne.w	80038c6 <HAL_RCC_ClockConfig+0x16a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	f013 0f02 	tst.w	r3, #2
 800378c:	d006      	beq.n	800379c <HAL_RCC_ClockConfig+0x40>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800378e:	4a52      	ldr	r2, [pc, #328]	; (80038d8 <HAL_RCC_ClockConfig+0x17c>)
 8003790:	6893      	ldr	r3, [r2, #8]
 8003792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003796:	68a1      	ldr	r1, [r4, #8]
 8003798:	430b      	orrs	r3, r1
 800379a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	f013 0f01 	tst.w	r3, #1
 80037a2:	d052      	beq.n	800384a <HAL_RCC_ClockConfig+0xee>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a4:	6863      	ldr	r3, [r4, #4]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d023      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x96>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d028      	beq.n	8003800 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ae:	4a4a      	ldr	r2, [pc, #296]	; (80038d8 <HAL_RCC_ClockConfig+0x17c>)
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	f012 0f02 	tst.w	r2, #2
 80037b6:	f000 8088 	beq.w	80038ca <HAL_RCC_ClockConfig+0x16e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ba:	4947      	ldr	r1, [pc, #284]	; (80038d8 <HAL_RCC_ClockConfig+0x17c>)
 80037bc:	688a      	ldr	r2, [r1, #8]
 80037be:	f022 0203 	bic.w	r2, r2, #3
 80037c2:	4313      	orrs	r3, r2
 80037c4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80037c6:	f7fd fd85 	bl	80012d4 <HAL_GetTick>
 80037ca:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037cc:	6863      	ldr	r3, [r4, #4]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d01d      	beq.n	800380e <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d02a      	beq.n	800382c <HAL_RCC_ClockConfig+0xd0>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80037d6:	4b40      	ldr	r3, [pc, #256]	; (80038d8 <HAL_RCC_ClockConfig+0x17c>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f013 0f0c 	tst.w	r3, #12
 80037de:	d034      	beq.n	800384a <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e0:	f7fd fd78 	bl	80012d4 <HAL_GetTick>
 80037e4:	1b83      	subs	r3, r0, r6
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d9f3      	bls.n	80037d6 <HAL_RCC_ClockConfig+0x7a>
          return HAL_TIMEOUT;
 80037ee:	2003      	movs	r0, #3
 80037f0:	e068      	b.n	80038c4 <HAL_RCC_ClockConfig+0x168>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	4a39      	ldr	r2, [pc, #228]	; (80038d8 <HAL_RCC_ClockConfig+0x17c>)
 80037f4:	6812      	ldr	r2, [r2, #0]
 80037f6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80037fa:	d1de      	bne.n	80037ba <HAL_RCC_ClockConfig+0x5e>
        return HAL_ERROR;
 80037fc:	2001      	movs	r0, #1
 80037fe:	e061      	b.n	80038c4 <HAL_RCC_ClockConfig+0x168>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003800:	4a35      	ldr	r2, [pc, #212]	; (80038d8 <HAL_RCC_ClockConfig+0x17c>)
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003808:	d1d7      	bne.n	80037ba <HAL_RCC_ClockConfig+0x5e>
        return HAL_ERROR;
 800380a:	2001      	movs	r0, #1
 800380c:	e05a      	b.n	80038c4 <HAL_RCC_ClockConfig+0x168>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800380e:	4b32      	ldr	r3, [pc, #200]	; (80038d8 <HAL_RCC_ClockConfig+0x17c>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b04      	cmp	r3, #4
 8003818:	d017      	beq.n	800384a <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381a:	f7fd fd5b 	bl	80012d4 <HAL_GetTick>
 800381e:	1b83      	subs	r3, r0, r6
 8003820:	f241 3288 	movw	r2, #5000	; 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	d9f2      	bls.n	800380e <HAL_RCC_ClockConfig+0xb2>
          return HAL_TIMEOUT;
 8003828:	2003      	movs	r0, #3
 800382a:	e04b      	b.n	80038c4 <HAL_RCC_ClockConfig+0x168>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800382c:	4b2a      	ldr	r3, [pc, #168]	; (80038d8 <HAL_RCC_ClockConfig+0x17c>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 030c 	and.w	r3, r3, #12
 8003834:	2b08      	cmp	r3, #8
 8003836:	d008      	beq.n	800384a <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003838:	f7fd fd4c 	bl	80012d4 <HAL_GetTick>
 800383c:	1b80      	subs	r0, r0, r6
 800383e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003842:	4298      	cmp	r0, r3
 8003844:	d9f2      	bls.n	800382c <HAL_RCC_ClockConfig+0xd0>
          return HAL_TIMEOUT;
 8003846:	2003      	movs	r0, #3
 8003848:	e03c      	b.n	80038c4 <HAL_RCC_ClockConfig+0x168>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800384a:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <HAL_RCC_ClockConfig+0x178>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	42ab      	cmp	r3, r5
 8003854:	d90a      	bls.n	800386c <HAL_RCC_ClockConfig+0x110>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4a1f      	ldr	r2, [pc, #124]	; (80038d4 <HAL_RCC_ClockConfig+0x178>)
 8003858:	6813      	ldr	r3, [r2, #0]
 800385a:	f023 030f 	bic.w	r3, r3, #15
 800385e:	432b      	orrs	r3, r5
 8003860:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003862:	6813      	ldr	r3, [r2, #0]
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	42ab      	cmp	r3, r5
 800386a:	d130      	bne.n	80038ce <HAL_RCC_ClockConfig+0x172>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386c:	6823      	ldr	r3, [r4, #0]
 800386e:	f013 0f04 	tst.w	r3, #4
 8003872:	d006      	beq.n	8003882 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003874:	4a18      	ldr	r2, [pc, #96]	; (80038d8 <HAL_RCC_ClockConfig+0x17c>)
 8003876:	6893      	ldr	r3, [r2, #8]
 8003878:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800387c:	68e1      	ldr	r1, [r4, #12]
 800387e:	430b      	orrs	r3, r1
 8003880:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	f013 0f08 	tst.w	r3, #8
 8003888:	d007      	beq.n	800389a <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800388a:	4a13      	ldr	r2, [pc, #76]	; (80038d8 <HAL_RCC_ClockConfig+0x17c>)
 800388c:	6893      	ldr	r3, [r2, #8]
 800388e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003892:	6921      	ldr	r1, [r4, #16]
 8003894:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003898:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800389a:	f7ff ff15 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 800389e:	4b0e      	ldr	r3, [pc, #56]	; (80038d8 <HAL_RCC_ClockConfig+0x17c>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a6:	22f0      	movs	r2, #240	; 0xf0
 80038a8:	fa92 f2a2 	rbit	r2, r2
 80038ac:	fab2 f282 	clz	r2, r2
 80038b0:	40d3      	lsrs	r3, r2
 80038b2:	4a0a      	ldr	r2, [pc, #40]	; (80038dc <HAL_RCC_ClockConfig+0x180>)
 80038b4:	5cd3      	ldrb	r3, [r2, r3]
 80038b6:	40d8      	lsrs	r0, r3
 80038b8:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x184>)
 80038ba:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80038bc:	2000      	movs	r0, #0
 80038be:	f7fd fcdf 	bl	8001280 <HAL_InitTick>
  return HAL_OK;
 80038c2:	2000      	movs	r0, #0
}
 80038c4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80038c6:	2001      	movs	r0, #1
 80038c8:	e7fc      	b.n	80038c4 <HAL_RCC_ClockConfig+0x168>
        return HAL_ERROR;
 80038ca:	2001      	movs	r0, #1
 80038cc:	e7fa      	b.n	80038c4 <HAL_RCC_ClockConfig+0x168>
      return HAL_ERROR;
 80038ce:	2001      	movs	r0, #1
 80038d0:	e7f8      	b.n	80038c4 <HAL_RCC_ClockConfig+0x168>
 80038d2:	bf00      	nop
 80038d4:	40023c00 	.word	0x40023c00
 80038d8:	40023800 	.word	0x40023800
 80038dc:	08008cdc 	.word	0x08008cdc
 80038e0:	20000030 	.word	0x20000030

080038e4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80038e4:	4b01      	ldr	r3, [pc, #4]	; (80038ec <HAL_RCC_GetHCLKFreq+0x8>)
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000030 	.word	0x20000030

080038f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 80038f0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80038f2:	f7ff fff7 	bl	80038e4 <HAL_RCC_GetHCLKFreq>
 80038f6:	4b07      	ldr	r3, [pc, #28]	; (8003914 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80038fe:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8003902:	fa92 f2a2 	rbit	r2, r2
 8003906:	fab2 f282 	clz	r2, r2
 800390a:	40d3      	lsrs	r3, r2
 800390c:	4a02      	ldr	r2, [pc, #8]	; (8003918 <HAL_RCC_GetPCLK1Freq+0x28>)
 800390e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003910:	40d8      	lsrs	r0, r3
 8003912:	bd08      	pop	{r3, pc}
 8003914:	40023800 	.word	0x40023800
 8003918:	08008cec 	.word	0x08008cec

0800391c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800391c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800391e:	f7ff ffe1 	bl	80038e4 <HAL_RCC_GetHCLKFreq>
 8003922:	4b07      	ldr	r3, [pc, #28]	; (8003940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800392a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800392e:	fa92 f2a2 	rbit	r2, r2
 8003932:	fab2 f282 	clz	r2, r2
 8003936:	40d3      	lsrs	r3, r2
 8003938:	4a02      	ldr	r2, [pc, #8]	; (8003944 <HAL_RCC_GetPCLK2Freq+0x28>)
 800393a:	5cd3      	ldrb	r3, [r2, r3]
} 
 800393c:	40d8      	lsrs	r0, r3
 800393e:	bd08      	pop	{r3, pc}
 8003940:	40023800 	.word	0x40023800
 8003944:	08008cec 	.word	0x08008cec

08003948 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800394a:	b083      	sub	sp, #12
 800394c:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800394e:	6806      	ldr	r6, [r0, #0]
 8003950:	f016 0601 	ands.w	r6, r6, #1
 8003954:	d00d      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003956:	4bb5      	ldr	r3, [pc, #724]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800395e:	609a      	str	r2, [r3, #8]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003964:	430a      	orrs	r2, r1
 8003966:	609a      	str	r2, [r3, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003968:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 8155 	beq.w	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  uint32_t plli2sused = 0;
 8003970:	2600      	movs	r6, #0
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003972:	6825      	ldr	r5, [r4, #0]
 8003974:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8003978:	d011      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800397a:	4aac      	ldr	r2, [pc, #688]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800397c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003980:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003984:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003986:	430b      	orrs	r3, r1
 8003988:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800398c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800398e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003992:	f000 8144 	beq.w	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 8143 	beq.w	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  uint32_t pllsaiused = 0;
 800399c:	2500      	movs	r5, #0
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80039a4:	d00f      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039a6:	4aa1      	ldr	r2, [pc, #644]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039a8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80039ac:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80039b0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80039b2:	430b      	orrs	r3, r1
 80039b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039be:	f000 8132 	beq.w	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039c2:	b903      	cbnz	r3, 80039c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1; 
 80039c4:	2501      	movs	r5, #1
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039c6:	6823      	ldr	r3, [r4, #0]
 80039c8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80039cc:	d000      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {    
      plli2sused = 1; 
 80039ce:	2601      	movs	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039d0:	f013 0f20 	tst.w	r3, #32
 80039d4:	f040 812c 	bne.w	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	f013 0f10 	tst.w	r3, #16
 80039de:	d00c      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039e0:	4b92      	ldr	r3, [pc, #584]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039e2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80039e6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80039ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80039ee:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80039f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80039f4:	430a      	orrs	r2, r1
 80039f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003a00:	d008      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a02:	4a8a      	ldr	r2, [pc, #552]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a04:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003a08:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003a0c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003a1a:	d008      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a1c:	4a83      	ldr	r2, [pc, #524]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a1e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003a22:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003a26:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003a34:	d008      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a36:	4a7d      	ldr	r2, [pc, #500]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a38:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003a3c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003a40:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003a42:	430b      	orrs	r3, r1
 8003a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003a4e:	d008      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a50:	4a76      	ldr	r2, [pc, #472]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a52:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003a56:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003a5a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a68:	d008      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a6a:	4a70      	ldr	r2, [pc, #448]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a6c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003a70:	f023 0303 	bic.w	r3, r3, #3
 8003a74:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003a76:	430b      	orrs	r3, r1
 8003a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003a82:	d008      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a84:	4a69      	ldr	r2, [pc, #420]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a86:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003a8a:	f023 030c 	bic.w	r3, r3, #12
 8003a8e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003a90:	430b      	orrs	r3, r1
 8003a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003a9c:	d008      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a9e:	4a63      	ldr	r2, [pc, #396]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003aa0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003aa4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003aa8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003aaa:	430b      	orrs	r3, r1
 8003aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003ab6:	d008      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ab8:	4a5c      	ldr	r2, [pc, #368]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003aba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003abe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ac2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003ad0:	d008      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ad2:	4a56      	ldr	r2, [pc, #344]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ad4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003adc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003aea:	d008      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003aec:	4a4f      	ldr	r2, [pc, #316]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003aee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003af2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003af6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003af8:	430b      	orrs	r3, r1
 8003afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003b04:	d008      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b06:	4a49      	ldr	r2, [pc, #292]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b08:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b10:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003b12:	430b      	orrs	r3, r1
 8003b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b20:	4a42      	ldr	r2, [pc, #264]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b22:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b26:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003b2a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003b38:	d008      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b3a:	4a3c      	ldr	r2, [pc, #240]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b3c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b44:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003b46:	430b      	orrs	r3, r1
 8003b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b4c:	6823      	ldr	r3, [r4, #0]
 8003b4e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003b52:	d00d      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b54:	4a35      	ldr	r2, [pc, #212]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b56:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b5a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003b5e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003b60:	430b      	orrs	r3, r1
 8003b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003b66:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b6c:	f000 80c6 	beq.w	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	f013 0f08 	tst.w	r3, #8
 8003b76:	d000      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1; 
 8003b78:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b7a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003b7e:	d008      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b80:	4a2a      	ldr	r2, [pc, #168]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b82:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b86:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003b8a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003b98:	d009      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b9a:	4a24      	ldr	r2, [pc, #144]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b9c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8003bb4:	d009      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003bb6:	4a1d      	ldr	r2, [pc, #116]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003bb8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003bbc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003bc0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003bd0:	d009      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bd2:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003bd4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003bd8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003bdc:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8003be0:	430b      	orrs	r3, r1
 8003be2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003bec:	d009      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003bee:	4a0f      	ldr	r2, [pc, #60]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003bf0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003bf4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bf8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003c02:	2e00      	cmp	r6, #0
 8003c04:	d17c      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c0c:	d078      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c0e:	2d01      	cmp	r5, #1
 8003c10:	f000 819e 	beq.w	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x608>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003c14:	2000      	movs	r0, #0
}
 8003c16:	b003      	add	sp, #12
 8003c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1; 
 8003c1a:	2601      	movs	r6, #1
 8003c1c:	e6a9      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1; 
 8003c1e:	2601      	movs	r6, #1
 8003c20:	e6b9      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1; 
 8003c22:	2501      	movs	r5, #1
 8003c24:	e6bb      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1; 
 8003c26:	2601      	movs	r6, #1
 8003c28:	e6cb      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c2a:	bf00      	nop
 8003c2c:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c30:	4bc4      	ldr	r3, [pc, #784]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003c32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003c44:	4ac0      	ldr	r2, [pc, #768]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8003c46:	6813      	ldr	r3, [r2, #0]
 8003c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003c4e:	f7fd fb41 	bl	80012d4 <HAL_GetTick>
 8003c52:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c54:	4bbc      	ldr	r3, [pc, #752]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003c5c:	d106      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x324>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5e:	f7fd fb39 	bl	80012d4 <HAL_GetTick>
 8003c62:	1bc0      	subs	r0, r0, r7
 8003c64:	2864      	cmp	r0, #100	; 0x64
 8003c66:	d9f5      	bls.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
 8003c68:	2003      	movs	r0, #3
 8003c6a:	e7d4      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c6c:	4bb5      	ldr	r3, [pc, #724]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c70:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003c74:	d015      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003c76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003c78:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d010      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c80:	4bb0      	ldr	r3, [pc, #704]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003c82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c88:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003c8a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003c8e:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c90:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003c92:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003c96:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003c98:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9c:	f013 0f01 	tst.w	r3, #1
 8003ca0:	d112      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ca2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ca4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003ca8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003cac:	d01d      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8003cae:	4aa5      	ldr	r2, [pc, #660]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003cb0:	6893      	ldr	r3, [r2, #8]
 8003cb2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003cb6:	6093      	str	r3, [r2, #8]
 8003cb8:	49a2      	ldr	r1, [pc, #648]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003cba:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003cbc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003cbe:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	670b      	str	r3, [r1, #112]	; 0x70
 8003cc6:	e687      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8003cc8:	f7fd fb04 	bl	80012d4 <HAL_GetTick>
 8003ccc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cce:	4b9d      	ldr	r3, [pc, #628]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd2:	f013 0f02 	tst.w	r3, #2
 8003cd6:	d1e4      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd8:	f7fd fafc 	bl	80012d4 <HAL_GetTick>
 8003cdc:	1bc0      	subs	r0, r0, r7
 8003cde:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ce2:	4298      	cmp	r0, r3
 8003ce4:	d9f3      	bls.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x386>
            return HAL_TIMEOUT;
 8003ce6:	2003      	movs	r0, #3
 8003ce8:	e795      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cea:	4896      	ldr	r0, [pc, #600]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003cec:	6882      	ldr	r2, [r0, #8]
 8003cee:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003cf2:	4996      	ldr	r1, [pc, #600]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8003cf4:	4019      	ands	r1, r3
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	6082      	str	r2, [r0, #8]
 8003cfa:	e7dd      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      pllsaiused = 1; 
 8003cfc:	2501      	movs	r5, #1
 8003cfe:	e737      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_PLLI2S_DISABLE();  
 8003d00:	4a90      	ldr	r2, [pc, #576]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003d02:	6813      	ldr	r3, [r2, #0]
 8003d04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d08:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003d0a:	f7fd fae3 	bl	80012d4 <HAL_GetTick>
 8003d0e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d10:	4b8c      	ldr	r3, [pc, #560]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003d18:	d006      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d1a:	f7fd fadb 	bl	80012d4 <HAL_GetTick>
 8003d1e:	1b80      	subs	r0, r0, r6
 8003d20:	2864      	cmp	r0, #100	; 0x64
 8003d22:	d9f5      	bls.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
 8003d24:	2003      	movs	r0, #3
 8003d26:	e776      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	f013 0f01 	tst.w	r3, #1
 8003d2e:	d03a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8003d30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d32:	bbc3      	cbnz	r3, 8003da6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8003d34:	4e83      	ldr	r6, [pc, #524]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003d36:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8003d3a:	f403 3c40 	and.w	ip, r3, #196608	; 0x30000
 8003d3e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8003d42:	fa90 f3a0 	rbit	r3, r0
 8003d46:	fab3 f383 	clz	r3, r3
 8003d4a:	fa2c fc03 	lsr.w	ip, ip, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8003d4e:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8003d52:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8003d56:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8003d5a:	fa91 f3a1 	rbit	r3, r1
 8003d5e:	fab3 f383 	clz	r3, r3
 8003d62:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d64:	6863      	ldr	r3, [r4, #4]
 8003d66:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8003d6a:	fa97 f7a7 	rbit	r7, r7
 8003d6e:	fab7 f787 	clz	r7, r7
 8003d72:	40bb      	lsls	r3, r7
 8003d74:	fa90 f0a0 	rbit	r0, r0
 8003d78:	fab0 f080 	clz	r0, r0
 8003d7c:	fa0c f000 	lsl.w	r0, ip, r0
 8003d80:	4303      	orrs	r3, r0
 8003d82:	fa91 f1a1 	rbit	r1, r1
 8003d86:	fab1 f181 	clz	r1, r1
 8003d8a:	408a      	lsls	r2, r1
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	68a1      	ldr	r1, [r4, #8]
 8003d90:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003d94:	fa92 f2a2 	rbit	r2, r2
 8003d98:	fab2 f282 	clz	r2, r2
 8003d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003dac:	d003      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
 8003dae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003db0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003db4:	d006      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003db6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003dba:	d045      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x500>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8003dbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dc2:	d141      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x500>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8003dc4:	4e5f      	ldr	r6, [pc, #380]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003dc6:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
 8003dca:	f400 3c40 	and.w	ip, r0, #196608	; 0x30000
 8003dce:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8003dd2:	fa90 f3a0 	rbit	r3, r0
 8003dd6:	fab3 f383 	clz	r3, r3
 8003dda:	fa2c fc03 	lsr.w	ip, ip, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8003dde:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8003de2:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8003de6:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8003dea:	fa91 f3a1 	rbit	r3, r1
 8003dee:	fab3 f383 	clz	r3, r3
 8003df2:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003df4:	6863      	ldr	r3, [r4, #4]
 8003df6:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8003dfa:	fa97 f7a7 	rbit	r7, r7
 8003dfe:	fab7 f787 	clz	r7, r7
 8003e02:	40bb      	lsls	r3, r7
 8003e04:	fa90 f0a0 	rbit	r0, r0
 8003e08:	fab0 f080 	clz	r0, r0
 8003e0c:	fa0c f000 	lsl.w	r0, ip, r0
 8003e10:	4303      	orrs	r3, r0
 8003e12:	68e7      	ldr	r7, [r4, #12]
 8003e14:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8003e18:	fa90 f0a0 	rbit	r0, r0
 8003e1c:	fab0 f080 	clz	r0, r0
 8003e20:	fa07 f000 	lsl.w	r0, r7, r0
 8003e24:	4303      	orrs	r3, r0
 8003e26:	fa91 f1a1 	rbit	r1, r1
 8003e2a:	fab1 f181 	clz	r1, r1
 8003e2e:	408a      	lsls	r2, r1
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8003e36:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8003e3a:	f023 031f 	bic.w	r3, r3, #31
 8003e3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003e40:	3a01      	subs	r2, #1
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003e4e:	d037      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8003e50:	4e3c      	ldr	r6, [pc, #240]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003e52:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
 8003e56:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003e5a:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 8003e5e:	fa9c f3ac 	rbit	r3, ip
 8003e62:	fab3 f383 	clz	r3, r3
 8003e66:	40d9      	lsrs	r1, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8003e68:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8003e6c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8003e70:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 8003e74:	fa90 f3a0 	rbit	r3, r0
 8003e78:	fab3 f383 	clz	r3, r3
 8003e7c:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e7e:	6863      	ldr	r3, [r4, #4]
 8003e80:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8003e84:	fa97 f7a7 	rbit	r7, r7
 8003e88:	fab7 f787 	clz	r7, r7
 8003e8c:	40bb      	lsls	r3, r7
 8003e8e:	6927      	ldr	r7, [r4, #16]
 8003e90:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
 8003e94:	fa9e feae 	rbit	lr, lr
 8003e98:	fabe fe8e 	clz	lr, lr
 8003e9c:	fa07 f70e 	lsl.w	r7, r7, lr
 8003ea0:	433b      	orrs	r3, r7
 8003ea2:	fa9c fcac 	rbit	ip, ip
 8003ea6:	fabc fc8c 	clz	ip, ip
 8003eaa:	fa01 f10c 	lsl.w	r1, r1, ip
 8003eae:	430b      	orrs	r3, r1
 8003eb0:	fa90 f0a0 	rbit	r0, r0
 8003eb4:	fab0 f080 	clz	r0, r0
 8003eb8:	4082      	lsls	r2, r0
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003ec6:	d028      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ec8:	6863      	ldr	r3, [r4, #4]
 8003eca:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003ece:	fa92 f2a2 	rbit	r2, r2
 8003ed2:	fab2 f282 	clz	r2, r2
 8003ed6:	4093      	lsls	r3, r2
 8003ed8:	6921      	ldr	r1, [r4, #16]
 8003eda:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003ede:	fa92 f2a2 	rbit	r2, r2
 8003ee2:	fab2 f282 	clz	r2, r2
 8003ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eea:	4313      	orrs	r3, r2
 8003eec:	68e1      	ldr	r1, [r4, #12]
 8003eee:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8003ef2:	fa92 f2a2 	rbit	r2, r2
 8003ef6:	fab2 f282 	clz	r2, r2
 8003efa:	fa01 f202 	lsl.w	r2, r1, r2
 8003efe:	4313      	orrs	r3, r2
 8003f00:	68a1      	ldr	r1, [r4, #8]
 8003f02:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003f06:	fa92 f2a2 	rbit	r2, r2
 8003f0a:	fab2 f282 	clz	r2, r2
 8003f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f12:	4313      	orrs	r3, r2
 8003f14:	4a0b      	ldr	r2, [pc, #44]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003f16:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003f1a:	4a0a      	ldr	r2, [pc, #40]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003f1c:	6813      	ldr	r3, [r2, #0]
 8003f1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f22:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003f24:	f7fd f9d6 	bl	80012d4 <HAL_GetTick>
 8003f28:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f2a:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003f32:	f47f ae6c 	bne.w	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f36:	f7fd f9cd 	bl	80012d4 <HAL_GetTick>
 8003f3a:	1b80      	subs	r0, r0, r6
 8003f3c:	2864      	cmp	r0, #100	; 0x64
 8003f3e:	d9f4      	bls.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x5e2>
        return HAL_TIMEOUT;
 8003f40:	2003      	movs	r0, #3
 8003f42:	e668      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003f44:	40023800 	.word	0x40023800
 8003f48:	40007000 	.word	0x40007000
 8003f4c:	0ffffcff 	.word	0x0ffffcff
    __HAL_RCC_PLLSAI_DISABLE(); 
 8003f50:	4a7d      	ldr	r2, [pc, #500]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003f52:	6813      	ldr	r3, [r2, #0]
 8003f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f58:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003f5a:	f7fd f9bb 	bl	80012d4 <HAL_GetTick>
 8003f5e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f60:	4b79      	ldr	r3, [pc, #484]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003f68:	d006      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x630>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f6a:	f7fd f9b3 	bl	80012d4 <HAL_GetTick>
 8003f6e:	1b40      	subs	r0, r0, r5
 8003f70:	2864      	cmp	r0, #100	; 0x64
 8003f72:	d9f5      	bls.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x618>
        return HAL_TIMEOUT;
 8003f74:	2003      	movs	r0, #3
 8003f76:	e64e      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003f7e:	d001      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8003f80:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003f82:	b12a      	cbz	r2, 8003f90 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8003f84:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003f88:	d044      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d141      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8003f90:	4d6d      	ldr	r5, [pc, #436]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003f92:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
 8003f96:	f407 3740 	and.w	r7, r7, #196608	; 0x30000
 8003f9a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8003f9e:	fa90 f3a0 	rbit	r3, r0
 8003fa2:	fab3 f383 	clz	r3, r3
 8003fa6:	40df      	lsrs	r7, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8003fa8:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8003fac:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8003fb0:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8003fb4:	fa91 f3a1 	rbit	r3, r1
 8003fb8:	fab3 f383 	clz	r3, r3
 8003fbc:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fbe:	6963      	ldr	r3, [r4, #20]
 8003fc0:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 8003fc4:	fa96 f6a6 	rbit	r6, r6
 8003fc8:	fab6 f686 	clz	r6, r6
 8003fcc:	40b3      	lsls	r3, r6
 8003fce:	fa90 f0a0 	rbit	r0, r0
 8003fd2:	fab0 f080 	clz	r0, r0
 8003fd6:	fa07 f000 	lsl.w	r0, r7, r0
 8003fda:	4303      	orrs	r3, r0
 8003fdc:	69a6      	ldr	r6, [r4, #24]
 8003fde:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8003fe2:	fa90 f0a0 	rbit	r0, r0
 8003fe6:	fab0 f080 	clz	r0, r0
 8003fea:	fa06 f000 	lsl.w	r0, r6, r0
 8003fee:	4303      	orrs	r3, r0
 8003ff0:	fa91 f1a1 	rbit	r1, r1
 8003ff4:	fab1 f181 	clz	r1, r1
 8003ff8:	408a      	lsls	r2, r1
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004000:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8004004:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004008:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800400a:	3a01      	subs	r2, #1
 800400c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004010:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800401a:	d003      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800401c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800401e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004022:	d056      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	f013 0f08 	tst.w	r3, #8
 800402a:	d03e      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x762>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 800402c:	4d46      	ldr	r5, [pc, #280]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800402e:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8004032:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8004036:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 800403a:	fa90 f3a0 	rbit	r3, r0
 800403e:	fab3 f383 	clz	r3, r3
 8004042:	40da      	lsrs	r2, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8004044:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8004048:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 800404c:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 8004050:	fa96 f3a6 	rbit	r3, r6
 8004054:	fab3 f383 	clz	r3, r3
 8004058:	40d9      	lsrs	r1, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800405a:	6963      	ldr	r3, [r4, #20]
 800405c:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8004060:	fa97 f7a7 	rbit	r7, r7
 8004064:	fab7 f787 	clz	r7, r7
 8004068:	40bb      	lsls	r3, r7
 800406a:	fa96 f6a6 	rbit	r6, r6
 800406e:	fab6 f686 	clz	r6, r6
 8004072:	40b1      	lsls	r1, r6
 8004074:	430b      	orrs	r3, r1
 8004076:	fa90 f1a0 	rbit	r1, r0
 800407a:	fab1 f181 	clz	r1, r1
 800407e:	408a      	lsls	r2, r1
 8004080:	4313      	orrs	r3, r2
 8004082:	69e1      	ldr	r1, [r4, #28]
 8004084:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8004088:	fa92 f2a2 	rbit	r2, r2
 800408c:	fab2 f282 	clz	r2, r2
 8004090:	fa01 f202 	lsl.w	r2, r1, r2
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800409a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800409e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80040a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80040aa:	4a27      	ldr	r2, [pc, #156]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80040ac:	6813      	ldr	r3, [r2, #0]
 80040ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80040b4:	f7fd f90e 	bl	80012d4 <HAL_GetTick>
 80040b8:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040ba:	4b23      	ldr	r3, [pc, #140]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80040c2:	d13e      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040c4:	f7fd f906 	bl	80012d4 <HAL_GetTick>
 80040c8:	1b00      	subs	r0, r0, r4
 80040ca:	2864      	cmp	r0, #100	; 0x64
 80040cc:	d9f5      	bls.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x772>
        return HAL_TIMEOUT;
 80040ce:	2003      	movs	r0, #3
 80040d0:	e5a1      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80040d2:	4e1d      	ldr	r6, [pc, #116]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80040d4:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 80040d8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80040dc:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 80040e0:	fa95 f3a5 	rbit	r3, r5
 80040e4:	fab3 f383 	clz	r3, r3
 80040e8:	40d9      	lsrs	r1, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80040ea:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 80040ee:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80040f2:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 80040f6:	fa90 f3a0 	rbit	r3, r0
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004100:	6963      	ldr	r3, [r4, #20]
 8004102:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8004106:	fa97 f7a7 	rbit	r7, r7
 800410a:	fab7 f787 	clz	r7, r7
 800410e:	40bb      	lsls	r3, r7
 8004110:	6a27      	ldr	r7, [r4, #32]
 8004112:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8004116:	fa9c fcac 	rbit	ip, ip
 800411a:	fabc fc8c 	clz	ip, ip
 800411e:	fa07 f70c 	lsl.w	r7, r7, ip
 8004122:	433b      	orrs	r3, r7
 8004124:	fa95 f5a5 	rbit	r5, r5
 8004128:	fab5 f585 	clz	r5, r5
 800412c:	40a9      	lsls	r1, r5
 800412e:	430b      	orrs	r3, r1
 8004130:	fa90 f1a0 	rbit	r1, r0
 8004134:	fab1 f181 	clz	r1, r1
 8004138:	408a      	lsls	r2, r1
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
 8004140:	e770      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  return HAL_OK;
 8004142:	2000      	movs	r0, #0
 8004144:	e567      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004146:	bf00      	nop
 8004148:	40023800 	.word	0x40023800

0800414c <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit: pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800414c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tempreg = 0;
  
  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800414e:	4b80      	ldr	r3, [pc, #512]	; (8004350 <HAL_RCCEx_GetPeriphCLKConfig+0x204>)
 8004150:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 8004152:	4b80      	ldr	r3, [pc, #512]	; (8004354 <HAL_RCCEx_GetPeriphCLKConfig+0x208>)
 8004154:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004158:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800415c:	4011      	ands	r1, r2
 800415e:	fa92 f4a2 	rbit	r4, r2
 8004162:	fab4 f484 	clz	r4, r4
 8004166:	40e1      	lsrs	r1, r4
 8004168:	6041      	str	r1, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 800416a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800416e:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
 8004172:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8004176:	fa91 f5a1 	rbit	r5, r1
 800417a:	fab5 f585 	clz	r5, r5
 800417e:	40ec      	lsrs	r4, r5
 8004180:	6104      	str	r4, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8004182:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8004186:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
 800418a:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 800418e:	fa95 f6a5 	rbit	r6, r5
 8004192:	fab6 f686 	clz	r6, r6
 8004196:	40f4      	lsrs	r4, r6
 8004198:	60c4      	str	r4, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 800419a:	f8d3 6084 	ldr.w	r6, [r3, #132]	; 0x84
 800419e:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 80041a2:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
 80041a6:	fa94 f7a4 	rbit	r7, r4
 80041aa:	fab7 f787 	clz	r7, r7
 80041ae:	40fe      	lsrs	r6, r7
 80041b0:	6086      	str	r6, [r0, #8]
  
  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
 80041b2:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 80041b6:	4016      	ands	r6, r2
 80041b8:	fa92 f2a2 	rbit	r2, r2
 80041bc:	fab2 f282 	clz	r2, r2
 80041c0:	fa26 f202 	lsr.w	r2, r6, r2
 80041c4:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80041c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80041ca:	400a      	ands	r2, r1
 80041cc:	fa91 f6a1 	rbit	r6, r1
 80041d0:	fab6 f686 	clz	r6, r6
 80041d4:	40f2      	lsrs	r2, r6
 80041d6:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
 80041d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80041dc:	402a      	ands	r2, r5
 80041de:	fa95 f5a5 	rbit	r5, r5
 80041e2:	fab5 f585 	clz	r5, r5
 80041e6:	fa22 f505 	lsr.w	r5, r2, r5
 80041ea:	6185      	str	r5, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR)); 
 80041ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80041f0:	4022      	ands	r2, r4
 80041f2:	fa94 f4a4 	rbit	r4, r4
 80041f6:	fab4 f484 	clz	r4, r4
 80041fa:	fa22 f404 	lsr.w	r4, r2, r4
 80041fe:	61c4      	str	r4, [r0, #28]
  
  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLI2SDIVQ));
 8004200:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004204:	f002 021f 	and.w	r2, r2, #31
 8004208:	241f      	movs	r4, #31
 800420a:	fa94 f4a4 	rbit	r4, r4
 800420e:	fab4 f484 	clz	r4, r4
 8004212:	40e2      	lsrs	r2, r4
 8004214:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVQ));
 8004216:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800421a:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 800421e:	f44f 54f8 	mov.w	r4, #7936	; 0x1f00
 8004222:	fa94 f4a4 	rbit	r4, r4
 8004226:	fab4 f484 	clz	r4, r4
 800422a:	40e2      	lsrs	r2, r4
 800422c:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVR));
 800422e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004232:	400a      	ands	r2, r1
 8004234:	fa91 f1a1 	rbit	r1, r1
 8004238:	fab1 f181 	clz	r1, r1
 800423c:	fa22 f101 	lsr.w	r1, r2, r1
 8004240:	62c1      	str	r1, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8004242:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004246:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800424a:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800424c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004250:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8004254:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 800425c:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800425e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004262:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8004266:	6642      	str	r2, [r0, #100]	; 0x64
  
  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8004268:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800426c:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8004270:	6682      	str	r2, [r0, #104]	; 0x68
  
  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8004272:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004276:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800427a:	66c2      	str	r2, [r0, #108]	; 0x6c
  
  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800427c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004280:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8004284:	6702      	str	r2, [r0, #112]	; 0x70
  
  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8004286:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800428a:	f002 0203 	and.w	r2, r2, #3
 800428e:	6442      	str	r2, [r0, #68]	; 0x44
  
  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8004290:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004294:	f002 020c 	and.w	r2, r2, #12
 8004298:	6482      	str	r2, [r0, #72]	; 0x48
  
  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800429a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800429e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80042a2:	64c2      	str	r2, [r0, #76]	; 0x4c
  
  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 80042a4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80042a8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80042ac:	6502      	str	r2, [r0, #80]	; 0x50
  
  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80042ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80042b2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80042b6:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80042b8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80042bc:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80042c0:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80042c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80042c6:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80042ca:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80042cc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80042d0:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80042d4:	6602      	str	r2, [r0, #96]	; 0x60
  
  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80042d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80042da:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 80042de:	6742      	str	r2, [r0, #116]	; 0x74
  
  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80042e0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80042e4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80042e8:	6782      	str	r2, [r0, #120]	; 0x78
  
  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80042ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80042ee:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80042f2:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 80042f4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80042f8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80042fc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 8004300:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004304:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8004308:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
	
  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 800430c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004310:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8004314:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
 8004318:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800431c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8004320:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8004324:	6899      	ldr	r1, [r3, #8]
 8004326:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800432a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800432c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004330:	430a      	orrs	r2, r1
 8004332:	6302      	str	r2, [r0, #48]	; 0x30
  
  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8004334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004338:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800433c:	d103      	bne.n	8004346 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800433e:	2300      	movs	r3, #0
 8004340:	6383      	str	r3, [r0, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8004342:	bcf0      	pop	{r4, r5, r6, r7}
 8004344:	4770      	bx	lr
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8004346:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800434a:	6383      	str	r3, [r0, #56]	; 0x38
}
 800434c:	e7f9      	b.n	8004342 <HAL_RCCEx_GetPeriphCLKConfig+0x1f6>
 800434e:	bf00      	nop
 8004350:	1cfffff1 	.word	0x1cfffff1
 8004354:	40023800 	.word	0x40023800

08004358 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004358:	b410      	push	{r4}
 800435a:	4603      	mov	r3, r0
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
  
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800435c:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8004360:	d006      	beq.n	8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
  uint32_t frequency = 0;
 8004362:	2000      	movs	r0, #0
        break;
      }
    }
  }
  
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004364:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004368:	d073      	beq.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
      }
    }
  }
  
  return frequency;
}
 800436a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800436e:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;   
 8004370:	4a6f      	ldr	r2, [pc, #444]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004372:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004376:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 800437a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800437e:	d064      	beq.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004380:	d826      	bhi.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8004382:	b38a      	cbz	r2, 80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8004384:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004388:	d120      	bne.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x74>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800438a:	4a69      	ldr	r2, [pc, #420]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800438c:	6852      	ldr	r2, [r2, #4]
 800438e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8004392:	d152      	bne.n	800443a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004394:	4a66      	ldr	r2, [pc, #408]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004396:	6852      	ldr	r2, [r2, #4]
 8004398:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800439c:	4865      	ldr	r0, [pc, #404]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800439e:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80043a2:	4a63      	ldr	r2, [pc, #396]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80043a4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 80043a8:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80043ac:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
 80043b0:	f3c4 1488 	ubfx	r4, r4, #6, #9
 80043b4:	fb00 f004 	mul.w	r0, r0, r4
 80043b8:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 80043bc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80043c0:	f002 021f 	and.w	r2, r2, #31
 80043c4:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 80043c6:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 80043ca:	e7cb      	b.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
    switch (saiclocksource)
 80043cc:	2000      	movs	r0, #0
 80043ce:	e7c9      	b.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
 80043d0:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80043d4:	d106      	bne.n	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80043d6:	4a56      	ldr	r2, [pc, #344]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80043d8:	6852      	ldr	r2, [r2, #4]
 80043da:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80043de:	d136      	bne.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
          frequency = HSI_VALUE;
 80043e0:	4854      	ldr	r0, [pc, #336]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80043e2:	e7bf      	b.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
    switch (saiclocksource)
 80043e4:	2000      	movs	r0, #0
 80043e6:	e7bd      	b.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80043e8:	4a51      	ldr	r2, [pc, #324]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80043ea:	6852      	ldr	r2, [r2, #4]
 80043ec:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80043f0:	d11b      	bne.n	800442a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043f2:	4a4f      	ldr	r2, [pc, #316]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80043f4:	6852      	ldr	r2, [r2, #4]
 80043f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80043fa:	484e      	ldr	r0, [pc, #312]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80043fc:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004400:	4a4b      	ldr	r2, [pc, #300]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004402:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8004406:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800440a:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
 800440e:	f3c4 1488 	ubfx	r4, r4, #6, #9
 8004412:	fb00 f004 	mul.w	r0, r0, r4
 8004416:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800441a:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800441e:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8004422:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg); 
 8004424:	fbb0 f0f2 	udiv	r0, r0, r2
        break;       
 8004428:	e79c      	b.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800442a:	4a41      	ldr	r2, [pc, #260]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800442c:	6852      	ldr	r2, [r2, #4]
 800442e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004432:	4841      	ldr	r0, [pc, #260]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8004434:	fbb0 f0f2 	udiv	r0, r0, r2
 8004438:	e7e2      	b.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800443a:	4a3d      	ldr	r2, [pc, #244]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800443c:	6852      	ldr	r2, [r2, #4]
 800443e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004442:	483d      	ldr	r0, [pc, #244]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8004444:	fbb0 f0f2 	udiv	r0, r0, r2
 8004448:	e7ab      	b.n	80043a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
        frequency = EXTERNAL_CLOCK_VALUE;
 800444a:	483c      	ldr	r0, [pc, #240]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 800444c:	e78a      	b.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
          frequency = HSE_VALUE;
 800444e:	483a      	ldr	r0, [pc, #232]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8004450:	e788      	b.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
    saiclocksource = RCC->DCKCFGR1;   
 8004452:	4b37      	ldr	r3, [pc, #220]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004458:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (saiclocksource)
 800445c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004460:	d062      	beq.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8004462:	d825      	bhi.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004464:	b37b      	cbz	r3, 80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8004466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800446a:	f47f af7e 	bne.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800446e:	4b30      	ldr	r3, [pc, #192]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004476:	d14f      	bne.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004478:	4b2d      	ldr	r3, [pc, #180]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004480:	482c      	ldr	r0, [pc, #176]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8004482:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004486:	4b2a      	ldr	r3, [pc, #168]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004488:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800448c:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004490:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004494:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004498:	fb00 f001 	mul.w	r0, r0, r1
 800449c:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 80044a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 80044aa:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80044ae:	e75c      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
    switch (saiclocksource)
 80044b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044b4:	f47f af59 	bne.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80044b8:	4b1d      	ldr	r3, [pc, #116]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80044c0:	d134      	bne.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
          frequency = HSI_VALUE;
 80044c2:	481c      	ldr	r0, [pc, #112]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80044c4:	e751      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80044c6:	4b1a      	ldr	r3, [pc, #104]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80044ce:	d11b      	bne.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044d0:	4b17      	ldr	r3, [pc, #92]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044d8:	4816      	ldr	r0, [pc, #88]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80044da:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80044de:	4b14      	ldr	r3, [pc, #80]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80044e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044e4:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80044e8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80044ec:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80044f0:	fb00 f001 	mul.w	r0, r0, r1
 80044f4:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80044f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044fc:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8004500:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg); 
 8004502:	fbb0 f0f3 	udiv	r0, r0, r3
        break;       
 8004506:	e730      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004508:	4b09      	ldr	r3, [pc, #36]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004510:	4809      	ldr	r0, [pc, #36]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8004512:	fbb0 f0f3 	udiv	r0, r0, r3
 8004516:	e7e2      	b.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x186>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004520:	4805      	ldr	r0, [pc, #20]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8004522:	fbb0 f0f3 	udiv	r0, r0, r3
 8004526:	e7ae      	b.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004528:	4804      	ldr	r0, [pc, #16]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 800452a:	e71e      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
          frequency = HSE_VALUE;
 800452c:	4802      	ldr	r0, [pc, #8]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
  return frequency;
 800452e:	e71c      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8004530:	40023800 	.word	0x40023800
 8004534:	00f42400 	.word	0x00f42400
 8004538:	017d7840 	.word	0x017d7840
 800453c:	00bb8000 	.word	0x00bb8000

08004540 <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
  
  if(mode == SAI_MODE_IT)
 8004540:	2901      	cmp	r1, #1
 8004542:	d00a      	beq.n	800455a <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004544:	2301      	movs	r3, #1
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004546:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004548:	2a08      	cmp	r2, #8
 800454a:	d008      	beq.n	800455e <SAI_InterruptFlag+0x1e>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT|= SAI_IT_CNRDY;
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800454c:	6842      	ldr	r2, [r0, #4]
 800454e:	3a02      	subs	r2, #2
 8004550:	2a01      	cmp	r2, #1
 8004552:	d90c      	bls.n	800456e <SAI_InterruptFlag+0x2e>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 8004554:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 8004558:	4770      	bx	lr
    tmpIT|= SAI_IT_FREQ;
 800455a:	2309      	movs	r3, #9
 800455c:	e7f3      	b.n	8004546 <SAI_InterruptFlag+0x6>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800455e:	6842      	ldr	r2, [r0, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004560:	2a01      	cmp	r2, #1
 8004562:	bf18      	it	ne
 8004564:	2a03      	cmpne	r2, #3
 8004566:	d1f1      	bne.n	800454c <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_CNRDY;
 8004568:	f043 0310 	orr.w	r3, r3, #16
 800456c:	e7ee      	b.n	800454c <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800456e:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 8004572:	4770      	bx	lr

08004574 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8004574:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <SAI_Disable+0x3c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a0e      	ldr	r2, [pc, #56]	; (80045b4 <SAI_Disable+0x40>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	0b1b      	lsrs	r3, r3, #12
 8004580:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004582:	6801      	ldr	r1, [r0, #0]
 8004584:	680a      	ldr	r2, [r1, #0]
 8004586:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800458a:	600a      	str	r2, [r1, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800458c:	461a      	mov	r2, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b132      	cbz	r2, 80045a0 <SAI_Disable+0x2c>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004592:	6802      	ldr	r2, [r0, #0]
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800459a:	d1f7      	bne.n	800458c <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800459c:	2000      	movs	r0, #0

  return status;
}
 800459e:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80045a0:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80045a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 80045ac:	2003      	movs	r0, #3
      break;
 80045ae:	4770      	bx	lr
 80045b0:	20000030 	.word	0x20000030
 80045b4:	95cbec1b 	.word	0x95cbec1b

080045b8 <HAL_SAI_MspInit>:
}
 80045b8:	4770      	bx	lr
	...

080045bc <HAL_SAI_Init>:
  if(hsai == NULL)
 80045bc:	2800      	cmp	r0, #0
 80045be:	f000 80eb 	beq.w	8004798 <HAL_SAI_Init+0x1dc>
{
 80045c2:	b570      	push	{r4, r5, r6, lr}
 80045c4:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_RESET)
 80045c6:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 80b9 	beq.w	8004742 <HAL_SAI_Init+0x186>
  hsai->State = HAL_SAI_STATE_BUSY;
 80045d0:	2302      	movs	r3, #2
 80045d2:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 80045d6:	4620      	mov	r0, r4
 80045d8:	f7ff ffcc 	bl	8004574 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 80045dc:	68e3      	ldr	r3, [r4, #12]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	f000 80b4 	beq.w	800474c <HAL_SAI_Init+0x190>
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	f040 80b3 	bne.w	8004750 <HAL_SAI_Init+0x194>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80045ea:	2220      	movs	r2, #32
  switch(hsai->Init.Synchro)
 80045ec:	68a3      	ldr	r3, [r4, #8]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	f000 80b8 	beq.w	8004764 <HAL_SAI_Init+0x1a8>
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	f000 80b0 	beq.w	800475a <HAL_SAI_Init+0x19e>
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	f000 80aa 	beq.w	8004754 <HAL_SAI_Init+0x198>
 8004600:	2500      	movs	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	4865      	ldr	r0, [pc, #404]	; (800479c <HAL_SAI_Init+0x1e0>)
 8004606:	4966      	ldr	r1, [pc, #408]	; (80047a0 <HAL_SAI_Init+0x1e4>)
 8004608:	428b      	cmp	r3, r1
 800460a:	bf18      	it	ne
 800460c:	4283      	cmpne	r3, r0
 800460e:	f040 80ac 	bne.w	800476a <HAL_SAI_Init+0x1ae>
    SAI1->GCR = tmpregisterGCR;
 8004612:	4b64      	ldr	r3, [pc, #400]	; (80047a4 <HAL_SAI_Init+0x1e8>)
 8004614:	601a      	str	r2, [r3, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004616:	69e3      	ldr	r3, [r4, #28]
 8004618:	b323      	cbz	r3, 8004664 <HAL_SAI_Init+0xa8>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	495f      	ldr	r1, [pc, #380]	; (800479c <HAL_SAI_Init+0x1e0>)
 800461e:	4a60      	ldr	r2, [pc, #384]	; (80047a0 <HAL_SAI_Init+0x1e4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	bf18      	it	ne
 8004624:	428b      	cmpne	r3, r1
 8004626:	f000 80a3 	beq.w	8004770 <HAL_SAI_Init+0x1b4>
    uint32_t freq = 0;
 800462a:	2000      	movs	r0, #0
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	495e      	ldr	r1, [pc, #376]	; (80047a8 <HAL_SAI_Init+0x1ec>)
 8004630:	4a5e      	ldr	r2, [pc, #376]	; (80047ac <HAL_SAI_Init+0x1f0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	bf18      	it	ne
 8004636:	428b      	cmpne	r3, r1
 8004638:	f000 809f 	beq.w	800477a <HAL_SAI_Init+0x1be>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800463c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004640:	0040      	lsls	r0, r0, #1
 8004642:	69e3      	ldr	r3, [r4, #28]
 8004644:	025b      	lsls	r3, r3, #9
 8004646:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 800464a:	4b59      	ldr	r3, [pc, #356]	; (80047b0 <HAL_SAI_Init+0x1f4>)
 800464c:	fba3 2300 	umull	r2, r3, r3, r0
 8004650:	08db      	lsrs	r3, r3, #3
 8004652:	6223      	str	r3, [r4, #32]
    if((tmpval % 10) > 8)
 8004654:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004658:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 800465c:	2808      	cmp	r0, #8
 800465e:	d901      	bls.n	8004664 <HAL_SAI_Init+0xa8>
      hsai->Init.Mckdiv+= 1;
 8004660:	3301      	adds	r3, #1
 8004662:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004664:	6862      	ldr	r2, [r4, #4]
 8004666:	2a02      	cmp	r2, #2
 8004668:	bf14      	ite	ne
 800466a:	2300      	movne	r3, #0
 800466c:	2301      	moveq	r3, #1
 800466e:	2a00      	cmp	r2, #0
 8004670:	bf08      	it	eq
 8004672:	2301      	moveq	r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 8087 	beq.w	8004788 <HAL_SAI_Init+0x1cc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800467a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800467c:	2b01      	cmp	r3, #1
 800467e:	f000 8081 	beq.w	8004784 <HAL_SAI_Init+0x1c8>
 8004682:	f44f 7600 	mov.w	r6, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004686:	6821      	ldr	r1, [r4, #0]
 8004688:	680b      	ldr	r3, [r1, #0]
 800468a:	4a4a      	ldr	r2, [pc, #296]	; (80047b4 <HAL_SAI_Init+0x1f8>)
 800468c:	401a      	ands	r2, r3
 800468e:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004690:	6822      	ldr	r2, [r4, #0]
 8004692:	6811      	ldr	r1, [r2, #0]
 8004694:	6863      	ldr	r3, [r4, #4]
 8004696:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004698:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800469a:	6b60      	ldr	r0, [r4, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800469c:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800469e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80046a0:	4303      	orrs	r3, r0
 80046a2:	4333      	orrs	r3, r6
                        ckstr_bits | syncen_bits |                               \
 80046a4:	432b      	orrs	r3, r5
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80046a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80046a8:	4303      	orrs	r3, r0
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80046aa:	6920      	ldr	r0, [r4, #16]
 80046ac:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80046ae:	6960      	ldr	r0, [r4, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80046b0:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80046b2:	6a20      	ldr	r0, [r4, #32]
 80046b4:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80046b8:	430b      	orrs	r3, r1
 80046ba:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80046bc:	6822      	ldr	r2, [r4, #0]
 80046be:	6851      	ldr	r1, [r2, #4]
 80046c0:	4b3d      	ldr	r3, [pc, #244]	; (80047b8 <HAL_SAI_Init+0x1fc>)
 80046c2:	400b      	ands	r3, r1
 80046c4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80046c6:	6821      	ldr	r1, [r4, #0]
 80046c8:	684a      	ldr	r2, [r1, #4]
 80046ca:	69a3      	ldr	r3, [r4, #24]
 80046cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80046ce:	4303      	orrs	r3, r0
 80046d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80046d2:	4303      	orrs	r3, r0
 80046d4:	4313      	orrs	r3, r2
 80046d6:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80046d8:	6822      	ldr	r2, [r4, #0]
 80046da:	6891      	ldr	r1, [r2, #8]
 80046dc:	4b37      	ldr	r3, [pc, #220]	; (80047bc <HAL_SAI_Init+0x200>)
 80046de:	400b      	ands	r3, r1
 80046e0:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80046e2:	6820      	ldr	r0, [r4, #0]
 80046e4:	6882      	ldr	r2, [r0, #8]
 80046e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046e8:	3b01      	subs	r3, #1
                          hsai->FrameInit.FSOffset |
 80046ea:	6d21      	ldr	r1, [r4, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80046ec:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSDefinition |
 80046ee:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80046f0:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSPolarity   |
 80046f2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80046f4:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80046f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80046f8:	3901      	subs	r1, #1
                          hsai->FrameInit.FSPolarity   |
 80046fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80046fe:	4313      	orrs	r3, r2
 8004700:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004702:	6822      	ldr	r2, [r4, #0]
 8004704:	68d3      	ldr	r3, [r2, #12]
 8004706:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 800470a:	f023 030f 	bic.w	r3, r3, #15
 800470e:	041b      	lsls	r3, r3, #16
 8004710:	0c1b      	lsrs	r3, r3, #16
 8004712:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004714:	6820      	ldr	r0, [r4, #0]
 8004716:	68c2      	ldr	r2, [r0, #12]
 8004718:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800471a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800471c:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800471e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004720:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004724:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004726:	3901      	subs	r1, #1
 8004728:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800472c:	4313      	orrs	r3, r2
 800472e:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004730:	2000      	movs	r0, #0
 8004732:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  hsai->State= HAL_SAI_STATE_READY;
 8004736:	2301      	movs	r3, #1
 8004738:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 800473c:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8004740:	bd70      	pop	{r4, r5, r6, pc}
    hsai->Lock = HAL_UNLOCKED;
 8004742:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8004746:	f7ff ff37 	bl	80045b8 <HAL_SAI_MspInit>
 800474a:	e741      	b.n	80045d0 <HAL_SAI_Init+0x14>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800474c:	2210      	movs	r2, #16
 800474e:	e74d      	b.n	80045ec <HAL_SAI_Init+0x30>
  switch(hsai->Init.SynchroExt)
 8004750:	2200      	movs	r2, #0
 8004752:	e74b      	b.n	80045ec <HAL_SAI_Init+0x30>
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8004754:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8004758:	e753      	b.n	8004602 <HAL_SAI_Init+0x46>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800475a:	f042 0201 	orr.w	r2, r2, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800475e:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 8004762:	e74e      	b.n	8004602 <HAL_SAI_Init+0x46>
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8004764:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8004768:	e74b      	b.n	8004602 <HAL_SAI_Init+0x46>
    SAI2->GCR = tmpregisterGCR;
 800476a:	4b15      	ldr	r3, [pc, #84]	; (80047c0 <HAL_SAI_Init+0x204>)
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	e752      	b.n	8004616 <HAL_SAI_Init+0x5a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004770:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004774:	f7ff fdf0 	bl	8004358 <HAL_RCCEx_GetPeriphCLKFreq>
 8004778:	e758      	b.n	800462c <HAL_SAI_Init+0x70>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800477a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800477e:	f7ff fdeb 	bl	8004358 <HAL_RCCEx_GetPeriphCLKFreq>
 8004782:	e75b      	b.n	800463c <HAL_SAI_Init+0x80>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004784:	2600      	movs	r6, #0
 8004786:	e77e      	b.n	8004686 <HAL_SAI_Init+0xca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004788:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800478a:	2b01      	cmp	r3, #1
 800478c:	d001      	beq.n	8004792 <HAL_SAI_Init+0x1d6>
 800478e:	2600      	movs	r6, #0
 8004790:	e779      	b.n	8004686 <HAL_SAI_Init+0xca>
 8004792:	f44f 7600 	mov.w	r6, #512	; 0x200
 8004796:	e776      	b.n	8004686 <HAL_SAI_Init+0xca>
    return HAL_ERROR;
 8004798:	2001      	movs	r0, #1
}
 800479a:	4770      	bx	lr
 800479c:	40015804 	.word	0x40015804
 80047a0:	40015824 	.word	0x40015824
 80047a4:	40015800 	.word	0x40015800
 80047a8:	40015c04 	.word	0x40015c04
 80047ac:	40015c24 	.word	0x40015c24
 80047b0:	cccccccd 	.word	0xcccccccd
 80047b4:	ff05c010 	.word	0xff05c010
 80047b8:	ffff1ff0 	.word	0xffff1ff0
 80047bc:	fff88000 	.word	0xfff88000
 80047c0:	40015c00 	.word	0x40015c00

080047c4 <HAL_SAI_MspDeInit>:
}
 80047c4:	4770      	bx	lr

080047c6 <HAL_SAI_DeInit>:
  if(hsai == NULL)
 80047c6:	b1e8      	cbz	r0, 8004804 <HAL_SAI_DeInit+0x3e>
{
 80047c8:	b538      	push	{r3, r4, r5, lr}
 80047ca:	4604      	mov	r4, r0
  hsai->State = HAL_SAI_STATE_BUSY;
 80047cc:	2302      	movs	r3, #2
 80047ce:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  hsai->Instance->IMR = 0;
 80047d2:	6803      	ldr	r3, [r0, #0]
 80047d4:	2500      	movs	r5, #0
 80047d6:	611d      	str	r5, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80047d8:	6803      	ldr	r3, [r0, #0]
 80047da:	f04f 32ff 	mov.w	r2, #4294967295
 80047de:	619a      	str	r2, [r3, #24]
  SAI_Disable(hsai);
 80047e0:	f7ff fec8 	bl	8004574 <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80047e4:	6822      	ldr	r2, [r4, #0]
 80047e6:	6853      	ldr	r3, [r2, #4]
 80047e8:	f043 0308 	orr.w	r3, r3, #8
 80047ec:	6053      	str	r3, [r2, #4]
  HAL_SAI_MspDeInit(hsai);
 80047ee:	4620      	mov	r0, r4
 80047f0:	f7ff ffe8 	bl	80047c4 <HAL_SAI_MspDeInit>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80047f4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  hsai->State = HAL_SAI_STATE_RESET;
 80047f8:	f884 507d 	strb.w	r5, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 80047fc:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
  return HAL_OK;
 8004800:	4628      	mov	r0, r5
}
 8004802:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004804:	2001      	movs	r0, #1
}
 8004806:	4770      	bx	lr

08004808 <HAL_SAI_Transmit_DMA>:
{
 8004808:	b570      	push	{r4, r5, r6, lr}
  if((pData == NULL) || (Size == 0))
 800480a:	4613      	mov	r3, r2
 800480c:	fab2 f282 	clz	r2, r2
 8004810:	0952      	lsrs	r2, r2, #5
 8004812:	2900      	cmp	r1, #0
 8004814:	bf08      	it	eq
 8004816:	2201      	moveq	r2, #1
 8004818:	2a00      	cmp	r2, #0
 800481a:	d14b      	bne.n	80048b4 <HAL_SAI_Transmit_DMA+0xac>
 800481c:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_READY)
 800481e:	f894 507d 	ldrb.w	r5, [r4, #125]	; 0x7d
 8004822:	b2ed      	uxtb	r5, r5
 8004824:	2d01      	cmp	r5, #1
 8004826:	d148      	bne.n	80048ba <HAL_SAI_Transmit_DMA+0xb2>
    __HAL_LOCK(hsai);
 8004828:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 800482c:	2a01      	cmp	r2, #1
 800482e:	d046      	beq.n	80048be <HAL_SAI_Transmit_DMA+0xb6>
 8004830:	2201      	movs	r2, #1
 8004832:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 8004836:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 8004838:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 800483c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004840:	2300      	movs	r3, #0
 8004842:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004846:	2212      	movs	r2, #18
 8004848:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800484c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800484e:	491d      	ldr	r1, [pc, #116]	; (80048c4 <HAL_SAI_Transmit_DMA+0xbc>)
 8004850:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004852:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004854:	491c      	ldr	r1, [pc, #112]	; (80048c8 <HAL_SAI_Transmit_DMA+0xc0>)
 8004856:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004858:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800485a:	491c      	ldr	r1, [pc, #112]	; (80048cc <HAL_SAI_Transmit_DMA+0xc4>)
 800485c:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 800485e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004860:	6513      	str	r3, [r2, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004862:	6822      	ldr	r2, [r4, #0]
 8004864:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8004868:	321c      	adds	r2, #28
 800486a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800486c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800486e:	f7fc feba 	bl	80015e6 <HAL_DMA_Start_IT>
 8004872:	4606      	mov	r6, r0
 8004874:	b118      	cbz	r0, 800487e <HAL_SAI_Transmit_DMA+0x76>
      __HAL_UNLOCK(hsai);
 8004876:	2300      	movs	r3, #0
 8004878:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
      return  HAL_ERROR;
 800487c:	e01b      	b.n	80048b6 <HAL_SAI_Transmit_DMA+0xae>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004886:	d103      	bne.n	8004890 <HAL_SAI_Transmit_DMA+0x88>
      __HAL_SAI_ENABLE(hsai);
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800488e:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004890:	2100      	movs	r1, #0
 8004892:	4620      	mov	r0, r4
 8004894:	f7ff fe54 	bl	8004540 <SAI_InterruptFlag>
 8004898:	6822      	ldr	r2, [r4, #0]
 800489a:	6913      	ldr	r3, [r2, #16]
 800489c:	4303      	orrs	r3, r0
 800489e:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80048a0:	6822      	ldr	r2, [r4, #0]
 80048a2:	6813      	ldr	r3, [r2, #0]
 80048a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048a8:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 80048aa:	2300      	movs	r3, #0
 80048ac:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 80048b0:	4635      	mov	r5, r6
 80048b2:	e000      	b.n	80048b6 <HAL_SAI_Transmit_DMA+0xae>
    return  HAL_ERROR;
 80048b4:	2501      	movs	r5, #1
}
 80048b6:	4628      	mov	r0, r5
 80048b8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80048ba:	2502      	movs	r5, #2
 80048bc:	e7fb      	b.n	80048b6 <HAL_SAI_Transmit_DMA+0xae>
    __HAL_LOCK(hsai);
 80048be:	2502      	movs	r5, #2
 80048c0:	e7f9      	b.n	80048b6 <HAL_SAI_Transmit_DMA+0xae>
 80048c2:	bf00      	nop
 80048c4:	080049d5 	.word	0x080049d5
 80048c8:	08004999 	.word	0x08004999
 80048cc:	08004a25 	.word	0x08004a25

080048d0 <HAL_SAI_Receive_DMA>:
{
 80048d0:	b570      	push	{r4, r5, r6, lr}
  if((pData == NULL) || (Size == 0))
 80048d2:	4613      	mov	r3, r2
 80048d4:	fab2 f282 	clz	r2, r2
 80048d8:	0952      	lsrs	r2, r2, #5
 80048da:	2900      	cmp	r1, #0
 80048dc:	bf08      	it	eq
 80048de:	2201      	moveq	r2, #1
 80048e0:	2a00      	cmp	r2, #0
 80048e2:	d14b      	bne.n	800497c <HAL_SAI_Receive_DMA+0xac>
 80048e4:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_READY)
 80048e6:	f894 507d 	ldrb.w	r5, [r4, #125]	; 0x7d
 80048ea:	b2ed      	uxtb	r5, r5
 80048ec:	2d01      	cmp	r5, #1
 80048ee:	d148      	bne.n	8004982 <HAL_SAI_Receive_DMA+0xb2>
    __HAL_LOCK(hsai);
 80048f0:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 80048f4:	2a01      	cmp	r2, #1
 80048f6:	d046      	beq.n	8004986 <HAL_SAI_Receive_DMA+0xb6>
 80048f8:	2201      	movs	r2, #1
 80048fa:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 80048fe:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 8004900:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 8004904:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004908:	2300      	movs	r3, #0
 800490a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800490e:	2222      	movs	r2, #34	; 0x22
 8004910:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004914:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8004916:	491d      	ldr	r1, [pc, #116]	; (800498c <HAL_SAI_Receive_DMA+0xbc>)
 8004918:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800491a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800491c:	491c      	ldr	r1, [pc, #112]	; (8004990 <HAL_SAI_Receive_DMA+0xc0>)
 800491e:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004920:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8004922:	491c      	ldr	r1, [pc, #112]	; (8004994 <HAL_SAI_Receive_DMA+0xc4>)
 8004924:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 8004926:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8004928:	6513      	str	r3, [r2, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800492a:	6821      	ldr	r1, [r4, #0]
 800492c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8004930:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004932:	311c      	adds	r1, #28
 8004934:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004936:	f7fc fe56 	bl	80015e6 <HAL_DMA_Start_IT>
 800493a:	4606      	mov	r6, r0
 800493c:	b118      	cbz	r0, 8004946 <HAL_SAI_Receive_DMA+0x76>
      __HAL_UNLOCK(hsai);
 800493e:	2300      	movs	r3, #0
 8004940:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
      return  HAL_ERROR;
 8004944:	e01b      	b.n	800497e <HAL_SAI_Receive_DMA+0xae>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800494e:	d103      	bne.n	8004958 <HAL_SAI_Receive_DMA+0x88>
      __HAL_SAI_ENABLE(hsai);
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004956:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004958:	2100      	movs	r1, #0
 800495a:	4620      	mov	r0, r4
 800495c:	f7ff fdf0 	bl	8004540 <SAI_InterruptFlag>
 8004960:	6822      	ldr	r2, [r4, #0]
 8004962:	6913      	ldr	r3, [r2, #16]
 8004964:	4303      	orrs	r3, r0
 8004966:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004968:	6822      	ldr	r2, [r4, #0]
 800496a:	6813      	ldr	r3, [r2, #0]
 800496c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004970:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8004972:	2300      	movs	r3, #0
 8004974:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8004978:	4635      	mov	r5, r6
 800497a:	e000      	b.n	800497e <HAL_SAI_Receive_DMA+0xae>
    return  HAL_ERROR;
 800497c:	2501      	movs	r5, #1
}
 800497e:	4628      	mov	r0, r5
 8004980:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8004982:	2502      	movs	r5, #2
 8004984:	e7fb      	b.n	800497e <HAL_SAI_Receive_DMA+0xae>
    __HAL_LOCK(hsai);
 8004986:	2502      	movs	r5, #2
 8004988:	e7f9      	b.n	800497e <HAL_SAI_Receive_DMA+0xae>
 800498a:	bf00      	nop
 800498c:	08004a1b 	.word	0x08004a1b
 8004990:	080049df 	.word	0x080049df
 8004994:	08004a25 	.word	0x08004a25

08004998 <SAI_DMATxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004998:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 800499a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 800499c:	6803      	ldr	r3, [r0, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80049a4:	d112      	bne.n	80049cc <SAI_DMATxCplt+0x34>
  {
    hsai->XferCount = 0;
 80049a6:	2100      	movs	r1, #0
 80049a8:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    
    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80049ac:	6822      	ldr	r2, [r4, #0]
 80049ae:	6813      	ldr	r3, [r2, #0]
 80049b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80049b4:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80049b6:	4620      	mov	r0, r4
 80049b8:	f7ff fdc2 	bl	8004540 <SAI_InterruptFlag>
 80049bc:	6822      	ldr	r2, [r4, #0]
 80049be:	6913      	ldr	r3, [r2, #16]
 80049c0:	ea23 0300 	bic.w	r3, r3, r0
 80049c4:	6113      	str	r3, [r2, #16]
    
    hsai->State= HAL_SAI_STATE_READY;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_TxCpltCallback(hsai);
 80049cc:	4620      	mov	r0, r4
 80049ce:	f7fc fb7b 	bl	80010c8 <HAL_SAI_TxCpltCallback>
}
 80049d2:	bd10      	pop	{r4, pc}

080049d4 <SAI_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049d4:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_TxHalfCpltCallback(hsai);
 80049d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80049d8:	f7fc fb7a 	bl	80010d0 <HAL_SAI_TxHalfCpltCallback>
}
 80049dc:	bd08      	pop	{r3, pc}

080049de <SAI_DMARxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80049de:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049e0:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80049e2:	6803      	ldr	r3, [r0, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80049ea:	d112      	bne.n	8004a12 <SAI_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80049ec:	6822      	ldr	r2, [r4, #0]
 80049ee:	6813      	ldr	r3, [r2, #0]
 80049f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80049f4:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 80049f6:	2100      	movs	r1, #0
 80049f8:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80049fc:	4620      	mov	r0, r4
 80049fe:	f7ff fd9f 	bl	8004540 <SAI_InterruptFlag>
 8004a02:	6822      	ldr	r2, [r4, #0]
 8004a04:	6913      	ldr	r3, [r2, #16]
 8004a06:	ea23 0300 	bic.w	r3, r3, r0
 8004a0a:	6113      	str	r3, [r2, #16]
    
    hsai->State = HAL_SAI_STATE_READY;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_RxCpltCallback(hsai);
 8004a12:	4620      	mov	r0, r4
 8004a14:	f7fc fc1b 	bl	800124e <HAL_SAI_RxCpltCallback>
}
 8004a18:	bd10      	pop	{r4, pc}

08004a1a <SAI_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a1a:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_RxHalfCpltCallback(hsai);
 8004a1c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004a1e:	f7fc fc1a 	bl	8001256 <HAL_SAI_RxHalfCpltCallback>
}
 8004a22:	bd08      	pop	{r3, pc}

08004a24 <SAI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a24:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a26:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004a28:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a30:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8004a34:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d007      	beq.n	8004a4c <SAI_DMAError+0x28>
 8004a3c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d003      	beq.n	8004a4c <SAI_DMAError+0x28>

    /* Initialize XferCount */
    hsai->XferCount = 0U;
  }
  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 8004a44:	4620      	mov	r0, r4
 8004a46:	f7fc fc0b 	bl	8001260 <HAL_SAI_ErrorCallback>
}
 8004a4a:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004a4c:	6822      	ldr	r2, [r4, #0]
 8004a4e:	6813      	ldr	r3, [r2, #0]
 8004a50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a54:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 8004a56:	4620      	mov	r0, r4
 8004a58:	f7ff fd8c 	bl	8004574 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    hsai->XferCount = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8004a68:	e7ec      	b.n	8004a44 <SAI_DMAError+0x20>

08004a6a <HAL_SAI_GetState>:
  return hsai->State;
 8004a6a:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 8004a6e:	4770      	bx	lr

08004a70 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a70:	4770      	bx	lr

08004a72 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a72:	6802      	ldr	r2, [r0, #0]
 8004a74:	68d3      	ldr	r3, [r2, #12]
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	60d3      	str	r3, [r2, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a7c:	6802      	ldr	r2, [r0, #0]
 8004a7e:	6813      	ldr	r3, [r2, #0]
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	6013      	str	r3, [r2, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8004a86:	2000      	movs	r0, #0
 8004a88:	4770      	bx	lr

08004a8a <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a8c:	4770      	bx	lr

08004a8e <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a8e:	4770      	bx	lr

08004a90 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a90:	4770      	bx	lr

08004a92 <HAL_TIM_IRQHandler>:
{
 8004a92:	b510      	push	{r4, lr}
 8004a94:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a96:	6803      	ldr	r3, [r0, #0]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	f012 0f02 	tst.w	r2, #2
 8004a9e:	d011      	beq.n	8004ac4 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	f012 0f02 	tst.w	r2, #2
 8004aa6:	d00d      	beq.n	8004ac4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aa8:	f06f 0202 	mvn.w	r2, #2
 8004aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8004ab2:	6803      	ldr	r3, [r0, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f013 0f03 	tst.w	r3, #3
 8004aba:	d079      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004abc:	f7ff ffe6 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	f012 0f04 	tst.w	r2, #4
 8004acc:	d012      	beq.n	8004af4 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	f012 0f04 	tst.w	r2, #4
 8004ad4:	d00e      	beq.n	8004af4 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ad6:	f06f 0204 	mvn.w	r2, #4
 8004ada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004adc:	2302      	movs	r3, #2
 8004ade:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004ae8:	d068      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004aea:	4620      	mov	r0, r4
 8004aec:	f7ff ffce 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af0:	2300      	movs	r3, #0
 8004af2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	691a      	ldr	r2, [r3, #16]
 8004af8:	f012 0f08 	tst.w	r2, #8
 8004afc:	d012      	beq.n	8004b24 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	f012 0f08 	tst.w	r2, #8
 8004b04:	d00e      	beq.n	8004b24 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b06:	f06f 0208 	mvn.w	r2, #8
 8004b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	f013 0f03 	tst.w	r3, #3
 8004b18:	d057      	beq.n	8004bca <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f7ff ffb6 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b20:	2300      	movs	r3, #0
 8004b22:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	f012 0f10 	tst.w	r2, #16
 8004b2c:	d012      	beq.n	8004b54 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	f012 0f10 	tst.w	r2, #16
 8004b34:	d00e      	beq.n	8004b54 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b36:	f06f 0210 	mvn.w	r2, #16
 8004b3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b3c:	2308      	movs	r3, #8
 8004b3e:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004b48:	d046      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	f7ff ff9e 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b50:	2300      	movs	r3, #0
 8004b52:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	f012 0f01 	tst.w	r2, #1
 8004b5c:	d003      	beq.n	8004b66 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	f012 0f01 	tst.w	r2, #1
 8004b64:	d13f      	bne.n	8004be6 <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004b6e:	d003      	beq.n	8004b78 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004b76:	d13d      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004b80:	d003      	beq.n	8004b8a <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004b88:	d13b      	bne.n	8004c02 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004b92:	d003      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004b9a:	d139      	bne.n	8004c10 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	f012 0f20 	tst.w	r2, #32
 8004ba4:	d003      	beq.n	8004bae <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	f012 0f20 	tst.w	r2, #32
 8004bac:	d137      	bne.n	8004c1e <HAL_TIM_IRQHandler+0x18c>
}
 8004bae:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb0:	f7ff ff6b 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f7ff ff6a 	bl	8004a8e <HAL_TIM_PWM_PulseFinishedCallback>
 8004bba:	e781      	b.n	8004ac0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f7ff ff64 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	f7ff ff63 	bl	8004a8e <HAL_TIM_PWM_PulseFinishedCallback>
 8004bc8:	e792      	b.n	8004af0 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f7ff ff5d 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f7ff ff5c 	bl	8004a8e <HAL_TIM_PWM_PulseFinishedCallback>
 8004bd6:	e7a3      	b.n	8004b20 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f7ff ff56 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bde:	4620      	mov	r0, r4
 8004be0:	f7ff ff55 	bl	8004a8e <HAL_TIM_PWM_PulseFinishedCallback>
 8004be4:	e7b4      	b.n	8004b50 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004be6:	f06f 0201 	mvn.w	r2, #1
 8004bea:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bec:	4620      	mov	r0, r4
 8004bee:	f002 fb47 	bl	8007280 <HAL_TIM_PeriodElapsedCallback>
 8004bf2:	e7b8      	b.n	8004b66 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bf8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f000 f8b7 	bl	8004d6e <HAL_TIMEx_BreakCallback>
 8004c00:	e7ba      	b.n	8004b78 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c06:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f000 f8b0 	bl	8004d6e <HAL_TIMEx_BreakCallback>
 8004c0e:	e7bc      	b.n	8004b8a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c14:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004c16:	4620      	mov	r0, r4
 8004c18:	f7ff ff3a 	bl	8004a90 <HAL_TIM_TriggerCallback>
 8004c1c:	e7be      	b.n	8004b9c <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c1e:	f06f 0220 	mvn.w	r2, #32
 8004c22:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004c24:	4620      	mov	r0, r4
 8004c26:	f000 f8a1 	bl	8004d6c <HAL_TIMEx_CommutCallback>
}
 8004c2a:	e7c0      	b.n	8004bae <HAL_TIM_IRQHandler+0x11c>

08004c2c <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c2c:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8004c2e:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004c30:	4c3a      	ldr	r4, [pc, #232]	; (8004d1c <TIM_Base_SetConfig+0xf0>)
 8004c32:	42a0      	cmp	r0, r4
 8004c34:	bf14      	ite	ne
 8004c36:	2400      	movne	r4, #0
 8004c38:	2401      	moveq	r4, #1
 8004c3a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004c3e:	bf14      	ite	ne
 8004c40:	4622      	movne	r2, r4
 8004c42:	f044 0201 	orreq.w	r2, r4, #1
 8004c46:	b9aa      	cbnz	r2, 8004c74 <TIM_Base_SetConfig+0x48>
 8004c48:	4d35      	ldr	r5, [pc, #212]	; (8004d20 <TIM_Base_SetConfig+0xf4>)
 8004c4a:	42a8      	cmp	r0, r5
 8004c4c:	bf14      	ite	ne
 8004c4e:	2500      	movne	r5, #0
 8004c50:	2501      	moveq	r5, #1
 8004c52:	4e34      	ldr	r6, [pc, #208]	; (8004d24 <TIM_Base_SetConfig+0xf8>)
 8004c54:	42b0      	cmp	r0, r6
 8004c56:	d00d      	beq.n	8004c74 <TIM_Base_SetConfig+0x48>
 8004c58:	b965      	cbnz	r5, 8004c74 <TIM_Base_SetConfig+0x48>
 8004c5a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8004c5e:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8004c62:	42a8      	cmp	r0, r5
 8004c64:	bf14      	ite	ne
 8004c66:	2500      	movne	r5, #0
 8004c68:	2501      	moveq	r5, #1
 8004c6a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004c6e:	42b0      	cmp	r0, r6
 8004c70:	d000      	beq.n	8004c74 <TIM_Base_SetConfig+0x48>
 8004c72:	b11d      	cbz	r5, 8004c7c <TIM_Base_SetConfig+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004c78:	684d      	ldr	r5, [r1, #4]
 8004c7a:	432b      	orrs	r3, r5
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004c7c:	2a00      	cmp	r2, #0
 8004c7e:	d133      	bne.n	8004ce8 <TIM_Base_SetConfig+0xbc>
 8004c80:	4a27      	ldr	r2, [pc, #156]	; (8004d20 <TIM_Base_SetConfig+0xf4>)
 8004c82:	4290      	cmp	r0, r2
 8004c84:	bf14      	ite	ne
 8004c86:	2200      	movne	r2, #0
 8004c88:	2201      	moveq	r2, #1
 8004c8a:	4d26      	ldr	r5, [pc, #152]	; (8004d24 <TIM_Base_SetConfig+0xf8>)
 8004c8c:	42a8      	cmp	r0, r5
 8004c8e:	d02b      	beq.n	8004ce8 <TIM_Base_SetConfig+0xbc>
 8004c90:	bb52      	cbnz	r2, 8004ce8 <TIM_Base_SetConfig+0xbc>
 8004c92:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004c96:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8004c9a:	4290      	cmp	r0, r2
 8004c9c:	bf14      	ite	ne
 8004c9e:	2200      	movne	r2, #0
 8004ca0:	2201      	moveq	r2, #1
 8004ca2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004ca6:	42a8      	cmp	r0, r5
 8004ca8:	d01e      	beq.n	8004ce8 <TIM_Base_SetConfig+0xbc>
 8004caa:	b9ea      	cbnz	r2, 8004ce8 <TIM_Base_SetConfig+0xbc>
 8004cac:	4a1e      	ldr	r2, [pc, #120]	; (8004d28 <TIM_Base_SetConfig+0xfc>)
 8004cae:	4290      	cmp	r0, r2
 8004cb0:	bf14      	ite	ne
 8004cb2:	2200      	movne	r2, #0
 8004cb4:	2201      	moveq	r2, #1
 8004cb6:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8004cba:	42a8      	cmp	r0, r5
 8004cbc:	d014      	beq.n	8004ce8 <TIM_Base_SetConfig+0xbc>
 8004cbe:	b99a      	cbnz	r2, 8004ce8 <TIM_Base_SetConfig+0xbc>
 8004cc0:	4a1a      	ldr	r2, [pc, #104]	; (8004d2c <TIM_Base_SetConfig+0x100>)
 8004cc2:	4290      	cmp	r0, r2
 8004cc4:	bf14      	ite	ne
 8004cc6:	2200      	movne	r2, #0
 8004cc8:	2201      	moveq	r2, #1
 8004cca:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004cce:	42a8      	cmp	r0, r5
 8004cd0:	d00a      	beq.n	8004ce8 <TIM_Base_SetConfig+0xbc>
 8004cd2:	b94a      	cbnz	r2, 8004ce8 <TIM_Base_SetConfig+0xbc>
 8004cd4:	4a16      	ldr	r2, [pc, #88]	; (8004d30 <TIM_Base_SetConfig+0x104>)
 8004cd6:	4290      	cmp	r0, r2
 8004cd8:	bf14      	ite	ne
 8004cda:	2200      	movne	r2, #0
 8004cdc:	2201      	moveq	r2, #1
 8004cde:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8004ce2:	42a8      	cmp	r0, r5
 8004ce4:	d000      	beq.n	8004ce8 <TIM_Base_SetConfig+0xbc>
 8004ce6:	b11a      	cbz	r2, 8004cf0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cec:	68ca      	ldr	r2, [r1, #12]
 8004cee:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cf4:	694a      	ldr	r2, [r1, #20]
 8004cf6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004cf8:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cfa:	688a      	ldr	r2, [r1, #8]
 8004cfc:	62c2      	str	r2, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004cfe:	680a      	ldr	r2, [r1, #0]
 8004d00:	6282      	str	r2, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8004d02:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <TIM_Base_SetConfig+0x108>)
 8004d04:	4298      	cmp	r0, r3
 8004d06:	bf14      	ite	ne
 8004d08:	4623      	movne	r3, r4
 8004d0a:	f044 0301 	orreq.w	r3, r4, #1
 8004d0e:	b10b      	cbz	r3, 8004d14 <TIM_Base_SetConfig+0xe8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d10:	690b      	ldr	r3, [r1, #16]
 8004d12:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d14:	2301      	movs	r3, #1
 8004d16:	6143      	str	r3, [r0, #20]
}
 8004d18:	bc70      	pop	{r4, r5, r6}
 8004d1a:	4770      	bx	lr
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40000800 	.word	0x40000800
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40014400 	.word	0x40014400
 8004d2c:	40001800 	.word	0x40001800
 8004d30:	40002000 	.word	0x40002000
 8004d34:	40010400 	.word	0x40010400

08004d38 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8004d38:	b1b0      	cbz	r0, 8004d68 <HAL_TIM_Base_Init+0x30>
{ 
 8004d3a:	b510      	push	{r4, lr}
 8004d3c:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8004d3e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004d42:	b163      	cbz	r3, 8004d5e <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8004d44:	2302      	movs	r3, #2
 8004d46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004d50:	f7ff ff6c 	bl	8004c2c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8004d54:	2301      	movs	r3, #1
 8004d56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004d5a:	2000      	movs	r0, #0
}
 8004d5c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004d5e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004d62:	f7ff fe85 	bl	8004a70 <HAL_TIM_Base_MspInit>
 8004d66:	e7ed      	b.n	8004d44 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004d68:	2001      	movs	r0, #1
}
 8004d6a:	4770      	bx	lr

08004d6c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004d6c:	4770      	bx	lr

08004d6e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d6e:	4770      	bx	lr

08004d70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d74:	4605      	mov	r5, r0
 8004d76:	460f      	mov	r7, r1
 8004d78:	4616      	mov	r6, r2
 8004d7a:	4699      	mov	r9, r3
 8004d7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d80:	682c      	ldr	r4, [r5, #0]
 8004d82:	69e4      	ldr	r4, [r4, #28]
 8004d84:	ea37 0304 	bics.w	r3, r7, r4
 8004d88:	bf0c      	ite	eq
 8004d8a:	2401      	moveq	r4, #1
 8004d8c:	2400      	movne	r4, #0
 8004d8e:	42b4      	cmp	r4, r6
 8004d90:	d11f      	bne.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004d92:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004d96:	d0f3      	beq.n	8004d80 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004d98:	f1b8 0f00 	cmp.w	r8, #0
 8004d9c:	d005      	beq.n	8004daa <UART_WaitOnFlagUntilTimeout+0x3a>
 8004d9e:	f7fc fa99 	bl	80012d4 <HAL_GetTick>
 8004da2:	eba0 0009 	sub.w	r0, r0, r9
 8004da6:	4540      	cmp	r0, r8
 8004da8:	d3ea      	bcc.n	8004d80 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004daa:	682a      	ldr	r2, [r5, #0]
 8004dac:	6813      	ldr	r3, [r2, #0]
 8004dae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004db2:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db4:	682a      	ldr	r2, [r5, #0]
 8004db6:	6893      	ldr	r3, [r2, #8]
 8004db8:	f023 0301 	bic.w	r3, r3, #1
 8004dbc:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004dbe:	2320      	movs	r3, #32
 8004dc0:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8004dc4:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8004dce:	2003      	movs	r0, #3
 8004dd0:	e000      	b.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0x64>
      }
    }
  }
  return HAL_OK;
 8004dd2:	2000      	movs	r0, #0
}
 8004dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004dd8 <HAL_UART_Transmit>:
{
 8004dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8004de0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	d152      	bne.n	8004e90 <HAL_UART_Transmit+0xb8>
 8004dea:	4604      	mov	r4, r0
 8004dec:	460d      	mov	r5, r1
 8004dee:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8004df0:	fab2 f382 	clz	r3, r2
 8004df4:	095b      	lsrs	r3, r3, #5
 8004df6:	2900      	cmp	r1, #0
 8004df8:	bf08      	it	eq
 8004dfa:	2301      	moveq	r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d14b      	bne.n	8004e98 <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8004e00:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d049      	beq.n	8004e9c <HAL_UART_Transmit+0xc4>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e12:	2321      	movs	r3, #33	; 0x21
 8004e14:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8004e18:	f7fc fa5c 	bl	80012d4 <HAL_GetTick>
 8004e1c:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8004e1e:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e22:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8004e26:	e003      	b.n	8004e30 <HAL_UART_Transmit+0x58>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8004e28:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	629a      	str	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8004e30:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	b1e3      	cbz	r3, 8004e72 <HAL_UART_Transmit+0x9a>
      huart->TxXferCount--;
 8004e38:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8004e3c:	b292      	uxth	r2, r2
 8004e3e:	3a01      	subs	r2, #1
 8004e40:	b292      	uxth	r2, r2
 8004e42:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e46:	9600      	str	r6, [sp, #0]
 8004e48:	463b      	mov	r3, r7
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2180      	movs	r1, #128	; 0x80
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f7ff ff8e 	bl	8004d70 <UART_WaitOnFlagUntilTimeout>
 8004e54:	bb20      	cbnz	r0, 8004ea0 <HAL_UART_Transmit+0xc8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e56:	68a3      	ldr	r3, [r4, #8]
 8004e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5c:	d1e4      	bne.n	8004e28 <HAL_UART_Transmit+0x50>
 8004e5e:	6923      	ldr	r3, [r4, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1e1      	bne.n	8004e28 <HAL_UART_Transmit+0x50>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004e64:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004e68:	6822      	ldr	r2, [r4, #0]
 8004e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6e:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 8004e70:	e7de      	b.n	8004e30 <HAL_UART_Transmit+0x58>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e72:	9600      	str	r6, [sp, #0]
 8004e74:	463b      	mov	r3, r7
 8004e76:	2200      	movs	r2, #0
 8004e78:	2140      	movs	r1, #64	; 0x40
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	f7ff ff78 	bl	8004d70 <UART_WaitOnFlagUntilTimeout>
 8004e80:	b980      	cbnz	r0, 8004ea4 <HAL_UART_Transmit+0xcc>
    huart->gState = HAL_UART_STATE_READY;
 8004e82:	2320      	movs	r3, #32
 8004e84:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    return HAL_OK;
 8004e8e:	e000      	b.n	8004e92 <HAL_UART_Transmit+0xba>
    return HAL_BUSY;
 8004e90:	2002      	movs	r0, #2
}
 8004e92:	b002      	add	sp, #8
 8004e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004e98:	2001      	movs	r0, #1
 8004e9a:	e7fa      	b.n	8004e92 <HAL_UART_Transmit+0xba>
    __HAL_LOCK(huart);
 8004e9c:	2002      	movs	r0, #2
 8004e9e:	e7f8      	b.n	8004e92 <HAL_UART_Transmit+0xba>
        return HAL_TIMEOUT;
 8004ea0:	2003      	movs	r0, #3
 8004ea2:	e7f6      	b.n	8004e92 <HAL_UART_Transmit+0xba>
      return HAL_TIMEOUT;
 8004ea4:	2003      	movs	r0, #3
 8004ea6:	e7f4      	b.n	8004e92 <HAL_UART_Transmit+0xba>

08004ea8 <HAL_UART_Receive>:
{
 8004ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8004eb0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b20      	cmp	r3, #32
 8004eb8:	d176      	bne.n	8004fa8 <HAL_UART_Receive+0x100>
 8004eba:	4604      	mov	r4, r0
 8004ebc:	460d      	mov	r5, r1
 8004ebe:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8004ec0:	fab2 f382 	clz	r3, r2
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	2900      	cmp	r1, #0
 8004ec8:	bf08      	it	eq
 8004eca:	2301      	moveq	r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d16f      	bne.n	8004fb0 <HAL_UART_Receive+0x108>
    __HAL_LOCK(huart);
 8004ed0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d06d      	beq.n	8004fb4 <HAL_UART_Receive+0x10c>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ee2:	2322      	movs	r3, #34	; 0x22
 8004ee4:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 8004ee8:	f7fc f9f4 	bl	80012d4 <HAL_GetTick>
 8004eec:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8004eee:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8004ef2:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8004ef6:	68a3      	ldr	r3, [r4, #8]
 8004ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004efc:	d006      	beq.n	8004f0c <HAL_UART_Receive+0x64>
 8004efe:	b9a3      	cbnz	r3, 8004f2a <HAL_UART_Receive+0x82>
 8004f00:	6923      	ldr	r3, [r4, #16]
 8004f02:	b973      	cbnz	r3, 8004f22 <HAL_UART_Receive+0x7a>
 8004f04:	23ff      	movs	r3, #255	; 0xff
 8004f06:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8004f0a:	e011      	b.n	8004f30 <HAL_UART_Receive+0x88>
 8004f0c:	6923      	ldr	r3, [r4, #16]
 8004f0e:	b923      	cbnz	r3, 8004f1a <HAL_UART_Receive+0x72>
 8004f10:	f240 13ff 	movw	r3, #511	; 0x1ff
 8004f14:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8004f18:	e00a      	b.n	8004f30 <HAL_UART_Receive+0x88>
 8004f1a:	23ff      	movs	r3, #255	; 0xff
 8004f1c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8004f20:	e006      	b.n	8004f30 <HAL_UART_Receive+0x88>
 8004f22:	237f      	movs	r3, #127	; 0x7f
 8004f24:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8004f28:	e002      	b.n	8004f30 <HAL_UART_Receive+0x88>
 8004f2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f2e:	d002      	beq.n	8004f36 <HAL_UART_Receive+0x8e>
    uhMask = huart->Mask;
 8004f30:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 8004f34:	e010      	b.n	8004f58 <HAL_UART_Receive+0xb0>
    UART_MASK_COMPUTATION(huart);
 8004f36:	6923      	ldr	r3, [r4, #16]
 8004f38:	b91b      	cbnz	r3, 8004f42 <HAL_UART_Receive+0x9a>
 8004f3a:	237f      	movs	r3, #127	; 0x7f
 8004f3c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8004f40:	e7f6      	b.n	8004f30 <HAL_UART_Receive+0x88>
 8004f42:	233f      	movs	r3, #63	; 0x3f
 8004f44:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8004f48:	e7f2      	b.n	8004f30 <HAL_UART_Receive+0x88>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f4e:	fa5f f388 	uxtb.w	r3, r8
 8004f52:	4013      	ands	r3, r2
 8004f54:	f805 3b01 	strb.w	r3, [r5], #1
    while(huart->RxXferCount > 0U)
 8004f58:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	b1e3      	cbz	r3, 8004f9a <HAL_UART_Receive+0xf2>
      huart->RxXferCount--;
 8004f60:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8004f64:	b292      	uxth	r2, r2
 8004f66:	3a01      	subs	r2, #1
 8004f68:	b292      	uxth	r2, r2
 8004f6a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f6e:	9600      	str	r6, [sp, #0]
 8004f70:	463b      	mov	r3, r7
 8004f72:	2200      	movs	r2, #0
 8004f74:	2120      	movs	r1, #32
 8004f76:	4620      	mov	r0, r4
 8004f78:	f7ff fefa 	bl	8004d70 <UART_WaitOnFlagUntilTimeout>
 8004f7c:	b9e0      	cbnz	r0, 8004fb8 <HAL_UART_Receive+0x110>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f7e:	68a3      	ldr	r3, [r4, #8]
 8004f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f84:	d1e1      	bne.n	8004f4a <HAL_UART_Receive+0xa2>
 8004f86:	6923      	ldr	r3, [r4, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1de      	bne.n	8004f4a <HAL_UART_Receive+0xa2>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	ea08 0303 	and.w	r3, r8, r3
 8004f94:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8004f98:	e7de      	b.n	8004f58 <HAL_UART_Receive+0xb0>
    huart->RxState = HAL_UART_STATE_READY;
 8004f9a:	2320      	movs	r3, #32
 8004f9c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8004fa6:	e000      	b.n	8004faa <HAL_UART_Receive+0x102>
    return HAL_BUSY;
 8004fa8:	2002      	movs	r0, #2
}
 8004faa:	b002      	add	sp, #8
 8004fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004fb0:	2001      	movs	r0, #1
 8004fb2:	e7fa      	b.n	8004faa <HAL_UART_Receive+0x102>
    __HAL_LOCK(huart);
 8004fb4:	2002      	movs	r0, #2
 8004fb6:	e7f8      	b.n	8004faa <HAL_UART_Receive+0x102>
        return HAL_TIMEOUT;
 8004fb8:	2003      	movs	r0, #3
 8004fba:	e7f6      	b.n	8004faa <HAL_UART_Receive+0x102>

08004fbc <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fc0:	6883      	ldr	r3, [r0, #8]
 8004fc2:	6902      	ldr	r2, [r0, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	6942      	ldr	r2, [r0, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	69c2      	ldr	r2, [r0, #28]
 8004fcc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004fce:	6801      	ldr	r1, [r0, #0]
 8004fd0:	6808      	ldr	r0, [r1, #0]
 8004fd2:	4aa0      	ldr	r2, [pc, #640]	; (8005254 <UART_SetConfig+0x298>)
 8004fd4:	4002      	ands	r2, r0
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fda:	6822      	ldr	r2, [r4, #0]
 8004fdc:	6853      	ldr	r3, [r2, #4]
 8004fde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004fe2:	68e1      	ldr	r1, [r4, #12]
 8004fe4:	430b      	orrs	r3, r1
 8004fe6:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004fe8:	69a3      	ldr	r3, [r4, #24]
 8004fea:	6a22      	ldr	r2, [r4, #32]
 8004fec:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004fee:	6821      	ldr	r1, [r4, #0]
 8004ff0:	688b      	ldr	r3, [r1, #8]
 8004ff2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	4a96      	ldr	r2, [pc, #600]	; (8005258 <UART_SetConfig+0x29c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d019      	beq.n	8005036 <UART_SetConfig+0x7a>
 8005002:	4a96      	ldr	r2, [pc, #600]	; (800525c <UART_SetConfig+0x2a0>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d02a      	beq.n	800505e <UART_SetConfig+0xa2>
 8005008:	4a95      	ldr	r2, [pc, #596]	; (8005260 <UART_SetConfig+0x2a4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d040      	beq.n	8005090 <UART_SetConfig+0xd4>
 800500e:	4a95      	ldr	r2, [pc, #596]	; (8005264 <UART_SetConfig+0x2a8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d065      	beq.n	80050e0 <UART_SetConfig+0x124>
 8005014:	4a94      	ldr	r2, [pc, #592]	; (8005268 <UART_SetConfig+0x2ac>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d075      	beq.n	8005106 <UART_SetConfig+0x14a>
 800501a:	4a94      	ldr	r2, [pc, #592]	; (800526c <UART_SetConfig+0x2b0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	f000 8088 	beq.w	8005132 <UART_SetConfig+0x176>
 8005022:	4a93      	ldr	r2, [pc, #588]	; (8005270 <UART_SetConfig+0x2b4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	f000 809a 	beq.w	800515e <UART_SetConfig+0x1a2>
 800502a:	4a92      	ldr	r2, [pc, #584]	; (8005274 <UART_SetConfig+0x2b8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	f000 80ac 	beq.w	800518a <UART_SetConfig+0x1ce>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005032:	2510      	movs	r5, #16
 8005034:	e03d      	b.n	80050b2 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005036:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800503a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800503e:	f002 0203 	and.w	r2, r2, #3
 8005042:	2a03      	cmp	r2, #3
 8005044:	d803      	bhi.n	800504e <UART_SetConfig+0x92>
 8005046:	e8df f002 	tbb	[pc, r2]
 800504a:	06b5      	.short	0x06b5
 800504c:	0804      	.short	0x0804
 800504e:	2510      	movs	r5, #16
 8005050:	e02f      	b.n	80050b2 <UART_SetConfig+0xf6>
 8005052:	2502      	movs	r5, #2
 8005054:	e02d      	b.n	80050b2 <UART_SetConfig+0xf6>
 8005056:	2504      	movs	r5, #4
 8005058:	e02b      	b.n	80050b2 <UART_SetConfig+0xf6>
 800505a:	2508      	movs	r5, #8
 800505c:	e029      	b.n	80050b2 <UART_SetConfig+0xf6>
 800505e:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8005062:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8005066:	f002 020c 	and.w	r2, r2, #12
 800506a:	2a0c      	cmp	r2, #12
 800506c:	d808      	bhi.n	8005080 <UART_SetConfig+0xc4>
 800506e:	e8df f002 	tbb	[pc, r2]
 8005072:	07a3      	.short	0x07a3
 8005074:	070b0707 	.word	0x070b0707
 8005078:	07090707 	.word	0x07090707
 800507c:	0707      	.short	0x0707
 800507e:	0d          	.byte	0x0d
 800507f:	00          	.byte	0x00
 8005080:	2510      	movs	r5, #16
 8005082:	e016      	b.n	80050b2 <UART_SetConfig+0xf6>
 8005084:	2502      	movs	r5, #2
 8005086:	e014      	b.n	80050b2 <UART_SetConfig+0xf6>
 8005088:	2504      	movs	r5, #4
 800508a:	e012      	b.n	80050b2 <UART_SetConfig+0xf6>
 800508c:	2508      	movs	r5, #8
 800508e:	e010      	b.n	80050b2 <UART_SetConfig+0xf6>
 8005090:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8005094:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8005098:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800509c:	2a20      	cmp	r2, #32
 800509e:	f000 808d 	beq.w	80051bc <UART_SetConfig+0x200>
 80050a2:	d819      	bhi.n	80050d8 <UART_SetConfig+0x11c>
 80050a4:	2a00      	cmp	r2, #0
 80050a6:	f000 808b 	beq.w	80051c0 <UART_SetConfig+0x204>
 80050aa:	2a10      	cmp	r2, #16
 80050ac:	f040 808a 	bne.w	80051c4 <UART_SetConfig+0x208>
 80050b0:	2504      	movs	r5, #4

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b2:	69e2      	ldr	r2, [r4, #28]
 80050b4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80050b8:	f000 80b0 	beq.w	800521c <UART_SetConfig+0x260>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 80050bc:	2d08      	cmp	r5, #8
 80050be:	f200 813d 	bhi.w	800533c <UART_SetConfig+0x380>
 80050c2:	e8df f015 	tbh	[pc, r5, lsl #1]
 80050c6:	0104      	.short	0x0104
 80050c8:	011b010f 	.word	0x011b010f
 80050cc:	0125013b 	.word	0x0125013b
 80050d0:	013b013b 	.word	0x013b013b
 80050d4:	0131013b 	.word	0x0131013b
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050d8:	2a30      	cmp	r2, #48	; 0x30
 80050da:	d175      	bne.n	80051c8 <UART_SetConfig+0x20c>
 80050dc:	2508      	movs	r5, #8
 80050de:	e7e8      	b.n	80050b2 <UART_SetConfig+0xf6>
 80050e0:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 80050e4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80050e8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80050ec:	2a80      	cmp	r2, #128	; 0x80
 80050ee:	d06d      	beq.n	80051cc <UART_SetConfig+0x210>
 80050f0:	d805      	bhi.n	80050fe <UART_SetConfig+0x142>
 80050f2:	2a00      	cmp	r2, #0
 80050f4:	d06c      	beq.n	80051d0 <UART_SetConfig+0x214>
 80050f6:	2a40      	cmp	r2, #64	; 0x40
 80050f8:	d16c      	bne.n	80051d4 <UART_SetConfig+0x218>
 80050fa:	2504      	movs	r5, #4
 80050fc:	e7d9      	b.n	80050b2 <UART_SetConfig+0xf6>
 80050fe:	2ac0      	cmp	r2, #192	; 0xc0
 8005100:	d16a      	bne.n	80051d8 <UART_SetConfig+0x21c>
 8005102:	2508      	movs	r5, #8
 8005104:	e7d5      	b.n	80050b2 <UART_SetConfig+0xf6>
 8005106:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 800510a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800510e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005112:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005116:	d061      	beq.n	80051dc <UART_SetConfig+0x220>
 8005118:	d806      	bhi.n	8005128 <UART_SetConfig+0x16c>
 800511a:	2a00      	cmp	r2, #0
 800511c:	d060      	beq.n	80051e0 <UART_SetConfig+0x224>
 800511e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005122:	d15f      	bne.n	80051e4 <UART_SetConfig+0x228>
 8005124:	2504      	movs	r5, #4
 8005126:	e7c4      	b.n	80050b2 <UART_SetConfig+0xf6>
 8005128:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800512c:	d15c      	bne.n	80051e8 <UART_SetConfig+0x22c>
 800512e:	2508      	movs	r5, #8
 8005130:	e7bf      	b.n	80050b2 <UART_SetConfig+0xf6>
 8005132:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8005136:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800513a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800513e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005142:	d053      	beq.n	80051ec <UART_SetConfig+0x230>
 8005144:	d806      	bhi.n	8005154 <UART_SetConfig+0x198>
 8005146:	2a00      	cmp	r2, #0
 8005148:	d052      	beq.n	80051f0 <UART_SetConfig+0x234>
 800514a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800514e:	d151      	bne.n	80051f4 <UART_SetConfig+0x238>
 8005150:	2504      	movs	r5, #4
 8005152:	e7ae      	b.n	80050b2 <UART_SetConfig+0xf6>
 8005154:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8005158:	d14e      	bne.n	80051f8 <UART_SetConfig+0x23c>
 800515a:	2508      	movs	r5, #8
 800515c:	e7a9      	b.n	80050b2 <UART_SetConfig+0xf6>
 800515e:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8005162:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8005166:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800516a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800516e:	d045      	beq.n	80051fc <UART_SetConfig+0x240>
 8005170:	d806      	bhi.n	8005180 <UART_SetConfig+0x1c4>
 8005172:	2a00      	cmp	r2, #0
 8005174:	d044      	beq.n	8005200 <UART_SetConfig+0x244>
 8005176:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800517a:	d143      	bne.n	8005204 <UART_SetConfig+0x248>
 800517c:	2504      	movs	r5, #4
 800517e:	e798      	b.n	80050b2 <UART_SetConfig+0xf6>
 8005180:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8005184:	d140      	bne.n	8005208 <UART_SetConfig+0x24c>
 8005186:	2508      	movs	r5, #8
 8005188:	e793      	b.n	80050b2 <UART_SetConfig+0xf6>
 800518a:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 800518e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8005192:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8005196:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800519a:	d037      	beq.n	800520c <UART_SetConfig+0x250>
 800519c:	d805      	bhi.n	80051aa <UART_SetConfig+0x1ee>
 800519e:	b3ba      	cbz	r2, 8005210 <UART_SetConfig+0x254>
 80051a0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80051a4:	d136      	bne.n	8005214 <UART_SetConfig+0x258>
 80051a6:	2504      	movs	r5, #4
 80051a8:	e783      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051aa:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 80051ae:	d133      	bne.n	8005218 <UART_SetConfig+0x25c>
 80051b0:	2508      	movs	r5, #8
 80051b2:	e77e      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051b4:	2501      	movs	r5, #1
 80051b6:	e77c      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051b8:	2500      	movs	r5, #0
 80051ba:	e77a      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051bc:	2502      	movs	r5, #2
 80051be:	e778      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051c0:	2500      	movs	r5, #0
 80051c2:	e776      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051c4:	2510      	movs	r5, #16
 80051c6:	e774      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051c8:	2510      	movs	r5, #16
 80051ca:	e772      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051cc:	2502      	movs	r5, #2
 80051ce:	e770      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051d0:	2500      	movs	r5, #0
 80051d2:	e76e      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051d4:	2510      	movs	r5, #16
 80051d6:	e76c      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051d8:	2510      	movs	r5, #16
 80051da:	e76a      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051dc:	2502      	movs	r5, #2
 80051de:	e768      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051e0:	2500      	movs	r5, #0
 80051e2:	e766      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051e4:	2510      	movs	r5, #16
 80051e6:	e764      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051e8:	2510      	movs	r5, #16
 80051ea:	e762      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051ec:	2502      	movs	r5, #2
 80051ee:	e760      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051f0:	2501      	movs	r5, #1
 80051f2:	e75e      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051f4:	2510      	movs	r5, #16
 80051f6:	e75c      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051f8:	2510      	movs	r5, #16
 80051fa:	e75a      	b.n	80050b2 <UART_SetConfig+0xf6>
 80051fc:	2502      	movs	r5, #2
 80051fe:	e758      	b.n	80050b2 <UART_SetConfig+0xf6>
 8005200:	2500      	movs	r5, #0
 8005202:	e756      	b.n	80050b2 <UART_SetConfig+0xf6>
 8005204:	2510      	movs	r5, #16
 8005206:	e754      	b.n	80050b2 <UART_SetConfig+0xf6>
 8005208:	2510      	movs	r5, #16
 800520a:	e752      	b.n	80050b2 <UART_SetConfig+0xf6>
 800520c:	2502      	movs	r5, #2
 800520e:	e750      	b.n	80050b2 <UART_SetConfig+0xf6>
 8005210:	2500      	movs	r5, #0
 8005212:	e74e      	b.n	80050b2 <UART_SetConfig+0xf6>
 8005214:	2510      	movs	r5, #16
 8005216:	e74c      	b.n	80050b2 <UART_SetConfig+0xf6>
 8005218:	2510      	movs	r5, #16
 800521a:	e74a      	b.n	80050b2 <UART_SetConfig+0xf6>
    switch (clocksource)
 800521c:	2d08      	cmp	r5, #8
 800521e:	d853      	bhi.n	80052c8 <UART_SetConfig+0x30c>
 8005220:	e8df f005 	tbb	[pc, r5]
 8005224:	52352a05 	.word	0x52352a05
 8005228:	5252523e 	.word	0x5252523e
 800522c:	49          	.byte	0x49
 800522d:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800522e:	f7fe fb5f 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 8005232:	6862      	ldr	r2, [r4, #4]
 8005234:	0853      	lsrs	r3, r2, #1
 8005236:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800523a:	fbb3 f3f2 	udiv	r3, r3, r2
 800523e:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8005240:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005244:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005248:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 800524a:	6822      	ldr	r2, [r4, #0]
 800524c:	60d3      	str	r3, [r2, #12]
    }
  }

  return ret;

}
 800524e:	4628      	mov	r0, r5
 8005250:	bd38      	pop	{r3, r4, r5, pc}
 8005252:	bf00      	nop
 8005254:	efff69f3 	.word	0xefff69f3
 8005258:	40011000 	.word	0x40011000
 800525c:	40004400 	.word	0x40004400
 8005260:	40004800 	.word	0x40004800
 8005264:	40004c00 	.word	0x40004c00
 8005268:	40005000 	.word	0x40005000
 800526c:	40011400 	.word	0x40011400
 8005270:	40007800 	.word	0x40007800
 8005274:	40007c00 	.word	0x40007c00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005278:	f7fe fb50 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 800527c:	6862      	ldr	r2, [r4, #4]
 800527e:	0853      	lsrs	r3, r2, #1
 8005280:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005284:	fbb3 f3f2 	udiv	r3, r3, r2
 8005288:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800528a:	2500      	movs	r5, #0
      break;
 800528c:	e7d8      	b.n	8005240 <UART_SetConfig+0x284>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800528e:	6862      	ldr	r2, [r4, #4]
 8005290:	4b2b      	ldr	r3, [pc, #172]	; (8005340 <UART_SetConfig+0x384>)
 8005292:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005296:	fbb3 f3f2 	udiv	r3, r3, r2
 800529a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800529c:	2500      	movs	r5, #0
      break;
 800529e:	e7cf      	b.n	8005240 <UART_SetConfig+0x284>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80052a0:	f7fe fa12 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 80052a4:	6862      	ldr	r2, [r4, #4]
 80052a6:	0853      	lsrs	r3, r2, #1
 80052a8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80052ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80052b0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80052b2:	2500      	movs	r5, #0
      break;
 80052b4:	e7c4      	b.n	8005240 <UART_SetConfig+0x284>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80052b6:	6862      	ldr	r2, [r4, #4]
 80052b8:	0853      	lsrs	r3, r2, #1
 80052ba:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80052be:	fbb3 f3f2 	udiv	r3, r3, r2
 80052c2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80052c4:	2500      	movs	r5, #0
      break;
 80052c6:	e7bb      	b.n	8005240 <UART_SetConfig+0x284>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052c8:	2501      	movs	r5, #1
 80052ca:	2300      	movs	r3, #0
 80052cc:	e7b8      	b.n	8005240 <UART_SetConfig+0x284>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80052ce:	f7fe fb0f 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 80052d2:	6862      	ldr	r2, [r4, #4]
 80052d4:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80052d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80052dc:	6822      	ldr	r2, [r4, #0]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	60d3      	str	r3, [r2, #12]
      break;
 80052e2:	e7b4      	b.n	800524e <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80052e4:	f7fe fb1a 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 80052e8:	6862      	ldr	r2, [r4, #4]
 80052ea:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80052ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80052f2:	6822      	ldr	r2, [r4, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80052f8:	2500      	movs	r5, #0
      break;
 80052fa:	e7a8      	b.n	800524e <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80052fc:	6861      	ldr	r1, [r4, #4]
 80052fe:	4a11      	ldr	r2, [pc, #68]	; (8005344 <UART_SetConfig+0x388>)
 8005300:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8005304:	fbb2 f2f1 	udiv	r2, r2, r1
 8005308:	b292      	uxth	r2, r2
 800530a:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800530c:	2500      	movs	r5, #0
      break;
 800530e:	e79e      	b.n	800524e <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005310:	f7fe f9da 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 8005314:	6862      	ldr	r2, [r4, #4]
 8005316:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800531a:	fbb3 f3f2 	udiv	r3, r3, r2
 800531e:	6822      	ldr	r2, [r4, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005324:	2500      	movs	r5, #0
      break;
 8005326:	e792      	b.n	800524e <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005328:	6861      	ldr	r1, [r4, #4]
 800532a:	084a      	lsrs	r2, r1, #1
 800532c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8005330:	fbb2 f2f1 	udiv	r2, r2, r1
 8005334:	b292      	uxth	r2, r2
 8005336:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005338:	2500      	movs	r5, #0
      break;
 800533a:	e788      	b.n	800524e <UART_SetConfig+0x292>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800533c:	2501      	movs	r5, #1
 800533e:	e786      	b.n	800524e <UART_SetConfig+0x292>
 8005340:	01e84800 	.word	0x01e84800
 8005344:	00f42400 	.word	0x00f42400

08005348 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005348:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800534a:	f013 0f01 	tst.w	r3, #1
 800534e:	d006      	beq.n	800535e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005350:	6802      	ldr	r2, [r0, #0]
 8005352:	6853      	ldr	r3, [r2, #4]
 8005354:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005358:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800535a:	430b      	orrs	r3, r1
 800535c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800535e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005360:	f013 0f02 	tst.w	r3, #2
 8005364:	d006      	beq.n	8005374 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005366:	6802      	ldr	r2, [r0, #0]
 8005368:	6853      	ldr	r3, [r2, #4]
 800536a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800536e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005370:	430b      	orrs	r3, r1
 8005372:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005374:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005376:	f013 0f04 	tst.w	r3, #4
 800537a:	d006      	beq.n	800538a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800537c:	6802      	ldr	r2, [r0, #0]
 800537e:	6853      	ldr	r3, [r2, #4]
 8005380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005384:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005386:	430b      	orrs	r3, r1
 8005388:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800538a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800538c:	f013 0f08 	tst.w	r3, #8
 8005390:	d006      	beq.n	80053a0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005392:	6802      	ldr	r2, [r0, #0]
 8005394:	6853      	ldr	r3, [r2, #4]
 8005396:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800539a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800539c:	430b      	orrs	r3, r1
 800539e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80053a2:	f013 0f10 	tst.w	r3, #16
 80053a6:	d006      	beq.n	80053b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053a8:	6802      	ldr	r2, [r0, #0]
 80053aa:	6893      	ldr	r3, [r2, #8]
 80053ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053b0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80053b2:	430b      	orrs	r3, r1
 80053b4:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80053b8:	f013 0f20 	tst.w	r3, #32
 80053bc:	d006      	beq.n	80053cc <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053be:	6802      	ldr	r2, [r0, #0]
 80053c0:	6893      	ldr	r3, [r2, #8]
 80053c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053c6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80053c8:	430b      	orrs	r3, r1
 80053ca:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80053ce:	f013 0f40 	tst.w	r3, #64	; 0x40
 80053d2:	d00a      	beq.n	80053ea <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053d4:	6802      	ldr	r2, [r0, #0]
 80053d6:	6853      	ldr	r3, [r2, #4]
 80053d8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80053dc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80053de:	430b      	orrs	r3, r1
 80053e0:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80053e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053e8:	d00b      	beq.n	8005402 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80053ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80053f0:	d006      	beq.n	8005400 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053f2:	6802      	ldr	r2, [r0, #0]
 80053f4:	6853      	ldr	r3, [r2, #4]
 80053f6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80053fa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80053fc:	430b      	orrs	r3, r1
 80053fe:	6053      	str	r3, [r2, #4]
  }
}
 8005400:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005402:	6802      	ldr	r2, [r0, #0]
 8005404:	6853      	ldr	r3, [r2, #4]
 8005406:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800540a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800540c:	430b      	orrs	r3, r1
 800540e:	6053      	str	r3, [r2, #4]
 8005410:	e7eb      	b.n	80053ea <UART_AdvFeatureConfig+0xa2>

08005412 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005412:	b510      	push	{r4, lr}
 8005414:	b082      	sub	sp, #8
 8005416:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005418:	2300      	movs	r3, #0
 800541a:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800541c:	f7fb ff5a 	bl	80012d4 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f013 0f08 	tst.w	r3, #8
 8005428:	d109      	bne.n	800543e <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800542a:	2320      	movs	r3, #32
 800542c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8005430:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005434:	2000      	movs	r0, #0
 8005436:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return HAL_OK;
}
 800543a:	b002      	add	sp, #8
 800543c:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800543e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	4603      	mov	r3, r0
 8005446:	2200      	movs	r2, #0
 8005448:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800544c:	4620      	mov	r0, r4
 800544e:	f7ff fc8f 	bl	8004d70 <UART_WaitOnFlagUntilTimeout>
 8005452:	2800      	cmp	r0, #0
 8005454:	d0e9      	beq.n	800542a <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8005456:	2003      	movs	r0, #3
 8005458:	e7ef      	b.n	800543a <UART_CheckIdleState+0x28>

0800545a <HAL_UART_Init>:
  if(huart == NULL)
 800545a:	b378      	cbz	r0, 80054bc <HAL_UART_Init+0x62>
{
 800545c:	b510      	push	{r4, lr}
 800545e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8005460:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8005464:	b30b      	cbz	r3, 80054aa <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005466:	2324      	movs	r3, #36	; 0x24
 8005468:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800546c:	6822      	ldr	r2, [r4, #0]
 800546e:	6813      	ldr	r3, [r2, #0]
 8005470:	f023 0301 	bic.w	r3, r3, #1
 8005474:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005476:	4620      	mov	r0, r4
 8005478:	f7ff fda0 	bl	8004fbc <UART_SetConfig>
 800547c:	2801      	cmp	r0, #1
 800547e:	d013      	beq.n	80054a8 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005482:	b9bb      	cbnz	r3, 80054b4 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005484:	6822      	ldr	r2, [r4, #0]
 8005486:	6853      	ldr	r3, [r2, #4]
 8005488:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800548c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800548e:	6822      	ldr	r2, [r4, #0]
 8005490:	6893      	ldr	r3, [r2, #8]
 8005492:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005496:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005498:	6822      	ldr	r2, [r4, #0]
 800549a:	6813      	ldr	r3, [r2, #0]
 800549c:	f043 0301 	orr.w	r3, r3, #1
 80054a0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80054a2:	4620      	mov	r0, r4
 80054a4:	f7ff ffb5 	bl	8005412 <UART_CheckIdleState>
}
 80054a8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80054aa:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80054ae:	f001 ff3d 	bl	800732c <HAL_UART_MspInit>
 80054b2:	e7d8      	b.n	8005466 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80054b4:	4620      	mov	r0, r4
 80054b6:	f7ff ff47 	bl	8005348 <UART_AdvFeatureConfig>
 80054ba:	e7e3      	b.n	8005484 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80054bc:	2001      	movs	r0, #1
}
 80054be:	4770      	bx	lr

080054c0 <USB_SetTurnaroundTime>:

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80054c0:	2a02      	cmp	r2, #2
 80054c2:	d00a      	beq.n	80054da <USB_SetTurnaroundTime+0x1a>
      UsbTrd = 0x6U;
    }
  }
  else if (speed == USBD_HS_SPEED)
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80054c4:	2109      	movs	r1, #9
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80054c6:	68c2      	ldr	r2, [r0, #12]
 80054c8:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 80054cc:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80054ce:	68c3      	ldr	r3, [r0, #12]
 80054d0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80054d4:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 80054d6:	2000      	movs	r0, #0
 80054d8:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80054da:	4b20      	ldr	r3, [pc, #128]	; (800555c <USB_SetTurnaroundTime+0x9c>)
 80054dc:	440b      	add	r3, r1
 80054de:	4a20      	ldr	r2, [pc, #128]	; (8005560 <USB_SetTurnaroundTime+0xa0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d929      	bls.n	8005538 <USB_SetTurnaroundTime+0x78>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80054e4:	4b1f      	ldr	r3, [pc, #124]	; (8005564 <USB_SetTurnaroundTime+0xa4>)
 80054e6:	440b      	add	r3, r1
 80054e8:	4a1f      	ldr	r2, [pc, #124]	; (8005568 <USB_SetTurnaroundTime+0xa8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d926      	bls.n	800553c <USB_SetTurnaroundTime+0x7c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80054ee:	4b1f      	ldr	r3, [pc, #124]	; (800556c <USB_SetTurnaroundTime+0xac>)
 80054f0:	440b      	add	r3, r1
 80054f2:	4a1f      	ldr	r2, [pc, #124]	; (8005570 <USB_SetTurnaroundTime+0xb0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d923      	bls.n	8005540 <USB_SetTurnaroundTime+0x80>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054f8:	4b1e      	ldr	r3, [pc, #120]	; (8005574 <USB_SetTurnaroundTime+0xb4>)
 80054fa:	440b      	add	r3, r1
 80054fc:	4a1e      	ldr	r2, [pc, #120]	; (8005578 <USB_SetTurnaroundTime+0xb8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d320      	bcc.n	8005544 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005502:	4b1e      	ldr	r3, [pc, #120]	; (800557c <USB_SetTurnaroundTime+0xbc>)
 8005504:	440b      	add	r3, r1
 8005506:	4a1e      	ldr	r2, [pc, #120]	; (8005580 <USB_SetTurnaroundTime+0xc0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d91d      	bls.n	8005548 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800550c:	4b1d      	ldr	r3, [pc, #116]	; (8005584 <USB_SetTurnaroundTime+0xc4>)
 800550e:	440b      	add	r3, r1
 8005510:	4a1d      	ldr	r2, [pc, #116]	; (8005588 <USB_SetTurnaroundTime+0xc8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d31a      	bcc.n	800554c <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005516:	4b1d      	ldr	r3, [pc, #116]	; (800558c <USB_SetTurnaroundTime+0xcc>)
 8005518:	440b      	add	r3, r1
 800551a:	4a1d      	ldr	r2, [pc, #116]	; (8005590 <USB_SetTurnaroundTime+0xd0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d317      	bcc.n	8005550 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005520:	4b1c      	ldr	r3, [pc, #112]	; (8005594 <USB_SetTurnaroundTime+0xd4>)
 8005522:	440b      	add	r3, r1
 8005524:	4a1c      	ldr	r2, [pc, #112]	; (8005598 <USB_SetTurnaroundTime+0xd8>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d314      	bcc.n	8005554 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800552a:	4b1c      	ldr	r3, [pc, #112]	; (800559c <USB_SetTurnaroundTime+0xdc>)
 800552c:	440b      	add	r3, r1
 800552e:	4a1c      	ldr	r2, [pc, #112]	; (80055a0 <USB_SetTurnaroundTime+0xe0>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d211      	bcs.n	8005558 <USB_SetTurnaroundTime+0x98>
      UsbTrd = 0x7U;
 8005534:	2107      	movs	r1, #7
 8005536:	e7c6      	b.n	80054c6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8005538:	210f      	movs	r1, #15
 800553a:	e7c4      	b.n	80054c6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 800553c:	210e      	movs	r1, #14
 800553e:	e7c2      	b.n	80054c6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8005540:	210d      	movs	r1, #13
 8005542:	e7c0      	b.n	80054c6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8005544:	210c      	movs	r1, #12
 8005546:	e7be      	b.n	80054c6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8005548:	210b      	movs	r1, #11
 800554a:	e7bc      	b.n	80054c6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 800554c:	210a      	movs	r1, #10
 800554e:	e7ba      	b.n	80054c6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8005550:	2109      	movs	r1, #9
 8005552:	e7b8      	b.n	80054c6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8005554:	2108      	movs	r1, #8
 8005556:	e7b6      	b.n	80054c6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8005558:	2106      	movs	r1, #6
 800555a:	e7b4      	b.n	80054c6 <USB_SetTurnaroundTime+0x6>
 800555c:	ff275340 	.word	0xff275340
 8005560:	000c34ff 	.word	0x000c34ff
 8005564:	ff1b1e40 	.word	0xff1b1e40
 8005568:	000f423f 	.word	0x000f423f
 800556c:	ff0bdc00 	.word	0xff0bdc00
 8005570:	00124f7f 	.word	0x00124f7f
 8005574:	fef98c80 	.word	0xfef98c80
 8005578:	0013d620 	.word	0x0013d620
 800557c:	fee5b660 	.word	0xfee5b660
 8005580:	0016e35f 	.word	0x0016e35f
 8005584:	feced300 	.word	0xfeced300
 8005588:	001b7740 	.word	0x001b7740
 800558c:	feb35bc0 	.word	0xfeb35bc0
 8005590:	002191c0 	.word	0x002191c0
 8005594:	fe91ca00 	.word	0xfe91ca00
 8005598:	00387520 	.word	0x00387520
 800559c:	fe5954e0 	.word	0xfe5954e0
 80055a0:	00419ce0 	.word	0x00419ce0

080055a4 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055a4:	0189      	lsls	r1, r1, #6
 80055a6:	f041 0120 	orr.w	r1, r1, #32
 80055aa:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 80055ac:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 80055ae:	3301      	adds	r3, #1
 80055b0:	4a05      	ldr	r2, [pc, #20]	; (80055c8 <USB_FlushTxFifo+0x24>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d805      	bhi.n	80055c2 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055b6:	6902      	ldr	r2, [r0, #16]
 80055b8:	f012 0f20 	tst.w	r2, #32
 80055bc:	d1f7      	bne.n	80055ae <USB_FlushTxFifo+0xa>

  return HAL_OK;
 80055be:	2000      	movs	r0, #0
 80055c0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80055c2:	2003      	movs	r0, #3
}
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	00030d40 	.word	0x00030d40

080055cc <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80055cc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80055d0:	f013 0306 	ands.w	r3, r3, #6
 80055d4:	d005      	beq.n	80055e2 <USB_GetDevSpeed+0x16>
  {
    speed = USBD_HS_SPEED;
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80055d6:	2b06      	cmp	r3, #6
 80055d8:	bf18      	it	ne
 80055da:	2b02      	cmpne	r3, #2
 80055dc:	d103      	bne.n	80055e6 <USB_GetDevSpeed+0x1a>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80055de:	2002      	movs	r0, #2
 80055e0:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 80055e2:	2000      	movs	r0, #0
 80055e4:	4770      	bx	lr
  }
  else
  {
    speed = 0xFU;
 80055e6:	200f      	movs	r0, #15
  }

  return speed;
}
 80055e8:	4770      	bx	lr
	...

080055ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055ec:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 80055ee:	780c      	ldrb	r4, [r1, #0]

  if (ep->is_in == 1U)
 80055f0:	784b      	ldrb	r3, [r1, #1]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d020      	beq.n	8005638 <USB_ActivateEndpoint+0x4c>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80055f6:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 80055fa:	f004 060f 	and.w	r6, r4, #15
 80055fe:	2201      	movs	r2, #1
 8005600:	40b2      	lsls	r2, r6
 8005602:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005606:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800560a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800560e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005612:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005616:	d10c      	bne.n	8005632 <USB_ActivateEndpoint+0x46>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005618:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800561c:	688b      	ldr	r3, [r1, #8]
 800561e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005622:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005624:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8005628:	4313      	orrs	r3, r2
 800562a:	4a13      	ldr	r2, [pc, #76]	; (8005678 <USB_ActivateEndpoint+0x8c>)
 800562c:	431a      	orrs	r2, r3
 800562e:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
}
 8005632:	2000      	movs	r0, #0
 8005634:	bc70      	pop	{r4, r5, r6}
 8005636:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005638:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800563c:	f004 060f 	and.w	r6, r4, #15
 8005640:	40b3      	lsls	r3, r6
 8005642:	b29b      	uxth	r3, r3
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800564a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800564e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005652:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005656:	d1ec      	bne.n	8005632 <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005658:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800565c:	688b      	ldr	r3, [r1, #8]
 800565e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005662:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005664:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005668:	ea43 5484 	orr.w	r4, r3, r4, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800566c:	4314      	orrs	r4, r2
 800566e:	4b02      	ldr	r3, [pc, #8]	; (8005678 <USB_ActivateEndpoint+0x8c>)
 8005670:	4323      	orrs	r3, r4
 8005672:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8005676:	e7dc      	b.n	8005632 <USB_ActivateEndpoint+0x46>
 8005678:	10008000 	.word	0x10008000

0800567c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800567c:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 800567e:	780b      	ldrb	r3, [r1, #0]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005680:	784c      	ldrb	r4, [r1, #1]
 8005682:	2c01      	cmp	r4, #1
 8005684:	d024      	beq.n	80056d0 <USB_EP0StartXfer+0x54>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005686:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800568a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800568e:	691d      	ldr	r5, [r3, #16]
 8005690:	4c3e      	ldr	r4, [pc, #248]	; (800578c <USB_EP0StartXfer+0x110>)
 8005692:	402c      	ands	r4, r5
 8005694:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005696:	691d      	ldr	r5, [r3, #16]
 8005698:	4c3d      	ldr	r4, [pc, #244]	; (8005790 <USB_EP0StartXfer+0x114>)
 800569a:	402c      	ands	r4, r5
 800569c:	611c      	str	r4, [r3, #16]

    if (ep->xfer_len > 0U)
 800569e:	694c      	ldr	r4, [r1, #20]
 80056a0:	b10c      	cbz	r4, 80056a6 <USB_EP0StartXfer+0x2a>
    {
      ep->xfer_len = ep->maxpacket;
 80056a2:	688c      	ldr	r4, [r1, #8]
 80056a4:	614c      	str	r4, [r1, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056a6:	691c      	ldr	r4, [r3, #16]
 80056a8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80056ac:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80056ae:	691c      	ldr	r4, [r3, #16]
 80056b0:	688d      	ldr	r5, [r1, #8]
 80056b2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80056b6:	432c      	orrs	r4, r5
 80056b8:	611c      	str	r4, [r3, #16]

    if (dma == 1U)
 80056ba:	2a01      	cmp	r2, #1
 80056bc:	d061      	beq.n	8005782 <USB_EP0StartXfer+0x106>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056be:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80056c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056c6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 80056ca:	2000      	movs	r0, #0
 80056cc:	bc70      	pop	{r4, r5, r6}
 80056ce:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 80056d0:	694c      	ldr	r4, [r1, #20]
 80056d2:	bb5c      	cbnz	r4, 800572c <USB_EP0StartXfer+0xb0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056d4:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80056d8:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 80056dc:	4d2c      	ldr	r5, [pc, #176]	; (8005790 <USB_EP0StartXfer+0x114>)
 80056de:	4035      	ands	r5, r6
 80056e0:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056e4:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80056e8:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80056ec:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056f0:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 80056f4:	4d25      	ldr	r5, [pc, #148]	; (800578c <USB_EP0StartXfer+0x110>)
 80056f6:	4035      	ands	r5, r6
 80056f8:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 80056fc:	2a01      	cmp	r2, #1
 80056fe:	d031      	beq.n	8005764 <USB_EP0StartXfer+0xe8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005700:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005704:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005708:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800570c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8005710:	694b      	ldr	r3, [r1, #20]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0d9      	beq.n	80056ca <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005716:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800571a:	780a      	ldrb	r2, [r1, #0]
 800571c:	f002 010f 	and.w	r1, r2, #15
 8005720:	2201      	movs	r2, #1
 8005722:	408a      	lsls	r2, r1
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800572a:	e7ce      	b.n	80056ca <USB_EP0StartXfer+0x4e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800572c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005730:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8005734:	6926      	ldr	r6, [r4, #16]
 8005736:	4d15      	ldr	r5, [pc, #84]	; (800578c <USB_EP0StartXfer+0x110>)
 8005738:	4035      	ands	r5, r6
 800573a:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800573c:	6926      	ldr	r6, [r4, #16]
 800573e:	4d14      	ldr	r5, [pc, #80]	; (8005790 <USB_EP0StartXfer+0x114>)
 8005740:	4035      	ands	r5, r6
 8005742:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 8005744:	694e      	ldr	r6, [r1, #20]
 8005746:	688d      	ldr	r5, [r1, #8]
 8005748:	42ae      	cmp	r6, r5
 800574a:	d900      	bls.n	800574e <USB_EP0StartXfer+0xd2>
        ep->xfer_len = ep->maxpacket;
 800574c:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800574e:	6925      	ldr	r5, [r4, #16]
 8005750:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005754:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005756:	6925      	ldr	r5, [r4, #16]
 8005758:	694e      	ldr	r6, [r1, #20]
 800575a:	f3c6 0612 	ubfx	r6, r6, #0, #19
 800575e:	4335      	orrs	r5, r6
 8005760:	6125      	str	r5, [r4, #16]
 8005762:	e7cb      	b.n	80056fc <USB_EP0StartXfer+0x80>
      if ((uint32_t)ep->dma_addr != 0U)
 8005764:	690a      	ldr	r2, [r1, #16]
 8005766:	b11a      	cbz	r2, 8005770 <USB_EP0StartXfer+0xf4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005768:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800576c:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005770:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005774:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005778:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800577c:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8005780:	e7a3      	b.n	80056ca <USB_EP0StartXfer+0x4e>
      if ((uint32_t)ep->xfer_buff != 0U)
 8005782:	68ca      	ldr	r2, [r1, #12]
 8005784:	2a00      	cmp	r2, #0
 8005786:	d09a      	beq.n	80056be <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005788:	615a      	str	r2, [r3, #20]
 800578a:	e798      	b.n	80056be <USB_EP0StartXfer+0x42>
 800578c:	fff80000 	.word	0xfff80000
 8005790:	e007ffff 	.word	0xe007ffff

08005794 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005794:	b470      	push	{r4, r5, r6}
 8005796:	f89d 400c 	ldrb.w	r4, [sp, #12]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pSrc = (uint32_t *)src;
  uint32_t count32b, i;

  if (dma == 0U)
 800579a:	b964      	cbnz	r4, 80057b6 <USB_WritePacket+0x22>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800579c:	3303      	adds	r3, #3
 800579e:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 80057a0:	42ac      	cmp	r4, r5
 80057a2:	d208      	bcs.n	80057b6 <USB_WritePacket+0x22>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057a4:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 80057a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80057b0:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 80057b2:	3401      	adds	r4, #1
 80057b4:	e7f4      	b.n	80057a0 <USB_WritePacket+0xc>
      pSrc++;
    }
  }

  return HAL_OK;
}
 80057b6:	2000      	movs	r0, #0
 80057b8:	bc70      	pop	{r4, r5, r6}
 80057ba:	4770      	bx	lr

080057bc <USB_EPStartXfer>:
{
 80057bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057be:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 80057c0:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80057c2:	784c      	ldrb	r4, [r1, #1]
 80057c4:	2c01      	cmp	r4, #1
 80057c6:	d029      	beq.n	800581c <USB_EPStartXfer+0x60>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057c8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80057cc:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 80057d0:	6926      	ldr	r6, [r4, #16]
 80057d2:	4d7c      	ldr	r5, [pc, #496]	; (80059c4 <USB_EPStartXfer+0x208>)
 80057d4:	4035      	ands	r5, r6
 80057d6:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057d8:	6926      	ldr	r6, [r4, #16]
 80057da:	4d7b      	ldr	r5, [pc, #492]	; (80059c8 <USB_EPStartXfer+0x20c>)
 80057dc:	4035      	ands	r5, r6
 80057de:	6125      	str	r5, [r4, #16]
    if (ep->xfer_len == 0U)
 80057e0:	694d      	ldr	r5, [r1, #20]
 80057e2:	2d00      	cmp	r5, #0
 80057e4:	f040 80bf 	bne.w	8005966 <USB_EPStartXfer+0x1aa>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80057e8:	6925      	ldr	r5, [r4, #16]
 80057ea:	688e      	ldr	r6, [r1, #8]
 80057ec:	f3c6 0612 	ubfx	r6, r6, #0, #19
 80057f0:	4335      	orrs	r5, r6
 80057f2:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057f4:	6925      	ldr	r5, [r4, #16]
 80057f6:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80057fa:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 80057fc:	2a01      	cmp	r2, #1
 80057fe:	f000 80c7 	beq.w	8005990 <USB_EPStartXfer+0x1d4>
    if (ep->type == EP_TYPE_ISOC)
 8005802:	78ca      	ldrb	r2, [r1, #3]
 8005804:	2a01      	cmp	r2, #1
 8005806:	f000 80c9 	beq.w	800599c <USB_EPStartXfer+0x1e0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800580a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800580e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005812:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8005816:	2000      	movs	r0, #0
 8005818:	b003      	add	sp, #12
 800581a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 800581c:	694c      	ldr	r4, [r1, #20]
 800581e:	bb74      	cbnz	r4, 800587e <USB_EPStartXfer+0xc2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005820:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005824:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005828:	4d67      	ldr	r5, [pc, #412]	; (80059c8 <USB_EPStartXfer+0x20c>)
 800582a:	4035      	ands	r5, r6
 800582c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005830:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8005834:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005838:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800583c:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005840:	4d60      	ldr	r5, [pc, #384]	; (80059c4 <USB_EPStartXfer+0x208>)
 8005842:	4035      	ands	r5, r6
 8005844:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8005848:	2a01      	cmp	r2, #1
 800584a:	d04a      	beq.n	80058e2 <USB_EPStartXfer+0x126>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800584c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005850:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8005854:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8005858:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800585c:	78cc      	ldrb	r4, [r1, #3]
 800585e:	2c01      	cmp	r4, #1
 8005860:	d068      	beq.n	8005934 <USB_EPStartXfer+0x178>
        if (ep->xfer_len > 0U)
 8005862:	694b      	ldr	r3, [r1, #20]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d0d6      	beq.n	8005816 <USB_EPStartXfer+0x5a>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005868:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800586c:	7809      	ldrb	r1, [r1, #0]
 800586e:	f001 040f 	and.w	r4, r1, #15
 8005872:	2101      	movs	r1, #1
 8005874:	40a1      	lsls	r1, r4
 8005876:	430a      	orrs	r2, r1
 8005878:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 800587c:	e7cb      	b.n	8005816 <USB_EPStartXfer+0x5a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800587e:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005882:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005886:	4d4f      	ldr	r5, [pc, #316]	; (80059c4 <USB_EPStartXfer+0x208>)
 8005888:	4035      	ands	r5, r6
 800588a:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800588e:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005892:	4d4d      	ldr	r5, [pc, #308]	; (80059c8 <USB_EPStartXfer+0x20c>)
 8005894:	4035      	ands	r5, r6
 8005896:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800589a:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800589e:	694d      	ldr	r5, [r1, #20]
 80058a0:	688f      	ldr	r7, [r1, #8]
 80058a2:	443d      	add	r5, r7
 80058a4:	3d01      	subs	r5, #1
 80058a6:	fbb5 f5f7 	udiv	r5, r5, r7
 80058aa:	4f48      	ldr	r7, [pc, #288]	; (80059cc <USB_EPStartXfer+0x210>)
 80058ac:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 80058b0:	4335      	orrs	r5, r6
 80058b2:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058b6:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80058ba:	694e      	ldr	r6, [r1, #20]
 80058bc:	f3c6 0612 	ubfx	r6, r6, #0, #19
 80058c0:	4335      	orrs	r5, r6
 80058c2:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058c6:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 80058ca:	78cd      	ldrb	r5, [r1, #3]
 80058cc:	2d01      	cmp	r5, #1
 80058ce:	d1bb      	bne.n	8005848 <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80058d0:	6925      	ldr	r5, [r4, #16]
 80058d2:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 80058d6:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80058d8:	6925      	ldr	r5, [r4, #16]
 80058da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80058de:	6125      	str	r5, [r4, #16]
 80058e0:	e7b2      	b.n	8005848 <USB_EPStartXfer+0x8c>
      if ((uint32_t)ep->dma_addr != 0U)
 80058e2:	690a      	ldr	r2, [r1, #16]
 80058e4:	b11a      	cbz	r2, 80058ee <USB_EPStartXfer+0x132>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058e6:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80058ea:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 80058ee:	78ca      	ldrb	r2, [r1, #3]
 80058f0:	2a01      	cmp	r2, #1
 80058f2:	d008      	beq.n	8005906 <USB_EPStartXfer+0x14a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058f4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80058f8:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80058fc:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005900:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8005904:	e787      	b.n	8005816 <USB_EPStartXfer+0x5a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005906:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800590a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800590e:	d108      	bne.n	8005922 <USB_EPStartXfer+0x166>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005910:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8005914:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8005918:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800591c:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8005920:	e7e8      	b.n	80058f4 <USB_EPStartXfer+0x138>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005922:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8005926:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 800592a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800592e:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8005932:	e7df      	b.n	80058f4 <USB_EPStartXfer+0x138>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005934:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8005938:	f414 7f80 	tst.w	r4, #256	; 0x100
 800593c:	d10c      	bne.n	8005958 <USB_EPStartXfer+0x19c>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800593e:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8005942:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8005946:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800594a:	9200      	str	r2, [sp, #0]
 800594c:	8a8b      	ldrh	r3, [r1, #20]
 800594e:	780a      	ldrb	r2, [r1, #0]
 8005950:	68c9      	ldr	r1, [r1, #12]
 8005952:	f7ff ff1f 	bl	8005794 <USB_WritePacket>
 8005956:	e75e      	b.n	8005816 <USB_EPStartXfer+0x5a>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005958:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800595c:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8005960:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8005964:	e7f1      	b.n	800594a <USB_EPStartXfer+0x18e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005966:	688e      	ldr	r6, [r1, #8]
 8005968:	4435      	add	r5, r6
 800596a:	3d01      	subs	r5, #1
 800596c:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005970:	6926      	ldr	r6, [r4, #16]
 8005972:	4f16      	ldr	r7, [pc, #88]	; (80059cc <USB_EPStartXfer+0x210>)
 8005974:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 8005978:	433e      	orrs	r6, r7
 800597a:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800597c:	6927      	ldr	r7, [r4, #16]
 800597e:	688e      	ldr	r6, [r1, #8]
 8005980:	b2ad      	uxth	r5, r5
 8005982:	fb06 f505 	mul.w	r5, r6, r5
 8005986:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800598a:	433d      	orrs	r5, r7
 800598c:	6125      	str	r5, [r4, #16]
 800598e:	e735      	b.n	80057fc <USB_EPStartXfer+0x40>
      if ((uint32_t)ep->xfer_buff != 0U)
 8005990:	68ca      	ldr	r2, [r1, #12]
 8005992:	2a00      	cmp	r2, #0
 8005994:	f43f af35 	beq.w	8005802 <USB_EPStartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005998:	6162      	str	r2, [r4, #20]
 800599a:	e732      	b.n	8005802 <USB_EPStartXfer+0x46>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800599c:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 80059a0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80059a4:	d106      	bne.n	80059b4 <USB_EPStartXfer+0x1f8>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80059a6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80059aa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80059ae:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80059b2:	e72a      	b.n	800580a <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80059b4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80059b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80059bc:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80059c0:	e723      	b.n	800580a <USB_EPStartXfer+0x4e>
 80059c2:	bf00      	nop
 80059c4:	fff80000 	.word	0xfff80000
 80059c8:	e007ffff 	.word	0xe007ffff
 80059cc:	1ff80000 	.word	0x1ff80000

080059d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059d0:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80059d2:	3203      	adds	r2, #3
 80059d4:	0894      	lsrs	r4, r2, #2

  for (i = 0U; i < count32b; i++)
 80059d6:	2300      	movs	r3, #0
 80059d8:	42a3      	cmp	r3, r4
 80059da:	d206      	bcs.n	80059ea <USB_ReadPacket+0x1a>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059dc:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
 80059e0:	6812      	ldr	r2, [r2, #0]
 80059e2:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0U; i < count32b; i++)
 80059e6:	3301      	adds	r3, #1
 80059e8:	e7f6      	b.n	80059d8 <USB_ReadPacket+0x8>
    pDest++;
  }

  return ((void *)pDest);
}
 80059ea:	4608      	mov	r0, r1
 80059ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <USB_EPSetStall>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 80059f2:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 80059f4:	784a      	ldrb	r2, [r1, #1]
 80059f6:	2a01      	cmp	r2, #1
 80059f8:	d014      	beq.n	8005a24 <USB_EPSetStall+0x32>
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059fa:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80059fe:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8005a02:	2a00      	cmp	r2, #0
 8005a04:	db06      	blt.n	8005a14 <USB_EPSetStall+0x22>
 8005a06:	b12b      	cbz	r3, 8005a14 <USB_EPSetStall+0x22>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a08:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005a0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a10:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a14:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005a18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a1c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 8005a20:	2000      	movs	r0, #0
 8005a22:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a24:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005a28:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005a2c:	2a00      	cmp	r2, #0
 8005a2e:	db06      	blt.n	8005a3e <USB_EPSetStall+0x4c>
 8005a30:	b12b      	cbz	r3, 8005a3e <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005a32:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005a36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a3a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005a3e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005a42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a46:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8005a4a:	e7e9      	b.n	8005a20 <USB_EPSetStall+0x2e>

08005a4c <USB_EPClearStall>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8005a4c:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 8005a4e:	784a      	ldrb	r2, [r1, #1]
 8005a50:	2a01      	cmp	r2, #1
 8005a52:	d00e      	beq.n	8005a72 <USB_EPClearStall+0x26>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a54:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005a58:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005a5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a60:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a64:	78cb      	ldrb	r3, [r1, #3]
 8005a66:	3b02      	subs	r3, #2
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d915      	bls.n	8005a9a <USB_EPClearStall+0x4e>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }
  }
  return HAL_OK;
}
 8005a6e:	2000      	movs	r0, #0
 8005a70:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a72:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005a76:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005a7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a7e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a82:	78cb      	ldrb	r3, [r1, #3]
 8005a84:	3b02      	subs	r3, #2
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d8f0      	bhi.n	8005a6e <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a8c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a94:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8005a98:	e7e9      	b.n	8005a6e <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a9a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8005aa6:	e7e2      	b.n	8005a6e <USB_EPClearStall+0x22>

08005aa8 <USB_SetDevAddress>:
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005aa8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8005aac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ab0:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ab4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8005ab8:	0109      	lsls	r1, r1, #4
 8005aba:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8005abe:	4319      	orrs	r1, r3
 8005ac0:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800

  return HAL_OK;
}
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	4770      	bx	lr

08005ac8 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ac8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8005aca:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
 8005acc:	4010      	ands	r0, r2
 8005ace:	4770      	bx	lr

08005ad0 <USB_ReadDevAllOutEpInterrupt>:
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ad0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8005ad4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ad8:	69c0      	ldr	r0, [r0, #28]
 8005ada:	4018      	ands	r0, r3

  return ((tmpreg & 0xffff0000U) >> 16);
}
 8005adc:	0c00      	lsrs	r0, r0, #16
 8005ade:	4770      	bx	lr

08005ae0 <USB_ReadDevAllInEpInterrupt>:
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ae0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8005ae4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ae8:	69c0      	ldr	r0, [r0, #28]
 8005aea:	4018      	ands	r0, r3

  return ((tmpreg & 0xFFFFU));
}
 8005aec:	b280      	uxth	r0, r0
 8005aee:	4770      	bx	lr

08005af0 <USB_ReadDevOutEPInterrupt>:
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005af0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8005af4:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005af8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8005afc:	6940      	ldr	r0, [r0, #20]

  return tmpreg;
}
 8005afe:	4010      	ands	r0, r2
 8005b00:	4770      	bx	lr

08005b02 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b02:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b04:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b08:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b0c:	f001 020f 	and.w	r2, r1, #15
 8005b10:	40d3      	lsrs	r3, r2
 8005b12:	01db      	lsls	r3, r3, #7
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b18:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8005b1c:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8005b20:	6880      	ldr	r0, [r0, #8]

  return tmpreg;
}
 8005b22:	4018      	ands	r0, r3
 8005b24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
 8005b2a:	6940      	ldr	r0, [r0, #20]
}
 8005b2c:	f000 0001 	and.w	r0, r0, #1
 8005b30:	4770      	bx	lr
	...

08005b34 <USB_ActivateSetup>:
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b34:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005b38:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <USB_ActivateSetup+0x1c>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b40:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8005b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b48:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804

  return HAL_OK;
}
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	4770      	bx	lr
 8005b50:	fffff800 	.word	0xfffff800

08005b54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005b54:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b56:	6c04      	ldr	r4, [r0, #64]	; 0x40

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b58:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <USB_EP0_OutStart+0x5c>)
 8005b5a:	429c      	cmp	r4, r3
 8005b5c:	d903      	bls.n	8005b66 <USB_EP0_OutStart+0x12>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b5e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	db16      	blt.n	8005b94 <USB_EP0_OutStart+0x40>
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b66:	2400      	movs	r4, #0
 8005b68:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b6c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8005b70:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8005b74:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b78:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8005b7c:	f044 0418 	orr.w	r4, r4, #24
 8005b80:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005b84:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8005b88:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8005b8c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10

  if (dma == 1U)
 8005b90:	2901      	cmp	r1, #1
 8005b92:	d003      	beq.n	8005b9c <USB_EP0_OutStart+0x48>
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
  }

  return HAL_OK;
}
 8005b94:	2000      	movs	r0, #0
 8005b96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b9a:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b9c:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005ba0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005ba4:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005ba8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8005bac:	e7f2      	b.n	8005b94 <USB_EP0_OutStart+0x40>
 8005bae:	bf00      	nop
 8005bb0:	4f54300a 	.word	0x4f54300a

08005bb4 <USBD_AUDIO_Sync>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
void USBD_AUDIO_Sync(USBD_HandleTypeDef *pdev, AUDIO_OffsetTypeDef offset)
{
 8005bb4:	b510      	push	{r4, lr}
  USBD_AUDIO_HandleTypeDef *haudio;
  uint32_t BufferSize = AUDIO_TOTAL_BUF_SIZE / 2U;

  if (pdev->pClassData == NULL)
 8005bb6:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
 8005bba:	b3a4      	cbz	r4, 8005c26 <USBD_AUDIO_Sync+0x72>
 8005bbc:	460b      	mov	r3, r1
    return;
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;

  haudio->offset = offset;
 8005bbe:	f643 4204 	movw	r2, #15364	; 0x3c04
 8005bc2:	54a1      	strb	r1, [r4, r2]

  if (haudio->rd_enable == 1U)
 8005bc4:	f643 4205 	movw	r2, #15365	; 0x3c05
 8005bc8:	5ca2      	ldrb	r2, [r4, r2]
 8005bca:	2a01      	cmp	r2, #1
 8005bcc:	d010      	beq.n	8005bf0 <USBD_AUDIO_Sync+0x3c>
      /* roll back */
      haudio->rd_ptr = 0U;
    }
  }

  if (haudio->rd_ptr > haudio->wr_ptr)
 8005bce:	f643 4206 	movw	r2, #15366	; 0x3c06
 8005bd2:	5aa1      	ldrh	r1, [r4, r2]
 8005bd4:	f643 4208 	movw	r2, #15368	; 0x3c08
 8005bd8:	5aa2      	ldrh	r2, [r4, r2]
 8005bda:	4291      	cmp	r1, r2
 8005bdc:	d916      	bls.n	8005c0c <USBD_AUDIO_Sync+0x58>
  {
    if ((haudio->rd_ptr - haudio->wr_ptr) < AUDIO_OUT_PACKET)
 8005bde:	1a8a      	subs	r2, r1, r2
 8005be0:	2abf      	cmp	r2, #191	; 0xbf
 8005be2:	dd1c      	ble.n	8005c1e <USBD_AUDIO_Sync+0x6a>
    {
      BufferSize += 4U;
    }
    else
    {
      if ((haudio->rd_ptr - haudio->wr_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 8005be4:	f5b2 5f6d 	cmp.w	r2, #15168	; 0x3b40
 8005be8:	dc1e      	bgt.n	8005c28 <USBD_AUDIO_Sync+0x74>
  uint32_t BufferSize = AUDIO_TOTAL_BUF_SIZE / 2U;
 8005bea:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8005bee:	e018      	b.n	8005c22 <USBD_AUDIO_Sync+0x6e>
    haudio->rd_ptr += (uint16_t)BufferSize;
 8005bf0:	f643 4106 	movw	r1, #15366	; 0x3c06
 8005bf4:	5a62      	ldrh	r2, [r4, r1]
 8005bf6:	f502 52f0 	add.w	r2, r2, #7680	; 0x1e00
 8005bfa:	b292      	uxth	r2, r2
 8005bfc:	5262      	strh	r2, [r4, r1]
    if (haudio->rd_ptr == AUDIO_TOTAL_BUF_SIZE)
 8005bfe:	f5b2 5f70 	cmp.w	r2, #15360	; 0x3c00
 8005c02:	d1e4      	bne.n	8005bce <USBD_AUDIO_Sync+0x1a>
      haudio->rd_ptr = 0U;
 8005c04:	460a      	mov	r2, r1
 8005c06:	2100      	movs	r1, #0
 8005c08:	52a1      	strh	r1, [r4, r2]
 8005c0a:	e7e0      	b.n	8005bce <USBD_AUDIO_Sync+0x1a>
      }
    }
  }
  else
  {
    if ((haudio->wr_ptr - haudio->rd_ptr) < AUDIO_OUT_PACKET)
 8005c0c:	1a52      	subs	r2, r2, r1
 8005c0e:	2abf      	cmp	r2, #191	; 0xbf
 8005c10:	dd0d      	ble.n	8005c2e <USBD_AUDIO_Sync+0x7a>
    {
       BufferSize -= 4U;
    }
    else
    {
      if ((haudio->wr_ptr - haudio->rd_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 8005c12:	f5b2 5f6d 	cmp.w	r2, #15168	; 0x3b40
 8005c16:	dc0d      	bgt.n	8005c34 <USBD_AUDIO_Sync+0x80>
  uint32_t BufferSize = AUDIO_TOTAL_BUF_SIZE / 2U;
 8005c18:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8005c1c:	e001      	b.n	8005c22 <USBD_AUDIO_Sync+0x6e>
      BufferSize += 4U;
 8005c1e:	f641 6104 	movw	r1, #7684	; 0x1e04
         BufferSize += 4U;
      }
    }
  }

  if (haudio->offset == AUDIO_OFFSET_FULL)
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d009      	beq.n	8005c3a <USBD_AUDIO_Sync+0x86>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
                                                         BufferSize, AUDIO_CMD_PLAY);
    haudio->offset = AUDIO_OFFSET_NONE;
  }
}
 8005c26:	bd10      	pop	{r4, pc}
        BufferSize -= 4U;
 8005c28:	f641 51fc 	movw	r1, #7676	; 0x1dfc
 8005c2c:	e7f9      	b.n	8005c22 <USBD_AUDIO_Sync+0x6e>
       BufferSize -= 4U;
 8005c2e:	f641 51fc 	movw	r1, #7676	; 0x1dfc
 8005c32:	e7f6      	b.n	8005c22 <USBD_AUDIO_Sync+0x6e>
         BufferSize += 4U;
 8005c34:	f641 6104 	movw	r1, #7684	; 0x1e04
 8005c38:	e7f3      	b.n	8005c22 <USBD_AUDIO_Sync+0x6e>
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8005c3a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	2202      	movs	r2, #2
 8005c42:	1d20      	adds	r0, r4, #4
 8005c44:	4798      	blx	r3
    haudio->offset = AUDIO_OFFSET_NONE;
 8005c46:	f643 4304 	movw	r3, #15364	; 0x3c04
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	54e2      	strb	r2, [r4, r3]
 8005c4e:	e7ea      	b.n	8005c26 <USBD_AUDIO_Sync+0x72>

08005c50 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c50:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8005c52:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005c56:	b113      	cbz	r3, 8005c5e <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4798      	blx	r3
  }

  return ret;
}
 8005c5c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005c5e:	2003      	movs	r0, #3
 8005c60:	e7fc      	b.n	8005c5c <USBD_SetClassConfig+0xc>

08005c62 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c62:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005c64:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005c68:	b10b      	cbz	r3, 8005c6e <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005c6e:	2000      	movs	r0, #0
 8005c70:	bd08      	pop	{r3, pc}

08005c72 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c72:	b538      	push	{r3, r4, r5, lr}
 8005c74:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c76:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f000 f924 	bl	8005ec8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c80:	2301      	movs	r3, #1
 8005c82:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c86:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8005c8a:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c8e:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 8005c92:	f001 031f 	and.w	r3, r1, #31
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d00d      	beq.n	8005cb6 <USBD_LL_SetupStage+0x44>
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d010      	beq.n	8005cc0 <USBD_LL_SetupStage+0x4e>
 8005c9e:	b12b      	cbz	r3, 8005cac <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ca0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f001 fcad 	bl	8007604 <USBD_LL_StallEP>
      break;
 8005caa:	e003      	b.n	8005cb4 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005cac:	4629      	mov	r1, r5
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f000 fac4 	bl	800623c <USBD_StdDevReq>
  }

  return ret;
}
 8005cb4:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 faf7 	bl	80062ac <USBD_StdItfReq>
      break;
 8005cbe:	e7f9      	b.n	8005cb4 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f000 fb26 	bl	8006314 <USBD_StdEPReq>
      break;
 8005cc8:	e7f4      	b.n	8005cb4 <USBD_LL_SetupStage+0x42>

08005cca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005cca:	b538      	push	{r3, r4, r5, lr}
 8005ccc:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005cce:	460d      	mov	r5, r1
 8005cd0:	bb31      	cbnz	r1, 8005d20 <USBD_LL_DataOutStage+0x56>
 8005cd2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005cd4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8005cd8:	2a03      	cmp	r2, #3
 8005cda:	d001      	beq.n	8005ce0 <USBD_LL_DataOutStage+0x16>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005cdc:	4608      	mov	r0, r1
}
 8005cde:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8005ce0:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8005ce4:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8005ce8:	4291      	cmp	r1, r2
 8005cea:	d80c      	bhi.n	8005d06 <USBD_LL_DataOutStage+0x3c>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005cec:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	b11b      	cbz	r3, 8005cfc <USBD_LL_DataOutStage+0x32>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005cf4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005cf8:	2a03      	cmp	r2, #3
 8005cfa:	d00f      	beq.n	8005d1c <USBD_LL_DataOutStage+0x52>
        (void)USBD_CtlSendStatus(pdev);
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f000 fc2f 	bl	8006560 <USBD_CtlSendStatus>
  return USBD_OK;
 8005d02:	4628      	mov	r0, r5
 8005d04:	e7eb      	b.n	8005cde <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8005d06:	1a89      	subs	r1, r1, r2
 8005d08:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d0c:	428a      	cmp	r2, r1
 8005d0e:	bf28      	it	cs
 8005d10:	460a      	movcs	r2, r1
 8005d12:	4619      	mov	r1, r3
 8005d14:	f000 fc1c 	bl	8006550 <USBD_CtlContinueRx>
  return USBD_OK;
 8005d18:	4628      	mov	r0, r5
 8005d1a:	e7e0      	b.n	8005cde <USBD_LL_DataOutStage+0x14>
          pdev->pClass->EP0_RxReady(pdev);
 8005d1c:	4798      	blx	r3
 8005d1e:	e7ed      	b.n	8005cfc <USBD_LL_DataOutStage+0x32>
  else if ((pdev->pClass->DataOut != NULL) &&
 8005d20:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	b12b      	cbz	r3, 8005d34 <USBD_LL_DataOutStage+0x6a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d28:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005d2c:	2a03      	cmp	r2, #3
 8005d2e:	d103      	bne.n	8005d38 <USBD_LL_DataOutStage+0x6e>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005d30:	4798      	blx	r3
    if (ret != USBD_OK)
 8005d32:	e7d4      	b.n	8005cde <USBD_LL_DataOutStage+0x14>
    return USBD_FAIL;
 8005d34:	2003      	movs	r0, #3
 8005d36:	e7d2      	b.n	8005cde <USBD_LL_DataOutStage+0x14>
 8005d38:	2003      	movs	r0, #3
 8005d3a:	e7d0      	b.n	8005cde <USBD_LL_DataOutStage+0x14>

08005d3c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d3c:	b538      	push	{r3, r4, r5, lr}
 8005d3e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005d40:	460d      	mov	r5, r1
 8005d42:	2900      	cmp	r1, #0
 8005d44:	d148      	bne.n	8005dd8 <USBD_LL_DataInStage+0x9c>
 8005d46:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d48:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8005d4c:	2a02      	cmp	r2, #2
 8005d4e:	d005      	beq.n	8005d5c <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005d50:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d03a      	beq.n	8005dce <USBD_LL_DataInStage+0x92>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005d58:	4628      	mov	r0, r5
}
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8005d5c:	69c2      	ldr	r2, [r0, #28]
 8005d5e:	6a01      	ldr	r1, [r0, #32]
 8005d60:	428a      	cmp	r2, r1
 8005d62:	d811      	bhi.n	8005d88 <USBD_LL_DataInStage+0x4c>
        if ((pep->maxpacket == pep->rem_length) &&
 8005d64:	428a      	cmp	r2, r1
 8005d66:	d01b      	beq.n	8005da0 <USBD_LL_DataInStage+0x64>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005d68:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	b11b      	cbz	r3, 8005d78 <USBD_LL_DataInStage+0x3c>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d70:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005d74:	2a03      	cmp	r2, #3
 8005d76:	d027      	beq.n	8005dc8 <USBD_LL_DataInStage+0x8c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d78:	2180      	movs	r1, #128	; 0x80
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f001 fc42 	bl	8007604 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005d80:	4620      	mov	r0, r4
 8005d82:	f000 fbf8 	bl	8006576 <USBD_CtlReceiveStatus>
 8005d86:	e7e3      	b.n	8005d50 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8005d88:	1a52      	subs	r2, r2, r1
 8005d8a:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	f000 fbd7 	bl	8006540 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d92:	2300      	movs	r3, #0
 8005d94:	461a      	mov	r2, r3
 8005d96:	4619      	mov	r1, r3
 8005d98:	4620      	mov	r0, r4
 8005d9a:	f001 fc66 	bl	800766a <USBD_LL_PrepareReceive>
 8005d9e:	e7d7      	b.n	8005d50 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8005da0:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8005da2:	4299      	cmp	r1, r3
 8005da4:	d8e0      	bhi.n	8005d68 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 8005da6:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d2dc      	bcs.n	8005d68 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005dae:	2200      	movs	r2, #0
 8005db0:	4611      	mov	r1, r2
 8005db2:	f000 fbc5 	bl	8006540 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005db6:	2100      	movs	r1, #0
 8005db8:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	460a      	mov	r2, r1
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f001 fc52 	bl	800766a <USBD_LL_PrepareReceive>
 8005dc6:	e7c3      	b.n	8005d50 <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev);
 8005dc8:	4620      	mov	r0, r4
 8005dca:	4798      	blx	r3
 8005dcc:	e7d4      	b.n	8005d78 <USBD_LL_DataInStage+0x3c>
      pdev->dev_test_mode = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	e7c0      	b.n	8005d5a <USBD_LL_DataInStage+0x1e>
  else if ((pdev->pClass->DataIn != NULL) &&
 8005dd8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	b12b      	cbz	r3, 8005dec <USBD_LL_DataInStage+0xb0>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005de0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005de4:	2a03      	cmp	r2, #3
 8005de6:	d103      	bne.n	8005df0 <USBD_LL_DataInStage+0xb4>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005de8:	4798      	blx	r3
    if (ret != USBD_OK)
 8005dea:	e7b6      	b.n	8005d5a <USBD_LL_DataInStage+0x1e>
    return USBD_FAIL;
 8005dec:	2003      	movs	r0, #3
 8005dee:	e7b4      	b.n	8005d5a <USBD_LL_DataInStage+0x1e>
 8005df0:	2003      	movs	r0, #3
 8005df2:	e7b2      	b.n	8005d5a <USBD_LL_DataInStage+0x1e>

08005df4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005df4:	b570      	push	{r4, r5, r6, lr}
 8005df6:	4604      	mov	r4, r0
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8005e04:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e06:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005e0a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8005e0e:	b123      	cbz	r3, 8005e1a <USBD_LL_Reset+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005e10:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2100      	movs	r1, #0
 8005e18:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e1a:	2340      	movs	r3, #64	; 0x40
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	4611      	mov	r1, r2
 8005e20:	4620      	mov	r0, r4
 8005e22:	f001 fbe5 	bl	80075f0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e26:	2601      	movs	r6, #1
 8005e28:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e2c:	2540      	movs	r5, #64	; 0x40
 8005e2e:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e32:	462b      	mov	r3, r5
 8005e34:	2200      	movs	r2, #0
 8005e36:	2180      	movs	r1, #128	; 0x80
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f001 fbd9 	bl	80075f0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e3e:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e40:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 8005e42:	2000      	movs	r0, #0
 8005e44:	bd70      	pop	{r4, r5, r6, pc}

08005e46 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005e46:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005e48:	2000      	movs	r0, #0
 8005e4a:	4770      	bx	lr

08005e4c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8005e4c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005e50:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005e54:	2304      	movs	r3, #4
 8005e56:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	4770      	bx	lr

08005e5e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e5e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d001      	beq.n	8005e6a <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8005e66:	2000      	movs	r0, #0
 8005e68:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8005e6a:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8005e6e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8005e72:	e7f8      	b.n	8005e66 <USBD_LL_Resume+0x8>

08005e74 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e74:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e76:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d001      	beq.n	8005e82 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8005e7e:	2000      	movs	r0, #0
 8005e80:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8005e82:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0f8      	beq.n	8005e7e <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8005e8c:	4798      	blx	r3
 8005e8e:	e7f6      	b.n	8005e7e <USBD_LL_SOF+0xa>

08005e90 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8005e90:	2000      	movs	r0, #0
 8005e92:	4770      	bx	lr

08005e94 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8005e94:	2000      	movs	r0, #0
 8005e96:	4770      	bx	lr

08005e98 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8005e98:	2000      	movs	r0, #0
 8005e9a:	4770      	bx	lr

08005e9c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005e9c:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005ea4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005ea8:	b113      	cbz	r3, 8005eb0 <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	7901      	ldrb	r1, [r0, #4]
 8005eae:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	bd08      	pop	{r3, pc}

08005eb4 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005eb4:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005eb6:	884b      	ldrh	r3, [r1, #2]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d000      	beq.n	8005ebe <USBD_SetFeature+0xa>
  {
    pdev->dev_remote_wakeup = 1U;
    (void)USBD_CtlSendStatus(pdev);
  }
}
 8005ebc:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8005ebe:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005ec2:	f000 fb4d 	bl	8006560 <USBD_CtlSendStatus>
}
 8005ec6:	e7f9      	b.n	8005ebc <USBD_SetFeature+0x8>

08005ec8 <USBD_ParseSetupRequest>:

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  uint8_t *pbuff = pdata;

  req->bmRequest = *(uint8_t *)(pbuff);
 8005ec8:	780b      	ldrb	r3, [r1, #0]
 8005eca:	7003      	strb	r3, [r0, #0]

  pbuff++;
  req->bRequest = *(uint8_t *)(pbuff);
 8005ecc:	784b      	ldrb	r3, [r1, #1]
 8005ece:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8005ed0:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8005ed2:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005ed4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  req->wValue = SWAPBYTE(pbuff);
 8005ed8:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8005eda:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8005edc:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005ede:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  pbuff++;
  req->wIndex = SWAPBYTE(pbuff);
 8005ee2:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8005ee4:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8005ee6:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005ee8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  pbuff++;
  req->wLength = SWAPBYTE(pbuff);
 8005eec:	80c3      	strh	r3, [r0, #6]
}
 8005eee:	4770      	bx	lr

08005ef0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ef0:	b510      	push	{r4, lr}
 8005ef2:	4604      	mov	r4, r0
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ef4:	2180      	movs	r1, #128	; 0x80
 8005ef6:	f001 fb85 	bl	8007604 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005efa:	2100      	movs	r1, #0
 8005efc:	4620      	mov	r0, r4
 8005efe:	f001 fb81 	bl	8007604 <USBD_LL_StallEP>
}
 8005f02:	bd10      	pop	{r4, pc}

08005f04 <USBD_GetDescriptor>:
{
 8005f04:	b530      	push	{r4, r5, lr}
 8005f06:	b083      	sub	sp, #12
 8005f08:	4604      	mov	r4, r0
 8005f0a:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8005f12:	884a      	ldrh	r2, [r1, #2]
 8005f14:	0a13      	lsrs	r3, r2, #8
 8005f16:	3b01      	subs	r3, #1
 8005f18:	2b06      	cmp	r3, #6
 8005f1a:	f200 80ab 	bhi.w	8006074 <USBD_GetDescriptor+0x170>
 8005f1e:	e8df f003 	tbb	[pc, r3]
 8005f22:	1f04      	.short	0x1f04
 8005f24:	8da9a933 	.word	0x8da9a933
 8005f28:	9a          	.byte	0x9a
 8005f29:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005f2a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f10d 0106 	add.w	r1, sp, #6
 8005f34:	7c00      	ldrb	r0, [r0, #16]
 8005f36:	4798      	blx	r3
    if (req->wLength != 0U)
 8005f38:	88ea      	ldrh	r2, [r5, #6]
 8005f3a:	2a00      	cmp	r2, #0
 8005f3c:	f000 80a3 	beq.w	8006086 <USBD_GetDescriptor+0x182>
      if (len != 0U)
 8005f40:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 8099 	beq.w	800607c <USBD_GetDescriptor+0x178>
        len = MIN(len, req->wLength);
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	bf28      	it	cs
 8005f4e:	461a      	movcs	r2, r3
 8005f50:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f54:	4601      	mov	r1, r0
 8005f56:	4620      	mov	r0, r4
 8005f58:	f000 fae5 	bl	8006526 <USBD_CtlSendData>
}
 8005f5c:	b003      	add	sp, #12
 8005f5e:	bd30      	pop	{r4, r5, pc}
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f60:	7c03      	ldrb	r3, [r0, #16]
 8005f62:	b943      	cbnz	r3, 8005f76 <USBD_GetDescriptor+0x72>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005f64:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	f10d 0006 	add.w	r0, sp, #6
 8005f6e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f70:	2302      	movs	r3, #2
 8005f72:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005f74:	e7e0      	b.n	8005f38 <USBD_GetDescriptor+0x34>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005f76:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7c:	f10d 0006 	add.w	r0, sp, #6
 8005f80:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f82:	2302      	movs	r3, #2
 8005f84:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005f86:	e7d7      	b.n	8005f38 <USBD_GetDescriptor+0x34>
    switch ((uint8_t)(req->wValue))
 8005f88:	b2d2      	uxtb	r2, r2
 8005f8a:	2a05      	cmp	r2, #5
 8005f8c:	d852      	bhi.n	8006034 <USBD_GetDescriptor+0x130>
 8005f8e:	e8df f002 	tbb	[pc, r2]
 8005f92:	1003      	.short	0x1003
 8005f94:	44372a1d 	.word	0x44372a1d
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f98:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	b123      	cbz	r3, 8005faa <USBD_GetDescriptor+0xa6>
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005fa0:	f10d 0106 	add.w	r1, sp, #6
 8005fa4:	7c00      	ldrb	r0, [r0, #16]
 8005fa6:	4798      	blx	r3
  if (err != 0U)
 8005fa8:	e7c6      	b.n	8005f38 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8005faa:	4629      	mov	r1, r5
 8005fac:	f7ff ffa0 	bl	8005ef0 <USBD_CtlError>
  if (err != 0U)
 8005fb0:	e7d4      	b.n	8005f5c <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005fb2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	b123      	cbz	r3, 8005fc4 <USBD_GetDescriptor+0xc0>
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005fba:	f10d 0106 	add.w	r1, sp, #6
 8005fbe:	7c00      	ldrb	r0, [r0, #16]
 8005fc0:	4798      	blx	r3
  if (err != 0U)
 8005fc2:	e7b9      	b.n	8005f38 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	f7ff ff93 	bl	8005ef0 <USBD_CtlError>
  if (err != 0U)
 8005fca:	e7c7      	b.n	8005f5c <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005fcc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	b123      	cbz	r3, 8005fde <USBD_GetDescriptor+0xda>
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005fd4:	f10d 0106 	add.w	r1, sp, #6
 8005fd8:	7c00      	ldrb	r0, [r0, #16]
 8005fda:	4798      	blx	r3
  if (err != 0U)
 8005fdc:	e7ac      	b.n	8005f38 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8005fde:	4629      	mov	r1, r5
 8005fe0:	f7ff ff86 	bl	8005ef0 <USBD_CtlError>
  if (err != 0U)
 8005fe4:	e7ba      	b.n	8005f5c <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005fe6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	b123      	cbz	r3, 8005ff8 <USBD_GetDescriptor+0xf4>
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005fee:	f10d 0106 	add.w	r1, sp, #6
 8005ff2:	7c00      	ldrb	r0, [r0, #16]
 8005ff4:	4798      	blx	r3
  if (err != 0U)
 8005ff6:	e79f      	b.n	8005f38 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	f7ff ff79 	bl	8005ef0 <USBD_CtlError>
  if (err != 0U)
 8005ffe:	e7ad      	b.n	8005f5c <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006000:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	b123      	cbz	r3, 8006012 <USBD_GetDescriptor+0x10e>
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006008:	f10d 0106 	add.w	r1, sp, #6
 800600c:	7c00      	ldrb	r0, [r0, #16]
 800600e:	4798      	blx	r3
  if (err != 0U)
 8006010:	e792      	b.n	8005f38 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8006012:	4629      	mov	r1, r5
 8006014:	f7ff ff6c 	bl	8005ef0 <USBD_CtlError>
  if (err != 0U)
 8006018:	e7a0      	b.n	8005f5c <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800601a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	b123      	cbz	r3, 800602c <USBD_GetDescriptor+0x128>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006022:	f10d 0106 	add.w	r1, sp, #6
 8006026:	7c00      	ldrb	r0, [r0, #16]
 8006028:	4798      	blx	r3
  if (err != 0U)
 800602a:	e785      	b.n	8005f38 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800602c:	4629      	mov	r1, r5
 800602e:	f7ff ff5f 	bl	8005ef0 <USBD_CtlError>
  if (err != 0U)
 8006032:	e793      	b.n	8005f5c <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8006034:	4629      	mov	r1, r5
 8006036:	f7ff ff5b 	bl	8005ef0 <USBD_CtlError>
  if (err != 0U)
 800603a:	e78f      	b.n	8005f5c <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800603c:	7c03      	ldrb	r3, [r0, #16]
 800603e:	b933      	cbnz	r3, 800604e <USBD_GetDescriptor+0x14a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006040:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006046:	f10d 0006 	add.w	r0, sp, #6
 800604a:	4798      	blx	r3
  if (err != 0U)
 800604c:	e774      	b.n	8005f38 <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 800604e:	4629      	mov	r1, r5
 8006050:	f7ff ff4e 	bl	8005ef0 <USBD_CtlError>
  if (err != 0U)
 8006054:	e782      	b.n	8005f5c <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006056:	7c03      	ldrb	r3, [r0, #16]
 8006058:	b943      	cbnz	r3, 800606c <USBD_GetDescriptor+0x168>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800605a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800605e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006060:	f10d 0006 	add.w	r0, sp, #6
 8006064:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006066:	2307      	movs	r3, #7
 8006068:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800606a:	e765      	b.n	8005f38 <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 800606c:	4629      	mov	r1, r5
 800606e:	f7ff ff3f 	bl	8005ef0 <USBD_CtlError>
  if (err != 0U)
 8006072:	e773      	b.n	8005f5c <USBD_GetDescriptor+0x58>
    USBD_CtlError(pdev, req);
 8006074:	4629      	mov	r1, r5
 8006076:	f7ff ff3b 	bl	8005ef0 <USBD_CtlError>
    return;
 800607a:	e76f      	b.n	8005f5c <USBD_GetDescriptor+0x58>
        USBD_CtlError(pdev, req);
 800607c:	4629      	mov	r1, r5
 800607e:	4620      	mov	r0, r4
 8006080:	f7ff ff36 	bl	8005ef0 <USBD_CtlError>
 8006084:	e76a      	b.n	8005f5c <USBD_GetDescriptor+0x58>
      (void)USBD_CtlSendStatus(pdev);
 8006086:	4620      	mov	r0, r4
 8006088:	f000 fa6a 	bl	8006560 <USBD_CtlSendStatus>
 800608c:	e766      	b.n	8005f5c <USBD_GetDescriptor+0x58>

0800608e <USBD_SetAddress>:
{
 800608e:	b538      	push	{r3, r4, r5, lr}
 8006090:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006092:	888b      	ldrh	r3, [r1, #4]
 8006094:	b9f3      	cbnz	r3, 80060d4 <USBD_SetAddress+0x46>
 8006096:	88cb      	ldrh	r3, [r1, #6]
 8006098:	b9e3      	cbnz	r3, 80060d4 <USBD_SetAddress+0x46>
 800609a:	884b      	ldrh	r3, [r1, #2]
 800609c:	2b7f      	cmp	r3, #127	; 0x7f
 800609e:	d819      	bhi.n	80060d4 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80060a0:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d00c      	beq.n	80060c6 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 80060ac:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80060b0:	4629      	mov	r1, r5
 80060b2:	f001 facc 	bl	800764e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80060b6:	4620      	mov	r0, r4
 80060b8:	f000 fa52 	bl	8006560 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80060bc:	b135      	cbz	r5, 80060cc <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80060be:	2302      	movs	r3, #2
 80060c0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80060c4:	e009      	b.n	80060da <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 80060c6:	f7ff ff13 	bl	8005ef0 <USBD_CtlError>
 80060ca:	e006      	b.n	80060da <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80060cc:	2301      	movs	r3, #1
 80060ce:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80060d2:	e002      	b.n	80060da <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 80060d4:	4620      	mov	r0, r4
 80060d6:	f7ff ff0b 	bl	8005ef0 <USBD_CtlError>
}
 80060da:	bd38      	pop	{r3, r4, r5, pc}

080060dc <USBD_SetConfig>:
{
 80060dc:	b570      	push	{r4, r5, r6, lr}
 80060de:	4604      	mov	r4, r0
 80060e0:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 80060e2:	788d      	ldrb	r5, [r1, #2]
 80060e4:	4b2d      	ldr	r3, [pc, #180]	; (800619c <USBD_SetConfig+0xc0>)
 80060e6:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80060e8:	2d01      	cmp	r5, #1
 80060ea:	d80f      	bhi.n	800610c <USBD_SetConfig+0x30>
  switch (pdev->dev_state)
 80060ec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d00f      	beq.n	8006114 <USBD_SetConfig+0x38>
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	d023      	beq.n	8006140 <USBD_SetConfig+0x64>
    USBD_CtlError(pdev, req);
 80060f8:	f7ff fefa 	bl	8005ef0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80060fc:	4b27      	ldr	r3, [pc, #156]	; (800619c <USBD_SetConfig+0xc0>)
 80060fe:	7819      	ldrb	r1, [r3, #0]
 8006100:	4620      	mov	r0, r4
 8006102:	f7ff fdae 	bl	8005c62 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006106:	2503      	movs	r5, #3
}
 8006108:	4628      	mov	r0, r5
 800610a:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800610c:	f7ff fef0 	bl	8005ef0 <USBD_CtlError>
    return USBD_FAIL;
 8006110:	2503      	movs	r5, #3
 8006112:	e7f9      	b.n	8006108 <USBD_SetConfig+0x2c>
    if (cfgidx != 0U)
 8006114:	b18d      	cbz	r5, 800613a <USBD_SetConfig+0x5e>
      pdev->dev_config = cfgidx;
 8006116:	6045      	str	r5, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006118:	4629      	mov	r1, r5
 800611a:	f7ff fd99 	bl	8005c50 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800611e:	4605      	mov	r5, r0
 8006120:	b120      	cbz	r0, 800612c <USBD_SetConfig+0x50>
        USBD_CtlError(pdev, req);
 8006122:	4631      	mov	r1, r6
 8006124:	4620      	mov	r0, r4
 8006126:	f7ff fee3 	bl	8005ef0 <USBD_CtlError>
 800612a:	e7ed      	b.n	8006108 <USBD_SetConfig+0x2c>
        (void)USBD_CtlSendStatus(pdev);
 800612c:	4620      	mov	r0, r4
 800612e:	f000 fa17 	bl	8006560 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006132:	2303      	movs	r3, #3
 8006134:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006138:	e7e6      	b.n	8006108 <USBD_SetConfig+0x2c>
      (void)USBD_CtlSendStatus(pdev);
 800613a:	f000 fa11 	bl	8006560 <USBD_CtlSendStatus>
 800613e:	e7e3      	b.n	8006108 <USBD_SetConfig+0x2c>
    if (cfgidx == 0U)
 8006140:	b1cd      	cbz	r5, 8006176 <USBD_SetConfig+0x9a>
    else if (cfgidx != pdev->dev_config)
 8006142:	6841      	ldr	r1, [r0, #4]
 8006144:	428d      	cmp	r5, r1
 8006146:	d025      	beq.n	8006194 <USBD_SetConfig+0xb8>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006148:	b2c9      	uxtb	r1, r1
 800614a:	f7ff fd8a 	bl	8005c62 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800614e:	4b13      	ldr	r3, [pc, #76]	; (800619c <USBD_SetConfig+0xc0>)
 8006150:	7819      	ldrb	r1, [r3, #0]
 8006152:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006154:	4620      	mov	r0, r4
 8006156:	f7ff fd7b 	bl	8005c50 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800615a:	4605      	mov	r5, r0
 800615c:	b1b0      	cbz	r0, 800618c <USBD_SetConfig+0xb0>
        USBD_CtlError(pdev, req);
 800615e:	4631      	mov	r1, r6
 8006160:	4620      	mov	r0, r4
 8006162:	f7ff fec5 	bl	8005ef0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006166:	7921      	ldrb	r1, [r4, #4]
 8006168:	4620      	mov	r0, r4
 800616a:	f7ff fd7a 	bl	8005c62 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800616e:	2302      	movs	r3, #2
 8006170:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006174:	e7c8      	b.n	8006108 <USBD_SetConfig+0x2c>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006176:	2302      	movs	r3, #2
 8006178:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800617c:	6045      	str	r5, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800617e:	4629      	mov	r1, r5
 8006180:	f7ff fd6f 	bl	8005c62 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006184:	4620      	mov	r0, r4
 8006186:	f000 f9eb 	bl	8006560 <USBD_CtlSendStatus>
 800618a:	e7bd      	b.n	8006108 <USBD_SetConfig+0x2c>
        (void)USBD_CtlSendStatus(pdev);
 800618c:	4620      	mov	r0, r4
 800618e:	f000 f9e7 	bl	8006560 <USBD_CtlSendStatus>
 8006192:	e7b9      	b.n	8006108 <USBD_SetConfig+0x2c>
      (void)USBD_CtlSendStatus(pdev);
 8006194:	f000 f9e4 	bl	8006560 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8006198:	2500      	movs	r5, #0
 800619a:	e7b5      	b.n	8006108 <USBD_SetConfig+0x2c>
 800619c:	20000278 	.word	0x20000278

080061a0 <USBD_GetConfig>:
{
 80061a0:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80061a2:	88cb      	ldrh	r3, [r1, #6]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d10a      	bne.n	80061be <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 80061a8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d909      	bls.n	80061c4 <USBD_GetConfig+0x24>
 80061b0:	2b03      	cmp	r3, #3
 80061b2:	d109      	bne.n	80061c8 <USBD_GetConfig+0x28>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80061b4:	2201      	movs	r2, #1
 80061b6:	1d01      	adds	r1, r0, #4
 80061b8:	f000 f9b5 	bl	8006526 <USBD_CtlSendData>
      break;
 80061bc:	e001      	b.n	80061c2 <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 80061be:	f7ff fe97 	bl	8005ef0 <USBD_CtlError>
}
 80061c2:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 80061c4:	b25b      	sxtb	r3, r3
 80061c6:	b913      	cbnz	r3, 80061ce <USBD_GetConfig+0x2e>
      USBD_CtlError(pdev, req);
 80061c8:	f7ff fe92 	bl	8005ef0 <USBD_CtlError>
}
 80061cc:	e7f9      	b.n	80061c2 <USBD_GetConfig+0x22>
      pdev->dev_default_config = 0U;
 80061ce:	4601      	mov	r1, r0
 80061d0:	2300      	movs	r3, #0
 80061d2:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80061d6:	2201      	movs	r2, #1
 80061d8:	f000 f9a5 	bl	8006526 <USBD_CtlSendData>
      break;
 80061dc:	e7f1      	b.n	80061c2 <USBD_GetConfig+0x22>

080061de <USBD_GetStatus>:
{
 80061de:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80061e0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80061e4:	3b01      	subs	r3, #1
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d812      	bhi.n	8006210 <USBD_GetStatus+0x32>
    if (req->wLength != 0x2U)
 80061ea:	88cb      	ldrh	r3, [r1, #6]
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d10c      	bne.n	800620a <USBD_GetStatus+0x2c>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80061f0:	2301      	movs	r3, #1
 80061f2:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 80061f4:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80061f8:	b10b      	cbz	r3, 80061fe <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80061fa:	2303      	movs	r3, #3
 80061fc:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80061fe:	2202      	movs	r2, #2
 8006200:	f100 010c 	add.w	r1, r0, #12
 8006204:	f000 f98f 	bl	8006526 <USBD_CtlSendData>
}
 8006208:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 800620a:	f7ff fe71 	bl	8005ef0 <USBD_CtlError>
      break;
 800620e:	e7fb      	b.n	8006208 <USBD_GetStatus+0x2a>
    USBD_CtlError(pdev, req);
 8006210:	f7ff fe6e 	bl	8005ef0 <USBD_CtlError>
}
 8006214:	e7f8      	b.n	8006208 <USBD_GetStatus+0x2a>

08006216 <USBD_ClrFeature>:
{
 8006216:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8006218:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800621c:	3b01      	subs	r3, #1
 800621e:	2b02      	cmp	r3, #2
 8006220:	d809      	bhi.n	8006236 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006222:	884b      	ldrh	r3, [r1, #2]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d000      	beq.n	800622a <USBD_ClrFeature+0x14>
}
 8006228:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006230:	f000 f996 	bl	8006560 <USBD_CtlSendStatus>
 8006234:	e7f8      	b.n	8006228 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8006236:	f7ff fe5b 	bl	8005ef0 <USBD_CtlError>
}
 800623a:	e7f5      	b.n	8006228 <USBD_ClrFeature+0x12>

0800623c <USBD_StdDevReq>:
{
 800623c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800623e:	780c      	ldrb	r4, [r1, #0]
 8006240:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8006244:	2c20      	cmp	r4, #32
 8006246:	d006      	beq.n	8006256 <USBD_StdDevReq+0x1a>
 8006248:	2c40      	cmp	r4, #64	; 0x40
 800624a:	d004      	beq.n	8006256 <USBD_StdDevReq+0x1a>
 800624c:	b154      	cbz	r4, 8006264 <USBD_StdDevReq+0x28>
    USBD_CtlError(pdev, req);
 800624e:	f7ff fe4f 	bl	8005ef0 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006252:	2400      	movs	r4, #0
    break;
 8006254:	e004      	b.n	8006260 <USBD_StdDevReq+0x24>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006256:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	4798      	blx	r3
 800625e:	4604      	mov	r4, r0
}
 8006260:	4620      	mov	r0, r4
 8006262:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 8006264:	784d      	ldrb	r5, [r1, #1]
 8006266:	2d09      	cmp	r5, #9
 8006268:	d81d      	bhi.n	80062a6 <USBD_StdDevReq+0x6a>
 800626a:	e8df f005 	tbb	[pc, r5]
 800626e:	1912      	.short	0x1912
 8006270:	081c161c 	.word	0x081c161c
 8006274:	0b0f1c05 	.word	0x0b0f1c05
      USBD_GetDescriptor(pdev, req);
 8006278:	f7ff fe44 	bl	8005f04 <USBD_GetDescriptor>
      break;
 800627c:	e7f0      	b.n	8006260 <USBD_StdDevReq+0x24>
      USBD_SetAddress(pdev, req);
 800627e:	f7ff ff06 	bl	800608e <USBD_SetAddress>
      break;
 8006282:	e7ed      	b.n	8006260 <USBD_StdDevReq+0x24>
      ret = USBD_SetConfig(pdev, req);
 8006284:	f7ff ff2a 	bl	80060dc <USBD_SetConfig>
 8006288:	4604      	mov	r4, r0
      break;
 800628a:	e7e9      	b.n	8006260 <USBD_StdDevReq+0x24>
      USBD_GetConfig(pdev, req);
 800628c:	f7ff ff88 	bl	80061a0 <USBD_GetConfig>
      break;
 8006290:	e7e6      	b.n	8006260 <USBD_StdDevReq+0x24>
      USBD_GetStatus(pdev, req);
 8006292:	f7ff ffa4 	bl	80061de <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8006296:	462c      	mov	r4, r5
      break;
 8006298:	e7e2      	b.n	8006260 <USBD_StdDevReq+0x24>
      USBD_SetFeature(pdev, req);
 800629a:	f7ff fe0b 	bl	8005eb4 <USBD_SetFeature>
      break;
 800629e:	e7df      	b.n	8006260 <USBD_StdDevReq+0x24>
      USBD_ClrFeature(pdev, req);
 80062a0:	f7ff ffb9 	bl	8006216 <USBD_ClrFeature>
      break;
 80062a4:	e7dc      	b.n	8006260 <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 80062a6:	f7ff fe23 	bl	8005ef0 <USBD_CtlError>
      break;
 80062aa:	e7d9      	b.n	8006260 <USBD_StdDevReq+0x24>

080062ac <USBD_StdItfReq>:
{
 80062ac:	b570      	push	{r4, r5, r6, lr}
 80062ae:	4605      	mov	r5, r0
 80062b0:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062b2:	780b      	ldrb	r3, [r1, #0]
 80062b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	d007      	beq.n	80062cc <USBD_StdItfReq+0x20>
 80062bc:	2b40      	cmp	r3, #64	; 0x40
 80062be:	d005      	beq.n	80062cc <USBD_StdItfReq+0x20>
 80062c0:	b123      	cbz	r3, 80062cc <USBD_StdItfReq+0x20>
    USBD_CtlError(pdev, req);
 80062c2:	f7ff fe15 	bl	8005ef0 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80062c6:	2600      	movs	r6, #0
}
 80062c8:	4630      	mov	r0, r6
 80062ca:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 80062cc:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 80062d0:	3b01      	subs	r3, #1
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d818      	bhi.n	8006308 <USBD_StdItfReq+0x5c>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062d6:	7923      	ldrb	r3, [r4, #4]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d80f      	bhi.n	80062fc <USBD_StdItfReq+0x50>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062dc:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	4621      	mov	r1, r4
 80062e4:	4628      	mov	r0, r5
 80062e6:	4798      	blx	r3
 80062e8:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80062ea:	88e3      	ldrh	r3, [r4, #6]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1eb      	bne.n	80062c8 <USBD_StdItfReq+0x1c>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d1e9      	bne.n	80062c8 <USBD_StdItfReq+0x1c>
          (void)USBD_CtlSendStatus(pdev);
 80062f4:	4628      	mov	r0, r5
 80062f6:	f000 f933 	bl	8006560 <USBD_CtlSendStatus>
 80062fa:	e7e5      	b.n	80062c8 <USBD_StdItfReq+0x1c>
        USBD_CtlError(pdev, req);
 80062fc:	4621      	mov	r1, r4
 80062fe:	4628      	mov	r0, r5
 8006300:	f7ff fdf6 	bl	8005ef0 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006304:	2600      	movs	r6, #0
 8006306:	e7df      	b.n	80062c8 <USBD_StdItfReq+0x1c>
      USBD_CtlError(pdev, req);
 8006308:	4621      	mov	r1, r4
 800630a:	4628      	mov	r0, r5
 800630c:	f7ff fdf0 	bl	8005ef0 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006310:	2600      	movs	r6, #0
      break;
 8006312:	e7d9      	b.n	80062c8 <USBD_StdItfReq+0x1c>

08006314 <USBD_StdEPReq>:
{
 8006314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006316:	4606      	mov	r6, r0
 8006318:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800631a:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800631c:	780c      	ldrb	r4, [r1, #0]
 800631e:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8006322:	2c20      	cmp	r4, #32
 8006324:	d008      	beq.n	8006338 <USBD_StdEPReq+0x24>
 8006326:	b2d9      	uxtb	r1, r3
 8006328:	2c40      	cmp	r4, #64	; 0x40
 800632a:	d005      	beq.n	8006338 <USBD_StdEPReq+0x24>
 800632c:	b16c      	cbz	r4, 800634a <USBD_StdEPReq+0x36>
    USBD_CtlError(pdev, req);
 800632e:	4629      	mov	r1, r5
 8006330:	f7ff fdde 	bl	8005ef0 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006334:	2400      	movs	r4, #0
    break;
 8006336:	e006      	b.n	8006346 <USBD_StdEPReq+0x32>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006338:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	4629      	mov	r1, r5
 8006340:	4630      	mov	r0, r6
 8006342:	4798      	blx	r3
 8006344:	4604      	mov	r4, r0
}
 8006346:	4620      	mov	r0, r4
 8006348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (req->bRequest)
 800634a:	786f      	ldrb	r7, [r5, #1]
 800634c:	2f01      	cmp	r7, #1
 800634e:	d037      	beq.n	80063c0 <USBD_StdEPReq+0xac>
 8006350:	2f03      	cmp	r7, #3
 8006352:	d005      	beq.n	8006360 <USBD_StdEPReq+0x4c>
 8006354:	2f00      	cmp	r7, #0
 8006356:	d063      	beq.n	8006420 <USBD_StdEPReq+0x10c>
      USBD_CtlError(pdev, req);
 8006358:	4629      	mov	r1, r5
 800635a:	f7ff fdc9 	bl	8005ef0 <USBD_CtlError>
      break;
 800635e:	e7f2      	b.n	8006346 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8006360:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006364:	2b02      	cmp	r3, #2
 8006366:	d005      	beq.n	8006374 <USBD_StdEPReq+0x60>
 8006368:	2b03      	cmp	r3, #3
 800636a:	d016      	beq.n	800639a <USBD_StdEPReq+0x86>
        USBD_CtlError(pdev, req);
 800636c:	4629      	mov	r1, r5
 800636e:	f7ff fdbf 	bl	8005ef0 <USBD_CtlError>
        break;
 8006372:	e7e8      	b.n	8006346 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006374:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8006378:	bf18      	it	ne
 800637a:	2301      	movne	r3, #1
 800637c:	2900      	cmp	r1, #0
 800637e:	bf08      	it	eq
 8006380:	2300      	moveq	r3, #0
 8006382:	b133      	cbz	r3, 8006392 <USBD_StdEPReq+0x7e>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006384:	f001 f93e 	bl	8007604 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006388:	2180      	movs	r1, #128	; 0x80
 800638a:	4630      	mov	r0, r6
 800638c:	f001 f93a 	bl	8007604 <USBD_LL_StallEP>
 8006390:	e7d9      	b.n	8006346 <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 8006392:	4629      	mov	r1, r5
 8006394:	f7ff fdac 	bl	8005ef0 <USBD_CtlError>
 8006398:	e7d5      	b.n	8006346 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800639a:	886b      	ldrh	r3, [r5, #2]
 800639c:	b94b      	cbnz	r3, 80063b2 <USBD_StdEPReq+0x9e>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800639e:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 80063a2:	bf18      	it	ne
 80063a4:	2301      	movne	r3, #1
 80063a6:	2900      	cmp	r1, #0
 80063a8:	bf08      	it	eq
 80063aa:	2300      	moveq	r3, #0
 80063ac:	b10b      	cbz	r3, 80063b2 <USBD_StdEPReq+0x9e>
 80063ae:	88eb      	ldrh	r3, [r5, #6]
 80063b0:	b11b      	cbz	r3, 80063ba <USBD_StdEPReq+0xa6>
        (void)USBD_CtlSendStatus(pdev);
 80063b2:	4630      	mov	r0, r6
 80063b4:	f000 f8d4 	bl	8006560 <USBD_CtlSendStatus>
        break;
 80063b8:	e7c5      	b.n	8006346 <USBD_StdEPReq+0x32>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80063ba:	f001 f923 	bl	8007604 <USBD_LL_StallEP>
 80063be:	e7f8      	b.n	80063b2 <USBD_StdEPReq+0x9e>
      switch (pdev->dev_state)
 80063c0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d005      	beq.n	80063d4 <USBD_StdEPReq+0xc0>
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d016      	beq.n	80063fa <USBD_StdEPReq+0xe6>
        USBD_CtlError(pdev, req);
 80063cc:	4629      	mov	r1, r5
 80063ce:	f7ff fd8f 	bl	8005ef0 <USBD_CtlError>
        break;
 80063d2:	e7b8      	b.n	8006346 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063d4:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 80063d8:	bf18      	it	ne
 80063da:	2301      	movne	r3, #1
 80063dc:	2900      	cmp	r1, #0
 80063de:	bf08      	it	eq
 80063e0:	2300      	moveq	r3, #0
 80063e2:	b133      	cbz	r3, 80063f2 <USBD_StdEPReq+0xde>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80063e4:	f001 f90e 	bl	8007604 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80063e8:	2180      	movs	r1, #128	; 0x80
 80063ea:	4630      	mov	r0, r6
 80063ec:	f001 f90a 	bl	8007604 <USBD_LL_StallEP>
 80063f0:	e7a9      	b.n	8006346 <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 80063f2:	4629      	mov	r1, r5
 80063f4:	f7ff fd7c 	bl	8005ef0 <USBD_CtlError>
 80063f8:	e7a5      	b.n	8006346 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80063fa:	886b      	ldrh	r3, [r5, #2]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1a2      	bne.n	8006346 <USBD_StdEPReq+0x32>
          if ((ep_addr & 0x7FU) != 0x00U)
 8006400:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8006404:	d109      	bne.n	800641a <USBD_StdEPReq+0x106>
          (void)USBD_CtlSendStatus(pdev);
 8006406:	4630      	mov	r0, r6
 8006408:	f000 f8aa 	bl	8006560 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800640c:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	4629      	mov	r1, r5
 8006414:	4630      	mov	r0, r6
 8006416:	4798      	blx	r3
 8006418:	e795      	b.n	8006346 <USBD_StdEPReq+0x32>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800641a:	f001 f8fa 	bl	8007612 <USBD_LL_ClearStallEP>
 800641e:	e7f2      	b.n	8006406 <USBD_StdEPReq+0xf2>
      switch (pdev->dev_state)
 8006420:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006424:	2a02      	cmp	r2, #2
 8006426:	d006      	beq.n	8006436 <USBD_StdEPReq+0x122>
 8006428:	2a03      	cmp	r2, #3
 800642a:	d02e      	beq.n	800648a <USBD_StdEPReq+0x176>
        USBD_CtlError(pdev, req);
 800642c:	4629      	mov	r1, r5
 800642e:	f7ff fd5f 	bl	8005ef0 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006432:	463c      	mov	r4, r7
        break;
 8006434:	e787      	b.n	8006346 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006436:	f1b1 0280 	subs.w	r2, r1, #128	; 0x80
 800643a:	bf18      	it	ne
 800643c:	2201      	movne	r2, #1
 800643e:	2900      	cmp	r1, #0
 8006440:	bf08      	it	eq
 8006442:	2200      	moveq	r2, #0
 8006444:	b99a      	cbnz	r2, 800646e <USBD_StdEPReq+0x15a>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006446:	f013 0f80 	tst.w	r3, #128	; 0x80
 800644a:	d115      	bne.n	8006478 <USBD_StdEPReq+0x164>
              &pdev->ep_out[ep_addr & 0x7FU];
 800644c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006450:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006454:	0089      	lsls	r1, r1, #2
 8006456:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800645a:	4401      	add	r1, r0
 800645c:	3104      	adds	r1, #4
        pep->status = 0x0000U;
 800645e:	2300      	movs	r3, #0
 8006460:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006462:	2202      	movs	r2, #2
 8006464:	4630      	mov	r0, r6
 8006466:	f000 f85e 	bl	8006526 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800646a:	463c      	mov	r4, r7
        break;
 800646c:	e76b      	b.n	8006346 <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 800646e:	4629      	mov	r1, r5
 8006470:	f7ff fd3e 	bl	8005ef0 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006474:	463c      	mov	r4, r7
          break;
 8006476:	e766      	b.n	8006346 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006478:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800647c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006480:	0089      	lsls	r1, r1, #2
 8006482:	3110      	adds	r1, #16
 8006484:	4401      	add	r1, r0
 8006486:	3104      	adds	r1, #4
 8006488:	e7e9      	b.n	800645e <USBD_StdEPReq+0x14a>
        if ((ep_addr & 0x80U) == 0x80U)
 800648a:	b25b      	sxtb	r3, r3
 800648c:	2b00      	cmp	r3, #0
 800648e:	db24      	blt.n	80064da <USBD_StdEPReq+0x1c6>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006490:	f001 020f 	and.w	r2, r1, #15
 8006494:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006498:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800649c:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 80064a0:	b34a      	cbz	r2, 80064f6 <USBD_StdEPReq+0x1e2>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	db2c      	blt.n	8006500 <USBD_StdEPReq+0x1ec>
              &pdev->ep_out[ep_addr & 0x7FU];
 80064a6:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80064ae:	009c      	lsls	r4, r3, #2
 80064b0:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 80064b4:	4434      	add	r4, r6
 80064b6:	3404      	adds	r4, #4
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80064b8:	2980      	cmp	r1, #128	; 0x80
 80064ba:	bf14      	ite	ne
 80064bc:	2300      	movne	r3, #0
 80064be:	2301      	moveq	r3, #1
 80064c0:	2900      	cmp	r1, #0
 80064c2:	bf08      	it	eq
 80064c4:	2301      	moveq	r3, #1
 80064c6:	b323      	cbz	r3, 8006512 <USBD_StdEPReq+0x1fe>
            pep->status = 0x0000U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064cc:	2202      	movs	r2, #2
 80064ce:	4621      	mov	r1, r4
 80064d0:	4630      	mov	r0, r6
 80064d2:	f000 f828 	bl	8006526 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80064d6:	463c      	mov	r4, r7
          break;
 80064d8:	e735      	b.n	8006346 <USBD_StdEPReq+0x32>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064da:	f001 020f 	and.w	r2, r1, #15
 80064de:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80064e2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80064e6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80064e8:	2a00      	cmp	r2, #0
 80064ea:	d1da      	bne.n	80064a2 <USBD_StdEPReq+0x18e>
            USBD_CtlError(pdev, req);
 80064ec:	4629      	mov	r1, r5
 80064ee:	f7ff fcff 	bl	8005ef0 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80064f2:	463c      	mov	r4, r7
            break;
 80064f4:	e727      	b.n	8006346 <USBD_StdEPReq+0x32>
            USBD_CtlError(pdev, req);
 80064f6:	4629      	mov	r1, r5
 80064f8:	f7ff fcfa 	bl	8005ef0 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80064fc:	463c      	mov	r4, r7
            break;
 80064fe:	e722      	b.n	8006346 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006500:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8006504:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006508:	009c      	lsls	r4, r3, #2
 800650a:	3410      	adds	r4, #16
 800650c:	4434      	add	r4, r6
 800650e:	3404      	adds	r4, #4
 8006510:	e7d2      	b.n	80064b8 <USBD_StdEPReq+0x1a4>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006512:	4630      	mov	r0, r6
 8006514:	f001 f884 	bl	8007620 <USBD_LL_IsStallEP>
 8006518:	b110      	cbz	r0, 8006520 <USBD_StdEPReq+0x20c>
            pep->status = 0x0001U;
 800651a:	2301      	movs	r3, #1
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	e7d5      	b.n	80064cc <USBD_StdEPReq+0x1b8>
            pep->status = 0x0000U;
 8006520:	2300      	movs	r3, #0
 8006522:	6023      	str	r3, [r4, #0]
 8006524:	e7d2      	b.n	80064cc <USBD_StdEPReq+0x1b8>

08006526 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006526:	b510      	push	{r4, lr}
 8006528:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800652a:	2202      	movs	r2, #2
 800652c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006530:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length = len;
 8006532:	61c3      	str	r3, [r0, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006534:	460a      	mov	r2, r1
 8006536:	2100      	movs	r1, #0
 8006538:	f001 f890 	bl	800765c <USBD_LL_Transmit>

  return USBD_OK;
}
 800653c:	2000      	movs	r0, #0
 800653e:	bd10      	pop	{r4, pc}

08006540 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006540:	b508      	push	{r3, lr}
 8006542:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006544:	460a      	mov	r2, r1
 8006546:	2100      	movs	r1, #0
 8006548:	f001 f888 	bl	800765c <USBD_LL_Transmit>

  return USBD_OK;
}
 800654c:	2000      	movs	r0, #0
 800654e:	bd08      	pop	{r3, pc}

08006550 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006550:	b508      	push	{r3, lr}
 8006552:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006554:	460a      	mov	r2, r1
 8006556:	2100      	movs	r1, #0
 8006558:	f001 f887 	bl	800766a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800655c:	2000      	movs	r0, #0
 800655e:	bd08      	pop	{r3, pc}

08006560 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006560:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006562:	2304      	movs	r3, #4
 8006564:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006568:	2300      	movs	r3, #0
 800656a:	461a      	mov	r2, r3
 800656c:	4619      	mov	r1, r3
 800656e:	f001 f875 	bl	800765c <USBD_LL_Transmit>

  return USBD_OK;
}
 8006572:	2000      	movs	r0, #0
 8006574:	bd08      	pop	{r3, pc}

08006576 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006576:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006578:	2305      	movs	r3, #5
 800657a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800657e:	2300      	movs	r3, #0
 8006580:	461a      	mov	r2, r3
 8006582:	4619      	mov	r1, r3
 8006584:	f001 f871 	bl	800766a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006588:	2000      	movs	r0, #0
 800658a:	bd08      	pop	{r3, pc}

0800658c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800658c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006590:	b089      	sub	sp, #36	; 0x24
 8006592:	9003      	str	r0, [sp, #12]
 8006594:	9105      	str	r1, [sp, #20]
 8006596:	4611      	mov	r1, r2
 8006598:	9207      	str	r2, [sp, #28]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800659a:	4a67      	ldr	r2, [pc, #412]	; (8006738 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ac>)
 800659c:	fba2 2303 	umull	r2, r3, r2, r3
 80065a0:	0a1b      	lsrs	r3, r3, #8
 80065a2:	9306      	str	r3, [sp, #24]
  currentMCU = BlockIndex;
 80065a4:	9104      	str	r1, [sp, #16]
  

  while(currentMCU < (numberMCU + BlockIndex))
 80065a6:	e0a4      	b.n	80066f2 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x166>
    
    for(i= 0; i <  16; i+=2)
    {
      if(i == 8)
      {
        pLum = pInBuffer + 128;
 80065a8:	9b03      	ldr	r3, [sp, #12]
 80065aa:	f103 0780 	add.w	r7, r3, #128	; 0x80
 80065ae:	e08e      	b.n	80066ce <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x142>
        
        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
          {           
            cbcomp = (int32_t)(*(pChrom));
 80065b0:	f898 5000 	ldrb.w	r5, [r8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80065b4:	4b61      	ldr	r3, [pc, #388]	; (800673c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b0>)
 80065b6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80065ba:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
            
            crcomp = (int32_t)(*(pChrom + 64));
 80065be:	f898 2040 	ldrb.w	r2, [r8, #64]	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 80065c2:	f503 6188 	add.w	r1, r3, #1088	; 0x440
 80065c6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 80065ca:	f503 6604 	add.w	r6, r3, #2112	; 0x840
 80065ce:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 80065d2:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 80065d6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80065da:	441a      	add	r2, r3
          
            
            
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
            ycomp = (int32_t)(*(pLum +j));
 80065dc:	5d3e      	ldrb	r6, [r7, r4]
            
            *(__IO uint32_t *)pOutAddr = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 80065de:	198d      	adds	r5, r1, r6
 80065e0:	f505 7580 	add.w	r5, r5, #256	; 0x100
 80065e4:	4b56      	ldr	r3, [pc, #344]	; (8006740 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b4>)
 80065e6:	f813 9005 	ldrb.w	r9, [r3, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 80065ea:	eb06 4522 	add.w	r5, r6, r2, asr #16
 80065ee:	f505 7580 	add.w	r5, r5, #256	; 0x100
 80065f2:	5d5d      	ldrb	r5, [r3, r5]
 80065f4:	022d      	lsls	r5, r5, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 80065f6:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 80065fa:	4406      	add	r6, r0
 80065fc:	f506 7680 	add.w	r6, r6, #256	; 0x100
 8006600:	5d9e      	ldrb	r6, [r3, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8006602:	4335      	orrs	r5, r6
            *(__IO uint32_t *)pOutAddr = 
 8006604:	f8cc 5000 	str.w	r5, [ip]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8006608:	1c65      	adds	r5, r4, #1
 800660a:	5d7e      	ldrb	r6, [r7, r5]
            
            *((__IO uint32_t *)(pOutAddr + 4)) = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800660c:	198d      	adds	r5, r1, r6
 800660e:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8006612:	f813 9005 	ldrb.w	r9, [r3, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8006616:	eb06 4522 	add.w	r5, r6, r2, asr #16
 800661a:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800661e:	5d5d      	ldrb	r5, [r3, r5]
 8006620:	022d      	lsls	r5, r5, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8006622:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 8006626:	4406      	add	r6, r0
 8006628:	f506 7680 	add.w	r6, r6, #256	; 0x100
 800662c:	5d9e      	ldrb	r6, [r3, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800662e:	4335      	orrs	r5, r6
            *((__IO uint32_t *)(pOutAddr + 4)) = 
 8006630:	f8cc 5004 	str.w	r5, [ip, #4]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 8006634:	f104 0508 	add.w	r5, r4, #8
 8006638:	5d7e      	ldrb	r6, [r7, r5]
            
            *(__IO uint32_t *)pOutAddr2 = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800663a:	198d      	adds	r5, r1, r6
 800663c:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8006640:	f813 9005 	ldrb.w	r9, [r3, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8006644:	eb06 4522 	add.w	r5, r6, r2, asr #16
 8006648:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800664c:	5d5d      	ldrb	r5, [r3, r5]
 800664e:	022d      	lsls	r5, r5, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8006650:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 8006654:	4406      	add	r6, r0
 8006656:	f506 7680 	add.w	r6, r6, #256	; 0x100
 800665a:	5d9e      	ldrb	r6, [r3, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800665c:	4335      	orrs	r5, r6
            *(__IO uint32_t *)pOutAddr2 = 
 800665e:	f8ce 5000 	str.w	r5, [lr]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 8006662:	f104 0509 	add.w	r5, r4, #9
 8006666:	5d7d      	ldrb	r5, [r7, r5]
            
            *((__IO uint32_t *)(pOutAddr2 +4)) = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8006668:	4429      	add	r1, r5
 800666a:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800666e:	5c5e      	ldrb	r6, [r3, r1]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8006670:	eb05 4122 	add.w	r1, r5, r2, asr #16
 8006674:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8006678:	5c59      	ldrb	r1, [r3, r1]
 800667a:	0209      	lsls	r1, r1, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800667c:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 8006680:	1942      	adds	r2, r0, r5
 8006682:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006686:	5c9b      	ldrb	r3, [r3, r2]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8006688:	430b      	orrs	r3, r1
            *((__IO uint32_t *)(pOutAddr2 +4)) = 
 800668a:	f8ce 3004 	str.w	r3, [lr, #4]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 800668e:	f10c 0c08 	add.w	ip, ip, #8
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 8006692:	f10e 0e08 	add.w	lr, lr, #8
          
            pChrom++;
 8006696:	f108 0801 	add.w	r8, r8, #1
          for(j=0; j < 8; j+=2)
 800669a:	3402      	adds	r4, #2
 800669c:	2c07      	cmp	r4, #7
 800669e:	d987      	bls.n	80065b0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x24>
          }
          pLum += 64;                      
 80066a0:	3740      	adds	r7, #64	; 0x40
        for(k= 0; k<2; k++)
 80066a2:	f10b 0b01 	add.w	fp, fp, #1
 80066a6:	f1bb 0f01 	cmp.w	fp, #1
 80066aa:	d801      	bhi.n	80066b0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x124>
          for(j=0; j < 8; j+=2)
 80066ac:	2400      	movs	r4, #0
 80066ae:	e7f5      	b.n	800669c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x110>
        }

        pLum = pLum - 128 + 16;
 80066b0:	3f70      	subs	r7, #112	; 0x70
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 80066b2:	9b01      	ldr	r3, [sp, #4]
 80066b4:	9a02      	ldr	r2, [sp, #8]
 80066b6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80066ba:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
 80066bc:	f10a 0a02 	add.w	sl, sl, #2
 80066c0:	f1ba 0f0f 	cmp.w	sl, #15
 80066c4:	d811      	bhi.n	80066ea <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x15e>
      if(i == 8)
 80066c6:	f1ba 0f08 	cmp.w	sl, #8
 80066ca:	f43f af6d 	beq.w	80065a8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1c>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80066ce:	4b1b      	ldr	r3, [pc, #108]	; (800673c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b0>)
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	9a01      	ldr	r2, [sp, #4]
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d9f1      	bls.n	80066bc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x130>
        pOutAddr = pOutBuffer + refline;
 80066d8:	9b05      	ldr	r3, [sp, #20]
 80066da:	eb03 0c02 	add.w	ip, r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 80066de:	9b02      	ldr	r3, [sp, #8]
 80066e0:	eb0c 0e03 	add.w	lr, ip, r3
        for(k= 0; k<2; k++)
 80066e4:	f04f 0b00 	mov.w	fp, #0
 80066e8:	e7dd      	b.n	80066a6 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x11a>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 80066ea:	9b03      	ldr	r3, [sp, #12]
 80066ec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80066f0:	9303      	str	r3, [sp, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80066f2:	9b06      	ldr	r3, [sp, #24]
 80066f4:	9a07      	ldr	r2, [sp, #28]
 80066f6:	4413      	add	r3, r2
 80066f8:	9a04      	ldr	r2, [sp, #16]
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d917      	bls.n	800672e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1a2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 80066fe:	9c04      	ldr	r4, [sp, #16]
 8006700:	0120      	lsls	r0, r4, #4
 8006702:	490e      	ldr	r1, [pc, #56]	; (800673c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b0>)
 8006704:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8006706:	fbb0 f2f3 	udiv	r2, r0, r3
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800670a:	fb03 0312 	mls	r3, r3, r2, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800670e:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8006710:	9102      	str	r1, [sp, #8]
 8006712:	fb01 f202 	mul.w	r2, r1, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800671c:	9301      	str	r3, [sp, #4]
    currentMCU++;
 800671e:	1c63      	adds	r3, r4, #1
 8006720:	9304      	str	r3, [sp, #16]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 8006722:	9f03      	ldr	r7, [sp, #12]
 8006724:	f507 7880 	add.w	r8, r7, #256	; 0x100
    for(i= 0; i <  16; i+=2)
 8006728:	f04f 0a00 	mov.w	sl, #0
 800672c:	e7c8      	b.n	80066c0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x134>
  }
  return numberMCU;
}
 800672e:	9806      	ldr	r0, [sp, #24]
 8006730:	b009      	add	sp, #36	; 0x24
 8006732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006736:	bf00      	nop
 8006738:	aaaaaaab 	.word	0xaaaaaaab
 800673c:	2000027c 	.word	0x2000027c
 8006740:	080089dc 	.word	0x080089dc

08006744 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8006744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006748:	b087      	sub	sp, #28
 800674a:	9002      	str	r0, [sp, #8]
 800674c:	9103      	str	r1, [sp, #12]
 800674e:	9205      	str	r2, [sp, #20]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8006750:	0a1b      	lsrs	r3, r3, #8
 8006752:	9304      	str	r3, [sp, #16]
  currentMCU = BlockIndex;
 8006754:	9200      	str	r2, [sp, #0]
  

  while(currentMCU < (numberMCU + BlockIndex))
 8006756:	e066      	b.n	8006826 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xe2>
        
        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
          {           
            cbcomp = (int32_t)(*(pChrom));
 8006758:	f89c 4000 	ldrb.w	r4, [ip]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800675c:	4a44      	ldr	r2, [pc, #272]	; (8006870 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x12c>)
 800675e:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8006762:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            
            crcomp = (int32_t)(*(pChrom + 64));
 8006766:	f89c 3040 	ldrb.w	r3, [ip, #64]	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800676a:	f502 6588 	add.w	r5, r2, #1088	; 0x440
 800676e:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8006772:	f502 6504 	add.w	r5, r2, #2112	; 0x840
 8006776:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 800677a:	f502 6244 	add.w	r2, r2, #3136	; 0xc40
 800677e:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8006782:	442b      	add	r3, r5
          
            
            
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888) 
          
            ycomp = (int32_t)(*(pLum +j));
 8006784:	f81e 5000 	ldrb.w	r5, [lr, r0]
            
            *(__IO uint32_t *)pOutAddr = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8006788:	1972      	adds	r2, r6, r5
 800678a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800678e:	4c39      	ldr	r4, [pc, #228]	; (8006874 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x130>)
 8006790:	f814 8002 	ldrb.w	r8, [r4, r2]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8006794:	eb05 4223 	add.w	r2, r5, r3, asr #16
 8006798:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800679c:	5ca2      	ldrb	r2, [r4, r2]
 800679e:	0212      	lsls	r2, r2, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 80067a0:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 80067a4:	440d      	add	r5, r1
 80067a6:	f505 7580 	add.w	r5, r5, #256	; 0x100
 80067aa:	5d65      	ldrb	r5, [r4, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 80067ac:	432a      	orrs	r2, r5
            *(__IO uint32_t *)pOutAddr = 
 80067ae:	603a      	str	r2, [r7, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80067b0:	1c42      	adds	r2, r0, #1
 80067b2:	f81e 2002 	ldrb.w	r2, [lr, r2]
            
            *((__IO uint32_t *)(pOutAddr + 4)) = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 80067b6:	4416      	add	r6, r2
 80067b8:	f506 7680 	add.w	r6, r6, #256	; 0x100
 80067bc:	5da5      	ldrb	r5, [r4, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 80067be:	eb02 4323 	add.w	r3, r2, r3, asr #16
 80067c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80067c6:	5ce3      	ldrb	r3, [r4, r3]
 80067c8:	021b      	lsls	r3, r3, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 80067ca:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);         
 80067ce:	4411      	add	r1, r2
 80067d0:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80067d4:	5c62      	ldrb	r2, [r4, r1]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 80067d6:	4313      	orrs	r3, r2
            *((__IO uint32_t *)(pOutAddr + 4)) = 
 80067d8:	607b      	str	r3, [r7, #4]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
          
#endif /* JPEG_RGB_FORMAT*/          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 80067da:	3708      	adds	r7, #8
          
            pChrom++;
 80067dc:	f10c 0c01 	add.w	ip, ip, #1
          for(j=0; j < 8; j+=2)
 80067e0:	3002      	adds	r0, #2
 80067e2:	2807      	cmp	r0, #7
 80067e4:	d9b8      	bls.n	8006758 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14>
          }
          pLum += 64;                      
 80067e6:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
        for(k= 0; k<2; k++)
 80067ea:	f10b 0b01 	add.w	fp, fp, #1
 80067ee:	f1bb 0f01 	cmp.w	fp, #1
 80067f2:	d801      	bhi.n	80067f8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xb4>
          for(j=0; j < 8; j+=2)
 80067f4:	2000      	movs	r0, #0
 80067f6:	e7f4      	b.n	80067e2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9e>
        }
        
        pLum = pLum - 128 + 8;
 80067f8:	f1ae 0e78 	sub.w	lr, lr, #120	; 0x78
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
 80067fc:	9b01      	ldr	r3, [sp, #4]
 80067fe:	449a      	add	sl, r3
    for(i= 0; i <  8; i++)
 8006800:	f109 0901 	add.w	r9, r9, #1
 8006804:	f1b9 0f07 	cmp.w	r9, #7
 8006808:	d809      	bhi.n	800681e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xda>
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800680a:	4b19      	ldr	r3, [pc, #100]	; (8006870 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x12c>)
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	4553      	cmp	r3, sl
 8006810:	d9f6      	bls.n	8006800 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xbc>
        pOutAddr = pOutBuffer + refline;
 8006812:	9b03      	ldr	r3, [sp, #12]
 8006814:	eb03 070a 	add.w	r7, r3, sl
        for(k= 0; k<2; k++)
 8006818:	f04f 0b00 	mov.w	fp, #0
 800681c:	e7e7      	b.n	80067ee <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xaa>
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 800681e:	9b02      	ldr	r3, [sp, #8]
 8006820:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006824:	9302      	str	r3, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 8006826:	9b04      	ldr	r3, [sp, #16]
 8006828:	9a05      	ldr	r2, [sp, #20]
 800682a:	4413      	add	r3, r2
 800682c:	9a00      	ldr	r2, [sp, #0]
 800682e:	4293      	cmp	r3, r2
 8006830:	d919      	bls.n	8006866 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x122>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8006832:	9800      	ldr	r0, [sp, #0]
 8006834:	ea4f 1a00 	mov.w	sl, r0, lsl #4
 8006838:	490d      	ldr	r1, [pc, #52]	; (8006870 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x12c>)
 800683a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800683c:	fbba f2f3 	udiv	r2, sl, r3
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8006840:	fb03 aa12 	mls	sl, r3, r2, sl
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8006844:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	fb03 f202 	mul.w	r2, r3, r2
 800684c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8006850:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
    currentMCU++;
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	9300      	str	r3, [sp, #0]
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8006858:	9b02      	ldr	r3, [sp, #8]
 800685a:	f103 0c80 	add.w	ip, r3, #128	; 0x80
    pLum = pInBuffer;
 800685e:	469e      	mov	lr, r3
    for(i= 0; i <  8; i++)
 8006860:	f04f 0900 	mov.w	r9, #0
 8006864:	e7ce      	b.n	8006804 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xc0>
  }
  return numberMCU;
}
 8006866:	9804      	ldr	r0, [sp, #16]
 8006868:	b007      	add	sp, #28
 800686a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686e:	bf00      	nop
 8006870:	2000027c 	.word	0x2000027c
 8006874:	080089dc 	.word	0x080089dc

08006878 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8006878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687c:	b085      	sub	sp, #20
 800687e:	9000      	str	r0, [sp, #0]
 8006880:	9101      	str	r1, [sp, #4]
 8006882:	4692      	mov	sl, r2
 8006884:	9203      	str	r2, [sp, #12]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8006886:	4a35      	ldr	r2, [pc, #212]	; (800695c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe4>)
 8006888:	fba2 2303 	umull	r2, r3, r2, r3
 800688c:	09db      	lsrs	r3, r3, #7
 800688e:	9302      	str	r3, [sp, #8]
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
 8006890:	e042      	b.n	8006918 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xa0>
        pOutAddr = pOutBuffer+ refline;
        

          for(j=0; j < 8; j++)
          {           
            cbcomp = (int32_t)(*pChrom);
 8006892:	7825      	ldrb	r5, [r4, #0]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8006894:	4b32      	ldr	r3, [pc, #200]	; (8006960 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
 8006896:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800689a:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
            
            crcomp = (int32_t)(*(pChrom + 64));
 800689e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 80068a2:	f503 6688 	add.w	r6, r3, #1088	; 0x440
 80068a6:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 80068aa:	f503 6c04 	add.w	ip, r3, #2112	; 0x840
 80068ae:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80068b2:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 80068b6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80068ba:	441a      	add	r2, r3
                      
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
            ycomp = (int32_t)(*(pLum +j));
 80068bc:	f818 3000 	ldrb.w	r3, [r8, r0]
            
            *(__IO uint32_t *)pOutAddr = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 80068c0:	441e      	add	r6, r3
 80068c2:	f506 7680 	add.w	r6, r6, #256	; 0x100
 80068c6:	4d27      	ldr	r5, [pc, #156]	; (8006964 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
 80068c8:	5dae      	ldrb	r6, [r5, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 80068ca:	eb03 4222 	add.w	r2, r3, r2, asr #16
 80068ce:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80068d2:	5caa      	ldrb	r2, [r5, r2]
 80068d4:	0212      	lsls	r2, r2, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 80068d6:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);       
 80068da:	440b      	add	r3, r1
 80068dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80068e0:	5ceb      	ldrb	r3, [r5, r3]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 80068e2:	431e      	orrs	r6, r3
            *(__IO uint32_t *)pOutAddr = 
 80068e4:	f847 6b04 	str.w	r6, [r7], #4
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
          
            pChrom++;
 80068e8:	3401      	adds	r4, #1
          for(j=0; j < 8; j++)
 80068ea:	3001      	adds	r0, #1
 80068ec:	2807      	cmp	r0, #7
 80068ee:	d9d0      	bls.n	8006892 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x1a>
          }
          pLum += 8;
 80068f0:	f108 0808 	add.w	r8, r8, #8

        refline += JPEG_ConvertorParams.ScaledWidth;          
 80068f4:	44d9      	add	r9, fp
    for(i= 0; i <  8; i++)
 80068f6:	f10e 0e01 	add.w	lr, lr, #1
 80068fa:	f1be 0f07 	cmp.w	lr, #7
 80068fe:	d808      	bhi.n	8006912 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x9a>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8006900:	4b17      	ldr	r3, [pc, #92]	; (8006960 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	454b      	cmp	r3, r9
 8006906:	d9f6      	bls.n	80068f6 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7e>
        pOutAddr = pOutBuffer+ refline;
 8006908:	9b01      	ldr	r3, [sp, #4]
 800690a:	eb03 0709 	add.w	r7, r3, r9
          for(j=0; j < 8; j++)
 800690e:	2000      	movs	r0, #0
 8006910:	e7ec      	b.n	80068ec <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x74>
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8006912:	9b00      	ldr	r3, [sp, #0]
 8006914:	33c0      	adds	r3, #192	; 0xc0
 8006916:	9300      	str	r3, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 8006918:	9b02      	ldr	r3, [sp, #8]
 800691a:	9a03      	ldr	r2, [sp, #12]
 800691c:	4413      	add	r3, r2
 800691e:	4553      	cmp	r3, sl
 8006920:	d918      	bls.n	8006954 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xdc>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8006922:	ea4f 09ca 	mov.w	r9, sl, lsl #3
 8006926:	490e      	ldr	r1, [pc, #56]	; (8006960 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
 8006928:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800692a:	fbb9 f2f3 	udiv	r2, r9, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800692e:	fb03 9912 	mls	r9, r3, r2, r9
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8006932:	f8d1 b028 	ldr.w	fp, [r1, #40]	; 0x28
 8006936:	fb0b f202 	mul.w	r2, fp, r2
 800693a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800693e:	eb09 09c2 	add.w	r9, r9, r2, lsl #3
    currentMCU++;   
 8006942:	f10a 0a01 	add.w	sl, sl, #1
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8006946:	9b00      	ldr	r3, [sp, #0]
 8006948:	f103 0440 	add.w	r4, r3, #64	; 0x40
    pLum = pInBuffer;
 800694c:	4698      	mov	r8, r3
    for(i= 0; i <  8; i++)
 800694e:	f04f 0e00 	mov.w	lr, #0
 8006952:	e7d2      	b.n	80068fa <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x82>
  }
  return numberMCU;
}
 8006954:	9802      	ldr	r0, [sp, #8]
 8006956:	b005      	add	sp, #20
 8006958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695c:	aaaaaaab 	.word	0xaaaaaaab
 8006960:	2000027c 	.word	0x2000027c
 8006964:	080089dc 	.word	0x080089dc

08006968 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8006968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800696c:	4681      	mov	r9, r0
 800696e:	4692      	mov	sl, r2

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 8006970:	0998      	lsrs	r0, r3, #6
  currentMCU = BlockIndex;
 8006972:	4690      	mov	r8, r2
  
  while(currentMCU < (numberMCU + BlockIndex))
 8006974:	e01a      	b.n	80069ac <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x44>
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
      {  
        for(j=0; j < 8; j++)
        { 
          ySample =   (uint32_t)(*pLum);
 8006976:	f817 4b01 	ldrb.w	r4, [r7], #1

#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
          *(__IO uint32_t *)pOutAddr = ySample |  (ySample << 8) | (ySample << 16);
 800697a:	ea44 2304 	orr.w	r3, r4, r4, lsl #8
 800697e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006982:	f846 3b04 	str.w	r3, [r6], #4
        for(j=0; j < 8; j++)
 8006986:	3501      	adds	r5, #1
 8006988:	2d07      	cmp	r5, #7
 800698a:	d9f4      	bls.n	8006976 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xe>
          
          pOutAddr += JPEG_BYTES_PER_PIXEL;
          pLum++;
        }

        refline += JPEG_ConvertorParams.ScaledWidth;        
 800698c:	4494      	add	ip, r2
    for(i= 0; i <  8; i++)
 800698e:	f10e 0e01 	add.w	lr, lr, #1
 8006992:	f1be 0f07 	cmp.w	lr, #7
 8006996:	d807      	bhi.n	80069a8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x40>
      pOutAddr = pOutBuffer + refline;
 8006998:	eb01 060c 	add.w	r6, r1, ip
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800699c:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	4563      	cmp	r3, ip
 80069a2:	d9f4      	bls.n	800698e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
        for(j=0; j < 8; j++)
 80069a4:	2500      	movs	r5, #0
 80069a6:	e7ef      	b.n	8006988 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x20>
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 80069a8:	f109 0940 	add.w	r9, r9, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
 80069ac:	eb00 030a 	add.w	r3, r0, sl
 80069b0:	4543      	cmp	r3, r8
 80069b2:	d914      	bls.n	80069de <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x76>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80069b4:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 80069b8:	4a0a      	ldr	r2, [pc, #40]	; (80069e4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
 80069ba:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80069bc:	fbbc f4f3 	udiv	r4, ip, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80069c0:	fb03 cc14 	mls	ip, r3, r4, ip
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80069c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80069c6:	fb02 f404 	mul.w	r4, r2, r4
 80069ca:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80069ce:	eb0c 0cc4 	add.w	ip, ip, r4, lsl #3
    currentMCU++;
 80069d2:	f108 0801 	add.w	r8, r8, #1
    pLum = pInBuffer;
 80069d6:	464f      	mov	r7, r9
    for(i= 0; i <  8; i++)
 80069d8:	f04f 0e00 	mov.w	lr, #0
 80069dc:	e7d9      	b.n	8006992 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
 80069de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e2:	bf00      	nop
 80069e4:	2000027c 	.word	0x2000027c

080069e8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 80069e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ec:	b085      	sub	sp, #20
 80069ee:	9203      	str	r2, [sp, #12]
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 80069f0:	0a1b      	lsrs	r3, r3, #8
 80069f2:	9302      	str	r3, [sp, #8]
  currentMCU = BlockIndex;
 80069f4:	4691      	mov	r9, r2
 80069f6:	468a      	mov	sl, r1
  

  while(currentMCU < (numberMCU + BlockIndex))
 80069f8:	e035      	b.n	8006a66 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7e>
      {
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
 80069fa:	f894 c0c0 	ldrb.w	ip, [r4, #192]	; 0xc0
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 80069fe:	7823      	ldrb	r3, [r4, #0]
 8006a00:	fb0c f303 	mul.w	r3, ip, r3
 8006a04:	4a27      	ldr	r2, [pc, #156]	; (8006aa4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xbc>)
 8006a06:	fb82 b703 	smull	fp, r7, r2, r3
 8006a0a:	443b      	add	r3, r7
 8006a0c:	11df      	asrs	r7, r3, #7
            
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8006a0e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006a12:	fb0c f303 	mul.w	r3, ip, r3
 8006a16:	fb82 1b03 	smull	r1, fp, r2, r3
 8006a1a:	445b      	add	r3, fp
 8006a1c:	11db      	asrs	r3, r3, #7
            
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 8006a1e:	f894 b080 	ldrb.w	fp, [r4, #128]	; 0x80
 8006a22:	fb0c fc0b 	mul.w	ip, ip, fp
 8006a26:	fb82 120c 	smull	r1, r2, r2, ip
 8006a2a:	4462      	add	r2, ip
                      
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
          *(__IO uint32_t *)pOutAddr = 
            (c_red << JPEG_RED_OFFSET) | \
            (c_green << JPEG_GREEN_OFFSET) | \
 8006a2c:	021b      	lsls	r3, r3, #8
            (c_red << JPEG_RED_OFFSET) | \
 8006a2e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
            (c_green << JPEG_GREEN_OFFSET) | \
 8006a32:	ea43 13e2 	orr.w	r3, r3, r2, asr #7
          *(__IO uint32_t *)pOutAddr = 
 8006a36:	f846 3b04 	str.w	r3, [r6], #4
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
          
            pChrom++;
 8006a3a:	3401      	adds	r4, #1
          for(j=0; j < 8; j++)
 8006a3c:	3501      	adds	r5, #1
 8006a3e:	2d07      	cmp	r5, #7
 8006a40:	d9db      	bls.n	80069fa <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x12>
 8006a42:	9901      	ldr	r1, [sp, #4]
          }

        refline += JPEG_ConvertorParams.ScaledWidth;          
 8006a44:	4488      	add	r8, r1
    for(i= 0; i <  8; i++)
 8006a46:	f10e 0e01 	add.w	lr, lr, #1
 8006a4a:	f1be 0f07 	cmp.w	lr, #7
 8006a4e:	d808      	bhi.n	8006a62 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7a>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8006a50:	4b15      	ldr	r3, [pc, #84]	; (8006aa8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xc0>)
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	4543      	cmp	r3, r8
 8006a56:	d9f6      	bls.n	8006a46 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x5e>
        pOutAddr = pOutBuffer+ refline;        
 8006a58:	eb0a 0608 	add.w	r6, sl, r8
          for(j=0; j < 8; j++)
 8006a5c:	2500      	movs	r5, #0
 8006a5e:	9101      	str	r1, [sp, #4]
 8006a60:	e7ed      	b.n	8006a3e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x56>
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8006a62:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
 8006a66:	9b02      	ldr	r3, [sp, #8]
 8006a68:	9a03      	ldr	r2, [sp, #12]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	454b      	cmp	r3, r9
 8006a6e:	d914      	bls.n	8006a9a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb2>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8006a70:	ea4f 08c9 	mov.w	r8, r9, lsl #3
 8006a74:	490c      	ldr	r1, [pc, #48]	; (8006aa8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xc0>)
 8006a76:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8006a78:	fbb8 f2f3 	udiv	r2, r8, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8006a7c:	fb03 8812 	mls	r8, r3, r2, r8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8006a80:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8006a82:	fb01 f202 	mul.w	r2, r1, r2
 8006a86:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8006a8a:	eb08 08c2 	add.w	r8, r8, r2, lsl #3
    currentMCU++;
 8006a8e:	f109 0901 	add.w	r9, r9, #1
    pChrom = pInBuffer;
 8006a92:	4604      	mov	r4, r0
    for(i= 0; i <  8; i++)
 8006a94:	f04f 0e00 	mov.w	lr, #0
 8006a98:	e7d7      	b.n	8006a4a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x62>
  }
  return numberMCU;
}
 8006a9a:	9802      	ldr	r0, [sp, #8]
 8006a9c:	b005      	add	sp, #20
 8006a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa2:	bf00      	nop
 8006aa4:	80808081 	.word	0x80808081
 8006aa8:	2000027c 	.word	0x2000027c

08006aac <JPEG_InitPostProcColorTables>:
  */
void JPEG_InitPostProcColorTables(void)
{
  int32_t index, i; 
    
  for (i = 0; i <= 255; i++) 
 8006aac:	2100      	movs	r1, #0
 8006aae:	29ff      	cmp	r1, #255	; 0xff
 8006ab0:	dc1f      	bgt.n	8006af2 <JPEG_InitPostProcColorTables+0x46>
  {
    index = (i * 2) - 256;
 8006ab2:	f1a1 0080 	sub.w	r0, r1, #128	; 0x80
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8006ab6:	4b0f      	ldr	r3, [pc, #60]	; (8006af4 <JPEG_InitPostProcColorTables+0x48>)
 8006ab8:	fb03 f300 	mul.w	r3, r3, r0
 8006abc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006ac0:	141b      	asrs	r3, r3, #16
 8006ac2:	4a0d      	ldr	r2, [pc, #52]	; (8006af8 <JPEG_InitPostProcColorTables+0x4c>)
 8006ac4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006ac8:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8006acc:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <JPEG_InitPostProcColorTables+0x50>)
 8006ace:	fb03 f300 	mul.w	r3, r3, r0
 8006ad2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006ad6:	141b      	asrs	r3, r3, #16
 8006ad8:	6413      	str	r3, [r2, #64]	; 0x40
    
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8006ada:	4b09      	ldr	r3, [pc, #36]	; (8006b00 <JPEG_InitPostProcColorTables+0x54>)
 8006adc:	fb03 f300 	mul.w	r3, r3, r0
 8006ae0:	f8c2 3840 	str.w	r3, [r2, #2112]	; 0x840
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8006ae4:	4b07      	ldr	r3, [pc, #28]	; (8006b04 <JPEG_InitPostProcColorTables+0x58>)
 8006ae6:	fb03 f000 	mul.w	r0, r3, r0
 8006aea:	f8c2 0c40 	str.w	r0, [r2, #3136]	; 0xc40
  for (i = 0; i <= 255; i++) 
 8006aee:	3101      	adds	r1, #1
 8006af0:	e7dd      	b.n	8006aae <JPEG_InitPostProcColorTables+0x2>
  }  
}
 8006af2:	4770      	bx	lr
 8006af4:	000166e8 	.word	0x000166e8
 8006af8:	2000027c 	.word	0x2000027c
 8006afc:	0001c5a0 	.word	0x0001c5a0
 8006b00:	ffff4930 	.word	0xffff4930
 8006b04:	ffffa7e8 	.word	0xffffa7e8

08006b08 <JPEG_GetDecodeColorConvertFunc>:
{
 8006b08:	b4f0      	push	{r4, r5, r6, r7}
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8006b0a:	6807      	ldr	r7, [r0, #0]
 8006b0c:	4c3f      	ldr	r4, [pc, #252]	; (8006c0c <JPEG_GetDecodeColorConvertFunc+0x104>)
 8006b0e:	6027      	str	r7, [r4, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8006b10:	68c3      	ldr	r3, [r0, #12]
 8006b12:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8006b14:	6885      	ldr	r5, [r0, #8]
 8006b16:	60e5      	str	r5, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8006b18:	fb05 f603 	mul.w	r6, r5, r3
 8006b1c:	00b6      	lsls	r6, r6, #2
 8006b1e:	6126      	str	r6, [r4, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 8006b20:	6840      	ldr	r0, [r0, #4]
 8006b22:	6060      	str	r0, [r4, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8006b24:	2f10      	cmp	r7, #16
 8006b26:	d02c      	beq.n	8006b82 <JPEG_GetDecodeColorConvertFunc+0x7a>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8006b28:	2f00      	cmp	r7, #0
 8006b2a:	d15b      	bne.n	8006be4 <JPEG_GetDecodeColorConvertFunc+0xdc>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8006b2c:	4838      	ldr	r0, [pc, #224]	; (8006c10 <JPEG_GetDecodeColorConvertFunc+0x108>)
 8006b2e:	6008      	str	r0, [r1, #0]
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8006b30:	f003 0107 	and.w	r1, r3, #7
 8006b34:	4835      	ldr	r0, [pc, #212]	; (8006c0c <JPEG_GetDecodeColorConvertFunc+0x104>)
 8006b36:	6141      	str	r1, [r0, #20]
    if(JPEG_ConvertorParams.LineOffset != 0)
 8006b38:	b111      	cbz	r1, 8006b40 <JPEG_GetDecodeColorConvertFunc+0x38>
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8006b3a:	f1c1 0108 	rsb	r1, r1, #8
 8006b3e:	6141      	str	r1, [r0, #20]
    JPEG_ConvertorParams.H_factor = 8;
 8006b40:	4932      	ldr	r1, [pc, #200]	; (8006c0c <JPEG_GetDecodeColorConvertFunc+0x104>)
 8006b42:	2008      	movs	r0, #8
 8006b44:	61c8      	str	r0, [r1, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8006b46:	6208      	str	r0, [r1, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8006b48:	4930      	ldr	r1, [pc, #192]	; (8006c0c <JPEG_GetDecodeColorConvertFunc+0x104>)
 8006b4a:	6948      	ldr	r0, [r1, #20]
 8006b4c:	4418      	add	r0, r3
 8006b4e:	6248      	str	r0, [r1, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 8006b50:	0098      	lsls	r0, r3, #2
 8006b52:	6288      	str	r0, [r1, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8006b54:	69c9      	ldr	r1, [r1, #28]
 8006b56:	fbb3 f0f1 	udiv	r0, r3, r1
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8006b5a:	fb01 3110 	mls	r1, r1, r0, r3
 8006b5e:	b101      	cbz	r1, 8006b62 <JPEG_GetDecodeColorConvertFunc+0x5a>
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 8006b60:	3001      	adds	r0, #1
  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8006b62:	4b2a      	ldr	r3, [pc, #168]	; (8006c0c <JPEG_GetDecodeColorConvertFunc+0x104>)
 8006b64:	6a19      	ldr	r1, [r3, #32]
 8006b66:	fbb5 f3f1 	udiv	r3, r5, r1
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8006b6a:	fb01 5513 	mls	r5, r1, r3, r5
 8006b6e:	b105      	cbz	r5, 8006b72 <JPEG_GetDecodeColorConvertFunc+0x6a>
    vMCU++; /*+1 for vertical incomplete MCU */                
 8006b70:	3301      	adds	r3, #1
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8006b72:	fb03 f300 	mul.w	r3, r3, r0
 8006b76:	4925      	ldr	r1, [pc, #148]	; (8006c0c <JPEG_GetDecodeColorConvertFunc+0x104>)
 8006b78:	62cb      	str	r3, [r1, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8006b7a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8006b7c:	2000      	movs	r0, #0
}
 8006b7e:	bcf0      	pop	{r4, r5, r6, r7}
 8006b80:	4770      	bx	lr
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8006b82:	2801      	cmp	r0, #1
 8006b84:	d010      	beq.n	8006ba8 <JPEG_GetDecodeColorConvertFunc+0xa0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8006b86:	2802      	cmp	r0, #2
 8006b88:	d01c      	beq.n	8006bc4 <JPEG_GetDecodeColorConvertFunc+0xbc>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8006b8a:	4822      	ldr	r0, [pc, #136]	; (8006c14 <JPEG_GetDecodeColorConvertFunc+0x10c>)
 8006b8c:	6008      	str	r0, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8006b8e:	f003 0107 	and.w	r1, r3, #7
 8006b92:	481e      	ldr	r0, [pc, #120]	; (8006c0c <JPEG_GetDecodeColorConvertFunc+0x104>)
 8006b94:	6141      	str	r1, [r0, #20]
      if(JPEG_ConvertorParams.LineOffset != 0)
 8006b96:	b111      	cbz	r1, 8006b9e <JPEG_GetDecodeColorConvertFunc+0x96>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8006b98:	f1c1 0108 	rsb	r1, r1, #8
 8006b9c:	6141      	str	r1, [r0, #20]
      JPEG_ConvertorParams.H_factor = 8;
 8006b9e:	491b      	ldr	r1, [pc, #108]	; (8006c0c <JPEG_GetDecodeColorConvertFunc+0x104>)
 8006ba0:	2008      	movs	r0, #8
 8006ba2:	61c8      	str	r0, [r1, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8006ba4:	6208      	str	r0, [r1, #32]
 8006ba6:	e7cf      	b.n	8006b48 <JPEG_GetDecodeColorConvertFunc+0x40>
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8006ba8:	481b      	ldr	r0, [pc, #108]	; (8006c18 <JPEG_GetDecodeColorConvertFunc+0x110>)
 8006baa:	6008      	str	r0, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8006bac:	f003 010f 	and.w	r1, r3, #15
 8006bb0:	6161      	str	r1, [r4, #20]
      if(JPEG_ConvertorParams.LineOffset != 0)
 8006bb2:	b111      	cbz	r1, 8006bba <JPEG_GetDecodeColorConvertFunc+0xb2>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 8006bb4:	f1c1 0110 	rsb	r1, r1, #16
 8006bb8:	6161      	str	r1, [r4, #20]
      JPEG_ConvertorParams.H_factor = 16;
 8006bba:	4914      	ldr	r1, [pc, #80]	; (8006c0c <JPEG_GetDecodeColorConvertFunc+0x104>)
 8006bbc:	2010      	movs	r0, #16
 8006bbe:	61c8      	str	r0, [r1, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 8006bc0:	6208      	str	r0, [r1, #32]
 8006bc2:	e7c1      	b.n	8006b48 <JPEG_GetDecodeColorConvertFunc+0x40>
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8006bc4:	4815      	ldr	r0, [pc, #84]	; (8006c1c <JPEG_GetDecodeColorConvertFunc+0x114>)
 8006bc6:	6008      	str	r0, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8006bc8:	f003 010f 	and.w	r1, r3, #15
 8006bcc:	480f      	ldr	r0, [pc, #60]	; (8006c0c <JPEG_GetDecodeColorConvertFunc+0x104>)
 8006bce:	6141      	str	r1, [r0, #20]
      if(JPEG_ConvertorParams.LineOffset != 0)
 8006bd0:	b111      	cbz	r1, 8006bd8 <JPEG_GetDecodeColorConvertFunc+0xd0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 8006bd2:	f1c1 0110 	rsb	r1, r1, #16
 8006bd6:	6141      	str	r1, [r0, #20]
      JPEG_ConvertorParams.H_factor = 16;
 8006bd8:	490c      	ldr	r1, [pc, #48]	; (8006c0c <JPEG_GetDecodeColorConvertFunc+0x104>)
 8006bda:	2010      	movs	r0, #16
 8006bdc:	61c8      	str	r0, [r1, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8006bde:	2008      	movs	r0, #8
 8006be0:	6208      	str	r0, [r1, #32]
 8006be2:	e7b1      	b.n	8006b48 <JPEG_GetDecodeColorConvertFunc+0x40>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8006be4:	2f30      	cmp	r7, #48	; 0x30
 8006be6:	d10e      	bne.n	8006c06 <JPEG_GetDecodeColorConvertFunc+0xfe>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8006be8:	480d      	ldr	r0, [pc, #52]	; (8006c20 <JPEG_GetDecodeColorConvertFunc+0x118>)
 8006bea:	6008      	str	r0, [r1, #0]
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8006bec:	f003 0107 	and.w	r1, r3, #7
 8006bf0:	4806      	ldr	r0, [pc, #24]	; (8006c0c <JPEG_GetDecodeColorConvertFunc+0x104>)
 8006bf2:	6141      	str	r1, [r0, #20]
    if(JPEG_ConvertorParams.LineOffset != 0)
 8006bf4:	b111      	cbz	r1, 8006bfc <JPEG_GetDecodeColorConvertFunc+0xf4>
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8006bf6:	f1c1 0108 	rsb	r1, r1, #8
 8006bfa:	6141      	str	r1, [r0, #20]
    JPEG_ConvertorParams.H_factor = 8;
 8006bfc:	4903      	ldr	r1, [pc, #12]	; (8006c0c <JPEG_GetDecodeColorConvertFunc+0x104>)
 8006bfe:	2008      	movs	r0, #8
 8006c00:	61c8      	str	r0, [r1, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8006c02:	6208      	str	r0, [r1, #32]
 8006c04:	e7a0      	b.n	8006b48 <JPEG_GetDecodeColorConvertFunc+0x40>
    return HAL_ERROR; /* Color space Not supported*/
 8006c06:	2001      	movs	r0, #1
 8006c08:	e7b9      	b.n	8006b7e <JPEG_GetDecodeColorConvertFunc+0x76>
 8006c0a:	bf00      	nop
 8006c0c:	2000027c 	.word	0x2000027c
 8006c10:	08006969 	.word	0x08006969
 8006c14:	08006879 	.word	0x08006879
 8006c18:	0800658d 	.word	0x0800658d
 8006c1c:	08006745 	.word	0x08006745
 8006c20:	080069e9 	.word	0x080069e9

08006c24 <JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitColorTables(void)
{
 8006c24:	b508      	push	{r3, lr}
  JPEG_InitPreProcColorTables();
  JPEG_Init_MCU_LUT();
#endif

#if (USE_JPEG_DECODER == 1)
  JPEG_InitPostProcColorTables();
 8006c26:	f7ff ff41 	bl	8006aac <JPEG_InitPostProcColorTables>
#endif

}
 8006c2a:	bd08      	pop	{r3, pc}

08006c2c <Line_Audio_Init>:
/*
 * Line Audio Initalizaionts
 */


void Line_Audio_Init(void) {
 8006c2c:	b508      	push	{r3, lr}

	 /* Initialize Audio Recorder with 4 channels to be used */
	 if (BSP_AUDIO_IN_OUT_Init(BSP_AUDIO_FREQUENCY_48K) == AUDIO_OK)
 8006c2e:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8006c32:	f000 f9b1 	bl	8006f98 <BSP_AUDIO_IN_OUT_Init>
 8006c36:	bb00      	cbnz	r0, 8006c7a <Line_Audio_Init+0x4e>
	 {
		 printf("Audio I/O initialization OK\r\n");
 8006c38:	4816      	ldr	r0, [pc, #88]	; (8006c94 <Line_Audio_Init+0x68>)
 8006c3a:	f001 f87f 	bl	8007d3c <puts>
	 } else {
		 printf("Audio I/O initialization failed.\r\n");
	 }

	 /* Start Recording */
	 HAL_StatusTypeDef res = HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)audio_in_buffer, RECORD_BUFFER_SIZE);
 8006c3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c42:	4915      	ldr	r1, [pc, #84]	; (8006c98 <Line_Audio_Init+0x6c>)
 8006c44:	4815      	ldr	r0, [pc, #84]	; (8006c9c <Line_Audio_Init+0x70>)
 8006c46:	f7fd fe43 	bl	80048d0 <HAL_SAI_Receive_DMA>
	 if (HAL_OK == res)
 8006c4a:	4601      	mov	r1, r0
 8006c4c:	b9c8      	cbnz	r0, 8006c82 <Line_Audio_Init+0x56>
	 {
		 printf("SAI receive begin OK\r\n");
 8006c4e:	4814      	ldr	r0, [pc, #80]	; (8006ca0 <Line_Audio_Init+0x74>)
 8006c50:	f001 f874 	bl	8007d3c <puts>
	 } else {
		 printf("SAI receive error: %d\r\n", res);
	 }

	 printf("Copying Record buffer to Playback buffer\r\n");
 8006c54:	4813      	ldr	r0, [pc, #76]	; (8006ca4 <Line_Audio_Init+0x78>)
 8006c56:	f001 f871 	bl	8007d3c <puts>

	 /* Play the Recorded buffer */
	 if (_BSP_AUDIO_OUT_Play((uint16_t *) &audio_out_buffer[0], RECORD_BUFFER_SIZE) == AUDIO_OK)
 8006c5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c5e:	4812      	ldr	r0, [pc, #72]	; (8006ca8 <Line_Audio_Init+0x7c>)
 8006c60:	f000 f9de 	bl	8007020 <_BSP_AUDIO_OUT_Play>
 8006c64:	b988      	cbnz	r0, 8006c8a <Line_Audio_Init+0x5e>
	 {
		 printf("Audio output OK\r\n");
 8006c66:	4811      	ldr	r0, [pc, #68]	; (8006cac <Line_Audio_Init+0x80>)
 8006c68:	f001 f868 	bl	8007d3c <puts>
	 } else {
		 printf("Audio output error\r\n");
	 }
	 printf("\r\n");
 8006c6c:	4810      	ldr	r0, [pc, #64]	; (8006cb0 <Line_Audio_Init+0x84>)
 8006c6e:	f001 f865 	bl	8007d3c <puts>

	 audio_line_in_buffer_state = BUFFER_OFFSET_NONE;
 8006c72:	4b10      	ldr	r3, [pc, #64]	; (8006cb4 <Line_Audio_Init+0x88>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	601a      	str	r2, [r3, #0]

 }
 8006c78:	bd08      	pop	{r3, pc}
		 printf("Audio I/O initialization failed.\r\n");
 8006c7a:	480f      	ldr	r0, [pc, #60]	; (8006cb8 <Line_Audio_Init+0x8c>)
 8006c7c:	f001 f85e 	bl	8007d3c <puts>
 8006c80:	e7dd      	b.n	8006c3e <Line_Audio_Init+0x12>
		 printf("SAI receive error: %d\r\n", res);
 8006c82:	480e      	ldr	r0, [pc, #56]	; (8006cbc <Line_Audio_Init+0x90>)
 8006c84:	f000 ffd4 	bl	8007c30 <iprintf>
 8006c88:	e7e4      	b.n	8006c54 <Line_Audio_Init+0x28>
		 printf("Audio output error\r\n");
 8006c8a:	480d      	ldr	r0, [pc, #52]	; (8006cc0 <Line_Audio_Init+0x94>)
 8006c8c:	f001 f856 	bl	8007d3c <puts>
 8006c90:	e7ec      	b.n	8006c6c <Line_Audio_Init+0x40>
 8006c92:	bf00      	nop
 8006c94:	08008cf4 	.word	0x08008cf4
 8006c98:	20005b6c 	.word	0x20005b6c
 8006c9c:	200013a4 	.word	0x200013a4
 8006ca0:	08008d38 	.word	0x08008d38
 8006ca4:	08008d68 	.word	0x08008d68
 8006ca8:	20001894 	.word	0x20001894
 8006cac:	08008d94 	.word	0x08008d94
 8006cb0:	08008d34 	.word	0x08008d34
 8006cb4:	20007b6c 	.word	0x20007b6c
 8006cb8:	08008d14 	.word	0x08008d14
 8006cbc:	08008d50 	.word	0x08008d50
 8006cc0:	08008da8 	.word	0x08008da8

08006cc4 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @param None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
	if(ui_data.usb_selection_state == USB_STATE_OFF){
 8006cc4:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <BSP_AUDIO_IN_TransferComplete_CallBack+0x18>)
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	b91b      	cbnz	r3, 8006cd2 <BSP_AUDIO_IN_TransferComplete_CallBack+0xe>
		 audio_line_in_buffer_state = BUFFER_OFFSET_FULL;
 8006cca:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1c>)
 8006ccc:	2202      	movs	r2, #2
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	4770      	bx	lr
	} else {
		 audio_usb_in_buffer_state = BUFFER_OFFSET_FULL;
 8006cd2:	4b04      	ldr	r3, [pc, #16]	; (8006ce4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x20>)
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	601a      	str	r2, [r3, #0]

	}
}
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	20001818 	.word	0x20001818
 8006ce0:	20007b6c 	.word	0x20007b6c
 8006ce4:	20005b68 	.word	0x20005b68

08006ce8 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
	if(ui_data.usb_selection_state == USB_STATE_OFF){
 8006ce8:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x18>)
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	b91b      	cbnz	r3, 8006cf6 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xe>
		 audio_line_in_buffer_state = BUFFER_OFFSET_HALF;
 8006cee:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x1c>)
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	4770      	bx	lr
	} else {
		 audio_usb_in_buffer_state = BUFFER_OFFSET_HALF;
 8006cf6:	4b04      	ldr	r3, [pc, #16]	; (8006d08 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x20>)
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]

	}
}
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	20001818 	.word	0x20001818
 8006d04:	20007b6c 	.word	0x20007b6c
 8006d08:	20005b68 	.word	0x20005b68

08006d0c <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Manages the DMA full Transfer complete event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8006d0c:	b508      	push	{r3, lr}
	if(ui_data.usb_selection_state == USB_STATE_OFF){
 8006d0e:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x1c>)
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	b91b      	cbnz	r3, 8006d1c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>
		 audio_line_out_buffer_state = BUFFER_OFFSET_FULL;
 8006d14:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8006d16:	2202      	movs	r2, #2
 8006d18:	601a      	str	r2, [r3, #0]
	} else {
		USBD_AUDIO_Sync(&USBD_Device, AUDIO_OFFSET_FULL);

	}
}
 8006d1a:	bd08      	pop	{r3, pc}
		USBD_AUDIO_Sync(&USBD_Device, AUDIO_OFFSET_FULL);
 8006d1c:	2102      	movs	r1, #2
 8006d1e:	4804      	ldr	r0, [pc, #16]	; (8006d30 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8006d20:	f7fe ff48 	bl	8005bb4 <USBD_AUDIO_Sync>
}
 8006d24:	e7f9      	b.n	8006d1a <BSP_AUDIO_OUT_TransferComplete_CallBack+0xe>
 8006d26:	bf00      	nop
 8006d28:	20001818 	.word	0x20001818
 8006d2c:	20003b64 	.word	0x20003b64
 8006d30:	20003894 	.word	0x20003894

08006d34 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 8006d34:	b508      	push	{r3, lr}
	if(ui_data.usb_selection_state == USB_STATE_OFF){
 8006d36:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x1c>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	b91b      	cbnz	r3, 8006d44 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x10>
		 audio_line_out_buffer_state = BUFFER_OFFSET_FULL;
 8006d3c:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8006d3e:	2202      	movs	r2, #2
 8006d40:	601a      	str	r2, [r3, #0]
	} else {
		USBD_AUDIO_Sync(&USBD_Device, AUDIO_OFFSET_HALF);
	}
}
 8006d42:	bd08      	pop	{r3, pc}
		USBD_AUDIO_Sync(&USBD_Device, AUDIO_OFFSET_HALF);
 8006d44:	2101      	movs	r1, #1
 8006d46:	4804      	ldr	r0, [pc, #16]	; (8006d58 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8006d48:	f7fe ff34 	bl	8005bb4 <USBD_AUDIO_Sync>
}
 8006d4c:	e7f9      	b.n	8006d42 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0xe>
 8006d4e:	bf00      	nop
 8006d50:	20001818 	.word	0x20001818
 8006d54:	20003b64 	.word	0x20003b64
 8006d58:	20003894 	.word	0x20003894

08006d5c <BSP_AUDIO_IN_Error_CallBack>:
   * @param  None
   * @retval None
   */
void BSP_AUDIO_IN_Error_CallBack(void){
	/* handle errors */
 }
 8006d5c:	4770      	bx	lr
	...

08006d60 <SAIx_In_DeInit>:
     /**
       * @brief  Deinitializes the output Audio Codec audio interface (SAI).
       * @retval None
       */
     static void SAIx_In_DeInit(void)
     {
 8006d60:	b510      	push	{r4, lr}
         /* Initialize the haudio_in_sai Instance parameter */
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8006d62:	4808      	ldr	r0, [pc, #32]	; (8006d84 <SAIx_In_DeInit+0x24>)
 8006d64:	4b08      	ldr	r3, [pc, #32]	; (8006d88 <SAIx_In_DeInit+0x28>)
 8006d66:	6003      	str	r3, [r0, #0]
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8006d68:	4c08      	ldr	r4, [pc, #32]	; (8006d8c <SAIx_In_DeInit+0x2c>)
 8006d6a:	4a09      	ldr	r2, [pc, #36]	; (8006d90 <SAIx_In_DeInit+0x30>)
 8006d6c:	6022      	str	r2, [r4, #0]
         /* Disable SAI peripheral */
         __HAL_SAI_DISABLE(&haudio_in_sai);
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006d74:	601a      	str	r2, [r3, #0]

         HAL_SAI_DeInit(&haudio_in_sai);
 8006d76:	f7fd fd26 	bl	80047c6 <HAL_SAI_DeInit>
         HAL_SAI_DeInit(&haudio_out_sai);
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f7fd fd23 	bl	80047c6 <HAL_SAI_DeInit>
     }
 8006d80:	bd10      	pop	{r4, pc}
 8006d82:	bf00      	nop
 8006d84:	200013a4 	.word	0x200013a4
 8006d88:	40015824 	.word	0x40015824
 8006d8c:	20001488 	.word	0x20001488
 8006d90:	40015804 	.word	0x40015804

08006d94 <SAI_AUDIO_IN_MspInit>:
       * @brief  Initializes SAI Audio IN MSP.
       * @param  hsai: SAI handle
       * @retval None
       */
     static void SAI_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
     {
 8006d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d96:	b08b      	sub	sp, #44	; 0x2c
 8006d98:	4605      	mov	r5, r0
         static DMA_HandleTypeDef hdma_sai_rx;
         GPIO_InitTypeDef  gpio_init_structure;

         /* Enable SAI clock */
         AUDIO_IN_SAIx_CLK_ENABLE();
 8006d9a:	4c3b      	ldr	r4, [pc, #236]	; (8006e88 <SAI_AUDIO_IN_MspInit+0xf4>)
 8006d9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006d9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006da2:	6463      	str	r3, [r4, #68]	; 0x44
 8006da4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006daa:	9301      	str	r3, [sp, #4]
 8006dac:	9b01      	ldr	r3, [sp, #4]

         /* Enable SD GPIO clock */
         AUDIO_IN_SAIx_SD_ENABLE();
 8006dae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006db0:	f043 0310 	orr.w	r3, r3, #16
 8006db4:	6323      	str	r3, [r4, #48]	; 0x30
 8006db6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006db8:	f003 0310 	and.w	r3, r3, #16
 8006dbc:	9302      	str	r3, [sp, #8]
 8006dbe:	9b02      	ldr	r3, [sp, #8]
         /* CODEC_SAI pin configuration: SD pin */
         gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8006dc0:	2308      	movs	r3, #8
 8006dc2:	9305      	str	r3, [sp, #20]
         gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8006dc4:	2602      	movs	r6, #2
 8006dc6:	9606      	str	r6, [sp, #24]
         gpio_init_structure.Pull = GPIO_NOPULL;
 8006dc8:	2700      	movs	r7, #0
 8006dca:	9707      	str	r7, [sp, #28]
         gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006dcc:	9608      	str	r6, [sp, #32]
         gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 8006dce:	2306      	movs	r3, #6
 8006dd0:	9309      	str	r3, [sp, #36]	; 0x24
         HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8006dd2:	a905      	add	r1, sp, #20
 8006dd4:	482d      	ldr	r0, [pc, #180]	; (8006e8c <SAI_AUDIO_IN_MspInit+0xf8>)
 8006dd6:	f7fa fd45 	bl	8001864 <HAL_GPIO_Init>

         /* Enable Audio INT GPIO clock */
         AUDIO_IN_INT_GPIO_ENABLE();
 8006dda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006ddc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006de0:	6323      	str	r3, [r4, #48]	; 0x30
 8006de2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006de8:	9303      	str	r3, [sp, #12]
 8006dea:	9b03      	ldr	r3, [sp, #12]
         /* Audio INT pin configuration: input */
         gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8006dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006df0:	9305      	str	r3, [sp, #20]
         gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8006df2:	9706      	str	r7, [sp, #24]
         gpio_init_structure.Pull = GPIO_NOPULL;
 8006df4:	9707      	str	r7, [sp, #28]
         gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006df6:	9608      	str	r6, [sp, #32]
         HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8006df8:	a905      	add	r1, sp, #20
 8006dfa:	4825      	ldr	r0, [pc, #148]	; (8006e90 <SAI_AUDIO_IN_MspInit+0xfc>)
 8006dfc:	f7fa fd32 	bl	8001864 <HAL_GPIO_Init>

         /* Enable the DMA clock */
         AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8006e00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e06:	6323      	str	r3, [r4, #48]	; 0x30
 8006e08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e0e:	9304      	str	r3, [sp, #16]
 8006e10:	9b04      	ldr	r3, [sp, #16]

         if (hsai->Instance == AUDIO_IN_SAIx)
 8006e12:	682a      	ldr	r2, [r5, #0]
 8006e14:	4b1f      	ldr	r3, [pc, #124]	; (8006e94 <SAI_AUDIO_IN_MspInit+0x100>)
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d011      	beq.n	8006e3e <SAI_AUDIO_IN_MspInit+0xaa>
             /* Configure the DMA Stream */
             HAL_DMA_Init(&hdma_sai_rx);
         }

         /* SAI DMA IRQ Channel configuration */
         HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	210f      	movs	r1, #15
 8006e1e:	203c      	movs	r0, #60	; 0x3c
 8006e20:	f7fa fa7e 	bl	8001320 <HAL_NVIC_SetPriority>
         HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8006e24:	203c      	movs	r0, #60	; 0x3c
 8006e26:	f7fa faad 	bl	8001384 <HAL_NVIC_EnableIRQ>

         /* Audio INT IRQ Channel configuration */
         HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	210f      	movs	r1, #15
 8006e2e:	2028      	movs	r0, #40	; 0x28
 8006e30:	f7fa fa76 	bl	8001320 <HAL_NVIC_SetPriority>
         HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8006e34:	2028      	movs	r0, #40	; 0x28
 8006e36:	f7fa faa5 	bl	8001384 <HAL_NVIC_EnableIRQ>
     }
 8006e3a:	b00b      	add	sp, #44	; 0x2c
 8006e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
             hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8006e3e:	4c16      	ldr	r4, [pc, #88]	; (8006e98 <SAI_AUDIO_IN_MspInit+0x104>)
 8006e40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e44:	6063      	str	r3, [r4, #4]
             hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8006e46:	60a7      	str	r7, [r4, #8]
             hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006e48:	60e7      	str	r7, [r4, #12]
             hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8006e4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e4e:	6122      	str	r2, [r4, #16]
             hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8006e50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e54:	6162      	str	r2, [r4, #20]
             hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8006e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006e5a:	61a2      	str	r2, [r4, #24]
             hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8006e5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e60:	61e2      	str	r2, [r4, #28]
             hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006e62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006e66:	6222      	str	r2, [r4, #32]
             hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8006e68:	6267      	str	r7, [r4, #36]	; 0x24
             hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006e6a:	2203      	movs	r2, #3
 8006e6c:	62a2      	str	r2, [r4, #40]	; 0x28
             hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006e6e:	62e7      	str	r7, [r4, #44]	; 0x2c
             hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8006e70:	6327      	str	r7, [r4, #48]	; 0x30
             hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8006e72:	4b0a      	ldr	r3, [pc, #40]	; (8006e9c <SAI_AUDIO_IN_MspInit+0x108>)
 8006e74:	6023      	str	r3, [r4, #0]
             __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8006e76:	672c      	str	r4, [r5, #112]	; 0x70
 8006e78:	63a5      	str	r5, [r4, #56]	; 0x38
             HAL_DMA_DeInit(&hdma_sai_rx);
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f7fa fb88 	bl	8001590 <HAL_DMA_DeInit>
             HAL_DMA_Init(&hdma_sai_rx);
 8006e80:	4620      	mov	r0, r4
 8006e82:	f7fa fb1f 	bl	80014c4 <HAL_DMA_Init>
 8006e86:	e7c8      	b.n	8006e1a <SAI_AUDIO_IN_MspInit+0x86>
 8006e88:	40023800 	.word	0x40023800
 8006e8c:	40021000 	.word	0x40021000
 8006e90:	40022400 	.word	0x40022400
 8006e94:	40015824 	.word	0x40015824
 8006e98:	200012bc 	.word	0x200012bc
 8006e9c:	40026470 	.word	0x40026470

08006ea0 <SAIx_In_Init>:
     {
 8006ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea4:	b083      	sub	sp, #12
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8006ea6:	4c38      	ldr	r4, [pc, #224]	; (8006f88 <SAIx_In_Init+0xe8>)
 8006ea8:	4b38      	ldr	r3, [pc, #224]	; (8006f8c <SAIx_In_Init+0xec>)
 8006eaa:	6023      	str	r3, [r4, #0]
         __HAL_SAI_DISABLE(&haudio_out_sai);
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006eb2:	601a      	str	r2, [r3, #0]
         haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8006eb4:	2600      	movs	r6, #0
 8006eb6:	6266      	str	r6, [r4, #36]	; 0x24
         haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8006eb8:	9001      	str	r0, [sp, #4]
 8006eba:	61e0      	str	r0, [r4, #28]
         haudio_out_sai.Init.AudioMode      = SAI_MODEMASTER_TX;
 8006ebc:	6066      	str	r6, [r4, #4]
         haudio_out_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8006ebe:	6166      	str	r6, [r4, #20]
         haudio_out_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 8006ec0:	6326      	str	r6, [r4, #48]	; 0x30
         haudio_out_sai.Init.DataSize       = SAI_DATASIZE_16;
 8006ec2:	f04f 0b80 	mov.w	fp, #128	; 0x80
 8006ec6:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
         haudio_out_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8006eca:	63a6      	str	r6, [r4, #56]	; 0x38
         haudio_out_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006ecc:	63e6      	str	r6, [r4, #60]	; 0x3c
         haudio_out_sai.Init.Synchro        = SAI_ASYNCHRONOUS;
 8006ece:	60a6      	str	r6, [r4, #8]
         haudio_out_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 8006ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ed4:	6123      	str	r3, [r4, #16]
         haudio_out_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8006ed6:	2701      	movs	r7, #1
 8006ed8:	61a7      	str	r7, [r4, #24]
         haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8006eda:	60e6      	str	r6, [r4, #12]
         haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8006edc:	62a6      	str	r6, [r4, #40]	; 0x28
         haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 8006ede:	62e6      	str	r6, [r4, #44]	; 0x2c
         haudio_out_sai.Init.Mckdiv         = 0;
 8006ee0:	6226      	str	r6, [r4, #32]
         haudio_out_sai.FrameInit.FrameLength       = 64;
 8006ee2:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8006ee6:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
         haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8006eea:	f04f 0920 	mov.w	r9, #32
 8006eee:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
         haudio_out_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8006ef2:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8006ef6:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
         haudio_out_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8006efa:	64e6      	str	r6, [r4, #76]	; 0x4c
         haudio_out_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8006efc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006f00:	6522      	str	r2, [r4, #80]	; 0x50
         haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8006f02:	6566      	str	r6, [r4, #84]	; 0x54
         haudio_out_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 8006f04:	65a6      	str	r6, [r4, #88]	; 0x58
         haudio_out_sai.SlotInit.SlotNumber     = 4;
 8006f06:	2204      	movs	r2, #4
 8006f08:	65e2      	str	r2, [r4, #92]	; 0x5c
         haudio_out_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 8006f0a:	220f      	movs	r2, #15
 8006f0c:	6622      	str	r2, [r4, #96]	; 0x60
         HAL_SAI_Init(&haudio_out_sai);
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f7fd fb54 	bl	80045bc <HAL_SAI_Init>
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8006f14:	4d1e      	ldr	r5, [pc, #120]	; (8006f90 <SAIx_In_Init+0xf0>)
 8006f16:	4b1f      	ldr	r3, [pc, #124]	; (8006f94 <SAIx_In_Init+0xf4>)
 8006f18:	602b      	str	r3, [r5, #0]
         __HAL_SAI_DISABLE(&haudio_in_sai);
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f20:	601a      	str	r2, [r3, #0]
         haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8006f22:	626e      	str	r6, [r5, #36]	; 0x24
         haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8006f24:	9b01      	ldr	r3, [sp, #4]
 8006f26:	61eb      	str	r3, [r5, #28]
         haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	606b      	str	r3, [r5, #4]
         haudio_in_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8006f2c:	616e      	str	r6, [r5, #20]
         haudio_in_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 8006f2e:	632e      	str	r6, [r5, #48]	; 0x30
         haudio_in_sai.Init.DataSize       = SAI_DATASIZE_16;
 8006f30:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
         haudio_in_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8006f34:	63ae      	str	r6, [r5, #56]	; 0x38
         haudio_in_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006f36:	63ee      	str	r6, [r5, #60]	; 0x3c
         haudio_in_sai.Init.Synchro        = SAI_SYNCHRONOUS;
 8006f38:	60af      	str	r7, [r5, #8]
         haudio_in_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_DISABLE;
 8006f3a:	612e      	str	r6, [r5, #16]
         haudio_in_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8006f3c:	61af      	str	r7, [r5, #24]
         haudio_in_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8006f3e:	60ee      	str	r6, [r5, #12]
         haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8006f40:	62ae      	str	r6, [r5, #40]	; 0x28
         haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 8006f42:	2310      	movs	r3, #16
 8006f44:	62eb      	str	r3, [r5, #44]	; 0x2c
         haudio_in_sai.Init.Mckdiv         = 0;
 8006f46:	622e      	str	r6, [r5, #32]
         haudio_in_sai.FrameInit.FrameLength       = 64;
 8006f48:	f8c5 a040 	str.w	sl, [r5, #64]	; 0x40
         haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8006f4c:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
         haudio_in_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8006f50:	f8c5 8048 	str.w	r8, [r5, #72]	; 0x48
         haudio_in_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8006f54:	64ee      	str	r6, [r5, #76]	; 0x4c
         haudio_in_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8006f56:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006f5a:	652b      	str	r3, [r5, #80]	; 0x50
         haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8006f5c:	656e      	str	r6, [r5, #84]	; 0x54
         haudio_in_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 8006f5e:	65ae      	str	r6, [r5, #88]	; 0x58
         haudio_in_sai.SlotInit.SlotNumber     = 4;
 8006f60:	2304      	movs	r3, #4
 8006f62:	65eb      	str	r3, [r5, #92]	; 0x5c
         haudio_in_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 8006f64:	230f      	movs	r3, #15
 8006f66:	662b      	str	r3, [r5, #96]	; 0x60
         HAL_SAI_Init(&haudio_in_sai);
 8006f68:	4628      	mov	r0, r5
 8006f6a:	f7fd fb27 	bl	80045bc <HAL_SAI_Init>
         __HAL_SAI_ENABLE(&haudio_in_sai);
 8006f6e:	682a      	ldr	r2, [r5, #0]
 8006f70:	6813      	ldr	r3, [r2, #0]
 8006f72:	ea43 0308 	orr.w	r3, r3, r8
 8006f76:	6013      	str	r3, [r2, #0]
         __HAL_SAI_ENABLE(&haudio_out_sai);
 8006f78:	6822      	ldr	r2, [r4, #0]
 8006f7a:	6813      	ldr	r3, [r2, #0]
 8006f7c:	ea43 0308 	orr.w	r3, r3, r8
 8006f80:	6013      	str	r3, [r2, #0]
     }
 8006f82:	b003      	add	sp, #12
 8006f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f88:	20001488 	.word	0x20001488
 8006f8c:	40015804 	.word	0x40015804
 8006f90:	200013a4 	.word	0x200013a4
 8006f94:	40015824 	.word	0x40015824

08006f98 <BSP_AUDIO_IN_OUT_Init>:



uint8_t BSP_AUDIO_IN_OUT_Init(uint32_t AudioFreq)
     {
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4604      	mov	r4, r0
         uint8_t ret = AUDIO_ERROR;

         /* Disable SAI */
         SAIx_In_DeInit();
 8006f9c:	f7ff fee0 	bl	8006d60 <SAIx_In_DeInit>

         /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
         BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL);
 8006fa0:	4d19      	ldr	r5, [pc, #100]	; (8007008 <BSP_AUDIO_IN_OUT_Init+0x70>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	4621      	mov	r1, r4
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f7fa f91c 	bl	80011e4 <BSP_AUDIO_OUT_ClockConfig>
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8006fac:	4b17      	ldr	r3, [pc, #92]	; (800700c <BSP_AUDIO_IN_OUT_Init+0x74>)
 8006fae:	4a18      	ldr	r2, [pc, #96]	; (8007010 <BSP_AUDIO_IN_OUT_Init+0x78>)
 8006fb0:	601a      	str	r2, [r3, #0]
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8006fb2:	4b18      	ldr	r3, [pc, #96]	; (8007014 <BSP_AUDIO_IN_OUT_Init+0x7c>)
 8006fb4:	602b      	str	r3, [r5, #0]
         if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f7fd fd57 	bl	8004a6a <HAL_SAI_GetState>
 8006fbc:	b160      	cbz	r0, 8006fd8 <BSP_AUDIO_IN_OUT_Init+0x40>
             BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
             SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
         }


         SAIx_In_Init(AudioFreq); // inclu déja le code de SAIx_Out_Init()
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f7ff ff6e 	bl	8006ea0 <SAIx_In_Init>


         if ((wm8994_drv.ReadID(AUDIO_I2C_ADDRESS)) == WM8994_ID)
 8006fc4:	4b14      	ldr	r3, [pc, #80]	; (8007018 <BSP_AUDIO_IN_OUT_Init+0x80>)
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	2034      	movs	r0, #52	; 0x34
 8006fca:	4798      	blx	r3
 8006fcc:	f648 1394 	movw	r3, #35220	; 0x8994
 8006fd0:	4298      	cmp	r0, r3
 8006fd2:	d00a      	beq.n	8006fea <BSP_AUDIO_IN_OUT_Init+0x52>
             wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
             /* Initialize the audio driver structure */
             audio_drv = &wm8994_drv;
             ret = AUDIO_OK;
         } else {
             ret = AUDIO_ERROR;
 8006fd4:	2001      	movs	r0, #1
             audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_ANALOG_MIC | OUTPUT_DEVICE_HEADPHONE , 100, AudioFreq);
         }

         /* Return AUDIO_OK when all operations are correctly done */
         return ret;
     }
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
             BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8006fd8:	2100      	movs	r1, #0
 8006fda:	480c      	ldr	r0, [pc, #48]	; (800700c <BSP_AUDIO_IN_OUT_Init+0x74>)
 8006fdc:	f7fa f87e 	bl	80010dc <BSP_AUDIO_OUT_MspInit>
             SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	f7ff fed6 	bl	8006d94 <SAI_AUDIO_IN_MspInit>
 8006fe8:	e7e9      	b.n	8006fbe <BSP_AUDIO_IN_OUT_Init+0x26>
             wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8006fea:	4d0b      	ldr	r5, [pc, #44]	; (8007018 <BSP_AUDIO_IN_OUT_Init+0x80>)
 8006fec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006fee:	2034      	movs	r0, #52	; 0x34
 8006ff0:	4798      	blx	r3
             audio_drv = &wm8994_drv;
 8006ff2:	4b0a      	ldr	r3, [pc, #40]	; (800701c <BSP_AUDIO_IN_OUT_Init+0x84>)
 8006ff4:	661d      	str	r5, [r3, #96]	; 0x60
             audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_ANALOG_MIC | OUTPUT_DEVICE_HEADPHONE , 100, AudioFreq);
 8006ff6:	682d      	ldr	r5, [r5, #0]
 8006ff8:	4623      	mov	r3, r4
 8006ffa:	2264      	movs	r2, #100	; 0x64
 8006ffc:	f240 3102 	movw	r1, #770	; 0x302
 8007000:	2034      	movs	r0, #52	; 0x34
 8007002:	47a8      	blx	r5
             ret = AUDIO_OK;
 8007004:	2000      	movs	r0, #0
 8007006:	e7e6      	b.n	8006fd6 <BSP_AUDIO_IN_OUT_Init+0x3e>
 8007008:	200013a4 	.word	0x200013a4
 800700c:	20001488 	.word	0x20001488
 8007010:	40015804 	.word	0x40015804
 8007014:	40015824 	.word	0x40015824
 8007018:	20000000 	.word	0x20000000
 800701c:	200012bc 	.word	0x200012bc

08007020 <_BSP_AUDIO_OUT_Play>:


     uint8_t _BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
     {
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4604      	mov	r4, r0
         /* Call the audio Codec Play function */
         if (audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *)pBuffer, Size) != 0)
 8007024:	4b09      	ldr	r3, [pc, #36]	; (800704c <_BSP_AUDIO_OUT_Play+0x2c>)
 8007026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	b28d      	uxth	r5, r1
 800702c:	462a      	mov	r2, r5
 800702e:	4601      	mov	r1, r0
 8007030:	2034      	movs	r0, #52	; 0x34
 8007032:	4798      	blx	r3
 8007034:	b108      	cbz	r0, 800703a <_BSP_AUDIO_OUT_Play+0x1a>
         {
             return AUDIO_ERROR;
 8007036:	2001      	movs	r0, #1
             //if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE)) !=  HAL_OK)
             if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, Size) !=  HAL_OK)
                 return AUDIO_ERROR;
             return AUDIO_OK;
         }
     }
 8007038:	bd38      	pop	{r3, r4, r5, pc}
             if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, Size) !=  HAL_OK)
 800703a:	462a      	mov	r2, r5
 800703c:	4621      	mov	r1, r4
 800703e:	4804      	ldr	r0, [pc, #16]	; (8007050 <_BSP_AUDIO_OUT_Play+0x30>)
 8007040:	f7fd fbe2 	bl	8004808 <HAL_SAI_Transmit_DMA>
 8007044:	2800      	cmp	r0, #0
 8007046:	d0f7      	beq.n	8007038 <_BSP_AUDIO_OUT_Play+0x18>
                 return AUDIO_ERROR;
 8007048:	2001      	movs	r0, #1
 800704a:	e7f5      	b.n	8007038 <_BSP_AUDIO_OUT_Play+0x18>
 800704c:	200012bc 	.word	0x200012bc
 8007050:	20001488 	.word	0x20001488

08007054 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8007054:	b500      	push	{lr}
 8007056:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007058:	2301      	movs	r3, #1
 800705a:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800705c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007060:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007062:	2302      	movs	r3, #2
 8007064:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007066:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800706a:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 800706c:	2219      	movs	r2, #25
 800706e:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8007070:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8007074:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007076:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8007078:	2309      	movs	r3, #9
 800707a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 800707c:	2307      	movs	r3, #7
 800707e:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8007080:	4668      	mov	r0, sp
 8007082:	f7fc f913 	bl	80032ac <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 8007086:	b100      	cbz	r0, 800708a <SystemClock_Config+0x36>
    while(1) { ; }
 8007088:	e7fe      	b.n	8007088 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800708a:	f7fc f8d1 	bl	8003230 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800708e:	b100      	cbz	r0, 8007092 <SystemClock_Config+0x3e>
    while(1) { ; }
 8007090:	e7fe      	b.n	8007090 <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8007092:	230f      	movs	r3, #15
 8007094:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007096:	2302      	movs	r3, #2
 8007098:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800709a:	2300      	movs	r3, #0
 800709c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800709e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80070a2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80070a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070a8:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80070aa:	2107      	movs	r1, #7
 80070ac:	a80d      	add	r0, sp, #52	; 0x34
 80070ae:	f7fc fb55 	bl	800375c <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 80070b2:	b100      	cbz	r0, 80070b6 <SystemClock_Config+0x62>
    while(1) { ; }
 80070b4:	e7fe      	b.n	80070b4 <SystemClock_Config+0x60>
  }
}
 80070b6:	b013      	add	sp, #76	; 0x4c
 80070b8:	f85d fb04 	ldr.w	pc, [sp], #4

080070bc <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 80070bc:	b410      	push	{r4}
  __ASM volatile ("dsb 0xF":::"memory");
 80070be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80070c2:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80070c6:	4b1a      	ldr	r3, [pc, #104]	; (8007130 <CPU_CACHE_Enable+0x74>)
 80070c8:	2100      	movs	r1, #0
 80070ca:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80070ce:	695a      	ldr	r2, [r3, #20]
 80070d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80070d4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80070d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80070da:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 80070de:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80070e2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80070e6:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80070ea:	f3c0 324e 	ubfx	r2, r0, #13, #15
 80070ee:	e000      	b.n	80070f2 <CPU_CACHE_Enable+0x36>
    } while(sets--);
 80070f0:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80070f2:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80070f6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80070fa:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 80070fe:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 8007102:	4c0b      	ldr	r4, [pc, #44]	; (8007130 <CPU_CACHE_Enable+0x74>)
 8007104:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
 8007108:	460b      	mov	r3, r1
 800710a:	3901      	subs	r1, #1
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1f2      	bne.n	80070f6 <CPU_CACHE_Enable+0x3a>
    } while(sets--);
 8007110:	1e53      	subs	r3, r2, #1
 8007112:	2a00      	cmp	r2, #0
 8007114:	d1ec      	bne.n	80070f0 <CPU_CACHE_Enable+0x34>
 8007116:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800711a:	6963      	ldr	r3, [r4, #20]
 800711c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007120:	6163      	str	r3, [r4, #20]
 8007122:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007126:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800712a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	e000ed00 	.word	0xe000ed00

08007134 <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 8007134:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 8007136:	f7ff ffc1 	bl	80070bc <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 800713a:	f7fa f8b7 	bl	80012ac <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 800713e:	f7ff ff89 	bl	8007054 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 8007142:	4a04      	ldr	r2, [pc, #16]	; (8007154 <Sys_Init+0x20>)
 8007144:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8007148:	4803      	ldr	r0, [pc, #12]	; (8007158 <Sys_Init+0x24>)
 800714a:	f000 f959 	bl	8007400 <initUart>

	/* Initialization for setting up JPEG Color Conversion */
	JPEG_InitColorTables();
 800714e:	f7ff fd69 	bl	8006c24 <JPEG_InitColorTables>

}
 8007152:	bd08      	pop	{r3, pc}
 8007154:	40011000 	.word	0x40011000
 8007158:	20001824 	.word	0x20001824

0800715c <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 800715c:	b508      	push	{r3, lr}
  HAL_IncTick();
 800715e:	f7fa f8b1 	bl	80012c4 <HAL_IncTick>
}
 8007162:	bd08      	pop	{r3, pc}

08007164 <Timer_Init>:

//
//
// -- Timer Initialization and Callbacks --
//
void Timer_Init() {
 8007164:	b510      	push	{r4, lr}
 8007166:	b082      	sub	sp, #8
	__HAL_RCC_TIM7_CLK_ENABLE(); // Clock Enable
 8007168:	4b0e      	ldr	r3, [pc, #56]	; (80071a4 <Timer_Init+0x40>)
 800716a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800716c:	f042 0220 	orr.w	r2, r2, #32
 8007170:	641a      	str	r2, [r3, #64]	; 0x40
 8007172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	9b01      	ldr	r3, [sp, #4]
	htim.Instance = TIM7;
 800717c:	4c0a      	ldr	r4, [pc, #40]	; (80071a8 <Timer_Init+0x44>)
 800717e:	4b0b      	ldr	r3, [pc, #44]	; (80071ac <Timer_Init+0x48>)
 8007180:	6023      	str	r3, [r4, #0]
	htim.Init.Prescaler = 1079U; //108MHz/1080 = 100000Hz
 8007182:	f240 4337 	movw	r3, #1079	; 0x437
 8007186:	6063      	str	r3, [r4, #4]
	htim.Init.Period = 4999U; //100000Hz/5000 = 20Hz
 8007188:	f241 3387 	movw	r3, #4999	; 0x1387
 800718c:	60e3      	str	r3, [r4, #12]
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800718e:	2037      	movs	r0, #55	; 0x37
 8007190:	f7fa f8f8 	bl	8001384 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Init(&htim);
 8007194:	4620      	mov	r0, r4
 8007196:	f7fd fdcf 	bl	8004d38 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim);
 800719a:	4620      	mov	r0, r4
 800719c:	f7fd fc69 	bl	8004a72 <HAL_TIM_Base_Start_IT>
}
 80071a0:	b002      	add	sp, #8
 80071a2:	bd10      	pop	{r4, pc}
 80071a4:	40023800 	.word	0x40023800
 80071a8:	20007b74 	.word	0x20007b74
 80071ac:	40001400 	.word	0x40001400

080071b0 <main>:
int main(void) {
 80071b0:	b508      	push	{r3, lr}
	Sys_Init(); // Initialize STM32 System
 80071b2:	f7ff ffbf 	bl	8007134 <Sys_Init>
	Timer_Init(); // Initialize Program Timer
 80071b6:	f7ff ffd5 	bl	8007164 <Timer_Init>
	Line_Audio_Init(); // Initialize Audio Functionality
 80071ba:	f7ff fd37 	bl	8006c2c <Line_Audio_Init>
 80071be:	e019      	b.n	80071f4 <main+0x44>
			fx_state = ui_data.fx_selection_state;
 80071c0:	4a20      	ldr	r2, [pc, #128]	; (8007244 <main+0x94>)
 80071c2:	6811      	ldr	r1, [r2, #0]
 80071c4:	4b20      	ldr	r3, [pc, #128]	; (8007248 <main+0x98>)
 80071c6:	6059      	str	r1, [r3, #4]
			usb_state = ui_data.usb_selection_state;
 80071c8:	6851      	ldr	r1, [r2, #4]
 80071ca:	6099      	str	r1, [r3, #8]
			sv_state = ui_data.sv_selection_state;
 80071cc:	6892      	ldr	r2, [r2, #8]
 80071ce:	60da      	str	r2, [r3, #12]
			TIM_TICK = 0;
 80071d0:	2200      	movs	r2, #0
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	e012      	b.n	80071fc <main+0x4c>
				if (usb_state == USB_STATE_OFF) {
 80071d6:	4b1c      	ldr	r3, [pc, #112]	; (8007248 <main+0x98>)
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	b313      	cbz	r3, 8007222 <main+0x72>
			audio_line_in_buffer_state = BUFFER_OFFSET_NONE;
 80071dc:	4b1b      	ldr	r3, [pc, #108]	; (800724c <main+0x9c>)
 80071de:	2200      	movs	r2, #0
 80071e0:	601a      	str	r2, [r3, #0]
		if(audio_usb_in_buffer_state != BUFFER_OFFSET_NONE){
 80071e2:	4b1b      	ldr	r3, [pc, #108]	; (8007250 <main+0xa0>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	bb1b      	cbnz	r3, 8007230 <main+0x80>
		if (audio_line_out_buffer_state)
 80071e8:	4b1a      	ldr	r3, [pc, #104]	; (8007254 <main+0xa4>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	b113      	cbz	r3, 80071f4 <main+0x44>
			audio_line_out_buffer_state = 0;
 80071ee:	4b19      	ldr	r3, [pc, #100]	; (8007254 <main+0xa4>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	601a      	str	r2, [r3, #0]
		if (TIM_TICK == 1) {
 80071f4:	4b14      	ldr	r3, [pc, #80]	; (8007248 <main+0x98>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d0e1      	beq.n	80071c0 <main+0x10>
		if (audio_line_in_buffer_state != BUFFER_OFFSET_NONE)
 80071fc:	4b13      	ldr	r3, [pc, #76]	; (800724c <main+0x9c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0ee      	beq.n	80071e2 <main+0x32>
			if (audio_line_in_buffer_state == BUFFER_OFFSET_HALF)
 8007204:	4b11      	ldr	r3, [pc, #68]	; (800724c <main+0x9c>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d0e4      	beq.n	80071d6 <main+0x26>
				if (usb_state == USB_STATE_OFF) {
 800720c:	4b0e      	ldr	r3, [pc, #56]	; (8007248 <main+0x98>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e3      	bne.n	80071dc <main+0x2c>
					memcpy(&audio_out_buffer[RECORD_BUFFER_SIZE / 2],
 8007214:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007218:	490f      	ldr	r1, [pc, #60]	; (8007258 <main+0xa8>)
 800721a:	4810      	ldr	r0, [pc, #64]	; (800725c <main+0xac>)
 800721c:	f000 fc47 	bl	8007aae <memcpy>
 8007220:	e7dc      	b.n	80071dc <main+0x2c>
					memcpy(&audio_out_buffer[0], &audio_in_buffer[0], RECORD_BUFFER_SIZE);
 8007222:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007226:	490e      	ldr	r1, [pc, #56]	; (8007260 <main+0xb0>)
 8007228:	480e      	ldr	r0, [pc, #56]	; (8007264 <main+0xb4>)
 800722a:	f000 fc40 	bl	8007aae <memcpy>
 800722e:	e7d5      	b.n	80071dc <main+0x2c>
			printf("we got some data\r\n");
 8007230:	480d      	ldr	r0, [pc, #52]	; (8007268 <main+0xb8>)
 8007232:	f000 fd83 	bl	8007d3c <puts>
			fflush(stdout);
 8007236:	4b0d      	ldr	r3, [pc, #52]	; (800726c <main+0xbc>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6898      	ldr	r0, [r3, #8]
 800723c:	f000 fb08 	bl	8007850 <fflush>
 8007240:	e7d2      	b.n	80071e8 <main+0x38>
 8007242:	bf00      	nop
 8007244:	20001818 	.word	0x20001818
 8007248:	20001320 	.word	0x20001320
 800724c:	20007b6c 	.word	0x20007b6c
 8007250:	20005b68 	.word	0x20005b68
 8007254:	20003b64 	.word	0x20003b64
 8007258:	20006b6c 	.word	0x20006b6c
 800725c:	20002894 	.word	0x20002894
 8007260:	20005b6c 	.word	0x20005b6c
 8007264:	20001894 	.word	0x20001894
 8007268:	08008dbc 	.word	0x08008dbc
 800726c:	20000058 	.word	0x20000058

08007270 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void) {
 8007270:	b508      	push	{r3, lr}
	HAL_TIM_IRQHandler(&htim);
 8007272:	4802      	ldr	r0, [pc, #8]	; (800727c <TIM7_IRQHandler+0xc>)
 8007274:	f7fd fc0d 	bl	8004a92 <HAL_TIM_IRQHandler>
}
 8007278:	bd08      	pop	{r3, pc}
 800727a:	bf00      	nop
 800727c:	20007b74 	.word	0x20007b74

08007280 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim->Instance == TIM7) {
 8007280:	6802      	ldr	r2, [r0, #0]
 8007282:	4b04      	ldr	r3, [pc, #16]	; (8007294 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8007284:	429a      	cmp	r2, r3
 8007286:	d000      	beq.n	800728a <HAL_TIM_PeriodElapsedCallback+0xa>
		TIM_TICK = 1;
	}
}
 8007288:	4770      	bx	lr
		TIM_TICK = 1;
 800728a:	4b03      	ldr	r3, [pc, #12]	; (8007298 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800728c:	2201      	movs	r2, #1
 800728e:	601a      	str	r2, [r3, #0]
}
 8007290:	e7fa      	b.n	8007288 <HAL_TIM_PeriodElapsedCallback+0x8>
 8007292:	bf00      	nop
 8007294:	40001400 	.word	0x40001400
 8007298:	20001320 	.word	0x20001320

0800729c <DMA2_Stream4_IRQHandler>:
/******************************************************************************/


/* ISR Handlers */
void DMA2_Stream4_IRQHandler(void)
{
 800729c:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800729e:	4b02      	ldr	r3, [pc, #8]	; (80072a8 <DMA2_Stream4_IRQHandler+0xc>)
 80072a0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80072a2:	f7fa f9ed 	bl	8001680 <HAL_DMA_IRQHandler>
}
 80072a6:	bd08      	pop	{r3, pc}
 80072a8:	200013a4 	.word	0x200013a4

080072ac <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 80072ac:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 80072ae:	4b02      	ldr	r3, [pc, #8]	; (80072b8 <DMA2_Stream1_IRQHandler+0xc>)
 80072b0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80072b2:	f7fa f9e5 	bl	8001680 <HAL_DMA_IRQHandler>
}
 80072b6:	bd08      	pop	{r3, pc}
 80072b8:	20001488 	.word	0x20001488

080072bc <OTG_HS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
 80072bc:	b508      	push	{r3, lr}
  HAL_PCD_IRQHandler(&hpcd);
 80072be:	4802      	ldr	r0, [pc, #8]	; (80072c8 <OTG_HS_IRQHandler+0xc>)
 80072c0:	f7fb fc0e 	bl	8002ae0 <HAL_PCD_IRQHandler>
}
 80072c4:	bd08      	pop	{r3, pc}
 80072c6:	bf00      	nop
 80072c8:	20048218 	.word	0x20048218

080072cc <DMA2_Stream6_IRQHandler>:
  * @brief This function handles DMA2 Stream 5 interrupt request.
  * @param None
  * @retval None
  */
void DMA2_Stream6_IRQHandler(void)
{
 80072cc:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 80072ce:	4b02      	ldr	r3, [pc, #8]	; (80072d8 <DMA2_Stream6_IRQHandler+0xc>)
 80072d0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80072d2:	f7fa f9d5 	bl	8001680 <HAL_DMA_IRQHandler>
}
 80072d6:	bd08      	pop	{r3, pc}
 80072d8:	20001488 	.word	0x20001488

080072dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80072dc:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80072de:	4a0f      	ldr	r2, [pc, #60]	; (800731c <SystemInit+0x40>)
 80072e0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80072e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80072ec:	4b0c      	ldr	r3, [pc, #48]	; (8007320 <SystemInit+0x44>)
 80072ee:	6819      	ldr	r1, [r3, #0]
 80072f0:	f041 0101 	orr.w	r1, r1, #1
 80072f4:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80072f6:	2000      	movs	r0, #0
 80072f8:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80072fa:	681c      	ldr	r4, [r3, #0]
 80072fc:	4909      	ldr	r1, [pc, #36]	; (8007324 <SystemInit+0x48>)
 80072fe:	4021      	ands	r1, r4
 8007300:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007302:	4909      	ldr	r1, [pc, #36]	; (8007328 <SystemInit+0x4c>)
 8007304:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007306:	6819      	ldr	r1, [r3, #0]
 8007308:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800730c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800730e:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007310:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007314:	6093      	str	r3, [r2, #8]
#endif
}
 8007316:	f85d 4b04 	ldr.w	r4, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	e000ed00 	.word	0xe000ed00
 8007320:	40023800 	.word	0x40023800
 8007324:	fef6ffff 	.word	0xfef6ffff
 8007328:	24003010 	.word	0x24003010

0800732c <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 800732c:	b530      	push	{r4, r5, lr}
 800732e:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8007330:	6803      	ldr	r3, [r0, #0]
 8007332:	4a2e      	ldr	r2, [pc, #184]	; (80073ec <HAL_UART_MspInit+0xc0>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d004      	beq.n	8007342 <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 8007338:	4a2d      	ldr	r2, [pc, #180]	; (80073f0 <HAL_UART_MspInit+0xc4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d02c      	beq.n	8007398 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 800733e:	b00b      	add	sp, #44	; 0x2c
 8007340:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 8007342:	4c2c      	ldr	r4, [pc, #176]	; (80073f4 <HAL_UART_MspInit+0xc8>)
 8007344:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007346:	f043 0301 	orr.w	r3, r3, #1
 800734a:	6323      	str	r3, [r4, #48]	; 0x30
 800734c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	9301      	str	r3, [sp, #4]
 8007354:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8007356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800735a:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800735c:	2302      	movs	r3, #2
 800735e:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8007360:	2301      	movs	r3, #1
 8007362:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8007364:	2303      	movs	r3, #3
 8007366:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007368:	2307      	movs	r3, #7
 800736a:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 800736c:	4d22      	ldr	r5, [pc, #136]	; (80073f8 <HAL_UART_MspInit+0xcc>)
 800736e:	a905      	add	r1, sp, #20
 8007370:	4628      	mov	r0, r5
 8007372:	f7fa fa77 	bl	8001864 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800737a:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 800737c:	a905      	add	r1, sp, #20
 800737e:	4628      	mov	r0, r5
 8007380:	f7fa fa70 	bl	8001864 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8007384:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007386:	f043 0310 	orr.w	r3, r3, #16
 800738a:	6463      	str	r3, [r4, #68]	; 0x44
 800738c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800738e:	f003 0310 	and.w	r3, r3, #16
 8007392:	9302      	str	r3, [sp, #8]
 8007394:	9b02      	ldr	r3, [sp, #8]
 8007396:	e7d2      	b.n	800733e <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8007398:	4c16      	ldr	r4, [pc, #88]	; (80073f4 <HAL_UART_MspInit+0xc8>)
 800739a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800739c:	f043 0304 	orr.w	r3, r3, #4
 80073a0:	6323      	str	r3, [r4, #48]	; 0x30
 80073a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80073a4:	f003 0304 	and.w	r3, r3, #4
 80073a8:	9303      	str	r3, [sp, #12]
 80073aa:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 80073ac:	2340      	movs	r3, #64	; 0x40
 80073ae:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80073b0:	2302      	movs	r3, #2
 80073b2:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80073b4:	2301      	movs	r3, #1
 80073b6:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80073b8:	2303      	movs	r3, #3
 80073ba:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80073bc:	2308      	movs	r3, #8
 80073be:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 80073c0:	4d0e      	ldr	r5, [pc, #56]	; (80073fc <HAL_UART_MspInit+0xd0>)
 80073c2:	a905      	add	r1, sp, #20
 80073c4:	4628      	mov	r0, r5
 80073c6:	f7fa fa4d 	bl	8001864 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 80073ca:	2380      	movs	r3, #128	; 0x80
 80073cc:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 80073ce:	a905      	add	r1, sp, #20
 80073d0:	4628      	mov	r0, r5
 80073d2:	f7fa fa47 	bl	8001864 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 80073d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80073d8:	f043 0320 	orr.w	r3, r3, #32
 80073dc:	6463      	str	r3, [r4, #68]	; 0x44
 80073de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80073e0:	f003 0320 	and.w	r3, r3, #32
 80073e4:	9304      	str	r3, [sp, #16]
 80073e6:	9b04      	ldr	r3, [sp, #16]
}
 80073e8:	e7a9      	b.n	800733e <HAL_UART_MspInit+0x12>
 80073ea:	bf00      	nop
 80073ec:	40011000 	.word	0x40011000
 80073f0:	40011400 	.word	0x40011400
 80073f4:	40023800 	.word	0x40023800
 80073f8:	40020000 	.word	0x40020000
 80073fc:	40020800 	.word	0x40020800

08007400 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8007400:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8007402:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8007404:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8007406:	2200      	movs	r2, #0
 8007408:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 800740a:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 800740c:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 800740e:	210c      	movs	r1, #12
 8007410:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8007412:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8007414:	f7fe f821 	bl	800545a <HAL_UART_Init>
}
 8007418:	bd08      	pop	{r3, pc}
	...

0800741c <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 800741c:	b510      	push	{r4, lr}
 800741e:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8007420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007424:	b292      	uxth	r2, r2
 8007426:	4802      	ldr	r0, [pc, #8]	; (8007430 <_write+0x14>)
 8007428:	f7fd fcd6 	bl	8004dd8 <HAL_UART_Transmit>
	return len;
}
 800742c:	4620      	mov	r0, r4
 800742e:	bd10      	pop	{r4, pc}
 8007430:	20001824 	.word	0x20001824

08007434 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8007434:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8007436:	2200      	movs	r2, #0
 8007438:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800743a:	f04f 33ff 	mov.w	r3, #4294967295
 800743e:	2201      	movs	r2, #1
 8007440:	4802      	ldr	r0, [pc, #8]	; (800744c <_read+0x18>)
 8007442:	f7fd fd31 	bl	8004ea8 <HAL_UART_Receive>
	return len;
}
 8007446:	2001      	movs	r0, #1
 8007448:	bd08      	pop	{r3, pc}
 800744a:	bf00      	nop
 800744c:	20001824 	.word	0x20001824

08007450 <JPEG_IRQHandler>:

//
//
// -- Interrupt & Callback FUnctions -----
//
void JPEG_IRQHandler(void) {
 8007450:	b508      	push	{r3, lr}
	HAL_JPEG_IRQHandler(&hjpeg); // Pass to HAL
 8007452:	4802      	ldr	r0, [pc, #8]	; (800745c <JPEG_IRQHandler+0xc>)
 8007454:	f7fb fa1f 	bl	8002896 <HAL_JPEG_IRQHandler>
}
 8007458:	bd08      	pop	{r3, pc}
 800745a:	bf00      	nop
 800745c:	20008074 	.word	0x20008074

08007460 <HAL_JPEG_GetDataCallback>:

void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData) {
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	4604      	mov	r4, r0
	bzero(jpeg_input_buffer, JPEG_BUFFER_SIZE);
 8007464:	4d06      	ldr	r5, [pc, #24]	; (8007480 <HAL_JPEG_GetDataCallback+0x20>)
 8007466:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800746a:	4632      	mov	r2, r6
 800746c:	2100      	movs	r1, #0
 800746e:	4628      	mov	r0, r5
 8007470:	f000 fb2b 	bl	8007aca <memset>
	HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)jpeg_input_buffer, JPEG_BUFFER_SIZE);
 8007474:	4632      	mov	r2, r6
 8007476:	4629      	mov	r1, r5
 8007478:	4620      	mov	r0, r4
 800747a:	f7fa ff7b 	bl	8002374 <HAL_JPEG_ConfigInputBuffer>
}
 800747e:	bd70      	pop	{r4, r5, r6, pc}
 8007480:	200080d4 	.word	0x200080d4

08007484 <HAL_JPEG_DataReadyCallback>:

void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength) {
 8007484:	b508      	push	{r3, lr}
	OutputBufferAddress = JPEG_OUTPUT_DATA_BUFFER;
 8007486:	4b03      	ldr	r3, [pc, #12]	; (8007494 <HAL_JPEG_DataReadyCallback+0x10>)
 8007488:	4a03      	ldr	r2, [pc, #12]	; (8007498 <HAL_JPEG_DataReadyCallback+0x14>)
 800748a:	621a      	str	r2, [r3, #32]
	HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)jpeg_output_buffer, OutputBufferAddress);
 800748c:	6859      	ldr	r1, [r3, #4]
 800748e:	f7fa ff74 	bl	800237a <HAL_JPEG_ConfigOutputBuffer>
}
 8007492:	bd08      	pop	{r3, pc}
 8007494:	20000034 	.word	0x20000034
 8007498:	c0200000 	.word	0xc0200000

0800749c <HAL_JPEG_DecodeCpltCallback>:

void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg) {
	JPEG_DECODE_COMPLETE = 1;
 800749c:	4b01      	ldr	r3, [pc, #4]	; (80074a4 <HAL_JPEG_DecodeCpltCallback+0x8>)
 800749e:	2201      	movs	r2, #1
 80074a0:	605a      	str	r2, [r3, #4]
}
 80074a2:	4770      	bx	lr
 80074a4:	20001330 	.word	0x20001330

080074a8 <HAL_JPEG_InfoReadyCallback>:
		printf("\r\nError Code: Unknown");
	fflush(stdout);
}

/* Adjust the width to be a multiple of 8 or 16 when JPEG header has been parsed */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo) {
 80074a8:	b508      	push	{r3, lr}
 80074aa:	4608      	mov	r0, r1
	// Have to add padding for DMA2D
	if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING) {
 80074ac:	684a      	ldr	r2, [r1, #4]
 80074ae:	2a01      	cmp	r2, #1
 80074b0:	d018      	beq.n	80074e4 <HAL_JPEG_InfoReadyCallback+0x3c>

		if((pInfo->ImageHeight % 16) != 0)
			pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
	}

	if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING) {
 80074b2:	2a02      	cmp	r2, #2
 80074b4:	d027      	beq.n	8007506 <HAL_JPEG_InfoReadyCallback+0x5e>

		if((pInfo->ImageHeight % 8) != 0)
			pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
	}

	if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING) {
 80074b6:	b97a      	cbnz	r2, 80074d8 <HAL_JPEG_InfoReadyCallback+0x30>
		if((pInfo->ImageWidth % 8) != 0)
 80074b8:	68c3      	ldr	r3, [r0, #12]
 80074ba:	f013 0f07 	tst.w	r3, #7
 80074be:	d003      	beq.n	80074c8 <HAL_JPEG_InfoReadyCallback+0x20>
			pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80074c0:	f023 0307 	bic.w	r3, r3, #7
 80074c4:	3308      	adds	r3, #8
 80074c6:	60c3      	str	r3, [r0, #12]

		if((pInfo->ImageHeight % 8) != 0)
 80074c8:	6883      	ldr	r3, [r0, #8]
 80074ca:	f013 0f07 	tst.w	r3, #7
 80074ce:	d003      	beq.n	80074d8 <HAL_JPEG_InfoReadyCallback+0x30>
			pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 80074d0:	f023 0307 	bic.w	r3, r3, #7
 80074d4:	3308      	adds	r3, #8
 80074d6:	6083      	str	r3, [r0, #8]
	}

	if(JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb) != HAL_OK) {
 80074d8:	4a15      	ldr	r2, [pc, #84]	; (8007530 <HAL_JPEG_InfoReadyCallback+0x88>)
 80074da:	4916      	ldr	r1, [pc, #88]	; (8007534 <HAL_JPEG_InfoReadyCallback+0x8c>)
 80074dc:	f7ff fb14 	bl	8006b08 <JPEG_GetDecodeColorConvertFunc>
 80074e0:	bb10      	cbnz	r0, 8007528 <HAL_JPEG_InfoReadyCallback+0x80>
		printf("Error getting DecodeColorConvertFunct\r\n");
		while(1);
	}
}
 80074e2:	bd08      	pop	{r3, pc}
		if((pInfo->ImageWidth % 16) != 0)
 80074e4:	68cb      	ldr	r3, [r1, #12]
 80074e6:	f013 0f0f 	tst.w	r3, #15
 80074ea:	d003      	beq.n	80074f4 <HAL_JPEG_InfoReadyCallback+0x4c>
			pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80074ec:	f023 030f 	bic.w	r3, r3, #15
 80074f0:	3310      	adds	r3, #16
 80074f2:	60cb      	str	r3, [r1, #12]
		if((pInfo->ImageHeight % 16) != 0)
 80074f4:	6883      	ldr	r3, [r0, #8]
 80074f6:	f013 0f0f 	tst.w	r3, #15
 80074fa:	d0da      	beq.n	80074b2 <HAL_JPEG_InfoReadyCallback+0xa>
			pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 80074fc:	f023 030f 	bic.w	r3, r3, #15
 8007500:	3310      	adds	r3, #16
 8007502:	6083      	str	r3, [r0, #8]
 8007504:	e7d5      	b.n	80074b2 <HAL_JPEG_InfoReadyCallback+0xa>
		if((pInfo->ImageWidth % 16) != 0)
 8007506:	68c3      	ldr	r3, [r0, #12]
 8007508:	f013 0f0f 	tst.w	r3, #15
 800750c:	d003      	beq.n	8007516 <HAL_JPEG_InfoReadyCallback+0x6e>
			pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800750e:	f023 030f 	bic.w	r3, r3, #15
 8007512:	3310      	adds	r3, #16
 8007514:	60c3      	str	r3, [r0, #12]
		if((pInfo->ImageHeight % 8) != 0)
 8007516:	6883      	ldr	r3, [r0, #8]
 8007518:	f013 0f07 	tst.w	r3, #7
 800751c:	d0cb      	beq.n	80074b6 <HAL_JPEG_InfoReadyCallback+0xe>
			pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 800751e:	f023 0307 	bic.w	r3, r3, #7
 8007522:	3308      	adds	r3, #8
 8007524:	6083      	str	r3, [r0, #8]
 8007526:	e7c6      	b.n	80074b6 <HAL_JPEG_InfoReadyCallback+0xe>
		printf("Error getting DecodeColorConvertFunct\r\n");
 8007528:	4803      	ldr	r0, [pc, #12]	; (8007538 <HAL_JPEG_InfoReadyCallback+0x90>)
 800752a:	f000 fc07 	bl	8007d3c <puts>
		while(1);
 800752e:	e7fe      	b.n	800752e <HAL_JPEG_InfoReadyCallback+0x86>
 8007530:	2000133c 	.word	0x2000133c
 8007534:	200480d4 	.word	0x200480d4
 8007538:	08008f20 	.word	0x08008f20

0800753c <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800753c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800753e:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8007542:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007546:	f7fe fb94 	bl	8005c72 <USBD_LL_SetupStage>
}
 800754a:	bd08      	pop	{r3, pc}

0800754c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800754c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800754e:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8007552:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007556:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800755a:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800755e:	f7fe fbb4 	bl	8005cca <USBD_LL_DataOutStage>
}
 8007562:	bd08      	pop	{r3, pc}

08007564 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007564:	b508      	push	{r3, lr}
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007566:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800756a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800756e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007570:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007574:	f7fe fbe2 	bl	8005d3c <USBD_LL_DataInStage>
}
 8007578:	bd08      	pop	{r3, pc}

0800757a <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800757a:	b508      	push	{r3, lr}
  USBD_LL_SOF(hpcd->pData);
 800757c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007580:	f7fe fc78 	bl	8005e74 <USBD_LL_SOF>
}
 8007584:	bd08      	pop	{r3, pc}

08007586 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8007586:	b538      	push	{r3, r4, r5, lr}
 8007588:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
  
  /* Set USB Current Speed */
  switch(hpcd->Init.speed)
 800758a:	68c3      	ldr	r3, [r0, #12]
 800758c:	b153      	cbz	r3, 80075a4 <HAL_PCD_ResetCallback+0x1e>
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
    break;
    
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800758e:	2501      	movs	r5, #1
    speed = USBD_SPEED_FULL;
    break;
  }
  
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8007590:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8007594:	f7fe fc2e 	bl	8005df4 <USBD_LL_Reset>
  
  USBD_LL_SetSpeed(hpcd->pData, speed);
 8007598:	4629      	mov	r1, r5
 800759a:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 800759e:	f7fe fc52 	bl	8005e46 <USBD_LL_SetSpeed>
}
 80075a2:	bd38      	pop	{r3, r4, r5, pc}
  switch(hpcd->Init.speed)
 80075a4:	2500      	movs	r5, #0
 80075a6:	e7f3      	b.n	8007590 <HAL_PCD_ResetCallback+0xa>

080075a8 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80075a8:	b508      	push	{r3, lr}
  USBD_LL_Suspend(hpcd->pData);
 80075aa:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80075ae:	f7fe fc4d 	bl	8005e4c <USBD_LL_Suspend>
}
 80075b2:	bd08      	pop	{r3, pc}

080075b4 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80075b4:	b508      	push	{r3, lr}
  USBD_LL_Resume(hpcd->pData);
 80075b6:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80075ba:	f7fe fc50 	bl	8005e5e <USBD_LL_Resume>
}
 80075be:	bd08      	pop	{r3, pc}

080075c0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80075c0:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 80075c2:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80075c6:	f7fe fc65 	bl	8005e94 <USBD_LL_IsoOUTIncomplete>
}
 80075ca:	bd08      	pop	{r3, pc}

080075cc <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80075cc:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 80075ce:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80075d2:	f7fe fc5d 	bl	8005e90 <USBD_LL_IsoINIncomplete>
}
 80075d6:	bd08      	pop	{r3, pc}

080075d8 <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80075d8:	b508      	push	{r3, lr}
  USBD_LL_DevConnected(hpcd->pData);
 80075da:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80075de:	f7fe fc5b 	bl	8005e98 <USBD_LL_DevConnected>
}
 80075e2:	bd08      	pop	{r3, pc}

080075e4 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80075e4:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected(hpcd->pData);
 80075e6:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80075ea:	f7fe fc57 	bl	8005e9c <USBD_LL_DevDisconnected>
}
 80075ee:	bd08      	pop	{r3, pc}

080075f0 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 80075f0:	b510      	push	{r4, lr}
 80075f2:	4614      	mov	r4, r2
 80075f4:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData,
 80075f6:	4623      	mov	r3, r4
 80075f8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80075fc:	f7fb fcfb 	bl	8002ff6 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 8007600:	2000      	movs	r0, #0
 8007602:	bd10      	pop	{r4, pc}

08007604 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007604:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007606:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800760a:	f7fb fd91 	bl	8003130 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 800760e:	2000      	movs	r0, #0
 8007610:	bd08      	pop	{r3, pc}

08007612 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007612:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007614:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007618:	f7fb fdce 	bl	80031b8 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 800761c:	2000      	movs	r0, #0
 800761e:	bd08      	pop	{r3, pc}

08007620 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007620:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  
  if((ep_addr & 0x80) == 0x80)
 8007624:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007628:	d108      	bne.n	800763c <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800762a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800762e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007632:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8007636:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 800763a:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800763c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8007640:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007644:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8007648:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 800764c:	4770      	bx	lr

0800764e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800764e:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007650:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007654:	f7fb fcbb 	bl	8002fce <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8007658:	2000      	movs	r0, #0
 800765a:	bd08      	pop	{r3, pc}

0800765c <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint32_t size)
{
 800765c:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800765e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007662:	f7fb fd3a 	bl	80030da <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8007666:	2000      	movs	r0, #0
 8007668:	bd08      	pop	{r3, pc}

0800766a <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint32_t size)
{
 800766a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800766c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007670:	f7fb fd04 	bl	800307c <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8007674:	2000      	movs	r0, #0
 8007676:	bd08      	pop	{r3, pc}

08007678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80076b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800767c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800767e:	e003      	b.n	8007688 <LoopCopyDataInit>

08007680 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007680:	4b0c      	ldr	r3, [pc, #48]	; (80076b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007682:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007684:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007686:	3104      	adds	r1, #4

08007688 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007688:	480b      	ldr	r0, [pc, #44]	; (80076b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800768a:	4b0c      	ldr	r3, [pc, #48]	; (80076bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800768c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800768e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007690:	d3f6      	bcc.n	8007680 <CopyDataInit>
  ldr  r2, =_sbss
 8007692:	4a0b      	ldr	r2, [pc, #44]	; (80076c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007694:	e002      	b.n	800769c <LoopFillZerobss>

08007696 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007696:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007698:	f842 3b04 	str.w	r3, [r2], #4

0800769c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800769c:	4b09      	ldr	r3, [pc, #36]	; (80076c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800769e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80076a0:	d3f9      	bcc.n	8007696 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80076a2:	f7ff fe1b 	bl	80072dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80076a6:	f000 f9db 	bl	8007a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80076aa:	f7ff fd81 	bl	80071b0 <main>
  bx  lr    
 80076ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80076b0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80076b4:	0800902c 	.word	0x0800902c
  ldr  r0, =_sdata
 80076b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80076bc:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 80076c0:	200000bc 	.word	0x200000bc
  ldr  r3, = _ebss
 80076c4:	2004862c 	.word	0x2004862c

080076c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80076c8:	e7fe      	b.n	80076c8 <ADC_IRQHandler>
	...

080076cc <__sflush_r>:
 80076cc:	898a      	ldrh	r2, [r1, #12]
 80076ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d2:	4605      	mov	r5, r0
 80076d4:	0710      	lsls	r0, r2, #28
 80076d6:	460c      	mov	r4, r1
 80076d8:	d458      	bmi.n	800778c <__sflush_r+0xc0>
 80076da:	684b      	ldr	r3, [r1, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	dc05      	bgt.n	80076ec <__sflush_r+0x20>
 80076e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	dc02      	bgt.n	80076ec <__sflush_r+0x20>
 80076e6:	2000      	movs	r0, #0
 80076e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076ee:	2e00      	cmp	r6, #0
 80076f0:	d0f9      	beq.n	80076e6 <__sflush_r+0x1a>
 80076f2:	2300      	movs	r3, #0
 80076f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076f8:	682f      	ldr	r7, [r5, #0]
 80076fa:	602b      	str	r3, [r5, #0]
 80076fc:	d032      	beq.n	8007764 <__sflush_r+0x98>
 80076fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	075a      	lsls	r2, r3, #29
 8007704:	d505      	bpl.n	8007712 <__sflush_r+0x46>
 8007706:	6863      	ldr	r3, [r4, #4]
 8007708:	1ac0      	subs	r0, r0, r3
 800770a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800770c:	b10b      	cbz	r3, 8007712 <__sflush_r+0x46>
 800770e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007710:	1ac0      	subs	r0, r0, r3
 8007712:	2300      	movs	r3, #0
 8007714:	4602      	mov	r2, r0
 8007716:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007718:	6a21      	ldr	r1, [r4, #32]
 800771a:	4628      	mov	r0, r5
 800771c:	47b0      	blx	r6
 800771e:	1c43      	adds	r3, r0, #1
 8007720:	89a3      	ldrh	r3, [r4, #12]
 8007722:	d106      	bne.n	8007732 <__sflush_r+0x66>
 8007724:	6829      	ldr	r1, [r5, #0]
 8007726:	291d      	cmp	r1, #29
 8007728:	d82c      	bhi.n	8007784 <__sflush_r+0xb8>
 800772a:	4a2a      	ldr	r2, [pc, #168]	; (80077d4 <__sflush_r+0x108>)
 800772c:	40ca      	lsrs	r2, r1
 800772e:	07d6      	lsls	r6, r2, #31
 8007730:	d528      	bpl.n	8007784 <__sflush_r+0xb8>
 8007732:	2200      	movs	r2, #0
 8007734:	6062      	str	r2, [r4, #4]
 8007736:	04d9      	lsls	r1, r3, #19
 8007738:	6922      	ldr	r2, [r4, #16]
 800773a:	6022      	str	r2, [r4, #0]
 800773c:	d504      	bpl.n	8007748 <__sflush_r+0x7c>
 800773e:	1c42      	adds	r2, r0, #1
 8007740:	d101      	bne.n	8007746 <__sflush_r+0x7a>
 8007742:	682b      	ldr	r3, [r5, #0]
 8007744:	b903      	cbnz	r3, 8007748 <__sflush_r+0x7c>
 8007746:	6560      	str	r0, [r4, #84]	; 0x54
 8007748:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800774a:	602f      	str	r7, [r5, #0]
 800774c:	2900      	cmp	r1, #0
 800774e:	d0ca      	beq.n	80076e6 <__sflush_r+0x1a>
 8007750:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007754:	4299      	cmp	r1, r3
 8007756:	d002      	beq.n	800775e <__sflush_r+0x92>
 8007758:	4628      	mov	r0, r5
 800775a:	f000 f9bf 	bl	8007adc <_free_r>
 800775e:	2000      	movs	r0, #0
 8007760:	6360      	str	r0, [r4, #52]	; 0x34
 8007762:	e7c1      	b.n	80076e8 <__sflush_r+0x1c>
 8007764:	6a21      	ldr	r1, [r4, #32]
 8007766:	2301      	movs	r3, #1
 8007768:	4628      	mov	r0, r5
 800776a:	47b0      	blx	r6
 800776c:	1c41      	adds	r1, r0, #1
 800776e:	d1c7      	bne.n	8007700 <__sflush_r+0x34>
 8007770:	682b      	ldr	r3, [r5, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0c4      	beq.n	8007700 <__sflush_r+0x34>
 8007776:	2b1d      	cmp	r3, #29
 8007778:	d001      	beq.n	800777e <__sflush_r+0xb2>
 800777a:	2b16      	cmp	r3, #22
 800777c:	d101      	bne.n	8007782 <__sflush_r+0xb6>
 800777e:	602f      	str	r7, [r5, #0]
 8007780:	e7b1      	b.n	80076e6 <__sflush_r+0x1a>
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007788:	81a3      	strh	r3, [r4, #12]
 800778a:	e7ad      	b.n	80076e8 <__sflush_r+0x1c>
 800778c:	690f      	ldr	r7, [r1, #16]
 800778e:	2f00      	cmp	r7, #0
 8007790:	d0a9      	beq.n	80076e6 <__sflush_r+0x1a>
 8007792:	0793      	lsls	r3, r2, #30
 8007794:	680e      	ldr	r6, [r1, #0]
 8007796:	bf08      	it	eq
 8007798:	694b      	ldreq	r3, [r1, #20]
 800779a:	600f      	str	r7, [r1, #0]
 800779c:	bf18      	it	ne
 800779e:	2300      	movne	r3, #0
 80077a0:	eba6 0807 	sub.w	r8, r6, r7
 80077a4:	608b      	str	r3, [r1, #8]
 80077a6:	f1b8 0f00 	cmp.w	r8, #0
 80077aa:	dd9c      	ble.n	80076e6 <__sflush_r+0x1a>
 80077ac:	6a21      	ldr	r1, [r4, #32]
 80077ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077b0:	4643      	mov	r3, r8
 80077b2:	463a      	mov	r2, r7
 80077b4:	4628      	mov	r0, r5
 80077b6:	47b0      	blx	r6
 80077b8:	2800      	cmp	r0, #0
 80077ba:	dc06      	bgt.n	80077ca <__sflush_r+0xfe>
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077c2:	81a3      	strh	r3, [r4, #12]
 80077c4:	f04f 30ff 	mov.w	r0, #4294967295
 80077c8:	e78e      	b.n	80076e8 <__sflush_r+0x1c>
 80077ca:	4407      	add	r7, r0
 80077cc:	eba8 0800 	sub.w	r8, r8, r0
 80077d0:	e7e9      	b.n	80077a6 <__sflush_r+0xda>
 80077d2:	bf00      	nop
 80077d4:	20400001 	.word	0x20400001

080077d8 <_fflush_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	690b      	ldr	r3, [r1, #16]
 80077dc:	4605      	mov	r5, r0
 80077de:	460c      	mov	r4, r1
 80077e0:	b913      	cbnz	r3, 80077e8 <_fflush_r+0x10>
 80077e2:	2500      	movs	r5, #0
 80077e4:	4628      	mov	r0, r5
 80077e6:	bd38      	pop	{r3, r4, r5, pc}
 80077e8:	b118      	cbz	r0, 80077f2 <_fflush_r+0x1a>
 80077ea:	6983      	ldr	r3, [r0, #24]
 80077ec:	b90b      	cbnz	r3, 80077f2 <_fflush_r+0x1a>
 80077ee:	f000 f899 	bl	8007924 <__sinit>
 80077f2:	4b14      	ldr	r3, [pc, #80]	; (8007844 <_fflush_r+0x6c>)
 80077f4:	429c      	cmp	r4, r3
 80077f6:	d11b      	bne.n	8007830 <_fflush_r+0x58>
 80077f8:	686c      	ldr	r4, [r5, #4]
 80077fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0ef      	beq.n	80077e2 <_fflush_r+0xa>
 8007802:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007804:	07d0      	lsls	r0, r2, #31
 8007806:	d404      	bmi.n	8007812 <_fflush_r+0x3a>
 8007808:	0599      	lsls	r1, r3, #22
 800780a:	d402      	bmi.n	8007812 <_fflush_r+0x3a>
 800780c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800780e:	f000 f94c 	bl	8007aaa <__retarget_lock_acquire_recursive>
 8007812:	4628      	mov	r0, r5
 8007814:	4621      	mov	r1, r4
 8007816:	f7ff ff59 	bl	80076cc <__sflush_r>
 800781a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800781c:	07da      	lsls	r2, r3, #31
 800781e:	4605      	mov	r5, r0
 8007820:	d4e0      	bmi.n	80077e4 <_fflush_r+0xc>
 8007822:	89a3      	ldrh	r3, [r4, #12]
 8007824:	059b      	lsls	r3, r3, #22
 8007826:	d4dd      	bmi.n	80077e4 <_fflush_r+0xc>
 8007828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800782a:	f000 f93f 	bl	8007aac <__retarget_lock_release_recursive>
 800782e:	e7d9      	b.n	80077e4 <_fflush_r+0xc>
 8007830:	4b05      	ldr	r3, [pc, #20]	; (8007848 <_fflush_r+0x70>)
 8007832:	429c      	cmp	r4, r3
 8007834:	d101      	bne.n	800783a <_fflush_r+0x62>
 8007836:	68ac      	ldr	r4, [r5, #8]
 8007838:	e7df      	b.n	80077fa <_fflush_r+0x22>
 800783a:	4b04      	ldr	r3, [pc, #16]	; (800784c <_fflush_r+0x74>)
 800783c:	429c      	cmp	r4, r3
 800783e:	bf08      	it	eq
 8007840:	68ec      	ldreq	r4, [r5, #12]
 8007842:	e7da      	b.n	80077fa <_fflush_r+0x22>
 8007844:	08008fac 	.word	0x08008fac
 8007848:	08008fcc 	.word	0x08008fcc
 800784c:	08008f8c 	.word	0x08008f8c

08007850 <fflush>:
 8007850:	4601      	mov	r1, r0
 8007852:	b920      	cbnz	r0, 800785e <fflush+0xe>
 8007854:	4b04      	ldr	r3, [pc, #16]	; (8007868 <fflush+0x18>)
 8007856:	4905      	ldr	r1, [pc, #20]	; (800786c <fflush+0x1c>)
 8007858:	6818      	ldr	r0, [r3, #0]
 800785a:	f000 b8e1 	b.w	8007a20 <_fwalk_reent>
 800785e:	4b04      	ldr	r3, [pc, #16]	; (8007870 <fflush+0x20>)
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	f7ff bfb9 	b.w	80077d8 <_fflush_r>
 8007866:	bf00      	nop
 8007868:	08008fec 	.word	0x08008fec
 800786c:	080077d9 	.word	0x080077d9
 8007870:	20000058 	.word	0x20000058

08007874 <std>:
 8007874:	2300      	movs	r3, #0
 8007876:	b510      	push	{r4, lr}
 8007878:	4604      	mov	r4, r0
 800787a:	e9c0 3300 	strd	r3, r3, [r0]
 800787e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007882:	6083      	str	r3, [r0, #8]
 8007884:	8181      	strh	r1, [r0, #12]
 8007886:	6643      	str	r3, [r0, #100]	; 0x64
 8007888:	81c2      	strh	r2, [r0, #14]
 800788a:	6183      	str	r3, [r0, #24]
 800788c:	4619      	mov	r1, r3
 800788e:	2208      	movs	r2, #8
 8007890:	305c      	adds	r0, #92	; 0x5c
 8007892:	f000 f91a 	bl	8007aca <memset>
 8007896:	4b05      	ldr	r3, [pc, #20]	; (80078ac <std+0x38>)
 8007898:	6263      	str	r3, [r4, #36]	; 0x24
 800789a:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <std+0x3c>)
 800789c:	62a3      	str	r3, [r4, #40]	; 0x28
 800789e:	4b05      	ldr	r3, [pc, #20]	; (80078b4 <std+0x40>)
 80078a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078a2:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <std+0x44>)
 80078a4:	6224      	str	r4, [r4, #32]
 80078a6:	6323      	str	r3, [r4, #48]	; 0x30
 80078a8:	bd10      	pop	{r4, pc}
 80078aa:	bf00      	nop
 80078ac:	08007d6d 	.word	0x08007d6d
 80078b0:	08007d8f 	.word	0x08007d8f
 80078b4:	08007dc7 	.word	0x08007dc7
 80078b8:	08007deb 	.word	0x08007deb

080078bc <_cleanup_r>:
 80078bc:	4901      	ldr	r1, [pc, #4]	; (80078c4 <_cleanup_r+0x8>)
 80078be:	f000 b8af 	b.w	8007a20 <_fwalk_reent>
 80078c2:	bf00      	nop
 80078c4:	080077d9 	.word	0x080077d9

080078c8 <__sfmoreglue>:
 80078c8:	b570      	push	{r4, r5, r6, lr}
 80078ca:	1e4a      	subs	r2, r1, #1
 80078cc:	2568      	movs	r5, #104	; 0x68
 80078ce:	4355      	muls	r5, r2
 80078d0:	460e      	mov	r6, r1
 80078d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078d6:	f000 f951 	bl	8007b7c <_malloc_r>
 80078da:	4604      	mov	r4, r0
 80078dc:	b140      	cbz	r0, 80078f0 <__sfmoreglue+0x28>
 80078de:	2100      	movs	r1, #0
 80078e0:	e9c0 1600 	strd	r1, r6, [r0]
 80078e4:	300c      	adds	r0, #12
 80078e6:	60a0      	str	r0, [r4, #8]
 80078e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078ec:	f000 f8ed 	bl	8007aca <memset>
 80078f0:	4620      	mov	r0, r4
 80078f2:	bd70      	pop	{r4, r5, r6, pc}

080078f4 <__sfp_lock_acquire>:
 80078f4:	4801      	ldr	r0, [pc, #4]	; (80078fc <__sfp_lock_acquire+0x8>)
 80078f6:	f000 b8d8 	b.w	8007aaa <__retarget_lock_acquire_recursive>
 80078fa:	bf00      	nop
 80078fc:	20048624 	.word	0x20048624

08007900 <__sfp_lock_release>:
 8007900:	4801      	ldr	r0, [pc, #4]	; (8007908 <__sfp_lock_release+0x8>)
 8007902:	f000 b8d3 	b.w	8007aac <__retarget_lock_release_recursive>
 8007906:	bf00      	nop
 8007908:	20048624 	.word	0x20048624

0800790c <__sinit_lock_acquire>:
 800790c:	4801      	ldr	r0, [pc, #4]	; (8007914 <__sinit_lock_acquire+0x8>)
 800790e:	f000 b8cc 	b.w	8007aaa <__retarget_lock_acquire_recursive>
 8007912:	bf00      	nop
 8007914:	2004861f 	.word	0x2004861f

08007918 <__sinit_lock_release>:
 8007918:	4801      	ldr	r0, [pc, #4]	; (8007920 <__sinit_lock_release+0x8>)
 800791a:	f000 b8c7 	b.w	8007aac <__retarget_lock_release_recursive>
 800791e:	bf00      	nop
 8007920:	2004861f 	.word	0x2004861f

08007924 <__sinit>:
 8007924:	b510      	push	{r4, lr}
 8007926:	4604      	mov	r4, r0
 8007928:	f7ff fff0 	bl	800790c <__sinit_lock_acquire>
 800792c:	69a3      	ldr	r3, [r4, #24]
 800792e:	b11b      	cbz	r3, 8007938 <__sinit+0x14>
 8007930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007934:	f7ff bff0 	b.w	8007918 <__sinit_lock_release>
 8007938:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800793c:	6523      	str	r3, [r4, #80]	; 0x50
 800793e:	4b13      	ldr	r3, [pc, #76]	; (800798c <__sinit+0x68>)
 8007940:	4a13      	ldr	r2, [pc, #76]	; (8007990 <__sinit+0x6c>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	62a2      	str	r2, [r4, #40]	; 0x28
 8007946:	42a3      	cmp	r3, r4
 8007948:	bf04      	itt	eq
 800794a:	2301      	moveq	r3, #1
 800794c:	61a3      	streq	r3, [r4, #24]
 800794e:	4620      	mov	r0, r4
 8007950:	f000 f820 	bl	8007994 <__sfp>
 8007954:	6060      	str	r0, [r4, #4]
 8007956:	4620      	mov	r0, r4
 8007958:	f000 f81c 	bl	8007994 <__sfp>
 800795c:	60a0      	str	r0, [r4, #8]
 800795e:	4620      	mov	r0, r4
 8007960:	f000 f818 	bl	8007994 <__sfp>
 8007964:	2200      	movs	r2, #0
 8007966:	60e0      	str	r0, [r4, #12]
 8007968:	2104      	movs	r1, #4
 800796a:	6860      	ldr	r0, [r4, #4]
 800796c:	f7ff ff82 	bl	8007874 <std>
 8007970:	68a0      	ldr	r0, [r4, #8]
 8007972:	2201      	movs	r2, #1
 8007974:	2109      	movs	r1, #9
 8007976:	f7ff ff7d 	bl	8007874 <std>
 800797a:	68e0      	ldr	r0, [r4, #12]
 800797c:	2202      	movs	r2, #2
 800797e:	2112      	movs	r1, #18
 8007980:	f7ff ff78 	bl	8007874 <std>
 8007984:	2301      	movs	r3, #1
 8007986:	61a3      	str	r3, [r4, #24]
 8007988:	e7d2      	b.n	8007930 <__sinit+0xc>
 800798a:	bf00      	nop
 800798c:	08008fec 	.word	0x08008fec
 8007990:	080078bd 	.word	0x080078bd

08007994 <__sfp>:
 8007994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007996:	4607      	mov	r7, r0
 8007998:	f7ff ffac 	bl	80078f4 <__sfp_lock_acquire>
 800799c:	4b1e      	ldr	r3, [pc, #120]	; (8007a18 <__sfp+0x84>)
 800799e:	681e      	ldr	r6, [r3, #0]
 80079a0:	69b3      	ldr	r3, [r6, #24]
 80079a2:	b913      	cbnz	r3, 80079aa <__sfp+0x16>
 80079a4:	4630      	mov	r0, r6
 80079a6:	f7ff ffbd 	bl	8007924 <__sinit>
 80079aa:	3648      	adds	r6, #72	; 0x48
 80079ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	d503      	bpl.n	80079bc <__sfp+0x28>
 80079b4:	6833      	ldr	r3, [r6, #0]
 80079b6:	b30b      	cbz	r3, 80079fc <__sfp+0x68>
 80079b8:	6836      	ldr	r6, [r6, #0]
 80079ba:	e7f7      	b.n	80079ac <__sfp+0x18>
 80079bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079c0:	b9d5      	cbnz	r5, 80079f8 <__sfp+0x64>
 80079c2:	4b16      	ldr	r3, [pc, #88]	; (8007a1c <__sfp+0x88>)
 80079c4:	60e3      	str	r3, [r4, #12]
 80079c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079ca:	6665      	str	r5, [r4, #100]	; 0x64
 80079cc:	f000 f86c 	bl	8007aa8 <__retarget_lock_init_recursive>
 80079d0:	f7ff ff96 	bl	8007900 <__sfp_lock_release>
 80079d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079dc:	6025      	str	r5, [r4, #0]
 80079de:	61a5      	str	r5, [r4, #24]
 80079e0:	2208      	movs	r2, #8
 80079e2:	4629      	mov	r1, r5
 80079e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079e8:	f000 f86f 	bl	8007aca <memset>
 80079ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079f4:	4620      	mov	r0, r4
 80079f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079f8:	3468      	adds	r4, #104	; 0x68
 80079fa:	e7d9      	b.n	80079b0 <__sfp+0x1c>
 80079fc:	2104      	movs	r1, #4
 80079fe:	4638      	mov	r0, r7
 8007a00:	f7ff ff62 	bl	80078c8 <__sfmoreglue>
 8007a04:	4604      	mov	r4, r0
 8007a06:	6030      	str	r0, [r6, #0]
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d1d5      	bne.n	80079b8 <__sfp+0x24>
 8007a0c:	f7ff ff78 	bl	8007900 <__sfp_lock_release>
 8007a10:	230c      	movs	r3, #12
 8007a12:	603b      	str	r3, [r7, #0]
 8007a14:	e7ee      	b.n	80079f4 <__sfp+0x60>
 8007a16:	bf00      	nop
 8007a18:	08008fec 	.word	0x08008fec
 8007a1c:	ffff0001 	.word	0xffff0001

08007a20 <_fwalk_reent>:
 8007a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a24:	4606      	mov	r6, r0
 8007a26:	4688      	mov	r8, r1
 8007a28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a2c:	2700      	movs	r7, #0
 8007a2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a32:	f1b9 0901 	subs.w	r9, r9, #1
 8007a36:	d505      	bpl.n	8007a44 <_fwalk_reent+0x24>
 8007a38:	6824      	ldr	r4, [r4, #0]
 8007a3a:	2c00      	cmp	r4, #0
 8007a3c:	d1f7      	bne.n	8007a2e <_fwalk_reent+0xe>
 8007a3e:	4638      	mov	r0, r7
 8007a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a44:	89ab      	ldrh	r3, [r5, #12]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d907      	bls.n	8007a5a <_fwalk_reent+0x3a>
 8007a4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	d003      	beq.n	8007a5a <_fwalk_reent+0x3a>
 8007a52:	4629      	mov	r1, r5
 8007a54:	4630      	mov	r0, r6
 8007a56:	47c0      	blx	r8
 8007a58:	4307      	orrs	r7, r0
 8007a5a:	3568      	adds	r5, #104	; 0x68
 8007a5c:	e7e9      	b.n	8007a32 <_fwalk_reent+0x12>
	...

08007a60 <__libc_init_array>:
 8007a60:	b570      	push	{r4, r5, r6, lr}
 8007a62:	4d0d      	ldr	r5, [pc, #52]	; (8007a98 <__libc_init_array+0x38>)
 8007a64:	4c0d      	ldr	r4, [pc, #52]	; (8007a9c <__libc_init_array+0x3c>)
 8007a66:	1b64      	subs	r4, r4, r5
 8007a68:	10a4      	asrs	r4, r4, #2
 8007a6a:	2600      	movs	r6, #0
 8007a6c:	42a6      	cmp	r6, r4
 8007a6e:	d109      	bne.n	8007a84 <__libc_init_array+0x24>
 8007a70:	4d0b      	ldr	r5, [pc, #44]	; (8007aa0 <__libc_init_array+0x40>)
 8007a72:	4c0c      	ldr	r4, [pc, #48]	; (8007aa4 <__libc_init_array+0x44>)
 8007a74:	f000 fe72 	bl	800875c <_init>
 8007a78:	1b64      	subs	r4, r4, r5
 8007a7a:	10a4      	asrs	r4, r4, #2
 8007a7c:	2600      	movs	r6, #0
 8007a7e:	42a6      	cmp	r6, r4
 8007a80:	d105      	bne.n	8007a8e <__libc_init_array+0x2e>
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
 8007a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a88:	4798      	blx	r3
 8007a8a:	3601      	adds	r6, #1
 8007a8c:	e7ee      	b.n	8007a6c <__libc_init_array+0xc>
 8007a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a92:	4798      	blx	r3
 8007a94:	3601      	adds	r6, #1
 8007a96:	e7f2      	b.n	8007a7e <__libc_init_array+0x1e>
 8007a98:	08009024 	.word	0x08009024
 8007a9c:	08009024 	.word	0x08009024
 8007aa0:	08009024 	.word	0x08009024
 8007aa4:	08009028 	.word	0x08009028

08007aa8 <__retarget_lock_init_recursive>:
 8007aa8:	4770      	bx	lr

08007aaa <__retarget_lock_acquire_recursive>:
 8007aaa:	4770      	bx	lr

08007aac <__retarget_lock_release_recursive>:
 8007aac:	4770      	bx	lr

08007aae <memcpy>:
 8007aae:	440a      	add	r2, r1
 8007ab0:	4291      	cmp	r1, r2
 8007ab2:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ab6:	d100      	bne.n	8007aba <memcpy+0xc>
 8007ab8:	4770      	bx	lr
 8007aba:	b510      	push	{r4, lr}
 8007abc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ac0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ac4:	4291      	cmp	r1, r2
 8007ac6:	d1f9      	bne.n	8007abc <memcpy+0xe>
 8007ac8:	bd10      	pop	{r4, pc}

08007aca <memset>:
 8007aca:	4402      	add	r2, r0
 8007acc:	4603      	mov	r3, r0
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d100      	bne.n	8007ad4 <memset+0xa>
 8007ad2:	4770      	bx	lr
 8007ad4:	f803 1b01 	strb.w	r1, [r3], #1
 8007ad8:	e7f9      	b.n	8007ace <memset+0x4>
	...

08007adc <_free_r>:
 8007adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ade:	2900      	cmp	r1, #0
 8007ae0:	d048      	beq.n	8007b74 <_free_r+0x98>
 8007ae2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ae6:	9001      	str	r0, [sp, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f1a1 0404 	sub.w	r4, r1, #4
 8007aee:	bfb8      	it	lt
 8007af0:	18e4      	addlt	r4, r4, r3
 8007af2:	f000 fad7 	bl	80080a4 <__malloc_lock>
 8007af6:	4a20      	ldr	r2, [pc, #128]	; (8007b78 <_free_r+0x9c>)
 8007af8:	9801      	ldr	r0, [sp, #4]
 8007afa:	6813      	ldr	r3, [r2, #0]
 8007afc:	4615      	mov	r5, r2
 8007afe:	b933      	cbnz	r3, 8007b0e <_free_r+0x32>
 8007b00:	6063      	str	r3, [r4, #4]
 8007b02:	6014      	str	r4, [r2, #0]
 8007b04:	b003      	add	sp, #12
 8007b06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b0a:	f000 bad1 	b.w	80080b0 <__malloc_unlock>
 8007b0e:	42a3      	cmp	r3, r4
 8007b10:	d90b      	bls.n	8007b2a <_free_r+0x4e>
 8007b12:	6821      	ldr	r1, [r4, #0]
 8007b14:	1862      	adds	r2, r4, r1
 8007b16:	4293      	cmp	r3, r2
 8007b18:	bf04      	itt	eq
 8007b1a:	681a      	ldreq	r2, [r3, #0]
 8007b1c:	685b      	ldreq	r3, [r3, #4]
 8007b1e:	6063      	str	r3, [r4, #4]
 8007b20:	bf04      	itt	eq
 8007b22:	1852      	addeq	r2, r2, r1
 8007b24:	6022      	streq	r2, [r4, #0]
 8007b26:	602c      	str	r4, [r5, #0]
 8007b28:	e7ec      	b.n	8007b04 <_free_r+0x28>
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	b10b      	cbz	r3, 8007b34 <_free_r+0x58>
 8007b30:	42a3      	cmp	r3, r4
 8007b32:	d9fa      	bls.n	8007b2a <_free_r+0x4e>
 8007b34:	6811      	ldr	r1, [r2, #0]
 8007b36:	1855      	adds	r5, r2, r1
 8007b38:	42a5      	cmp	r5, r4
 8007b3a:	d10b      	bne.n	8007b54 <_free_r+0x78>
 8007b3c:	6824      	ldr	r4, [r4, #0]
 8007b3e:	4421      	add	r1, r4
 8007b40:	1854      	adds	r4, r2, r1
 8007b42:	42a3      	cmp	r3, r4
 8007b44:	6011      	str	r1, [r2, #0]
 8007b46:	d1dd      	bne.n	8007b04 <_free_r+0x28>
 8007b48:	681c      	ldr	r4, [r3, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	6053      	str	r3, [r2, #4]
 8007b4e:	4421      	add	r1, r4
 8007b50:	6011      	str	r1, [r2, #0]
 8007b52:	e7d7      	b.n	8007b04 <_free_r+0x28>
 8007b54:	d902      	bls.n	8007b5c <_free_r+0x80>
 8007b56:	230c      	movs	r3, #12
 8007b58:	6003      	str	r3, [r0, #0]
 8007b5a:	e7d3      	b.n	8007b04 <_free_r+0x28>
 8007b5c:	6825      	ldr	r5, [r4, #0]
 8007b5e:	1961      	adds	r1, r4, r5
 8007b60:	428b      	cmp	r3, r1
 8007b62:	bf04      	itt	eq
 8007b64:	6819      	ldreq	r1, [r3, #0]
 8007b66:	685b      	ldreq	r3, [r3, #4]
 8007b68:	6063      	str	r3, [r4, #4]
 8007b6a:	bf04      	itt	eq
 8007b6c:	1949      	addeq	r1, r1, r5
 8007b6e:	6021      	streq	r1, [r4, #0]
 8007b70:	6054      	str	r4, [r2, #4]
 8007b72:	e7c7      	b.n	8007b04 <_free_r+0x28>
 8007b74:	b003      	add	sp, #12
 8007b76:	bd30      	pop	{r4, r5, pc}
 8007b78:	20001344 	.word	0x20001344

08007b7c <_malloc_r>:
 8007b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7e:	1ccd      	adds	r5, r1, #3
 8007b80:	f025 0503 	bic.w	r5, r5, #3
 8007b84:	3508      	adds	r5, #8
 8007b86:	2d0c      	cmp	r5, #12
 8007b88:	bf38      	it	cc
 8007b8a:	250c      	movcc	r5, #12
 8007b8c:	2d00      	cmp	r5, #0
 8007b8e:	4606      	mov	r6, r0
 8007b90:	db01      	blt.n	8007b96 <_malloc_r+0x1a>
 8007b92:	42a9      	cmp	r1, r5
 8007b94:	d903      	bls.n	8007b9e <_malloc_r+0x22>
 8007b96:	230c      	movs	r3, #12
 8007b98:	6033      	str	r3, [r6, #0]
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b9e:	f000 fa81 	bl	80080a4 <__malloc_lock>
 8007ba2:	4921      	ldr	r1, [pc, #132]	; (8007c28 <_malloc_r+0xac>)
 8007ba4:	680a      	ldr	r2, [r1, #0]
 8007ba6:	4614      	mov	r4, r2
 8007ba8:	b99c      	cbnz	r4, 8007bd2 <_malloc_r+0x56>
 8007baa:	4f20      	ldr	r7, [pc, #128]	; (8007c2c <_malloc_r+0xb0>)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	b923      	cbnz	r3, 8007bba <_malloc_r+0x3e>
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	f000 f8ca 	bl	8007d4c <_sbrk_r>
 8007bb8:	6038      	str	r0, [r7, #0]
 8007bba:	4629      	mov	r1, r5
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	f000 f8c5 	bl	8007d4c <_sbrk_r>
 8007bc2:	1c43      	adds	r3, r0, #1
 8007bc4:	d123      	bne.n	8007c0e <_malloc_r+0x92>
 8007bc6:	230c      	movs	r3, #12
 8007bc8:	6033      	str	r3, [r6, #0]
 8007bca:	4630      	mov	r0, r6
 8007bcc:	f000 fa70 	bl	80080b0 <__malloc_unlock>
 8007bd0:	e7e3      	b.n	8007b9a <_malloc_r+0x1e>
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	1b5b      	subs	r3, r3, r5
 8007bd6:	d417      	bmi.n	8007c08 <_malloc_r+0x8c>
 8007bd8:	2b0b      	cmp	r3, #11
 8007bda:	d903      	bls.n	8007be4 <_malloc_r+0x68>
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	441c      	add	r4, r3
 8007be0:	6025      	str	r5, [r4, #0]
 8007be2:	e004      	b.n	8007bee <_malloc_r+0x72>
 8007be4:	6863      	ldr	r3, [r4, #4]
 8007be6:	42a2      	cmp	r2, r4
 8007be8:	bf0c      	ite	eq
 8007bea:	600b      	streq	r3, [r1, #0]
 8007bec:	6053      	strne	r3, [r2, #4]
 8007bee:	4630      	mov	r0, r6
 8007bf0:	f000 fa5e 	bl	80080b0 <__malloc_unlock>
 8007bf4:	f104 000b 	add.w	r0, r4, #11
 8007bf8:	1d23      	adds	r3, r4, #4
 8007bfa:	f020 0007 	bic.w	r0, r0, #7
 8007bfe:	1ac2      	subs	r2, r0, r3
 8007c00:	d0cc      	beq.n	8007b9c <_malloc_r+0x20>
 8007c02:	1a1b      	subs	r3, r3, r0
 8007c04:	50a3      	str	r3, [r4, r2]
 8007c06:	e7c9      	b.n	8007b9c <_malloc_r+0x20>
 8007c08:	4622      	mov	r2, r4
 8007c0a:	6864      	ldr	r4, [r4, #4]
 8007c0c:	e7cc      	b.n	8007ba8 <_malloc_r+0x2c>
 8007c0e:	1cc4      	adds	r4, r0, #3
 8007c10:	f024 0403 	bic.w	r4, r4, #3
 8007c14:	42a0      	cmp	r0, r4
 8007c16:	d0e3      	beq.n	8007be0 <_malloc_r+0x64>
 8007c18:	1a21      	subs	r1, r4, r0
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f000 f896 	bl	8007d4c <_sbrk_r>
 8007c20:	3001      	adds	r0, #1
 8007c22:	d1dd      	bne.n	8007be0 <_malloc_r+0x64>
 8007c24:	e7cf      	b.n	8007bc6 <_malloc_r+0x4a>
 8007c26:	bf00      	nop
 8007c28:	20001344 	.word	0x20001344
 8007c2c:	20001348 	.word	0x20001348

08007c30 <iprintf>:
 8007c30:	b40f      	push	{r0, r1, r2, r3}
 8007c32:	4b0a      	ldr	r3, [pc, #40]	; (8007c5c <iprintf+0x2c>)
 8007c34:	b513      	push	{r0, r1, r4, lr}
 8007c36:	681c      	ldr	r4, [r3, #0]
 8007c38:	b124      	cbz	r4, 8007c44 <iprintf+0x14>
 8007c3a:	69a3      	ldr	r3, [r4, #24]
 8007c3c:	b913      	cbnz	r3, 8007c44 <iprintf+0x14>
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f7ff fe70 	bl	8007924 <__sinit>
 8007c44:	ab05      	add	r3, sp, #20
 8007c46:	9a04      	ldr	r2, [sp, #16]
 8007c48:	68a1      	ldr	r1, [r4, #8]
 8007c4a:	9301      	str	r3, [sp, #4]
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f000 fa5f 	bl	8008110 <_vfiprintf_r>
 8007c52:	b002      	add	sp, #8
 8007c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c58:	b004      	add	sp, #16
 8007c5a:	4770      	bx	lr
 8007c5c:	20000058 	.word	0x20000058

08007c60 <_puts_r>:
 8007c60:	b570      	push	{r4, r5, r6, lr}
 8007c62:	460e      	mov	r6, r1
 8007c64:	4605      	mov	r5, r0
 8007c66:	b118      	cbz	r0, 8007c70 <_puts_r+0x10>
 8007c68:	6983      	ldr	r3, [r0, #24]
 8007c6a:	b90b      	cbnz	r3, 8007c70 <_puts_r+0x10>
 8007c6c:	f7ff fe5a 	bl	8007924 <__sinit>
 8007c70:	69ab      	ldr	r3, [r5, #24]
 8007c72:	68ac      	ldr	r4, [r5, #8]
 8007c74:	b913      	cbnz	r3, 8007c7c <_puts_r+0x1c>
 8007c76:	4628      	mov	r0, r5
 8007c78:	f7ff fe54 	bl	8007924 <__sinit>
 8007c7c:	4b2c      	ldr	r3, [pc, #176]	; (8007d30 <_puts_r+0xd0>)
 8007c7e:	429c      	cmp	r4, r3
 8007c80:	d120      	bne.n	8007cc4 <_puts_r+0x64>
 8007c82:	686c      	ldr	r4, [r5, #4]
 8007c84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c86:	07db      	lsls	r3, r3, #31
 8007c88:	d405      	bmi.n	8007c96 <_puts_r+0x36>
 8007c8a:	89a3      	ldrh	r3, [r4, #12]
 8007c8c:	0598      	lsls	r0, r3, #22
 8007c8e:	d402      	bmi.n	8007c96 <_puts_r+0x36>
 8007c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c92:	f7ff ff0a 	bl	8007aaa <__retarget_lock_acquire_recursive>
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	0719      	lsls	r1, r3, #28
 8007c9a:	d51d      	bpl.n	8007cd8 <_puts_r+0x78>
 8007c9c:	6923      	ldr	r3, [r4, #16]
 8007c9e:	b1db      	cbz	r3, 8007cd8 <_puts_r+0x78>
 8007ca0:	3e01      	subs	r6, #1
 8007ca2:	68a3      	ldr	r3, [r4, #8]
 8007ca4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	60a3      	str	r3, [r4, #8]
 8007cac:	bb39      	cbnz	r1, 8007cfe <_puts_r+0x9e>
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	da38      	bge.n	8007d24 <_puts_r+0xc4>
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	210a      	movs	r1, #10
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	f000 f89c 	bl	8007df4 <__swbuf_r>
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d011      	beq.n	8007ce4 <_puts_r+0x84>
 8007cc0:	250a      	movs	r5, #10
 8007cc2:	e011      	b.n	8007ce8 <_puts_r+0x88>
 8007cc4:	4b1b      	ldr	r3, [pc, #108]	; (8007d34 <_puts_r+0xd4>)
 8007cc6:	429c      	cmp	r4, r3
 8007cc8:	d101      	bne.n	8007cce <_puts_r+0x6e>
 8007cca:	68ac      	ldr	r4, [r5, #8]
 8007ccc:	e7da      	b.n	8007c84 <_puts_r+0x24>
 8007cce:	4b1a      	ldr	r3, [pc, #104]	; (8007d38 <_puts_r+0xd8>)
 8007cd0:	429c      	cmp	r4, r3
 8007cd2:	bf08      	it	eq
 8007cd4:	68ec      	ldreq	r4, [r5, #12]
 8007cd6:	e7d5      	b.n	8007c84 <_puts_r+0x24>
 8007cd8:	4621      	mov	r1, r4
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f000 f8ee 	bl	8007ebc <__swsetup_r>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d0dd      	beq.n	8007ca0 <_puts_r+0x40>
 8007ce4:	f04f 35ff 	mov.w	r5, #4294967295
 8007ce8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cea:	07da      	lsls	r2, r3, #31
 8007cec:	d405      	bmi.n	8007cfa <_puts_r+0x9a>
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	059b      	lsls	r3, r3, #22
 8007cf2:	d402      	bmi.n	8007cfa <_puts_r+0x9a>
 8007cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cf6:	f7ff fed9 	bl	8007aac <__retarget_lock_release_recursive>
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	bd70      	pop	{r4, r5, r6, pc}
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	da04      	bge.n	8007d0c <_puts_r+0xac>
 8007d02:	69a2      	ldr	r2, [r4, #24]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	dc06      	bgt.n	8007d16 <_puts_r+0xb6>
 8007d08:	290a      	cmp	r1, #10
 8007d0a:	d004      	beq.n	8007d16 <_puts_r+0xb6>
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	1c5a      	adds	r2, r3, #1
 8007d10:	6022      	str	r2, [r4, #0]
 8007d12:	7019      	strb	r1, [r3, #0]
 8007d14:	e7c5      	b.n	8007ca2 <_puts_r+0x42>
 8007d16:	4622      	mov	r2, r4
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f000 f86b 	bl	8007df4 <__swbuf_r>
 8007d1e:	3001      	adds	r0, #1
 8007d20:	d1bf      	bne.n	8007ca2 <_puts_r+0x42>
 8007d22:	e7df      	b.n	8007ce4 <_puts_r+0x84>
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	250a      	movs	r5, #10
 8007d28:	1c5a      	adds	r2, r3, #1
 8007d2a:	6022      	str	r2, [r4, #0]
 8007d2c:	701d      	strb	r5, [r3, #0]
 8007d2e:	e7db      	b.n	8007ce8 <_puts_r+0x88>
 8007d30:	08008fac 	.word	0x08008fac
 8007d34:	08008fcc 	.word	0x08008fcc
 8007d38:	08008f8c 	.word	0x08008f8c

08007d3c <puts>:
 8007d3c:	4b02      	ldr	r3, [pc, #8]	; (8007d48 <puts+0xc>)
 8007d3e:	4601      	mov	r1, r0
 8007d40:	6818      	ldr	r0, [r3, #0]
 8007d42:	f7ff bf8d 	b.w	8007c60 <_puts_r>
 8007d46:	bf00      	nop
 8007d48:	20000058 	.word	0x20000058

08007d4c <_sbrk_r>:
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	4d06      	ldr	r5, [pc, #24]	; (8007d68 <_sbrk_r+0x1c>)
 8007d50:	2300      	movs	r3, #0
 8007d52:	4604      	mov	r4, r0
 8007d54:	4608      	mov	r0, r1
 8007d56:	602b      	str	r3, [r5, #0]
 8007d58:	f000 fcf2 	bl	8008740 <_sbrk>
 8007d5c:	1c43      	adds	r3, r0, #1
 8007d5e:	d102      	bne.n	8007d66 <_sbrk_r+0x1a>
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	b103      	cbz	r3, 8007d66 <_sbrk_r+0x1a>
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	bd38      	pop	{r3, r4, r5, pc}
 8007d68:	20048628 	.word	0x20048628

08007d6c <__sread>:
 8007d6c:	b510      	push	{r4, lr}
 8007d6e:	460c      	mov	r4, r1
 8007d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d74:	f000 fc90 	bl	8008698 <_read_r>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	bfab      	itete	ge
 8007d7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d7e:	89a3      	ldrhlt	r3, [r4, #12]
 8007d80:	181b      	addge	r3, r3, r0
 8007d82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d86:	bfac      	ite	ge
 8007d88:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d8a:	81a3      	strhlt	r3, [r4, #12]
 8007d8c:	bd10      	pop	{r4, pc}

08007d8e <__swrite>:
 8007d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d92:	461f      	mov	r7, r3
 8007d94:	898b      	ldrh	r3, [r1, #12]
 8007d96:	05db      	lsls	r3, r3, #23
 8007d98:	4605      	mov	r5, r0
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	4616      	mov	r6, r2
 8007d9e:	d505      	bpl.n	8007dac <__swrite+0x1e>
 8007da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da4:	2302      	movs	r3, #2
 8007da6:	2200      	movs	r2, #0
 8007da8:	f000 f906 	bl	8007fb8 <_lseek_r>
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007db2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007db6:	81a3      	strh	r3, [r4, #12]
 8007db8:	4632      	mov	r2, r6
 8007dba:	463b      	mov	r3, r7
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc2:	f000 b869 	b.w	8007e98 <_write_r>

08007dc6 <__sseek>:
 8007dc6:	b510      	push	{r4, lr}
 8007dc8:	460c      	mov	r4, r1
 8007dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dce:	f000 f8f3 	bl	8007fb8 <_lseek_r>
 8007dd2:	1c43      	adds	r3, r0, #1
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	bf15      	itete	ne
 8007dd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007dda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007dde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007de2:	81a3      	strheq	r3, [r4, #12]
 8007de4:	bf18      	it	ne
 8007de6:	81a3      	strhne	r3, [r4, #12]
 8007de8:	bd10      	pop	{r4, pc}

08007dea <__sclose>:
 8007dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dee:	f000 b8d3 	b.w	8007f98 <_close_r>
	...

08007df4 <__swbuf_r>:
 8007df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df6:	460e      	mov	r6, r1
 8007df8:	4614      	mov	r4, r2
 8007dfa:	4605      	mov	r5, r0
 8007dfc:	b118      	cbz	r0, 8007e06 <__swbuf_r+0x12>
 8007dfe:	6983      	ldr	r3, [r0, #24]
 8007e00:	b90b      	cbnz	r3, 8007e06 <__swbuf_r+0x12>
 8007e02:	f7ff fd8f 	bl	8007924 <__sinit>
 8007e06:	4b21      	ldr	r3, [pc, #132]	; (8007e8c <__swbuf_r+0x98>)
 8007e08:	429c      	cmp	r4, r3
 8007e0a:	d12b      	bne.n	8007e64 <__swbuf_r+0x70>
 8007e0c:	686c      	ldr	r4, [r5, #4]
 8007e0e:	69a3      	ldr	r3, [r4, #24]
 8007e10:	60a3      	str	r3, [r4, #8]
 8007e12:	89a3      	ldrh	r3, [r4, #12]
 8007e14:	071a      	lsls	r2, r3, #28
 8007e16:	d52f      	bpl.n	8007e78 <__swbuf_r+0x84>
 8007e18:	6923      	ldr	r3, [r4, #16]
 8007e1a:	b36b      	cbz	r3, 8007e78 <__swbuf_r+0x84>
 8007e1c:	6923      	ldr	r3, [r4, #16]
 8007e1e:	6820      	ldr	r0, [r4, #0]
 8007e20:	1ac0      	subs	r0, r0, r3
 8007e22:	6963      	ldr	r3, [r4, #20]
 8007e24:	b2f6      	uxtb	r6, r6
 8007e26:	4283      	cmp	r3, r0
 8007e28:	4637      	mov	r7, r6
 8007e2a:	dc04      	bgt.n	8007e36 <__swbuf_r+0x42>
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f7ff fcd2 	bl	80077d8 <_fflush_r>
 8007e34:	bb30      	cbnz	r0, 8007e84 <__swbuf_r+0x90>
 8007e36:	68a3      	ldr	r3, [r4, #8]
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	60a3      	str	r3, [r4, #8]
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	1c5a      	adds	r2, r3, #1
 8007e40:	6022      	str	r2, [r4, #0]
 8007e42:	701e      	strb	r6, [r3, #0]
 8007e44:	6963      	ldr	r3, [r4, #20]
 8007e46:	3001      	adds	r0, #1
 8007e48:	4283      	cmp	r3, r0
 8007e4a:	d004      	beq.n	8007e56 <__swbuf_r+0x62>
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	07db      	lsls	r3, r3, #31
 8007e50:	d506      	bpl.n	8007e60 <__swbuf_r+0x6c>
 8007e52:	2e0a      	cmp	r6, #10
 8007e54:	d104      	bne.n	8007e60 <__swbuf_r+0x6c>
 8007e56:	4621      	mov	r1, r4
 8007e58:	4628      	mov	r0, r5
 8007e5a:	f7ff fcbd 	bl	80077d8 <_fflush_r>
 8007e5e:	b988      	cbnz	r0, 8007e84 <__swbuf_r+0x90>
 8007e60:	4638      	mov	r0, r7
 8007e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e64:	4b0a      	ldr	r3, [pc, #40]	; (8007e90 <__swbuf_r+0x9c>)
 8007e66:	429c      	cmp	r4, r3
 8007e68:	d101      	bne.n	8007e6e <__swbuf_r+0x7a>
 8007e6a:	68ac      	ldr	r4, [r5, #8]
 8007e6c:	e7cf      	b.n	8007e0e <__swbuf_r+0x1a>
 8007e6e:	4b09      	ldr	r3, [pc, #36]	; (8007e94 <__swbuf_r+0xa0>)
 8007e70:	429c      	cmp	r4, r3
 8007e72:	bf08      	it	eq
 8007e74:	68ec      	ldreq	r4, [r5, #12]
 8007e76:	e7ca      	b.n	8007e0e <__swbuf_r+0x1a>
 8007e78:	4621      	mov	r1, r4
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	f000 f81e 	bl	8007ebc <__swsetup_r>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d0cb      	beq.n	8007e1c <__swbuf_r+0x28>
 8007e84:	f04f 37ff 	mov.w	r7, #4294967295
 8007e88:	e7ea      	b.n	8007e60 <__swbuf_r+0x6c>
 8007e8a:	bf00      	nop
 8007e8c:	08008fac 	.word	0x08008fac
 8007e90:	08008fcc 	.word	0x08008fcc
 8007e94:	08008f8c 	.word	0x08008f8c

08007e98 <_write_r>:
 8007e98:	b538      	push	{r3, r4, r5, lr}
 8007e9a:	4d07      	ldr	r5, [pc, #28]	; (8007eb8 <_write_r+0x20>)
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	4608      	mov	r0, r1
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	602a      	str	r2, [r5, #0]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	f7ff fab8 	bl	800741c <_write>
 8007eac:	1c43      	adds	r3, r0, #1
 8007eae:	d102      	bne.n	8007eb6 <_write_r+0x1e>
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	b103      	cbz	r3, 8007eb6 <_write_r+0x1e>
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	bd38      	pop	{r3, r4, r5, pc}
 8007eb8:	20048628 	.word	0x20048628

08007ebc <__swsetup_r>:
 8007ebc:	4b32      	ldr	r3, [pc, #200]	; (8007f88 <__swsetup_r+0xcc>)
 8007ebe:	b570      	push	{r4, r5, r6, lr}
 8007ec0:	681d      	ldr	r5, [r3, #0]
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	b125      	cbz	r5, 8007ed2 <__swsetup_r+0x16>
 8007ec8:	69ab      	ldr	r3, [r5, #24]
 8007eca:	b913      	cbnz	r3, 8007ed2 <__swsetup_r+0x16>
 8007ecc:	4628      	mov	r0, r5
 8007ece:	f7ff fd29 	bl	8007924 <__sinit>
 8007ed2:	4b2e      	ldr	r3, [pc, #184]	; (8007f8c <__swsetup_r+0xd0>)
 8007ed4:	429c      	cmp	r4, r3
 8007ed6:	d10f      	bne.n	8007ef8 <__swsetup_r+0x3c>
 8007ed8:	686c      	ldr	r4, [r5, #4]
 8007eda:	89a3      	ldrh	r3, [r4, #12]
 8007edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ee0:	0719      	lsls	r1, r3, #28
 8007ee2:	d42c      	bmi.n	8007f3e <__swsetup_r+0x82>
 8007ee4:	06dd      	lsls	r5, r3, #27
 8007ee6:	d411      	bmi.n	8007f0c <__swsetup_r+0x50>
 8007ee8:	2309      	movs	r3, #9
 8007eea:	6033      	str	r3, [r6, #0]
 8007eec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ef0:	81a3      	strh	r3, [r4, #12]
 8007ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef6:	e03e      	b.n	8007f76 <__swsetup_r+0xba>
 8007ef8:	4b25      	ldr	r3, [pc, #148]	; (8007f90 <__swsetup_r+0xd4>)
 8007efa:	429c      	cmp	r4, r3
 8007efc:	d101      	bne.n	8007f02 <__swsetup_r+0x46>
 8007efe:	68ac      	ldr	r4, [r5, #8]
 8007f00:	e7eb      	b.n	8007eda <__swsetup_r+0x1e>
 8007f02:	4b24      	ldr	r3, [pc, #144]	; (8007f94 <__swsetup_r+0xd8>)
 8007f04:	429c      	cmp	r4, r3
 8007f06:	bf08      	it	eq
 8007f08:	68ec      	ldreq	r4, [r5, #12]
 8007f0a:	e7e6      	b.n	8007eda <__swsetup_r+0x1e>
 8007f0c:	0758      	lsls	r0, r3, #29
 8007f0e:	d512      	bpl.n	8007f36 <__swsetup_r+0x7a>
 8007f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f12:	b141      	cbz	r1, 8007f26 <__swsetup_r+0x6a>
 8007f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f18:	4299      	cmp	r1, r3
 8007f1a:	d002      	beq.n	8007f22 <__swsetup_r+0x66>
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	f7ff fddd 	bl	8007adc <_free_r>
 8007f22:	2300      	movs	r3, #0
 8007f24:	6363      	str	r3, [r4, #52]	; 0x34
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f2c:	81a3      	strh	r3, [r4, #12]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	6063      	str	r3, [r4, #4]
 8007f32:	6923      	ldr	r3, [r4, #16]
 8007f34:	6023      	str	r3, [r4, #0]
 8007f36:	89a3      	ldrh	r3, [r4, #12]
 8007f38:	f043 0308 	orr.w	r3, r3, #8
 8007f3c:	81a3      	strh	r3, [r4, #12]
 8007f3e:	6923      	ldr	r3, [r4, #16]
 8007f40:	b94b      	cbnz	r3, 8007f56 <__swsetup_r+0x9a>
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f4c:	d003      	beq.n	8007f56 <__swsetup_r+0x9a>
 8007f4e:	4621      	mov	r1, r4
 8007f50:	4630      	mov	r0, r6
 8007f52:	f000 f867 	bl	8008024 <__smakebuf_r>
 8007f56:	89a0      	ldrh	r0, [r4, #12]
 8007f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f5c:	f010 0301 	ands.w	r3, r0, #1
 8007f60:	d00a      	beq.n	8007f78 <__swsetup_r+0xbc>
 8007f62:	2300      	movs	r3, #0
 8007f64:	60a3      	str	r3, [r4, #8]
 8007f66:	6963      	ldr	r3, [r4, #20]
 8007f68:	425b      	negs	r3, r3
 8007f6a:	61a3      	str	r3, [r4, #24]
 8007f6c:	6923      	ldr	r3, [r4, #16]
 8007f6e:	b943      	cbnz	r3, 8007f82 <__swsetup_r+0xc6>
 8007f70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f74:	d1ba      	bne.n	8007eec <__swsetup_r+0x30>
 8007f76:	bd70      	pop	{r4, r5, r6, pc}
 8007f78:	0781      	lsls	r1, r0, #30
 8007f7a:	bf58      	it	pl
 8007f7c:	6963      	ldrpl	r3, [r4, #20]
 8007f7e:	60a3      	str	r3, [r4, #8]
 8007f80:	e7f4      	b.n	8007f6c <__swsetup_r+0xb0>
 8007f82:	2000      	movs	r0, #0
 8007f84:	e7f7      	b.n	8007f76 <__swsetup_r+0xba>
 8007f86:	bf00      	nop
 8007f88:	20000058 	.word	0x20000058
 8007f8c:	08008fac 	.word	0x08008fac
 8007f90:	08008fcc 	.word	0x08008fcc
 8007f94:	08008f8c 	.word	0x08008f8c

08007f98 <_close_r>:
 8007f98:	b538      	push	{r3, r4, r5, lr}
 8007f9a:	4d06      	ldr	r5, [pc, #24]	; (8007fb4 <_close_r+0x1c>)
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	4608      	mov	r0, r1
 8007fa2:	602b      	str	r3, [r5, #0]
 8007fa4:	f000 fbac 	bl	8008700 <_close>
 8007fa8:	1c43      	adds	r3, r0, #1
 8007faa:	d102      	bne.n	8007fb2 <_close_r+0x1a>
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	b103      	cbz	r3, 8007fb2 <_close_r+0x1a>
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	bd38      	pop	{r3, r4, r5, pc}
 8007fb4:	20048628 	.word	0x20048628

08007fb8 <_lseek_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	4d07      	ldr	r5, [pc, #28]	; (8007fd8 <_lseek_r+0x20>)
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	4608      	mov	r0, r1
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	602a      	str	r2, [r5, #0]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f000 fbb2 	bl	8008730 <_lseek>
 8007fcc:	1c43      	adds	r3, r0, #1
 8007fce:	d102      	bne.n	8007fd6 <_lseek_r+0x1e>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	b103      	cbz	r3, 8007fd6 <_lseek_r+0x1e>
 8007fd4:	6023      	str	r3, [r4, #0]
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}
 8007fd8:	20048628 	.word	0x20048628

08007fdc <__swhatbuf_r>:
 8007fdc:	b570      	push	{r4, r5, r6, lr}
 8007fde:	460e      	mov	r6, r1
 8007fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe4:	2900      	cmp	r1, #0
 8007fe6:	b096      	sub	sp, #88	; 0x58
 8007fe8:	4614      	mov	r4, r2
 8007fea:	461d      	mov	r5, r3
 8007fec:	da07      	bge.n	8007ffe <__swhatbuf_r+0x22>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	602b      	str	r3, [r5, #0]
 8007ff2:	89b3      	ldrh	r3, [r6, #12]
 8007ff4:	061a      	lsls	r2, r3, #24
 8007ff6:	d410      	bmi.n	800801a <__swhatbuf_r+0x3e>
 8007ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ffc:	e00e      	b.n	800801c <__swhatbuf_r+0x40>
 8007ffe:	466a      	mov	r2, sp
 8008000:	f000 fb5c 	bl	80086bc <_fstat_r>
 8008004:	2800      	cmp	r0, #0
 8008006:	dbf2      	blt.n	8007fee <__swhatbuf_r+0x12>
 8008008:	9a01      	ldr	r2, [sp, #4]
 800800a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800800e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008012:	425a      	negs	r2, r3
 8008014:	415a      	adcs	r2, r3
 8008016:	602a      	str	r2, [r5, #0]
 8008018:	e7ee      	b.n	8007ff8 <__swhatbuf_r+0x1c>
 800801a:	2340      	movs	r3, #64	; 0x40
 800801c:	2000      	movs	r0, #0
 800801e:	6023      	str	r3, [r4, #0]
 8008020:	b016      	add	sp, #88	; 0x58
 8008022:	bd70      	pop	{r4, r5, r6, pc}

08008024 <__smakebuf_r>:
 8008024:	898b      	ldrh	r3, [r1, #12]
 8008026:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008028:	079d      	lsls	r5, r3, #30
 800802a:	4606      	mov	r6, r0
 800802c:	460c      	mov	r4, r1
 800802e:	d507      	bpl.n	8008040 <__smakebuf_r+0x1c>
 8008030:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	6123      	str	r3, [r4, #16]
 8008038:	2301      	movs	r3, #1
 800803a:	6163      	str	r3, [r4, #20]
 800803c:	b002      	add	sp, #8
 800803e:	bd70      	pop	{r4, r5, r6, pc}
 8008040:	ab01      	add	r3, sp, #4
 8008042:	466a      	mov	r2, sp
 8008044:	f7ff ffca 	bl	8007fdc <__swhatbuf_r>
 8008048:	9900      	ldr	r1, [sp, #0]
 800804a:	4605      	mov	r5, r0
 800804c:	4630      	mov	r0, r6
 800804e:	f7ff fd95 	bl	8007b7c <_malloc_r>
 8008052:	b948      	cbnz	r0, 8008068 <__smakebuf_r+0x44>
 8008054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008058:	059a      	lsls	r2, r3, #22
 800805a:	d4ef      	bmi.n	800803c <__smakebuf_r+0x18>
 800805c:	f023 0303 	bic.w	r3, r3, #3
 8008060:	f043 0302 	orr.w	r3, r3, #2
 8008064:	81a3      	strh	r3, [r4, #12]
 8008066:	e7e3      	b.n	8008030 <__smakebuf_r+0xc>
 8008068:	4b0d      	ldr	r3, [pc, #52]	; (80080a0 <__smakebuf_r+0x7c>)
 800806a:	62b3      	str	r3, [r6, #40]	; 0x28
 800806c:	89a3      	ldrh	r3, [r4, #12]
 800806e:	6020      	str	r0, [r4, #0]
 8008070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008074:	81a3      	strh	r3, [r4, #12]
 8008076:	9b00      	ldr	r3, [sp, #0]
 8008078:	6163      	str	r3, [r4, #20]
 800807a:	9b01      	ldr	r3, [sp, #4]
 800807c:	6120      	str	r0, [r4, #16]
 800807e:	b15b      	cbz	r3, 8008098 <__smakebuf_r+0x74>
 8008080:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008084:	4630      	mov	r0, r6
 8008086:	f000 fb2b 	bl	80086e0 <_isatty_r>
 800808a:	b128      	cbz	r0, 8008098 <__smakebuf_r+0x74>
 800808c:	89a3      	ldrh	r3, [r4, #12]
 800808e:	f023 0303 	bic.w	r3, r3, #3
 8008092:	f043 0301 	orr.w	r3, r3, #1
 8008096:	81a3      	strh	r3, [r4, #12]
 8008098:	89a0      	ldrh	r0, [r4, #12]
 800809a:	4305      	orrs	r5, r0
 800809c:	81a5      	strh	r5, [r4, #12]
 800809e:	e7cd      	b.n	800803c <__smakebuf_r+0x18>
 80080a0:	080078bd 	.word	0x080078bd

080080a4 <__malloc_lock>:
 80080a4:	4801      	ldr	r0, [pc, #4]	; (80080ac <__malloc_lock+0x8>)
 80080a6:	f7ff bd00 	b.w	8007aaa <__retarget_lock_acquire_recursive>
 80080aa:	bf00      	nop
 80080ac:	20048620 	.word	0x20048620

080080b0 <__malloc_unlock>:
 80080b0:	4801      	ldr	r0, [pc, #4]	; (80080b8 <__malloc_unlock+0x8>)
 80080b2:	f7ff bcfb 	b.w	8007aac <__retarget_lock_release_recursive>
 80080b6:	bf00      	nop
 80080b8:	20048620 	.word	0x20048620

080080bc <__sfputc_r>:
 80080bc:	6893      	ldr	r3, [r2, #8]
 80080be:	3b01      	subs	r3, #1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	b410      	push	{r4}
 80080c4:	6093      	str	r3, [r2, #8]
 80080c6:	da08      	bge.n	80080da <__sfputc_r+0x1e>
 80080c8:	6994      	ldr	r4, [r2, #24]
 80080ca:	42a3      	cmp	r3, r4
 80080cc:	db01      	blt.n	80080d2 <__sfputc_r+0x16>
 80080ce:	290a      	cmp	r1, #10
 80080d0:	d103      	bne.n	80080da <__sfputc_r+0x1e>
 80080d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080d6:	f7ff be8d 	b.w	8007df4 <__swbuf_r>
 80080da:	6813      	ldr	r3, [r2, #0]
 80080dc:	1c58      	adds	r0, r3, #1
 80080de:	6010      	str	r0, [r2, #0]
 80080e0:	7019      	strb	r1, [r3, #0]
 80080e2:	4608      	mov	r0, r1
 80080e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <__sfputs_r>:
 80080ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ec:	4606      	mov	r6, r0
 80080ee:	460f      	mov	r7, r1
 80080f0:	4614      	mov	r4, r2
 80080f2:	18d5      	adds	r5, r2, r3
 80080f4:	42ac      	cmp	r4, r5
 80080f6:	d101      	bne.n	80080fc <__sfputs_r+0x12>
 80080f8:	2000      	movs	r0, #0
 80080fa:	e007      	b.n	800810c <__sfputs_r+0x22>
 80080fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008100:	463a      	mov	r2, r7
 8008102:	4630      	mov	r0, r6
 8008104:	f7ff ffda 	bl	80080bc <__sfputc_r>
 8008108:	1c43      	adds	r3, r0, #1
 800810a:	d1f3      	bne.n	80080f4 <__sfputs_r+0xa>
 800810c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008110 <_vfiprintf_r>:
 8008110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008114:	460d      	mov	r5, r1
 8008116:	b09d      	sub	sp, #116	; 0x74
 8008118:	4614      	mov	r4, r2
 800811a:	4698      	mov	r8, r3
 800811c:	4606      	mov	r6, r0
 800811e:	b118      	cbz	r0, 8008128 <_vfiprintf_r+0x18>
 8008120:	6983      	ldr	r3, [r0, #24]
 8008122:	b90b      	cbnz	r3, 8008128 <_vfiprintf_r+0x18>
 8008124:	f7ff fbfe 	bl	8007924 <__sinit>
 8008128:	4b89      	ldr	r3, [pc, #548]	; (8008350 <_vfiprintf_r+0x240>)
 800812a:	429d      	cmp	r5, r3
 800812c:	d11b      	bne.n	8008166 <_vfiprintf_r+0x56>
 800812e:	6875      	ldr	r5, [r6, #4]
 8008130:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008132:	07d9      	lsls	r1, r3, #31
 8008134:	d405      	bmi.n	8008142 <_vfiprintf_r+0x32>
 8008136:	89ab      	ldrh	r3, [r5, #12]
 8008138:	059a      	lsls	r2, r3, #22
 800813a:	d402      	bmi.n	8008142 <_vfiprintf_r+0x32>
 800813c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800813e:	f7ff fcb4 	bl	8007aaa <__retarget_lock_acquire_recursive>
 8008142:	89ab      	ldrh	r3, [r5, #12]
 8008144:	071b      	lsls	r3, r3, #28
 8008146:	d501      	bpl.n	800814c <_vfiprintf_r+0x3c>
 8008148:	692b      	ldr	r3, [r5, #16]
 800814a:	b9eb      	cbnz	r3, 8008188 <_vfiprintf_r+0x78>
 800814c:	4629      	mov	r1, r5
 800814e:	4630      	mov	r0, r6
 8008150:	f7ff feb4 	bl	8007ebc <__swsetup_r>
 8008154:	b1c0      	cbz	r0, 8008188 <_vfiprintf_r+0x78>
 8008156:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008158:	07dc      	lsls	r4, r3, #31
 800815a:	d50e      	bpl.n	800817a <_vfiprintf_r+0x6a>
 800815c:	f04f 30ff 	mov.w	r0, #4294967295
 8008160:	b01d      	add	sp, #116	; 0x74
 8008162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008166:	4b7b      	ldr	r3, [pc, #492]	; (8008354 <_vfiprintf_r+0x244>)
 8008168:	429d      	cmp	r5, r3
 800816a:	d101      	bne.n	8008170 <_vfiprintf_r+0x60>
 800816c:	68b5      	ldr	r5, [r6, #8]
 800816e:	e7df      	b.n	8008130 <_vfiprintf_r+0x20>
 8008170:	4b79      	ldr	r3, [pc, #484]	; (8008358 <_vfiprintf_r+0x248>)
 8008172:	429d      	cmp	r5, r3
 8008174:	bf08      	it	eq
 8008176:	68f5      	ldreq	r5, [r6, #12]
 8008178:	e7da      	b.n	8008130 <_vfiprintf_r+0x20>
 800817a:	89ab      	ldrh	r3, [r5, #12]
 800817c:	0598      	lsls	r0, r3, #22
 800817e:	d4ed      	bmi.n	800815c <_vfiprintf_r+0x4c>
 8008180:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008182:	f7ff fc93 	bl	8007aac <__retarget_lock_release_recursive>
 8008186:	e7e9      	b.n	800815c <_vfiprintf_r+0x4c>
 8008188:	2300      	movs	r3, #0
 800818a:	9309      	str	r3, [sp, #36]	; 0x24
 800818c:	2320      	movs	r3, #32
 800818e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008192:	f8cd 800c 	str.w	r8, [sp, #12]
 8008196:	2330      	movs	r3, #48	; 0x30
 8008198:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800835c <_vfiprintf_r+0x24c>
 800819c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081a0:	f04f 0901 	mov.w	r9, #1
 80081a4:	4623      	mov	r3, r4
 80081a6:	469a      	mov	sl, r3
 80081a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081ac:	b10a      	cbz	r2, 80081b2 <_vfiprintf_r+0xa2>
 80081ae:	2a25      	cmp	r2, #37	; 0x25
 80081b0:	d1f9      	bne.n	80081a6 <_vfiprintf_r+0x96>
 80081b2:	ebba 0b04 	subs.w	fp, sl, r4
 80081b6:	d00b      	beq.n	80081d0 <_vfiprintf_r+0xc0>
 80081b8:	465b      	mov	r3, fp
 80081ba:	4622      	mov	r2, r4
 80081bc:	4629      	mov	r1, r5
 80081be:	4630      	mov	r0, r6
 80081c0:	f7ff ff93 	bl	80080ea <__sfputs_r>
 80081c4:	3001      	adds	r0, #1
 80081c6:	f000 80aa 	beq.w	800831e <_vfiprintf_r+0x20e>
 80081ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081cc:	445a      	add	r2, fp
 80081ce:	9209      	str	r2, [sp, #36]	; 0x24
 80081d0:	f89a 3000 	ldrb.w	r3, [sl]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 80a2 	beq.w	800831e <_vfiprintf_r+0x20e>
 80081da:	2300      	movs	r3, #0
 80081dc:	f04f 32ff 	mov.w	r2, #4294967295
 80081e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081e4:	f10a 0a01 	add.w	sl, sl, #1
 80081e8:	9304      	str	r3, [sp, #16]
 80081ea:	9307      	str	r3, [sp, #28]
 80081ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081f0:	931a      	str	r3, [sp, #104]	; 0x68
 80081f2:	4654      	mov	r4, sl
 80081f4:	2205      	movs	r2, #5
 80081f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081fa:	4858      	ldr	r0, [pc, #352]	; (800835c <_vfiprintf_r+0x24c>)
 80081fc:	f7f8 f820 	bl	8000240 <memchr>
 8008200:	9a04      	ldr	r2, [sp, #16]
 8008202:	b9d8      	cbnz	r0, 800823c <_vfiprintf_r+0x12c>
 8008204:	06d1      	lsls	r1, r2, #27
 8008206:	bf44      	itt	mi
 8008208:	2320      	movmi	r3, #32
 800820a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800820e:	0713      	lsls	r3, r2, #28
 8008210:	bf44      	itt	mi
 8008212:	232b      	movmi	r3, #43	; 0x2b
 8008214:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008218:	f89a 3000 	ldrb.w	r3, [sl]
 800821c:	2b2a      	cmp	r3, #42	; 0x2a
 800821e:	d015      	beq.n	800824c <_vfiprintf_r+0x13c>
 8008220:	9a07      	ldr	r2, [sp, #28]
 8008222:	4654      	mov	r4, sl
 8008224:	2000      	movs	r0, #0
 8008226:	f04f 0c0a 	mov.w	ip, #10
 800822a:	4621      	mov	r1, r4
 800822c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008230:	3b30      	subs	r3, #48	; 0x30
 8008232:	2b09      	cmp	r3, #9
 8008234:	d94e      	bls.n	80082d4 <_vfiprintf_r+0x1c4>
 8008236:	b1b0      	cbz	r0, 8008266 <_vfiprintf_r+0x156>
 8008238:	9207      	str	r2, [sp, #28]
 800823a:	e014      	b.n	8008266 <_vfiprintf_r+0x156>
 800823c:	eba0 0308 	sub.w	r3, r0, r8
 8008240:	fa09 f303 	lsl.w	r3, r9, r3
 8008244:	4313      	orrs	r3, r2
 8008246:	9304      	str	r3, [sp, #16]
 8008248:	46a2      	mov	sl, r4
 800824a:	e7d2      	b.n	80081f2 <_vfiprintf_r+0xe2>
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	1d19      	adds	r1, r3, #4
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	9103      	str	r1, [sp, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	bfbb      	ittet	lt
 8008258:	425b      	neglt	r3, r3
 800825a:	f042 0202 	orrlt.w	r2, r2, #2
 800825e:	9307      	strge	r3, [sp, #28]
 8008260:	9307      	strlt	r3, [sp, #28]
 8008262:	bfb8      	it	lt
 8008264:	9204      	strlt	r2, [sp, #16]
 8008266:	7823      	ldrb	r3, [r4, #0]
 8008268:	2b2e      	cmp	r3, #46	; 0x2e
 800826a:	d10c      	bne.n	8008286 <_vfiprintf_r+0x176>
 800826c:	7863      	ldrb	r3, [r4, #1]
 800826e:	2b2a      	cmp	r3, #42	; 0x2a
 8008270:	d135      	bne.n	80082de <_vfiprintf_r+0x1ce>
 8008272:	9b03      	ldr	r3, [sp, #12]
 8008274:	1d1a      	adds	r2, r3, #4
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	9203      	str	r2, [sp, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	bfb8      	it	lt
 800827e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008282:	3402      	adds	r4, #2
 8008284:	9305      	str	r3, [sp, #20]
 8008286:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800836c <_vfiprintf_r+0x25c>
 800828a:	7821      	ldrb	r1, [r4, #0]
 800828c:	2203      	movs	r2, #3
 800828e:	4650      	mov	r0, sl
 8008290:	f7f7 ffd6 	bl	8000240 <memchr>
 8008294:	b140      	cbz	r0, 80082a8 <_vfiprintf_r+0x198>
 8008296:	2340      	movs	r3, #64	; 0x40
 8008298:	eba0 000a 	sub.w	r0, r0, sl
 800829c:	fa03 f000 	lsl.w	r0, r3, r0
 80082a0:	9b04      	ldr	r3, [sp, #16]
 80082a2:	4303      	orrs	r3, r0
 80082a4:	3401      	adds	r4, #1
 80082a6:	9304      	str	r3, [sp, #16]
 80082a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ac:	482c      	ldr	r0, [pc, #176]	; (8008360 <_vfiprintf_r+0x250>)
 80082ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082b2:	2206      	movs	r2, #6
 80082b4:	f7f7 ffc4 	bl	8000240 <memchr>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	d03f      	beq.n	800833c <_vfiprintf_r+0x22c>
 80082bc:	4b29      	ldr	r3, [pc, #164]	; (8008364 <_vfiprintf_r+0x254>)
 80082be:	bb1b      	cbnz	r3, 8008308 <_vfiprintf_r+0x1f8>
 80082c0:	9b03      	ldr	r3, [sp, #12]
 80082c2:	3307      	adds	r3, #7
 80082c4:	f023 0307 	bic.w	r3, r3, #7
 80082c8:	3308      	adds	r3, #8
 80082ca:	9303      	str	r3, [sp, #12]
 80082cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ce:	443b      	add	r3, r7
 80082d0:	9309      	str	r3, [sp, #36]	; 0x24
 80082d2:	e767      	b.n	80081a4 <_vfiprintf_r+0x94>
 80082d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80082d8:	460c      	mov	r4, r1
 80082da:	2001      	movs	r0, #1
 80082dc:	e7a5      	b.n	800822a <_vfiprintf_r+0x11a>
 80082de:	2300      	movs	r3, #0
 80082e0:	3401      	adds	r4, #1
 80082e2:	9305      	str	r3, [sp, #20]
 80082e4:	4619      	mov	r1, r3
 80082e6:	f04f 0c0a 	mov.w	ip, #10
 80082ea:	4620      	mov	r0, r4
 80082ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082f0:	3a30      	subs	r2, #48	; 0x30
 80082f2:	2a09      	cmp	r2, #9
 80082f4:	d903      	bls.n	80082fe <_vfiprintf_r+0x1ee>
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d0c5      	beq.n	8008286 <_vfiprintf_r+0x176>
 80082fa:	9105      	str	r1, [sp, #20]
 80082fc:	e7c3      	b.n	8008286 <_vfiprintf_r+0x176>
 80082fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008302:	4604      	mov	r4, r0
 8008304:	2301      	movs	r3, #1
 8008306:	e7f0      	b.n	80082ea <_vfiprintf_r+0x1da>
 8008308:	ab03      	add	r3, sp, #12
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	462a      	mov	r2, r5
 800830e:	4b16      	ldr	r3, [pc, #88]	; (8008368 <_vfiprintf_r+0x258>)
 8008310:	a904      	add	r1, sp, #16
 8008312:	4630      	mov	r0, r6
 8008314:	f3af 8000 	nop.w
 8008318:	4607      	mov	r7, r0
 800831a:	1c78      	adds	r0, r7, #1
 800831c:	d1d6      	bne.n	80082cc <_vfiprintf_r+0x1bc>
 800831e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008320:	07d9      	lsls	r1, r3, #31
 8008322:	d405      	bmi.n	8008330 <_vfiprintf_r+0x220>
 8008324:	89ab      	ldrh	r3, [r5, #12]
 8008326:	059a      	lsls	r2, r3, #22
 8008328:	d402      	bmi.n	8008330 <_vfiprintf_r+0x220>
 800832a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800832c:	f7ff fbbe 	bl	8007aac <__retarget_lock_release_recursive>
 8008330:	89ab      	ldrh	r3, [r5, #12]
 8008332:	065b      	lsls	r3, r3, #25
 8008334:	f53f af12 	bmi.w	800815c <_vfiprintf_r+0x4c>
 8008338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800833a:	e711      	b.n	8008160 <_vfiprintf_r+0x50>
 800833c:	ab03      	add	r3, sp, #12
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	462a      	mov	r2, r5
 8008342:	4b09      	ldr	r3, [pc, #36]	; (8008368 <_vfiprintf_r+0x258>)
 8008344:	a904      	add	r1, sp, #16
 8008346:	4630      	mov	r0, r6
 8008348:	f000 f880 	bl	800844c <_printf_i>
 800834c:	e7e4      	b.n	8008318 <_vfiprintf_r+0x208>
 800834e:	bf00      	nop
 8008350:	08008fac 	.word	0x08008fac
 8008354:	08008fcc 	.word	0x08008fcc
 8008358:	08008f8c 	.word	0x08008f8c
 800835c:	08008ff0 	.word	0x08008ff0
 8008360:	08008ffa 	.word	0x08008ffa
 8008364:	00000000 	.word	0x00000000
 8008368:	080080eb 	.word	0x080080eb
 800836c:	08008ff6 	.word	0x08008ff6

08008370 <_printf_common>:
 8008370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008374:	4616      	mov	r6, r2
 8008376:	4699      	mov	r9, r3
 8008378:	688a      	ldr	r2, [r1, #8]
 800837a:	690b      	ldr	r3, [r1, #16]
 800837c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008380:	4293      	cmp	r3, r2
 8008382:	bfb8      	it	lt
 8008384:	4613      	movlt	r3, r2
 8008386:	6033      	str	r3, [r6, #0]
 8008388:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800838c:	4607      	mov	r7, r0
 800838e:	460c      	mov	r4, r1
 8008390:	b10a      	cbz	r2, 8008396 <_printf_common+0x26>
 8008392:	3301      	adds	r3, #1
 8008394:	6033      	str	r3, [r6, #0]
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	0699      	lsls	r1, r3, #26
 800839a:	bf42      	ittt	mi
 800839c:	6833      	ldrmi	r3, [r6, #0]
 800839e:	3302      	addmi	r3, #2
 80083a0:	6033      	strmi	r3, [r6, #0]
 80083a2:	6825      	ldr	r5, [r4, #0]
 80083a4:	f015 0506 	ands.w	r5, r5, #6
 80083a8:	d106      	bne.n	80083b8 <_printf_common+0x48>
 80083aa:	f104 0a19 	add.w	sl, r4, #25
 80083ae:	68e3      	ldr	r3, [r4, #12]
 80083b0:	6832      	ldr	r2, [r6, #0]
 80083b2:	1a9b      	subs	r3, r3, r2
 80083b4:	42ab      	cmp	r3, r5
 80083b6:	dc26      	bgt.n	8008406 <_printf_common+0x96>
 80083b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083bc:	1e13      	subs	r3, r2, #0
 80083be:	6822      	ldr	r2, [r4, #0]
 80083c0:	bf18      	it	ne
 80083c2:	2301      	movne	r3, #1
 80083c4:	0692      	lsls	r2, r2, #26
 80083c6:	d42b      	bmi.n	8008420 <_printf_common+0xb0>
 80083c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083cc:	4649      	mov	r1, r9
 80083ce:	4638      	mov	r0, r7
 80083d0:	47c0      	blx	r8
 80083d2:	3001      	adds	r0, #1
 80083d4:	d01e      	beq.n	8008414 <_printf_common+0xa4>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	68e5      	ldr	r5, [r4, #12]
 80083da:	6832      	ldr	r2, [r6, #0]
 80083dc:	f003 0306 	and.w	r3, r3, #6
 80083e0:	2b04      	cmp	r3, #4
 80083e2:	bf08      	it	eq
 80083e4:	1aad      	subeq	r5, r5, r2
 80083e6:	68a3      	ldr	r3, [r4, #8]
 80083e8:	6922      	ldr	r2, [r4, #16]
 80083ea:	bf0c      	ite	eq
 80083ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083f0:	2500      	movne	r5, #0
 80083f2:	4293      	cmp	r3, r2
 80083f4:	bfc4      	itt	gt
 80083f6:	1a9b      	subgt	r3, r3, r2
 80083f8:	18ed      	addgt	r5, r5, r3
 80083fa:	2600      	movs	r6, #0
 80083fc:	341a      	adds	r4, #26
 80083fe:	42b5      	cmp	r5, r6
 8008400:	d11a      	bne.n	8008438 <_printf_common+0xc8>
 8008402:	2000      	movs	r0, #0
 8008404:	e008      	b.n	8008418 <_printf_common+0xa8>
 8008406:	2301      	movs	r3, #1
 8008408:	4652      	mov	r2, sl
 800840a:	4649      	mov	r1, r9
 800840c:	4638      	mov	r0, r7
 800840e:	47c0      	blx	r8
 8008410:	3001      	adds	r0, #1
 8008412:	d103      	bne.n	800841c <_printf_common+0xac>
 8008414:	f04f 30ff 	mov.w	r0, #4294967295
 8008418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800841c:	3501      	adds	r5, #1
 800841e:	e7c6      	b.n	80083ae <_printf_common+0x3e>
 8008420:	18e1      	adds	r1, r4, r3
 8008422:	1c5a      	adds	r2, r3, #1
 8008424:	2030      	movs	r0, #48	; 0x30
 8008426:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800842a:	4422      	add	r2, r4
 800842c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008430:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008434:	3302      	adds	r3, #2
 8008436:	e7c7      	b.n	80083c8 <_printf_common+0x58>
 8008438:	2301      	movs	r3, #1
 800843a:	4622      	mov	r2, r4
 800843c:	4649      	mov	r1, r9
 800843e:	4638      	mov	r0, r7
 8008440:	47c0      	blx	r8
 8008442:	3001      	adds	r0, #1
 8008444:	d0e6      	beq.n	8008414 <_printf_common+0xa4>
 8008446:	3601      	adds	r6, #1
 8008448:	e7d9      	b.n	80083fe <_printf_common+0x8e>
	...

0800844c <_printf_i>:
 800844c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008450:	460c      	mov	r4, r1
 8008452:	4691      	mov	r9, r2
 8008454:	7e27      	ldrb	r7, [r4, #24]
 8008456:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008458:	2f78      	cmp	r7, #120	; 0x78
 800845a:	4680      	mov	r8, r0
 800845c:	469a      	mov	sl, r3
 800845e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008462:	d807      	bhi.n	8008474 <_printf_i+0x28>
 8008464:	2f62      	cmp	r7, #98	; 0x62
 8008466:	d80a      	bhi.n	800847e <_printf_i+0x32>
 8008468:	2f00      	cmp	r7, #0
 800846a:	f000 80d8 	beq.w	800861e <_printf_i+0x1d2>
 800846e:	2f58      	cmp	r7, #88	; 0x58
 8008470:	f000 80a3 	beq.w	80085ba <_printf_i+0x16e>
 8008474:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008478:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800847c:	e03a      	b.n	80084f4 <_printf_i+0xa8>
 800847e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008482:	2b15      	cmp	r3, #21
 8008484:	d8f6      	bhi.n	8008474 <_printf_i+0x28>
 8008486:	a001      	add	r0, pc, #4	; (adr r0, 800848c <_printf_i+0x40>)
 8008488:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800848c:	080084e5 	.word	0x080084e5
 8008490:	080084f9 	.word	0x080084f9
 8008494:	08008475 	.word	0x08008475
 8008498:	08008475 	.word	0x08008475
 800849c:	08008475 	.word	0x08008475
 80084a0:	08008475 	.word	0x08008475
 80084a4:	080084f9 	.word	0x080084f9
 80084a8:	08008475 	.word	0x08008475
 80084ac:	08008475 	.word	0x08008475
 80084b0:	08008475 	.word	0x08008475
 80084b4:	08008475 	.word	0x08008475
 80084b8:	08008605 	.word	0x08008605
 80084bc:	08008529 	.word	0x08008529
 80084c0:	080085e7 	.word	0x080085e7
 80084c4:	08008475 	.word	0x08008475
 80084c8:	08008475 	.word	0x08008475
 80084cc:	08008627 	.word	0x08008627
 80084d0:	08008475 	.word	0x08008475
 80084d4:	08008529 	.word	0x08008529
 80084d8:	08008475 	.word	0x08008475
 80084dc:	08008475 	.word	0x08008475
 80084e0:	080085ef 	.word	0x080085ef
 80084e4:	680b      	ldr	r3, [r1, #0]
 80084e6:	1d1a      	adds	r2, r3, #4
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	600a      	str	r2, [r1, #0]
 80084ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084f4:	2301      	movs	r3, #1
 80084f6:	e0a3      	b.n	8008640 <_printf_i+0x1f4>
 80084f8:	6825      	ldr	r5, [r4, #0]
 80084fa:	6808      	ldr	r0, [r1, #0]
 80084fc:	062e      	lsls	r6, r5, #24
 80084fe:	f100 0304 	add.w	r3, r0, #4
 8008502:	d50a      	bpl.n	800851a <_printf_i+0xce>
 8008504:	6805      	ldr	r5, [r0, #0]
 8008506:	600b      	str	r3, [r1, #0]
 8008508:	2d00      	cmp	r5, #0
 800850a:	da03      	bge.n	8008514 <_printf_i+0xc8>
 800850c:	232d      	movs	r3, #45	; 0x2d
 800850e:	426d      	negs	r5, r5
 8008510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008514:	485e      	ldr	r0, [pc, #376]	; (8008690 <_printf_i+0x244>)
 8008516:	230a      	movs	r3, #10
 8008518:	e019      	b.n	800854e <_printf_i+0x102>
 800851a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800851e:	6805      	ldr	r5, [r0, #0]
 8008520:	600b      	str	r3, [r1, #0]
 8008522:	bf18      	it	ne
 8008524:	b22d      	sxthne	r5, r5
 8008526:	e7ef      	b.n	8008508 <_printf_i+0xbc>
 8008528:	680b      	ldr	r3, [r1, #0]
 800852a:	6825      	ldr	r5, [r4, #0]
 800852c:	1d18      	adds	r0, r3, #4
 800852e:	6008      	str	r0, [r1, #0]
 8008530:	0628      	lsls	r0, r5, #24
 8008532:	d501      	bpl.n	8008538 <_printf_i+0xec>
 8008534:	681d      	ldr	r5, [r3, #0]
 8008536:	e002      	b.n	800853e <_printf_i+0xf2>
 8008538:	0669      	lsls	r1, r5, #25
 800853a:	d5fb      	bpl.n	8008534 <_printf_i+0xe8>
 800853c:	881d      	ldrh	r5, [r3, #0]
 800853e:	4854      	ldr	r0, [pc, #336]	; (8008690 <_printf_i+0x244>)
 8008540:	2f6f      	cmp	r7, #111	; 0x6f
 8008542:	bf0c      	ite	eq
 8008544:	2308      	moveq	r3, #8
 8008546:	230a      	movne	r3, #10
 8008548:	2100      	movs	r1, #0
 800854a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800854e:	6866      	ldr	r6, [r4, #4]
 8008550:	60a6      	str	r6, [r4, #8]
 8008552:	2e00      	cmp	r6, #0
 8008554:	bfa2      	ittt	ge
 8008556:	6821      	ldrge	r1, [r4, #0]
 8008558:	f021 0104 	bicge.w	r1, r1, #4
 800855c:	6021      	strge	r1, [r4, #0]
 800855e:	b90d      	cbnz	r5, 8008564 <_printf_i+0x118>
 8008560:	2e00      	cmp	r6, #0
 8008562:	d04d      	beq.n	8008600 <_printf_i+0x1b4>
 8008564:	4616      	mov	r6, r2
 8008566:	fbb5 f1f3 	udiv	r1, r5, r3
 800856a:	fb03 5711 	mls	r7, r3, r1, r5
 800856e:	5dc7      	ldrb	r7, [r0, r7]
 8008570:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008574:	462f      	mov	r7, r5
 8008576:	42bb      	cmp	r3, r7
 8008578:	460d      	mov	r5, r1
 800857a:	d9f4      	bls.n	8008566 <_printf_i+0x11a>
 800857c:	2b08      	cmp	r3, #8
 800857e:	d10b      	bne.n	8008598 <_printf_i+0x14c>
 8008580:	6823      	ldr	r3, [r4, #0]
 8008582:	07df      	lsls	r7, r3, #31
 8008584:	d508      	bpl.n	8008598 <_printf_i+0x14c>
 8008586:	6923      	ldr	r3, [r4, #16]
 8008588:	6861      	ldr	r1, [r4, #4]
 800858a:	4299      	cmp	r1, r3
 800858c:	bfde      	ittt	le
 800858e:	2330      	movle	r3, #48	; 0x30
 8008590:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008594:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008598:	1b92      	subs	r2, r2, r6
 800859a:	6122      	str	r2, [r4, #16]
 800859c:	f8cd a000 	str.w	sl, [sp]
 80085a0:	464b      	mov	r3, r9
 80085a2:	aa03      	add	r2, sp, #12
 80085a4:	4621      	mov	r1, r4
 80085a6:	4640      	mov	r0, r8
 80085a8:	f7ff fee2 	bl	8008370 <_printf_common>
 80085ac:	3001      	adds	r0, #1
 80085ae:	d14c      	bne.n	800864a <_printf_i+0x1fe>
 80085b0:	f04f 30ff 	mov.w	r0, #4294967295
 80085b4:	b004      	add	sp, #16
 80085b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ba:	4835      	ldr	r0, [pc, #212]	; (8008690 <_printf_i+0x244>)
 80085bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085c0:	6823      	ldr	r3, [r4, #0]
 80085c2:	680e      	ldr	r6, [r1, #0]
 80085c4:	061f      	lsls	r7, r3, #24
 80085c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80085ca:	600e      	str	r6, [r1, #0]
 80085cc:	d514      	bpl.n	80085f8 <_printf_i+0x1ac>
 80085ce:	07d9      	lsls	r1, r3, #31
 80085d0:	bf44      	itt	mi
 80085d2:	f043 0320 	orrmi.w	r3, r3, #32
 80085d6:	6023      	strmi	r3, [r4, #0]
 80085d8:	b91d      	cbnz	r5, 80085e2 <_printf_i+0x196>
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	f023 0320 	bic.w	r3, r3, #32
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	2310      	movs	r3, #16
 80085e4:	e7b0      	b.n	8008548 <_printf_i+0xfc>
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	f043 0320 	orr.w	r3, r3, #32
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	2378      	movs	r3, #120	; 0x78
 80085f0:	4828      	ldr	r0, [pc, #160]	; (8008694 <_printf_i+0x248>)
 80085f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085f6:	e7e3      	b.n	80085c0 <_printf_i+0x174>
 80085f8:	065e      	lsls	r6, r3, #25
 80085fa:	bf48      	it	mi
 80085fc:	b2ad      	uxthmi	r5, r5
 80085fe:	e7e6      	b.n	80085ce <_printf_i+0x182>
 8008600:	4616      	mov	r6, r2
 8008602:	e7bb      	b.n	800857c <_printf_i+0x130>
 8008604:	680b      	ldr	r3, [r1, #0]
 8008606:	6826      	ldr	r6, [r4, #0]
 8008608:	6960      	ldr	r0, [r4, #20]
 800860a:	1d1d      	adds	r5, r3, #4
 800860c:	600d      	str	r5, [r1, #0]
 800860e:	0635      	lsls	r5, r6, #24
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	d501      	bpl.n	8008618 <_printf_i+0x1cc>
 8008614:	6018      	str	r0, [r3, #0]
 8008616:	e002      	b.n	800861e <_printf_i+0x1d2>
 8008618:	0671      	lsls	r1, r6, #25
 800861a:	d5fb      	bpl.n	8008614 <_printf_i+0x1c8>
 800861c:	8018      	strh	r0, [r3, #0]
 800861e:	2300      	movs	r3, #0
 8008620:	6123      	str	r3, [r4, #16]
 8008622:	4616      	mov	r6, r2
 8008624:	e7ba      	b.n	800859c <_printf_i+0x150>
 8008626:	680b      	ldr	r3, [r1, #0]
 8008628:	1d1a      	adds	r2, r3, #4
 800862a:	600a      	str	r2, [r1, #0]
 800862c:	681e      	ldr	r6, [r3, #0]
 800862e:	6862      	ldr	r2, [r4, #4]
 8008630:	2100      	movs	r1, #0
 8008632:	4630      	mov	r0, r6
 8008634:	f7f7 fe04 	bl	8000240 <memchr>
 8008638:	b108      	cbz	r0, 800863e <_printf_i+0x1f2>
 800863a:	1b80      	subs	r0, r0, r6
 800863c:	6060      	str	r0, [r4, #4]
 800863e:	6863      	ldr	r3, [r4, #4]
 8008640:	6123      	str	r3, [r4, #16]
 8008642:	2300      	movs	r3, #0
 8008644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008648:	e7a8      	b.n	800859c <_printf_i+0x150>
 800864a:	6923      	ldr	r3, [r4, #16]
 800864c:	4632      	mov	r2, r6
 800864e:	4649      	mov	r1, r9
 8008650:	4640      	mov	r0, r8
 8008652:	47d0      	blx	sl
 8008654:	3001      	adds	r0, #1
 8008656:	d0ab      	beq.n	80085b0 <_printf_i+0x164>
 8008658:	6823      	ldr	r3, [r4, #0]
 800865a:	079b      	lsls	r3, r3, #30
 800865c:	d413      	bmi.n	8008686 <_printf_i+0x23a>
 800865e:	68e0      	ldr	r0, [r4, #12]
 8008660:	9b03      	ldr	r3, [sp, #12]
 8008662:	4298      	cmp	r0, r3
 8008664:	bfb8      	it	lt
 8008666:	4618      	movlt	r0, r3
 8008668:	e7a4      	b.n	80085b4 <_printf_i+0x168>
 800866a:	2301      	movs	r3, #1
 800866c:	4632      	mov	r2, r6
 800866e:	4649      	mov	r1, r9
 8008670:	4640      	mov	r0, r8
 8008672:	47d0      	blx	sl
 8008674:	3001      	adds	r0, #1
 8008676:	d09b      	beq.n	80085b0 <_printf_i+0x164>
 8008678:	3501      	adds	r5, #1
 800867a:	68e3      	ldr	r3, [r4, #12]
 800867c:	9903      	ldr	r1, [sp, #12]
 800867e:	1a5b      	subs	r3, r3, r1
 8008680:	42ab      	cmp	r3, r5
 8008682:	dcf2      	bgt.n	800866a <_printf_i+0x21e>
 8008684:	e7eb      	b.n	800865e <_printf_i+0x212>
 8008686:	2500      	movs	r5, #0
 8008688:	f104 0619 	add.w	r6, r4, #25
 800868c:	e7f5      	b.n	800867a <_printf_i+0x22e>
 800868e:	bf00      	nop
 8008690:	08009001 	.word	0x08009001
 8008694:	08009012 	.word	0x08009012

08008698 <_read_r>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	4d07      	ldr	r5, [pc, #28]	; (80086b8 <_read_r+0x20>)
 800869c:	4604      	mov	r4, r0
 800869e:	4608      	mov	r0, r1
 80086a0:	4611      	mov	r1, r2
 80086a2:	2200      	movs	r2, #0
 80086a4:	602a      	str	r2, [r5, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	f7fe fec4 	bl	8007434 <_read>
 80086ac:	1c43      	adds	r3, r0, #1
 80086ae:	d102      	bne.n	80086b6 <_read_r+0x1e>
 80086b0:	682b      	ldr	r3, [r5, #0]
 80086b2:	b103      	cbz	r3, 80086b6 <_read_r+0x1e>
 80086b4:	6023      	str	r3, [r4, #0]
 80086b6:	bd38      	pop	{r3, r4, r5, pc}
 80086b8:	20048628 	.word	0x20048628

080086bc <_fstat_r>:
 80086bc:	b538      	push	{r3, r4, r5, lr}
 80086be:	4d07      	ldr	r5, [pc, #28]	; (80086dc <_fstat_r+0x20>)
 80086c0:	2300      	movs	r3, #0
 80086c2:	4604      	mov	r4, r0
 80086c4:	4608      	mov	r0, r1
 80086c6:	4611      	mov	r1, r2
 80086c8:	602b      	str	r3, [r5, #0]
 80086ca:	f000 f821 	bl	8008710 <_fstat>
 80086ce:	1c43      	adds	r3, r0, #1
 80086d0:	d102      	bne.n	80086d8 <_fstat_r+0x1c>
 80086d2:	682b      	ldr	r3, [r5, #0]
 80086d4:	b103      	cbz	r3, 80086d8 <_fstat_r+0x1c>
 80086d6:	6023      	str	r3, [r4, #0]
 80086d8:	bd38      	pop	{r3, r4, r5, pc}
 80086da:	bf00      	nop
 80086dc:	20048628 	.word	0x20048628

080086e0 <_isatty_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	4d06      	ldr	r5, [pc, #24]	; (80086fc <_isatty_r+0x1c>)
 80086e4:	2300      	movs	r3, #0
 80086e6:	4604      	mov	r4, r0
 80086e8:	4608      	mov	r0, r1
 80086ea:	602b      	str	r3, [r5, #0]
 80086ec:	f000 f818 	bl	8008720 <_isatty>
 80086f0:	1c43      	adds	r3, r0, #1
 80086f2:	d102      	bne.n	80086fa <_isatty_r+0x1a>
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	b103      	cbz	r3, 80086fa <_isatty_r+0x1a>
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	bd38      	pop	{r3, r4, r5, pc}
 80086fc:	20048628 	.word	0x20048628

08008700 <_close>:
 8008700:	4b02      	ldr	r3, [pc, #8]	; (800870c <_close+0xc>)
 8008702:	2258      	movs	r2, #88	; 0x58
 8008704:	601a      	str	r2, [r3, #0]
 8008706:	f04f 30ff 	mov.w	r0, #4294967295
 800870a:	4770      	bx	lr
 800870c:	20048628 	.word	0x20048628

08008710 <_fstat>:
 8008710:	4b02      	ldr	r3, [pc, #8]	; (800871c <_fstat+0xc>)
 8008712:	2258      	movs	r2, #88	; 0x58
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	f04f 30ff 	mov.w	r0, #4294967295
 800871a:	4770      	bx	lr
 800871c:	20048628 	.word	0x20048628

08008720 <_isatty>:
 8008720:	4b02      	ldr	r3, [pc, #8]	; (800872c <_isatty+0xc>)
 8008722:	2258      	movs	r2, #88	; 0x58
 8008724:	601a      	str	r2, [r3, #0]
 8008726:	2000      	movs	r0, #0
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	20048628 	.word	0x20048628

08008730 <_lseek>:
 8008730:	4b02      	ldr	r3, [pc, #8]	; (800873c <_lseek+0xc>)
 8008732:	2258      	movs	r2, #88	; 0x58
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	f04f 30ff 	mov.w	r0, #4294967295
 800873a:	4770      	bx	lr
 800873c:	20048628 	.word	0x20048628

08008740 <_sbrk>:
 8008740:	4b04      	ldr	r3, [pc, #16]	; (8008754 <_sbrk+0x14>)
 8008742:	6819      	ldr	r1, [r3, #0]
 8008744:	4602      	mov	r2, r0
 8008746:	b909      	cbnz	r1, 800874c <_sbrk+0xc>
 8008748:	4903      	ldr	r1, [pc, #12]	; (8008758 <_sbrk+0x18>)
 800874a:	6019      	str	r1, [r3, #0]
 800874c:	6818      	ldr	r0, [r3, #0]
 800874e:	4402      	add	r2, r0
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	4770      	bx	lr
 8008754:	2000134c 	.word	0x2000134c
 8008758:	20048630 	.word	0x20048630

0800875c <_init>:
 800875c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875e:	bf00      	nop
 8008760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008762:	bc08      	pop	{r3}
 8008764:	469e      	mov	lr, r3
 8008766:	4770      	bx	lr

08008768 <_fini>:
 8008768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876a:	bf00      	nop
 800876c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800876e:	bc08      	pop	{r3}
 8008770:	469e      	mov	lr, r3
 8008772:	4770      	bx	lr
