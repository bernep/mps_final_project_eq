
mps_final_project_eq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c844  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004a0c  0800ca48  0800ca48  0001ca48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08011454  08011454  00021454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08011458  08011458  00021458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000118  20000000  0801145c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00046630  20000118  08011574  00030118  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20046748  08011574  00036748  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY
  9 .debug_info   00055c91  00000000  00000000  00030146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00007f9a  00000000  00000000  00085dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000288d5  00000000  00000000  0008dd71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002588  00000000  00000000  000b6648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002370  00000000  00000000  000b8bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003872d  00000000  00000000  000baf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00047c85  00000000  00000000  000f366d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00133872  00000000  00000000  0013b2f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0026eb64  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000076d8  00000000  00000000  0026ebb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         0000006c  00000000  00000000  00276290  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000e3  00000000  00000000  002762fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000118 	.word	0x20000118
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ca2c 	.word	0x0800ca2c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000011c 	.word	0x2000011c
 800023c:	0800ca2c 	.word	0x0800ca2c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <ft6x06_Reset>:
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 80002e0:	4770      	bx	lr

080002e2 <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 80002e2:	2000      	movs	r0, #0
 80002e4:	4770      	bx	lr

080002e6 <ft6x06_TS_ClearIT>:
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
  /* Nothing to be done here for FT6206 */
}
 80002e6:	4770      	bx	lr

080002e8 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 80002e8:	4603      	mov	r3, r0
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80002ea:	2000      	movs	r0, #0
 80002ec:	2801      	cmp	r0, #1
 80002ee:	d806      	bhi.n	80002fe <ft6x06_GetInstance+0x16>
  {
    if(ft6x06[idx] == DeviceAddr)
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <ft6x06_GetInstance+0x1c>)
 80002f2:	5c12      	ldrb	r2, [r2, r0]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d003      	beq.n	8000300 <ft6x06_GetInstance+0x18>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80002f8:	3001      	adds	r0, #1
 80002fa:	b2c0      	uxtb	r0, r0
 80002fc:	e7f6      	b.n	80002ec <ft6x06_GetInstance+0x4>
    {
      return idx; 
    }
  }
  
  return 0xFF;
 80002fe:	20ff      	movs	r0, #255	; 0xff
}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	20000134 	.word	0x20000134

08000308 <ft6x06_Init>:
{  
 8000308:	b510      	push	{r4, lr}
 800030a:	4604      	mov	r4, r0
  instance = ft6x06_GetInstance(DeviceAddr);
 800030c:	f7ff ffec 	bl	80002e8 <ft6x06_GetInstance>
  if(instance == 0xFF)
 8000310:	28ff      	cmp	r0, #255	; 0xff
 8000312:	d000      	beq.n	8000316 <ft6x06_Init+0xe>
}
 8000314:	bd10      	pop	{r4, pc}
    empty = ft6x06_GetInstance(0);
 8000316:	2000      	movs	r0, #0
 8000318:	f7ff ffe6 	bl	80002e8 <ft6x06_GetInstance>
    if(empty < FT6x06_MAX_INSTANCE)
 800031c:	2801      	cmp	r0, #1
 800031e:	d8f9      	bhi.n	8000314 <ft6x06_Init+0xc>
      ft6x06[empty] = DeviceAddr;
 8000320:	4b02      	ldr	r3, [pc, #8]	; (800032c <ft6x06_Init+0x24>)
 8000322:	541c      	strb	r4, [r3, r0]
      TS_IO_Init(); 
 8000324:	f001 f974 	bl	8001610 <TS_IO_Init>
}
 8000328:	e7f4      	b.n	8000314 <ft6x06_Init+0xc>
 800032a:	bf00      	nop
 800032c:	20000134 	.word	0x20000134

08000330 <ft6x06_ReadID>:
{
 8000330:	b510      	push	{r4, lr}
 8000332:	4604      	mov	r4, r0
  TS_IO_Init();
 8000334:	f001 f96c 	bl	8001610 <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8000338:	21a8      	movs	r1, #168	; 0xa8
 800033a:	b2e0      	uxtb	r0, r4
 800033c:	f001 f984 	bl	8001648 <TS_IO_Read>
}
 8000340:	b280      	uxth	r0, r0
 8000342:	bd10      	pop	{r4, pc}

08000344 <ft6x06_TS_DetectTouch>:
{
 8000344:	b500      	push	{lr}
 8000346:	b083      	sub	sp, #12
  volatile uint8_t nbTouch = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	f88d 3007 	strb.w	r3, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 800034e:	2102      	movs	r1, #2
 8000350:	b2c0      	uxtb	r0, r0
 8000352:	f001 f979 	bl	8001648 <TS_IO_Read>
 8000356:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 800035a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800035e:	f003 030f 	and.w	r3, r3, #15
 8000362:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8000366:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800036a:	b2db      	uxtb	r3, r3
 800036c:	2b02      	cmp	r3, #2
 800036e:	d902      	bls.n	8000376 <ft6x06_TS_DetectTouch+0x32>
    nbTouch = 0;
 8000370:	2300      	movs	r3, #0
 8000372:	f88d 3007 	strb.w	r3, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8000376:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800037a:	4b04      	ldr	r3, [pc, #16]	; (800038c <ft6x06_TS_DetectTouch+0x48>)
 800037c:	715a      	strb	r2, [r3, #5]
  ft6x06_handle.currActiveTouchIdx = 0;
 800037e:	2200      	movs	r2, #0
 8000380:	719a      	strb	r2, [r3, #6]
  return(nbTouch);
 8000382:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8000386:	b003      	add	sp, #12
 8000388:	f85d fb04 	ldr.w	pc, [sp], #4
 800038c:	20000134 	.word	0x20000134

08000390 <ft6x06_TS_GetXY>:
{
 8000390:	b530      	push	{r4, r5, lr}
 8000392:	b083      	sub	sp, #12
 8000394:	4614      	mov	r4, r2
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8000396:	4a16      	ldr	r2, [pc, #88]	; (80003f0 <ft6x06_TS_GetXY+0x60>)
 8000398:	7993      	ldrb	r3, [r2, #6]
 800039a:	7952      	ldrb	r2, [r2, #5]
 800039c:	4293      	cmp	r3, r2
 800039e:	d220      	bcs.n	80003e2 <ft6x06_TS_GetXY+0x52>
 80003a0:	460d      	mov	r5, r1
    switch(ft6x06_handle.currActiveTouchIdx)
 80003a2:	b303      	cbz	r3, 80003e6 <ft6x06_TS_GetXY+0x56>
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d120      	bne.n	80003ea <ft6x06_TS_GetXY+0x5a>
      regAddress = FT6206_P2_XH_REG; 
 80003a8:	2109      	movs	r1, #9
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 80003aa:	2304      	movs	r3, #4
 80003ac:	eb0d 0203 	add.w	r2, sp, r3
 80003b0:	b2c0      	uxtb	r0, r0
 80003b2:	f001 f95f 	bl	8001674 <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80003b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80003ba:	021b      	lsls	r3, r3, #8
 80003bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80003c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80003c4:	4313      	orrs	r3, r2
 80003c6:	802b      	strh	r3, [r5, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 80003c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80003cc:	021b      	lsls	r3, r3, #8
 80003ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80003d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80003d6:	4313      	orrs	r3, r2
 80003d8:	8023      	strh	r3, [r4, #0]
    ft6x06_handle.currActiveTouchIdx++;
 80003da:	4a05      	ldr	r2, [pc, #20]	; (80003f0 <ft6x06_TS_GetXY+0x60>)
 80003dc:	7993      	ldrb	r3, [r2, #6]
 80003de:	3301      	adds	r3, #1
 80003e0:	7193      	strb	r3, [r2, #6]
}
 80003e2:	b003      	add	sp, #12
 80003e4:	bd30      	pop	{r4, r5, pc}
      regAddress = FT6206_P1_XH_REG; 
 80003e6:	2103      	movs	r1, #3
 80003e8:	e7df      	b.n	80003aa <ft6x06_TS_GetXY+0x1a>
    switch(ft6x06_handle.currActiveTouchIdx)
 80003ea:	2100      	movs	r1, #0
 80003ec:	e7dd      	b.n	80003aa <ft6x06_TS_GetXY+0x1a>
 80003ee:	bf00      	nop
 80003f0:	20000134 	.word	0x20000134

080003f4 <ft6x06_TS_EnableIT>:
{
 80003f4:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80003f6:	2201      	movs	r2, #1
 80003f8:	21a4      	movs	r1, #164	; 0xa4
 80003fa:	b2c0      	uxtb	r0, r0
 80003fc:	f001 f910 	bl	8001620 <TS_IO_Write>
}
 8000400:	bd08      	pop	{r3, pc}

08000402 <ft6x06_TS_DisableIT>:
{
 8000402:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000404:	2200      	movs	r2, #0
 8000406:	21a4      	movs	r1, #164	; 0xa4
 8000408:	b2c0      	uxtb	r0, r0
 800040a:	f001 f909 	bl	8001620 <TS_IO_Write>
}
 800040e:	bd08      	pop	{r3, pc}

08000410 <ft6x06_TS_Start>:
{
 8000410:	b508      	push	{r3, lr}
  ft6x06_TS_DisableIT(DeviceAddr);
 8000412:	f7ff fff6 	bl	8000402 <ft6x06_TS_DisableIT>
}
 8000416:	bd08      	pop	{r3, pc}

08000418 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800041c:	b083      	sub	sp, #12
 800041e:	9000      	str	r0, [sp, #0]
 8000420:	9101      	str	r1, [sp, #4]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000422:	4cf5      	ldr	r4, [pc, #980]	; (80007f8 <OTM8009A_Init+0x3e0>)
 8000424:	4621      	mov	r1, r4
 8000426:	2000      	movs	r0, #0
 8000428:	f001 fb9c 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 800042c:	1d21      	adds	r1, r4, #4
 800042e:	2003      	movs	r0, #3
 8000430:	f001 fb98 	bl	8001b64 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8000434:	f104 0508 	add.w	r5, r4, #8
 8000438:	4629      	mov	r1, r5
 800043a:	2000      	movs	r0, #0
 800043c:	f001 fb92 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000440:	f104 010c 	add.w	r1, r4, #12
 8000444:	2002      	movs	r0, #2
 8000446:	f001 fb8d 	bl	8001b64 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800044a:	4629      	mov	r1, r5
 800044c:	2000      	movs	r0, #0
 800044e:	f001 fb89 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000452:	f104 0110 	add.w	r1, r4, #16
 8000456:	2000      	movs	r0, #0
 8000458:	f001 fb84 	bl	8001b64 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800045c:	200a      	movs	r0, #10
 800045e:	f001 f919 	bl	8001694 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000462:	f104 0114 	add.w	r1, r4, #20
 8000466:	2000      	movs	r0, #0
 8000468:	f001 fb7c 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 800046c:	f104 0118 	add.w	r1, r4, #24
 8000470:	2000      	movs	r0, #0
 8000472:	f001 fb77 	bl	8001b64 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000476:	200a      	movs	r0, #10
 8000478:	f001 f90c 	bl	8001694 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 800047c:	f104 011c 	add.w	r1, r4, #28
 8000480:	2000      	movs	r0, #0
 8000482:	f001 fb6f 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8000486:	f104 0120 	add.w	r1, r4, #32
 800048a:	2000      	movs	r0, #0
 800048c:	f001 fb6a 	bl	8001b64 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8000490:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8000494:	2000      	movs	r0, #0
 8000496:	f001 fb65 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800049a:	f104 0828 	add.w	r8, r4, #40	; 0x28
 800049e:	4641      	mov	r1, r8
 80004a0:	2000      	movs	r0, #0
 80004a2:	f001 fb5f 	bl	8001b64 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80004a6:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80004aa:	2000      	movs	r0, #0
 80004ac:	f001 fb5a 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80004b0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80004b4:	2000      	movs	r0, #0
 80004b6:	f001 fb55 	bl	8001b64 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80004ba:	4621      	mov	r1, r4
 80004bc:	2000      	movs	r0, #0
 80004be:	f001 fb51 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80004c2:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80004c6:	2000      	movs	r0, #0
 80004c8:	f001 fb4c 	bl	8001b64 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80004cc:	f104 0638 	add.w	r6, r4, #56	; 0x38
 80004d0:	4631      	mov	r1, r6
 80004d2:	2000      	movs	r0, #0
 80004d4:	f001 fb46 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80004d8:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80004dc:	2000      	movs	r0, #0
 80004de:	f001 fb41 	bl	8001b64 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80004e2:	f104 0740 	add.w	r7, r4, #64	; 0x40
 80004e6:	4639      	mov	r1, r7
 80004e8:	2000      	movs	r0, #0
 80004ea:	f001 fb3b 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80004ee:	f104 0144 	add.w	r1, r4, #68	; 0x44
 80004f2:	2000      	movs	r0, #0
 80004f4:	f001 fb36 	bl	8001b64 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80004f8:	f104 0148 	add.w	r1, r4, #72	; 0x48
 80004fc:	2000      	movs	r0, #0
 80004fe:	f001 fb31 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8000502:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8000506:	2000      	movs	r0, #0
 8000508:	f001 fb2c 	bl	8001b64 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 800050c:	f104 0150 	add.w	r1, r4, #80	; 0x50
 8000510:	2000      	movs	r0, #0
 8000512:	f001 fb27 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000516:	4641      	mov	r1, r8
 8000518:	2000      	movs	r0, #0
 800051a:	f001 fb23 	bl	8001b64 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800051e:	4621      	mov	r1, r4
 8000520:	2000      	movs	r0, #0
 8000522:	f001 fb1f 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8000526:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800052a:	2002      	movs	r0, #2
 800052c:	f001 fb1a 	bl	8001b64 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000530:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8000534:	2000      	movs	r0, #0
 8000536:	f001 fb15 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800053a:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 800053e:	2000      	movs	r0, #0
 8000540:	f001 fb10 	bl	8001b64 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000544:	f104 0160 	add.w	r1, r4, #96	; 0x60
 8000548:	2000      	movs	r0, #0
 800054a:	f001 fb0b 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800054e:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8000552:	2000      	movs	r0, #0
 8000554:	f001 fb06 	bl	8001b64 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000558:	f104 0168 	add.w	r1, r4, #104	; 0x68
 800055c:	2000      	movs	r0, #0
 800055e:	f001 fb01 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8000562:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8000566:	2000      	movs	r0, #0
 8000568:	f001 fafc 	bl	8001b64 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800056c:	4631      	mov	r1, r6
 800056e:	2000      	movs	r0, #0
 8000570:	f001 faf8 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8000574:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8000578:	2000      	movs	r0, #0
 800057a:	f001 faf3 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800057e:	4639      	mov	r1, r7
 8000580:	2000      	movs	r0, #0
 8000582:	f001 faef 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8000586:	f104 0174 	add.w	r1, r4, #116	; 0x74
 800058a:	2000      	movs	r0, #0
 800058c:	f001 faea 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000590:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8000594:	2000      	movs	r0, #0
 8000596:	f001 fae5 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800059a:	f104 017c 	add.w	r1, r4, #124	; 0x7c
 800059e:	2002      	movs	r0, #2
 80005a0:	f001 fae0 	bl	8001b64 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80005a4:	4629      	mov	r1, r5
 80005a6:	2000      	movs	r0, #0
 80005a8:	f001 fadc 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80005ac:	f104 0180 	add.w	r1, r4, #128	; 0x80
 80005b0:	2006      	movs	r0, #6
 80005b2:	f001 fad7 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80005b6:	f104 0a88 	add.w	sl, r4, #136	; 0x88
 80005ba:	4651      	mov	r1, sl
 80005bc:	2000      	movs	r0, #0
 80005be:	f001 fad1 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80005c2:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 80005c6:	200e      	movs	r0, #14
 80005c8:	f001 facc 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80005cc:	f104 099c 	add.w	r9, r4, #156	; 0x9c
 80005d0:	4649      	mov	r1, r9
 80005d2:	2000      	movs	r0, #0
 80005d4:	f001 fac6 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80005d8:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 80005dc:	200e      	movs	r0, #14
 80005de:	f001 fac1 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80005e2:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
 80005e6:	4641      	mov	r1, r8
 80005e8:	2000      	movs	r0, #0
 80005ea:	f001 fabb 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80005ee:	f104 01b4 	add.w	r1, r4, #180	; 0xb4
 80005f2:	200a      	movs	r0, #10
 80005f4:	f001 fab6 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80005f8:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
 80005fc:	4639      	mov	r1, r7
 80005fe:	2000      	movs	r0, #0
 8000600:	f001 fab0 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8000604:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 8000608:	2000      	movs	r0, #0
 800060a:	f001 faab 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800060e:	4629      	mov	r1, r5
 8000610:	2000      	movs	r0, #0
 8000612:	f001 faa7 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8000616:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 800061a:	200a      	movs	r0, #10
 800061c:	f001 faa2 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000620:	f104 0bd4 	add.w	fp, r4, #212	; 0xd4
 8000624:	4659      	mov	r1, fp
 8000626:	2000      	movs	r0, #0
 8000628:	f001 fa9c 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 800062c:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
 8000630:	200f      	movs	r0, #15
 8000632:	f001 fa97 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000636:	4651      	mov	r1, sl
 8000638:	2000      	movs	r0, #0
 800063a:	f001 fa93 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 800063e:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
 8000642:	200f      	movs	r0, #15
 8000644:	f001 fa8e 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000648:	4649      	mov	r1, r9
 800064a:	2000      	movs	r0, #0
 800064c:	f001 fa8a 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000650:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 8000654:	200a      	movs	r0, #10
 8000656:	f001 fa85 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800065a:	4641      	mov	r1, r8
 800065c:	2000      	movs	r0, #0
 800065e:	f001 fa81 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000662:	f504 7182 	add.w	r1, r4, #260	; 0x104
 8000666:	200f      	movs	r0, #15
 8000668:	f001 fa7c 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800066c:	4639      	mov	r1, r7
 800066e:	2000      	movs	r0, #0
 8000670:	f001 fa78 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000674:	f504 718a 	add.w	r1, r4, #276	; 0x114
 8000678:	200f      	movs	r0, #15
 800067a:	f001 fa73 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 800067e:	f504 7192 	add.w	r1, r4, #292	; 0x124
 8000682:	2000      	movs	r0, #0
 8000684:	f001 fa6e 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000688:	f504 7194 	add.w	r1, r4, #296	; 0x128
 800068c:	200a      	movs	r0, #10
 800068e:	f001 fa69 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000692:	f504 719a 	add.w	r1, r4, #308	; 0x134
 8000696:	2000      	movs	r0, #0
 8000698:	f001 fa64 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 800069c:	f504 719c 	add.w	r1, r4, #312	; 0x138
 80006a0:	200a      	movs	r0, #10
 80006a2:	f001 fa5f 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80006a6:	4629      	mov	r1, r5
 80006a8:	2000      	movs	r0, #0
 80006aa:	f001 fa5b 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 80006ae:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 80006b2:	200a      	movs	r0, #10
 80006b4:	f001 fa56 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80006b8:	4659      	mov	r1, fp
 80006ba:	2000      	movs	r0, #0
 80006bc:	f001 fa52 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 80006c0:	f504 71a8 	add.w	r1, r4, #336	; 0x150
 80006c4:	200f      	movs	r0, #15
 80006c6:	f001 fa4d 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80006ca:	4651      	mov	r1, sl
 80006cc:	2000      	movs	r0, #0
 80006ce:	f001 fa49 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 80006d2:	f504 71b0 	add.w	r1, r4, #352	; 0x160
 80006d6:	200f      	movs	r0, #15
 80006d8:	f001 fa44 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80006dc:	4649      	mov	r1, r9
 80006de:	2000      	movs	r0, #0
 80006e0:	f001 fa40 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 80006e4:	f504 71b8 	add.w	r1, r4, #368	; 0x170
 80006e8:	200a      	movs	r0, #10
 80006ea:	f001 fa3b 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80006ee:	4641      	mov	r1, r8
 80006f0:	2000      	movs	r0, #0
 80006f2:	f001 fa37 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 80006f6:	f504 71be 	add.w	r1, r4, #380	; 0x17c
 80006fa:	200f      	movs	r0, #15
 80006fc:	f001 fa32 	bl	8001b64 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000700:	4639      	mov	r1, r7
 8000702:	2000      	movs	r0, #0
 8000704:	f001 fa2e 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000708:	f504 71c6 	add.w	r1, r4, #396	; 0x18c
 800070c:	200f      	movs	r0, #15
 800070e:	f001 fa29 	bl	8001b64 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000712:	4631      	mov	r1, r6
 8000714:	2000      	movs	r0, #0
 8000716:	f001 fa25 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 800071a:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
 800071e:	2000      	movs	r0, #0
 8000720:	f001 fa20 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000724:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
 8000728:	2000      	movs	r0, #0
 800072a:	f001 fa1b 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 800072e:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
 8000732:	2000      	movs	r0, #0
 8000734:	f001 fa16 	bl	8001b64 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000738:	4621      	mov	r1, r4
 800073a:	2000      	movs	r0, #0
 800073c:	f001 fa12 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000740:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
 8000744:	2003      	movs	r0, #3
 8000746:	f001 fa0d 	bl	8001b64 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800074a:	4621      	mov	r1, r4
 800074c:	2000      	movs	r0, #0
 800074e:	f001 fa09 	bl	8001b64 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000752:	4621      	mov	r1, r4
 8000754:	2000      	movs	r0, #0
 8000756:	f001 fa05 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 800075a:	f504 71d6 	add.w	r1, r4, #428	; 0x1ac
 800075e:	2010      	movs	r0, #16
 8000760:	f001 fa00 	bl	8001b64 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000764:	4621      	mov	r1, r4
 8000766:	2000      	movs	r0, #0
 8000768:	f001 f9fc 	bl	8001b64 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 800076c:	f504 71e0 	add.w	r1, r4, #448	; 0x1c0
 8000770:	2010      	movs	r0, #16
 8000772:	f001 f9f7 	bl	8001b64 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000776:	f504 71ea 	add.w	r1, r4, #468	; 0x1d4
 800077a:	2000      	movs	r0, #0
 800077c:	f001 f9f2 	bl	8001b64 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000780:	2078      	movs	r0, #120	; 0x78
 8000782:	f000 ff87 	bl	8001694 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000786:	9b00      	ldr	r3, [sp, #0]
 8000788:	b383      	cbz	r3, 80007ec <OTM8009A_Init+0x3d4>
 800078a:	2b02      	cmp	r3, #2
 800078c:	d104      	bne.n	8000798 <OTM8009A_Init+0x380>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 800078e:	f504 71ec 	add.w	r1, r4, #472	; 0x1d8
 8000792:	2000      	movs	r0, #0
 8000794:	f001 f9e6 	bl	8001b64 <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000798:	9b01      	ldr	r3, [sp, #4]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d030      	beq.n	8000800 <OTM8009A_Init+0x3e8>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 800079e:	4c16      	ldr	r4, [pc, #88]	; (80007f8 <OTM8009A_Init+0x3e0>)
 80007a0:	f504 71fa 	add.w	r1, r4, #500	; 0x1f4
 80007a4:	2000      	movs	r0, #0
 80007a6:	f001 f9dd 	bl	8001b64 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 80007aa:	f504 71fc 	add.w	r1, r4, #504	; 0x1f8
 80007ae:	2000      	movs	r0, #0
 80007b0:	f001 f9d8 	bl	8001b64 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 80007b4:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
 80007b8:	2000      	movs	r0, #0
 80007ba:	f001 f9d3 	bl	8001b64 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 80007be:	f504 7100 	add.w	r1, r4, #512	; 0x200
 80007c2:	2000      	movs	r0, #0
 80007c4:	f001 f9ce 	bl	8001b64 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 80007c8:	f504 7101 	add.w	r1, r4, #516	; 0x204
 80007cc:	2000      	movs	r0, #0
 80007ce:	f001 f9c9 	bl	8001b64 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80007d2:	4621      	mov	r1, r4
 80007d4:	2000      	movs	r0, #0
 80007d6:	f001 f9c5 	bl	8001b64 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 80007da:	f504 7102 	add.w	r1, r4, #520	; 0x208
 80007de:	2000      	movs	r0, #0
 80007e0:	f001 f9c0 	bl	8001b64 <DSI_IO_WriteCmd>

  return 0;
}
 80007e4:	2000      	movs	r0, #0
 80007e6:	b003      	add	sp, #12
 80007e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 80007ec:	4903      	ldr	r1, [pc, #12]	; (80007fc <OTM8009A_Init+0x3e4>)
 80007ee:	2000      	movs	r0, #0
 80007f0:	f001 f9b8 	bl	8001b64 <DSI_IO_WriteCmd>
    break;
 80007f4:	e7d0      	b.n	8000798 <OTM8009A_Init+0x380>
 80007f6:	bf00      	nop
 80007f8:	0800ca48 	.word	0x0800ca48
 80007fc:	0800cc24 	.word	0x0800cc24
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000800:	4c08      	ldr	r4, [pc, #32]	; (8000824 <OTM8009A_Init+0x40c>)
 8000802:	f504 71f0 	add.w	r1, r4, #480	; 0x1e0
 8000806:	2000      	movs	r0, #0
 8000808:	f001 f9ac 	bl	8001b64 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 800080c:	f504 71f2 	add.w	r1, r4, #484	; 0x1e4
 8000810:	2004      	movs	r0, #4
 8000812:	f001 f9a7 	bl	8001b64 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000816:	f504 71f6 	add.w	r1, r4, #492	; 0x1ec
 800081a:	2004      	movs	r0, #4
 800081c:	f001 f9a2 	bl	8001b64 <DSI_IO_WriteCmd>
 8000820:	e7bd      	b.n	800079e <OTM8009A_Init+0x386>
 8000822:	bf00      	nop
 8000824:	0800ca48 	.word	0x0800ca48

08000828 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8000828:	b508      	push	{r3, lr}
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800082a:	f000 feb9 	bl	80015a0 <AUDIO_IO_Write>
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
}
 800082e:	2000      	movs	r0, #0
 8000830:	bd08      	pop	{r3, pc}
	...

08000834 <wm8994_SetMute>:
{
 8000834:	b538      	push	{r3, r4, r5, lr}
 8000836:	4603      	mov	r3, r0
  if (outputEnabled != 0)
 8000838:	4a13      	ldr	r2, [pc, #76]	; (8000888 <wm8994_SetMute+0x54>)
 800083a:	6810      	ldr	r0, [r2, #0]
 800083c:	b180      	cbz	r0, 8000860 <wm8994_SetMute+0x2c>
    if(Cmd == AUDIO_MUTE_ON)
 800083e:	2901      	cmp	r1, #1
 8000840:	d00f      	beq.n	8000862 <wm8994_SetMute+0x2e>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8000842:	b2dd      	uxtb	r5, r3
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800084a:	4628      	mov	r0, r5
 800084c:	f7ff ffec 	bl	8000828 <CODEC_IO_Write>
 8000850:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8000852:	2200      	movs	r2, #0
 8000854:	f240 4122 	movw	r1, #1058	; 0x422
 8000858:	4628      	mov	r0, r5
 800085a:	f7ff ffe5 	bl	8000828 <CODEC_IO_Write>
 800085e:	4420      	add	r0, r4
}
 8000860:	bd38      	pop	{r3, r4, r5, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8000862:	b2dd      	uxtb	r5, r3
 8000864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000868:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800086c:	4628      	mov	r0, r5
 800086e:	f7ff ffdb 	bl	8000828 <CODEC_IO_Write>
 8000872:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8000874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000878:	f240 4122 	movw	r1, #1058	; 0x422
 800087c:	4628      	mov	r0, r5
 800087e:	f7ff ffd3 	bl	8000828 <CODEC_IO_Write>
 8000882:	4420      	add	r0, r4
 8000884:	e7ec      	b.n	8000860 <wm8994_SetMute+0x2c>
 8000886:	bf00      	nop
 8000888:	2000013c 	.word	0x2000013c

0800088c <wm8994_Play>:
{
 800088c:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800088e:	2100      	movs	r1, #0
 8000890:	f7ff ffd0 	bl	8000834 <wm8994_SetMute>
}
 8000894:	bd08      	pop	{r3, pc}

08000896 <wm8994_Resume>:
{
 8000896:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000898:	2100      	movs	r1, #0
 800089a:	f7ff ffcb 	bl	8000834 <wm8994_SetMute>
}
 800089e:	bd08      	pop	{r3, pc}

080008a0 <wm8994_Pause>:
{  
 80008a0:	b538      	push	{r3, r4, r5, lr}
 80008a2:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80008a4:	2101      	movs	r1, #1
 80008a6:	f7ff ffc5 	bl	8000834 <wm8994_SetMute>
 80008aa:	4604      	mov	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2102      	movs	r1, #2
 80008b0:	b2e8      	uxtb	r0, r5
 80008b2:	f7ff ffb9 	bl	8000828 <CODEC_IO_Write>
}
 80008b6:	4420      	add	r0, r4
 80008b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080008bc <wm8994_Stop>:
{
 80008bc:	b570      	push	{r4, r5, r6, lr}
  if (outputEnabled != 0)
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <wm8994_Stop+0x78>)
 80008c0:	681c      	ldr	r4, [r3, #0]
 80008c2:	b90c      	cbnz	r4, 80008c8 <wm8994_Stop+0xc>
}
 80008c4:	4620      	mov	r0, r4
 80008c6:	bd70      	pop	{r4, r5, r6, pc}
 80008c8:	4605      	mov	r5, r0
 80008ca:	460e      	mov	r6, r1
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80008cc:	2101      	movs	r1, #1
 80008ce:	f7ff ffb1 	bl	8000834 <wm8994_SetMute>
 80008d2:	4604      	mov	r4, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 80008d4:	2e02      	cmp	r6, #2
 80008d6:	d0f5      	beq.n	80008c4 <wm8994_Stop+0x8>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80008d8:	b2ed      	uxtb	r5, r5
 80008da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008de:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80008e2:	4628      	mov	r0, r5
 80008e4:	f7ff ffa0 	bl	8000828 <CODEC_IO_Write>
 80008e8:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80008ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ee:	f240 4122 	movw	r1, #1058	; 0x422
 80008f2:	4628      	mov	r0, r5
 80008f4:	f7ff ff98 	bl	8000828 <CODEC_IO_Write>
 80008f8:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80008fa:	2200      	movs	r2, #0
 80008fc:	212d      	movs	r1, #45	; 0x2d
 80008fe:	4628      	mov	r0, r5
 8000900:	f7ff ff92 	bl	8000828 <CODEC_IO_Write>
 8000904:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8000906:	2200      	movs	r2, #0
 8000908:	212e      	movs	r1, #46	; 0x2e
 800090a:	4628      	mov	r0, r5
 800090c:	f7ff ff8c 	bl	8000828 <CODEC_IO_Write>
 8000910:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8000912:	2200      	movs	r2, #0
 8000914:	2105      	movs	r1, #5
 8000916:	4628      	mov	r0, r5
 8000918:	f7ff ff86 	bl	8000828 <CODEC_IO_Write>
 800091c:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800091e:	2200      	movs	r2, #0
 8000920:	4611      	mov	r1, r2
 8000922:	4628      	mov	r0, r5
 8000924:	f7ff ff80 	bl	8000828 <CODEC_IO_Write>
 8000928:	4404      	add	r4, r0
      outputEnabled = 0;
 800092a:	4b02      	ldr	r3, [pc, #8]	; (8000934 <wm8994_Stop+0x78>)
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
  return counter;
 8000930:	e7c8      	b.n	80008c4 <wm8994_Stop+0x8>
 8000932:	bf00      	nop
 8000934:	2000013c 	.word	0x2000013c

08000938 <wm8994_SetVolume>:
{
 8000938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800093c:	4606      	mov	r6, r0
 800093e:	460c      	mov	r4, r1
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000940:	2964      	cmp	r1, #100	; 0x64
 8000942:	d809      	bhi.n	8000958 <wm8994_SetVolume+0x20>
 8000944:	ebc1 1381 	rsb	r3, r1, r1, lsl #6
 8000948:	4a46      	ldr	r2, [pc, #280]	; (8000a64 <wm8994_SetVolume+0x12c>)
 800094a:	fb82 1203 	smull	r1, r2, r2, r3
 800094e:	17df      	asrs	r7, r3, #31
 8000950:	ebc7 1762 	rsb	r7, r7, r2, asr #5
 8000954:	b2ff      	uxtb	r7, r7
 8000956:	e000      	b.n	800095a <wm8994_SetVolume+0x22>
 8000958:	2764      	movs	r7, #100	; 0x64
  if (outputEnabled != 0)
 800095a:	4b43      	ldr	r3, [pc, #268]	; (8000a68 <wm8994_SetVolume+0x130>)
 800095c:	681d      	ldr	r5, [r3, #0]
 800095e:	b13d      	cbz	r5, 8000970 <wm8994_SetVolume+0x38>
    if(convertedvol > 0x3E)
 8000960:	2f3e      	cmp	r7, #62	; 0x3e
 8000962:	d816      	bhi.n	8000992 <wm8994_SetVolume+0x5a>
    else if (Volume == 0)
 8000964:	bbc4      	cbnz	r4, 80009d8 <wm8994_SetVolume+0xa0>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000966:	2101      	movs	r1, #1
 8000968:	4630      	mov	r0, r6
 800096a:	f7ff ff63 	bl	8000834 <wm8994_SetMute>
 800096e:	4605      	mov	r5, r0
  if (inputEnabled != 0)
 8000970:	4b3d      	ldr	r3, [pc, #244]	; (8000a68 <wm8994_SetVolume+0x130>)
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d071      	beq.n	8000a5c <wm8994_SetVolume+0x124>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8000978:	2c63      	cmp	r4, #99	; 0x63
 800097a:	d84f      	bhi.n	8000a1c <wm8994_SetVolume+0xe4>
 800097c:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8000980:	0124      	lsls	r4, r4, #4
 8000982:	4b38      	ldr	r3, [pc, #224]	; (8000a64 <wm8994_SetVolume+0x12c>)
 8000984:	fb83 2304 	smull	r2, r3, r3, r4
 8000988:	17e4      	asrs	r4, r4, #31
 800098a:	ebc4 1463 	rsb	r4, r4, r3, asr #5
 800098e:	b2e4      	uxtb	r4, r4
 8000990:	e045      	b.n	8000a1e <wm8994_SetVolume+0xe6>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000992:	2100      	movs	r1, #0
 8000994:	4630      	mov	r0, r6
 8000996:	f7ff ff4d 	bl	8000834 <wm8994_SetMute>
 800099a:	4605      	mov	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 800099c:	b2f7      	uxtb	r7, r6
 800099e:	f240 127f 	movw	r2, #383	; 0x17f
 80009a2:	211c      	movs	r1, #28
 80009a4:	4638      	mov	r0, r7
 80009a6:	f7ff ff3f 	bl	8000828 <CODEC_IO_Write>
 80009aa:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80009ac:	f240 127f 	movw	r2, #383	; 0x17f
 80009b0:	211d      	movs	r1, #29
 80009b2:	4638      	mov	r0, r7
 80009b4:	f7ff ff38 	bl	8000828 <CODEC_IO_Write>
 80009b8:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80009ba:	f240 127f 	movw	r2, #383	; 0x17f
 80009be:	2126      	movs	r1, #38	; 0x26
 80009c0:	4638      	mov	r0, r7
 80009c2:	f7ff ff31 	bl	8000828 <CODEC_IO_Write>
 80009c6:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80009c8:	f240 127f 	movw	r2, #383	; 0x17f
 80009cc:	2127      	movs	r1, #39	; 0x27
 80009ce:	4638      	mov	r0, r7
 80009d0:	f7ff ff2a 	bl	8000828 <CODEC_IO_Write>
 80009d4:	4405      	add	r5, r0
 80009d6:	e7cb      	b.n	8000970 <wm8994_SetVolume+0x38>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80009d8:	2100      	movs	r1, #0
 80009da:	4630      	mov	r0, r6
 80009dc:	f7ff ff2a 	bl	8000834 <wm8994_SetMute>
 80009e0:	4605      	mov	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80009e2:	fa5f f886 	uxtb.w	r8, r6
 80009e6:	f447 77a0 	orr.w	r7, r7, #320	; 0x140
 80009ea:	463a      	mov	r2, r7
 80009ec:	211c      	movs	r1, #28
 80009ee:	4640      	mov	r0, r8
 80009f0:	f7ff ff1a 	bl	8000828 <CODEC_IO_Write>
 80009f4:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80009f6:	463a      	mov	r2, r7
 80009f8:	211d      	movs	r1, #29
 80009fa:	4640      	mov	r0, r8
 80009fc:	f7ff ff14 	bl	8000828 <CODEC_IO_Write>
 8000a00:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8000a02:	463a      	mov	r2, r7
 8000a04:	2126      	movs	r1, #38	; 0x26
 8000a06:	4640      	mov	r0, r8
 8000a08:	f7ff ff0e 	bl	8000828 <CODEC_IO_Write>
 8000a0c:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8000a0e:	463a      	mov	r2, r7
 8000a10:	2127      	movs	r1, #39	; 0x27
 8000a12:	4640      	mov	r0, r8
 8000a14:	f7ff ff08 	bl	8000828 <CODEC_IO_Write>
 8000a18:	4405      	add	r5, r0
 8000a1a:	e7a9      	b.n	8000970 <wm8994_SetVolume+0x38>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8000a1c:	24ef      	movs	r4, #239	; 0xef
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8000a1e:	b2f6      	uxtb	r6, r6
 8000a20:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8000a24:	4622      	mov	r2, r4
 8000a26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2a:	4630      	mov	r0, r6
 8000a2c:	f7ff fefc 	bl	8000828 <CODEC_IO_Write>
 8000a30:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8000a32:	4622      	mov	r2, r4
 8000a34:	f240 4101 	movw	r1, #1025	; 0x401
 8000a38:	4630      	mov	r0, r6
 8000a3a:	f7ff fef5 	bl	8000828 <CODEC_IO_Write>
 8000a3e:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8000a40:	4622      	mov	r2, r4
 8000a42:	f240 4104 	movw	r1, #1028	; 0x404
 8000a46:	4630      	mov	r0, r6
 8000a48:	f7ff feee 	bl	8000828 <CODEC_IO_Write>
 8000a4c:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8000a4e:	4622      	mov	r2, r4
 8000a50:	f240 4105 	movw	r1, #1029	; 0x405
 8000a54:	4630      	mov	r0, r6
 8000a56:	f7ff fee7 	bl	8000828 <CODEC_IO_Write>
 8000a5a:	4405      	add	r5, r0
}
 8000a5c:	4628      	mov	r0, r5
 8000a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a62:	bf00      	nop
 8000a64:	51eb851f 	.word	0x51eb851f
 8000a68:	2000013c 	.word	0x2000013c

08000a6c <wm8994_Init>:
{
 8000a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a70:	4680      	mov	r8, r0
 8000a72:	4691      	mov	r9, r2
 8000a74:	469a      	mov	sl, r3
  uint16_t output_device = OutputInputDevice & 0xFF;
 8000a76:	b2cf      	uxtb	r7, r1
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8000a78:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
  AUDIO_IO_Init();
 8000a7c:	f000 fd86 	bl	800158c <AUDIO_IO_Init>
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8000a80:	fa5f f488 	uxtb.w	r4, r8
 8000a84:	2203      	movs	r2, #3
 8000a86:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	f7ff fecc 	bl	8000828 <CODEC_IO_Write>
 8000a90:	4606      	mov	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f640 0117 	movw	r1, #2071	; 0x817
 8000a98:	4620      	mov	r0, r4
 8000a9a:	f7ff fec5 	bl	8000828 <CODEC_IO_Write>
 8000a9e:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	f7ff febe 	bl	8000828 <CODEC_IO_Write>
 8000aac:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8000aae:	226c      	movs	r2, #108	; 0x6c
 8000ab0:	2139      	movs	r1, #57	; 0x39
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	f7ff feb8 	bl	8000828 <CODEC_IO_Write>
 8000ab8:	4406      	add	r6, r0
  if (input_device > 0)
 8000aba:	b3c5      	cbz	r5, 8000b2e <wm8994_Init+0xc2>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8000abc:	2213      	movs	r2, #19
 8000abe:	2101      	movs	r1, #1
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	f7ff feb1 	bl	8000828 <CODEC_IO_Write>
 8000ac6:	4406      	add	r6, r0
  AUDIO_IO_Delay(50);
 8000ac8:	2032      	movs	r0, #50	; 0x32
 8000aca:	f000 fd9d 	bl	8001608 <AUDIO_IO_Delay>
  if (output_device > 0)
 8000ace:	2f00      	cmp	r7, #0
 8000ad0:	f000 80c7 	beq.w	8000c62 <wm8994_Init+0x1f6>
    outputEnabled = 1;
 8000ad4:	4be6      	ldr	r3, [pc, #920]	; (8000e70 <wm8994_Init+0x404>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8000ada:	2f02      	cmp	r7, #2
 8000adc:	d052      	beq.n	8000b84 <wm8994_Init+0x118>
 8000ade:	2f03      	cmp	r7, #3
 8000ae0:	d074      	beq.n	8000bcc <wm8994_Init+0x160>
 8000ae2:	4297      	cmp	r7, r2
 8000ae4:	d02a      	beq.n	8000b3c <wm8994_Init+0xd0>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000ae6:	f240 3203 	movw	r2, #771	; 0x303
 8000aea:	2105      	movs	r1, #5
 8000aec:	4620      	mov	r0, r4
 8000aee:	f7ff fe9b 	bl	8000828 <CODEC_IO_Write>
 8000af2:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f240 6101 	movw	r1, #1537	; 0x601
 8000afa:	4620      	mov	r0, r4
 8000afc:	f7ff fe94 	bl	8000828 <CODEC_IO_Write>
 8000b00:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000b02:	2201      	movs	r2, #1
 8000b04:	f240 6102 	movw	r1, #1538	; 0x602
 8000b08:	4620      	mov	r0, r4
 8000b0a:	f7ff fe8d 	bl	8000828 <CODEC_IO_Write>
 8000b0e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f240 6104 	movw	r1, #1540	; 0x604
 8000b16:	4620      	mov	r0, r4
 8000b18:	f7ff fe86 	bl	8000828 <CODEC_IO_Write>
 8000b1c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f240 6105 	movw	r1, #1541	; 0x605
 8000b24:	4620      	mov	r0, r4
 8000b26:	f7ff fe7f 	bl	8000828 <CODEC_IO_Write>
 8000b2a:	4406      	add	r6, r0
      break;
 8000b2c:	e09c      	b.n	8000c68 <wm8994_Init+0x1fc>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8000b2e:	2203      	movs	r2, #3
 8000b30:	2101      	movs	r1, #1
 8000b32:	4620      	mov	r0, r4
 8000b34:	f7ff fe78 	bl	8000828 <CODEC_IO_Write>
 8000b38:	4406      	add	r6, r0
 8000b3a:	e7c5      	b.n	8000ac8 <wm8994_Init+0x5c>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8000b3c:	f640 420c 	movw	r2, #3084	; 0xc0c
 8000b40:	2105      	movs	r1, #5
 8000b42:	4620      	mov	r0, r4
 8000b44:	f7ff fe70 	bl	8000828 <CODEC_IO_Write>
 8000b48:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f240 6101 	movw	r1, #1537	; 0x601
 8000b50:	4620      	mov	r0, r4
 8000b52:	f7ff fe69 	bl	8000828 <CODEC_IO_Write>
 8000b56:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f240 6102 	movw	r1, #1538	; 0x602
 8000b5e:	4620      	mov	r0, r4
 8000b60:	f7ff fe62 	bl	8000828 <CODEC_IO_Write>
 8000b64:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000b66:	2202      	movs	r2, #2
 8000b68:	f240 6104 	movw	r1, #1540	; 0x604
 8000b6c:	4620      	mov	r0, r4
 8000b6e:	f7ff fe5b 	bl	8000828 <CODEC_IO_Write>
 8000b72:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000b74:	2202      	movs	r2, #2
 8000b76:	f240 6105 	movw	r1, #1541	; 0x605
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	f7ff fe54 	bl	8000828 <CODEC_IO_Write>
 8000b80:	4406      	add	r6, r0
      break;
 8000b82:	e071      	b.n	8000c68 <wm8994_Init+0x1fc>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000b84:	f240 3203 	movw	r2, #771	; 0x303
 8000b88:	2105      	movs	r1, #5
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	f7ff fe4c 	bl	8000828 <CODEC_IO_Write>
 8000b90:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000b92:	2201      	movs	r2, #1
 8000b94:	f240 6101 	movw	r1, #1537	; 0x601
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f7ff fe45 	bl	8000828 <CODEC_IO_Write>
 8000b9e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f240 6102 	movw	r1, #1538	; 0x602
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	f7ff fe3e 	bl	8000828 <CODEC_IO_Write>
 8000bac:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f240 6104 	movw	r1, #1540	; 0x604
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f7ff fe37 	bl	8000828 <CODEC_IO_Write>
 8000bba:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f240 6105 	movw	r1, #1541	; 0x605
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	f7ff fe30 	bl	8000828 <CODEC_IO_Write>
 8000bc8:	4406      	add	r6, r0
      break;
 8000bca:	e04d      	b.n	8000c68 <wm8994_Init+0x1fc>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000bcc:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000bd0:	d023      	beq.n	8000c1a <wm8994_Init+0x1ae>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8000bd2:	f640 720f 	movw	r2, #3855	; 0xf0f
 8000bd6:	2105      	movs	r1, #5
 8000bd8:	4620      	mov	r0, r4
 8000bda:	f7ff fe25 	bl	8000828 <CODEC_IO_Write>
 8000bde:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f240 6101 	movw	r1, #1537	; 0x601
 8000be6:	4620      	mov	r0, r4
 8000be8:	f7ff fe1e 	bl	8000828 <CODEC_IO_Write>
 8000bec:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f240 6102 	movw	r1, #1538	; 0x602
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	f7ff fe17 	bl	8000828 <CODEC_IO_Write>
 8000bfa:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	f240 6104 	movw	r1, #1540	; 0x604
 8000c02:	4620      	mov	r0, r4
 8000c04:	f7ff fe10 	bl	8000828 <CODEC_IO_Write>
 8000c08:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	f240 6105 	movw	r1, #1541	; 0x605
 8000c10:	4620      	mov	r0, r4
 8000c12:	f7ff fe09 	bl	8000828 <CODEC_IO_Write>
 8000c16:	4406      	add	r6, r0
 8000c18:	e026      	b.n	8000c68 <wm8994_Init+0x1fc>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8000c1a:	f640 720f 	movw	r2, #3855	; 0xf0f
 8000c1e:	2105      	movs	r1, #5
 8000c20:	4620      	mov	r0, r4
 8000c22:	f7ff fe01 	bl	8000828 <CODEC_IO_Write>
 8000c26:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8000c28:	2203      	movs	r2, #3
 8000c2a:	f240 6101 	movw	r1, #1537	; 0x601
 8000c2e:	4620      	mov	r0, r4
 8000c30:	f7ff fdfa 	bl	8000828 <CODEC_IO_Write>
 8000c34:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8000c36:	2203      	movs	r2, #3
 8000c38:	f240 6102 	movw	r1, #1538	; 0x602
 8000c3c:	4620      	mov	r0, r4
 8000c3e:	f7ff fdf3 	bl	8000828 <CODEC_IO_Write>
 8000c42:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8000c44:	2203      	movs	r2, #3
 8000c46:	f240 6104 	movw	r1, #1540	; 0x604
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	f7ff fdec 	bl	8000828 <CODEC_IO_Write>
 8000c50:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8000c52:	2203      	movs	r2, #3
 8000c54:	f240 6105 	movw	r1, #1541	; 0x605
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f7ff fde5 	bl	8000828 <CODEC_IO_Write>
 8000c5e:	4406      	add	r6, r0
 8000c60:	e002      	b.n	8000c68 <wm8994_Init+0x1fc>
    outputEnabled = 0;
 8000c62:	4b83      	ldr	r3, [pc, #524]	; (8000e70 <wm8994_Init+0x404>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
  if (input_device > 0)
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	f000 80e8 	beq.w	8000e3e <wm8994_Init+0x3d2>
    inputEnabled = 1;
 8000c6e:	4b80      	ldr	r3, [pc, #512]	; (8000e70 <wm8994_Init+0x404>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	605a      	str	r2, [r3, #4]
    switch (input_device)
 8000c74:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8000c78:	d077      	beq.n	8000d6a <wm8994_Init+0x2fe>
 8000c7a:	d832      	bhi.n	8000ce2 <wm8994_Init+0x276>
 8000c7c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000c80:	f000 80b0 	beq.w	8000de4 <wm8994_Init+0x378>
 8000c84:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8000c88:	f040 80d7 	bne.w	8000e3a <wm8994_Init+0x3ce>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8000c8c:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8000c90:	2104      	movs	r1, #4
 8000c92:	4620      	mov	r0, r4
 8000c94:	f7ff fdc8 	bl	8000828 <CODEC_IO_Write>
 8000c98:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8000c9a:	22db      	movs	r2, #219	; 0xdb
 8000c9c:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	f7ff fdc1 	bl	8000828 <CODEC_IO_Write>
 8000ca6:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8000ca8:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000cac:	2102      	movs	r1, #2
 8000cae:	4620      	mov	r0, r4
 8000cb0:	f7ff fdba 	bl	8000828 <CODEC_IO_Write>
 8000cb4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000cbc:	4620      	mov	r0, r4
 8000cbe:	f7ff fdb3 	bl	8000828 <CODEC_IO_Write>
 8000cc2:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	f240 6109 	movw	r1, #1545	; 0x609
 8000cca:	4620      	mov	r0, r4
 8000ccc:	f7ff fdac 	bl	8000828 <CODEC_IO_Write>
 8000cd0:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8000cd2:	220e      	movs	r2, #14
 8000cd4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f7ff fda5 	bl	8000828 <CODEC_IO_Write>
 8000cde:	4406      	add	r6, r0
      break;
 8000ce0:	e0b0      	b.n	8000e44 <wm8994_Init+0x3d8>
    switch (input_device)
 8000ce2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000ce6:	f040 80a8 	bne.w	8000e3a <wm8994_Init+0x3ce>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8000cea:	f640 723c 	movw	r2, #3900	; 0xf3c
 8000cee:	2104      	movs	r1, #4
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	f7ff fd99 	bl	8000828 <CODEC_IO_Write>
 8000cf6:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8000cf8:	22db      	movs	r2, #219	; 0xdb
 8000cfa:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000cfe:	4620      	mov	r0, r4
 8000d00:	f7ff fd92 	bl	8000828 <CODEC_IO_Write>
 8000d04:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8000d06:	22db      	movs	r2, #219	; 0xdb
 8000d08:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	f7ff fd8b 	bl	8000828 <CODEC_IO_Write>
 8000d12:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8000d14:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8000d18:	2102      	movs	r1, #2
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	f7ff fd84 	bl	8000828 <CODEC_IO_Write>
 8000d20:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8000d22:	2202      	movs	r2, #2
 8000d24:	f240 6106 	movw	r1, #1542	; 0x606
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f7ff fd7d 	bl	8000828 <CODEC_IO_Write>
 8000d2e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8000d30:	2202      	movs	r2, #2
 8000d32:	f240 6107 	movw	r1, #1543	; 0x607
 8000d36:	4620      	mov	r0, r4
 8000d38:	f7ff fd76 	bl	8000828 <CODEC_IO_Write>
 8000d3c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8000d3e:	2202      	movs	r2, #2
 8000d40:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000d44:	4620      	mov	r0, r4
 8000d46:	f7ff fd6f 	bl	8000828 <CODEC_IO_Write>
 8000d4a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	f240 6109 	movw	r1, #1545	; 0x609
 8000d52:	4620      	mov	r0, r4
 8000d54:	f7ff fd68 	bl	8000828 <CODEC_IO_Write>
 8000d58:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8000d5a:	220d      	movs	r2, #13
 8000d5c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000d60:	4620      	mov	r0, r4
 8000d62:	f7ff fd61 	bl	8000828 <CODEC_IO_Write>
 8000d66:	4406      	add	r6, r0
      break;    
 8000d68:	e06c      	b.n	8000e44 <wm8994_Init+0x3d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8000d6a:	2211      	movs	r2, #17
 8000d6c:	2128      	movs	r1, #40	; 0x28
 8000d6e:	4620      	mov	r0, r4
 8000d70:	f7ff fd5a 	bl	8000828 <CODEC_IO_Write>
 8000d74:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 8000d76:	2220      	movs	r2, #32
 8000d78:	2129      	movs	r1, #41	; 0x29
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f7ff fd54 	bl	8000828 <CODEC_IO_Write>
 8000d80:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8000d82:	2220      	movs	r2, #32
 8000d84:	212a      	movs	r1, #42	; 0x2a
 8000d86:	4620      	mov	r0, r4
 8000d88:	f7ff fd4e 	bl	8000828 <CODEC_IO_Write>
 8000d8c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8000d8e:	f240 3203 	movw	r2, #771	; 0x303
 8000d92:	2104      	movs	r1, #4
 8000d94:	4620      	mov	r0, r4
 8000d96:	f7ff fd47 	bl	8000828 <CODEC_IO_Write>
 8000d9a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8000d9c:	22db      	movs	r2, #219	; 0xdb
 8000d9e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000da2:	4620      	mov	r0, r4
 8000da4:	f7ff fd40 	bl	8000828 <CODEC_IO_Write>
 8000da8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8000daa:	f246 3250 	movw	r2, #25424	; 0x6350
 8000dae:	2102      	movs	r1, #2
 8000db0:	4620      	mov	r0, r4
 8000db2:	f7ff fd39 	bl	8000828 <CODEC_IO_Write>
 8000db6:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8000db8:	2202      	movs	r2, #2
 8000dba:	f240 6106 	movw	r1, #1542	; 0x606
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	f7ff fd32 	bl	8000828 <CODEC_IO_Write>
 8000dc4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	f240 6107 	movw	r1, #1543	; 0x607
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f7ff fd2b 	bl	8000828 <CODEC_IO_Write>
 8000dd2:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8000dd4:	220d      	movs	r2, #13
 8000dd6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000dda:	4620      	mov	r0, r4
 8000ddc:	f7ff fd24 	bl	8000828 <CODEC_IO_Write>
 8000de0:	4406      	add	r6, r0
      break;
 8000de2:	e02f      	b.n	8000e44 <wm8994_Init+0x3d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8000de4:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8000de8:	2104      	movs	r1, #4
 8000dea:	4620      	mov	r0, r4
 8000dec:	f7ff fd1c 	bl	8000828 <CODEC_IO_Write>
 8000df0:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8000df2:	22db      	movs	r2, #219	; 0xdb
 8000df4:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000df8:	4620      	mov	r0, r4
 8000dfa:	f7ff fd15 	bl	8000828 <CODEC_IO_Write>
 8000dfe:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8000e00:	f246 3250 	movw	r2, #25424	; 0x6350
 8000e04:	2102      	movs	r1, #2
 8000e06:	4620      	mov	r0, r4
 8000e08:	f7ff fd0e 	bl	8000828 <CODEC_IO_Write>
 8000e0c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8000e0e:	2202      	movs	r2, #2
 8000e10:	f240 6106 	movw	r1, #1542	; 0x606
 8000e14:	4620      	mov	r0, r4
 8000e16:	f7ff fd07 	bl	8000828 <CODEC_IO_Write>
 8000e1a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	f240 6107 	movw	r1, #1543	; 0x607
 8000e22:	4620      	mov	r0, r4
 8000e24:	f7ff fd00 	bl	8000828 <CODEC_IO_Write>
 8000e28:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8000e2a:	220d      	movs	r2, #13
 8000e2c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000e30:	4620      	mov	r0, r4
 8000e32:	f7ff fcf9 	bl	8000828 <CODEC_IO_Write>
 8000e36:	4406      	add	r6, r0
      break; 
 8000e38:	e004      	b.n	8000e44 <wm8994_Init+0x3d8>
      counter++;
 8000e3a:	3601      	adds	r6, #1
      break;
 8000e3c:	e002      	b.n	8000e44 <wm8994_Init+0x3d8>
    inputEnabled = 0;
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <wm8994_Init+0x404>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	605a      	str	r2, [r3, #4]
  switch (AudioFreq)
 8000e44:	f5ba 4ffa 	cmp.w	sl, #32000	; 0x7d00
 8000e48:	f000 8089 	beq.w	8000f5e <wm8994_Init+0x4f2>
 8000e4c:	d821      	bhi.n	8000e92 <wm8994_Init+0x426>
 8000e4e:	f5ba 5f7a 	cmp.w	sl, #16000	; 0x3e80
 8000e52:	d07c      	beq.n	8000f4e <wm8994_Init+0x4e2>
 8000e54:	d90e      	bls.n	8000e74 <wm8994_Init+0x408>
 8000e56:	f245 6322 	movw	r3, #22050	; 0x5622
 8000e5a:	459a      	cmp	sl, r3
 8000e5c:	f040 808f 	bne.w	8000f7e <wm8994_Init+0x512>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8000e60:	2243      	movs	r2, #67	; 0x43
 8000e62:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000e66:	4620      	mov	r0, r4
 8000e68:	f7ff fcde 	bl	8000828 <CODEC_IO_Write>
 8000e6c:	4406      	add	r6, r0
    break;
 8000e6e:	e032      	b.n	8000ed6 <wm8994_Init+0x46a>
 8000e70:	2000013c 	.word	0x2000013c
  switch (AudioFreq)
 8000e74:	f5ba 5ffa 	cmp.w	sl, #8000	; 0x1f40
 8000e78:	d026      	beq.n	8000ec8 <wm8994_Init+0x45c>
 8000e7a:	f642 3311 	movw	r3, #11025	; 0x2b11
 8000e7e:	459a      	cmp	sl, r3
 8000e80:	d17d      	bne.n	8000f7e <wm8994_Init+0x512>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8000e82:	2213      	movs	r2, #19
 8000e84:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f7ff fccd 	bl	8000828 <CODEC_IO_Write>
 8000e8e:	4406      	add	r6, r0
    break;
 8000e90:	e021      	b.n	8000ed6 <wm8994_Init+0x46a>
  switch (AudioFreq)
 8000e92:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8000e96:	459a      	cmp	sl, r3
 8000e98:	d069      	beq.n	8000f6e <wm8994_Init+0x502>
 8000e9a:	4bb5      	ldr	r3, [pc, #724]	; (8001170 <wm8994_Init+0x704>)
 8000e9c:	459a      	cmp	sl, r3
 8000e9e:	d107      	bne.n	8000eb0 <wm8994_Init+0x444>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8000ea0:	22a3      	movs	r2, #163	; 0xa3
 8000ea2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	f7ff fcbe 	bl	8000828 <CODEC_IO_Write>
 8000eac:	4406      	add	r6, r0
    break;
 8000eae:	e012      	b.n	8000ed6 <wm8994_Init+0x46a>
  switch (AudioFreq)
 8000eb0:	f64a 4344 	movw	r3, #44100	; 0xac44
 8000eb4:	459a      	cmp	sl, r3
 8000eb6:	d162      	bne.n	8000f7e <wm8994_Init+0x512>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8000eb8:	2273      	movs	r2, #115	; 0x73
 8000eba:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	f7ff fcb2 	bl	8000828 <CODEC_IO_Write>
 8000ec4:	4406      	add	r6, r0
    break; 
 8000ec6:	e006      	b.n	8000ed6 <wm8994_Init+0x46a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8000ec8:	2203      	movs	r2, #3
 8000eca:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f7ff fcaa 	bl	8000828 <CODEC_IO_Write>
 8000ed4:	4406      	add	r6, r0
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000ed6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000eda:	d058      	beq.n	8000f8e <wm8994_Init+0x522>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8000edc:	f244 0210 	movw	r2, #16400	; 0x4010
 8000ee0:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	f7ff fc9f 	bl	8000828 <CODEC_IO_Write>
 8000eea:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8000eec:	2200      	movs	r2, #0
 8000eee:	f240 3102 	movw	r1, #770	; 0x302
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f7ff fc98 	bl	8000828 <CODEC_IO_Write>
 8000ef8:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8000efa:	220a      	movs	r2, #10
 8000efc:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000f00:	4620      	mov	r0, r4
 8000f02:	f7ff fc91 	bl	8000828 <CODEC_IO_Write>
 8000f06:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f0e:	4620      	mov	r0, r4
 8000f10:	f7ff fc8a 	bl	8000828 <CODEC_IO_Write>
 8000f14:	4406      	add	r6, r0
  if (output_device > 0)  /* Audio output selected */
 8000f16:	2f00      	cmp	r7, #0
 8000f18:	d142      	bne.n	8000fa0 <wm8994_Init+0x534>
  if (input_device > 0) /* Audio input selected */
 8000f1a:	b1ad      	cbz	r5, 8000f48 <wm8994_Init+0x4dc>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8000f1c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8000f20:	bf18      	it	ne
 8000f22:	f5b5 7f80 	cmpne.w	r5, #256	; 0x100
 8000f26:	f000 80d7 	beq.w	80010d8 <wm8994_Init+0x66c>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000f2a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000f2e:	f000 80ea 	beq.w	8001106 <wm8994_Init+0x69a>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8000f32:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8000f36:	bf18      	it	ne
 8000f38:	f5b5 7f40 	cmpne.w	r5, #768	; 0x300
 8000f3c:	f000 8102 	beq.w	8001144 <wm8994_Init+0x6d8>
    wm8994_SetVolume(DeviceAddr, Volume);
 8000f40:	4649      	mov	r1, r9
 8000f42:	4640      	mov	r0, r8
 8000f44:	f7ff fcf8 	bl	8000938 <wm8994_SetVolume>
}
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8000f4e:	2233      	movs	r2, #51	; 0x33
 8000f50:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000f54:	4620      	mov	r0, r4
 8000f56:	f7ff fc67 	bl	8000828 <CODEC_IO_Write>
 8000f5a:	4406      	add	r6, r0
    break;
 8000f5c:	e7bb      	b.n	8000ed6 <wm8994_Init+0x46a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8000f5e:	2263      	movs	r2, #99	; 0x63
 8000f60:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000f64:	4620      	mov	r0, r4
 8000f66:	f7ff fc5f 	bl	8000828 <CODEC_IO_Write>
 8000f6a:	4406      	add	r6, r0
    break;
 8000f6c:	e7b3      	b.n	8000ed6 <wm8994_Init+0x46a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000f6e:	2283      	movs	r2, #131	; 0x83
 8000f70:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000f74:	4620      	mov	r0, r4
 8000f76:	f7ff fc57 	bl	8000828 <CODEC_IO_Write>
 8000f7a:	4406      	add	r6, r0
    break;
 8000f7c:	e7ab      	b.n	8000ed6 <wm8994_Init+0x46a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000f7e:	2283      	movs	r2, #131	; 0x83
 8000f80:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000f84:	4620      	mov	r0, r4
 8000f86:	f7ff fc4f 	bl	8000828 <CODEC_IO_Write>
 8000f8a:	4406      	add	r6, r0
    break; 
 8000f8c:	e7a3      	b.n	8000ed6 <wm8994_Init+0x46a>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8000f8e:	f244 0218 	movw	r2, #16408	; 0x4018
 8000f92:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000f96:	4620      	mov	r0, r4
 8000f98:	f7ff fc46 	bl	8000828 <CODEC_IO_Write>
 8000f9c:	4406      	add	r6, r0
 8000f9e:	e7a5      	b.n	8000eec <wm8994_Init+0x480>
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8000fa0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000fa4:	2103      	movs	r1, #3
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	f7ff fc3e 	bl	8000828 <CODEC_IO_Write>
 8000fac:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2122      	movs	r1, #34	; 0x22
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f7ff fc38 	bl	8000828 <CODEC_IO_Write>
 8000fb8:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2123      	movs	r1, #35	; 0x23
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f7ff fc32 	bl	8000828 <CODEC_IO_Write>
 8000fc4:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8000fc6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000fca:	2136      	movs	r1, #54	; 0x36
 8000fcc:	4620      	mov	r0, r4
 8000fce:	f7ff fc2b 	bl	8000828 <CODEC_IO_Write>
 8000fd2:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8000fd4:	f243 0203 	movw	r2, #12291	; 0x3003
 8000fd8:	2101      	movs	r1, #1
 8000fda:	4620      	mov	r0, r4
 8000fdc:	f7ff fc24 	bl	8000828 <CODEC_IO_Write>
 8000fe0:	4406      	add	r6, r0
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000fe2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000fe6:	d06f      	beq.n	80010c8 <wm8994_Init+0x65c>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8000fe8:	2205      	movs	r2, #5
 8000fea:	2151      	movs	r1, #81	; 0x51
 8000fec:	4620      	mov	r0, r4
 8000fee:	f7ff fc1b 	bl	8000828 <CODEC_IO_Write>
 8000ff2:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000ff4:	f243 3203 	movw	r2, #13059	; 0x3303
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f7ff fc14 	bl	8000828 <CODEC_IO_Write>
 8001000:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8001002:	2222      	movs	r2, #34	; 0x22
 8001004:	2160      	movs	r1, #96	; 0x60
 8001006:	4620      	mov	r0, r4
 8001008:	f7ff fc0e 	bl	8000828 <CODEC_IO_Write>
 800100c:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 800100e:	f649 7225 	movw	r2, #40741	; 0x9f25
 8001012:	214c      	movs	r1, #76	; 0x4c
 8001014:	4620      	mov	r0, r4
 8001016:	f7ff fc07 	bl	8000828 <CODEC_IO_Write>
 800101a:	4406      	add	r6, r0
    AUDIO_IO_Delay(15);
 800101c:	200f      	movs	r0, #15
 800101e:	f000 faf3 	bl	8001608 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8001022:	2201      	movs	r2, #1
 8001024:	212d      	movs	r1, #45	; 0x2d
 8001026:	4620      	mov	r0, r4
 8001028:	f7ff fbfe 	bl	8000828 <CODEC_IO_Write>
 800102c:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 800102e:	2201      	movs	r2, #1
 8001030:	212e      	movs	r1, #46	; 0x2e
 8001032:	4620      	mov	r0, r4
 8001034:	f7ff fbf8 	bl	8000828 <CODEC_IO_Write>
 8001038:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 800103a:	f44f 724c 	mov.w	r2, #816	; 0x330
 800103e:	2103      	movs	r1, #3
 8001040:	4620      	mov	r0, r4
 8001042:	f7ff fbf1 	bl	8000828 <CODEC_IO_Write>
 8001046:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8001048:	2233      	movs	r2, #51	; 0x33
 800104a:	2154      	movs	r1, #84	; 0x54
 800104c:	4620      	mov	r0, r4
 800104e:	f7ff fbeb 	bl	8000828 <CODEC_IO_Write>
 8001052:	4406      	add	r6, r0
    AUDIO_IO_Delay(250);
 8001054:	20fa      	movs	r0, #250	; 0xfa
 8001056:	f000 fad7 	bl	8001608 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 800105a:	22ee      	movs	r2, #238	; 0xee
 800105c:	2160      	movs	r1, #96	; 0x60
 800105e:	4620      	mov	r0, r4
 8001060:	f7ff fbe2 	bl	8000828 <CODEC_IO_Write>
 8001064:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8001066:	22c0      	movs	r2, #192	; 0xc0
 8001068:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800106c:	4620      	mov	r0, r4
 800106e:	f7ff fbdb 	bl	8000828 <CODEC_IO_Write>
 8001072:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8001074:	22c0      	movs	r2, #192	; 0xc0
 8001076:	f240 6111 	movw	r1, #1553	; 0x611
 800107a:	4620      	mov	r0, r4
 800107c:	f7ff fbd4 	bl	8000828 <CODEC_IO_Write>
 8001080:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001088:	4620      	mov	r0, r4
 800108a:	f7ff fbcd 	bl	8000828 <CODEC_IO_Write>
 800108e:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8001090:	22c0      	movs	r2, #192	; 0xc0
 8001092:	f240 6112 	movw	r1, #1554	; 0x612
 8001096:	4620      	mov	r0, r4
 8001098:	f7ff fbc6 	bl	8000828 <CODEC_IO_Write>
 800109c:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 800109e:	22c0      	movs	r2, #192	; 0xc0
 80010a0:	f240 6113 	movw	r1, #1555	; 0x613
 80010a4:	4620      	mov	r0, r4
 80010a6:	f7ff fbbf 	bl	8000828 <CODEC_IO_Write>
 80010aa:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f240 4122 	movw	r1, #1058	; 0x422
 80010b2:	4620      	mov	r0, r4
 80010b4:	f7ff fbb8 	bl	8000828 <CODEC_IO_Write>
 80010b8:	4406      	add	r6, r0
    wm8994_SetVolume(DeviceAddr, Volume);
 80010ba:	4649      	mov	r1, r9
 80010bc:	4640      	mov	r0, r8
 80010be:	f7ff fc3b 	bl	8000938 <wm8994_SetVolume>
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80010c2:	f243 3703 	movw	r7, #13059	; 0x3303
 80010c6:	e728      	b.n	8000f1a <wm8994_Init+0x4ae>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80010c8:	f240 2205 	movw	r2, #517	; 0x205
 80010cc:	2151      	movs	r1, #81	; 0x51
 80010ce:	4620      	mov	r0, r4
 80010d0:	f7ff fbaa 	bl	8000828 <CODEC_IO_Write>
 80010d4:	4406      	add	r6, r0
 80010d6:	e78d      	b.n	8000ff4 <wm8994_Init+0x588>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80010d8:	f047 0213 	orr.w	r2, r7, #19
 80010dc:	2101      	movs	r1, #1
 80010de:	4620      	mov	r0, r4
 80010e0:	f7ff fba2 	bl	8000828 <CODEC_IO_Write>
 80010e4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80010e6:	2202      	movs	r2, #2
 80010e8:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80010ec:	4620      	mov	r0, r4
 80010ee:	f7ff fb9b 	bl	8000828 <CODEC_IO_Write>
 80010f2:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 80010f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80010f8:	f240 4111 	movw	r1, #1041	; 0x411
 80010fc:	4620      	mov	r0, r4
 80010fe:	f7ff fb93 	bl	8000828 <CODEC_IO_Write>
 8001102:	4406      	add	r6, r0
 8001104:	e71c      	b.n	8000f40 <wm8994_Init+0x4d4>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001106:	f047 0213 	orr.w	r2, r7, #19
 800110a:	2101      	movs	r1, #1
 800110c:	4620      	mov	r0, r4
 800110e:	f7ff fb8b 	bl	8000828 <CODEC_IO_Write>
 8001112:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8001114:	2202      	movs	r2, #2
 8001116:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800111a:	4620      	mov	r0, r4
 800111c:	f7ff fb84 	bl	8000828 <CODEC_IO_Write>
 8001120:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8001122:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001126:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800112a:	4620      	mov	r0, r4
 800112c:	f7ff fb7c 	bl	8000828 <CODEC_IO_Write>
 8001130:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8001132:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001136:	f240 4111 	movw	r1, #1041	; 0x411
 800113a:	4620      	mov	r0, r4
 800113c:	f7ff fb74 	bl	8000828 <CODEC_IO_Write>
 8001140:	4406      	add	r6, r0
 8001142:	e6fd      	b.n	8000f40 <wm8994_Init+0x4d4>
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8001144:	220b      	movs	r2, #11
 8001146:	2118      	movs	r1, #24
 8001148:	4620      	mov	r0, r4
 800114a:	f7ff fb6d 	bl	8000828 <CODEC_IO_Write>
 800114e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8001150:	220b      	movs	r2, #11
 8001152:	211a      	movs	r1, #26
 8001154:	4620      	mov	r0, r4
 8001156:	f7ff fb67 	bl	8000828 <CODEC_IO_Write>
 800115a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800115c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001160:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001164:	4620      	mov	r0, r4
 8001166:	f7ff fb5f 	bl	8000828 <CODEC_IO_Write>
 800116a:	4406      	add	r6, r0
 800116c:	e6e8      	b.n	8000f40 <wm8994_Init+0x4d4>
 800116e:	bf00      	nop
 8001170:	00017700 	.word	0x00017700

08001174 <wm8994_SetOutputMode>:
{
 8001174:	b538      	push	{r3, r4, r5, lr}
  switch (Output) 
 8001176:	2902      	cmp	r1, #2
 8001178:	d04d      	beq.n	8001216 <wm8994_SetOutputMode+0xa2>
 800117a:	2903      	cmp	r1, #3
 800117c:	d070      	beq.n	8001260 <wm8994_SetOutputMode+0xec>
 800117e:	2901      	cmp	r1, #1
 8001180:	d024      	beq.n	80011cc <wm8994_SetOutputMode+0x58>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001182:	b2c4      	uxtb	r4, r0
 8001184:	f240 3203 	movw	r2, #771	; 0x303
 8001188:	2105      	movs	r1, #5
 800118a:	4620      	mov	r0, r4
 800118c:	f7ff fb4c 	bl	8000828 <CODEC_IO_Write>
 8001190:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001192:	2201      	movs	r2, #1
 8001194:	f240 6101 	movw	r1, #1537	; 0x601
 8001198:	4620      	mov	r0, r4
 800119a:	f7ff fb45 	bl	8000828 <CODEC_IO_Write>
 800119e:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80011a0:	2201      	movs	r2, #1
 80011a2:	f240 6102 	movw	r1, #1538	; 0x602
 80011a6:	4620      	mov	r0, r4
 80011a8:	f7ff fb3e 	bl	8000828 <CODEC_IO_Write>
 80011ac:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f240 6104 	movw	r1, #1540	; 0x604
 80011b4:	4620      	mov	r0, r4
 80011b6:	f7ff fb37 	bl	8000828 <CODEC_IO_Write>
 80011ba:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80011bc:	2200      	movs	r2, #0
 80011be:	f240 6105 	movw	r1, #1541	; 0x605
 80011c2:	4620      	mov	r0, r4
 80011c4:	f7ff fb30 	bl	8000828 <CODEC_IO_Write>
 80011c8:	4428      	add	r0, r5
  return counter;
 80011ca:	e023      	b.n	8001214 <wm8994_SetOutputMode+0xa0>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80011cc:	b2c4      	uxtb	r4, r0
 80011ce:	f640 420c 	movw	r2, #3084	; 0xc0c
 80011d2:	2105      	movs	r1, #5
 80011d4:	4620      	mov	r0, r4
 80011d6:	f7ff fb27 	bl	8000828 <CODEC_IO_Write>
 80011da:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80011dc:	2200      	movs	r2, #0
 80011de:	f240 6101 	movw	r1, #1537	; 0x601
 80011e2:	4620      	mov	r0, r4
 80011e4:	f7ff fb20 	bl	8000828 <CODEC_IO_Write>
 80011e8:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f240 6102 	movw	r1, #1538	; 0x602
 80011f0:	4620      	mov	r0, r4
 80011f2:	f7ff fb19 	bl	8000828 <CODEC_IO_Write>
 80011f6:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80011f8:	2202      	movs	r2, #2
 80011fa:	f240 6104 	movw	r1, #1540	; 0x604
 80011fe:	4620      	mov	r0, r4
 8001200:	f7ff fb12 	bl	8000828 <CODEC_IO_Write>
 8001204:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8001206:	2202      	movs	r2, #2
 8001208:	f240 6105 	movw	r1, #1541	; 0x605
 800120c:	4620      	mov	r0, r4
 800120e:	f7ff fb0b 	bl	8000828 <CODEC_IO_Write>
 8001212:	4428      	add	r0, r5
}
 8001214:	bd38      	pop	{r3, r4, r5, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001216:	b2c4      	uxtb	r4, r0
 8001218:	f240 3203 	movw	r2, #771	; 0x303
 800121c:	2105      	movs	r1, #5
 800121e:	4620      	mov	r0, r4
 8001220:	f7ff fb02 	bl	8000828 <CODEC_IO_Write>
 8001224:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001226:	2201      	movs	r2, #1
 8001228:	f240 6101 	movw	r1, #1537	; 0x601
 800122c:	4620      	mov	r0, r4
 800122e:	f7ff fafb 	bl	8000828 <CODEC_IO_Write>
 8001232:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001234:	2201      	movs	r2, #1
 8001236:	f240 6102 	movw	r1, #1538	; 0x602
 800123a:	4620      	mov	r0, r4
 800123c:	f7ff faf4 	bl	8000828 <CODEC_IO_Write>
 8001240:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8001242:	2200      	movs	r2, #0
 8001244:	f240 6104 	movw	r1, #1540	; 0x604
 8001248:	4620      	mov	r0, r4
 800124a:	f7ff faed 	bl	8000828 <CODEC_IO_Write>
 800124e:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001250:	2200      	movs	r2, #0
 8001252:	f240 6105 	movw	r1, #1541	; 0x605
 8001256:	4620      	mov	r0, r4
 8001258:	f7ff fae6 	bl	8000828 <CODEC_IO_Write>
 800125c:	4428      	add	r0, r5
    break;
 800125e:	e7d9      	b.n	8001214 <wm8994_SetOutputMode+0xa0>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001260:	b2c4      	uxtb	r4, r0
 8001262:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001266:	2105      	movs	r1, #5
 8001268:	4620      	mov	r0, r4
 800126a:	f7ff fadd 	bl	8000828 <CODEC_IO_Write>
 800126e:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001270:	2201      	movs	r2, #1
 8001272:	f240 6101 	movw	r1, #1537	; 0x601
 8001276:	4620      	mov	r0, r4
 8001278:	f7ff fad6 	bl	8000828 <CODEC_IO_Write>
 800127c:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800127e:	2201      	movs	r2, #1
 8001280:	f240 6102 	movw	r1, #1538	; 0x602
 8001284:	4620      	mov	r0, r4
 8001286:	f7ff facf 	bl	8000828 <CODEC_IO_Write>
 800128a:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800128c:	2202      	movs	r2, #2
 800128e:	f240 6104 	movw	r1, #1540	; 0x604
 8001292:	4620      	mov	r0, r4
 8001294:	f7ff fac8 	bl	8000828 <CODEC_IO_Write>
 8001298:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800129a:	2202      	movs	r2, #2
 800129c:	f240 6105 	movw	r1, #1541	; 0x605
 80012a0:	4620      	mov	r0, r4
 80012a2:	f7ff fac1 	bl	8000828 <CODEC_IO_Write>
 80012a6:	4428      	add	r0, r5
    break;
 80012a8:	e7b4      	b.n	8001214 <wm8994_SetOutputMode+0xa0>
	...

080012ac <wm8994_SetFrequency>:
{
 80012ac:	b508      	push	{r3, lr}
  switch (AudioFreq)
 80012ae:	f245 6322 	movw	r3, #22050	; 0x5622
 80012b2:	4299      	cmp	r1, r3
 80012b4:	d03f      	beq.n	8001336 <wm8994_SetFrequency+0x8a>
 80012b6:	d817      	bhi.n	80012e8 <wm8994_SetFrequency+0x3c>
 80012b8:	f642 3311 	movw	r3, #11025	; 0x2b11
 80012bc:	4299      	cmp	r1, r3
 80012be:	d033      	beq.n	8001328 <wm8994_SetFrequency+0x7c>
 80012c0:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 80012c4:	d106      	bne.n	80012d4 <wm8994_SetFrequency+0x28>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80012c6:	2233      	movs	r2, #51	; 0x33
 80012c8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80012cc:	b2c0      	uxtb	r0, r0
 80012ce:	f7ff faab 	bl	8000828 <CODEC_IO_Write>
    break;
 80012d2:	e008      	b.n	80012e6 <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 80012d4:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 80012d8:	d134      	bne.n	8001344 <wm8994_SetFrequency+0x98>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80012da:	2203      	movs	r2, #3
 80012dc:	f44f 7104 	mov.w	r1, #528	; 0x210
 80012e0:	b2c0      	uxtb	r0, r0
 80012e2:	f7ff faa1 	bl	8000828 <CODEC_IO_Write>
}
 80012e6:	bd08      	pop	{r3, pc}
  switch (AudioFreq)
 80012e8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80012ec:	4299      	cmp	r1, r3
 80012ee:	d014      	beq.n	800131a <wm8994_SetFrequency+0x6e>
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <wm8994_SetFrequency+0xa8>)
 80012f2:	4299      	cmp	r1, r3
 80012f4:	d106      	bne.n	8001304 <wm8994_SetFrequency+0x58>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80012f6:	22a3      	movs	r2, #163	; 0xa3
 80012f8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80012fc:	b2c0      	uxtb	r0, r0
 80012fe:	f7ff fa93 	bl	8000828 <CODEC_IO_Write>
    break;
 8001302:	e7f0      	b.n	80012e6 <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 8001304:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001308:	4299      	cmp	r1, r3
 800130a:	d11b      	bne.n	8001344 <wm8994_SetFrequency+0x98>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800130c:	2273      	movs	r2, #115	; 0x73
 800130e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001312:	b2c0      	uxtb	r0, r0
 8001314:	f7ff fa88 	bl	8000828 <CODEC_IO_Write>
    break; 
 8001318:	e7e5      	b.n	80012e6 <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800131a:	2283      	movs	r2, #131	; 0x83
 800131c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001320:	b2c0      	uxtb	r0, r0
 8001322:	f7ff fa81 	bl	8000828 <CODEC_IO_Write>
    break;
 8001326:	e7de      	b.n	80012e6 <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8001328:	2213      	movs	r2, #19
 800132a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800132e:	b2c0      	uxtb	r0, r0
 8001330:	f7ff fa7a 	bl	8000828 <CODEC_IO_Write>
    break;
 8001334:	e7d7      	b.n	80012e6 <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8001336:	2243      	movs	r2, #67	; 0x43
 8001338:	f44f 7104 	mov.w	r1, #528	; 0x210
 800133c:	b2c0      	uxtb	r0, r0
 800133e:	f7ff fa73 	bl	8000828 <CODEC_IO_Write>
    break;
 8001342:	e7d0      	b.n	80012e6 <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8001344:	2283      	movs	r2, #131	; 0x83
 8001346:	f44f 7104 	mov.w	r1, #528	; 0x210
 800134a:	b2c0      	uxtb	r0, r0
 800134c:	f7ff fa6c 	bl	8000828 <CODEC_IO_Write>
  return counter;
 8001350:	e7c9      	b.n	80012e6 <wm8994_SetFrequency+0x3a>
 8001352:	bf00      	nop
 8001354:	00017700 	.word	0x00017700

08001358 <wm8994_Reset>:
{
 8001358:	b508      	push	{r3, lr}
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800135a:	2200      	movs	r2, #0
 800135c:	4611      	mov	r1, r2
 800135e:	b2c0      	uxtb	r0, r0
 8001360:	f7ff fa62 	bl	8000828 <CODEC_IO_Write>
  outputEnabled = 0;
 8001364:	4b02      	ldr	r3, [pc, #8]	; (8001370 <wm8994_Reset+0x18>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800136a:	605a      	str	r2, [r3, #4]
}
 800136c:	bd08      	pop	{r3, pc}
 800136e:	bf00      	nop
 8001370:	2000013c 	.word	0x2000013c

08001374 <wm8994_DeInit>:
{
 8001374:	b508      	push	{r3, lr}
  AUDIO_IO_DeInit();
 8001376:	f000 f911 	bl	800159c <AUDIO_IO_DeInit>
}
 800137a:	bd08      	pop	{r3, pc}

0800137c <wm8994_ReadID>:
{
 800137c:	b510      	push	{r4, lr}
 800137e:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 8001380:	f000 f904 	bl	800158c <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8001384:	2100      	movs	r1, #0
 8001386:	b2e0      	uxtb	r0, r4
 8001388:	f000 f922 	bl	80015d0 <AUDIO_IO_Read>
}
 800138c:	bd10      	pop	{r4, pc}
	...

08001390 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001394:	4b49      	ldr	r3, [pc, #292]	; (80014bc <I2Cx_MspInit+0x12c>)
 8001396:	4283      	cmp	r3, r0
 8001398:	d043      	beq.n	8001422 <I2Cx_MspInit+0x92>
  }
  else
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800139a:	4c49      	ldr	r4, [pc, #292]	; (80014c0 <I2Cx_MspInit+0x130>)
 800139c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800139e:	f043 0302 	orr.w	r3, r3, #2
 80013a2:	6323      	str	r3, [r4, #48]	; 0x30
 80013a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	9303      	str	r3, [sp, #12]
 80013ac:	9b03      	ldr	r3, [sp, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80013ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b2:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80013b4:	2312      	movs	r3, #18
 80013b6:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80013b8:	2500      	movs	r5, #0
 80013ba:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80013bc:	2302      	movs	r3, #2
 80013be:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80013c0:	2304      	movs	r3, #4
 80013c2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80013c4:	4e3f      	ldr	r6, [pc, #252]	; (80014c4 <I2Cx_MspInit+0x134>)
 80013c6:	a905      	add	r1, sp, #20
 80013c8:	4630      	mov	r0, r6
 80013ca:	f003 fc19 	bl	8004c00 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80013ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80013d4:	a905      	add	r1, sp, #20
 80013d6:	4630      	mov	r0, r6
 80013d8:	f003 fc12 	bl	8004c00 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80013dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013e2:	6423      	str	r3, [r4, #64]	; 0x40
 80013e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ea:	9304      	str	r3, [sp, #16]
 80013ec:	9b04      	ldr	r3, [sp, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80013ee:	6a23      	ldr	r3, [r4, #32]
 80013f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f4:	6223      	str	r3, [r4, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80013f6:	6a23      	ldr	r3, [r4, #32]
 80013f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80013fc:	6223      	str	r3, [r4, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80013fe:	462a      	mov	r2, r5
 8001400:	210f      	movs	r1, #15
 8001402:	201f      	movs	r0, #31
 8001404:	f002 fca6 	bl	8003d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001408:	201f      	movs	r0, #31
 800140a:	f002 fcd5 	bl	8003db8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800140e:	462a      	mov	r2, r5
 8001410:	210f      	movs	r1, #15
 8001412:	2020      	movs	r0, #32
 8001414:	f002 fc9e 	bl	8003d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001418:	2020      	movs	r0, #32
 800141a:	f002 fccd 	bl	8003db8 <HAL_NVIC_EnableIRQ>
  }
}
 800141e:	b00a      	add	sp, #40	; 0x28
 8001420:	bd70      	pop	{r4, r5, r6, pc}
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8001422:	4c27      	ldr	r4, [pc, #156]	; (80014c0 <I2Cx_MspInit+0x130>)
 8001424:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	6323      	str	r3, [r4, #48]	; 0x30
 800142c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	9b00      	ldr	r3, [sp, #0]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8001436:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	6323      	str	r3, [r4, #48]	; 0x30
 800143e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144c:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800144e:	2312      	movs	r3, #18
 8001450:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001452:	2500      	movs	r5, #0
 8001454:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001456:	2302      	movs	r3, #2
 8001458:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 800145a:	2304      	movs	r3, #4
 800145c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 800145e:	a905      	add	r1, sp, #20
 8001460:	4819      	ldr	r0, [pc, #100]	; (80014c8 <I2Cx_MspInit+0x138>)
 8001462:	f003 fbcd 	bl	8004c00 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 800146a:	230b      	movs	r3, #11
 800146c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 800146e:	a905      	add	r1, sp, #20
 8001470:	4814      	ldr	r0, [pc, #80]	; (80014c4 <I2Cx_MspInit+0x134>)
 8001472:	f003 fbc5 	bl	8004c00 <HAL_GPIO_Init>
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001476:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001478:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800147c:	6423      	str	r3, [r4, #64]	; 0x40
 800147e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001484:	9302      	str	r3, [sp, #8]
 8001486:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001488:	6a23      	ldr	r3, [r4, #32]
 800148a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800148e:	6223      	str	r3, [r4, #32]
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001490:	6a23      	ldr	r3, [r4, #32]
 8001492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001496:	6223      	str	r3, [r4, #32]
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001498:	462a      	mov	r2, r5
 800149a:	210f      	movs	r1, #15
 800149c:	205f      	movs	r0, #95	; 0x5f
 800149e:	f002 fc59 	bl	8003d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80014a2:	205f      	movs	r0, #95	; 0x5f
 80014a4:	f002 fc88 	bl	8003db8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80014a8:	462a      	mov	r2, r5
 80014aa:	210f      	movs	r1, #15
 80014ac:	2060      	movs	r0, #96	; 0x60
 80014ae:	f002 fc51 	bl	8003d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 80014b2:	2060      	movs	r0, #96	; 0x60
 80014b4:	f002 fc80 	bl	8003db8 <HAL_NVIC_EnableIRQ>
 80014b8:	e7b1      	b.n	800141e <I2Cx_MspInit+0x8e>
 80014ba:	bf00      	nop
 80014bc:	20000144 	.word	0x20000144
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020400 	.word	0x40020400
 80014c8:	40020c00 	.word	0x40020c00

080014cc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80014cc:	b510      	push	{r4, lr}
 80014ce:	4604      	mov	r4, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80014d0:	f004 f84a 	bl	8005568 <HAL_I2C_GetState>
 80014d4:	b9a0      	cbnz	r0, 8001500 <I2Cx_Init+0x34>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <I2Cx_Init+0x3c>)
 80014d8:	429c      	cmp	r4, r3
 80014da:	d012      	beq.n	8001502 <I2Cx_Init+0x36>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <I2Cx_Init+0x40>)
 80014de:	6023      	str	r3, [r4, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <I2Cx_Init+0x44>)
 80014e2:	6063      	str	r3, [r4, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60a3      	str	r3, [r4, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80014e8:	2201      	movs	r2, #1
 80014ea:	60e2      	str	r2, [r4, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80014ec:	6123      	str	r3, [r4, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80014ee:	6163      	str	r3, [r4, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80014f0:	61e3      	str	r3, [r4, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80014f2:	6223      	str	r3, [r4, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80014f4:	4620      	mov	r0, r4
 80014f6:	f7ff ff4b 	bl	8001390 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80014fa:	4620      	mov	r0, r4
 80014fc:	f003 fdea 	bl	80050d4 <HAL_I2C_Init>
  }
}
 8001500:	bd10      	pop	{r4, pc}
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001502:	4b04      	ldr	r3, [pc, #16]	; (8001514 <I2Cx_Init+0x48>)
 8001504:	6023      	str	r3, [r4, #0]
 8001506:	e7eb      	b.n	80014e0 <I2Cx_Init+0x14>
 8001508:	20000144 	.word	0x20000144
 800150c:	40005400 	.word	0x40005400
 8001510:	40912732 	.word	0x40912732
 8001514:	40006000 	.word	0x40006000

08001518 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001518:	b510      	push	{r4, lr}
 800151a:	4604      	mov	r4, r0
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800151c:	f003 fe39 	bl	8005192 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001520:	4620      	mov	r0, r4
 8001522:	f7ff ffd3 	bl	80014cc <I2Cx_Init>
}
 8001526:	bd10      	pop	{r4, pc}

08001528 <I2Cx_WriteMultiple>:
{
 8001528:	b570      	push	{r4, r5, r6, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	4605      	mov	r5, r0
 800152e:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001530:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001534:	9102      	str	r1, [sp, #8]
 8001536:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800153a:	9101      	str	r1, [sp, #4]
 800153c:	9908      	ldr	r1, [sp, #32]
 800153e:	9100      	str	r1, [sp, #0]
 8001540:	4621      	mov	r1, r4
 8001542:	f003 fe3f 	bl	80051c4 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8001546:	4606      	mov	r6, r0
 8001548:	b910      	cbnz	r0, 8001550 <I2Cx_WriteMultiple+0x28>
}
 800154a:	4630      	mov	r0, r6
 800154c:	b004      	add	sp, #16
 800154e:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 8001550:	4621      	mov	r1, r4
 8001552:	4628      	mov	r0, r5
 8001554:	f7ff ffe0 	bl	8001518 <I2Cx_Error>
 8001558:	e7f7      	b.n	800154a <I2Cx_WriteMultiple+0x22>

0800155a <I2Cx_ReadMultiple>:
{
 800155a:	b570      	push	{r4, r5, r6, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	4605      	mov	r5, r0
 8001560:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001562:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001566:	9102      	str	r1, [sp, #8]
 8001568:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800156c:	9101      	str	r1, [sp, #4]
 800156e:	9908      	ldr	r1, [sp, #32]
 8001570:	9100      	str	r1, [sp, #0]
 8001572:	4621      	mov	r1, r4
 8001574:	f003 ff10 	bl	8005398 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001578:	4606      	mov	r6, r0
 800157a:	b910      	cbnz	r0, 8001582 <I2Cx_ReadMultiple+0x28>
}
 800157c:	4630      	mov	r0, r6
 800157e:	b004      	add	sp, #16
 8001580:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 8001582:	4621      	mov	r1, r4
 8001584:	4628      	mov	r0, r5
 8001586:	f7ff ffc7 	bl	8001518 <I2Cx_Error>
 800158a:	e7f7      	b.n	800157c <I2Cx_ReadMultiple+0x22>

0800158c <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 800158c:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cAudioHandler);
 800158e:	4802      	ldr	r0, [pc, #8]	; (8001598 <AUDIO_IO_Init+0xc>)
 8001590:	f7ff ff9c 	bl	80014cc <I2Cx_Init>
}
 8001594:	bd08      	pop	{r3, pc}
 8001596:	bf00      	nop
 8001598:	20000144 	.word	0x20000144

0800159c <AUDIO_IO_DeInit>:
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{

}
 800159c:	4770      	bx	lr
	...

080015a0 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80015a0:	b500      	push	{lr}
 80015a2:	b085      	sub	sp, #20
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80015a4:	0213      	lsls	r3, r2, #8
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	ea43 2212 	orr.w	r2, r3, r2, lsr #8
 80015ac:	f8ad 200e 	strh.w	r2, [sp, #14]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80015b0:	2302      	movs	r3, #2
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	f10d 020e 	add.w	r2, sp, #14
 80015b8:	9200      	str	r2, [sp, #0]
 80015ba:	460a      	mov	r2, r1
 80015bc:	4601      	mov	r1, r0
 80015be:	4803      	ldr	r0, [pc, #12]	; (80015cc <AUDIO_IO_Write+0x2c>)
 80015c0:	f7ff ffb2 	bl	8001528 <I2Cx_WriteMultiple>
}
 80015c4:	b005      	add	sp, #20
 80015c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80015ca:	bf00      	nop
 80015cc:	20000144 	.word	0x20000144

080015d0 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 80015d0:	b500      	push	{lr}
 80015d2:	b085      	sub	sp, #20
 80015d4:	460a      	mov	r2, r1
  uint16_t read_value = 0, tmp = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8ad 300e 	strh.w	r3, [sp, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80015dc:	2302      	movs	r3, #2
 80015de:	9301      	str	r3, [sp, #4]
 80015e0:	f10d 010e 	add.w	r1, sp, #14
 80015e4:	9100      	str	r1, [sp, #0]
 80015e6:	4601      	mov	r1, r0
 80015e8:	4806      	ldr	r0, [pc, #24]	; (8001604 <AUDIO_IO_Read+0x34>)
 80015ea:	f7ff ffb6 	bl	800155a <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80015ee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80015f2:	0218      	lsls	r0, r3, #8
 80015f4:	b200      	sxth	r0, r0
 80015f6:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
  
  read_value = tmp;
  
  return read_value;
}
 80015fa:	b280      	uxth	r0, r0
 80015fc:	b005      	add	sp, #20
 80015fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001602:	bf00      	nop
 8001604:	20000144 	.word	0x20000144

08001608 <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8001608:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 800160a:	f002 fb83 	bl	8003d14 <HAL_Delay>
}
 800160e:	bd08      	pop	{r3, pc}

08001610 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8001610:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cAudioHandler);
 8001612:	4802      	ldr	r0, [pc, #8]	; (800161c <TS_IO_Init+0xc>)
 8001614:	f7ff ff5a 	bl	80014cc <I2Cx_Init>
}
 8001618:	bd08      	pop	{r3, pc}
 800161a:	bf00      	nop
 800161c:	20000144 	.word	0x20000144

08001620 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001620:	b500      	push	{lr}
 8001622:	b085      	sub	sp, #20
 8001624:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001628:	2301      	movs	r3, #1
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	f10d 020f 	add.w	r2, sp, #15
 8001630:	9200      	str	r2, [sp, #0]
 8001632:	460a      	mov	r2, r1
 8001634:	4601      	mov	r1, r0
 8001636:	4803      	ldr	r0, [pc, #12]	; (8001644 <TS_IO_Write+0x24>)
 8001638:	f7ff ff76 	bl	8001528 <I2Cx_WriteMultiple>
}
 800163c:	b005      	add	sp, #20
 800163e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001642:	bf00      	nop
 8001644:	20000144 	.word	0x20000144

08001648 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001648:	b500      	push	{lr}
 800164a:	b085      	sub	sp, #20
 800164c:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	f88d 300f 	strb.w	r3, [sp, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001654:	2301      	movs	r3, #1
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	f10d 010f 	add.w	r1, sp, #15
 800165c:	9100      	str	r1, [sp, #0]
 800165e:	4601      	mov	r1, r0
 8001660:	4803      	ldr	r0, [pc, #12]	; (8001670 <TS_IO_Read+0x28>)
 8001662:	f7ff ff7a 	bl	800155a <I2Cx_ReadMultiple>

  return read_value;
}
 8001666:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800166a:	b005      	add	sp, #20
 800166c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001670:	20000144 	.word	0x20000144

08001674 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001674:	b500      	push	{lr}
 8001676:	b083      	sub	sp, #12
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001678:	9301      	str	r3, [sp, #4]
 800167a:	9200      	str	r2, [sp, #0]
 800167c:	2301      	movs	r3, #1
 800167e:	460a      	mov	r2, r1
 8001680:	4601      	mov	r1, r0
 8001682:	4803      	ldr	r0, [pc, #12]	; (8001690 <TS_IO_ReadMultiple+0x1c>)
 8001684:	f7ff ff69 	bl	800155a <I2Cx_ReadMultiple>
}
 8001688:	b280      	uxth	r0, r0
 800168a:	b003      	add	sp, #12
 800168c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001690:	20000144 	.word	0x20000144

08001694 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8001694:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8001696:	f002 fb3d 	bl	8003d14 <HAL_Delay>
}
 800169a:	bd08      	pop	{r3, pc}

0800169c <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Manages the DMA full Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
}
 800169c:	4770      	bx	lr

0800169e <HAL_SAI_TxCpltCallback>:
{
 800169e:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 80016a0:	f7ff fffc 	bl	800169c <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80016a4:	bd08      	pop	{r3, pc}

080016a6 <HAL_SAI_TxHalfCpltCallback>:
{
 80016a6:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80016a8:	f008 ff1c 	bl	800a4e4 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80016ac:	bd08      	pop	{r3, pc}

080016ae <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
}
 80016ae:	4770      	bx	lr

080016b0 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 80016b0:	b530      	push	{r4, r5, lr}
 80016b2:	b08b      	sub	sp, #44	; 0x2c
 80016b4:	4605      	mov	r5, r0
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  
  
  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80016b6:	4c3a      	ldr	r4, [pc, #232]	; (80017a0 <BSP_AUDIO_OUT_MspInit+0xf0>)
 80016b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016be:	6463      	str	r3, [r4, #68]	; 0x44
 80016c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	9b01      	ldr	r3, [sp, #4]
  
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 80016ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d0:	6323      	str	r3, [r4, #48]	; 0x30
 80016d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d8:	9302      	str	r3, [sp, #8]
 80016da:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 80016dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016de:	f043 0310 	orr.w	r3, r3, #16
 80016e2:	6323      	str	r3, [r4, #48]	; 0x30
 80016e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	9303      	str	r3, [sp, #12]
 80016ec:	9b03      	ldr	r3, [sp, #12]
  
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 80016ee:	2370      	movs	r3, #112	; 0x70
 80016f0:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 80016fe:	2306      	movs	r3, #6
 8001700:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8001702:	a905      	add	r1, sp, #20
 8001704:	4827      	ldr	r0, [pc, #156]	; (80017a4 <BSP_AUDIO_OUT_MspInit+0xf4>)
 8001706:	f003 fa7b 	bl	8004c00 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800170e:	a905      	add	r1, sp, #20
 8001710:	4825      	ldr	r0, [pc, #148]	; (80017a8 <BSP_AUDIO_OUT_MspInit+0xf8>)
 8001712:	f003 fa75 	bl	8004c00 <HAL_GPIO_Init>
  
  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001716:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001718:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800171c:	6323      	str	r3, [r4, #48]	; 0x30
 800171e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001724:	9304      	str	r3, [sp, #16]
 8001726:	9b04      	ldr	r3, [sp, #16]
  
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001728:	682a      	ldr	r2, [r5, #0]
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <BSP_AUDIO_OUT_MspInit+0xfc>)
 800172c:	429a      	cmp	r2, r3
 800172e:	d009      	beq.n	8001744 <BSP_AUDIO_OUT_MspInit+0x94>
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	210e      	movs	r1, #14
 8001734:	2039      	movs	r0, #57	; 0x39
 8001736:	f002 fb0d 	bl	8003d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 800173a:	2039      	movs	r0, #57	; 0x39
 800173c:	f002 fb3c 	bl	8003db8 <HAL_NVIC_EnableIRQ>
}
 8001740:	b00b      	add	sp, #44	; 0x2c
 8001742:	bd30      	pop	{r4, r5, pc}
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8001744:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <BSP_AUDIO_OUT_MspInit+0x100>)
 8001746:	2200      	movs	r2, #0
 8001748:	665a      	str	r2, [r3, #100]	; 0x64
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800174a:	2140      	movs	r1, #64	; 0x40
 800174c:	6699      	str	r1, [r3, #104]	; 0x68
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800174e:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001750:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001754:	6719      	str	r1, [r3, #112]	; 0x70
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001756:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800175a:	6759      	str	r1, [r3, #116]	; 0x74
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 800175c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001760:	6799      	str	r1, [r3, #120]	; 0x78
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8001762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001766:	67d9      	str	r1, [r3, #124]	; 0x7c
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001768:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800176c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001770:	2104      	movs	r1, #4
 8001772:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001776:	2103      	movs	r1, #3
 8001778:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800177c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001780:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001784:	461c      	mov	r4, r3
 8001786:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <BSP_AUDIO_OUT_MspInit+0x104>)
 8001788:	f844 2f60 	str.w	r2, [r4, #96]!
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800178c:	66ec      	str	r4, [r5, #108]	; 0x6c
 800178e:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001792:	4620      	mov	r0, r4
 8001794:	f002 fc16 	bl	8003fc4 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);
 8001798:	4620      	mov	r0, r4
 800179a:	f002 fbad 	bl	8003ef8 <HAL_DMA_Init>
 800179e:	e7c7      	b.n	8001730 <BSP_AUDIO_OUT_MspInit+0x80>
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40021800 	.word	0x40021800
 80017ac:	40015804 	.word	0x40015804
 80017b0:	200001dc 	.word	0x200001dc
 80017b4:	40026428 	.word	0x40026428

080017b8 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 80017b8:	b510      	push	{r4, lr}
 80017ba:	b0a4      	sub	sp, #144	; 0x90
 80017bc:	460c      	mov	r4, r1
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80017be:	4668      	mov	r0, sp
 80017c0:	f005 ff16 	bl	80075f0 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 80017c4:	f642 3211 	movw	r2, #11025	; 0x2b11
 80017c8:	f245 6322 	movw	r3, #22050	; 0x5622
 80017cc:	429c      	cmp	r4, r3
 80017ce:	bf18      	it	ne
 80017d0:	4294      	cmpne	r4, r2
 80017d2:	d003      	beq.n	80017dc <BSP_AUDIO_OUT_ClockConfig+0x24>
 80017d4:	f64a 4344 	movw	r3, #44100	; 0xac44
 80017d8:	429c      	cmp	r4, r3
 80017da:	d111      	bne.n	8001800 <BSP_AUDIO_OUT_ClockConfig+0x48>
  {
    /* Configure PLLSAI prescalers */
    /* PLLSAI_VCO: VCO_429M 
    SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 214.5/19 = 11.289 Mhz */ 
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80017dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80017e0:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 80017e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017e6:	930f      	str	r3, [sp, #60]	; 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 80017e8:	f240 13ad 	movw	r3, #429	; 0x1ad
 80017ec:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 80017ee:	2302      	movs	r3, #2
 80017f0:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 80017f2:	2313      	movs	r3, #19
 80017f4:	9309      	str	r3, [sp, #36]	; 0x24
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80017f6:	4668      	mov	r0, sp
 80017f8:	f005 faf8 	bl	8006dec <HAL_RCCEx_PeriphCLKConfig>
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
  }
}
 80017fc:	b024      	add	sp, #144	; 0x90
 80017fe:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001800:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001804:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8001806:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800180a:	930f      	str	r3, [sp, #60]	; 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344; 
 800180c:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001810:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
 8001812:	2307      	movs	r3, #7
 8001814:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
 8001816:	2301      	movs	r3, #1
 8001818:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800181a:	4668      	mov	r0, sp
 800181c:	f005 fae6 	bl	8006dec <HAL_RCCEx_PeriphCLKConfig>
}
 8001820:	e7ec      	b.n	80017fc <BSP_AUDIO_OUT_ClockConfig+0x44>

08001822 <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai : SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001822:	b508      	push	{r3, lr}
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001824:	f008 fe64 	bl	800a4f0 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001828:	bd08      	pop	{r3, pc}

0800182a <HAL_SAI_RxHalfCpltCallback>:
{
 800182a:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 800182c:	f008 fe66 	bl	800a4fc <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8001830:	bd08      	pop	{r3, pc}
	...

08001834 <HAL_SAI_ErrorCallback>:
{
 8001834:	b508      	push	{r3, lr}
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001836:	6802      	ldr	r2, [r0, #0]
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <HAL_SAI_ErrorCallback+0x18>)
 800183a:	429a      	cmp	r2, r3
 800183c:	d002      	beq.n	8001844 <HAL_SAI_ErrorCallback+0x10>
    BSP_AUDIO_IN_Error_CallBack();
 800183e:	f008 fe63 	bl	800a508 <BSP_AUDIO_IN_Error_CallBack>
}
 8001842:	bd08      	pop	{r3, pc}
  BSP_AUDIO_OUT_Error_CallBack();
 8001844:	f7ff ff33 	bl	80016ae <BSP_AUDIO_OUT_Error_CallBack>
 8001848:	e7fb      	b.n	8001842 <HAL_SAI_ErrorCallback+0xe>
 800184a:	bf00      	nop
 800184c:	40015804 	.word	0x40015804

08001850 <LCD_IO_GetID>:
    return 0;
  }
#else 
  return LCD_DSI_ID; 
#endif /* USE_LCD_HDMI */
}
 8001850:	2011      	movs	r0, #17
 8001852:	4770      	bx	lr

08001854 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8001854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001856:	b083      	sub	sp, #12
 8001858:	4604      	mov	r4, r0
 800185a:	460d      	mov	r5, r1
 800185c:	4616      	mov	r6, r2
 800185e:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8001860:	4811      	ldr	r0, [pc, #68]	; (80018a8 <LL_FillBuffer+0x54>)
 8001862:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001866:	6043      	str	r3, [r0, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8001868:	2300      	movs	r3, #0
 800186a:	6083      	str	r3, [r0, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 800186c:	9b08      	ldr	r3, [sp, #32]
 800186e:	60c3      	str	r3, [r0, #12]

  hdma2d_discovery.Instance = DMA2D;
 8001870:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <LL_FillBuffer+0x58>)
 8001872:	6003      	str	r3, [r0, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8001874:	f002 fd58 	bl	8004328 <HAL_DMA2D_Init>
 8001878:	b108      	cbz	r0, 800187e <LL_FillBuffer+0x2a>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
      }
    }
  }
}
 800187a:	b003      	add	sp, #12
 800187c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 800187e:	4621      	mov	r1, r4
 8001880:	4809      	ldr	r0, [pc, #36]	; (80018a8 <LL_FillBuffer+0x54>)
 8001882:	f002 fe47 	bl	8004514 <HAL_DMA2D_ConfigLayer>
 8001886:	2800      	cmp	r0, #0
 8001888:	d1f7      	bne.n	800187a <LL_FillBuffer+0x26>
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800188a:	9700      	str	r7, [sp, #0]
 800188c:	4633      	mov	r3, r6
 800188e:	462a      	mov	r2, r5
 8001890:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <LL_FillBuffer+0x54>)
 8001894:	f002 fd82 	bl	800439c <HAL_DMA2D_Start>
 8001898:	2800      	cmp	r0, #0
 800189a:	d1ee      	bne.n	800187a <LL_FillBuffer+0x26>
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 800189c:	210a      	movs	r1, #10
 800189e:	4802      	ldr	r0, [pc, #8]	; (80018a8 <LL_FillBuffer+0x54>)
 80018a0:	f002 fd98 	bl	80043d4 <HAL_DMA2D_PollForTransfer>
}
 80018a4:	e7e9      	b.n	800187a <LL_FillBuffer+0x26>
 80018a6:	bf00      	nop
 80018a8:	20001e44 	.word	0x20001e44
 80018ac:	4002b000 	.word	0x4002b000

080018b0 <BSP_LCD_Reset>:
{
 80018b0:	b570      	push	{r4, r5, r6, lr}
 80018b2:	b086      	sub	sp, #24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <BSP_LCD_Reset+0x58>)
 80018b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018bc:	631a      	str	r2, [r3, #48]	; 0x30
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Pin   = GPIO_PIN_15;
 80018c8:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 80018cc:	9501      	str	r5, [sp, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80018ce:	2601      	movs	r6, #1
 80018d0:	9602      	str	r6, [sp, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 80018d2:	9603      	str	r6, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80018d8:	4c0c      	ldr	r4, [pc, #48]	; (800190c <BSP_LCD_Reset+0x5c>)
 80018da:	a901      	add	r1, sp, #4
 80018dc:	4620      	mov	r0, r4
 80018de:	f003 f98f 	bl	8004c00 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	4629      	mov	r1, r5
 80018e6:	4620      	mov	r0, r4
 80018e8:	f003 fa81 	bl	8004dee <HAL_GPIO_WritePin>
    HAL_Delay(20); /* wait 20 ms */
 80018ec:	2014      	movs	r0, #20
 80018ee:	f002 fa11 	bl	8003d14 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 80018f2:	4632      	mov	r2, r6
 80018f4:	4629      	mov	r1, r5
 80018f6:	4620      	mov	r0, r4
 80018f8:	f003 fa79 	bl	8004dee <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80018fc:	200a      	movs	r0, #10
 80018fe:	f002 fa09 	bl	8003d14 <HAL_Delay>
}
 8001902:	b006      	add	sp, #24
 8001904:	bd70      	pop	{r4, r5, r6, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	40022400 	.word	0x40022400

08001910 <BSP_LCD_GetXSize>:
}
 8001910:	4b01      	ldr	r3, [pc, #4]	; (8001918 <BSP_LCD_GetXSize+0x8>)
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000058 	.word	0x20000058

0800191c <BSP_LCD_GetYSize>:
}
 800191c:	4b01      	ldr	r3, [pc, #4]	; (8001924 <BSP_LCD_GetYSize+0x8>)
 800191e:	6858      	ldr	r0, [r3, #4]
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000058 	.word	0x20000058

08001928 <BSP_LCD_LayerDefaultInit>:
{
 8001928:	b570      	push	{r4, r5, r6, lr}
 800192a:	b08e      	sub	sp, #56	; 0x38
 800192c:	4604      	mov	r4, r0
 800192e:	460e      	mov	r6, r1
  Layercfg.WindowX0 = 0;
 8001930:	2500      	movs	r5, #0
 8001932:	9501      	str	r5, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001934:	f7ff ffec 	bl	8001910 <BSP_LCD_GetXSize>
 8001938:	9002      	str	r0, [sp, #8]
  Layercfg.WindowY0 = 0;
 800193a:	9503      	str	r5, [sp, #12]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800193c:	f7ff ffee 	bl	800191c <BSP_LCD_GetYSize>
 8001940:	9004      	str	r0, [sp, #16]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001942:	9505      	str	r5, [sp, #20]
  Layercfg.FBStartAdress = FB_Address;
 8001944:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.Alpha = 255;
 8001946:	23ff      	movs	r3, #255	; 0xff
 8001948:	9306      	str	r3, [sp, #24]
  Layercfg.Alpha0 = 0;
 800194a:	9507      	str	r5, [sp, #28]
  Layercfg.Backcolor.Blue = 0;
 800194c:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  Layercfg.Backcolor.Green = 0;
 8001950:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  Layercfg.Backcolor.Red = 0;
 8001954:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001958:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800195c:	9308      	str	r3, [sp, #32]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800195e:	2307      	movs	r3, #7
 8001960:	9309      	str	r3, [sp, #36]	; 0x24
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001962:	f7ff ffd5 	bl	8001910 <BSP_LCD_GetXSize>
 8001966:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001968:	f7ff ffd8 	bl	800191c <BSP_LCD_GetYSize>
 800196c:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 800196e:	4622      	mov	r2, r4
 8001970:	a901      	add	r1, sp, #4
 8001972:	4809      	ldr	r0, [pc, #36]	; (8001998 <BSP_LCD_LayerDefaultInit+0x70>)
 8001974:	f004 fe52 	bl	800661c <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001978:	4808      	ldr	r0, [pc, #32]	; (800199c <BSP_LCD_LayerDefaultInit+0x74>)
 800197a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800197e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001982:	f04f 32ff 	mov.w	r2, #4294967295
 8001986:	609a      	str	r2, [r3, #8]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001988:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <BSP_LCD_LayerDefaultInit+0x78>)
 800198a:	60da      	str	r2, [r3, #12]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 800198c:	461c      	mov	r4, r3
 800198e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001992:	6063      	str	r3, [r4, #4]
}
 8001994:	b00e      	add	sp, #56	; 0x38
 8001996:	bd70      	pop	{r4, r5, r6, pc}
 8001998:	20001e9c 	.word	0x20001e9c
 800199c:	200002dc 	.word	0x200002dc
 80019a0:	20000060 	.word	0x20000060

080019a4 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80019a4:	4b01      	ldr	r3, [pc, #4]	; (80019ac <BSP_LCD_SelectLayer+0x8>)
 80019a6:	6018      	str	r0, [r3, #0]
}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	200002dc 	.word	0x200002dc

080019b0 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <BSP_LCD_SetTextColor+0x10>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019b8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80019bc:	6058      	str	r0, [r3, #4]
}
 80019be:	4770      	bx	lr
 80019c0:	200002dc 	.word	0x200002dc

080019c4 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <BSP_LCD_SetBackColor+0x10>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019cc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80019d0:	6098      	str	r0, [r3, #8]
}
 80019d2:	4770      	bx	lr
 80019d4:	200002dc 	.word	0x200002dc

080019d8 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <BSP_LCD_SetFont+0x10>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019e0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80019e4:	60d8      	str	r0, [r3, #12]
}
 80019e6:	4770      	bx	lr
 80019e8:	200002dc 	.word	0x200002dc

080019ec <BSP_LCD_Clear>:
{
 80019ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ee:	b083      	sub	sp, #12
 80019f0:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <BSP_LCD_Clear+0x34>)
 80019f4:	681e      	ldr	r6, [r3, #0]
 80019f6:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <BSP_LCD_Clear+0x38>)
 80019f8:	2334      	movs	r3, #52	; 0x34
 80019fa:	fb03 2306 	mla	r3, r3, r6, r2
 80019fe:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8001a00:	f7ff ff86 	bl	8001910 <BSP_LCD_GetXSize>
 8001a04:	4604      	mov	r4, r0
 8001a06:	f7ff ff89 	bl	800191c <BSP_LCD_GetYSize>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	9501      	str	r5, [sp, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	9200      	str	r2, [sp, #0]
 8001a12:	4622      	mov	r2, r4
 8001a14:	4639      	mov	r1, r7
 8001a16:	4630      	mov	r0, r6
 8001a18:	f7ff ff1c 	bl	8001854 <LL_FillBuffer>
}
 8001a1c:	b003      	add	sp, #12
 8001a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a20:	200002dc 	.word	0x200002dc
 8001a24:	20001e9c 	.word	0x20001e9c

08001a28 <BSP_LCD_DrawHLine>:
{
 8001a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	4680      	mov	r8, r0
 8001a30:	460c      	mov	r4, r1
 8001a32:	4617      	mov	r7, r2
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001a34:	4e0e      	ldr	r6, [pc, #56]	; (8001a70 <BSP_LCD_DrawHLine+0x48>)
 8001a36:	6835      	ldr	r5, [r6, #0]
 8001a38:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <BSP_LCD_DrawHLine+0x4c>)
 8001a3a:	2334      	movs	r3, #52	; 0x34
 8001a3c:	fb03 2305 	mla	r3, r3, r5, r2
 8001a40:	f8d3 905c 	ldr.w	r9, [r3, #92]	; 0x5c
 8001a44:	f7ff ff64 	bl	8001910 <BSP_LCD_GetXSize>
 8001a48:	fb00 8104 	mla	r1, r0, r4, r8
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001a4c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001a50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	463a      	mov	r2, r7
 8001a60:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8001a64:	4628      	mov	r0, r5
 8001a66:	f7ff fef5 	bl	8001854 <LL_FillBuffer>
}
 8001a6a:	b003      	add	sp, #12
 8001a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a70:	200002dc 	.word	0x200002dc
 8001a74:	20001e9c 	.word	0x20001e9c

08001a78 <BSP_LCD_DrawVLine>:
{
 8001a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	4681      	mov	r9, r0
 8001a80:	460c      	mov	r4, r1
 8001a82:	4616      	mov	r6, r2
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001a84:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8001ac8 <BSP_LCD_DrawVLine+0x50>
 8001a88:	f8d8 5000 	ldr.w	r5, [r8]
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <BSP_LCD_DrawVLine+0x4c>)
 8001a8e:	2334      	movs	r3, #52	; 0x34
 8001a90:	fb03 2305 	mla	r3, r3, r5, r2
 8001a94:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8001a96:	f7ff ff3b 	bl	8001910 <BSP_LCD_GetXSize>
 8001a9a:	fb00 9104 	mla	r1, r0, r4, r9
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001a9e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001aa2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	9301      	str	r3, [sp, #4]
 8001aaa:	3801      	subs	r0, #1
 8001aac:	9000      	str	r0, [sp, #0]
 8001aae:	4633      	mov	r3, r6
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f7ff fecc 	bl	8001854 <LL_FillBuffer>
}
 8001abc:	b003      	add	sp, #12
 8001abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20001e9c 	.word	0x20001e9c
 8001ac8:	200002dc 	.word	0x200002dc

08001acc <BSP_LCD_DrawRect>:
{
 8001acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ace:	4604      	mov	r4, r0
 8001ad0:	460d      	mov	r5, r1
 8001ad2:	4617      	mov	r7, r2
 8001ad4:	461e      	mov	r6, r3
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8001ad6:	f7ff ffa7 	bl	8001a28 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8001ada:	19a9      	adds	r1, r5, r6
 8001adc:	463a      	mov	r2, r7
 8001ade:	b289      	uxth	r1, r1
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	f7ff ffa1 	bl	8001a28 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001ae6:	4632      	mov	r2, r6
 8001ae8:	4629      	mov	r1, r5
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff ffc4 	bl	8001a78 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001af0:	19e0      	adds	r0, r4, r7
 8001af2:	4632      	mov	r2, r6
 8001af4:	4629      	mov	r1, r5
 8001af6:	b280      	uxth	r0, r0
 8001af8:	f7ff ffbe 	bl	8001a78 <BSP_LCD_DrawVLine>
}
 8001afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b00 <BSP_LCD_FillRect>:
{
 8001b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	4682      	mov	sl, r0
 8001b08:	460d      	mov	r5, r1
 8001b0a:	4617      	mov	r7, r2
 8001b0c:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001b0e:	4c13      	ldr	r4, [pc, #76]	; (8001b5c <BSP_LCD_FillRect+0x5c>)
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b16:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001b1a:	6858      	ldr	r0, [r3, #4]
 8001b1c:	f7ff ff48 	bl	80019b0 <BSP_LCD_SetTextColor>
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001b20:	6826      	ldr	r6, [r4, #0]
 8001b22:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <BSP_LCD_FillRect+0x60>)
 8001b24:	2334      	movs	r3, #52	; 0x34
 8001b26:	fb03 2306 	mla	r3, r3, r6, r2
 8001b2a:	f8d3 905c 	ldr.w	r9, [r3, #92]	; 0x5c
 8001b2e:	f7ff feef 	bl	8001910 <BSP_LCD_GetXSize>
 8001b32:	fb00 a105 	mla	r1, r0, r5, sl
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001b36:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8001b3a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001b3e:	6863      	ldr	r3, [r4, #4]
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	1bc0      	subs	r0, r0, r7
 8001b44:	9000      	str	r0, [sp, #0]
 8001b46:	4643      	mov	r3, r8
 8001b48:	463a      	mov	r2, r7
 8001b4a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8001b4e:	4630      	mov	r0, r6
 8001b50:	f7ff fe80 	bl	8001854 <LL_FillBuffer>
}
 8001b54:	b002      	add	sp, #8
 8001b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200002dc 	.word	0x200002dc
 8001b60:	20001e9c 	.word	0x20001e9c

08001b64 <DSI_IO_WriteCmd>:
{
 8001b64:	b500      	push	{lr}
 8001b66:	b083      	sub	sp, #12
  if(NbrParams <= 1)
 8001b68:	2801      	cmp	r0, #1
 8001b6a:	d90b      	bls.n	8001b84 <DSI_IO_WriteCmd+0x20>
 8001b6c:	4603      	mov	r3, r0
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001b6e:	5c0a      	ldrb	r2, [r1, r0]
 8001b70:	9101      	str	r1, [sp, #4]
 8001b72:	9200      	str	r2, [sp, #0]
 8001b74:	2239      	movs	r2, #57	; 0x39
 8001b76:	2100      	movs	r1, #0
 8001b78:	4807      	ldr	r0, [pc, #28]	; (8001b98 <DSI_IO_WriteCmd+0x34>)
 8001b7a:	f002 ffe9 	bl	8004b50 <HAL_DSI_LongWrite>
}
 8001b7e:	b003      	add	sp, #12
 8001b80:	f85d fb04 	ldr.w	pc, [sp], #4
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001b84:	784b      	ldrb	r3, [r1, #1]
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	780b      	ldrb	r3, [r1, #0]
 8001b8a:	2215      	movs	r2, #21
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4802      	ldr	r0, [pc, #8]	; (8001b98 <DSI_IO_WriteCmd+0x34>)
 8001b90:	f002 ffcb 	bl	8004b2a <HAL_DSI_ShortWrite>
 8001b94:	e7f3      	b.n	8001b7e <DSI_IO_WriteCmd+0x1a>
 8001b96:	bf00      	nop
 8001b98:	20001f44 	.word	0x20001f44

08001b9c <BSP_LCD_MspInit>:
{
 8001b9c:	b500      	push	{lr}
 8001b9e:	b085      	sub	sp, #20
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001ba0:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <BSP_LCD_MspInit+0xa4>)
 8001ba2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ba4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ba8:	645a      	str	r2, [r3, #68]	; 0x44
 8001baa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bac:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001bb0:	9201      	str	r2, [sp, #4]
 8001bb2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_LTDC_FORCE_RESET();
 8001bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bb6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bbe:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001bca:	631a      	str	r2, [r3, #48]	; 0x30
 8001bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bce:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001bd2:	9202      	str	r2, [sp, #8]
 8001bd4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001bd6:	691a      	ldr	r2, [r3, #16]
 8001bd8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001bdc:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001be4:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DSI_CLK_ENABLE();
 8001be6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001be8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001bec:	645a      	str	r2, [r3, #68]	; 0x44
 8001bee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bf0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001bf4:	9203      	str	r2, [sp, #12]
 8001bf6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DSI_FORCE_RESET();
 8001bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bfa:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001c00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c02:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2103      	movs	r1, #3
 8001c0c:	2058      	movs	r0, #88	; 0x58
 8001c0e:	f002 f8a1 	bl	8003d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001c12:	2058      	movs	r0, #88	; 0x58
 8001c14:	f002 f8d0 	bl	8003db8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2103      	movs	r1, #3
 8001c1c:	205a      	movs	r0, #90	; 0x5a
 8001c1e:	f002 f899 	bl	8003d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001c22:	205a      	movs	r0, #90	; 0x5a
 8001c24:	f002 f8c8 	bl	8003db8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2103      	movs	r1, #3
 8001c2c:	2062      	movs	r0, #98	; 0x62
 8001c2e:	f002 f891 	bl	8003d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001c32:	2062      	movs	r0, #98	; 0x62
 8001c34:	f002 f8c0 	bl	8003db8 <HAL_NVIC_EnableIRQ>
}
 8001c38:	b005      	add	sp, #20
 8001c3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800

08001c44 <BSP_LCD_InitEx>:
{
 8001c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	4607      	mov	r7, r0
  BSP_LCD_Reset();
 8001c4c:	f7ff fe30 	bl	80018b0 <BSP_LCD_Reset>
  read_id = LCD_IO_GetID();
 8001c50:	f7ff fdfe 	bl	8001850 <LCD_IO_GetID>
  if(read_id != LCD_DSI_ID)
 8001c54:	2811      	cmp	r0, #17
 8001c56:	d003      	beq.n	8001c60 <BSP_LCD_InitEx+0x1c>
    return LCD_ERROR;  
 8001c58:	2001      	movs	r0, #1
}
 8001c5a:	b004      	add	sp, #16
 8001c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  BSP_LCD_MspInit();
 8001c60:	f7ff ff9c 	bl	8001b9c <BSP_LCD_MspInit>
  hdsi_discovery.Instance = DSI;
 8001c64:	4c58      	ldr	r4, [pc, #352]	; (8001dc8 <BSP_LCD_InitEx+0x184>)
 8001c66:	4b59      	ldr	r3, [pc, #356]	; (8001dcc <BSP_LCD_InitEx+0x188>)
 8001c68:	6023      	str	r3, [r4, #0]
  HAL_DSI_DeInit(&(hdsi_discovery));
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f002 fdb3 	bl	80047d6 <HAL_DSI_DeInit>
  dsiPllInit.PLLNDIV  = 100;
 8001c70:	2364      	movs	r3, #100	; 0x64
 8001c72:	9301      	str	r3, [sp, #4]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8001c74:	2305      	movs	r3, #5
 8001c76:	9302      	str	r3, [sp, #8]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9303      	str	r3, [sp, #12]
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	60e3      	str	r3, [r4, #12]
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001c80:	2304      	movs	r3, #4
 8001c82:	60a3      	str	r3, [r4, #8]
  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8001c84:	eb0d 0103 	add.w	r1, sp, r3
 8001c88:	4620      	mov	r0, r4
 8001c8a:	f002 fcdf 	bl	800464c <HAL_DSI_Init>
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8001c8e:	2f00      	cmp	r7, #0
 8001c90:	f040 8092 	bne.w	8001db8 <BSP_LCD_InitEx+0x174>
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8001c94:	4b4e      	ldr	r3, [pc, #312]	; (8001dd0 <BSP_LCD_InitEx+0x18c>)
 8001c96:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001c9a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8001c9c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001ca0:	605a      	str	r2, [r3, #4]
  HACT = lcd_x_size;
 8001ca2:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8001dd0 <BSP_LCD_InitEx+0x18c>
 8001ca6:	f8d8 3000 	ldr.w	r3, [r8]
  VACT = lcd_y_size;
 8001caa:	f8d8 2004 	ldr.w	r2, [r8, #4]
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8001cae:	4c49      	ldr	r4, [pc, #292]	; (8001dd4 <BSP_LCD_InitEx+0x190>)
 8001cb0:	2500      	movs	r5, #0
 8001cb2:	61e5      	str	r5, [r4, #28]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8001cb4:	2105      	movs	r1, #5
 8001cb6:	6221      	str	r1, [r4, #32]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8001cb8:	63e5      	str	r5, [r4, #60]	; 0x3c
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8001cba:	63a5      	str	r5, [r4, #56]	; 0x38
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8001cbc:	6425      	str	r5, [r4, #64]	; 0x40
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8001cbe:	2102      	movs	r1, #2
 8001cc0:	62a1      	str	r1, [r4, #40]	; 0x28
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8001cc2:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001cc6:	6361      	str	r1, [r4, #52]	; 0x34
  hdsivideo_handle.NumberOfChunks = 0;
 8001cc8:	6325      	str	r5, [r4, #48]	; 0x30
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8001cca:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8001ccc:	218f      	movs	r1, #143	; 0x8f
 8001cce:	6461      	str	r1, [r4, #68]	; 0x44
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8001cd0:	f240 1111 	movw	r1, #273	; 0x111
 8001cd4:	64a1      	str	r1, [r4, #72]	; 0x48
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8001cd6:	f203 112f 	addw	r1, r3, #303	; 0x12f
 8001cda:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001cde:	fb03 f301 	mul.w	r3, r3, r1
 8001ce2:	493d      	ldr	r1, [pc, #244]	; (8001dd8 <BSP_LCD_InitEx+0x194>)
 8001ce4:	fba1 1303 	umull	r1, r3, r1, r3
 8001ce8:	0b5b      	lsrs	r3, r3, #13
 8001cea:	64e3      	str	r3, [r4, #76]	; 0x4c
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8001cec:	230c      	movs	r3, #12
 8001cee:	6523      	str	r3, [r4, #80]	; 0x50
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8001cf0:	6563      	str	r3, [r4, #84]	; 0x54
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001cf2:	65a3      	str	r3, [r4, #88]	; 0x58
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8001cf4:	65e2      	str	r2, [r4, #92]	; 0x5c
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8001cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cfa:	6623      	str	r3, [r4, #96]	; 0x60
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001cfc:	2310      	movs	r3, #16
 8001cfe:	6663      	str	r3, [r4, #100]	; 0x64
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8001d00:	66a5      	str	r5, [r4, #104]	; 0x68
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8001d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d06:	66e3      	str	r3, [r4, #108]	; 0x6c
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0c:	6723      	str	r3, [r4, #112]	; 0x70
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8001d0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d12:	6763      	str	r3, [r4, #116]	; 0x74
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8001d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d18:	67a3      	str	r3, [r4, #120]	; 0x78
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8001d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d1e:	67e3      	str	r3, [r4, #124]	; 0x7c
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8001d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d24:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8001d28:	f104 0a1c 	add.w	sl, r4, #28
 8001d2c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001dc8 <BSP_LCD_InitEx+0x184>
 8001d30:	4651      	mov	r1, sl
 8001d32:	4648      	mov	r0, r9
 8001d34:	f002 fd9e 	bl	8004874 <HAL_DSI_ConfigVideoMode>
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8001d38:	4e28      	ldr	r6, [pc, #160]	; (8001ddc <BSP_LCD_InitEx+0x198>)
 8001d3a:	233e      	movs	r3, #62	; 0x3e
 8001d3c:	6173      	str	r3, [r6, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8001d3e:	23b6      	movs	r3, #182	; 0xb6
 8001d40:	61f3      	str	r3, [r6, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8001d42:	f8d8 3000 	ldr.w	r3, [r8]
 8001d46:	f103 02b6 	add.w	r2, r3, #182	; 0xb6
 8001d4a:	6272      	str	r2, [r6, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8001d4c:	f503 7297 	add.w	r2, r3, #302	; 0x12e
 8001d50:	62f2      	str	r2, [r6, #44]	; 0x2c
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8001d52:	6633      	str	r3, [r6, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8001d54:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001d58:	6673      	str	r3, [r6, #100]	; 0x64
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d5a:	2308      	movs	r3, #8
 8001d5c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001d60:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d64:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8001d68:	2307      	movs	r3, #7
 8001d6a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001d6e:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001d72:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8001d76:	f005 f839 	bl	8006dec <HAL_RCCEx_PeriphCLKConfig>
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8001d7a:	f886 5034 	strb.w	r5, [r6, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8001d7e:	f886 5035 	strb.w	r5, [r6, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8001d82:	f886 5036 	strb.w	r5, [r6, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001d86:	6135      	str	r5, [r6, #16]
  hltdc_discovery.Instance = LTDC;
 8001d88:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <BSP_LCD_InitEx+0x19c>)
 8001d8a:	6033      	str	r3, [r6, #0]
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8001d8c:	4651      	mov	r1, sl
 8001d8e:	4630      	mov	r0, r6
 8001d90:	f004 fc72 	bl	8006678 <HAL_LTDCEx_StructInitFromVideoConfig>
  HAL_LTDC_Init(&hltdc_discovery);
 8001d94:	4630      	mov	r0, r6
 8001d96:	f004 fbc7 	bl	8006528 <HAL_LTDC_Init>
  HAL_DSI_Start(&hdsi_discovery);
 8001d9a:	4648      	mov	r0, r9
 8001d9c:	f002 fe9e 	bl	8004adc <HAL_DSI_Start>
  BSP_SDRAM_Init();
 8001da0:	f000 fc12 	bl	80025c8 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001da4:	f108 0008 	add.w	r0, r8, #8
 8001da8:	f7ff fe16 	bl	80019d8 <BSP_LCD_SetFont>
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8001dac:	4639      	mov	r1, r7
 8001dae:	4628      	mov	r0, r5
 8001db0:	f7fe fb32 	bl	8000418 <OTM8009A_Init>
  return LCD_OK; 
 8001db4:	4628      	mov	r0, r5
 8001db6:	e750      	b.n	8001c5a <BSP_LCD_InitEx+0x16>
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <BSP_LCD_InitEx+0x18c>)
 8001dba:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001dbe:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8001dc0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	e76c      	b.n	8001ca2 <BSP_LCD_InitEx+0x5e>
 8001dc8:	20001f44 	.word	0x20001f44
 8001dcc:	40016c00 	.word	0x40016c00
 8001dd0:	20000058 	.word	0x20000058
 8001dd4:	200002dc 	.word	0x200002dc
 8001dd8:	4c751ce3 	.word	0x4c751ce3
 8001ddc:	20001e9c 	.word	0x20001e9c
 8001de0:	40016800 	.word	0x40016800

08001de4 <BSP_LCD_Init>:
{
 8001de4:	b508      	push	{r3, lr}
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8001de6:	2001      	movs	r0, #1
 8001de8:	f7ff ff2c 	bl	8001c44 <BSP_LCD_InitEx>
}
 8001dec:	bd08      	pop	{r3, pc}
	...

08001df0 <BSP_LCD_DrawPixel>:
{
 8001df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df2:	4606      	mov	r6, r0
 8001df4:	460c      	mov	r4, r1
 8001df6:	4615      	mov	r5, r2
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <BSP_LCD_DrawPixel+0x24>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a06      	ldr	r2, [pc, #24]	; (8001e18 <BSP_LCD_DrawPixel+0x28>)
 8001dfe:	2134      	movs	r1, #52	; 0x34
 8001e00:	fb01 2303 	mla	r3, r1, r3, r2
 8001e04:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8001e06:	f7ff fd83 	bl	8001910 <BSP_LCD_GetXSize>
 8001e0a:	fb00 6004 	mla	r0, r0, r4, r6
 8001e0e:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
}
 8001e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e14:	200002dc 	.word	0x200002dc
 8001e18:	20001e9c 	.word	0x20001e9c

08001e1c <DrawChar>:
{
 8001e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e20:	b083      	sub	sp, #12
 8001e22:	4681      	mov	r9, r0
 8001e24:	460e      	mov	r6, r1
 8001e26:	9200      	str	r2, [sp, #0]
  height = DrawProp[ActiveLayer].pFont->Height;
 8001e28:	4b33      	ldr	r3, [pc, #204]	; (8001ef8 <DrawChar+0xdc>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e30:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	88da      	ldrh	r2, [r3, #6]
 8001e38:	9201      	str	r2, [sp, #4]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001e3a:	889d      	ldrh	r5, [r3, #4]
  offset =  8 *((width + 7)/8) -  width ;
 8001e3c:	f105 0b07 	add.w	fp, r5, #7
 8001e40:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8001e44:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 8001e48:	fa5f f888 	uxtb.w	r8, r8
 8001e4c:	b2eb      	uxtb	r3, r5
 8001e4e:	eba8 0803 	sub.w	r8, r8, r3
 8001e52:	fa5f f888 	uxtb.w	r8, r8
  for(i = 0; i < height; i++)
 8001e56:	f04f 0a00 	mov.w	sl, #0
 8001e5a:	e033      	b.n	8001ec4 <DrawChar+0xa8>
      line =  pchar[0];
 8001e5c:	9a00      	ldr	r2, [sp, #0]
 8001e5e:	5cd7      	ldrb	r7, [r2, r3]
    for (j = 0; j < width; j++)
 8001e60:	2400      	movs	r4, #0
 8001e62:	e013      	b.n	8001e8c <DrawChar+0x70>
      line =  (pchar[0]<< 8) | pchar[1];
 8001e64:	9900      	ldr	r1, [sp, #0]
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	7857      	ldrb	r7, [r2, #1]
 8001e6a:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      break;
 8001e6e:	e7f7      	b.n	8001e60 <DrawChar+0x44>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001e70:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <DrawChar+0xdc>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e78:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001e7c:	eb09 0004 	add.w	r0, r9, r4
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	4631      	mov	r1, r6
 8001e84:	b280      	uxth	r0, r0
 8001e86:	f7ff ffb3 	bl	8001df0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001e8a:	3401      	adds	r4, #1
 8001e8c:	42a5      	cmp	r5, r4
 8001e8e:	d915      	bls.n	8001ebc <DrawChar+0xa0>
      if(line & (1 << (width- j + offset- 1)))
 8001e90:	1b2b      	subs	r3, r5, r4
 8001e92:	4443      	add	r3, r8
 8001e94:	3b01      	subs	r3, #1
 8001e96:	2201      	movs	r2, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	423b      	tst	r3, r7
 8001e9e:	d0e7      	beq.n	8001e70 <DrawChar+0x54>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <DrawChar+0xdc>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001ea8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001eac:	eb09 0004 	add.w	r0, r9, r4
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	4631      	mov	r1, r6
 8001eb4:	b280      	uxth	r0, r0
 8001eb6:	f7ff ff9b 	bl	8001df0 <BSP_LCD_DrawPixel>
 8001eba:	e7e6      	b.n	8001e8a <DrawChar+0x6e>
    Ypos++;
 8001ebc:	3601      	adds	r6, #1
 8001ebe:	b2b6      	uxth	r6, r6
  for(i = 0; i < height; i++)
 8001ec0:	f10a 0a01 	add.w	sl, sl, #1
 8001ec4:	9b01      	ldr	r3, [sp, #4]
 8001ec6:	4553      	cmp	r3, sl
 8001ec8:	d912      	bls.n	8001ef0 <DrawChar+0xd4>
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001eca:	fb0a f30b 	mul.w	r3, sl, fp
 8001ece:	9a00      	ldr	r2, [sp, #0]
 8001ed0:	441a      	add	r2, r3
    switch(((width + 7)/8))
 8001ed2:	f1bb 0f01 	cmp.w	fp, #1
 8001ed6:	d0c1      	beq.n	8001e5c <DrawChar+0x40>
 8001ed8:	f1bb 0f02 	cmp.w	fp, #2
 8001edc:	d0c2      	beq.n	8001e64 <DrawChar+0x48>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001ede:	9900      	ldr	r1, [sp, #0]
 8001ee0:	5ccb      	ldrb	r3, [r1, r3]
 8001ee2:	7857      	ldrb	r7, [r2, #1]
 8001ee4:	023f      	lsls	r7, r7, #8
 8001ee6:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8001eea:	7893      	ldrb	r3, [r2, #2]
 8001eec:	431f      	orrs	r7, r3
      break;
 8001eee:	e7b7      	b.n	8001e60 <DrawChar+0x44>
}
 8001ef0:	b003      	add	sp, #12
 8001ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200002dc 	.word	0x200002dc

08001efc <BSP_LCD_DisplayChar>:
{
 8001efc:	b538      	push	{r3, r4, r5, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <BSP_LCD_DisplayChar+0x2c>)
 8001f00:	681c      	ldr	r4, [r3, #0]
 8001f02:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001f06:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001f0a:	68dc      	ldr	r4, [r3, #12]
 8001f0c:	6825      	ldr	r5, [r4, #0]
 8001f0e:	3a20      	subs	r2, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001f10:	88e3      	ldrh	r3, [r4, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001f12:	fb03 f202 	mul.w	r2, r3, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001f16:	88a3      	ldrh	r3, [r4, #4]
 8001f18:	3307      	adds	r3, #7
 8001f1a:	10db      	asrs	r3, r3, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001f1c:	fb03 5202 	mla	r2, r3, r2, r5
 8001f20:	f7ff ff7c 	bl	8001e1c <DrawChar>
}
 8001f24:	bd38      	pop	{r3, r4, r5, pc}
 8001f26:	bf00      	nop
 8001f28:	200002dc 	.word	0x200002dc

08001f2c <BSP_LCD_DisplayStringAt>:
{
 8001f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f30:	4605      	mov	r5, r0
 8001f32:	4688      	mov	r8, r1
 8001f34:	4616      	mov	r6, r2
 8001f36:	461f      	mov	r7, r3
  uint32_t size = 0, xsize = 0;
 8001f38:	2400      	movs	r4, #0
  while (*ptr++) size ++ ;
 8001f3a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001f3e:	b109      	cbz	r1, 8001f44 <BSP_LCD_DisplayStringAt+0x18>
 8001f40:	3401      	adds	r4, #1
 8001f42:	e7fa      	b.n	8001f3a <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001f44:	f7ff fce4 	bl	8001910 <BSP_LCD_GetXSize>
 8001f48:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <BSP_LCD_DisplayStringAt+0xb8>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001f50:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	889b      	ldrh	r3, [r3, #4]
 8001f58:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (Mode)
 8001f5c:	2f01      	cmp	r7, #1
 8001f5e:	d02e      	beq.n	8001fbe <BSP_LCD_DisplayStringAt+0x92>
 8001f60:	2f02      	cmp	r7, #2
 8001f62:	d034      	beq.n	8001fce <BSP_LCD_DisplayStringAt+0xa2>
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001f64:	b22b      	sxth	r3, r5
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	dd38      	ble.n	8001fdc <BSP_LCD_DisplayStringAt+0xb0>
    refcolumn = 1;
 8001f6a:	2400      	movs	r4, #0
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001f6c:	7837      	ldrb	r7, [r6, #0]
 8001f6e:	f7ff fccf 	bl	8001910 <BSP_LCD_GetXSize>
 8001f72:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <BSP_LCD_DisplayStringAt+0xb8>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001f7a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	889a      	ldrh	r2, [r3, #4]
 8001f82:	fb02 0314 	mls	r3, r2, r4, r0
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	bf34      	ite	cc
 8001f8c:	2300      	movcc	r3, #0
 8001f8e:	2301      	movcs	r3, #1
 8001f90:	2f00      	cmp	r7, #0
 8001f92:	bf08      	it	eq
 8001f94:	2300      	moveq	r3, #0
 8001f96:	b31b      	cbz	r3, 8001fe0 <BSP_LCD_DisplayStringAt+0xb4>
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001f98:	463a      	mov	r2, r7
 8001f9a:	4641      	mov	r1, r8
 8001f9c:	4628      	mov	r0, r5
 8001f9e:	f7ff ffad 	bl	8001efc <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <BSP_LCD_DisplayStringAt+0xb8>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001faa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	8898      	ldrh	r0, [r3, #4]
 8001fb2:	4405      	add	r5, r0
 8001fb4:	b2ad      	uxth	r5, r5
    Text++;
 8001fb6:	3601      	adds	r6, #1
    i++;
 8001fb8:	3401      	adds	r4, #1
 8001fba:	b2a4      	uxth	r4, r4
 8001fbc:	e7d6      	b.n	8001f6c <BSP_LCD_DisplayStringAt+0x40>
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001fbe:	1b00      	subs	r0, r0, r4
 8001fc0:	fb00 f303 	mul.w	r3, r0, r3
 8001fc4:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8001fc8:	441d      	add	r5, r3
 8001fca:	b2ad      	uxth	r5, r5
      break;
 8001fcc:	e7ca      	b.n	8001f64 <BSP_LCD_DisplayStringAt+0x38>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001fce:	1b00      	subs	r0, r0, r4
 8001fd0:	fb10 f303 	smulbb	r3, r0, r3
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	1b5d      	subs	r5, r3, r5
 8001fd8:	b2ad      	uxth	r5, r5
      break;
 8001fda:	e7c3      	b.n	8001f64 <BSP_LCD_DisplayStringAt+0x38>
    refcolumn = 1;
 8001fdc:	2501      	movs	r5, #1
 8001fde:	e7c4      	b.n	8001f6a <BSP_LCD_DisplayStringAt+0x3e>
}
 8001fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fe4:	200002dc 	.word	0x200002dc

08001fe8 <BSP_LCD_DrawLine>:
{
 8001fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fec:	b085      	sub	sp, #20
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8001fee:	eba2 0a00 	sub.w	sl, r2, r0
 8001ff2:	f1ba 0f00 	cmp.w	sl, #0
 8001ff6:	bfb8      	it	lt
 8001ff8:	f1ca 0a00 	rsblt	sl, sl, #0
 8001ffc:	fa0f fa8a 	sxth.w	sl, sl
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002000:	eba3 0b01 	sub.w	fp, r3, r1
 8002004:	f1bb 0f00 	cmp.w	fp, #0
 8002008:	bfb8      	it	lt
 800200a:	f1cb 0b00 	rsblt	fp, fp, #0
 800200e:	fa0f fb8b 	sxth.w	fp, fp
  x = x1;                       /* Start x off at the first pixel */
 8002012:	b204      	sxth	r4, r0
  y = y1;                       /* Start y off at the first pixel */
 8002014:	b20e      	sxth	r6, r1
  if (x2 >= x1)                 /* The x-values are increasing */
 8002016:	4282      	cmp	r2, r0
 8002018:	d315      	bcc.n	8002046 <BSP_LCD_DrawLine+0x5e>
    xinc1 = 1;
 800201a:	2201      	movs	r2, #1
 800201c:	9202      	str	r2, [sp, #8]
  if (y2 >= y1)                 /* The y-values are increasing */
 800201e:	428b      	cmp	r3, r1
 8002020:	d315      	bcc.n	800204e <BSP_LCD_DrawLine+0x66>
    yinc1 = 1;
 8002022:	2301      	movs	r3, #1
 8002024:	9303      	str	r3, [sp, #12]
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002026:	45da      	cmp	sl, fp
 8002028:	db18      	blt.n	800205c <BSP_LCD_DrawLine+0x74>
    num = deltax / 2;
 800202a:	46d0      	mov	r8, sl
 800202c:	f1ba 0f00 	cmp.w	sl, #0
 8002030:	db11      	blt.n	8002056 <BSP_LCD_DrawLine+0x6e>
 8002032:	f348 084f 	sbfx	r8, r8, #1, #16
    numpixels = deltax;         /* There are more x-values than y-values */
 8002036:	9b02      	ldr	r3, [sp, #8]
 8002038:	9300      	str	r3, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800203a:	2300      	movs	r3, #0
 800203c:	9302      	str	r3, [sp, #8]
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800203e:	9301      	str	r3, [sp, #4]
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002040:	f04f 0900 	mov.w	r9, #0
 8002044:	e026      	b.n	8002094 <BSP_LCD_DrawLine+0xac>
    xinc1 = -1;
 8002046:	f04f 32ff 	mov.w	r2, #4294967295
 800204a:	9202      	str	r2, [sp, #8]
 800204c:	e7e7      	b.n	800201e <BSP_LCD_DrawLine+0x36>
    yinc1 = -1;
 800204e:	f04f 33ff 	mov.w	r3, #4294967295
 8002052:	9303      	str	r3, [sp, #12]
 8002054:	e7e7      	b.n	8002026 <BSP_LCD_DrawLine+0x3e>
    num = deltax / 2;
 8002056:	f10a 0801 	add.w	r8, sl, #1
 800205a:	e7ea      	b.n	8002032 <BSP_LCD_DrawLine+0x4a>
    num = deltay / 2;
 800205c:	46d8      	mov	r8, fp
 800205e:	f1bb 0f00 	cmp.w	fp, #0
 8002062:	db0a      	blt.n	800207a <BSP_LCD_DrawLine+0x92>
 8002064:	f348 084f 	sbfx	r8, r8, #1, #16
 8002068:	4653      	mov	r3, sl
    den = deltay;
 800206a:	46da      	mov	sl, fp
    numadd = deltax;
 800206c:	469b      	mov	fp, r3
    num = deltay / 2;
 800206e:	9b03      	ldr	r3, [sp, #12]
 8002070:	9301      	str	r3, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002072:	2300      	movs	r3, #0
 8002074:	9303      	str	r3, [sp, #12]
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	e7e2      	b.n	8002040 <BSP_LCD_DrawLine+0x58>
    num = deltay / 2;
 800207a:	f10b 0801 	add.w	r8, fp, #1
 800207e:	e7f1      	b.n	8002064 <BSP_LCD_DrawLine+0x7c>
    x += xinc2;                               /* Change the x as appropriate */
 8002080:	9b00      	ldr	r3, [sp, #0]
 8002082:	441c      	add	r4, r3
 8002084:	b224      	sxth	r4, r4
    y += yinc2;                               /* Change the y as appropriate */
 8002086:	9b01      	ldr	r3, [sp, #4]
 8002088:	441e      	add	r6, r3
 800208a:	b236      	sxth	r6, r6
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800208c:	f109 0901 	add.w	r9, r9, #1
 8002090:	fa0f f989 	sxth.w	r9, r9
 8002094:	45ca      	cmp	sl, r9
 8002096:	db1e      	blt.n	80020d6 <BSP_LCD_DrawLine+0xee>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002098:	b2a7      	uxth	r7, r4
 800209a:	b2b5      	uxth	r5, r6
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <BSP_LCD_DrawLine+0xf4>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80020a4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	4629      	mov	r1, r5
 80020ac:	4638      	mov	r0, r7
 80020ae:	f7ff fe9f 	bl	8001df0 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 80020b2:	44d8      	add	r8, fp
 80020b4:	fa1f f388 	uxth.w	r3, r8
 80020b8:	fa0f f888 	sxth.w	r8, r8
    if (num >= den)                           /* Check if numerator >= denominator */
 80020bc:	45c2      	cmp	sl, r8
 80020be:	dcdf      	bgt.n	8002080 <BSP_LCD_DrawLine+0x98>
      num -= den;                             /* Calculate the new numerator value */
 80020c0:	eba3 080a 	sub.w	r8, r3, sl
 80020c4:	fa0f f888 	sxth.w	r8, r8
      x += xinc1;                             /* Change the x as appropriate */
 80020c8:	9b02      	ldr	r3, [sp, #8]
 80020ca:	18fc      	adds	r4, r7, r3
 80020cc:	b224      	sxth	r4, r4
      y += yinc1;                             /* Change the y as appropriate */
 80020ce:	9b03      	ldr	r3, [sp, #12]
 80020d0:	18ee      	adds	r6, r5, r3
 80020d2:	b236      	sxth	r6, r6
 80020d4:	e7d4      	b.n	8002080 <BSP_LCD_DrawLine+0x98>
}
 80020d6:	b005      	add	sp, #20
 80020d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020dc:	200002dc 	.word	0x200002dc

080020e0 <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80020e0:	b500      	push	{lr}
 80020e2:	b083      	sub	sp, #12
  __IO uint8_t  status = SD_PRESENT;
 80020e4:	2301      	movs	r3, #1
 80020e6:	f88d 3007 	strb.w	r3, [sp, #7]

  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 80020ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020ee:	4807      	ldr	r0, [pc, #28]	; (800210c <BSP_SD_IsDetected+0x2c>)
 80020f0:	f002 fe76 	bl	8004de0 <HAL_GPIO_ReadPin>
 80020f4:	2801      	cmp	r0, #1
 80020f6:	d004      	beq.n	8002102 <BSP_SD_IsDetected+0x22>
  {
    status = SD_NOT_PRESENT;
  }

    return status;
 80020f8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80020fc:	b003      	add	sp, #12
 80020fe:	f85d fb04 	ldr.w	pc, [sp], #4
    status = SD_NOT_PRESENT;
 8002102:	2300      	movs	r3, #0
 8002104:	f88d 3007 	strb.w	r3, [sp, #7]
 8002108:	e7f6      	b.n	80020f8 <BSP_SD_IsDetected+0x18>
 800210a:	bf00      	nop
 800210c:	40022000 	.word	0x40022000

08002110 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8002110:	b500      	push	{lr}
 8002112:	b083      	sub	sp, #12
  if(HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	4613      	mov	r3, r2
 8002118:	460a      	mov	r2, r1
 800211a:	4601      	mov	r1, r0
 800211c:	4803      	ldr	r0, [pc, #12]	; (800212c <BSP_SD_ReadBlocks+0x1c>)
 800211e:	f006 f83d 	bl	800819c <HAL_SD_ReadBlocks>
 8002122:	b100      	cbz	r0, 8002126 <BSP_SD_ReadBlocks+0x16>
  {
    return MSD_ERROR;
 8002124:	2001      	movs	r0, #1
  }
  else
  {
    return MSD_OK;
  }
}
 8002126:	b003      	add	sp, #12
 8002128:	f85d fb04 	ldr.w	pc, [sp], #4
 800212c:	20001f60 	.word	0x20001f60

08002130 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8002130:	b500      	push	{lr}
 8002132:	b083      	sub	sp, #12
  if(HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	4613      	mov	r3, r2
 8002138:	460a      	mov	r2, r1
 800213a:	4601      	mov	r1, r0
 800213c:	4803      	ldr	r0, [pc, #12]	; (800214c <BSP_SD_WriteBlocks+0x1c>)
 800213e:	f006 f95f 	bl	8008400 <HAL_SD_WriteBlocks>
 8002142:	b100      	cbz	r0, 8002146 <BSP_SD_WriteBlocks+0x16>
  {
    return MSD_ERROR;
 8002144:	2001      	movs	r0, #1
  }
  else
  {
    return MSD_OK;
  }
}
 8002146:	b003      	add	sp, #12
 8002148:	f85d fb04 	ldr.w	pc, [sp], #4
 800214c:	20001f60 	.word	0x20001f60

08002150 <BSP_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: SD handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8002150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002154:	b08b      	sub	sp, #44	; 0x2c
 8002156:	4605      	mov	r5, r0
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDMMC2 clock */
  __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002158:	4b5e      	ldr	r3, [pc, #376]	; (80022d4 <BSP_SD_MspInit+0x184>)
 800215a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800215c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002160:	645a      	str	r2, [r3, #68]	; 0x44
 8002162:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002164:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002168:	9200      	str	r2, [sp, #0]
 800216a:	9a00      	ldr	r2, [sp, #0]

  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 800216c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800216e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
 8002174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002176:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800217a:	9201      	str	r2, [sp, #4]
 800217c:	9a01      	ldr	r2, [sp, #4]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002180:	f042 0202 	orr.w	r2, r2, #2
 8002184:	631a      	str	r2, [r3, #48]	; 0x30
 8002186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002188:	f002 0202 	and.w	r2, r2, #2
 800218c:	9202      	str	r2, [sp, #8]
 800218e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002192:	f042 0208 	orr.w	r2, r2, #8
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
 8002198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800219a:	f002 0208 	and.w	r2, r2, #8
 800219e:	9203      	str	r2, [sp, #12]
 80021a0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021a8:	631a      	str	r2, [r3, #48]	; 0x30
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b0:	9304      	str	r3, [sp, #16]
 80021b2:	9b04      	ldr	r3, [sp, #16]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80021bc:	2703      	movs	r7, #3
 80021be:	9708      	str	r7, [sp, #32]

  /* GPIOB configuration */
  gpio_init_structure.Alternate = GPIO_AF10_SDMMC2;  
 80021c0:	230a      	movs	r3, #10
 80021c2:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_4;
 80021c4:	2318      	movs	r3, #24
 80021c6:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 80021c8:	a905      	add	r1, sp, #20
 80021ca:	4843      	ldr	r0, [pc, #268]	; (80022d8 <BSP_SD_MspInit+0x188>)
 80021cc:	f002 fd18 	bl	8004c00 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Alternate = GPIO_AF11_SDMMC2;  
 80021d0:	230b      	movs	r3, #11
 80021d2:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80021d4:	23c0      	movs	r3, #192	; 0xc0
 80021d6:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80021d8:	a905      	add	r1, sp, #20
 80021da:	4840      	ldr	r0, [pc, #256]	; (80022dc <BSP_SD_MspInit+0x18c>)
 80021dc:	f002 fd10 	bl	8004c00 <HAL_GPIO_Init>
  
  /* GPIOG configuration */ 
  gpio_init_structure.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 80021e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021e4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80021e6:	a905      	add	r1, sp, #20
 80021e8:	483d      	ldr	r0, [pc, #244]	; (80022e0 <BSP_SD_MspInit+0x190>)
 80021ea:	f002 fd09 	bl	8004c00 <HAL_GPIO_Init>
  
  /* NVIC configuration for SDMMC2 interrupts */
  HAL_NVIC_SetPriority(SDMMC2_IRQn, 0x0E, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	210e      	movs	r1, #14
 80021f2:	2067      	movs	r0, #103	; 0x67
 80021f4:	f001 fdae 	bl	8003d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC2_IRQn);  
 80021f8:	2067      	movs	r0, #103	; 0x67
 80021fa:	f001 fddd 	bl	8003db8 <HAL_NVIC_EnableIRQ>

  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 80021fe:	4c39      	ldr	r4, [pc, #228]	; (80022e4 <BSP_SD_MspInit+0x194>)
 8002200:	f04f 5bb0 	mov.w	fp, #369098752	; 0x16000000
 8002204:	f8c4 b004 	str.w	fp, [r4, #4]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002208:	2600      	movs	r6, #0
 800220a:	60a6      	str	r6, [r4, #8]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800220c:	60e6      	str	r6, [r4, #12]
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800220e:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8002212:	f8c4 a010 	str.w	sl, [r4, #16]
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002216:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 800221a:	f8c4 9014 	str.w	r9, [r4, #20]
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800221e:	f44f 4880 	mov.w	r8, #16384	; 0x4000
 8002222:	f8c4 8018 	str.w	r8, [r4, #24]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8002226:	2320      	movs	r3, #32
 8002228:	61e3      	str	r3, [r4, #28]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800222a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800222e:	6223      	str	r3, [r4, #32]
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8002230:	2304      	movs	r3, #4
 8002232:	6263      	str	r3, [r4, #36]	; 0x24
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002234:	62a7      	str	r7, [r4, #40]	; 0x28
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 8002236:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800223a:	62e3      	str	r3, [r4, #44]	; 0x2c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 800223c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002240:	6323      	str	r3, [r4, #48]	; 0x30

  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8002242:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <BSP_SD_MspInit+0x198>)
 8002244:	6023      	str	r3, [r4, #0]

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 8002246:	642c      	str	r4, [r5, #64]	; 0x40
 8002248:	63a5      	str	r5, [r4, #56]	; 0x38

  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 800224a:	4620      	mov	r0, r4
 800224c:	f001 feba 	bl	8003fc4 <HAL_DMA_DeInit>

  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 8002250:	4620      	mov	r0, r4
 8002252:	f001 fe51 	bl	8003ef8 <HAL_DMA_Init>

  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 8002256:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800225a:	2340      	movs	r3, #64	; 0x40
 800225c:	66a3      	str	r3, [r4, #104]	; 0x68
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800225e:	66e6      	str	r6, [r4, #108]	; 0x6c
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002260:	f8c4 a070 	str.w	sl, [r4, #112]	; 0x70
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002264:	f8c4 9074 	str.w	r9, [r4, #116]	; 0x74
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002268:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 800226c:	2320      	movs	r3, #32
 800226e:	67e3      	str	r3, [r4, #124]	; 0x7c
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8002270:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002274:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8002278:	2304      	movs	r3, #4
 800227a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800227e:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 8002282:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002286:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 800228a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800228e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90

  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8002292:	4627      	mov	r7, r4
 8002294:	4b15      	ldr	r3, [pc, #84]	; (80022ec <BSP_SD_MspInit+0x19c>)
 8002296:	f847 3f60 	str.w	r3, [r7, #96]!

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 800229a:	63ef      	str	r7, [r5, #60]	; 0x3c
 800229c:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98

  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 80022a0:	4638      	mov	r0, r7
 80022a2:	f001 fe8f 	bl	8003fc4 <HAL_DMA_DeInit>

  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle);
 80022a6:	4638      	mov	r0, r7
 80022a8:	f001 fe26 	bl	8003ef8 <HAL_DMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 80022ac:	4632      	mov	r2, r6
 80022ae:	210f      	movs	r1, #15
 80022b0:	2038      	movs	r0, #56	; 0x38
 80022b2:	f001 fd4f 	bl	8003d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 80022b6:	2038      	movs	r0, #56	; 0x38
 80022b8:	f001 fd7e 	bl	8003db8 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 80022bc:	4632      	mov	r2, r6
 80022be:	210f      	movs	r1, #15
 80022c0:	2044      	movs	r0, #68	; 0x44
 80022c2:	f001 fd47 	bl	8003d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 80022c6:	2044      	movs	r0, #68	; 0x44
 80022c8:	f001 fd76 	bl	8003db8 <HAL_NVIC_EnableIRQ>
}
 80022cc:	b00b      	add	sp, #44	; 0x2c
 80022ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40020400 	.word	0x40020400
 80022dc:	40020c00 	.word	0x40020c00
 80022e0:	40021800 	.word	0x40021800
 80022e4:	200003f4 	.word	0x200003f4
 80022e8:	40026410 	.word	0x40026410
 80022ec:	40026488 	.word	0x40026488

080022f0 <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.  
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 80022f0:	b500      	push	{lr}
 80022f2:	b087      	sub	sp, #28
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <BSP_SD_Detect_MspInit+0x38>)
 80022f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022fc:	631a      	str	r2, [r3, #48]	; 0x30
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	9b00      	ldr	r3, [sp, #0]

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 8002308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800230c:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 800230e:	2300      	movs	r3, #0
 8002310:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002312:	2301      	movs	r3, #1
 8002314:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002316:	2303      	movs	r3, #3
 8002318:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800231a:	a901      	add	r1, sp, #4
 800231c:	4803      	ldr	r0, [pc, #12]	; (800232c <BSP_SD_Detect_MspInit+0x3c>)
 800231e:	f002 fc6f 	bl	8004c00 <HAL_GPIO_Init>
}
 8002322:	b007      	add	sp, #28
 8002324:	f85d fb04 	ldr.w	pc, [sp], #4
 8002328:	40023800 	.word	0x40023800
 800232c:	40022000 	.word	0x40022000

08002330 <BSP_SD_Init>:
{
 8002330:	b538      	push	{r3, r4, r5, lr}
    uSdHandle.Instance = SDMMC2;
 8002332:	4813      	ldr	r0, [pc, #76]	; (8002380 <BSP_SD_Init+0x50>)
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <BSP_SD_Init+0x54>)
 8002336:	6003      	str	r3, [r0, #0]
    uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002338:	2100      	movs	r1, #0
 800233a:	6041      	str	r1, [r0, #4]
    uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800233c:	6081      	str	r1, [r0, #8]
    uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800233e:	60c1      	str	r1, [r0, #12]
    uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002340:	6101      	str	r1, [r0, #16]
    uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002342:	6141      	str	r1, [r0, #20]
    uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 8002344:	6181      	str	r1, [r0, #24]
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8002346:	f7ff ffd3 	bl	80022f0 <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 800234a:	f7ff fec9 	bl	80020e0 <BSP_SD_IsDetected>
 800234e:	2801      	cmp	r0, #1
 8002350:	d002      	beq.n	8002358 <BSP_SD_Init+0x28>
    return MSD_ERROR_SD_NOT_PRESENT;
 8002352:	2402      	movs	r4, #2
}
 8002354:	4620      	mov	r0, r4
 8002356:	bd38      	pop	{r3, r4, r5, pc}
 8002358:	4604      	mov	r4, r0
  BSP_SD_MspInit(&uSdHandle, NULL);
 800235a:	4d09      	ldr	r5, [pc, #36]	; (8002380 <BSP_SD_Init+0x50>)
 800235c:	2100      	movs	r1, #0
 800235e:	4628      	mov	r0, r5
 8002360:	f7ff fef6 	bl	8002150 <BSP_SD_MspInit>
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 8002364:	4628      	mov	r0, r5
 8002366:	f006 faf2 	bl	800894e <HAL_SD_Init>
 800236a:	2800      	cmp	r0, #0
 800236c:	d1f2      	bne.n	8002354 <BSP_SD_Init+0x24>
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800236e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002372:	4628      	mov	r0, r5
 8002374:	f006 fb18 	bl	80089a8 <HAL_SD_ConfigWideBusOperation>
 8002378:	2800      	cmp	r0, #0
 800237a:	d1eb      	bne.n	8002354 <BSP_SD_Init+0x24>
      sd_state = MSD_OK;
 800237c:	4604      	mov	r4, r0
 800237e:	e7e9      	b.n	8002354 <BSP_SD_Init+0x24>
 8002380:	20001f60 	.word	0x20001f60
 8002384:	40011c00 	.word	0x40011c00

08002388 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8002388:	b508      	push	{r3, lr}
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800238a:	4803      	ldr	r0, [pc, #12]	; (8002398 <BSP_SD_GetCardState+0x10>)
 800238c:	f006 fb5e 	bl	8008a4c <HAL_SD_GetCardState>
}
 8002390:	3804      	subs	r0, #4
 8002392:	bf18      	it	ne
 8002394:	2001      	movne	r0, #1
 8002396:	bd08      	pop	{r3, pc}
 8002398:	20001f60 	.word	0x20001f60

0800239c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800239c:	b508      	push	{r3, lr}
 800239e:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 80023a0:	4801      	ldr	r0, [pc, #4]	; (80023a8 <BSP_SD_GetCardInfo+0xc>)
 80023a2:	f006 faef 	bl	8008984 <HAL_SD_GetCardInfo>
}
 80023a6:	bd08      	pop	{r3, pc}
 80023a8:	20001f60 	.word	0x20001f60

080023ac <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80023ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023b0:	b083      	sub	sp, #12
 80023b2:	4681      	mov	r9, r0
  __IO uint32_t tmpmrd = 0;
 80023b4:	f04f 0800 	mov.w	r8, #0
 80023b8:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80023bc:	4c20      	ldr	r4, [pc, #128]	; (8002440 <BSP_SDRAM_Initialization_sequence+0x94>)
 80023be:	2601      	movs	r6, #1
 80023c0:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80023c2:	2710      	movs	r7, #16
 80023c4:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 80023c6:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 80023c8:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80023cc:	4d1d      	ldr	r5, [pc, #116]	; (8002444 <BSP_SDRAM_Initialization_sequence+0x98>)
 80023ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023d2:	4621      	mov	r1, r4
 80023d4:	4628      	mov	r0, r5
 80023d6:	f006 fb6b 	bl	8008ab0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80023da:	4630      	mov	r0, r6
 80023dc:	f001 fc9a 	bl	8003d14 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80023e0:	2302      	movs	r3, #2
 80023e2:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80023e4:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 80023e6:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 80023e8:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80023ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023f0:	4621      	mov	r1, r4
 80023f2:	4628      	mov	r0, r5
 80023f4:	f006 fb5c 	bl	8008ab0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80023f8:	2303      	movs	r3, #3
 80023fa:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80023fc:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 80023fe:	2308      	movs	r3, #8
 8002400:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8002402:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800240a:	4621      	mov	r1, r4
 800240c:	4628      	mov	r0, r5
 800240e:	f006 fb4f 	bl	8008ab0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002412:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002416:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002418:	2304      	movs	r3, #4
 800241a:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800241c:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 800241e:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002420:	9b01      	ldr	r3, [sp, #4]
 8002422:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002428:	4621      	mov	r1, r4
 800242a:	4628      	mov	r0, r5
 800242c:	f006 fb40 	bl	8008ab0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002430:	4649      	mov	r1, r9
 8002432:	4628      	mov	r0, r5
 8002434:	f006 fb57 	bl	8008ae6 <HAL_SDRAM_ProgramRefreshRate>
}
 8002438:	b003      	add	sp, #12
 800243a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800243e:	bf00      	nop
 8002440:	20000574 	.word	0x20000574
 8002444:	20001fe4 	.word	0x20001fe4

08002448 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002448:	b570      	push	{r4, r5, r6, lr}
 800244a:	b08e      	sub	sp, #56	; 0x38
 800244c:	4606      	mov	r6, r0
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800244e:	4b55      	ldr	r3, [pc, #340]	; (80025a4 <BSP_SDRAM_MspInit+0x15c>)
 8002450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	639a      	str	r2, [r3, #56]	; 0x38
 8002458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800245a:	f002 0201 	and.w	r2, r2, #1
 800245e:	9201      	str	r2, [sp, #4]
 8002460:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002464:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002468:	631a      	str	r2, [r3, #48]	; 0x30
 800246a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800246c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002470:	9202      	str	r2, [sp, #8]
 8002472:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002476:	f042 0208 	orr.w	r2, r2, #8
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
 800247c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800247e:	f002 0208 	and.w	r2, r2, #8
 8002482:	9203      	str	r2, [sp, #12]
 8002484:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002488:	f042 0210 	orr.w	r2, r2, #16
 800248c:	631a      	str	r2, [r3, #48]	; 0x30
 800248e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002490:	f002 0210 	and.w	r2, r2, #16
 8002494:	9204      	str	r2, [sp, #16]
 8002496:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800249a:	f042 0220 	orr.w	r2, r2, #32
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
 80024a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a2:	f002 0220 	and.w	r2, r2, #32
 80024a6:	9205      	str	r2, [sp, #20]
 80024a8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
 80024b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80024b8:	9206      	str	r2, [sp, #24]
 80024ba:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
 80024c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80024ca:	9207      	str	r2, [sp, #28]
 80024cc:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80024ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024dc:	9308      	str	r3, [sp, #32]
 80024de:	9b08      	ldr	r3, [sp, #32]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80024e4:	2301      	movs	r3, #1
 80024e6:	930b      	str	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80024e8:	2503      	movs	r5, #3
 80024ea:	950c      	str	r5, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80024ec:	230c      	movs	r3, #12
 80024ee:	930d      	str	r3, [sp, #52]	; 0x34
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80024f0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80024f4:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80024f6:	a909      	add	r1, sp, #36	; 0x24
 80024f8:	482b      	ldr	r0, [pc, #172]	; (80025a8 <BSP_SDRAM_MspInit+0x160>)
 80024fa:	f002 fb81 	bl	8004c00 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80024fe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002502:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002504:	a909      	add	r1, sp, #36	; 0x24
 8002506:	4829      	ldr	r0, [pc, #164]	; (80025ac <BSP_SDRAM_MspInit+0x164>)
 8002508:	f002 fb7a 	bl	8004c00 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800250c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002510:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002512:	a909      	add	r1, sp, #36	; 0x24
 8002514:	4826      	ldr	r0, [pc, #152]	; (80025b0 <BSP_SDRAM_MspInit+0x168>)
 8002516:	f002 fb73 	bl	8004c00 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 800251a:	f248 1337 	movw	r3, #33079	; 0x8137
 800251e:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002520:	a909      	add	r1, sp, #36	; 0x24
 8002522:	4824      	ldr	r0, [pc, #144]	; (80025b4 <BSP_SDRAM_MspInit+0x16c>)
 8002524:	f002 fb6c 	bl	8004c00 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002528:	f64f 732c 	movw	r3, #65324	; 0xff2c
 800252c:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800252e:	a909      	add	r1, sp, #36	; 0x24
 8002530:	4821      	ldr	r0, [pc, #132]	; (80025b8 <BSP_SDRAM_MspInit+0x170>)
 8002532:	f002 fb65 	bl	8004c00 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002536:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800253a:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 800253c:	a909      	add	r1, sp, #36	; 0x24
 800253e:	481f      	ldr	r0, [pc, #124]	; (80025bc <BSP_SDRAM_MspInit+0x174>)
 8002540:	f002 fb5e 	bl	8004c00 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002544:	4b1e      	ldr	r3, [pc, #120]	; (80025c0 <BSP_SDRAM_MspInit+0x178>)
 8002546:	2400      	movs	r4, #0
 8002548:	615c      	str	r4, [r3, #20]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800254a:	2280      	movs	r2, #128	; 0x80
 800254c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800254e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002552:	61da      	str	r2, [r3, #28]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002554:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002558:	621a      	str	r2, [r3, #32]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800255a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800255e:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002560:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002564:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002566:	62dc      	str	r4, [r3, #44]	; 0x2c
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002568:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800256e:	635c      	str	r4, [r3, #52]	; 0x34
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002570:	639d      	str	r5, [r3, #56]	; 0x38
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002572:	63dc      	str	r4, [r3, #60]	; 0x3c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002574:	641c      	str	r4, [r3, #64]	; 0x40
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002576:	461d      	mov	r5, r3
 8002578:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <BSP_SDRAM_MspInit+0x17c>)
 800257a:	f845 2f10 	str.w	r2, [r5, #16]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800257e:	6335      	str	r5, [r6, #48]	; 0x30
 8002580:	649e      	str	r6, [r3, #72]	; 0x48
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002582:	4628      	mov	r0, r5
 8002584:	f001 fd1e 	bl	8003fc4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002588:	4628      	mov	r0, r5
 800258a:	f001 fcb5 	bl	8003ef8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800258e:	4622      	mov	r2, r4
 8002590:	210f      	movs	r1, #15
 8002592:	2038      	movs	r0, #56	; 0x38
 8002594:	f001 fbde 	bl	8003d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002598:	2038      	movs	r0, #56	; 0x38
 800259a:	f001 fc0d 	bl	8003db8 <HAL_NVIC_EnableIRQ>
}
 800259e:	b00e      	add	sp, #56	; 0x38
 80025a0:	bd70      	pop	{r4, r5, r6, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40020c00 	.word	0x40020c00
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40021400 	.word	0x40021400
 80025b4:	40021800 	.word	0x40021800
 80025b8:	40021c00 	.word	0x40021c00
 80025bc:	40022000 	.word	0x40022000
 80025c0:	20000574 	.word	0x20000574
 80025c4:	40026410 	.word	0x40026410

080025c8 <BSP_SDRAM_Init>:
{ 
 80025c8:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80025ca:	4c1d      	ldr	r4, [pc, #116]	; (8002640 <BSP_SDRAM_Init+0x78>)
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <BSP_SDRAM_Init+0x7c>)
 80025ce:	6023      	str	r3, [r4, #0]
  Timing.LoadToActiveDelay    = 2;
 80025d0:	4d1d      	ldr	r5, [pc, #116]	; (8002648 <BSP_SDRAM_Init+0x80>)
 80025d2:	2302      	movs	r3, #2
 80025d4:	672b      	str	r3, [r5, #112]	; 0x70
  Timing.ExitSelfRefreshDelay = 7;
 80025d6:	2107      	movs	r1, #7
 80025d8:	6769      	str	r1, [r5, #116]	; 0x74
  Timing.SelfRefreshTime      = 4;
 80025da:	2204      	movs	r2, #4
 80025dc:	67aa      	str	r2, [r5, #120]	; 0x78
  Timing.RowCycleDelay        = 7;
 80025de:	67e9      	str	r1, [r5, #124]	; 0x7c
  Timing.WriteRecoveryTime    = 2;
 80025e0:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
  Timing.RPDelay              = 2;
 80025e4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
  Timing.RCDDelay             = 2;
 80025e8:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80025ec:	2100      	movs	r1, #0
 80025ee:	6061      	str	r1, [r4, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80025f0:	60a1      	str	r1, [r4, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80025f2:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80025f4:	2320      	movs	r3, #32
 80025f6:	6123      	str	r3, [r4, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80025f8:	2340      	movs	r3, #64	; 0x40
 80025fa:	6163      	str	r3, [r4, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80025fc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002600:	61a3      	str	r3, [r4, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002602:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002604:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002608:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800260a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800260e:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002610:	62a1      	str	r1, [r4, #40]	; 0x28
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002612:	4620      	mov	r0, r4
 8002614:	f7ff ff18 	bl	8002448 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002618:	f105 0170 	add.w	r1, r5, #112	; 0x70
 800261c:	4620      	mov	r0, r4
 800261e:	f006 fa27 	bl	8008a70 <HAL_SDRAM_Init>
 8002622:	b148      	cbz	r0, 8002638 <BSP_SDRAM_Init+0x70>
    sdramstatus = SDRAM_ERROR;
 8002624:	4b09      	ldr	r3, [pc, #36]	; (800264c <BSP_SDRAM_Init+0x84>)
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800262a:	f240 6003 	movw	r0, #1539	; 0x603
 800262e:	f7ff febd 	bl	80023ac <BSP_SDRAM_Initialization_sequence>
}
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <BSP_SDRAM_Init+0x84>)
 8002634:	7818      	ldrb	r0, [r3, #0]
 8002636:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_OK;
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <BSP_SDRAM_Init+0x84>)
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
 800263e:	e7f4      	b.n	800262a <BSP_SDRAM_Init+0x62>
 8002640:	20001fe4 	.word	0x20001fe4
 8002644:	a0000140 	.word	0xa0000140
 8002648:	20000574 	.word	0x20000574
 800264c:	20000088 	.word	0x20000088

08002650 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002650:	b570      	push	{r4, r5, r6, lr}
 8002652:	4606      	mov	r6, r0
 8002654:	460d      	mov	r5, r1
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8002656:	4c1a      	ldr	r4, [pc, #104]	; (80026c0 <BSP_TS_Init+0x70>)
 8002658:	6823      	ldr	r3, [r4, #0]
 800265a:	4a1a      	ldr	r2, [pc, #104]	; (80026c4 <BSP_TS_Init+0x74>)
 800265c:	7810      	ldrb	r0, [r2, #0]
 800265e:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8002660:	6863      	ldr	r3, [r4, #4]
 8002662:	2054      	movs	r0, #84	; 0x54
 8002664:	4798      	blx	r3
 8002666:	b2c4      	uxtb	r4, r0
  if(ts_id1 != FT6206_ID_VALUE)
 8002668:	2c11      	cmp	r4, #17
 800266a:	d01d      	beq.n	80026a8 <BSP_TS_Init+0x58>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <BSP_TS_Init+0x70>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2070      	movs	r0, #112	; 0x70
 8002672:	4798      	blx	r3
 8002674:	b2c3      	uxtb	r3, r0
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8002676:	4a13      	ldr	r2, [pc, #76]	; (80026c4 <BSP_TS_Init+0x74>)
 8002678:	2170      	movs	r1, #112	; 0x70
 800267a:	7011      	strb	r1, [r2, #0]
    I2C_Address    = TS_I2C_ADDRESS;    
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 800267c:	2b11      	cmp	r3, #17
 800267e:	bf18      	it	ne
 8002680:	2c11      	cmpne	r4, #17
 8002682:	d11a      	bne.n	80026ba <BSP_TS_Init+0x6a>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8002684:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <BSP_TS_Init+0x74>)
 8002686:	4a0e      	ldr	r2, [pc, #56]	; (80026c0 <BSP_TS_Init+0x70>)
 8002688:	605a      	str	r2, [r3, #4]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 800268a:	42ae      	cmp	r6, r5
 800268c:	d211      	bcs.n	80026b2 <BSP_TS_Init+0x62>
    {
      ts_orientation = TS_SWAP_NONE;                
 800268e:	2201      	movs	r2, #1
 8002690:	721a      	strb	r2, [r3, #8]
    }

    if(ts_status == TS_OK)
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <BSP_TS_Init+0x70>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	4c0b      	ldr	r4, [pc, #44]	; (80026c4 <BSP_TS_Init+0x74>)
 8002698:	7820      	ldrb	r0, [r4, #0]
 800269a:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 800269c:	6863      	ldr	r3, [r4, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	7820      	ldrb	r0, [r4, #0]
 80026a2:	4798      	blx	r3
  uint8_t ts_status = TS_OK;
 80026a4:	2000      	movs	r0, #0
  {
    ts_status = TS_DEVICE_NOT_FOUND;
  }

  return (ts_status);
}
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
    I2C_Address    = TS_I2C_ADDRESS;    
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <BSP_TS_Init+0x74>)
 80026aa:	2254      	movs	r2, #84	; 0x54
 80026ac:	701a      	strb	r2, [r3, #0]
  uint8_t ts_id1, ts_id2 = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e7e4      	b.n	800267c <BSP_TS_Init+0x2c>
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 80026b2:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <BSP_TS_Init+0x74>)
 80026b4:	220c      	movs	r2, #12
 80026b6:	721a      	strb	r2, [r3, #8]
 80026b8:	e7eb      	b.n	8002692 <BSP_TS_Init+0x42>
    ts_status = TS_DEVICE_NOT_FOUND;
 80026ba:	2003      	movs	r0, #3
 80026bc:	e7f3      	b.n	80026a6 <BSP_TS_Init+0x56>
 80026be:	bf00      	nop
 80026c0:	20000000 	.word	0x20000000
 80026c4:	20000660 	.word	0x20000660

080026c8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80026c8:	b570      	push	{r4, r5, r6, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	4605      	mov	r5, r0
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 80026ce:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <BSP_TS_GetState+0xfc>)
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	6912      	ldr	r2, [r2, #16]
 80026d4:	7818      	ldrb	r0, [r3, #0]
 80026d6:	4790      	blx	r2
 80026d8:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
 80026da:	2800      	cmp	r0, #0
 80026dc:	d16f      	bne.n	80027be <BSP_TS_GetState+0xf6>
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
}
 80026de:	2000      	movs	r0, #0
 80026e0:	b002      	add	sp, #8
 80026e2:	bd70      	pop	{r4, r5, r6, pc}
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	1a5b      	subs	r3, r3, r1
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	e051      	b.n	8002790 <BSP_TS_GetState+0xc8>
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 80026ec:	b292      	uxth	r2, r2
 80026ee:	1a12      	subs	r2, r2, r0
 80026f0:	b292      	uxth	r2, r2
 80026f2:	e05b      	b.n	80027ac <BSP_TS_GetState+0xe4>
      TS_State->touchX[index] = _x[index];
 80026f4:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <BSP_TS_GetState+0xfc>)
 80026f6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80026fa:	68d9      	ldr	r1, [r3, #12]
 80026fc:	eb05 0244 	add.w	r2, r5, r4, lsl #1
 8002700:	8051      	strh	r1, [r2, #2]
      TS_State->touchY[index] = _y[index];
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	80d3      	strh	r3, [r2, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 8002706:	3401      	adds	r4, #1
 8002708:	782b      	ldrb	r3, [r5, #0]
 800270a:	42a3      	cmp	r3, r4
 800270c:	d9e7      	bls.n	80026de <BSP_TS_GetState+0x16>
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 800270e:	4e2d      	ldr	r6, [pc, #180]	; (80027c4 <BSP_TS_GetState+0xfc>)
 8002710:	6873      	ldr	r3, [r6, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	eb0d 0244 	add.w	r2, sp, r4, lsl #1
 8002718:	a901      	add	r1, sp, #4
 800271a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 800271e:	7830      	ldrb	r0, [r6, #0]
 8002720:	4798      	blx	r3
      if(ts_orientation & TS_SWAP_XY)
 8002722:	7a33      	ldrb	r3, [r6, #8]
 8002724:	f013 0f08 	tst.w	r3, #8
 8002728:	d00a      	beq.n	8002740 <BSP_TS_GetState+0x78>
        tmp = Raw_x[index];
 800272a:	aa02      	add	r2, sp, #8
 800272c:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8002730:	f832 1c04 	ldrh.w	r1, [r2, #-4]
        Raw_x[index] = Raw_y[index]; 
 8002734:	f832 0c08 	ldrh.w	r0, [r2, #-8]
 8002738:	f822 0c04 	strh.w	r0, [r2, #-4]
        Raw_y[index] = tmp;
 800273c:	f822 1c08 	strh.w	r1, [r2, #-8]
      if(ts_orientation & TS_SWAP_X)
 8002740:	f013 0f02 	tst.w	r3, #2
 8002744:	d009      	beq.n	800275a <BSP_TS_GetState+0x92>
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8002746:	aa02      	add	r2, sp, #8
 8002748:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 800274c:	f831 0c04 	ldrh.w	r0, [r1, #-4]
 8002750:	f240 321f 	movw	r2, #799	; 0x31f
 8002754:	1a12      	subs	r2, r2, r0
 8002756:	f821 2c04 	strh.w	r2, [r1, #-4]
      if(ts_orientation & TS_SWAP_Y)
 800275a:	f013 0f04 	tst.w	r3, #4
 800275e:	d009      	beq.n	8002774 <BSP_TS_GetState+0xac>
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8002760:	ab02      	add	r3, sp, #8
 8002762:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8002766:	f832 1c08 	ldrh.w	r1, [r2, #-8]
 800276a:	f240 13df 	movw	r3, #479	; 0x1df
 800276e:	1a5b      	subs	r3, r3, r1
 8002770:	f822 3c08 	strh.w	r3, [r2, #-8]
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8002774:	ab02      	add	r3, sp, #8
 8002776:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800277a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 800277e:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <BSP_TS_GetState+0xfc>)
 8002780:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	4299      	cmp	r1, r3
 8002788:	d9ac      	bls.n	80026e4 <BSP_TS_GetState+0x1c>
 800278a:	b29b      	uxth	r3, r3
 800278c:	1acb      	subs	r3, r1, r3
 800278e:	b29b      	uxth	r3, r3
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8002790:	aa02      	add	r2, sp, #8
 8002792:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8002796:	f832 0c08 	ldrh.w	r0, [r2, #-8]
 800279a:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <BSP_TS_GetState+0xfc>)
 800279c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80027a0:	6952      	ldr	r2, [r2, #20]
 80027a2:	4290      	cmp	r0, r2
 80027a4:	d9a2      	bls.n	80026ec <BSP_TS_GetState+0x24>
 80027a6:	b292      	uxth	r2, r2
 80027a8:	1a82      	subs	r2, r0, r2
 80027aa:	b292      	uxth	r2, r2
      if ((xDiff + yDiff) > 5)
 80027ac:	4413      	add	r3, r2
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	dda0      	ble.n	80026f4 <BSP_TS_GetState+0x2c>
        _x[index] = Raw_x[index];
 80027b2:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <BSP_TS_GetState+0xfc>)
 80027b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80027b8:	60d9      	str	r1, [r3, #12]
        _y[index] = Raw_y[index];
 80027ba:	6158      	str	r0, [r3, #20]
 80027bc:	e79a      	b.n	80026f4 <BSP_TS_GetState+0x2c>
    for(index=0; index < TS_State->touchDetected; index++)
 80027be:	2400      	movs	r4, #0
 80027c0:	e7a2      	b.n	8002708 <BSP_TS_GetState+0x40>
 80027c2:	bf00      	nop
 80027c4:	20000660 	.word	0x20000660

080027c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80027c8:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80027ca:	4b04      	ldr	r3, [pc, #16]	; (80027dc <disk_status+0x14>)
 80027cc:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80027d0:	6852      	ldr	r2, [r2, #4]
 80027d2:	6852      	ldr	r2, [r2, #4]
 80027d4:	4403      	add	r3, r0
 80027d6:	7b18      	ldrb	r0, [r3, #12]
 80027d8:	4790      	blx	r2
  return stat;
}
 80027da:	bd08      	pop	{r3, pc}
 80027dc:	200006a8 	.word	0x200006a8

080027e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80027e0:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <disk_initialize+0x24>)
 80027e4:	5c1b      	ldrb	r3, [r3, r0]
 80027e6:	b953      	cbnz	r3, 80027fe <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <disk_initialize+0x24>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80027ee:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80027f2:	6852      	ldr	r2, [r2, #4]
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	4418      	add	r0, r3
 80027f8:	7b00      	ldrb	r0, [r0, #12]
 80027fa:	4790      	blx	r2
  }
  return stat;
}
 80027fc:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 80027fe:	2000      	movs	r0, #0
 8002800:	e7fc      	b.n	80027fc <disk_initialize+0x1c>
 8002802:	bf00      	nop
 8002804:	200006a8 	.word	0x200006a8

08002808 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002808:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800280a:	4c04      	ldr	r4, [pc, #16]	; (800281c <disk_read+0x14>)
 800280c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8002810:	686d      	ldr	r5, [r5, #4]
 8002812:	68ad      	ldr	r5, [r5, #8]
 8002814:	4404      	add	r4, r0
 8002816:	7b20      	ldrb	r0, [r4, #12]
 8002818:	47a8      	blx	r5
  return res;
}
 800281a:	bd38      	pop	{r3, r4, r5, pc}
 800281c:	200006a8 	.word	0x200006a8

08002820 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002820:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002822:	4c04      	ldr	r4, [pc, #16]	; (8002834 <disk_write+0x14>)
 8002824:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8002828:	686d      	ldr	r5, [r5, #4]
 800282a:	68ed      	ldr	r5, [r5, #12]
 800282c:	4404      	add	r4, r0
 800282e:	7b20      	ldrb	r0, [r4, #12]
 8002830:	47a8      	blx	r5
  return res;
}
 8002832:	bd38      	pop	{r3, r4, r5, pc}
 8002834:	200006a8 	.word	0x200006a8

08002838 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 8002838:	2000      	movs	r0, #0
 800283a:	4770      	bx	lr

0800283c <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 800283c:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 800283e:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8002840:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8002844:	4770      	bx	lr

08002846 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8002846:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 8002848:	7883      	ldrb	r3, [r0, #2]
 800284a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 800284e:	7843      	ldrb	r3, [r0, #1]
 8002850:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8002854:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8002856:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800285a:	4770      	bx	lr

0800285c <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800285c:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 800285e:	0a09      	lsrs	r1, r1, #8
 8002860:	7041      	strb	r1, [r0, #1]
}
 8002862:	4770      	bx	lr

08002864 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8002864:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002866:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800286a:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800286c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8002870:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8002872:	0e09      	lsrs	r1, r1, #24
 8002874:	70c1      	strb	r1, [r0, #3]
}
 8002876:	4770      	bx	lr

08002878 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002878:	b410      	push	{r4}
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 800287a:	4614      	mov	r4, r2
 800287c:	b12a      	cbz	r2, 800288a <mem_cpy+0x12>
		do {
			*d++ = *s++;
 800287e:	780a      	ldrb	r2, [r1, #0]
 8002880:	3101      	adds	r1, #1
 8002882:	7002      	strb	r2, [r0, #0]
 8002884:	3001      	adds	r0, #1
		} while (--cnt);
 8002886:	3c01      	subs	r4, #1
 8002888:	d1f9      	bne.n	800287e <mem_cpy+0x6>
	}
}
 800288a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800288e:	4770      	bx	lr

08002890 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8002890:	7001      	strb	r1, [r0, #0]
 8002892:	3001      	adds	r0, #1
	} while (--cnt);
 8002894:	3a01      	subs	r2, #1
 8002896:	d1fb      	bne.n	8002890 <mem_set>
}
 8002898:	4770      	bx	lr

0800289a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800289a:	b410      	push	{r4}
 800289c:	4604      	mov	r4, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 800289e:	7820      	ldrb	r0, [r4, #0]
 80028a0:	3401      	adds	r4, #1
 80028a2:	780b      	ldrb	r3, [r1, #0]
 80028a4:	3101      	adds	r1, #1
 80028a6:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 80028a8:	3a01      	subs	r2, #1
 80028aa:	d001      	beq.n	80028b0 <mem_cmp+0x16>
 80028ac:	2800      	cmp	r0, #0
 80028ae:	d0f6      	beq.n	800289e <mem_cmp+0x4>

	return r;
}
 80028b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80028b6:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 80028b8:	7818      	ldrb	r0, [r3, #0]
 80028ba:	b118      	cbz	r0, 80028c4 <chk_chr+0xe>
 80028bc:	4288      	cmp	r0, r1
 80028be:	d001      	beq.n	80028c4 <chk_chr+0xe>
 80028c0:	3301      	adds	r3, #1
 80028c2:	e7f9      	b.n	80028b8 <chk_chr+0x2>
	return *str;
}
 80028c4:	4770      	bx	lr
	...

080028c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80028c8:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80028ca:	2500      	movs	r5, #0
 80028cc:	462b      	mov	r3, r5
 80028ce:	e001      	b.n	80028d4 <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 80028d0:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 80028d2:	3301      	adds	r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d815      	bhi.n	8002904 <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 80028d8:	011a      	lsls	r2, r3, #4
 80028da:	4c18      	ldr	r4, [pc, #96]	; (800293c <chk_lock+0x74>)
 80028dc:	58a2      	ldr	r2, [r4, r2]
 80028de:	2a00      	cmp	r2, #0
 80028e0:	d0f6      	beq.n	80028d0 <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80028e2:	6804      	ldr	r4, [r0, #0]
 80028e4:	42a2      	cmp	r2, r4
 80028e6:	d1f4      	bne.n	80028d2 <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 80028e8:	4a14      	ldr	r2, [pc, #80]	; (800293c <chk_lock+0x74>)
 80028ea:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80028ee:	6854      	ldr	r4, [r2, #4]
 80028f0:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80028f2:	4294      	cmp	r4, r2
 80028f4:	d1ed      	bne.n	80028d2 <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 80028f6:	4a11      	ldr	r2, [pc, #68]	; (800293c <chk_lock+0x74>)
 80028f8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80028fc:	6894      	ldr	r4, [r2, #8]
 80028fe:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 8002900:	4294      	cmp	r4, r2
 8002902:	d1e6      	bne.n	80028d2 <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8002904:	2b02      	cmp	r3, #2
 8002906:	d00a      	beq.n	800291e <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002908:	b9a9      	cbnz	r1, 8002936 <chk_lock+0x6e>
 800290a:	4a0c      	ldr	r2, [pc, #48]	; (800293c <chk_lock+0x74>)
 800290c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002910:	899b      	ldrh	r3, [r3, #12]
 8002912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002916:	d00c      	beq.n	8002932 <chk_lock+0x6a>
 8002918:	2000      	movs	r0, #0
}
 800291a:	bc30      	pop	{r4, r5}
 800291c:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800291e:	2902      	cmp	r1, #2
 8002920:	bf14      	ite	ne
 8002922:	4629      	movne	r1, r5
 8002924:	f045 0101 	orreq.w	r1, r5, #1
 8002928:	b109      	cbz	r1, 800292e <chk_lock+0x66>
 800292a:	2000      	movs	r0, #0
 800292c:	e7f5      	b.n	800291a <chk_lock+0x52>
 800292e:	2012      	movs	r0, #18
 8002930:	e7f3      	b.n	800291a <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002932:	2010      	movs	r0, #16
 8002934:	e7f1      	b.n	800291a <chk_lock+0x52>
 8002936:	2010      	movs	r0, #16
 8002938:	e7ef      	b.n	800291a <chk_lock+0x52>
 800293a:	bf00      	nop
 800293c:	2000067c 	.word	0x2000067c

08002940 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002940:	2000      	movs	r0, #0
 8002942:	e000      	b.n	8002946 <enq_lock+0x6>
 8002944:	3001      	adds	r0, #1
 8002946:	2801      	cmp	r0, #1
 8002948:	d804      	bhi.n	8002954 <enq_lock+0x14>
 800294a:	0103      	lsls	r3, r0, #4
 800294c:	4a03      	ldr	r2, [pc, #12]	; (800295c <enq_lock+0x1c>)
 800294e:	58d3      	ldr	r3, [r2, r3]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f7      	bne.n	8002944 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 8002954:	3802      	subs	r0, #2
 8002956:	bf18      	it	ne
 8002958:	2001      	movne	r0, #1
 800295a:	4770      	bx	lr
 800295c:	2000067c 	.word	0x2000067c

08002960 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002960:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002962:	2300      	movs	r3, #0
 8002964:	e000      	b.n	8002968 <inc_lock+0x8>
 8002966:	3301      	adds	r3, #1
 8002968:	2b01      	cmp	r3, #1
 800296a:	d813      	bhi.n	8002994 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 800296c:	011a      	lsls	r2, r3, #4
 800296e:	4c24      	ldr	r4, [pc, #144]	; (8002a00 <inc_lock+0xa0>)
 8002970:	58a4      	ldr	r4, [r4, r2]
 8002972:	6802      	ldr	r2, [r0, #0]
 8002974:	4294      	cmp	r4, r2
 8002976:	d1f6      	bne.n	8002966 <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 8002978:	4a21      	ldr	r2, [pc, #132]	; (8002a00 <inc_lock+0xa0>)
 800297a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800297e:	6854      	ldr	r4, [r2, #4]
 8002980:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 8002982:	4294      	cmp	r4, r2
 8002984:	d1ef      	bne.n	8002966 <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 8002986:	4a1e      	ldr	r2, [pc, #120]	; (8002a00 <inc_lock+0xa0>)
 8002988:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800298c:	6894      	ldr	r4, [r2, #8]
 800298e:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 8002990:	4294      	cmp	r4, r2
 8002992:	d1e8      	bne.n	8002966 <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002994:	2b02      	cmp	r3, #2
 8002996:	d013      	beq.n	80029c0 <inc_lock+0x60>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002998:	b121      	cbz	r1, 80029a4 <inc_lock+0x44>
 800299a:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <inc_lock+0xa0>)
 800299c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80029a0:	8992      	ldrh	r2, [r2, #12]
 80029a2:	bb52      	cbnz	r2, 80029fa <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80029a4:	bb21      	cbnz	r1, 80029f0 <inc_lock+0x90>
 80029a6:	4a16      	ldr	r2, [pc, #88]	; (8002a00 <inc_lock+0xa0>)
 80029a8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80029ac:	8991      	ldrh	r1, [r2, #12]
 80029ae:	3101      	adds	r1, #1
 80029b0:	b289      	uxth	r1, r1
 80029b2:	4a13      	ldr	r2, [pc, #76]	; (8002a00 <inc_lock+0xa0>)
 80029b4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80029b8:	8191      	strh	r1, [r2, #12]

	return i + 1;
 80029ba:	1c58      	adds	r0, r3, #1
}
 80029bc:	bc70      	pop	{r4, r5, r6}
 80029be:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80029c0:	2300      	movs	r3, #0
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d805      	bhi.n	80029d2 <inc_lock+0x72>
 80029c6:	011a      	lsls	r2, r3, #4
 80029c8:	4c0d      	ldr	r4, [pc, #52]	; (8002a00 <inc_lock+0xa0>)
 80029ca:	58a2      	ldr	r2, [r4, r2]
 80029cc:	b10a      	cbz	r2, 80029d2 <inc_lock+0x72>
 80029ce:	3301      	adds	r3, #1
 80029d0:	e7f7      	b.n	80029c2 <inc_lock+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d00f      	beq.n	80029f6 <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 80029d6:	6806      	ldr	r6, [r0, #0]
 80029d8:	4d09      	ldr	r5, [pc, #36]	; (8002a00 <inc_lock+0xa0>)
 80029da:	011c      	lsls	r4, r3, #4
 80029dc:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 80029e0:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 80029e2:	6884      	ldr	r4, [r0, #8]
 80029e4:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 80029e6:	6940      	ldr	r0, [r0, #20]
 80029e8:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 80029ea:	2000      	movs	r0, #0
 80029ec:	8190      	strh	r0, [r2, #12]
 80029ee:	e7d3      	b.n	8002998 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80029f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029f4:	e7dd      	b.n	80029b2 <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80029f6:	2000      	movs	r0, #0
 80029f8:	e7e0      	b.n	80029bc <inc_lock+0x5c>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80029fa:	2000      	movs	r0, #0
 80029fc:	e7de      	b.n	80029bc <inc_lock+0x5c>
 80029fe:	bf00      	nop
 8002a00:	2000067c 	.word	0x2000067c

08002a04 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002a04:	2300      	movs	r3, #0
 8002a06:	e003      	b.n	8002a10 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 8002a08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a0c:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 8002a0e:	3301      	adds	r3, #1
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d811      	bhi.n	8002a38 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002a14:	011a      	lsls	r2, r3, #4
 8002a16:	4909      	ldr	r1, [pc, #36]	; (8002a3c <clear_lock+0x38>)
 8002a18:	588a      	ldr	r2, [r1, r2]
 8002a1a:	4282      	cmp	r2, r0
 8002a1c:	d1f7      	bne.n	8002a0e <clear_lock+0xa>
{
 8002a1e:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002a20:	011a      	lsls	r2, r3, #4
 8002a22:	2400      	movs	r4, #0
 8002a24:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 8002a26:	3301      	adds	r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d8ed      	bhi.n	8002a08 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002a2c:	011a      	lsls	r2, r3, #4
 8002a2e:	4903      	ldr	r1, [pc, #12]	; (8002a3c <clear_lock+0x38>)
 8002a30:	588a      	ldr	r2, [r1, r2]
 8002a32:	4282      	cmp	r2, r0
 8002a34:	d1f7      	bne.n	8002a26 <clear_lock+0x22>
 8002a36:	e7f3      	b.n	8002a20 <clear_lock+0x1c>
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	2000067c 	.word	0x2000067c

08002a40 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8002a40:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002a42:	6943      	ldr	r3, [r0, #20]
 8002a44:	3b02      	subs	r3, #2
 8002a46:	428b      	cmp	r3, r1
 8002a48:	d904      	bls.n	8002a54 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8002a4a:	8943      	ldrh	r3, [r0, #10]
 8002a4c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002a4e:	fb01 0003 	mla	r0, r1, r3, r0
 8002a52:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002a54:	2000      	movs	r0, #0
}
 8002a56:	4770      	bx	lr

08002a58 <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8002a58:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002a5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002a5c:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8002a5e:	0a49      	lsrs	r1, r1, #9
 8002a60:	8952      	ldrh	r2, [r2, #10]
 8002a62:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002a66:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8002a68:	b130      	cbz	r0, 8002a78 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8002a6a:	4281      	cmp	r1, r0
 8002a6c:	d302      	bcc.n	8002a74 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8002a6e:	1a09      	subs	r1, r1, r0
 8002a70:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002a72:	e7f8      	b.n	8002a66 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8002a74:	6858      	ldr	r0, [r3, #4]
 8002a76:	4408      	add	r0, r1
}
 8002a78:	4770      	bx	lr

08002a7a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8002a7a:	b570      	push	{r4, r5, r6, lr}
 8002a7c:	4606      	mov	r6, r0
 8002a7e:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8002a80:	f101 001a 	add.w	r0, r1, #26
 8002a84:	f7ff feda 	bl	800283c <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8002a88:	7833      	ldrb	r3, [r6, #0]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d000      	beq.n	8002a90 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 8002a8e:	bd70      	pop	{r4, r5, r6, pc}
 8002a90:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8002a92:	f105 0014 	add.w	r0, r5, #20
 8002a96:	f7ff fed1 	bl	800283c <ld_word>
 8002a9a:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 8002a9e:	e7f6      	b.n	8002a8e <ld_clust+0x14>

08002aa0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8002aa0:	b570      	push	{r4, r5, r6, lr}
 8002aa2:	4606      	mov	r6, r0
 8002aa4:	460c      	mov	r4, r1
 8002aa6:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8002aa8:	b291      	uxth	r1, r2
 8002aaa:	f104 001a 	add.w	r0, r4, #26
 8002aae:	f7ff fed5 	bl	800285c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8002ab2:	7833      	ldrb	r3, [r6, #0]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d000      	beq.n	8002aba <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8002ab8:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8002aba:	0c29      	lsrs	r1, r5, #16
 8002abc:	f104 0014 	add.w	r0, r4, #20
 8002ac0:	f7ff fecc 	bl	800285c <st_word>
}
 8002ac4:	e7f8      	b.n	8002ab8 <st_clust+0x18>
	...

08002ac8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8002ac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002acc:	4681      	mov	r9, r0
 8002ace:	468a      	mov	sl, r1
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8002ad0:	f8d1 8000 	ldr.w	r8, [r1]
 8002ad4:	f100 0b24 	add.w	fp, r0, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8002ad8:	220b      	movs	r2, #11
 8002ada:	2120      	movs	r1, #32
 8002adc:	4658      	mov	r0, fp
 8002ade:	f7ff fed7 	bl	8002890 <mem_set>
	si = i = 0; ni = 8;
 8002ae2:	2500      	movs	r5, #0
 8002ae4:	462b      	mov	r3, r5
 8002ae6:	2708      	movs	r7, #8
 8002ae8:	e029      	b.n	8002b3e <create_name+0x76>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002aea:	3601      	adds	r6, #1
 8002aec:	f818 3006 	ldrb.w	r3, [r8, r6]
 8002af0:	2b5c      	cmp	r3, #92	; 0x5c
 8002af2:	bf18      	it	ne
 8002af4:	2b2f      	cmpne	r3, #47	; 0x2f
 8002af6:	d0f8      	beq.n	8002aea <create_name+0x22>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8002af8:	4446      	add	r6, r8
 8002afa:	f8ca 6000 	str.w	r6, [sl]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8002afe:	2d00      	cmp	r5, #0
 8002b00:	d045      	beq.n	8002b8e <create_name+0xc6>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002b02:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
 8002b06:	2be5      	cmp	r3, #229	; 0xe5
 8002b08:	d036      	beq.n	8002b78 <create_name+0xb0>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002b0a:	2c20      	cmp	r4, #32
 8002b0c:	d838      	bhi.n	8002b80 <create_name+0xb8>
 8002b0e:	2304      	movs	r3, #4
 8002b10:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f

	return FR_OK;
 8002b14:	2000      	movs	r0, #0
 8002b16:	e036      	b.n	8002b86 <create_name+0xbe>
		if (c >= 0x80) {				/* Extended character? */
 8002b18:	f014 0f80 	tst.w	r4, #128	; 0x80
 8002b1c:	d128      	bne.n	8002b70 <create_name+0xa8>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8002b1e:	4621      	mov	r1, r4
 8002b20:	481c      	ldr	r0, [pc, #112]	; (8002b94 <create_name+0xcc>)
 8002b22:	f7ff fec8 	bl	80028b6 <chk_chr>
 8002b26:	bb80      	cbnz	r0, 8002b8a <create_name+0xc2>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002b28:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b19      	cmp	r3, #25
 8002b30:	d801      	bhi.n	8002b36 <create_name+0x6e>
 8002b32:	3c20      	subs	r4, #32
 8002b34:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
 8002b36:	f80b 4005 	strb.w	r4, [fp, r5]
 8002b3a:	3501      	adds	r5, #1
			i = 8; ni = 11;				/* Goto extension */
 8002b3c:	4633      	mov	r3, r6
		c = (BYTE)p[si++];
 8002b3e:	1c5e      	adds	r6, r3, #1
 8002b40:	f818 4003 	ldrb.w	r4, [r8, r3]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002b44:	2c20      	cmp	r4, #32
 8002b46:	d9d7      	bls.n	8002af8 <create_name+0x30>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002b48:	2c5c      	cmp	r4, #92	; 0x5c
 8002b4a:	bf18      	it	ne
 8002b4c:	2c2f      	cmpne	r4, #47	; 0x2f
 8002b4e:	d0cd      	beq.n	8002aec <create_name+0x24>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8002b50:	2c2e      	cmp	r4, #46	; 0x2e
 8002b52:	bf18      	it	ne
 8002b54:	42af      	cmpne	r7, r5
 8002b56:	d8df      	bhi.n	8002b18 <create_name+0x50>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8002b58:	3c2e      	subs	r4, #46	; 0x2e
 8002b5a:	bf18      	it	ne
 8002b5c:	2401      	movne	r4, #1
 8002b5e:	2f0b      	cmp	r7, #11
 8002b60:	bf14      	ite	ne
 8002b62:	4627      	movne	r7, r4
 8002b64:	f044 0701 	orreq.w	r7, r4, #1
 8002b68:	b967      	cbnz	r7, 8002b84 <create_name+0xbc>
			i = 8; ni = 11;				/* Goto extension */
 8002b6a:	2508      	movs	r5, #8
 8002b6c:	270b      	movs	r7, #11
 8002b6e:	e7e5      	b.n	8002b3c <create_name+0x74>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8002b70:	3c80      	subs	r4, #128	; 0x80
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <create_name+0xd0>)
 8002b74:	5d1c      	ldrb	r4, [r3, r4]
 8002b76:	e7d2      	b.n	8002b1e <create_name+0x56>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002b78:	2305      	movs	r3, #5
 8002b7a:	f889 3024 	strb.w	r3, [r9, #36]	; 0x24
 8002b7e:	e7c4      	b.n	8002b0a <create_name+0x42>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002b80:	2300      	movs	r3, #0
 8002b82:	e7c5      	b.n	8002b10 <create_name+0x48>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8002b84:	2006      	movs	r0, #6
#endif /* _USE_LFN != 0 */
}
 8002b86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8002b8a:	2006      	movs	r0, #6
 8002b8c:	e7fb      	b.n	8002b86 <create_name+0xbe>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8002b8e:	2006      	movs	r0, #6
 8002b90:	e7f9      	b.n	8002b86 <create_name+0xbe>
 8002b92:	bf00      	nop
 8002b94:	08011160 	.word	0x08011160
 8002b98:	08010930 	.word	0x08010930

08002b9c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8002b9c:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002b9e:	6800      	ldr	r0, [r0, #0]
 8002ba0:	b108      	cbz	r0, 8002ba6 <get_ldnumber+0xa>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	e003      	b.n	8002bae <get_ldnumber+0x12>
	int vol = -1;
 8002ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8002baa:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002bac:	3201      	adds	r2, #1
 8002bae:	7813      	ldrb	r3, [r2, #0]
 8002bb0:	2b3a      	cmp	r3, #58	; 0x3a
 8002bb2:	bf18      	it	ne
 8002bb4:	2b20      	cmpne	r3, #32
 8002bb6:	d8f9      	bhi.n	8002bac <get_ldnumber+0x10>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8002bb8:	2b3a      	cmp	r3, #58	; 0x3a
 8002bba:	d001      	beq.n	8002bc0 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8002bbc:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8002bbe:	4770      	bx	lr
			i = *tp++ - '0';
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8002bc6:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002bc8:	2809      	cmp	r0, #9
 8002bca:	bf98      	it	ls
 8002bcc:	429a      	cmpls	r2, r3
 8002bce:	d107      	bne.n	8002be0 <get_ldnumber+0x44>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8002bd0:	2801      	cmp	r0, #1
 8002bd2:	d902      	bls.n	8002bda <get_ldnumber+0x3e>
	int vol = -1;
 8002bd4:	f04f 30ff 	mov.w	r0, #4294967295
			return vol;
 8002bd8:	4770      	bx	lr
					*path = ++tt;
 8002bda:	3201      	adds	r2, #1
 8002bdc:	600a      	str	r2, [r1, #0]
 8002bde:	4770      	bx	lr
	int vol = -1;
 8002be0:	f04f 30ff 	mov.w	r0, #4294967295
 8002be4:	4770      	bx	lr

08002be6 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8002be6:	b538      	push	{r3, r4, r5, lr}
 8002be8:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8002bea:	4604      	mov	r4, r0
 8002bec:	b198      	cbz	r0, 8002c16 <validate+0x30>
 8002bee:	6803      	ldr	r3, [r0, #0]
 8002bf0:	b19b      	cbz	r3, 8002c1a <validate+0x34>
 8002bf2:	781a      	ldrb	r2, [r3, #0]
 8002bf4:	b1a2      	cbz	r2, 8002c20 <validate+0x3a>
 8002bf6:	8881      	ldrh	r1, [r0, #4]
 8002bf8:	88da      	ldrh	r2, [r3, #6]
 8002bfa:	4291      	cmp	r1, r2
 8002bfc:	d003      	beq.n	8002c06 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8002bfe:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002c00:	2400      	movs	r4, #0
 8002c02:	602c      	str	r4, [r5, #0]
	return res;
}
 8002c04:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8002c06:	7858      	ldrb	r0, [r3, #1]
 8002c08:	f7ff fdde 	bl	80027c8 <disk_status>
 8002c0c:	f010 0001 	ands.w	r0, r0, #1
 8002c10:	d109      	bne.n	8002c26 <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002c12:	6824      	ldr	r4, [r4, #0]
 8002c14:	e7f5      	b.n	8002c02 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8002c16:	2009      	movs	r0, #9
 8002c18:	e7f3      	b.n	8002c02 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002c1a:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 8002c1c:	2009      	movs	r0, #9
 8002c1e:	e7f0      	b.n	8002c02 <validate+0x1c>
 8002c20:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002c22:	2400      	movs	r4, #0
 8002c24:	e7ed      	b.n	8002c02 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8002c26:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002c28:	2400      	movs	r4, #0
 8002c2a:	e7ea      	b.n	8002c02 <validate+0x1c>

08002c2c <sync_window>:
{
 8002c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002c30:	78c5      	ldrb	r5, [r0, #3]
 8002c32:	b915      	cbnz	r5, 8002c3a <sync_window+0xe>
}
 8002c34:	4628      	mov	r0, r5
 8002c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c3a:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8002c3c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002c3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8002c42:	2301      	movs	r3, #1
 8002c44:	463a      	mov	r2, r7
 8002c46:	4641      	mov	r1, r8
 8002c48:	7840      	ldrb	r0, [r0, #1]
 8002c4a:	f7ff fde9 	bl	8002820 <disk_write>
 8002c4e:	4605      	mov	r5, r0
 8002c50:	b998      	cbnz	r0, 8002c7a <sync_window+0x4e>
			fs->wflag = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002c56:	6a23      	ldr	r3, [r4, #32]
 8002c58:	1afb      	subs	r3, r7, r3
 8002c5a:	69a2      	ldr	r2, [r4, #24]
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d2e9      	bcs.n	8002c34 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002c60:	78a6      	ldrb	r6, [r4, #2]
 8002c62:	2e01      	cmp	r6, #1
 8002c64:	d9e6      	bls.n	8002c34 <sync_window+0x8>
					wsect += fs->fsize;
 8002c66:	69a3      	ldr	r3, [r4, #24]
 8002c68:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	463a      	mov	r2, r7
 8002c6e:	4641      	mov	r1, r8
 8002c70:	7860      	ldrb	r0, [r4, #1]
 8002c72:	f7ff fdd5 	bl	8002820 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002c76:	3e01      	subs	r6, #1
 8002c78:	e7f3      	b.n	8002c62 <sync_window+0x36>
			res = FR_DISK_ERR;
 8002c7a:	2501      	movs	r5, #1
 8002c7c:	e7da      	b.n	8002c34 <sync_window+0x8>

08002c7e <move_window>:
{
 8002c7e:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002c80:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002c82:	428b      	cmp	r3, r1
 8002c84:	d102      	bne.n	8002c8c <move_window+0xe>
	FRESULT res = FR_OK;
 8002c86:	2600      	movs	r6, #0
}
 8002c88:	4630      	mov	r0, r6
 8002c8a:	bd70      	pop	{r4, r5, r6, pc}
 8002c8c:	4604      	mov	r4, r0
 8002c8e:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8002c90:	f7ff ffcc 	bl	8002c2c <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002c94:	4606      	mov	r6, r0
 8002c96:	2800      	cmp	r0, #0
 8002c98:	d1f6      	bne.n	8002c88 <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	462a      	mov	r2, r5
 8002c9e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8002ca2:	7860      	ldrb	r0, [r4, #1]
 8002ca4:	f7ff fdb0 	bl	8002808 <disk_read>
 8002ca8:	b110      	cbz	r0, 8002cb0 <move_window+0x32>
				res = FR_DISK_ERR;
 8002caa:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002cac:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 8002cb0:	62e5      	str	r5, [r4, #44]	; 0x2c
 8002cb2:	e7e9      	b.n	8002c88 <move_window+0xa>

08002cb4 <check_fs>:
{
 8002cb4:	b538      	push	{r3, r4, r5, lr}
 8002cb6:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002cb8:	2300      	movs	r3, #0
 8002cba:	70c3      	strb	r3, [r0, #3]
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc0:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002cc2:	f7ff ffdc 	bl	8002c7e <move_window>
 8002cc6:	bb30      	cbnz	r0, 8002d16 <check_fs+0x62>
 8002cc8:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002cca:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8002cce:	f7ff fdb5 	bl	800283c <ld_word>
 8002cd2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	d11f      	bne.n	8002d1a <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8002cda:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8002cde:	2be9      	cmp	r3, #233	; 0xe9
 8002ce0:	d007      	beq.n	8002cf2 <check_fs+0x3e>
 8002ce2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ce4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <check_fs+0x6c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d001      	beq.n	8002cf2 <check_fs+0x3e>
	return 2;
 8002cee:	2502      	movs	r5, #2
 8002cf0:	e014      	b.n	8002d1c <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8002cf2:	f104 0066 	add.w	r0, r4, #102	; 0x66
 8002cf6:	f7ff fda6 	bl	8002846 <ld_dword>
 8002cfa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <check_fs+0x70>)
 8002d00:	4298      	cmp	r0, r3
 8002d02:	d00b      	beq.n	8002d1c <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8002d04:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8002d08:	f7ff fd9d 	bl	8002846 <ld_dword>
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <check_fs+0x74>)
 8002d0e:	4298      	cmp	r0, r3
 8002d10:	d004      	beq.n	8002d1c <check_fs+0x68>
	return 2;
 8002d12:	2502      	movs	r5, #2
 8002d14:	e002      	b.n	8002d1c <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002d16:	2504      	movs	r5, #4
 8002d18:	e000      	b.n	8002d1c <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002d1a:	2503      	movs	r5, #3
}
 8002d1c:	4628      	mov	r0, r5
 8002d1e:	bd38      	pop	{r3, r4, r5, pc}
 8002d20:	009000eb 	.word	0x009000eb
 8002d24:	00544146 	.word	0x00544146
 8002d28:	33544146 	.word	0x33544146

08002d2c <find_volume>:
{
 8002d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d30:	b085      	sub	sp, #20
 8002d32:	460e      	mov	r6, r1
 8002d34:	4615      	mov	r5, r2
	*rfs = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8002d3a:	f7ff ff2f 	bl	8002b9c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002d3e:	1e07      	subs	r7, r0, #0
 8002d40:	f2c0 8145 	blt.w	8002fce <find_volume+0x2a2>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8002d44:	4bb5      	ldr	r3, [pc, #724]	; (800301c <find_volume+0x2f0>)
 8002d46:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8002d4a:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002d4c:	2c00      	cmp	r4, #0
 8002d4e:	f000 8143 	beq.w	8002fd8 <find_volume+0x2ac>
	*rfs = fs;							/* Return pointer to the file system object */
 8002d52:	6034      	str	r4, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002d54:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8002d58:	7823      	ldrb	r3, [r4, #0]
 8002d5a:	b173      	cbz	r3, 8002d7a <find_volume+0x4e>
		stat = disk_status(fs->drv);
 8002d5c:	7860      	ldrb	r0, [r4, #1]
 8002d5e:	f7ff fd33 	bl	80027c8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002d62:	f010 0601 	ands.w	r6, r0, #1
 8002d66:	d108      	bne.n	8002d7a <find_volume+0x4e>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002d68:	2d00      	cmp	r5, #0
 8002d6a:	f000 8131 	beq.w	8002fd0 <find_volume+0x2a4>
 8002d6e:	f010 0f04 	tst.w	r0, #4
 8002d72:	f000 812d 	beq.w	8002fd0 <find_volume+0x2a4>
				return FR_WRITE_PROTECTED;
 8002d76:	260a      	movs	r6, #10
 8002d78:	e12a      	b.n	8002fd0 <find_volume+0x2a4>
	fs->fs_type = 0;					/* Clear the file system object */
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002d7e:	b2f8      	uxtb	r0, r7
 8002d80:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8002d82:	f7ff fd2d 	bl	80027e0 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002d86:	f010 0601 	ands.w	r6, r0, #1
 8002d8a:	f040 8127 	bne.w	8002fdc <find_volume+0x2b0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8002d8e:	b11d      	cbz	r5, 8002d98 <find_volume+0x6c>
 8002d90:	f010 0f04 	tst.w	r0, #4
 8002d94:	f040 8124 	bne.w	8002fe0 <find_volume+0x2b4>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f7ff ff8a 	bl	8002cb4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002da0:	2802      	cmp	r0, #2
 8002da2:	f000 80b6 	beq.w	8002f12 <find_volume+0x1e6>
	bsect = 0;
 8002da6:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002da8:	2804      	cmp	r0, #4
 8002daa:	f000 811b 	beq.w	8002fe4 <find_volume+0x2b8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002dae:	2801      	cmp	r0, #1
 8002db0:	f200 811a 	bhi.w	8002fe8 <find_volume+0x2bc>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002db4:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8002db8:	f7ff fd40 	bl	800283c <ld_word>
 8002dbc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002dc0:	f040 8114 	bne.w	8002fec <find_volume+0x2c0>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8002dc4:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8002dc8:	f7ff fd38 	bl	800283c <ld_word>
 8002dcc:	4605      	mov	r5, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002dce:	b920      	cbnz	r0, 8002dda <find_volume+0xae>
 8002dd0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8002dd4:	f7ff fd37 	bl	8002846 <ld_dword>
 8002dd8:	4605      	mov	r5, r0
		fs->fsize = fasize;
 8002dda:	61a5      	str	r5, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8002ddc:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8002de0:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002de2:	1e53      	subs	r3, r2, #1
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	f200 8102 	bhi.w	8002ff0 <find_volume+0x2c4>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002dec:	fb05 f802 	mul.w	r8, r5, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002df0:	f894 903d 	ldrb.w	r9, [r4, #61]	; 0x3d
 8002df4:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8002df8:	f1b9 0f00 	cmp.w	r9, #0
 8002dfc:	f000 80fa 	beq.w	8002ff4 <find_volume+0x2c8>
 8002e00:	f109 33ff 	add.w	r3, r9, #4294967295
 8002e04:	ea19 0f03 	tst.w	r9, r3
 8002e08:	f040 80f6 	bne.w	8002ff8 <find_volume+0x2cc>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8002e0c:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8002e10:	f7ff fd14 	bl	800283c <ld_word>
 8002e14:	4682      	mov	sl, r0
 8002e16:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002e18:	f010 0f0f 	tst.w	r0, #15
 8002e1c:	f040 80ee 	bne.w	8002ffc <find_volume+0x2d0>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8002e20:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8002e24:	f7ff fd0a 	bl	800283c <ld_word>
 8002e28:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002e2a:	b920      	cbnz	r0, 8002e36 <find_volume+0x10a>
 8002e2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002e30:	f7ff fd09 	bl	8002846 <ld_dword>
 8002e34:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8002e36:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8002e3a:	f7ff fcff 	bl	800283c <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002e3e:	4602      	mov	r2, r0
 8002e40:	2800      	cmp	r0, #0
 8002e42:	f000 80dd 	beq.w	8003000 <find_volume+0x2d4>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8002e46:	eb00 0308 	add.w	r3, r0, r8
 8002e4a:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8002e4e:	459b      	cmp	fp, r3
 8002e50:	f0c0 80d8 	bcc.w	8003004 <find_volume+0x2d8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002e54:	ebab 0b03 	sub.w	fp, fp, r3
 8002e58:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002e5c:	45cb      	cmp	fp, r9
 8002e5e:	f0c0 80d3 	bcc.w	8003008 <find_volume+0x2dc>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002e62:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8002e66:	4281      	cmp	r1, r0
 8002e68:	d96b      	bls.n	8002f42 <find_volume+0x216>
		fmt = FS_FAT32;
 8002e6a:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002e6e:	f640 70f5 	movw	r0, #4085	; 0xff5
 8002e72:	4281      	cmp	r1, r0
 8002e74:	d801      	bhi.n	8002e7a <find_volume+0x14e>
 8002e76:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002e7a:	f101 0902 	add.w	r9, r1, #2
 8002e7e:	f8c4 9014 	str.w	r9, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8002e82:	61e7      	str	r7, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002e84:	443a      	add	r2, r7
 8002e86:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8002e88:	443b      	add	r3, r7
 8002e8a:	62a3      	str	r3, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8002e8c:	f1bb 0f03 	cmp.w	fp, #3
 8002e90:	d05a      	beq.n	8002f48 <find_volume+0x21c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8002e92:	f1ba 0f00 	cmp.w	sl, #0
 8002e96:	f000 80bd 	beq.w	8003014 <find_volume+0x2e8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002e9a:	4442      	add	r2, r8
 8002e9c:	6262      	str	r2, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002e9e:	f1bb 0f02 	cmp.w	fp, #2
 8002ea2:	d062      	beq.n	8002f6a <find_volume+0x23e>
 8002ea4:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8002ea8:	f009 0901 	and.w	r9, r9, #1
 8002eac:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002eb0:	f209 19ff 	addw	r9, r9, #511	; 0x1ff
 8002eb4:	ebb5 2f59 	cmp.w	r5, r9, lsr #9
 8002eb8:	f0c0 80ae 	bcc.w	8003018 <find_volume+0x2ec>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8002ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec0:	6123      	str	r3, [r4, #16]
 8002ec2:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8002ec8:	f1bb 0f03 	cmp.w	fp, #3
 8002ecc:	d050      	beq.n	8002f70 <find_volume+0x244>
	fs->fs_type = fmt;		/* FAT sub-type */
 8002ece:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8002ed2:	4a52      	ldr	r2, [pc, #328]	; (800301c <find_volume+0x2f0>)
 8002ed4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	8513      	strh	r3, [r2, #40]	; 0x28
 8002edc:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 8002ede:	4620      	mov	r0, r4
 8002ee0:	f7ff fd90 	bl	8002a04 <clear_lock>
	return FR_OK;
 8002ee4:	e074      	b.n	8002fd0 <find_volume+0x2a4>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	ab04      	add	r3, sp, #16
 8002eea:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002eee:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002ef2:	3501      	adds	r5, #1
 8002ef4:	2d03      	cmp	r5, #3
 8002ef6:	d80e      	bhi.n	8002f16 <find_volume+0x1ea>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8002ef8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002efc:	012b      	lsls	r3, r5, #4
 8002efe:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002f02:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002f04:	7903      	ldrb	r3, [r0, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0ed      	beq.n	8002ee6 <find_volume+0x1ba>
 8002f0a:	3008      	adds	r0, #8
 8002f0c:	f7ff fc9b 	bl	8002846 <ld_dword>
 8002f10:	e7ea      	b.n	8002ee8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002f12:	2500      	movs	r5, #0
 8002f14:	e7ee      	b.n	8002ef4 <find_volume+0x1c8>
 8002f16:	2500      	movs	r5, #0
 8002f18:	e00a      	b.n	8002f30 <find_volume+0x204>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002f1a:	4639      	mov	r1, r7
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	f7ff fec9 	bl	8002cb4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002f22:	2801      	cmp	r0, #1
 8002f24:	f67f af40 	bls.w	8002da8 <find_volume+0x7c>
 8002f28:	3501      	adds	r5, #1
 8002f2a:	2d03      	cmp	r5, #3
 8002f2c:	f63f af3c 	bhi.w	8002da8 <find_volume+0x7c>
			bsect = br[i];
 8002f30:	ab04      	add	r3, sp, #16
 8002f32:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002f36:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002f3a:	2f00      	cmp	r7, #0
 8002f3c:	d1ed      	bne.n	8002f1a <find_volume+0x1ee>
 8002f3e:	2003      	movs	r0, #3
 8002f40:	e7f2      	b.n	8002f28 <find_volume+0x1fc>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002f42:	f04f 0b02 	mov.w	fp, #2
 8002f46:	e792      	b.n	8002e6e <find_volume+0x142>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002f48:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8002f4c:	f7ff fc76 	bl	800283c <ld_word>
 8002f50:	2800      	cmp	r0, #0
 8002f52:	d15b      	bne.n	800300c <find_volume+0x2e0>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002f54:	f1ba 0f00 	cmp.w	sl, #0
 8002f58:	d15a      	bne.n	8003010 <find_volume+0x2e4>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002f5a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002f5e:	f7ff fc72 	bl	8002846 <ld_dword>
 8002f62:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002f64:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8002f68:	e7a2      	b.n	8002eb0 <find_volume+0x184>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002f6a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8002f6e:	e79f      	b.n	8002eb0 <find_volume+0x184>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8002f70:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8002f74:	f7ff fc62 	bl	800283c <ld_word>
 8002f78:	2801      	cmp	r0, #1
 8002f7a:	d1a8      	bne.n	8002ece <find_volume+0x1a2>
			&& move_window(fs, bsect + 1) == FR_OK)
 8002f7c:	1c79      	adds	r1, r7, #1
 8002f7e:	4620      	mov	r0, r4
 8002f80:	f7ff fe7d 	bl	8002c7e <move_window>
 8002f84:	2800      	cmp	r0, #0
 8002f86:	d1a2      	bne.n	8002ece <find_volume+0x1a2>
			fs->fsi_flag = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002f8c:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8002f90:	f7ff fc54 	bl	800283c <ld_word>
 8002f94:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002f98:	4298      	cmp	r0, r3
 8002f9a:	d198      	bne.n	8002ece <find_volume+0x1a2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8002f9c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002fa0:	f7ff fc51 	bl	8002846 <ld_dword>
 8002fa4:	4b1e      	ldr	r3, [pc, #120]	; (8003020 <find_volume+0x2f4>)
 8002fa6:	4298      	cmp	r0, r3
 8002fa8:	d191      	bne.n	8002ece <find_volume+0x1a2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8002faa:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8002fae:	f7ff fc4a 	bl	8002846 <ld_dword>
 8002fb2:	4b1c      	ldr	r3, [pc, #112]	; (8003024 <find_volume+0x2f8>)
 8002fb4:	4298      	cmp	r0, r3
 8002fb6:	d18a      	bne.n	8002ece <find_volume+0x1a2>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8002fb8:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8002fbc:	f7ff fc43 	bl	8002846 <ld_dword>
 8002fc0:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8002fc2:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8002fc6:	f7ff fc3e 	bl	8002846 <ld_dword>
 8002fca:	60e0      	str	r0, [r4, #12]
 8002fcc:	e77f      	b.n	8002ece <find_volume+0x1a2>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002fce:	260b      	movs	r6, #11
}
 8002fd0:	4630      	mov	r0, r6
 8002fd2:	b005      	add	sp, #20
 8002fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002fd8:	260c      	movs	r6, #12
 8002fda:	e7f9      	b.n	8002fd0 <find_volume+0x2a4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002fdc:	2603      	movs	r6, #3
 8002fde:	e7f7      	b.n	8002fd0 <find_volume+0x2a4>
		return FR_WRITE_PROTECTED;
 8002fe0:	260a      	movs	r6, #10
 8002fe2:	e7f5      	b.n	8002fd0 <find_volume+0x2a4>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002fe4:	2601      	movs	r6, #1
 8002fe6:	e7f3      	b.n	8002fd0 <find_volume+0x2a4>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002fe8:	260d      	movs	r6, #13
 8002fea:	e7f1      	b.n	8002fd0 <find_volume+0x2a4>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002fec:	260d      	movs	r6, #13
 8002fee:	e7ef      	b.n	8002fd0 <find_volume+0x2a4>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002ff0:	260d      	movs	r6, #13
 8002ff2:	e7ed      	b.n	8002fd0 <find_volume+0x2a4>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8002ff4:	260d      	movs	r6, #13
 8002ff6:	e7eb      	b.n	8002fd0 <find_volume+0x2a4>
 8002ff8:	260d      	movs	r6, #13
 8002ffa:	e7e9      	b.n	8002fd0 <find_volume+0x2a4>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002ffc:	260d      	movs	r6, #13
 8002ffe:	e7e7      	b.n	8002fd0 <find_volume+0x2a4>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8003000:	260d      	movs	r6, #13
 8003002:	e7e5      	b.n	8002fd0 <find_volume+0x2a4>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003004:	260d      	movs	r6, #13
 8003006:	e7e3      	b.n	8002fd0 <find_volume+0x2a4>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003008:	260d      	movs	r6, #13
 800300a:	e7e1      	b.n	8002fd0 <find_volume+0x2a4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800300c:	260d      	movs	r6, #13
 800300e:	e7df      	b.n	8002fd0 <find_volume+0x2a4>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8003010:	260d      	movs	r6, #13
 8003012:	e7dd      	b.n	8002fd0 <find_volume+0x2a4>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8003014:	260d      	movs	r6, #13
 8003016:	e7db      	b.n	8002fd0 <find_volume+0x2a4>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003018:	260d      	movs	r6, #13
 800301a:	e7d9      	b.n	8002fd0 <find_volume+0x2a4>
 800301c:	2000067c 	.word	0x2000067c
 8003020:	41615252 	.word	0x41615252
 8003024:	61417272 	.word	0x61417272

08003028 <put_fat>:
{
 8003028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800302c:	2901      	cmp	r1, #1
 800302e:	d97e      	bls.n	800312e <put_fat+0x106>
 8003030:	4607      	mov	r7, r0
 8003032:	460c      	mov	r4, r1
 8003034:	4616      	mov	r6, r2
 8003036:	6943      	ldr	r3, [r0, #20]
 8003038:	428b      	cmp	r3, r1
 800303a:	d97a      	bls.n	8003132 <put_fat+0x10a>
		switch (fs->fs_type) {
 800303c:	7803      	ldrb	r3, [r0, #0]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d045      	beq.n	80030ce <put_fat+0xa6>
 8003042:	2b03      	cmp	r3, #3
 8003044:	d057      	beq.n	80030f6 <put_fat+0xce>
 8003046:	2b01      	cmp	r3, #1
 8003048:	d003      	beq.n	8003052 <put_fat+0x2a>
 800304a:	2502      	movs	r5, #2
}
 800304c:	4628      	mov	r0, r5
 800304e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 8003052:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003056:	6a01      	ldr	r1, [r0, #32]
 8003058:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800305c:	f7ff fe0f 	bl	8002c7e <move_window>
			if (res != FR_OK) break;
 8003060:	4605      	mov	r5, r0
 8003062:	2800      	cmp	r0, #0
 8003064:	d1f2      	bne.n	800304c <put_fat+0x24>
			p = fs->win + bc++ % SS(fs);
 8003066:	f107 0a30 	add.w	sl, r7, #48	; 0x30
 800306a:	f108 0901 	add.w	r9, r8, #1
 800306e:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003072:	f014 0401 	ands.w	r4, r4, #1
 8003076:	d01f      	beq.n	80030b8 <put_fat+0x90>
 8003078:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	0132      	lsls	r2, r6, #4
 8003082:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8003086:	4313      	orrs	r3, r2
 8003088:	b2db      	uxtb	r3, r3
 800308a:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 800308e:	2301      	movs	r3, #1
 8003090:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003092:	6a39      	ldr	r1, [r7, #32]
 8003094:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8003098:	4638      	mov	r0, r7
 800309a:	f7ff fdf0 	bl	8002c7e <move_window>
			if (res != FR_OK) break;
 800309e:	4605      	mov	r5, r0
 80030a0:	2800      	cmp	r0, #0
 80030a2:	d1d3      	bne.n	800304c <put_fat+0x24>
			p = fs->win + bc % SS(fs);
 80030a4:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80030a8:	b144      	cbz	r4, 80030bc <put_fat+0x94>
 80030aa:	f3c6 1207 	ubfx	r2, r6, #4, #8
 80030ae:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 80030b2:	2301      	movs	r3, #1
 80030b4:	70fb      	strb	r3, [r7, #3]
			break;
 80030b6:	e7c9      	b.n	800304c <put_fat+0x24>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80030b8:	b2f3      	uxtb	r3, r6
 80030ba:	e7e6      	b.n	800308a <put_fat+0x62>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80030bc:	f91a 2009 	ldrsb.w	r2, [sl, r9]
 80030c0:	f022 020f 	bic.w	r2, r2, #15
 80030c4:	f3c6 2603 	ubfx	r6, r6, #8, #4
 80030c8:	4332      	orrs	r2, r6
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	e7ef      	b.n	80030ae <put_fat+0x86>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80030ce:	6a01      	ldr	r1, [r0, #32]
 80030d0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80030d4:	f7ff fdd3 	bl	8002c7e <move_window>
			if (res != FR_OK) break;
 80030d8:	4605      	mov	r5, r0
 80030da:	2800      	cmp	r0, #0
 80030dc:	d1b6      	bne.n	800304c <put_fat+0x24>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80030de:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80030e2:	0064      	lsls	r4, r4, #1
 80030e4:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80030e8:	b2b1      	uxth	r1, r6
 80030ea:	4420      	add	r0, r4
 80030ec:	f7ff fbb6 	bl	800285c <st_word>
			fs->wflag = 1;
 80030f0:	2301      	movs	r3, #1
 80030f2:	70fb      	strb	r3, [r7, #3]
			break;
 80030f4:	e7aa      	b.n	800304c <put_fat+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80030f6:	6a01      	ldr	r1, [r0, #32]
 80030f8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80030fc:	f7ff fdbf 	bl	8002c7e <move_window>
			if (res != FR_OK) break;
 8003100:	4605      	mov	r5, r0
 8003102:	2800      	cmp	r0, #0
 8003104:	d1a2      	bne.n	800304c <put_fat+0x24>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003106:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 800310a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800310e:	00a4      	lsls	r4, r4, #2
 8003110:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8003114:	441c      	add	r4, r3
 8003116:	4620      	mov	r0, r4
 8003118:	f7ff fb95 	bl	8002846 <ld_dword>
 800311c:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003120:	4331      	orrs	r1, r6
 8003122:	4620      	mov	r0, r4
 8003124:	f7ff fb9e 	bl	8002864 <st_dword>
			fs->wflag = 1;
 8003128:	2301      	movs	r3, #1
 800312a:	70fb      	strb	r3, [r7, #3]
			break;
 800312c:	e78e      	b.n	800304c <put_fat+0x24>
	FRESULT res = FR_INT_ERR;
 800312e:	2502      	movs	r5, #2
 8003130:	e78c      	b.n	800304c <put_fat+0x24>
 8003132:	2502      	movs	r5, #2
 8003134:	e78a      	b.n	800304c <put_fat+0x24>

08003136 <get_fat>:
{
 8003136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8003138:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800313a:	2901      	cmp	r1, #1
 800313c:	d956      	bls.n	80031ec <get_fat+0xb6>
 800313e:	460c      	mov	r4, r1
 8003140:	696b      	ldr	r3, [r5, #20]
 8003142:	428b      	cmp	r3, r1
 8003144:	d954      	bls.n	80031f0 <get_fat+0xba>
		switch (fs->fs_type) {
 8003146:	782b      	ldrb	r3, [r5, #0]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d02d      	beq.n	80031a8 <get_fat+0x72>
 800314c:	2b03      	cmp	r3, #3
 800314e:	d03b      	beq.n	80031c8 <get_fat+0x92>
 8003150:	2b01      	cmp	r3, #1
 8003152:	d001      	beq.n	8003158 <get_fat+0x22>
 8003154:	2001      	movs	r0, #1
 8003156:	e04a      	b.n	80031ee <get_fat+0xb8>
			bc = (UINT)clst; bc += bc / 2;
 8003158:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800315c:	6a29      	ldr	r1, [r5, #32]
 800315e:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8003162:	4628      	mov	r0, r5
 8003164:	f7ff fd8b 	bl	8002c7e <move_window>
 8003168:	b110      	cbz	r0, 8003170 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800316a:	f04f 30ff 	mov.w	r0, #4294967295
 800316e:	e03e      	b.n	80031ee <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
 8003170:	1c77      	adds	r7, r6, #1
 8003172:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8003176:	442e      	add	r6, r5
 8003178:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800317c:	6a29      	ldr	r1, [r5, #32]
 800317e:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8003182:	4628      	mov	r0, r5
 8003184:	f7ff fd7b 	bl	8002c7e <move_window>
 8003188:	bba0      	cbnz	r0, 80031f4 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 800318a:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800318e:	443d      	add	r5, r7
 8003190:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8003194:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003198:	f014 0f01 	tst.w	r4, #1
 800319c:	d001      	beq.n	80031a2 <get_fat+0x6c>
 800319e:	0900      	lsrs	r0, r0, #4
 80031a0:	e025      	b.n	80031ee <get_fat+0xb8>
 80031a2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80031a6:	e022      	b.n	80031ee <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80031a8:	6a29      	ldr	r1, [r5, #32]
 80031aa:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80031ae:	4628      	mov	r0, r5
 80031b0:	f7ff fd65 	bl	8002c7e <move_window>
 80031b4:	bb08      	cbnz	r0, 80031fa <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80031b6:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80031ba:	0064      	lsls	r4, r4, #1
 80031bc:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80031c0:	4420      	add	r0, r4
 80031c2:	f7ff fb3b 	bl	800283c <ld_word>
			break;
 80031c6:	e012      	b.n	80031ee <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80031c8:	6a29      	ldr	r1, [r5, #32]
 80031ca:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80031ce:	4628      	mov	r0, r5
 80031d0:	f7ff fd55 	bl	8002c7e <move_window>
 80031d4:	b9a0      	cbnz	r0, 8003200 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80031d6:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80031da:	00a4      	lsls	r4, r4, #2
 80031dc:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80031e0:	4420      	add	r0, r4
 80031e2:	f7ff fb30 	bl	8002846 <ld_dword>
 80031e6:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 80031ea:	e000      	b.n	80031ee <get_fat+0xb8>
		val = 1;	/* Internal error */
 80031ec:	2001      	movs	r0, #1
}
 80031ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 80031f0:	2001      	movs	r0, #1
 80031f2:	e7fc      	b.n	80031ee <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295
 80031f8:	e7f9      	b.n	80031ee <get_fat+0xb8>
 80031fa:	f04f 30ff 	mov.w	r0, #4294967295
 80031fe:	e7f6      	b.n	80031ee <get_fat+0xb8>
 8003200:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 8003204:	e7f3      	b.n	80031ee <get_fat+0xb8>

08003206 <dir_sdi>:
{
 8003206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800320a:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800320e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003212:	d242      	bcs.n	800329a <dir_sdi+0x94>
 8003214:	4606      	mov	r6, r0
 8003216:	460f      	mov	r7, r1
 8003218:	f011 0f1f 	tst.w	r1, #31
 800321c:	d13f      	bne.n	800329e <dir_sdi+0x98>
	dp->dptr = ofs;				/* Set current offset */
 800321e:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003220:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003222:	b92c      	cbnz	r4, 8003230 <dir_sdi+0x2a>
 8003224:	f898 3000 	ldrb.w	r3, [r8]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <dir_sdi+0x2a>
		clst = fs->dirbase;
 800322c:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003230:	b9b4      	cbnz	r4, 8003260 <dir_sdi+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003232:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8003236:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 800323a:	d932      	bls.n	80032a2 <dir_sdi+0x9c>
		dp->sect = fs->dirbase;
 800323c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8003240:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8003242:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003244:	69f3      	ldr	r3, [r6, #28]
 8003246:	b393      	cbz	r3, 80032ae <dir_sdi+0xa8>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003248:	eb03 2357 	add.w	r3, r3, r7, lsr #9
 800324c:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800324e:	f108 0330 	add.w	r3, r8, #48	; 0x30
 8003252:	f3c7 0108 	ubfx	r1, r7, #0, #9
 8003256:	4419      	add	r1, r3
 8003258:	6231      	str	r1, [r6, #32]
	return FR_OK;
 800325a:	2000      	movs	r0, #0
}
 800325c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003260:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 8003264:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8003266:	e000      	b.n	800326a <dir_sdi+0x64>
			ofs -= csz;
 8003268:	1b7f      	subs	r7, r7, r5
		while (ofs >= csz) {				/* Follow cluster chain */
 800326a:	42af      	cmp	r7, r5
 800326c:	d30f      	bcc.n	800328e <dir_sdi+0x88>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800326e:	4621      	mov	r1, r4
 8003270:	4630      	mov	r0, r6
 8003272:	f7ff ff60 	bl	8003136 <get_fat>
 8003276:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003278:	f1b0 3fff 	cmp.w	r0, #4294967295
 800327c:	d013      	beq.n	80032a6 <dir_sdi+0xa0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800327e:	2801      	cmp	r0, #1
 8003280:	d913      	bls.n	80032aa <dir_sdi+0xa4>
 8003282:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8003286:	4283      	cmp	r3, r0
 8003288:	d8ee      	bhi.n	8003268 <dir_sdi+0x62>
 800328a:	2002      	movs	r0, #2
 800328c:	e7e6      	b.n	800325c <dir_sdi+0x56>
		dp->sect = clust2sect(fs, clst);
 800328e:	4621      	mov	r1, r4
 8003290:	4640      	mov	r0, r8
 8003292:	f7ff fbd5 	bl	8002a40 <clust2sect>
 8003296:	61f0      	str	r0, [r6, #28]
 8003298:	e7d3      	b.n	8003242 <dir_sdi+0x3c>
		return FR_INT_ERR;
 800329a:	2002      	movs	r0, #2
 800329c:	e7de      	b.n	800325c <dir_sdi+0x56>
 800329e:	2002      	movs	r0, #2
 80032a0:	e7dc      	b.n	800325c <dir_sdi+0x56>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80032a2:	2002      	movs	r0, #2
 80032a4:	e7da      	b.n	800325c <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80032a6:	2001      	movs	r0, #1
 80032a8:	e7d8      	b.n	800325c <dir_sdi+0x56>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80032aa:	2002      	movs	r0, #2
 80032ac:	e7d6      	b.n	800325c <dir_sdi+0x56>
	if (!dp->sect) return FR_INT_ERR;
 80032ae:	2002      	movs	r0, #2
 80032b0:	e7d4      	b.n	800325c <dir_sdi+0x56>

080032b2 <create_chain>:
{
 80032b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032b6:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 80032b8:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 80032ba:	460f      	mov	r7, r1
 80032bc:	b951      	cbnz	r1, 80032d4 <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80032be:	f8d6 800c 	ldr.w	r8, [r6, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80032c2:	f1b8 0f00 	cmp.w	r8, #0
 80032c6:	d012      	beq.n	80032ee <create_chain+0x3c>
 80032c8:	6973      	ldr	r3, [r6, #20]
 80032ca:	4543      	cmp	r3, r8
 80032cc:	d811      	bhi.n	80032f2 <create_chain+0x40>
 80032ce:	f04f 0801 	mov.w	r8, #1
 80032d2:	e00e      	b.n	80032f2 <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80032d4:	f7ff ff2f 	bl	8003136 <get_fat>
 80032d8:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80032da:	2801      	cmp	r0, #1
 80032dc:	d94c      	bls.n	8003378 <create_chain+0xc6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80032de:	f1b0 3fff 	cmp.w	r0, #4294967295
 80032e2:	d04e      	beq.n	8003382 <create_chain+0xd0>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80032e4:	6972      	ldr	r2, [r6, #20]
 80032e6:	4282      	cmp	r2, r0
 80032e8:	d84b      	bhi.n	8003382 <create_chain+0xd0>
		scl = clst;
 80032ea:	46b8      	mov	r8, r7
 80032ec:	e001      	b.n	80032f2 <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80032ee:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 80032f2:	4644      	mov	r4, r8
 80032f4:	e00c      	b.n	8003310 <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80032f6:	4621      	mov	r1, r4
 80032f8:	4628      	mov	r0, r5
 80032fa:	f7ff ff1c 	bl	8003136 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 80032fe:	4603      	mov	r3, r0
 8003300:	b178      	cbz	r0, 8003322 <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003302:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003306:	bf18      	it	ne
 8003308:	2801      	cmpne	r0, #1
 800330a:	d03a      	beq.n	8003382 <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
 800330c:	4544      	cmp	r4, r8
 800330e:	d037      	beq.n	8003380 <create_chain+0xce>
			ncl++;							/* Next cluster */
 8003310:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003312:	6973      	ldr	r3, [r6, #20]
 8003314:	42a3      	cmp	r3, r4
 8003316:	d8ee      	bhi.n	80032f6 <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 8003318:	f1b8 0f01 	cmp.w	r8, #1
 800331c:	d92e      	bls.n	800337c <create_chain+0xca>
				ncl = 2;
 800331e:	2402      	movs	r4, #2
 8003320:	e7e9      	b.n	80032f6 <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003322:	f04f 32ff 	mov.w	r2, #4294967295
 8003326:	4621      	mov	r1, r4
 8003328:	4630      	mov	r0, r6
 800332a:	f7ff fe7d 	bl	8003028 <put_fat>
		if (res == FR_OK && clst != 0) {
 800332e:	4602      	mov	r2, r0
 8003330:	1e3b      	subs	r3, r7, #0
 8003332:	bf18      	it	ne
 8003334:	2301      	movne	r3, #1
 8003336:	2800      	cmp	r0, #0
 8003338:	bf18      	it	ne
 800333a:	2300      	movne	r3, #0
 800333c:	b973      	cbnz	r3, 800335c <create_chain+0xaa>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800333e:	b9a2      	cbnz	r2, 800336a <create_chain+0xb8>
		fs->last_clst = ncl;
 8003340:	60f4      	str	r4, [r6, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003342:	6932      	ldr	r2, [r6, #16]
 8003344:	6973      	ldr	r3, [r6, #20]
 8003346:	3b02      	subs	r3, #2
 8003348:	429a      	cmp	r2, r3
 800334a:	d801      	bhi.n	8003350 <create_chain+0x9e>
 800334c:	3a01      	subs	r2, #1
 800334e:	6132      	str	r2, [r6, #16]
		fs->fsi_flag |= 1;
 8003350:	7933      	ldrb	r3, [r6, #4]
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	7133      	strb	r3, [r6, #4]
 8003358:	4623      	mov	r3, r4
 800335a:	e012      	b.n	8003382 <create_chain+0xd0>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800335c:	4622      	mov	r2, r4
 800335e:	4639      	mov	r1, r7
 8003360:	4630      	mov	r0, r6
 8003362:	f7ff fe61 	bl	8003028 <put_fat>
 8003366:	4602      	mov	r2, r0
 8003368:	e7e9      	b.n	800333e <create_chain+0x8c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800336a:	2a01      	cmp	r2, #1
 800336c:	d001      	beq.n	8003372 <create_chain+0xc0>
 800336e:	2301      	movs	r3, #1
 8003370:	e007      	b.n	8003382 <create_chain+0xd0>
 8003372:	f04f 33ff 	mov.w	r3, #4294967295
 8003376:	e004      	b.n	8003382 <create_chain+0xd0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003378:	2301      	movs	r3, #1
 800337a:	e002      	b.n	8003382 <create_chain+0xd0>
				if (ncl > scl) return 0;	/* No free cluster */
 800337c:	2300      	movs	r3, #0
 800337e:	e000      	b.n	8003382 <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003388 <remove_chain>:
{
 8003388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338a:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800338c:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800338e:	2901      	cmp	r1, #1
 8003390:	d92e      	bls.n	80033f0 <remove_chain+0x68>
 8003392:	4606      	mov	r6, r0
 8003394:	4611      	mov	r1, r2
 8003396:	696b      	ldr	r3, [r5, #20]
 8003398:	42a3      	cmp	r3, r4
 800339a:	d92b      	bls.n	80033f4 <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800339c:	b14a      	cbz	r2, 80033b2 <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800339e:	f04f 32ff 	mov.w	r2, #4294967295
 80033a2:	4628      	mov	r0, r5
 80033a4:	f7ff fe40 	bl	8003028 <put_fat>
		if (res != FR_OK) return res;
 80033a8:	4607      	mov	r7, r0
 80033aa:	b110      	cbz	r0, 80033b2 <remove_chain+0x2a>
 80033ac:	e023      	b.n	80033f6 <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80033ae:	42a2      	cmp	r2, r4
 80033b0:	d921      	bls.n	80033f6 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80033b2:	4627      	mov	r7, r4
 80033b4:	4621      	mov	r1, r4
 80033b6:	4630      	mov	r0, r6
 80033b8:	f7ff febd 	bl	8003136 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 80033bc:	4604      	mov	r4, r0
 80033be:	b1e0      	cbz	r0, 80033fa <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80033c0:	2801      	cmp	r0, #1
 80033c2:	d01c      	beq.n	80033fe <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80033c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80033c8:	d01b      	beq.n	8003402 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80033ca:	2200      	movs	r2, #0
 80033cc:	4639      	mov	r1, r7
 80033ce:	4628      	mov	r0, r5
 80033d0:	f7ff fe2a 	bl	8003028 <put_fat>
			if (res != FR_OK) return res;
 80033d4:	4607      	mov	r7, r0
 80033d6:	b970      	cbnz	r0, 80033f6 <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80033d8:	692b      	ldr	r3, [r5, #16]
 80033da:	696a      	ldr	r2, [r5, #20]
 80033dc:	1e91      	subs	r1, r2, #2
 80033de:	428b      	cmp	r3, r1
 80033e0:	d2e5      	bcs.n	80033ae <remove_chain+0x26>
			fs->free_clst++;
 80033e2:	3301      	adds	r3, #1
 80033e4:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 80033e6:	792b      	ldrb	r3, [r5, #4]
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	712b      	strb	r3, [r5, #4]
 80033ee:	e7de      	b.n	80033ae <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80033f0:	2702      	movs	r7, #2
 80033f2:	e000      	b.n	80033f6 <remove_chain+0x6e>
 80033f4:	2702      	movs	r7, #2
}
 80033f6:	4638      	mov	r0, r7
 80033f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 80033fa:	2700      	movs	r7, #0
 80033fc:	e7fb      	b.n	80033f6 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80033fe:	2702      	movs	r7, #2
 8003400:	e7f9      	b.n	80033f6 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003402:	2701      	movs	r7, #1
 8003404:	e7f7      	b.n	80033f6 <remove_chain+0x6e>

08003406 <dir_next>:
{
 8003406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
 800340a:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800340c:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800340e:	69c3      	ldr	r3, [r0, #28]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d06c      	beq.n	80034ee <dir_next+0xe8>
 8003414:	4604      	mov	r4, r0
 8003416:	4688      	mov	r8, r1
 8003418:	3520      	adds	r5, #32
 800341a:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800341e:	d268      	bcs.n	80034f2 <dir_next+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003420:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8003424:	b93f      	cbnz	r7, 8003436 <dir_next+0x30>
		dp->sect++;				/* Next sector */
 8003426:	3301      	adds	r3, #1
 8003428:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800342a:	6981      	ldr	r1, [r0, #24]
 800342c:	b979      	cbnz	r1, 800344e <dir_next+0x48>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800342e:	8933      	ldrh	r3, [r6, #8]
 8003430:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8003434:	d907      	bls.n	8003446 <dir_next+0x40>
	dp->dptr = ofs;						/* Current entry */
 8003436:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003438:	f106 0330 	add.w	r3, r6, #48	; 0x30
 800343c:	443b      	add	r3, r7
 800343e:	6223      	str	r3, [r4, #32]
	return FR_OK;
 8003440:	2000      	movs	r0, #0
}
 8003442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 8003446:	2300      	movs	r3, #0
 8003448:	61c3      	str	r3, [r0, #28]
 800344a:	2004      	movs	r0, #4
 800344c:	e7f9      	b.n	8003442 <dir_next+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800344e:	8973      	ldrh	r3, [r6, #10]
 8003450:	3b01      	subs	r3, #1
 8003452:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 8003456:	d1ee      	bne.n	8003436 <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003458:	f7ff fe6d 	bl	8003136 <get_fat>
 800345c:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800345e:	2801      	cmp	r0, #1
 8003460:	d949      	bls.n	80034f6 <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003462:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003466:	d048      	beq.n	80034fa <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003468:	6973      	ldr	r3, [r6, #20]
 800346a:	4283      	cmp	r3, r0
 800346c:	d837      	bhi.n	80034de <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 800346e:	f1b8 0f00 	cmp.w	r8, #0
 8003472:	d011      	beq.n	8003498 <dir_next+0x92>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003474:	69a1      	ldr	r1, [r4, #24]
 8003476:	4620      	mov	r0, r4
 8003478:	f7ff ff1b 	bl	80032b2 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800347c:	4682      	mov	sl, r0
 800347e:	2800      	cmp	r0, #0
 8003480:	d03d      	beq.n	80034fe <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003482:	2801      	cmp	r0, #1
 8003484:	d03d      	beq.n	8003502 <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003486:	f1b0 3fff 	cmp.w	r0, #4294967295
 800348a:	d03c      	beq.n	8003506 <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800348c:	4630      	mov	r0, r6
 800348e:	f7ff fbcd 	bl	8002c2c <sync_window>
 8003492:	b128      	cbz	r0, 80034a0 <dir_next+0x9a>
 8003494:	2001      	movs	r0, #1
 8003496:	e7d4      	b.n	8003442 <dir_next+0x3c>
						dp->sect = 0; return FR_NO_FILE;
 8003498:	2300      	movs	r3, #0
 800349a:	61e3      	str	r3, [r4, #28]
 800349c:	2004      	movs	r0, #4
 800349e:	e7d0      	b.n	8003442 <dir_next+0x3c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80034a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034a4:	2100      	movs	r1, #0
 80034a6:	f106 0030 	add.w	r0, r6, #48	; 0x30
 80034aa:	f7ff f9f1 	bl	8002890 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80034ae:	4651      	mov	r1, sl
 80034b0:	4630      	mov	r0, r6
 80034b2:	f7ff fac5 	bl	8002a40 <clust2sect>
 80034b6:	62f0      	str	r0, [r6, #44]	; 0x2c
 80034b8:	8973      	ldrh	r3, [r6, #10]
 80034ba:	4599      	cmp	r9, r3
 80034bc:	d20b      	bcs.n	80034d6 <dir_next+0xd0>
						fs->wflag = 1;
 80034be:	2301      	movs	r3, #1
 80034c0:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80034c2:	4630      	mov	r0, r6
 80034c4:	f7ff fbb2 	bl	8002c2c <sync_window>
 80034c8:	b9f8      	cbnz	r0, 800350a <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80034ca:	f109 0901 	add.w	r9, r9, #1
 80034ce:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80034d0:	3301      	adds	r3, #1
 80034d2:	62f3      	str	r3, [r6, #44]	; 0x2c
 80034d4:	e7f0      	b.n	80034b8 <dir_next+0xb2>
					fs->winsect -= n;							/* Restore window offset */
 80034d6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80034d8:	eba3 0309 	sub.w	r3, r3, r9
 80034dc:	62f3      	str	r3, [r6, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 80034de:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 80034e2:	4651      	mov	r1, sl
 80034e4:	4630      	mov	r0, r6
 80034e6:	f7ff faab 	bl	8002a40 <clust2sect>
 80034ea:	61e0      	str	r0, [r4, #28]
 80034ec:	e7a3      	b.n	8003436 <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80034ee:	2004      	movs	r0, #4
 80034f0:	e7a7      	b.n	8003442 <dir_next+0x3c>
 80034f2:	2004      	movs	r0, #4
 80034f4:	e7a5      	b.n	8003442 <dir_next+0x3c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80034f6:	2002      	movs	r0, #2
 80034f8:	e7a3      	b.n	8003442 <dir_next+0x3c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80034fa:	2001      	movs	r0, #1
 80034fc:	e7a1      	b.n	8003442 <dir_next+0x3c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80034fe:	2007      	movs	r0, #7
 8003500:	e79f      	b.n	8003442 <dir_next+0x3c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003502:	2002      	movs	r0, #2
 8003504:	e79d      	b.n	8003442 <dir_next+0x3c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003506:	2001      	movs	r0, #1
 8003508:	e79b      	b.n	8003442 <dir_next+0x3c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800350a:	2001      	movs	r0, #1
 800350c:	e799      	b.n	8003442 <dir_next+0x3c>

0800350e <dir_find>:
{
 800350e:	b570      	push	{r4, r5, r6, lr}
 8003510:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8003512:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003514:	2100      	movs	r1, #0
 8003516:	f7ff fe76 	bl	8003206 <dir_sdi>
	if (res != FR_OK) return res;
 800351a:	4605      	mov	r5, r0
 800351c:	b140      	cbz	r0, 8003530 <dir_find+0x22>
}
 800351e:	4628      	mov	r0, r5
 8003520:	bd70      	pop	{r4, r5, r6, pc}
		res = dir_next(dp, 0);	/* Next entry */
 8003522:	2100      	movs	r1, #0
 8003524:	4620      	mov	r0, r4
 8003526:	f7ff ff6e 	bl	8003406 <dir_next>
	} while (res == FR_OK);
 800352a:	4605      	mov	r5, r0
 800352c:	2800      	cmp	r0, #0
 800352e:	d1f6      	bne.n	800351e <dir_find+0x10>
		res = move_window(fs, dp->sect);
 8003530:	69e1      	ldr	r1, [r4, #28]
 8003532:	4630      	mov	r0, r6
 8003534:	f7ff fba3 	bl	8002c7e <move_window>
		if (res != FR_OK) break;
 8003538:	4605      	mov	r5, r0
 800353a:	2800      	cmp	r0, #0
 800353c:	d1ef      	bne.n	800351e <dir_find+0x10>
		c = dp->dir[DIR_Name];
 800353e:	6a20      	ldr	r0, [r4, #32]
 8003540:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003542:	b17b      	cbz	r3, 8003564 <dir_find+0x56>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8003544:	7ac3      	ldrb	r3, [r0, #11]
 8003546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800354a:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800354c:	7ac3      	ldrb	r3, [r0, #11]
 800354e:	f013 0f08 	tst.w	r3, #8
 8003552:	d1e6      	bne.n	8003522 <dir_find+0x14>
 8003554:	220b      	movs	r2, #11
 8003556:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800355a:	f7ff f99e 	bl	800289a <mem_cmp>
 800355e:	2800      	cmp	r0, #0
 8003560:	d1df      	bne.n	8003522 <dir_find+0x14>
 8003562:	e7dc      	b.n	800351e <dir_find+0x10>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003564:	2504      	movs	r5, #4
 8003566:	e7da      	b.n	800351e <dir_find+0x10>

08003568 <follow_path>:
{
 8003568:	b530      	push	{r4, r5, lr}
 800356a:	b083      	sub	sp, #12
 800356c:	4604      	mov	r4, r0
 800356e:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8003570:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003572:	9b01      	ldr	r3, [sp, #4]
 8003574:	781a      	ldrb	r2, [r3, #0]
 8003576:	2a5c      	cmp	r2, #92	; 0x5c
 8003578:	bf18      	it	ne
 800357a:	2a2f      	cmpne	r2, #47	; 0x2f
 800357c:	d102      	bne.n	8003584 <follow_path+0x1c>
 800357e:	3301      	adds	r3, #1
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	e7f6      	b.n	8003572 <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
 8003584:	2200      	movs	r2, #0
 8003586:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b1f      	cmp	r3, #31
 800358c:	d81b      	bhi.n	80035c6 <follow_path+0x5e>
		dp->fn[NSFLAG] = NS_NONAME;
 800358e:	2380      	movs	r3, #128	; 0x80
 8003590:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8003594:	4611      	mov	r1, r2
 8003596:	4620      	mov	r0, r4
 8003598:	f7ff fe35 	bl	8003206 <dir_sdi>
 800359c:	4603      	mov	r3, r0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	b003      	add	sp, #12
 80035a2:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 80035a4:	2804      	cmp	r0, #4
 80035a6:	d1fa      	bne.n	800359e <follow_path+0x36>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80035a8:	f012 0f04 	tst.w	r2, #4
 80035ac:	d1f7      	bne.n	800359e <follow_path+0x36>
 80035ae:	2305      	movs	r3, #5
 80035b0:	e7f5      	b.n	800359e <follow_path+0x36>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80035b2:	f105 0130 	add.w	r1, r5, #48	; 0x30
 80035b6:	6963      	ldr	r3, [r4, #20]
 80035b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035bc:	4419      	add	r1, r3
 80035be:	4628      	mov	r0, r5
 80035c0:	f7ff fa5b 	bl	8002a7a <ld_clust>
 80035c4:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80035c6:	a901      	add	r1, sp, #4
 80035c8:	4620      	mov	r0, r4
 80035ca:	f7ff fa7d 	bl	8002ac8 <create_name>
			if (res != FR_OK) break;
 80035ce:	4603      	mov	r3, r0
 80035d0:	2800      	cmp	r0, #0
 80035d2:	d1e4      	bne.n	800359e <follow_path+0x36>
			res = dir_find(dp);				/* Find an object with the segment name */
 80035d4:	4620      	mov	r0, r4
 80035d6:	f7ff ff9a 	bl	800350e <dir_find>
			ns = dp->fn[NSFLAG];
 80035da:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80035de:	4603      	mov	r3, r0
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d1df      	bne.n	80035a4 <follow_path+0x3c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80035e4:	f012 0f04 	tst.w	r2, #4
 80035e8:	d1d9      	bne.n	800359e <follow_path+0x36>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80035ea:	79a3      	ldrb	r3, [r4, #6]
 80035ec:	f013 0f10 	tst.w	r3, #16
 80035f0:	d1df      	bne.n	80035b2 <follow_path+0x4a>
				res = FR_NO_PATH; break;
 80035f2:	2305      	movs	r3, #5
 80035f4:	e7d3      	b.n	800359e <follow_path+0x36>

080035f6 <dir_alloc>:
{
 80035f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f8:	4604      	mov	r4, r0
 80035fa:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 80035fc:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 80035fe:	2100      	movs	r1, #0
 8003600:	f7ff fe01 	bl	8003206 <dir_sdi>
	if (res == FR_OK) {
 8003604:	4602      	mov	r2, r0
 8003606:	b9b8      	cbnz	r0, 8003638 <dir_alloc+0x42>
		n = 0;
 8003608:	2500      	movs	r5, #0
 800360a:	e006      	b.n	800361a <dir_alloc+0x24>
				n = 0;					/* Not a blank entry. Restart to search */
 800360c:	2500      	movs	r5, #0
			res = dir_next(dp, 1);
 800360e:	2101      	movs	r1, #1
 8003610:	4620      	mov	r0, r4
 8003612:	f7ff fef8 	bl	8003406 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003616:	4602      	mov	r2, r0
 8003618:	b970      	cbnz	r0, 8003638 <dir_alloc+0x42>
			res = move_window(fs, dp->sect);
 800361a:	69e1      	ldr	r1, [r4, #28]
 800361c:	4638      	mov	r0, r7
 800361e:	f7ff fb2e 	bl	8002c7e <move_window>
			if (res != FR_OK) break;
 8003622:	4602      	mov	r2, r0
 8003624:	b940      	cbnz	r0, 8003638 <dir_alloc+0x42>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003626:	6a23      	ldr	r3, [r4, #32]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	bf18      	it	ne
 800362e:	2be5      	cmpne	r3, #229	; 0xe5
 8003630:	d1ec      	bne.n	800360c <dir_alloc+0x16>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003632:	3501      	adds	r5, #1
 8003634:	42b5      	cmp	r5, r6
 8003636:	d1ea      	bne.n	800360e <dir_alloc+0x18>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003638:	2a04      	cmp	r2, #4
 800363a:	d001      	beq.n	8003640 <dir_alloc+0x4a>
}
 800363c:	4610      	mov	r0, r2
 800363e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003640:	2207      	movs	r2, #7
 8003642:	e7fb      	b.n	800363c <dir_alloc+0x46>

08003644 <dir_register>:
{
 8003644:	b570      	push	{r4, r5, r6, lr}
 8003646:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8003648:	6806      	ldr	r6, [r0, #0]
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800364a:	2101      	movs	r1, #1
 800364c:	f7ff ffd3 	bl	80035f6 <dir_alloc>
	if (res == FR_OK) {
 8003650:	4605      	mov	r5, r0
 8003652:	b108      	cbz	r0, 8003658 <dir_register+0x14>
}
 8003654:	4628      	mov	r0, r5
 8003656:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(fs, dp->sect);
 8003658:	69e1      	ldr	r1, [r4, #28]
 800365a:	4630      	mov	r0, r6
 800365c:	f7ff fb0f 	bl	8002c7e <move_window>
		if (res == FR_OK) {
 8003660:	4605      	mov	r5, r0
 8003662:	2800      	cmp	r0, #0
 8003664:	d1f6      	bne.n	8003654 <dir_register+0x10>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003666:	2220      	movs	r2, #32
 8003668:	2100      	movs	r1, #0
 800366a:	6a20      	ldr	r0, [r4, #32]
 800366c:	f7ff f910 	bl	8002890 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003670:	220b      	movs	r2, #11
 8003672:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8003676:	6a20      	ldr	r0, [r4, #32]
 8003678:	f7ff f8fe 	bl	8002878 <mem_cpy>
			fs->wflag = 1;
 800367c:	2301      	movs	r3, #1
 800367e:	70f3      	strb	r3, [r6, #3]
 8003680:	e7e8      	b.n	8003654 <dir_register+0x10>
	...

08003684 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003684:	b570      	push	{r4, r5, r6, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	9001      	str	r0, [sp, #4]
 800368a:	9100      	str	r1, [sp, #0]
 800368c:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800368e:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003690:	a803      	add	r0, sp, #12
 8003692:	f7ff fa83 	bl	8002b9c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003696:	1e05      	subs	r5, r0, #0
 8003698:	db22      	blt.n	80036e0 <f_mount+0x5c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800369a:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <f_mount+0x60>)
 800369c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80036a0:	6a1e      	ldr	r6, [r3, #32]

	if (cfs) {
 80036a2:	b126      	cbz	r6, 80036ae <f_mount+0x2a>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80036a4:	4630      	mov	r0, r6
 80036a6:	f7ff f9ad 	bl	8002a04 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80036aa:	2300      	movs	r3, #0
 80036ac:	7033      	strb	r3, [r6, #0]
	}

	if (fs) {
 80036ae:	9b01      	ldr	r3, [sp, #4]
 80036b0:	b10b      	cbz	r3, 80036b6 <f_mount+0x32>
		fs->fs_type = 0;				/* Clear new fs object */
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80036b6:	9a01      	ldr	r2, [sp, #4]
 80036b8:	480a      	ldr	r0, [pc, #40]	; (80036e4 <f_mount+0x60>)
 80036ba:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80036be:	6202      	str	r2, [r0, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80036c0:	3c01      	subs	r4, #1
 80036c2:	bf18      	it	ne
 80036c4:	2401      	movne	r4, #1
 80036c6:	2a00      	cmp	r2, #0
 80036c8:	bf08      	it	eq
 80036ca:	2401      	moveq	r4, #1
 80036cc:	b114      	cbz	r4, 80036d4 <f_mount+0x50>
 80036ce:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80036d0:	b004      	add	sp, #16
 80036d2:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80036d4:	2200      	movs	r2, #0
 80036d6:	a901      	add	r1, sp, #4
 80036d8:	4668      	mov	r0, sp
 80036da:	f7ff fb27 	bl	8002d2c <find_volume>
	LEAVE_FF(fs, res);
 80036de:	e7f7      	b.n	80036d0 <f_mount+0x4c>
	if (vol < 0) return FR_INVALID_DRIVE;
 80036e0:	200b      	movs	r0, #11
 80036e2:	e7f5      	b.n	80036d0 <f_mount+0x4c>
 80036e4:	2000067c 	.word	0x2000067c

080036e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80036e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036ec:	b091      	sub	sp, #68	; 0x44
 80036ee:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80036f0:	2800      	cmp	r0, #0
 80036f2:	f000 810f 	beq.w	8003914 <f_open+0x22c>
 80036f6:	4615      	mov	r5, r2
 80036f8:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80036fa:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80036fe:	463a      	mov	r2, r7
 8003700:	a903      	add	r1, sp, #12
 8003702:	a801      	add	r0, sp, #4
 8003704:	f7ff fb12 	bl	8002d2c <find_volume>
	if (res == FR_OK) {
 8003708:	4604      	mov	r4, r0
 800370a:	b130      	cbz	r0, 800371a <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800370c:	b10c      	cbz	r4, 8003712 <f_open+0x2a>
 800370e:	2300      	movs	r3, #0
 8003710:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 8003712:	4620      	mov	r0, r4
 8003714:	b011      	add	sp, #68	; 0x44
 8003716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 800371a:	9b03      	ldr	r3, [sp, #12]
 800371c:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800371e:	9901      	ldr	r1, [sp, #4]
 8003720:	a804      	add	r0, sp, #16
 8003722:	f7ff ff21 	bl	8003568 <follow_path>
		if (res == FR_OK) {
 8003726:	4604      	mov	r4, r0
 8003728:	b960      	cbnz	r0, 8003744 <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800372a:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800372e:	2b00      	cmp	r3, #0
 8003730:	db50      	blt.n	80037d4 <f_open+0xec>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003732:	f037 0301 	bics.w	r3, r7, #1
 8003736:	bf14      	ite	ne
 8003738:	2101      	movne	r1, #1
 800373a:	2100      	moveq	r1, #0
 800373c:	a804      	add	r0, sp, #16
 800373e:	f7ff f8c3 	bl	80028c8 <chk_lock>
 8003742:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003744:	f015 0f1c 	tst.w	r5, #28
 8003748:	d05a      	beq.n	8003800 <f_open+0x118>
			if (res != FR_OK) {					/* No file, create new */
 800374a:	2c00      	cmp	r4, #0
 800374c:	d04e      	beq.n	80037ec <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800374e:	2c04      	cmp	r4, #4
 8003750:	d042      	beq.n	80037d8 <f_open+0xf0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003752:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003756:	2c00      	cmp	r4, #0
 8003758:	d161      	bne.n	800381e <f_open+0x136>
 800375a:	f017 0f08 	tst.w	r7, #8
 800375e:	d05e      	beq.n	800381e <f_open+0x136>
				dw = GET_FATTIME();
 8003760:	f7ff f86a 	bl	8002838 <get_fattime>
 8003764:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8003766:	4601      	mov	r1, r0
 8003768:	980c      	ldr	r0, [sp, #48]	; 0x30
 800376a:	300e      	adds	r0, #14
 800376c:	f7ff f87a 	bl	8002864 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8003770:	4629      	mov	r1, r5
 8003772:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003774:	3016      	adds	r0, #22
 8003776:	f7ff f875 	bl	8002864 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800377a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800377c:	2220      	movs	r2, #32
 800377e:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003780:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003784:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8003788:	4649      	mov	r1, r9
 800378a:	4640      	mov	r0, r8
 800378c:	f7ff f975 	bl	8002a7a <ld_clust>
 8003790:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003792:	2200      	movs	r2, #0
 8003794:	4649      	mov	r1, r9
 8003796:	4640      	mov	r0, r8
 8003798:	f7ff f982 	bl	8002aa0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800379c:	2100      	movs	r1, #0
 800379e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80037a0:	301c      	adds	r0, #28
 80037a2:	f7ff f85f 	bl	8002864 <st_dword>
					fs->wflag = 1;
 80037a6:	9b03      	ldr	r3, [sp, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 80037ac:	b3bd      	cbz	r5, 800381e <f_open+0x136>
						dw = fs->winsect;
 80037ae:	9b03      	ldr	r3, [sp, #12]
 80037b0:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 80037b4:	2200      	movs	r2, #0
 80037b6:	4629      	mov	r1, r5
 80037b8:	a804      	add	r0, sp, #16
 80037ba:	f7ff fde5 	bl	8003388 <remove_chain>
						if (res == FR_OK) {
 80037be:	4604      	mov	r4, r0
 80037c0:	bb68      	cbnz	r0, 800381e <f_open+0x136>
							res = move_window(fs, dw);
 80037c2:	4641      	mov	r1, r8
 80037c4:	9803      	ldr	r0, [sp, #12]
 80037c6:	f7ff fa5a 	bl	8002c7e <move_window>
 80037ca:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80037cc:	3d01      	subs	r5, #1
 80037ce:	9b03      	ldr	r3, [sp, #12]
 80037d0:	60dd      	str	r5, [r3, #12]
 80037d2:	e024      	b.n	800381e <f_open+0x136>
				res = FR_INVALID_NAME;
 80037d4:	2406      	movs	r4, #6
 80037d6:	e7b5      	b.n	8003744 <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80037d8:	f7ff f8b2 	bl	8002940 <enq_lock>
 80037dc:	b908      	cbnz	r0, 80037e2 <f_open+0xfa>
 80037de:	2412      	movs	r4, #18
 80037e0:	e7b7      	b.n	8003752 <f_open+0x6a>
 80037e2:	a804      	add	r0, sp, #16
 80037e4:	f7ff ff2e 	bl	8003644 <dir_register>
 80037e8:	4604      	mov	r4, r0
 80037ea:	e7b2      	b.n	8003752 <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80037ec:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80037f0:	f013 0f11 	tst.w	r3, #17
 80037f4:	d112      	bne.n	800381c <f_open+0x134>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80037f6:	f015 0f04 	tst.w	r5, #4
 80037fa:	d0ac      	beq.n	8003756 <f_open+0x6e>
 80037fc:	2408      	movs	r4, #8
 80037fe:	e00e      	b.n	800381e <f_open+0x136>
			if (res == FR_OK) {					/* Following succeeded */
 8003800:	b96c      	cbnz	r4, 800381e <f_open+0x136>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8003802:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003806:	f013 0f10 	tst.w	r3, #16
 800380a:	d14c      	bne.n	80038a6 <f_open+0x1be>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800380c:	f015 0f02 	tst.w	r5, #2
 8003810:	d005      	beq.n	800381e <f_open+0x136>
 8003812:	f013 0f01 	tst.w	r3, #1
 8003816:	d002      	beq.n	800381e <f_open+0x136>
						res = FR_DENIED;
 8003818:	2407      	movs	r4, #7
 800381a:	e016      	b.n	800384a <f_open+0x162>
					res = FR_DENIED;
 800381c:	2407      	movs	r4, #7
		if (res == FR_OK) {
 800381e:	b9a4      	cbnz	r4, 800384a <f_open+0x162>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8003820:	f017 0f08 	tst.w	r7, #8
 8003824:	d001      	beq.n	800382a <f_open+0x142>
				mode |= FA_MODIFIED;
 8003826:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800382a:	9b03      	ldr	r3, [sp, #12]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8003830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003832:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003834:	f037 0301 	bics.w	r3, r7, #1
 8003838:	bf14      	ite	ne
 800383a:	2101      	movne	r1, #1
 800383c:	2100      	moveq	r1, #0
 800383e:	a804      	add	r0, sp, #16
 8003840:	f7ff f88e 	bl	8002960 <inc_lock>
 8003844:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8003846:	2800      	cmp	r0, #0
 8003848:	d062      	beq.n	8003910 <f_open+0x228>
		if (res == FR_OK) {
 800384a:	2c00      	cmp	r4, #0
 800384c:	f47f af5e 	bne.w	800370c <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8003850:	9d03      	ldr	r5, [sp, #12]
 8003852:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8003856:	4641      	mov	r1, r8
 8003858:	4628      	mov	r0, r5
 800385a:	f7ff f90e 	bl	8002a7a <ld_clust>
 800385e:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003860:	f108 001c 	add.w	r0, r8, #28
 8003864:	f7fe ffef 	bl	8002846 <ld_dword>
 8003868:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800386a:	2100      	movs	r1, #0
 800386c:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 800386e:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
 8003870:	88eb      	ldrh	r3, [r5, #6]
 8003872:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 8003874:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 8003876:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8003878:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800387a:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800387c:	f106 0830 	add.w	r8, r6, #48	; 0x30
 8003880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003884:	4640      	mov	r0, r8
 8003886:	f7ff f803 	bl	8002890 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800388a:	f017 0f20 	tst.w	r7, #32
 800388e:	f43f af3d 	beq.w	800370c <f_open+0x24>
 8003892:	68f5      	ldr	r5, [r6, #12]
 8003894:	2d00      	cmp	r5, #0
 8003896:	f43f af39 	beq.w	800370c <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800389a:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800389c:	9b03      	ldr	r3, [sp, #12]
 800389e:	895f      	ldrh	r7, [r3, #10]
 80038a0:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80038a2:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80038a4:	e005      	b.n	80038b2 <f_open+0x1ca>
					res = FR_NO_FILE;
 80038a6:	2404      	movs	r4, #4
 80038a8:	e7cf      	b.n	800384a <f_open+0x162>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80038aa:	f1b1 3fff 	cmp.w	r1, #4294967295
 80038ae:	d010      	beq.n	80038d2 <f_open+0x1ea>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80038b0:	1bed      	subs	r5, r5, r7
 80038b2:	42bd      	cmp	r5, r7
 80038b4:	bf94      	ite	ls
 80038b6:	2300      	movls	r3, #0
 80038b8:	2301      	movhi	r3, #1
 80038ba:	2c00      	cmp	r4, #0
 80038bc:	bf18      	it	ne
 80038be:	2300      	movne	r3, #0
 80038c0:	b14b      	cbz	r3, 80038d6 <f_open+0x1ee>
					clst = get_fat(&fp->obj, clst);
 80038c2:	4630      	mov	r0, r6
 80038c4:	f7ff fc37 	bl	8003136 <get_fat>
 80038c8:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80038ca:	2801      	cmp	r0, #1
 80038cc:	d8ed      	bhi.n	80038aa <f_open+0x1c2>
 80038ce:	2402      	movs	r4, #2
 80038d0:	e7eb      	b.n	80038aa <f_open+0x1c2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80038d2:	2401      	movs	r4, #1
 80038d4:	e7ec      	b.n	80038b0 <f_open+0x1c8>
				fp->clust = clst;
 80038d6:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80038d8:	2c00      	cmp	r4, #0
 80038da:	f47f af17 	bne.w	800370c <f_open+0x24>
 80038de:	f3c5 0308 	ubfx	r3, r5, #0, #9
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f43f af12 	beq.w	800370c <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80038e8:	9f03      	ldr	r7, [sp, #12]
 80038ea:	4638      	mov	r0, r7
 80038ec:	f7ff f8a8 	bl	8002a40 <clust2sect>
 80038f0:	b908      	cbnz	r0, 80038f6 <f_open+0x20e>
						res = FR_INT_ERR;
 80038f2:	2402      	movs	r4, #2
 80038f4:	e70b      	b.n	800370e <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80038f6:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 80038fa:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	4641      	mov	r1, r8
 8003900:	7878      	ldrb	r0, [r7, #1]
 8003902:	f7fe ff81 	bl	8002808 <disk_read>
 8003906:	2800      	cmp	r0, #0
 8003908:	f43f af00 	beq.w	800370c <f_open+0x24>
 800390c:	2401      	movs	r4, #1
 800390e:	e6fe      	b.n	800370e <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8003910:	2402      	movs	r4, #2
 8003912:	e6fb      	b.n	800370c <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8003914:	2409      	movs	r4, #9
 8003916:	e6fc      	b.n	8003712 <f_open+0x2a>

08003918 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8003918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800391c:	b085      	sub	sp, #20
 800391e:	4604      	mov	r4, r0
 8003920:	460e      	mov	r6, r1
 8003922:	4617      	mov	r7, r2
 8003924:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8003926:	2300      	movs	r3, #0
 8003928:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800392c:	9001      	str	r0, [sp, #4]
 800392e:	a903      	add	r1, sp, #12
 8003930:	f7ff f959 	bl	8002be6 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003934:	9000      	str	r0, [sp, #0]
 8003936:	2800      	cmp	r0, #0
 8003938:	f040 80ae 	bne.w	8003a98 <f_read+0x180>
 800393c:	7d63      	ldrb	r3, [r4, #21]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	f040 80a9 	bne.w	8003a98 <f_read+0x180>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003946:	7d23      	ldrb	r3, [r4, #20]
 8003948:	f013 0f01 	tst.w	r3, #1
 800394c:	f000 80c3 	beq.w	8003ad6 <f_read+0x1be>
	remain = fp->obj.objsize - fp->fptr;
 8003950:	68e5      	ldr	r5, [r4, #12]
 8003952:	69a3      	ldr	r3, [r4, #24]
 8003954:	1aed      	subs	r5, r5, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8003956:	42bd      	cmp	r5, r7
 8003958:	d362      	bcc.n	8003a20 <f_read+0x108>
 800395a:	463d      	mov	r5, r7
 800395c:	e060      	b.n	8003a20 <f_read+0x108>
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800395e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003960:	b11b      	cbz	r3, 800396a <f_read+0x52>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8003962:	4620      	mov	r0, r4
 8003964:	f7ff f878 	bl	8002a58 <clmt_clust>
 8003968:	e06a      	b.n	8003a40 <f_read+0x128>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800396a:	69e1      	ldr	r1, [r4, #28]
 800396c:	9801      	ldr	r0, [sp, #4]
 800396e:	f7ff fbe2 	bl	8003136 <get_fat>
 8003972:	e065      	b.n	8003a40 <f_read+0x128>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8003974:	f04f 0a02 	mov.w	sl, #2
 8003978:	f884 a015 	strb.w	sl, [r4, #21]
 800397c:	f8cd a000 	str.w	sl, [sp]
 8003980:	e08a      	b.n	8003a98 <f_read+0x180>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003982:	f04f 0a01 	mov.w	sl, #1
 8003986:	f884 a015 	strb.w	sl, [r4, #21]
 800398a:	f8cd a000 	str.w	sl, [sp]
 800398e:	e083      	b.n	8003a98 <f_read+0x180>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 8003990:	f04f 0a02 	mov.w	sl, #2
 8003994:	f884 a015 	strb.w	sl, [r4, #21]
 8003998:	f8cd a000 	str.w	sl, [sp]
 800399c:	e07c      	b.n	8003a98 <f_read+0x180>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800399e:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	db02      	blt.n	80039ac <f_read+0x94>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80039a6:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 80039aa:	e02f      	b.n	8003a0c <f_read+0xf4>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80039ac:	6a20      	ldr	r0, [r4, #32]
 80039ae:	eba0 0009 	sub.w	r0, r0, r9
 80039b2:	4550      	cmp	r0, sl
 80039b4:	d2f7      	bcs.n	80039a6 <f_read+0x8e>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80039b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ba:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80039be:	eb06 2040 	add.w	r0, r6, r0, lsl #9
 80039c2:	f7fe ff59 	bl	8002878 <mem_cpy>
 80039c6:	e7ee      	b.n	80039a6 <f_read+0x8e>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80039c8:	6a22      	ldr	r2, [r4, #32]
 80039ca:	454a      	cmp	r2, r9
 80039cc:	d00d      	beq.n	80039ea <f_read+0xd2>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80039ce:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	db64      	blt.n	8003aa0 <f_read+0x188>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80039d6:	2301      	movs	r3, #1
 80039d8:	464a      	mov	r2, r9
 80039da:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80039de:	9803      	ldr	r0, [sp, #12]
 80039e0:	7840      	ldrb	r0, [r0, #1]
 80039e2:	f7fe ff11 	bl	8002808 <disk_read>
 80039e6:	2800      	cmp	r0, #0
 80039e8:	d16e      	bne.n	8003ac8 <f_read+0x1b0>
			}
#endif
			fp->sect = sect;
 80039ea:	f8c4 9020 	str.w	r9, [r4, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80039ee:	69a3      	ldr	r3, [r4, #24]
 80039f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f4:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80039f8:	42bd      	cmp	r5, r7
 80039fa:	d200      	bcs.n	80039fe <f_read+0xe6>
 80039fc:	462f      	mov	r7, r5
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80039fe:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8003a02:	463a      	mov	r2, r7
 8003a04:	4419      	add	r1, r3
 8003a06:	4630      	mov	r0, r6
 8003a08:	f7fe ff36 	bl	8002878 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8003a0c:	443e      	add	r6, r7
 8003a0e:	69a3      	ldr	r3, [r4, #24]
 8003a10:	443b      	add	r3, r7
 8003a12:	61a3      	str	r3, [r4, #24]
 8003a14:	f8d8 3000 	ldr.w	r3, [r8]
 8003a18:	443b      	add	r3, r7
 8003a1a:	f8c8 3000 	str.w	r3, [r8]
 8003a1e:	1bed      	subs	r5, r5, r7
	for ( ;  btr;								/* Repeat until all data read */
 8003a20:	2d00      	cmp	r5, #0
 8003a22:	d039      	beq.n	8003a98 <f_read+0x180>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8003a24:	69a1      	ldr	r1, [r4, #24]
 8003a26:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1df      	bne.n	80039ee <f_read+0xd6>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8003a2e:	9b03      	ldr	r3, [sp, #12]
 8003a30:	895f      	ldrh	r7, [r3, #10]
 8003a32:	3f01      	subs	r7, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8003a34:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 8003a38:	d108      	bne.n	8003a4c <f_read+0x134>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8003a3a:	2900      	cmp	r1, #0
 8003a3c:	d18f      	bne.n	800395e <f_read+0x46>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8003a3e:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8003a40:	2801      	cmp	r0, #1
 8003a42:	d997      	bls.n	8003974 <f_read+0x5c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003a44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003a48:	d09b      	beq.n	8003982 <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
 8003a4a:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8003a4c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003a50:	69e1      	ldr	r1, [r4, #28]
 8003a52:	4658      	mov	r0, fp
 8003a54:	f7fe fff4 	bl	8002a40 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8003a58:	4681      	mov	r9, r0
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	d098      	beq.n	8003990 <f_read+0x78>
			sect += csect;
 8003a5e:	44b9      	add	r9, r7
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8003a60:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {							/* Read maximum contiguous sectors directly */
 8003a64:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8003a68:	d3ae      	bcc.n	80039c8 <f_read+0xb0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003a6a:	eb07 030a 	add.w	r3, r7, sl
 8003a6e:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <f_read+0x162>
					cc = fs->csize - csect;
 8003a76:	eba2 0a07 	sub.w	sl, r2, r7
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003a7a:	4653      	mov	r3, sl
 8003a7c:	464a      	mov	r2, r9
 8003a7e:	4631      	mov	r1, r6
 8003a80:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8003a84:	f7fe fec0 	bl	8002808 <disk_read>
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	d088      	beq.n	800399e <f_read+0x86>
 8003a8c:	f04f 0a01 	mov.w	sl, #1
 8003a90:	f884 a015 	strb.w	sl, [r4, #21]
 8003a94:	f8cd a000 	str.w	sl, [sp]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8003a98:	9800      	ldr	r0, [sp, #0]
 8003a9a:	b005      	add	sp, #20
 8003a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8003aa6:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8003aaa:	f7fe feb9 	bl	8002820 <disk_write>
 8003aae:	b920      	cbnz	r0, 8003aba <f_read+0x1a2>
					fp->flag &= (BYTE)~FA_DIRTY;
 8003ab0:	7d23      	ldrb	r3, [r4, #20]
 8003ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ab6:	7523      	strb	r3, [r4, #20]
 8003ab8:	e78d      	b.n	80039d6 <f_read+0xbe>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003aba:	f04f 0a01 	mov.w	sl, #1
 8003abe:	f884 a015 	strb.w	sl, [r4, #21]
 8003ac2:	f8cd a000 	str.w	sl, [sp]
 8003ac6:	e7e7      	b.n	8003a98 <f_read+0x180>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003ac8:	f04f 0a01 	mov.w	sl, #1
 8003acc:	f884 a015 	strb.w	sl, [r4, #21]
 8003ad0:	f8cd a000 	str.w	sl, [sp]
 8003ad4:	e7e0      	b.n	8003a98 <f_read+0x180>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003ad6:	2307      	movs	r3, #7
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	e7dd      	b.n	8003a98 <f_read+0x180>

08003adc <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8003adc:	b530      	push	{r4, r5, lr}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	d03d      	beq.n	8003b62 <f_opendir+0x86>
 8003ae6:	4605      	mov	r5, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	a903      	add	r1, sp, #12
 8003aec:	a801      	add	r0, sp, #4
 8003aee:	f7ff f91d 	bl	8002d2c <find_volume>
	if (res == FR_OK) {
 8003af2:	4604      	mov	r4, r0
 8003af4:	b128      	cbz	r0, 8003b02 <f_opendir+0x26>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8003af6:	b10c      	cbz	r4, 8003afc <f_opendir+0x20>
 8003af8:	2300      	movs	r3, #0
 8003afa:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 8003afc:	4620      	mov	r0, r4
 8003afe:	b005      	add	sp, #20
 8003b00:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 8003b02:	9b03      	ldr	r3, [sp, #12]
 8003b04:	602b      	str	r3, [r5, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8003b06:	9901      	ldr	r1, [sp, #4]
 8003b08:	4628      	mov	r0, r5
 8003b0a:	f7ff fd2d 	bl	8003568 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8003b0e:	4604      	mov	r4, r0
 8003b10:	bb18      	cbnz	r0, 8003b5a <f_opendir+0x7e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8003b12:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	db08      	blt.n	8003b2c <f_opendir+0x50>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8003b1a:	79ab      	ldrb	r3, [r5, #6]
 8003b1c:	f013 0f10 	tst.w	r3, #16
 8003b20:	d01a      	beq.n	8003b58 <f_opendir+0x7c>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8003b22:	6a29      	ldr	r1, [r5, #32]
 8003b24:	9803      	ldr	r0, [sp, #12]
 8003b26:	f7fe ffa8 	bl	8002a7a <ld_clust>
 8003b2a:	60a8      	str	r0, [r5, #8]
				obj->id = fs->id;
 8003b2c:	9b03      	ldr	r3, [sp, #12]
 8003b2e:	88db      	ldrh	r3, [r3, #6]
 8003b30:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8003b32:	2100      	movs	r1, #0
 8003b34:	4628      	mov	r0, r5
 8003b36:	f7ff fb66 	bl	8003206 <dir_sdi>
				if (res == FR_OK) {
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	b968      	cbnz	r0, 8003b5a <f_opendir+0x7e>
					if (obj->sclust) {
 8003b3e:	68ab      	ldr	r3, [r5, #8]
 8003b40:	b913      	cbnz	r3, 8003b48 <f_opendir+0x6c>
						obj->lockid = 0;	/* Root directory need not to be locked */
 8003b42:	2300      	movs	r3, #0
 8003b44:	612b      	str	r3, [r5, #16]
 8003b46:	e008      	b.n	8003b5a <f_opendir+0x7e>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	f7fe ff08 	bl	8002960 <inc_lock>
 8003b50:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8003b52:	b910      	cbnz	r0, 8003b5a <f_opendir+0x7e>
 8003b54:	2412      	movs	r4, #18
 8003b56:	e7ce      	b.n	8003af6 <f_opendir+0x1a>
					res = FR_NO_PATH;
 8003b58:	2405      	movs	r4, #5
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8003b5a:	2c04      	cmp	r4, #4
 8003b5c:	d1cb      	bne.n	8003af6 <f_opendir+0x1a>
 8003b5e:	2405      	movs	r4, #5
 8003b60:	e7ca      	b.n	8003af8 <f_opendir+0x1c>
	if (!dp) return FR_INVALID_OBJECT;
 8003b62:	2409      	movs	r4, #9
 8003b64:	e7ca      	b.n	8003afc <f_opendir+0x20>
	...

08003b68 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8003b68:	4b10      	ldr	r3, [pc, #64]	; (8003bac <FATFS_LinkDriverEx+0x44>)
 8003b6a:	7b9b      	ldrb	r3, [r3, #14]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d901      	bls.n	8003b76 <FATFS_LinkDriverEx+0xe>
  uint8_t ret = 1;
 8003b72:	2001      	movs	r0, #1
    path[3] = 0;
    ret = 0;
  }

  return ret;
}
 8003b74:	4770      	bx	lr
{
 8003b76:	b430      	push	{r4, r5}
 8003b78:	4604      	mov	r4, r0
    disk.is_initialized[disk.nbr] = 0;
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <FATFS_LinkDriverEx+0x44>)
 8003b7c:	7b9d      	ldrb	r5, [r3, #14]
 8003b7e:	b2ed      	uxtb	r5, r5
 8003b80:	2000      	movs	r0, #0
 8003b82:	5558      	strb	r0, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8003b84:	7b9d      	ldrb	r5, [r3, #14]
 8003b86:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8003b8a:	606c      	str	r4, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8003b8c:	7b9c      	ldrb	r4, [r3, #14]
 8003b8e:	441c      	add	r4, r3
 8003b90:	7322      	strb	r2, [r4, #12]
    DiskNum = disk.nbr++;
 8003b92:	7b9a      	ldrb	r2, [r3, #14]
 8003b94:	1c54      	adds	r4, r2, #1
 8003b96:	b2e4      	uxtb	r4, r4
 8003b98:	739c      	strb	r4, [r3, #14]
    path[0] = DiskNum + '0';
 8003b9a:	3230      	adds	r2, #48	; 0x30
 8003b9c:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8003b9e:	233a      	movs	r3, #58	; 0x3a
 8003ba0:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8003ba2:	232f      	movs	r3, #47	; 0x2f
 8003ba4:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8003ba6:	70c8      	strb	r0, [r1, #3]
}
 8003ba8:	bc30      	pop	{r4, r5}
 8003baa:	4770      	bx	lr
 8003bac:	200006a8 	.word	0x200006a8

08003bb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8003bb0:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f7ff ffd8 	bl	8003b68 <FATFS_LinkDriverEx>
}
 8003bb8:	bd08      	pop	{r3, pc}
	...

08003bbc <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003bbc:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8003bbe:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <SD_CheckStatus+0x20>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003bc4:	f7fe fbe0 	bl	8002388 <BSP_SD_GetCardState>
 8003bc8:	b920      	cbnz	r0, 8003bd4 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 8003bca:	4a04      	ldr	r2, [pc, #16]	; (8003bdc <SD_CheckStatus+0x20>)
 8003bcc:	7813      	ldrb	r3, [r2, #0]
 8003bce:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003bd2:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8003bd4:	4b01      	ldr	r3, [pc, #4]	; (8003bdc <SD_CheckStatus+0x20>)
 8003bd6:	7818      	ldrb	r0, [r3, #0]
}
 8003bd8:	bd08      	pop	{r3, pc}
 8003bda:	bf00      	nop
 8003bdc:	2000008a 	.word	0x2000008a

08003be0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003be0:	b510      	push	{r4, lr}
 8003be2:	4604      	mov	r4, r0
  Stat = STA_NOINIT;
 8003be4:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <SD_initialize+0x24>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003bea:	f7fe fba1 	bl	8002330 <BSP_SD_Init>
 8003bee:	b110      	cbz	r0, 8003bf6 <SD_initialize+0x16>
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8003bf0:	4b04      	ldr	r3, [pc, #16]	; (8003c04 <SD_initialize+0x24>)
 8003bf2:	7818      	ldrb	r0, [r3, #0]
}
 8003bf4:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f7ff ffe0 	bl	8003bbc <SD_CheckStatus>
 8003bfc:	4b01      	ldr	r3, [pc, #4]	; (8003c04 <SD_initialize+0x24>)
 8003bfe:	7018      	strb	r0, [r3, #0]
 8003c00:	e7f6      	b.n	8003bf0 <SD_initialize+0x10>
 8003c02:	bf00      	nop
 8003c04:	2000008a 	.word	0x2000008a

08003c08 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003c08:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 8003c0a:	f7ff ffd7 	bl	8003bbc <SD_CheckStatus>
}
 8003c0e:	bd08      	pop	{r3, pc}

08003c10 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003c10:	b508      	push	{r3, lr}
 8003c12:	4608      	mov	r0, r1
 8003c14:	4611      	mov	r1, r2
 8003c16:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8003c18:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1c:	f7fe fa78 	bl	8002110 <BSP_SD_ReadBlocks>
 8003c20:	b930      	cbnz	r0, 8003c30 <SD_read+0x20>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8003c22:	f7fe fbb1 	bl	8002388 <BSP_SD_GetCardState>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	d1fa      	bne.n	8003c22 <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e7fb      	b.n	8003c2c <SD_read+0x1c>

08003c34 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003c34:	b508      	push	{r3, lr}
 8003c36:	4608      	mov	r0, r1
 8003c38:	4611      	mov	r1, r2
 8003c3a:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8003c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c40:	f7fe fa76 	bl	8002130 <BSP_SD_WriteBlocks>
 8003c44:	b930      	cbnz	r0, 8003c54 <SD_write+0x20>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8003c46:	f7fe fb9f 	bl	8002388 <BSP_SD_GetCardState>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	d1fa      	bne.n	8003c46 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e7fb      	b.n	8003c50 <SD_write+0x1c>

08003c58 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003c58:	b530      	push	{r4, r5, lr}
 8003c5a:	b089      	sub	sp, #36	; 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003c5c:	4b13      	ldr	r3, [pc, #76]	; (8003cac <SD_ioctl+0x54>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	f013 0401 	ands.w	r4, r3, #1
 8003c64:	d11d      	bne.n	8003ca2 <SD_ioctl+0x4a>
 8003c66:	4608      	mov	r0, r1
 8003c68:	4615      	mov	r5, r2

  switch (cmd)
 8003c6a:	2903      	cmp	r1, #3
 8003c6c:	d81c      	bhi.n	8003ca8 <SD_ioctl+0x50>
 8003c6e:	e8df f001 	tbb	[pc, r1]
 8003c72:	0219      	.short	0x0219
 8003c74:	1009      	.short	0x1009
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003c76:	4668      	mov	r0, sp
 8003c78:	f7fe fb90 	bl	800239c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003c7c:	9b06      	ldr	r3, [sp, #24]
 8003c7e:	602b      	str	r3, [r5, #0]
    res = RES_OK;
 8003c80:	4620      	mov	r0, r4
    break;
 8003c82:	e00f      	b.n	8003ca4 <SD_ioctl+0x4c>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003c84:	4668      	mov	r0, sp
 8003c86:	f7fe fb89 	bl	800239c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003c8a:	9b07      	ldr	r3, [sp, #28]
 8003c8c:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
 8003c8e:	4620      	mov	r0, r4
    break;
 8003c90:	e008      	b.n	8003ca4 <SD_ioctl+0x4c>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003c92:	4668      	mov	r0, sp
 8003c94:	f7fe fb82 	bl	800239c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003c98:	9b07      	ldr	r3, [sp, #28]
 8003c9a:	0a5b      	lsrs	r3, r3, #9
 8003c9c:	602b      	str	r3, [r5, #0]
	res = RES_OK;
 8003c9e:	4620      	mov	r0, r4
    break;
 8003ca0:	e000      	b.n	8003ca4 <SD_ioctl+0x4c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003ca2:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8003ca4:	b009      	add	sp, #36	; 0x24
 8003ca6:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 8003ca8:	2004      	movs	r0, #4
 8003caa:	e7fb      	b.n	8003ca4 <SD_ioctl+0x4c>
 8003cac:	2000008a 	.word	0x2000008a

08003cb0 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003cb0:	4770      	bx	lr
	...

08003cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cb4:	b510      	push	{r4, lr}
 8003cb6:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8003cb8:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <HAL_InitTick+0x24>)
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <HAL_InitTick+0x28>)
 8003cbe:	fba3 3000 	umull	r3, r0, r3, r0
 8003cc2:	0980      	lsrs	r0, r0, #6
 8003cc4:	f000 f884 	bl	8003dd0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8003cc8:	2200      	movs	r2, #0
 8003cca:	4621      	mov	r1, r4
 8003ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd0:	f000 f840 	bl	8003d54 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	bd10      	pop	{r4, pc}
 8003cd8:	2000008c 	.word	0x2000008c
 8003cdc:	10624dd3 	.word	0x10624dd3

08003ce0 <HAL_Init>:
{
 8003ce0:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ce2:	2003      	movs	r0, #3
 8003ce4:	f000 f824 	bl	8003d30 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ce8:	2000      	movs	r0, #0
 8003cea:	f7ff ffe3 	bl	8003cb4 <HAL_InitTick>
  HAL_MspInit();
 8003cee:	f7ff ffdf 	bl	8003cb0 <HAL_MspInit>
}
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	bd08      	pop	{r3, pc}
	...

08003cf8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003cf8:	4a02      	ldr	r2, [pc, #8]	; (8003d04 <HAL_IncTick+0xc>)
 8003cfa:	6813      	ldr	r3, [r2, #0]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	6013      	str	r3, [r2, #0]
}
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20002018 	.word	0x20002018

08003d08 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003d08:	4b01      	ldr	r3, [pc, #4]	; (8003d10 <HAL_GetTick+0x8>)
 8003d0a:	6818      	ldr	r0, [r3, #0]
}
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20002018 	.word	0x20002018

08003d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8003d14:	b510      	push	{r4, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8003d1a:	f7ff fff5 	bl	8003d08 <HAL_GetTick>
 8003d1e:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8003d20:	f7ff fff2 	bl	8003d08 <HAL_GetTick>
 8003d24:	1b00      	subs	r0, r0, r4
 8003d26:	9b01      	ldr	r3, [sp, #4]
 8003d28:	4298      	cmp	r0, r3
 8003d2a:	d3f9      	bcc.n	8003d20 <HAL_Delay+0xc>
  {
  }
}
 8003d2c:	b002      	add	sp, #8
 8003d2e:	bd10      	pop	{r4, pc}

08003d30 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d30:	4906      	ldr	r1, [pc, #24]	; (8003d4c <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8003d32:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d38:	041b      	lsls	r3, r3, #16
 8003d3a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003d3c:	0200      	lsls	r0, r0, #8
 8003d3e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d42:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003d44:	4a02      	ldr	r2, [pc, #8]	; (8003d50 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003d46:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8003d48:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003d4a:	4770      	bx	lr
 8003d4c:	e000ed00 	.word	0xe000ed00
 8003d50:	05fa0000 	.word	0x05fa0000

08003d54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d54:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d56:	4b15      	ldr	r3, [pc, #84]	; (8003dac <HAL_NVIC_SetPriority+0x58>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d5e:	f1c3 0407 	rsb	r4, r3, #7
 8003d62:	2c04      	cmp	r4, #4
 8003d64:	bf28      	it	cs
 8003d66:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d68:	1d1d      	adds	r5, r3, #4
 8003d6a:	2d06      	cmp	r5, #6
 8003d6c:	d914      	bls.n	8003d98 <HAL_NVIC_SetPriority+0x44>
 8003d6e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d70:	f04f 35ff 	mov.w	r5, #4294967295
 8003d74:	fa05 f404 	lsl.w	r4, r5, r4
 8003d78:	ea21 0104 	bic.w	r1, r1, r4
 8003d7c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d7e:	fa05 f303 	lsl.w	r3, r5, r3
 8003d82:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d86:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	db07      	blt.n	8003d9c <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8c:	0109      	lsls	r1, r1, #4
 8003d8e:	b2c9      	uxtb	r1, r1
 8003d90:	4b07      	ldr	r3, [pc, #28]	; (8003db0 <HAL_NVIC_SetPriority+0x5c>)
 8003d92:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003d94:	bc30      	pop	{r4, r5}
 8003d96:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e7e9      	b.n	8003d70 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d9c:	f000 000f 	and.w	r0, r0, #15
 8003da0:	0109      	lsls	r1, r1, #4
 8003da2:	b2c9      	uxtb	r1, r1
 8003da4:	4b03      	ldr	r3, [pc, #12]	; (8003db4 <HAL_NVIC_SetPriority+0x60>)
 8003da6:	5419      	strb	r1, [r3, r0]
 8003da8:	e7f4      	b.n	8003d94 <HAL_NVIC_SetPriority+0x40>
 8003daa:	bf00      	nop
 8003dac:	e000ed00 	.word	0xe000ed00
 8003db0:	e000e400 	.word	0xe000e400
 8003db4:	e000ed14 	.word	0xe000ed14

08003db8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003db8:	f000 021f 	and.w	r2, r0, #31
 8003dbc:	0940      	lsrs	r0, r0, #5
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	4093      	lsls	r3, r2
 8003dc2:	4a02      	ldr	r2, [pc, #8]	; (8003dcc <HAL_NVIC_EnableIRQ+0x14>)
 8003dc4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	e000e100 	.word	0xe000e100

08003dd0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dd0:	3801      	subs	r0, #1
 8003dd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003dd6:	d20a      	bcs.n	8003dee <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dd8:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <HAL_SYSTICK_Config+0x24>)
 8003dda:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ddc:	4a06      	ldr	r2, [pc, #24]	; (8003df8 <HAL_SYSTICK_Config+0x28>)
 8003dde:	21f0      	movs	r1, #240	; 0xf0
 8003de0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003de4:	2000      	movs	r0, #0
 8003de6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003de8:	2207      	movs	r2, #7
 8003dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003dee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	e000e010 	.word	0xe000e010
 8003df8:	e000ed00 	.word	0xe000ed00

08003dfc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dfc:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dfe:	6805      	ldr	r5, [r0, #0]
 8003e00:	682c      	ldr	r4, [r5, #0]
 8003e02:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8003e06:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e08:	6804      	ldr	r4, [r0, #0]
 8003e0a:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e0c:	6883      	ldr	r3, [r0, #8]
 8003e0e:	2b40      	cmp	r3, #64	; 0x40
 8003e10:	d005      	beq.n	8003e1e <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8003e12:	6803      	ldr	r3, [r0, #0]
 8003e14:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8003e16:	6803      	ldr	r3, [r0, #0]
 8003e18:	60da      	str	r2, [r3, #12]
  }
}
 8003e1a:	bc30      	pop	{r4, r5}
 8003e1c:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8003e1e:	6803      	ldr	r3, [r0, #0]
 8003e20:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8003e22:	6803      	ldr	r3, [r0, #0]
 8003e24:	60d9      	str	r1, [r3, #12]
 8003e26:	e7f8      	b.n	8003e1a <DMA_SetConfig+0x1e>

08003e28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e28:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e2a:	6801      	ldr	r1, [r0, #0]
 8003e2c:	b2ca      	uxtb	r2, r1
 8003e2e:	3a10      	subs	r2, #16
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <DMA_CalcBaseAndBitshift+0x34>)
 8003e32:	fba3 4302 	umull	r4, r3, r3, r2
 8003e36:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e38:	4c09      	ldr	r4, [pc, #36]	; (8003e60 <DMA_CalcBaseAndBitshift+0x38>)
 8003e3a:	5ce3      	ldrb	r3, [r4, r3]
 8003e3c:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e3e:	2a5f      	cmp	r2, #95	; 0x5f
 8003e40:	d907      	bls.n	8003e52 <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e42:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <DMA_CalcBaseAndBitshift+0x3c>)
 8003e44:	400b      	ands	r3, r1
 8003e46:	3304      	adds	r3, #4
 8003e48:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8003e4a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e50:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e52:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <DMA_CalcBaseAndBitshift+0x3c>)
 8003e54:	400b      	ands	r3, r1
 8003e56:	6583      	str	r3, [r0, #88]	; 0x58
 8003e58:	e7f7      	b.n	8003e4a <DMA_CalcBaseAndBitshift+0x22>
 8003e5a:	bf00      	nop
 8003e5c:	aaaaaaab 	.word	0xaaaaaaab
 8003e60:	080109e4 	.word	0x080109e4
 8003e64:	fffffc00 	.word	0xfffffc00

08003e68 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e68:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e6a:	6982      	ldr	r2, [r0, #24]
 8003e6c:	b992      	cbnz	r2, 8003e94 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d00a      	beq.n	8003e88 <DMA_CheckFifoParam+0x20>
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d002      	beq.n	8003e7c <DMA_CheckFifoParam+0x14>
 8003e76:	b10b      	cbz	r3, 8003e7c <DMA_CheckFifoParam+0x14>
 8003e78:	2000      	movs	r0, #0
 8003e7a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e7c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003e7e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003e82:	d128      	bne.n	8003ed6 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8003e84:	2000      	movs	r0, #0
 8003e86:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e88:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003e8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e8e:	d024      	beq.n	8003eda <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8003e90:	2000      	movs	r0, #0
 8003e92:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e94:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003e98:	d009      	beq.n	8003eae <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d925      	bls.n	8003eea <DMA_CheckFifoParam+0x82>
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d125      	bne.n	8003eee <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ea2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003ea4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003ea8:	d123      	bne.n	8003ef2 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2000      	movs	r0, #0
 8003eac:	4770      	bx	lr
    switch (tmp)
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d803      	bhi.n	8003eba <DMA_CheckFifoParam+0x52>
 8003eb2:	e8df f003 	tbb	[pc, r3]
 8003eb6:	0414      	.short	0x0414
 8003eb8:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003eba:	2000      	movs	r0, #0
 8003ebc:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ebe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003ec0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003ec4:	d10d      	bne.n	8003ee2 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003ecc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ed0:	d009      	beq.n	8003ee6 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	4770      	bx	lr
        status = HAL_ERROR;
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	4770      	bx	lr
        status = HAL_ERROR;
 8003eda:	2001      	movs	r0, #1
 8003edc:	4770      	bx	lr
      status = HAL_ERROR;
 8003ede:	2001      	movs	r0, #1
 8003ee0:	4770      	bx	lr
        status = HAL_ERROR;
 8003ee2:	2001      	movs	r0, #1
 8003ee4:	4770      	bx	lr
        status = HAL_ERROR;
 8003ee6:	2001      	movs	r0, #1
 8003ee8:	4770      	bx	lr
      status = HAL_ERROR;
 8003eea:	2001      	movs	r0, #1
 8003eec:	4770      	bx	lr
    switch (tmp)
 8003eee:	2000      	movs	r0, #0
 8003ef0:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8003ef2:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8003ef4:	4770      	bx	lr
	...

08003ef8 <HAL_DMA_Init>:
{
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003efc:	f7ff ff04 	bl	8003d08 <HAL_GetTick>
  if(hdma == NULL)
 8003f00:	2c00      	cmp	r4, #0
 8003f02:	d05b      	beq.n	8003fbc <HAL_DMA_Init+0xc4>
 8003f04:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8003f06:	2300      	movs	r3, #0
 8003f08:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8003f12:	6822      	ldr	r2, [r4, #0]
 8003f14:	6813      	ldr	r3, [r2, #0]
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	f012 0f01 	tst.w	r2, #1
 8003f24:	d00a      	beq.n	8003f3c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f26:	f7ff feef 	bl	8003d08 <HAL_GetTick>
 8003f2a:	1b43      	subs	r3, r0, r5
 8003f2c:	2b05      	cmp	r3, #5
 8003f2e:	d9f5      	bls.n	8003f1c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f30:	2320      	movs	r3, #32
 8003f32:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f34:	2003      	movs	r0, #3
 8003f36:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8003f3c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f3e:	4820      	ldr	r0, [pc, #128]	; (8003fc0 <HAL_DMA_Init+0xc8>)
 8003f40:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f42:	6861      	ldr	r1, [r4, #4]
 8003f44:	68a2      	ldr	r2, [r4, #8]
 8003f46:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f48:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f4a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f4c:	6921      	ldr	r1, [r4, #16]
 8003f4e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f50:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f52:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f54:	69a1      	ldr	r1, [r4, #24]
 8003f56:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f58:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f5a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f5c:	6a21      	ldr	r1, [r4, #32]
 8003f5e:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f60:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f62:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003f64:	2904      	cmp	r1, #4
 8003f66:	d01e      	beq.n	8003fa6 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8003f68:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8003f6a:	6826      	ldr	r6, [r4, #0]
 8003f6c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f6e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8003f72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f74:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d107      	bne.n	8003f8a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8003f7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003f7c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003f80:	b11b      	cbz	r3, 8003f8a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f82:	4620      	mov	r0, r4
 8003f84:	f7ff ff70 	bl	8003e68 <DMA_CheckFifoParam>
 8003f88:	b990      	cbnz	r0, 8003fb0 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8003f8a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	f7ff ff4b 	bl	8003e28 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f92:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003f94:	233f      	movs	r3, #63	; 0x3f
 8003f96:	4093      	lsls	r3, r2
 8003f98:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003fa4:	e7c9      	b.n	8003f3a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fa6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003fa8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003faa:	4301      	orrs	r1, r0
 8003fac:	430a      	orrs	r2, r1
 8003fae:	e7db      	b.n	8003f68 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fb0:	2340      	movs	r3, #64	; 0x40
 8003fb2:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8003fba:	e7be      	b.n	8003f3a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	e7bc      	b.n	8003f3a <HAL_DMA_Init+0x42>
 8003fc0:	e010803f 	.word	0xe010803f

08003fc4 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8003fc4:	b338      	cbz	r0, 8004016 <HAL_DMA_DeInit+0x52>
{
 8003fc6:	b538      	push	{r3, r4, r5, lr}
 8003fc8:	4605      	mov	r5, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003fca:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 8003fce:	b2c0      	uxtb	r0, r0
 8003fd0:	2802      	cmp	r0, #2
 8003fd2:	d01f      	beq.n	8004014 <HAL_DMA_DeInit+0x50>
  __HAL_DMA_DISABLE(hdma);
 8003fd4:	682a      	ldr	r2, [r5, #0]
 8003fd6:	6813      	ldr	r3, [r2, #0]
 8003fd8:	f023 0301 	bic.w	r3, r3, #1
 8003fdc:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8003fde:	682b      	ldr	r3, [r5, #0]
 8003fe0:	2400      	movs	r4, #0
 8003fe2:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8003fe8:	682b      	ldr	r3, [r5, #0]
 8003fea:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	2221      	movs	r2, #33	; 0x21
 8003ff8:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	f7ff ff14 	bl	8003e28 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004000:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004002:	233f      	movs	r3, #63	; 0x3f
 8004004:	4093      	lsls	r3, r2
 8004006:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004008:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 800400a:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800400e:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  return HAL_OK;
 8004012:	4620      	mov	r0, r4
}
 8004014:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004016:	2001      	movs	r0, #1
}
 8004018:	4770      	bx	lr

0800401a <HAL_DMA_Start_IT>:
{
 800401a:	b538      	push	{r3, r4, r5, lr}
 800401c:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800401e:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8004020:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004024:	2801      	cmp	r0, #1
 8004026:	d030      	beq.n	800408a <HAL_DMA_Start_IT+0x70>
 8004028:	2001      	movs	r0, #1
 800402a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800402e:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8004032:	b2c0      	uxtb	r0, r0
 8004034:	2801      	cmp	r0, #1
 8004036:	d004      	beq.n	8004042 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8004038:	2300      	movs	r3, #0
 800403a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 800403e:	2002      	movs	r0, #2
}
 8004040:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004042:	2002      	movs	r0, #2
 8004044:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004048:	2000      	movs	r0, #0
 800404a:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800404c:	4620      	mov	r0, r4
 800404e:	f7ff fed5 	bl	8003dfc <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004052:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004054:	233f      	movs	r3, #63	; 0x3f
 8004056:	4093      	lsls	r3, r2
 8004058:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800405a:	6822      	ldr	r2, [r4, #0]
 800405c:	6813      	ldr	r3, [r2, #0]
 800405e:	f043 0316 	orr.w	r3, r3, #22
 8004062:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004064:	6822      	ldr	r2, [r4, #0]
 8004066:	6953      	ldr	r3, [r2, #20]
 8004068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800406c:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800406e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004070:	b123      	cbz	r3, 800407c <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8004072:	6822      	ldr	r2, [r4, #0]
 8004074:	6813      	ldr	r3, [r2, #0]
 8004076:	f043 0308 	orr.w	r3, r3, #8
 800407a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800407c:	6822      	ldr	r2, [r4, #0]
 800407e:	6813      	ldr	r3, [r2, #0]
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004086:	2000      	movs	r0, #0
 8004088:	e7da      	b.n	8004040 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 800408a:	2002      	movs	r0, #2
 800408c:	e7d8      	b.n	8004040 <HAL_DMA_Start_IT+0x26>

0800408e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800408e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d003      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800409c:	2001      	movs	r0, #1
 800409e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80040a0:	2305      	movs	r3, #5
 80040a2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80040a6:	6802      	ldr	r2, [r0, #0]
 80040a8:	6813      	ldr	r3, [r2, #0]
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80040b0:	2000      	movs	r0, #0
}
 80040b2:	4770      	bx	lr

080040b4 <HAL_DMA_IRQHandler>:
{
 80040b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040b6:	b083      	sub	sp, #12
 80040b8:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 80040be:	4b72      	ldr	r3, [pc, #456]	; (8004288 <HAL_DMA_IRQHandler+0x1d4>)
 80040c0:	681d      	ldr	r5, [r3, #0]
 80040c2:	4b72      	ldr	r3, [pc, #456]	; (800428c <HAL_DMA_IRQHandler+0x1d8>)
 80040c4:	fba3 3505 	umull	r3, r5, r3, r5
 80040c8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ca:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80040cc:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040ce:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80040d0:	2308      	movs	r3, #8
 80040d2:	4093      	lsls	r3, r2
 80040d4:	4233      	tst	r3, r6
 80040d6:	d010      	beq.n	80040fa <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040d8:	6803      	ldr	r3, [r0, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	f012 0f04 	tst.w	r2, #4
 80040e0:	d00b      	beq.n	80040fa <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	f022 0204 	bic.w	r2, r2, #4
 80040e8:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040ea:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80040ec:	2308      	movs	r3, #8
 80040ee:	4093      	lsls	r3, r2
 80040f0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040f2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040fa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80040fc:	4b64      	ldr	r3, [pc, #400]	; (8004290 <HAL_DMA_IRQHandler+0x1dc>)
 80040fe:	4093      	lsls	r3, r2
 8004100:	4233      	tst	r3, r6
 8004102:	d009      	beq.n	8004118 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004104:	6822      	ldr	r2, [r4, #0]
 8004106:	6952      	ldr	r2, [r2, #20]
 8004108:	f012 0f80 	tst.w	r2, #128	; 0x80
 800410c:	d004      	beq.n	8004118 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800410e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004110:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004112:	f043 0302 	orr.w	r3, r3, #2
 8004116:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004118:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800411a:	4b5e      	ldr	r3, [pc, #376]	; (8004294 <HAL_DMA_IRQHandler+0x1e0>)
 800411c:	4093      	lsls	r3, r2
 800411e:	4233      	tst	r3, r6
 8004120:	d009      	beq.n	8004136 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004122:	6822      	ldr	r2, [r4, #0]
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	f012 0f02 	tst.w	r2, #2
 800412a:	d004      	beq.n	8004136 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800412c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800412e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004130:	f043 0304 	orr.w	r3, r3, #4
 8004134:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004136:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004138:	2310      	movs	r3, #16
 800413a:	4093      	lsls	r3, r2
 800413c:	4233      	tst	r3, r6
 800413e:	d024      	beq.n	800418a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004140:	6822      	ldr	r2, [r4, #0]
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	f012 0f08 	tst.w	r2, #8
 8004148:	d01f      	beq.n	800418a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800414a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004154:	d00d      	beq.n	8004172 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800415c:	d104      	bne.n	8004168 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800415e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004160:	b19b      	cbz	r3, 800418a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8004162:	4620      	mov	r0, r4
 8004164:	4798      	blx	r3
 8004166:	e010      	b.n	800418a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004168:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800416a:	b173      	cbz	r3, 800418a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800416c:	4620      	mov	r0, r4
 800416e:	4798      	blx	r3
 8004170:	e00b      	b.n	800418a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004178:	d103      	bne.n	8004182 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	f022 0208 	bic.w	r2, r2, #8
 8004180:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8004182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004184:	b10b      	cbz	r3, 800418a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8004186:	4620      	mov	r0, r4
 8004188:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800418a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800418c:	2320      	movs	r3, #32
 800418e:	4093      	lsls	r3, r2
 8004190:	4233      	tst	r3, r6
 8004192:	d055      	beq.n	8004240 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004194:	6822      	ldr	r2, [r4, #0]
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	f012 0f10 	tst.w	r2, #16
 800419c:	d050      	beq.n	8004240 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800419e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041a0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b05      	cmp	r3, #5
 80041a8:	d00e      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041aa:	6823      	ldr	r3, [r4, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80041b2:	d033      	beq.n	800421c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80041ba:	d12a      	bne.n	8004212 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80041bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d03e      	beq.n	8004240 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80041c2:	4620      	mov	r0, r4
 80041c4:	4798      	blx	r3
 80041c6:	e03b      	b.n	8004240 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041c8:	6822      	ldr	r2, [r4, #0]
 80041ca:	6813      	ldr	r3, [r2, #0]
 80041cc:	f023 0316 	bic.w	r3, r3, #22
 80041d0:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041d2:	6822      	ldr	r2, [r4, #0]
 80041d4:	6953      	ldr	r3, [r2, #20]
 80041d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041da:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041de:	b1a3      	cbz	r3, 800420a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041e0:	6822      	ldr	r2, [r4, #0]
 80041e2:	6813      	ldr	r3, [r2, #0]
 80041e4:	f023 0308 	bic.w	r3, r3, #8
 80041e8:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80041ec:	233f      	movs	r3, #63	; 0x3f
 80041ee:	4093      	lsls	r3, r2
 80041f0:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80041f2:	2300      	movs	r3, #0
 80041f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80041f8:	2301      	movs	r3, #1
 80041fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80041fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004200:	2b00      	cmp	r3, #0
 8004202:	d03f      	beq.n	8004284 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8004204:	4620      	mov	r0, r4
 8004206:	4798      	blx	r3
        return;
 8004208:	e03c      	b.n	8004284 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800420a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e7      	bne.n	80041e0 <HAL_DMA_IRQHandler+0x12c>
 8004210:	e7eb      	b.n	80041ea <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8004212:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004214:	b1a3      	cbz	r3, 8004240 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8004216:	4620      	mov	r0, r4
 8004218:	4798      	blx	r3
 800421a:	e011      	b.n	8004240 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004222:	d109      	bne.n	8004238 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	f022 0210 	bic.w	r2, r2, #16
 800422a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 800422c:	2300      	movs	r3, #0
 800422e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8004232:	2301      	movs	r3, #1
 8004234:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8004238:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800423a:	b10b      	cbz	r3, 8004240 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 800423c:	4620      	mov	r0, r4
 800423e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004240:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004242:	b1fb      	cbz	r3, 8004284 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004244:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004246:	f013 0f01 	tst.w	r3, #1
 800424a:	d017      	beq.n	800427c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800424c:	2305      	movs	r3, #5
 800424e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004252:	6822      	ldr	r2, [r4, #0]
 8004254:	6813      	ldr	r3, [r2, #0]
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800425c:	9b01      	ldr	r3, [sp, #4]
 800425e:	3301      	adds	r3, #1
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	42ab      	cmp	r3, r5
 8004264:	d804      	bhi.n	8004270 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f013 0f01 	tst.w	r3, #1
 800426e:	d1f5      	bne.n	800425c <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8004270:	2300      	movs	r3, #0
 8004272:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8004276:	2301      	movs	r3, #1
 8004278:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800427c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800427e:	b10b      	cbz	r3, 8004284 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8004280:	4620      	mov	r0, r4
 8004282:	4798      	blx	r3
}
 8004284:	b003      	add	sp, #12
 8004286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004288:	2000008c 	.word	0x2000008c
 800428c:	1b4e81b5 	.word	0x1b4e81b5
 8004290:	00800001 	.word	0x00800001
 8004294:	00800004 	.word	0x00800004

08004298 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004298:	b470      	push	{r4, r5, r6}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800429a:	6806      	ldr	r6, [r0, #0]
 800429c:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800429e:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 80042a2:	9d03      	ldr	r5, [sp, #12]
 80042a4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80042a8:	432c      	orrs	r4, r5
 80042aa:	6474      	str	r4, [r6, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80042ac:	6803      	ldr	r3, [r0, #0]
 80042ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80042b0:	6843      	ldr	r3, [r0, #4]
 80042b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042b6:	d003      	beq.n	80042c0 <DMA2D_SetConfig+0x28>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80042b8:	6803      	ldr	r3, [r0, #0]
 80042ba:	60d9      	str	r1, [r3, #12]
  }
}
 80042bc:	bc70      	pop	{r4, r5, r6}
 80042be:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80042c0:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80042c4:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80042c8:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80042cc:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80042ce:	6884      	ldr	r4, [r0, #8]
 80042d0:	b194      	cbz	r4, 80042f8 <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80042d2:	2c01      	cmp	r4, #1
 80042d4:	d00e      	beq.n	80042f4 <DMA2D_SetConfig+0x5c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80042d6:	2c02      	cmp	r4, #2
 80042d8:	d011      	beq.n	80042fe <DMA2D_SetConfig+0x66>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80042da:	2c03      	cmp	r4, #3
 80042dc:	d017      	beq.n	800430e <DMA2D_SetConfig+0x76>
      tmp1 = (tmp1 >> 28U);
 80042de:	0f36      	lsrs	r6, r6, #28
      tmp2 = (tmp2 >> 20U);
 80042e0:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 80042e2:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80042e4:	0219      	lsls	r1, r3, #8
 80042e6:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 80042ea:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
 80042ee:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 80042f2:	e001      	b.n	80042f8 <DMA2D_SetConfig+0x60>
      tmp = (tmp3 | tmp2 | tmp4);
 80042f4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80042f8:	6803      	ldr	r3, [r0, #0]
 80042fa:	6399      	str	r1, [r3, #56]	; 0x38
 80042fc:	e7de      	b.n	80042bc <DMA2D_SetConfig+0x24>
      tmp2 = (tmp2 >> 19U);
 80042fe:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8004300:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004302:	02d9      	lsls	r1, r3, #11
 8004304:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8004308:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 800430c:	e7f4      	b.n	80042f8 <DMA2D_SetConfig+0x60>
      tmp1 = (tmp1 >> 31U);
 800430e:	0ff6      	lsrs	r6, r6, #31
      tmp2 = (tmp2 >> 19U);
 8004310:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8004312:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004314:	0299      	lsls	r1, r3, #10
 8004316:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800431a:	ea41 31c6 	orr.w	r1, r1, r6, lsl #15
 800431e:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8004322:	e7e9      	b.n	80042f8 <DMA2D_SetConfig+0x60>

08004324 <HAL_DMA2D_MspInit>:
}
 8004324:	4770      	bx	lr
	...

08004328 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 8004328:	2800      	cmp	r0, #0
 800432a:	d032      	beq.n	8004392 <HAL_DMA2D_Init+0x6a>
{
 800432c:	b510      	push	{r4, lr}
 800432e:	4604      	mov	r4, r0
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004330:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8004334:	b343      	cbz	r3, 8004388 <HAL_DMA2D_Init+0x60>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004336:	2302      	movs	r3, #2
 8004338:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800433c:	6822      	ldr	r2, [r4, #0]
 800433e:	6813      	ldr	r3, [r2, #0]
 8004340:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004344:	6861      	ldr	r1, [r4, #4]
 8004346:	430b      	orrs	r3, r1
 8004348:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800434a:	6822      	ldr	r2, [r4, #0]
 800434c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800434e:	f023 0307 	bic.w	r3, r3, #7
 8004352:	68a1      	ldr	r1, [r4, #8]
 8004354:	430b      	orrs	r3, r1
 8004356:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004358:	6822      	ldr	r2, [r4, #0]
 800435a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800435c:	4b0e      	ldr	r3, [pc, #56]	; (8004398 <HAL_DMA2D_Init+0x70>)
 800435e:	400b      	ands	r3, r1
 8004360:	68e1      	ldr	r1, [r4, #12]
 8004362:	430b      	orrs	r3, r1
 8004364:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8004366:	6821      	ldr	r1, [r4, #0]
 8004368:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800436a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800436e:	6920      	ldr	r0, [r4, #16]
 8004370:	6962      	ldr	r2, [r4, #20]
 8004372:	0552      	lsls	r2, r2, #21
 8004374:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8004378:	4313      	orrs	r3, r2
 800437a:	634b      	str	r3, [r1, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800437c:	2000      	movs	r0, #0
 800437e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004380:	2301      	movs	r3, #1
 8004382:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004386:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8004388:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_DMA2D_MspInit(hdma2d);
 800438c:	f7ff ffca 	bl	8004324 <HAL_DMA2D_MspInit>
 8004390:	e7d1      	b.n	8004336 <HAL_DMA2D_Init+0xe>
     return HAL_ERROR;
 8004392:	2001      	movs	r0, #1
}
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	ffffc000 	.word	0xffffc000

0800439c <HAL_DMA2D_Start>:
{
 800439c:	b510      	push	{r4, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 80043a2:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 80043a6:	2801      	cmp	r0, #1
 80043a8:	d012      	beq.n	80043d0 <HAL_DMA2D_Start+0x34>
 80043aa:	2001      	movs	r0, #1
 80043ac:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80043b0:	2002      	movs	r0, #2
 80043b2:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80043b6:	9804      	ldr	r0, [sp, #16]
 80043b8:	9000      	str	r0, [sp, #0]
 80043ba:	4620      	mov	r0, r4
 80043bc:	f7ff ff6c 	bl	8004298 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80043c0:	6822      	ldr	r2, [r4, #0]
 80043c2:	6813      	ldr	r3, [r2, #0]
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80043ca:	2000      	movs	r0, #0
}
 80043cc:	b002      	add	sp, #8
 80043ce:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 80043d0:	2002      	movs	r0, #2
 80043d2:	e7fb      	b.n	80043cc <HAL_DMA2D_Start+0x30>

080043d4 <HAL_DMA2D_PollForTransfer>:
{
 80043d4:	b570      	push	{r4, r5, r6, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	4604      	mov	r4, r0
 80043da:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80043e0:	6803      	ldr	r3, [r0, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f013 0f01 	tst.w	r3, #1
 80043e8:	d111      	bne.n	800440e <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80043ea:	6822      	ldr	r2, [r4, #0]
 80043ec:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80043ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043f0:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 80043f2:	f013 0f20 	tst.w	r3, #32
 80043f6:	d147      	bne.n	8004488 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	2212      	movs	r2, #18
 80043fc:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80043fe:	2301      	movs	r3, #1
 8004400:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hdma2d);
 8004404:	2000      	movs	r0, #0
 8004406:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
}
 800440a:	b002      	add	sp, #8
 800440c:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 800440e:	f7ff fc7b 	bl	8003d08 <HAL_GetTick>
 8004412:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	f012 0f02 	tst.w	r2, #2
 800441c:	d1e5      	bne.n	80043ea <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004422:	9a01      	ldr	r2, [sp, #4]
 8004424:	f012 0f21 	tst.w	r2, #33	; 0x21
 8004428:	d114      	bne.n	8004454 <HAL_DMA2D_PollForTransfer+0x80>
      if(Timeout != HAL_MAX_DELAY)
 800442a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800442e:	d0f1      	beq.n	8004414 <HAL_DMA2D_PollForTransfer+0x40>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004430:	f7ff fc6a 	bl	8003d08 <HAL_GetTick>
 8004434:	1b80      	subs	r0, r0, r6
 8004436:	42a8      	cmp	r0, r5
 8004438:	d801      	bhi.n	800443e <HAL_DMA2D_PollForTransfer+0x6a>
 800443a:	2d00      	cmp	r5, #0
 800443c:	d1ea      	bne.n	8004414 <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800443e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004440:	f043 0320 	orr.w	r3, r3, #32
 8004444:	6563      	str	r3, [r4, #84]	; 0x54
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004446:	2003      	movs	r0, #3
 8004448:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hdma2d);
 800444c:	2300      	movs	r3, #0
 800444e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 8004452:	e7da      	b.n	800440a <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004454:	9a01      	ldr	r2, [sp, #4]
 8004456:	f012 0f20 	tst.w	r2, #32
 800445a:	d003      	beq.n	8004464 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800445c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800445e:	f042 0202 	orr.w	r2, r2, #2
 8004462:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004464:	9a01      	ldr	r2, [sp, #4]
 8004466:	f012 0f01 	tst.w	r2, #1
 800446a:	d003      	beq.n	8004474 <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800446c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004474:	2221      	movs	r2, #33	; 0x21
 8004476:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004478:	2304      	movs	r3, #4
 800447a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hdma2d);
 800447e:	2300      	movs	r3, #0
 8004480:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 8004484:	2001      	movs	r0, #1
 8004486:	e7c0      	b.n	800440a <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 8004488:	f7ff fc3e 	bl	8003d08 <HAL_GetTick>
 800448c:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	f012 0f10 	tst.w	r2, #16
 8004496:	d1af      	bne.n	80043f8 <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800449c:	9a01      	ldr	r2, [sp, #4]
 800449e:	f012 0f29 	tst.w	r2, #41	; 0x29
 80044a2:	d114      	bne.n	80044ce <HAL_DMA2D_PollForTransfer+0xfa>
      if(Timeout != HAL_MAX_DELAY)
 80044a4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80044a8:	d0f1      	beq.n	800448e <HAL_DMA2D_PollForTransfer+0xba>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80044aa:	f7ff fc2d 	bl	8003d08 <HAL_GetTick>
 80044ae:	1b80      	subs	r0, r0, r6
 80044b0:	42a8      	cmp	r0, r5
 80044b2:	d801      	bhi.n	80044b8 <HAL_DMA2D_PollForTransfer+0xe4>
 80044b4:	2d00      	cmp	r5, #0
 80044b6:	d1ea      	bne.n	800448e <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80044b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80044ba:	f043 0320 	orr.w	r3, r3, #32
 80044be:	6563      	str	r3, [r4, #84]	; 0x54
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80044c0:	2003      	movs	r0, #3
 80044c2:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hdma2d);
 80044c6:	2300      	movs	r3, #0
 80044c8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 80044cc:	e79d      	b.n	800440a <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80044ce:	9a01      	ldr	r2, [sp, #4]
 80044d0:	f012 0f08 	tst.w	r2, #8
 80044d4:	d003      	beq.n	80044de <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80044d6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80044d8:	f042 0204 	orr.w	r2, r2, #4
 80044dc:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80044de:	9a01      	ldr	r2, [sp, #4]
 80044e0:	f012 0f20 	tst.w	r2, #32
 80044e4:	d003      	beq.n	80044ee <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80044e6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80044e8:	f042 0202 	orr.w	r2, r2, #2
 80044ec:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80044ee:	9a01      	ldr	r2, [sp, #4]
 80044f0:	f012 0f01 	tst.w	r2, #1
 80044f4:	d003      	beq.n	80044fe <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80044f6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80044f8:	f042 0201 	orr.w	r2, r2, #1
 80044fc:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80044fe:	2229      	movs	r2, #41	; 0x29
 8004500:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004502:	2304      	movs	r3, #4
 8004504:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hdma2d);
 8004508:	2300      	movs	r3, #0
 800450a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 800450e:	2001      	movs	r0, #1
 8004510:	e77b      	b.n	800440a <HAL_DMA2D_PollForTransfer+0x36>
	...

08004514 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8004514:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004518:	2b01      	cmp	r3, #1
 800451a:	d067      	beq.n	80045ec <HAL_DMA2D_ConfigLayer+0xd8>
{
 800451c:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 800451e:	2301      	movs	r3, #1
 8004520:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004524:	2302      	movs	r3, #2
 8004526:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800452a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800452e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8004532:	6a54      	ldr	r4, [r2, #36]	; 0x24
 8004534:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004536:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800453a:	6b15      	ldr	r5, [r2, #48]	; 0x30
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800453c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004540:	6b52      	ldr	r2, [r2, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8004542:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004546:	3c09      	subs	r4, #9
 8004548:	2c01      	cmp	r4, #1
 800454a:	d921      	bls.n	8004590 <HAL_DMA2D_ConfigLayer+0x7c>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800454c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8004550:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8004554:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004556:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800455a:	bb61      	cbnz	r1, 80045b6 <HAL_DMA2D_ConfigLayer+0xa2>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800455c:	6804      	ldr	r4, [r0, #0]
 800455e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004560:	4a23      	ldr	r2, [pc, #140]	; (80045f0 <HAL_DMA2D_ConfigLayer+0xdc>)
 8004562:	402a      	ands	r2, r5
 8004564:	4313      	orrs	r3, r2
 8004566:	6263      	str	r3, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004568:	6802      	ldr	r2, [r0, #0]
 800456a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800456e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8004572:	6a1c      	ldr	r4, [r3, #32]
 8004574:	6194      	str	r4, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	3b09      	subs	r3, #9
 800457a:	2b01      	cmp	r3, #1
 800457c:	d911      	bls.n	80045a2 <HAL_DMA2D_ConfigLayer+0x8e>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800457e:	2301      	movs	r3, #1
 8004580:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_UNLOCK(hdma2d);
 8004584:	2300      	movs	r3, #0
 8004586:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  return HAL_OK;
 800458a:	4618      	mov	r0, r3
}
 800458c:	bc30      	pop	{r4, r5}
 800458e:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004590:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8004594:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8004598:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800459a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800459e:	4313      	orrs	r3, r2
 80045a0:	e7db      	b.n	800455a <HAL_DMA2D_ConfigLayer+0x46>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80045a2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80045a6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80045aa:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80045ac:	6802      	ldr	r2, [r0, #0]
 80045ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80045b2:	6293      	str	r3, [r2, #40]	; 0x28
 80045b4:	e7e3      	b.n	800457e <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80045b6:	6804      	ldr	r4, [r0, #0]
 80045b8:	69e5      	ldr	r5, [r4, #28]
 80045ba:	4a0d      	ldr	r2, [pc, #52]	; (80045f0 <HAL_DMA2D_ConfigLayer+0xdc>)
 80045bc:	402a      	ands	r2, r5
 80045be:	4313      	orrs	r3, r2
 80045c0:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80045c2:	6802      	ldr	r2, [r0, #0]
 80045c4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80045c8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80045cc:	6a1c      	ldr	r4, [r3, #32]
 80045ce:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	3b09      	subs	r3, #9
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d8d2      	bhi.n	800457e <HAL_DMA2D_ConfigLayer+0x6a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80045d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80045dc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80045e0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80045e2:	6802      	ldr	r2, [r0, #0]
 80045e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80045e8:	6213      	str	r3, [r2, #32]
 80045ea:	e7c8      	b.n	800457e <HAL_DMA2D_ConfigLayer+0x6a>
  __HAL_LOCK(hdma2d);
 80045ec:	2002      	movs	r0, #2
}
 80045ee:	4770      	bx	lr
 80045f0:	00ccfff0 	.word	0x00ccfff0

080045f4 <DSI_ConfigPacketHeader>:
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80045f4:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80045f8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80045fc:	9b00      	ldr	r3, [sp, #0]
 80045fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004602:	66c2      	str	r2, [r0, #108]	; 0x6c
}
 8004604:	4770      	bx	lr

08004606 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8004606:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800460a:	4605      	mov	r5, r0
 800460c:	4689      	mov	r9, r1
 800460e:	4617      	mov	r7, r2
 8004610:	4698      	mov	r8, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004612:	f7ff fb79 	bl	8003d08 <HAL_GetTick>
 8004616:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004618:	682c      	ldr	r4, [r5, #0]
 800461a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800461c:	f013 0f01 	tst.w	r3, #1
 8004620:	d107      	bne.n	8004632 <DSI_ShortWrite+0x2c>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8004622:	f7ff fb71 	bl	8003d08 <HAL_GetTick>
 8004626:	1b80      	subs	r0, r0, r6
 8004628:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800462c:	d9f4      	bls.n	8004618 <DSI_ShortWrite+0x12>
    {
      return HAL_TIMEOUT;
 800462e:	2003      	movs	r0, #3
 8004630:	e008      	b.n	8004644 <DSI_ShortWrite+0x3e>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8004632:	ea47 1789 	orr.w	r7, r7, r9, lsl #6
 8004636:	ea47 2808 	orr.w	r8, r7, r8, lsl #8
 800463a:	9b08      	ldr	r3, [sp, #32]
 800463c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004640:	66e3      	str	r3, [r4, #108]	; 0x6c

  return HAL_OK;
 8004642:	2000      	movs	r0, #0
}
 8004644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004648 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8004648:	4770      	bx	lr
	...

0800464c <HAL_DSI_Init>:
  if (hdsi == NULL)
 800464c:	2800      	cmp	r0, #0
 800464e:	f000 80ba 	beq.w	80047c6 <HAL_DSI_Init+0x17a>
{
 8004652:	b570      	push	{r4, r5, r6, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	460d      	mov	r5, r1
 8004658:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800465a:	7c43      	ldrb	r3, [r0, #17]
 800465c:	b31b      	cbz	r3, 80046a6 <HAL_DSI_Init+0x5a>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800465e:	2303      	movs	r3, #3
 8004660:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8004662:	2300      	movs	r3, #0
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	6822      	ldr	r2, [r4, #0]
 8004668:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800466c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004670:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800467a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8004682:	f7ff fb41 	bl	8003d08 <HAL_GetTick>
 8004686:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800468e:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8004692:	d10b      	bne.n	80046ac <HAL_DSI_Init+0x60>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004694:	f7ff fb38 	bl	8003d08 <HAL_GetTick>
 8004698:	1b80      	subs	r0, r0, r6
 800469a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800469e:	d9f3      	bls.n	8004688 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 80046a0:	2003      	movs	r0, #3
}
 80046a2:	b002      	add	sp, #8
 80046a4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_DSI_MspInit(hdsi);
 80046a6:	f7ff ffcf 	bl	8004648 <HAL_DSI_MspInit>
 80046aa:	e7d8      	b.n	800465e <HAL_DSI_Init+0x12>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80046ac:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80046b0:	4a46      	ldr	r2, [pc, #280]	; (80047cc <HAL_DSI_Init+0x180>)
 80046b2:	400a      	ands	r2, r1
 80046b4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80046b8:	6821      	ldr	r1, [r4, #0]
 80046ba:	f8d1 2430 	ldr.w	r2, [r1, #1072]	; 0x430
 80046be:	6828      	ldr	r0, [r5, #0]
 80046c0:	686b      	ldr	r3, [r5, #4]
 80046c2:	02db      	lsls	r3, r3, #11
 80046c4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 80046c8:	68a8      	ldr	r0, [r5, #8]
 80046ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3430 	str.w	r3, [r1, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80046d4:	2300      	movs	r3, #0
 80046d6:	9301      	str	r3, [sp, #4]
 80046d8:	6822      	ldr	r2, [r4, #0]
 80046da:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	9301      	str	r3, [sp, #4]
 80046f2:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 80046f4:	f7ff fb08 	bl	8003d08 <HAL_GetTick>
 80046f8:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8004700:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004704:	d107      	bne.n	8004716 <HAL_DSI_Init+0xca>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004706:	f7ff faff 	bl	8003d08 <HAL_GetTick>
 800470a:	1b80      	subs	r0, r0, r6
 800470c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004710:	d9f3      	bls.n	80046fa <HAL_DSI_Init+0xae>
      return HAL_TIMEOUT;
 8004712:	2003      	movs	r0, #3
 8004714:	e7c5      	b.n	80046a2 <HAL_DSI_Init+0x56>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004716:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800471a:	f042 0206 	orr.w	r2, r2, #6
 800471e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8004722:	6822      	ldr	r2, [r4, #0]
 8004724:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004728:	f023 0303 	bic.w	r3, r3, #3
 800472c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004730:	6822      	ldr	r2, [r4, #0]
 8004732:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004736:	6861      	ldr	r1, [r4, #4]
 8004738:	430b      	orrs	r3, r1
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004742:	6822      	ldr	r2, [r4, #0]
 8004744:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8004748:	f023 0303 	bic.w	r3, r3, #3
 800474c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004750:	6822      	ldr	r2, [r4, #0]
 8004752:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8004756:	68e1      	ldr	r1, [r4, #12]
 8004758:	430b      	orrs	r3, r1
 800475a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800475e:	6822      	ldr	r2, [r4, #0]
 8004760:	6893      	ldr	r3, [r2, #8]
 8004762:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004766:	6093      	str	r3, [r2, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004768:	6822      	ldr	r2, [r4, #0]
 800476a:	6893      	ldr	r3, [r2, #8]
 800476c:	68a1      	ldr	r1, [r4, #8]
 800476e:	430b      	orrs	r3, r1
 8004770:	6093      	str	r3, [r2, #8]
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8004772:	686a      	ldr	r2, [r5, #4]
 8004774:	b902      	cbnz	r2, 8004778 <HAL_DSI_Init+0x12c>
 8004776:	2201      	movs	r2, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004778:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <HAL_DSI_Init+0x184>)
 800477a:	fb03 f302 	mul.w	r3, r3, r2
 800477e:	68aa      	ldr	r2, [r5, #8]
 8004780:	f002 0203 	and.w	r2, r2, #3
 8004784:	4093      	lsls	r3, r2
 8004786:	6829      	ldr	r1, [r5, #0]
 8004788:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800478c:	fb02 f201 	mul.w	r2, r2, r1
 8004790:	fbb3 f3f2 	udiv	r3, r3, r2
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8004794:	6821      	ldr	r1, [r4, #0]
 8004796:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 800479a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800479e:	f8c1 2418 	str.w	r2, [r1, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80047a2:	6821      	ldr	r1, [r4, #0]
 80047a4:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3418 	str.w	r3, [r1, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	2000      	movs	r0, #0
 80047b2:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80047bc:	61a0      	str	r0, [r4, #24]
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80047be:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 80047c0:	2301      	movs	r3, #1
 80047c2:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 80047c4:	e76d      	b.n	80046a2 <HAL_DSI_Init+0x56>
    return HAL_ERROR;
 80047c6:	2001      	movs	r0, #1
}
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	fffc8603 	.word	0xfffc8603
 80047d0:	003d0900 	.word	0x003d0900

080047d4 <HAL_DSI_MspDeInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 80047d4:	4770      	bx	lr

080047d6 <HAL_DSI_DeInit>:
  if (hdsi == NULL)
 80047d6:	2800      	cmp	r0, #0
 80047d8:	d04a      	beq.n	8004870 <HAL_DSI_DeInit+0x9a>
{
 80047da:	b530      	push	{r4, r5, lr}
 80047dc:	b085      	sub	sp, #20
 80047de:	4604      	mov	r4, r0
  hdsi->State = HAL_DSI_STATE_BUSY;
 80047e0:	2303      	movs	r3, #3
 80047e2:	7443      	strb	r3, [r0, #17]
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80047e4:	2500      	movs	r5, #0
 80047e6:	9500      	str	r5, [sp, #0]
 80047e8:	6802      	ldr	r2, [r0, #0]
 80047ea:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 80047ee:	f023 0308 	bic.w	r3, r3, #8
 80047f2:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
 80047f6:	6803      	ldr	r3, [r0, #0]
 80047f8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80047fc:	f002 0208 	and.w	r2, r2, #8
 8004800:	9200      	str	r2, [sp, #0]
 8004802:	9a00      	ldr	r2, [sp, #0]
  __HAL_DSI_DISABLE(hdsi);
 8004804:	9501      	str	r5, [sp, #4]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	f022 0201 	bic.w	r2, r2, #1
 800480c:	605a      	str	r2, [r3, #4]
 800480e:	6803      	ldr	r3, [r0, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	f002 0201 	and.w	r2, r2, #1
 8004816:	9201      	str	r2, [sp, #4]
 8004818:	9a01      	ldr	r2, [sp, #4]
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800481a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800481e:	f022 0206 	bic.w	r2, r2, #6
 8004822:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  __HAL_DSI_PLL_DISABLE(hdsi);
 8004826:	9502      	str	r5, [sp, #8]
 8004828:	6802      	ldr	r2, [r0, #0]
 800482a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800482e:	f023 0301 	bic.w	r3, r3, #1
 8004832:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8004836:	6803      	ldr	r3, [r0, #0]
 8004838:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800483c:	f002 0201 	and.w	r2, r2, #1
 8004840:	9202      	str	r2, [sp, #8]
 8004842:	9a02      	ldr	r2, [sp, #8]
  __HAL_DSI_REG_DISABLE(hdsi);
 8004844:	9503      	str	r5, [sp, #12]
 8004846:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800484a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800484e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004852:	6803      	ldr	r3, [r0, #0]
 8004854:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800485c:	9303      	str	r3, [sp, #12]
 800485e:	9b03      	ldr	r3, [sp, #12]
  HAL_DSI_MspDeInit(hdsi);
 8004860:	f7ff ffb8 	bl	80047d4 <HAL_DSI_MspDeInit>
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004864:	6165      	str	r5, [r4, #20]
  hdsi->State = HAL_DSI_STATE_RESET;
 8004866:	7465      	strb	r5, [r4, #17]
  __HAL_UNLOCK(hdsi);
 8004868:	7425      	strb	r5, [r4, #16]
  return HAL_OK;
 800486a:	4628      	mov	r0, r5
}
 800486c:	b005      	add	sp, #20
 800486e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8004870:	2001      	movs	r0, #1
}
 8004872:	4770      	bx	lr

08004874 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004874:	7c03      	ldrb	r3, [r0, #16]
 8004876:	2b01      	cmp	r3, #1
 8004878:	f000 8123 	beq.w	8004ac2 <HAL_DSI_ConfigVideoMode+0x24e>
{
 800487c:	b430      	push	{r4, r5}
  __HAL_LOCK(hdsi);
 800487e:	2301      	movs	r3, #1
 8004880:	7403      	strb	r3, [r0, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004882:	6802      	ldr	r2, [r0, #0]
 8004884:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004886:	f023 0301 	bic.w	r3, r3, #1
 800488a:	6353      	str	r3, [r2, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800488c:	6802      	ldr	r2, [r0, #0]
 800488e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8004892:	f023 0301 	bic.w	r3, r3, #1
 8004896:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800489a:	6802      	ldr	r2, [r0, #0]
 800489c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800489e:	f023 0303 	bic.w	r3, r3, #3
 80048a2:	6393      	str	r3, [r2, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80048a4:	6802      	ldr	r2, [r0, #0]
 80048a6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80048a8:	68cc      	ldr	r4, [r1, #12]
 80048aa:	4323      	orrs	r3, r4
 80048ac:	6393      	str	r3, [r2, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80048ae:	6802      	ldr	r2, [r0, #0]
 80048b0:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80048b2:	4b85      	ldr	r3, [pc, #532]	; (8004ac8 <HAL_DSI_ConfigVideoMode+0x254>)
 80048b4:	4023      	ands	r3, r4
 80048b6:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80048b8:	6802      	ldr	r2, [r0, #0]
 80048ba:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80048bc:	690c      	ldr	r4, [r1, #16]
 80048be:	4323      	orrs	r3, r4
 80048c0:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80048c2:	6803      	ldr	r3, [r0, #0]
 80048c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048c6:	4c81      	ldr	r4, [pc, #516]	; (8004acc <HAL_DSI_ConfigVideoMode+0x258>)
 80048c8:	4022      	ands	r2, r4
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80048cc:	6803      	ldr	r3, [r0, #0]
 80048ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048d0:	694d      	ldr	r5, [r1, #20]
 80048d2:	432a      	orrs	r2, r5
 80048d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80048d6:	6802      	ldr	r2, [r0, #0]
 80048d8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80048da:	4023      	ands	r3, r4
 80048dc:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80048de:	6802      	ldr	r2, [r0, #0]
 80048e0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80048e2:	698c      	ldr	r4, [r1, #24]
 80048e4:	4323      	orrs	r3, r4
 80048e6:	6453      	str	r3, [r2, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80048e8:	6802      	ldr	r2, [r0, #0]
 80048ea:	68d3      	ldr	r3, [r2, #12]
 80048ec:	f023 0303 	bic.w	r3, r3, #3
 80048f0:	60d3      	str	r3, [r2, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80048f2:	6802      	ldr	r2, [r0, #0]
 80048f4:	68d3      	ldr	r3, [r2, #12]
 80048f6:	680c      	ldr	r4, [r1, #0]
 80048f8:	4323      	orrs	r3, r4
 80048fa:	60d3      	str	r3, [r2, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80048fc:	6802      	ldr	r2, [r0, #0]
 80048fe:	6953      	ldr	r3, [r2, #20]
 8004900:	f023 0307 	bic.w	r3, r3, #7
 8004904:	6153      	str	r3, [r2, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8004906:	6804      	ldr	r4, [r0, #0]
 8004908:	6962      	ldr	r2, [r4, #20]
 800490a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800490c:	6a0d      	ldr	r5, [r1, #32]
 800490e:	432b      	orrs	r3, r5
 8004910:	69cd      	ldr	r5, [r1, #28]
 8004912:	432b      	orrs	r3, r5
 8004914:	4313      	orrs	r3, r2
 8004916:	6163      	str	r3, [r4, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004918:	6802      	ldr	r2, [r0, #0]
 800491a:	6913      	ldr	r3, [r2, #16]
 800491c:	f023 030f 	bic.w	r3, r3, #15
 8004920:	6113      	str	r3, [r2, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004922:	6802      	ldr	r2, [r0, #0]
 8004924:	6913      	ldr	r3, [r2, #16]
 8004926:	684c      	ldr	r4, [r1, #4]
 8004928:	4323      	orrs	r3, r4
 800492a:	6113      	str	r3, [r2, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800492c:	6802      	ldr	r2, [r0, #0]
 800492e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8004932:	f023 030e 	bic.w	r3, r3, #14
 8004936:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800493a:	6802      	ldr	r2, [r0, #0]
 800493c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8004940:	684c      	ldr	r4, [r1, #4]
 8004942:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 8004946:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800494a:	684b      	ldr	r3, [r1, #4]
 800494c:	2b03      	cmp	r3, #3
 800494e:	f000 80ad 	beq.w	8004aac <HAL_DSI_ConfigVideoMode+0x238>
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004952:	6803      	ldr	r3, [r0, #0]
 8004954:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004956:	4c5e      	ldr	r4, [pc, #376]	; (8004ad0 <HAL_DSI_ConfigVideoMode+0x25c>)
 8004958:	4022      	ands	r2, r4
 800495a:	649a      	str	r2, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800495c:	6803      	ldr	r3, [r0, #0]
 800495e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004960:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8004962:	432a      	orrs	r2, r5
 8004964:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8004966:	6802      	ldr	r2, [r0, #0]
 8004968:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800496a:	4023      	ands	r3, r4
 800496c:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800496e:	6802      	ldr	r2, [r0, #0]
 8004970:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004972:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004974:	4323      	orrs	r3, r4
 8004976:	64d3      	str	r3, [r2, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004978:	6802      	ldr	r2, [r0, #0]
 800497a:	6d14      	ldr	r4, [r2, #80]	; 0x50
 800497c:	4b55      	ldr	r3, [pc, #340]	; (8004ad4 <HAL_DSI_ConfigVideoMode+0x260>)
 800497e:	4023      	ands	r3, r4
 8004980:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004982:	6802      	ldr	r2, [r0, #0]
 8004984:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004986:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8004988:	4323      	orrs	r3, r4
 800498a:	6513      	str	r3, [r2, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800498c:	6804      	ldr	r4, [r0, #0]
 800498e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004990:	4a51      	ldr	r2, [pc, #324]	; (8004ad8 <HAL_DSI_ConfigVideoMode+0x264>)
 8004992:	4013      	ands	r3, r2
 8004994:	6563      	str	r3, [r4, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004996:	6804      	ldr	r4, [r0, #0]
 8004998:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800499a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800499c:	432b      	orrs	r3, r5
 800499e:	6563      	str	r3, [r4, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80049a0:	6804      	ldr	r4, [r0, #0]
 80049a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049a4:	4013      	ands	r3, r2
 80049a6:	65a3      	str	r3, [r4, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80049a8:	6804      	ldr	r4, [r0, #0]
 80049aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049ac:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 80049ae:	432b      	orrs	r3, r5
 80049b0:	65a3      	str	r3, [r4, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80049b2:	6804      	ldr	r4, [r0, #0]
 80049b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80049b6:	4013      	ands	r3, r2
 80049b8:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80049ba:	6802      	ldr	r2, [r0, #0]
 80049bc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80049be:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80049c0:	4323      	orrs	r3, r4
 80049c2:	65d3      	str	r3, [r2, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80049c4:	6802      	ldr	r2, [r0, #0]
 80049c6:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80049c8:	4b3f      	ldr	r3, [pc, #252]	; (8004ac8 <HAL_DSI_ConfigVideoMode+0x254>)
 80049ca:	4023      	ands	r3, r4
 80049cc:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80049ce:	6802      	ldr	r2, [r0, #0]
 80049d0:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80049d2:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 80049d4:	4323      	orrs	r3, r4
 80049d6:	6613      	str	r3, [r2, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80049d8:	6802      	ldr	r2, [r0, #0]
 80049da:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80049dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049e0:	6393      	str	r3, [r2, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80049e2:	6802      	ldr	r2, [r0, #0]
 80049e4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80049e6:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80049e8:	4323      	orrs	r3, r4
 80049ea:	6393      	str	r3, [r2, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80049ec:	6802      	ldr	r2, [r0, #0]
 80049ee:	6993      	ldr	r3, [r2, #24]
 80049f0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80049f4:	6193      	str	r3, [r2, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80049f6:	6802      	ldr	r2, [r0, #0]
 80049f8:	6993      	ldr	r3, [r2, #24]
 80049fa:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 80049fc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004a00:	6193      	str	r3, [r2, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004a02:	6802      	ldr	r2, [r0, #0]
 8004a04:	6993      	ldr	r3, [r2, #24]
 8004a06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a0a:	6193      	str	r3, [r2, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004a0c:	6802      	ldr	r2, [r0, #0]
 8004a0e:	6993      	ldr	r3, [r2, #24]
 8004a10:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8004a12:	4323      	orrs	r3, r4
 8004a14:	6193      	str	r3, [r2, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8004a16:	6802      	ldr	r2, [r0, #0]
 8004a18:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a1e:	6393      	str	r3, [r2, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8004a20:	6802      	ldr	r2, [r0, #0]
 8004a22:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a24:	6d0c      	ldr	r4, [r1, #80]	; 0x50
 8004a26:	4323      	orrs	r3, r4
 8004a28:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004a2a:	6802      	ldr	r2, [r0, #0]
 8004a2c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a32:	6393      	str	r3, [r2, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004a34:	6802      	ldr	r2, [r0, #0]
 8004a36:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a38:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8004a3a:	4323      	orrs	r3, r4
 8004a3c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004a3e:	6802      	ldr	r2, [r0, #0]
 8004a40:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a46:	6393      	str	r3, [r2, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004a48:	6802      	ldr	r2, [r0, #0]
 8004a4a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a4c:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 8004a4e:	4323      	orrs	r3, r4
 8004a50:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004a52:	6802      	ldr	r2, [r0, #0]
 8004a54:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a5a:	6393      	str	r3, [r2, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004a5c:	6802      	ldr	r2, [r0, #0]
 8004a5e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a60:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8004a62:	4323      	orrs	r3, r4
 8004a64:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8004a66:	6802      	ldr	r2, [r0, #0]
 8004a68:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a6a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a6e:	6393      	str	r3, [r2, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8004a70:	6802      	ldr	r2, [r0, #0]
 8004a72:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a74:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8004a76:	4323      	orrs	r3, r4
 8004a78:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8004a7a:	6802      	ldr	r2, [r0, #0]
 8004a7c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a82:	6393      	str	r3, [r2, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8004a84:	6802      	ldr	r2, [r0, #0]
 8004a86:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a88:	6e4c      	ldr	r4, [r1, #100]	; 0x64
 8004a8a:	4323      	orrs	r3, r4
 8004a8c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8004a8e:	6802      	ldr	r2, [r0, #0]
 8004a90:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a96:	6393      	str	r3, [r2, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8004a98:	6802      	ldr	r2, [r0, #0]
 8004a9a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a9c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004a9e:	430b      	orrs	r3, r1
 8004aa0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8004aa6:	4618      	mov	r0, r3
}
 8004aa8:	bc30      	pop	{r4, r5}
 8004aaa:	4770      	bx	lr
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8004aac:	6802      	ldr	r2, [r0, #0]
 8004aae:	6913      	ldr	r3, [r2, #16]
 8004ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ab4:	6113      	str	r3, [r2, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8004ab6:	6802      	ldr	r2, [r0, #0]
 8004ab8:	6913      	ldr	r3, [r2, #16]
 8004aba:	688c      	ldr	r4, [r1, #8]
 8004abc:	4323      	orrs	r3, r4
 8004abe:	6113      	str	r3, [r2, #16]
 8004ac0:	e747      	b.n	8004952 <HAL_DSI_ConfigVideoMode+0xde>
  __HAL_LOCK(hdsi);
 8004ac2:	2002      	movs	r0, #2
}
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	ffffc000 	.word	0xffffc000
 8004acc:	ffffe000 	.word	0xffffe000
 8004ad0:	fffff000 	.word	0xfffff000
 8004ad4:	ffff8000 	.word	0xffff8000
 8004ad8:	fffffc00 	.word	0xfffffc00

08004adc <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004adc:	7c03      	ldrb	r3, [r0, #16]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d021      	beq.n	8004b26 <HAL_DSI_Start+0x4a>
{
 8004ae2:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	7403      	strb	r3, [r0, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004ae8:	2300      	movs	r3, #0
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	6801      	ldr	r1, [r0, #0]
 8004aee:	684a      	ldr	r2, [r1, #4]
 8004af0:	f042 0201 	orr.w	r2, r2, #1
 8004af4:	604a      	str	r2, [r1, #4]
 8004af6:	6802      	ldr	r2, [r0, #0]
 8004af8:	6851      	ldr	r1, [r2, #4]
 8004afa:	f001 0101 	and.w	r1, r1, #1
 8004afe:	9100      	str	r1, [sp, #0]
 8004b00:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004b02:	9301      	str	r3, [sp, #4]
 8004b04:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8004b08:	f041 0108 	orr.w	r1, r1, #8
 8004b0c:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8004b10:	6802      	ldr	r2, [r0, #0]
 8004b12:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8004b16:	f002 0208 	and.w	r2, r2, #8
 8004b1a:	9201      	str	r2, [sp, #4]
 8004b1c:	9a01      	ldr	r2, [sp, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b1e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8004b20:	4618      	mov	r0, r3
}
 8004b22:	b002      	add	sp, #8
 8004b24:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8004b26:	2002      	movs	r0, #2
}
 8004b28:	4770      	bx	lr

08004b2a <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004b2a:	b510      	push	{r4, lr}
 8004b2c:	b082      	sub	sp, #8
 8004b2e:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b30:	7c00      	ldrb	r0, [r0, #16]
 8004b32:	2801      	cmp	r0, #1
 8004b34:	d00a      	beq.n	8004b4c <HAL_DSI_ShortWrite+0x22>
 8004b36:	2001      	movs	r0, #1
 8004b38:	7420      	strb	r0, [r4, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004b3a:	9804      	ldr	r0, [sp, #16]
 8004b3c:	9000      	str	r0, [sp, #0]
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f7ff fd61 	bl	8004606 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b44:	2300      	movs	r3, #0
 8004b46:	7423      	strb	r3, [r4, #16]

  return status;
}
 8004b48:	b002      	add	sp, #8
 8004b4a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdsi);
 8004b4c:	2002      	movs	r0, #2
 8004b4e:	e7fb      	b.n	8004b48 <HAL_DSI_ShortWrite+0x1e>

08004b50 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	4698      	mov	r8, r3
 8004b58:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004b5a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b5c:	7c03      	ldrb	r3, [r0, #16]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d04b      	beq.n	8004bfa <HAL_DSI_LongWrite+0xaa>
 8004b62:	4607      	mov	r7, r0
 8004b64:	4689      	mov	r9, r1
 8004b66:	4692      	mov	sl, r2
 8004b68:	2301      	movs	r3, #1
 8004b6a:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b6c:	f7ff f8cc 	bl	8003d08 <HAL_GetTick>
 8004b70:	4605      	mov	r5, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004b76:	f013 0f01 	tst.w	r3, #1
 8004b7a:	d109      	bne.n	8004b90 <HAL_DSI_LongWrite+0x40>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004b7c:	f7ff f8c4 	bl	8003d08 <HAL_GetTick>
 8004b80:	1b40      	subs	r0, r0, r5
 8004b82:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004b86:	d9f4      	bls.n	8004b72 <HAL_DSI_LongWrite+0x22>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004b88:	2300      	movs	r3, #0
 8004b8a:	743b      	strb	r3, [r7, #16]

      return HAL_TIMEOUT;
 8004b8c:	2003      	movs	r0, #3
 8004b8e:	e031      	b.n	8004bf4 <HAL_DSI_LongWrite+0xa4>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004b90:	4645      	mov	r5, r8
 8004b92:	2d03      	cmp	r5, #3
 8004b94:	bf28      	it	cs
 8004b96:	2503      	movcs	r5, #3

  for (count = 0U; count < nbBytes; count++)
 8004b98:	2300      	movs	r3, #0
 8004b9a:	42ab      	cmp	r3, r5
 8004b9c:	d205      	bcs.n	8004baa <HAL_DSI_LongWrite+0x5a>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004b9e:	5ce1      	ldrb	r1, [r4, r3]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	00d8      	lsls	r0, r3, #3
 8004ba4:	4081      	lsls	r1, r0
 8004ba6:	430e      	orrs	r6, r1
  for (count = 0U; count < nbBytes; count++)
 8004ba8:	e7f7      	b.n	8004b9a <HAL_DSI_LongWrite+0x4a>
  }
  hdsi->Instance->GPDR = fifoword;
 8004baa:	6716      	str	r6, [r2, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004bac:	eba8 0005 	sub.w	r0, r8, r5
  pparams += nbBytes;
 8004bb0:	1961      	adds	r1, r4, r5
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004bb2:	e00a      	b.n	8004bca <HAL_DSI_LongWrite+0x7a>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004bb4:	5d0d      	ldrb	r5, [r1, r4]
 8004bb6:	00e3      	lsls	r3, r4, #3
 8004bb8:	409d      	lsls	r5, r3
 8004bba:	432e      	orrs	r6, r5
    for (count = 0U; count < nbBytes; count++)
 8004bbc:	3401      	adds	r4, #1
 8004bbe:	4294      	cmp	r4, r2
 8004bc0:	d3f8      	bcc.n	8004bb4 <HAL_DSI_LongWrite+0x64>
    }
    hdsi->Instance->GPDR = fifoword;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	671e      	str	r6, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004bc6:	1a80      	subs	r0, r0, r2
    pparams += nbBytes;
 8004bc8:	4411      	add	r1, r2
  while (uicounter != 0U)
 8004bca:	b130      	cbz	r0, 8004bda <HAL_DSI_LongWrite+0x8a>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004bcc:	4602      	mov	r2, r0
 8004bce:	2804      	cmp	r0, #4
 8004bd0:	bf28      	it	cs
 8004bd2:	2204      	movcs	r2, #4
    fifoword = 0U;
 8004bd4:	2600      	movs	r6, #0
    for (count = 0U; count < nbBytes; count++)
 8004bd6:	4634      	mov	r4, r6
 8004bd8:	e7f1      	b.n	8004bbe <HAL_DSI_LongWrite+0x6e>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004bda:	f108 0301 	add.w	r3, r8, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004bde:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004be2:	9200      	str	r2, [sp, #0]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	4652      	mov	r2, sl
 8004be8:	4649      	mov	r1, r9
 8004bea:	6838      	ldr	r0, [r7, #0]
 8004bec:	f7ff fd02 	bl	80045f4 <DSI_ConfigPacketHeader>
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	7438      	strb	r0, [r7, #16]

  return HAL_OK;
}
 8004bf4:	b002      	add	sp, #8
 8004bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 8004bfa:	2002      	movs	r0, #2
 8004bfc:	e7fa      	b.n	8004bf4 <HAL_DSI_LongWrite+0xa4>
	...

08004c00 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c00:	2300      	movs	r3, #0
 8004c02:	2b0f      	cmp	r3, #15
 8004c04:	f200 80e3 	bhi.w	8004dce <HAL_GPIO_Init+0x1ce>
{
 8004c08:	b4f0      	push	{r4, r5, r6, r7}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	e039      	b.n	8004c82 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004c0e:	2209      	movs	r2, #9
 8004c10:	e000      	b.n	8004c14 <HAL_GPIO_Init+0x14>
 8004c12:	2200      	movs	r2, #0
 8004c14:	40b2      	lsls	r2, r6
 8004c16:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8004c18:	3402      	adds	r4, #2
 8004c1a:	4e6d      	ldr	r6, [pc, #436]	; (8004dd0 <HAL_GPIO_Init+0x1d0>)
 8004c1c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c20:	4a6c      	ldr	r2, [pc, #432]	; (8004dd4 <HAL_GPIO_Init+0x1d4>)
 8004c22:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004c24:	43ea      	mvns	r2, r5
 8004c26:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c2a:	684f      	ldr	r7, [r1, #4]
 8004c2c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8004c30:	d001      	beq.n	8004c36 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8004c32:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8004c36:	4c67      	ldr	r4, [pc, #412]	; (8004dd4 <HAL_GPIO_Init+0x1d4>)
 8004c38:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8004c3a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8004c3c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c40:	684f      	ldr	r7, [r1, #4]
 8004c42:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8004c46:	d001      	beq.n	8004c4c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8004c48:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8004c4c:	4c61      	ldr	r4, [pc, #388]	; (8004dd4 <HAL_GPIO_Init+0x1d4>)
 8004c4e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c50:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8004c52:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c56:	684f      	ldr	r7, [r1, #4]
 8004c58:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8004c5c:	d001      	beq.n	8004c62 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8004c5e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8004c62:	4c5c      	ldr	r4, [pc, #368]	; (8004dd4 <HAL_GPIO_Init+0x1d4>)
 8004c64:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8004c66:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8004c68:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c6a:	684e      	ldr	r6, [r1, #4]
 8004c6c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8004c70:	d001      	beq.n	8004c76 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8004c72:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8004c76:	4c57      	ldr	r4, [pc, #348]	; (8004dd4 <HAL_GPIO_Init+0x1d4>)
 8004c78:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	2b0f      	cmp	r3, #15
 8004c7e:	f200 80a3 	bhi.w	8004dc8 <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
 8004c82:	2201      	movs	r2, #1
 8004c84:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c86:	680c      	ldr	r4, [r1, #0]
 8004c88:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8004c8c:	ea32 0404 	bics.w	r4, r2, r4
 8004c90:	d1f3      	bne.n	8004c7a <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c92:	684c      	ldr	r4, [r1, #4]
 8004c94:	2c12      	cmp	r4, #18
 8004c96:	bf18      	it	ne
 8004c98:	2c02      	cmpne	r4, #2
 8004c9a:	d110      	bne.n	8004cbe <HAL_GPIO_Init+0xbe>
        temp = GPIOx->AFR[position >> 3];
 8004c9c:	08de      	lsrs	r6, r3, #3
 8004c9e:	3608      	adds	r6, #8
 8004ca0:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004ca4:	f003 0407 	and.w	r4, r3, #7
 8004ca8:	00a7      	lsls	r7, r4, #2
 8004caa:	240f      	movs	r4, #15
 8004cac:	40bc      	lsls	r4, r7
 8004cae:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004cb2:	690c      	ldr	r4, [r1, #16]
 8004cb4:	40bc      	lsls	r4, r7
 8004cb6:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8004cba:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8004cbe:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004cc2:	005e      	lsls	r6, r3, #1
 8004cc4:	2403      	movs	r4, #3
 8004cc6:	40b4      	lsls	r4, r6
 8004cc8:	43e7      	mvns	r7, r4
 8004cca:	ea2c 0c04 	bic.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004cce:	684c      	ldr	r4, [r1, #4]
 8004cd0:	f004 0403 	and.w	r4, r4, #3
 8004cd4:	40b4      	lsls	r4, r6
 8004cd6:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8004cda:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cdc:	684c      	ldr	r4, [r1, #4]
 8004cde:	f104 3cff 	add.w	ip, r4, #4294967295
 8004ce2:	2c11      	cmp	r4, #17
 8004ce4:	bf18      	it	ne
 8004ce6:	f1bc 0f01 	cmpne.w	ip, #1
 8004cea:	d901      	bls.n	8004cf0 <HAL_GPIO_Init+0xf0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cec:	2c12      	cmp	r4, #18
 8004cee:	d110      	bne.n	8004d12 <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8004cf0:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004cf2:	ea07 0c04 	and.w	ip, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8004cf6:	68cc      	ldr	r4, [r1, #12]
 8004cf8:	40b4      	lsls	r4, r6
 8004cfa:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8004cfe:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8004d00:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d02:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004d06:	684c      	ldr	r4, [r1, #4]
 8004d08:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004d0c:	409c      	lsls	r4, r3
 8004d0e:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8004d10:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8004d12:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004d14:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004d16:	688a      	ldr	r2, [r1, #8]
 8004d18:	40b2      	lsls	r2, r6
 8004d1a:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8004d1c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d1e:	684a      	ldr	r2, [r1, #4]
 8004d20:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8004d24:	d0a9      	beq.n	8004c7a <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d26:	4a2c      	ldr	r2, [pc, #176]	; (8004dd8 <HAL_GPIO_Init+0x1d8>)
 8004d28:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8004d2a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004d2e:	6454      	str	r4, [r2, #68]	; 0x44
 8004d30:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d32:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004d36:	9201      	str	r2, [sp, #4]
 8004d38:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8004d3a:	089c      	lsrs	r4, r3, #2
 8004d3c:	1ca6      	adds	r6, r4, #2
 8004d3e:	4a24      	ldr	r2, [pc, #144]	; (8004dd0 <HAL_GPIO_Init+0x1d0>)
 8004d40:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004d44:	f003 0203 	and.w	r2, r3, #3
 8004d48:	0096      	lsls	r6, r2, #2
 8004d4a:	220f      	movs	r2, #15
 8004d4c:	40b2      	lsls	r2, r6
 8004d4e:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004d52:	4a22      	ldr	r2, [pc, #136]	; (8004ddc <HAL_GPIO_Init+0x1dc>)
 8004d54:	4290      	cmp	r0, r2
 8004d56:	f43f af5c 	beq.w	8004c12 <HAL_GPIO_Init+0x12>
 8004d5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d5e:	4290      	cmp	r0, r2
 8004d60:	d022      	beq.n	8004da8 <HAL_GPIO_Init+0x1a8>
 8004d62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d66:	4290      	cmp	r0, r2
 8004d68:	d020      	beq.n	8004dac <HAL_GPIO_Init+0x1ac>
 8004d6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d6e:	4290      	cmp	r0, r2
 8004d70:	d01e      	beq.n	8004db0 <HAL_GPIO_Init+0x1b0>
 8004d72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d76:	4290      	cmp	r0, r2
 8004d78:	d01c      	beq.n	8004db4 <HAL_GPIO_Init+0x1b4>
 8004d7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d7e:	4290      	cmp	r0, r2
 8004d80:	d01a      	beq.n	8004db8 <HAL_GPIO_Init+0x1b8>
 8004d82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d86:	4290      	cmp	r0, r2
 8004d88:	d018      	beq.n	8004dbc <HAL_GPIO_Init+0x1bc>
 8004d8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d8e:	4290      	cmp	r0, r2
 8004d90:	d016      	beq.n	8004dc0 <HAL_GPIO_Init+0x1c0>
 8004d92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d96:	4290      	cmp	r0, r2
 8004d98:	d014      	beq.n	8004dc4 <HAL_GPIO_Init+0x1c4>
 8004d9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d9e:	4290      	cmp	r0, r2
 8004da0:	f43f af35 	beq.w	8004c0e <HAL_GPIO_Init+0xe>
 8004da4:	220a      	movs	r2, #10
 8004da6:	e735      	b.n	8004c14 <HAL_GPIO_Init+0x14>
 8004da8:	2201      	movs	r2, #1
 8004daa:	e733      	b.n	8004c14 <HAL_GPIO_Init+0x14>
 8004dac:	2202      	movs	r2, #2
 8004dae:	e731      	b.n	8004c14 <HAL_GPIO_Init+0x14>
 8004db0:	2203      	movs	r2, #3
 8004db2:	e72f      	b.n	8004c14 <HAL_GPIO_Init+0x14>
 8004db4:	2204      	movs	r2, #4
 8004db6:	e72d      	b.n	8004c14 <HAL_GPIO_Init+0x14>
 8004db8:	2205      	movs	r2, #5
 8004dba:	e72b      	b.n	8004c14 <HAL_GPIO_Init+0x14>
 8004dbc:	2206      	movs	r2, #6
 8004dbe:	e729      	b.n	8004c14 <HAL_GPIO_Init+0x14>
 8004dc0:	2207      	movs	r2, #7
 8004dc2:	e727      	b.n	8004c14 <HAL_GPIO_Init+0x14>
 8004dc4:	2208      	movs	r2, #8
 8004dc6:	e725      	b.n	8004c14 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8004dc8:	b002      	add	sp, #8
 8004dca:	bcf0      	pop	{r4, r5, r6, r7}
 8004dcc:	4770      	bx	lr
 8004dce:	4770      	bx	lr
 8004dd0:	40013800 	.word	0x40013800
 8004dd4:	40013c00 	.word	0x40013c00
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	40020000 	.word	0x40020000

08004de0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004de0:	6903      	ldr	r3, [r0, #16]
 8004de2:	4219      	tst	r1, r3
 8004de4:	d001      	beq.n	8004dea <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8004de6:	2001      	movs	r0, #1
 8004de8:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dea:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8004dec:	4770      	bx	lr

08004dee <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dee:	b10a      	cbz	r2, 8004df4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004df0:	6181      	str	r1, [r0, #24]
 8004df2:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004df4:	0409      	lsls	r1, r1, #16
 8004df6:	6181      	str	r1, [r0, #24]
  }
}
 8004df8:	4770      	bx	lr

08004dfa <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004dfa:	6803      	ldr	r3, [r0, #0]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	f012 0f02 	tst.w	r2, #2
 8004e02:	d001      	beq.n	8004e08 <I2C_Flush_TXDR+0xe>
  {
     hi2c->Instance->TXDR = 0x00U;
 8004e04:	2200      	movs	r2, #0
 8004e06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e08:	6803      	ldr	r3, [r0, #0]
 8004e0a:	699a      	ldr	r2, [r3, #24]
 8004e0c:	f012 0f01 	tst.w	r2, #1
 8004e10:	d103      	bne.n	8004e1a <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e12:	699a      	ldr	r2, [r3, #24]
 8004e14:	f042 0201 	orr.w	r2, r2, #1
 8004e18:	619a      	str	r2, [r3, #24]
  }
}
 8004e1a:	4770      	bx	lr

08004e1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004e1c:	b410      	push	{r4}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8004e1e:	6804      	ldr	r4, [r0, #0]
 8004e20:	6860      	ldr	r0, [r4, #4]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8004e22:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 8004e26:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
 8004e2a:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8004e2e:	f020 0003 	bic.w	r0, r0, #3

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8004e32:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004e36:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004e3a:	4319      	orrs	r1, r3
 8004e3c:	9b01      	ldr	r3, [sp, #4]
 8004e3e:	4319      	orrs	r1, r3
 8004e40:	4301      	orrs	r1, r0
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8004e42:	6061      	str	r1, [r4, #4]
}
 8004e44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <I2C_IsAcknowledgeFailed>:
{
 8004e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	460e      	mov	r6, r1
 8004e50:	4617      	mov	r7, r2
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e52:	6803      	ldr	r3, [r0, #0]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	f013 0f10 	tst.w	r3, #16
 8004e5a:	d101      	bne.n	8004e60 <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8004e5c:	2000      	movs	r0, #0
}
 8004e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	699c      	ldr	r4, [r3, #24]
 8004e64:	f014 0f20 	tst.w	r4, #32
 8004e68:	d112      	bne.n	8004e90 <I2C_IsAcknowledgeFailed+0x46>
      if(Timeout != HAL_MAX_DELAY)
 8004e6a:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004e6e:	d0f7      	beq.n	8004e60 <I2C_IsAcknowledgeFailed+0x16>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8004e70:	b126      	cbz	r6, 8004e7c <I2C_IsAcknowledgeFailed+0x32>
 8004e72:	f7fe ff49 	bl	8003d08 <HAL_GetTick>
 8004e76:	1bc0      	subs	r0, r0, r7
 8004e78:	42b0      	cmp	r0, r6
 8004e7a:	d9f1      	bls.n	8004e60 <I2C_IsAcknowledgeFailed+0x16>
          hi2c->State= HAL_I2C_STATE_READY;
 8004e7c:	2320      	movs	r3, #32
 8004e7e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e82:	2300      	movs	r3, #0
 8004e84:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8004e88:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_TIMEOUT;
 8004e8c:	2003      	movs	r0, #3
 8004e8e:	e7e6      	b.n	8004e5e <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e90:	2210      	movs	r2, #16
 8004e92:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	2420      	movs	r4, #32
 8004e98:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f7ff ffad 	bl	8004dfa <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004ea0:	682a      	ldr	r2, [r5, #0]
 8004ea2:	6853      	ldr	r3, [r2, #4]
 8004ea4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004ea8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004eac:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004eb6:	2304      	movs	r3, #4
 8004eb8:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 8004eba:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004ec4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8004ec8:	2001      	movs	r0, #1
 8004eca:	e7c8      	b.n	8004e5e <I2C_IsAcknowledgeFailed+0x14>

08004ecc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	4604      	mov	r4, r0
 8004ed0:	460d      	mov	r5, r1
 8004ed2:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	f013 0f02 	tst.w	r3, #2
 8004edc:	d11c      	bne.n	8004f18 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ede:	4632      	mov	r2, r6
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f7ff ffb1 	bl	8004e4a <I2C_IsAcknowledgeFailed>
 8004ee8:	b9c0      	cbnz	r0, 8004f1c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8004eea:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004eee:	d0f1      	beq.n	8004ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8004ef0:	b125      	cbz	r5, 8004efc <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8004ef2:	f7fe ff09 	bl	8003d08 <HAL_GetTick>
 8004ef6:	1b80      	subs	r0, r0, r6
 8004ef8:	42a8      	cmp	r0, r5
 8004efa:	d9eb      	bls.n	8004ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004efc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004efe:	f043 0320 	orr.w	r3, r3, #32
 8004f02:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 8004f04:	2320      	movs	r3, #32
 8004f06:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004f10:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8004f14:	2003      	movs	r0, #3
 8004f16:	e000      	b.n	8004f1a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;
 8004f18:	2000      	movs	r0, #0
}
 8004f1a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004f1c:	2001      	movs	r0, #1
 8004f1e:	e7fc      	b.n	8004f1a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

08004f20 <I2C_WaitOnFlagUntilTimeout>:
{
 8004f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f24:	4606      	mov	r6, r0
 8004f26:	4688      	mov	r8, r1
 8004f28:	4617      	mov	r7, r2
 8004f2a:	461d      	mov	r5, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f2c:	6834      	ldr	r4, [r6, #0]
 8004f2e:	69a4      	ldr	r4, [r4, #24]
 8004f30:	ea38 0304 	bics.w	r3, r8, r4
 8004f34:	bf0c      	ite	eq
 8004f36:	2401      	moveq	r4, #1
 8004f38:	2400      	movne	r4, #0
 8004f3a:	42bc      	cmp	r4, r7
 8004f3c:	d113      	bne.n	8004f66 <I2C_WaitOnFlagUntilTimeout+0x46>
    if(Timeout != HAL_MAX_DELAY)
 8004f3e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004f42:	d0f3      	beq.n	8004f2c <I2C_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004f44:	b12d      	cbz	r5, 8004f52 <I2C_WaitOnFlagUntilTimeout+0x32>
 8004f46:	f7fe fedf 	bl	8003d08 <HAL_GetTick>
 8004f4a:	9b06      	ldr	r3, [sp, #24]
 8004f4c:	1ac0      	subs	r0, r0, r3
 8004f4e:	42a8      	cmp	r0, r5
 8004f50:	d9ec      	bls.n	8004f2c <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->State= HAL_I2C_STATE_READY;
 8004f52:	2320      	movs	r3, #32
 8004f54:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004f5e:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_TIMEOUT;
 8004f62:	2003      	movs	r0, #3
 8004f64:	e000      	b.n	8004f68 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8004f66:	2000      	movs	r0, #0
}
 8004f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004f6c <I2C_RequestMemoryWrite>:
{
 8004f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	4604      	mov	r4, r0
 8004f74:	4690      	mov	r8, r2
 8004f76:	461d      	mov	r5, r3
 8004f78:	9e08      	ldr	r6, [sp, #32]
 8004f7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f86:	b2ea      	uxtb	r2, r5
 8004f88:	f7ff ff48 	bl	8004e1c <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f8c:	463a      	mov	r2, r7
 8004f8e:	4631      	mov	r1, r6
 8004f90:	4620      	mov	r0, r4
 8004f92:	f7ff ff9b 	bl	8004ecc <I2C_WaitOnTXISFlagUntilTimeout>
 8004f96:	b130      	cbz	r0, 8004fa6 <I2C_RequestMemoryWrite+0x3a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d001      	beq.n	8004fa2 <I2C_RequestMemoryWrite+0x36>
      return HAL_TIMEOUT;
 8004f9e:	2003      	movs	r0, #3
 8004fa0:	e00f      	b.n	8004fc2 <I2C_RequestMemoryWrite+0x56>
      return HAL_ERROR;
 8004fa2:	2001      	movs	r0, #1
 8004fa4:	e00d      	b.n	8004fc2 <I2C_RequestMemoryWrite+0x56>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fa6:	2d01      	cmp	r5, #1
 8004fa8:	d10e      	bne.n	8004fc8 <I2C_RequestMemoryWrite+0x5c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	fa5f f288 	uxtb.w	r2, r8
 8004fb0:	629a      	str	r2, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb2:	9700      	str	r7, [sp, #0]
 8004fb4:	4633      	mov	r3, r6
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2180      	movs	r1, #128	; 0x80
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f7ff ffb0 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 8004fc0:	b9c0      	cbnz	r0, 8004ff4 <I2C_RequestMemoryWrite+0x88>
}
 8004fc2:	b002      	add	sp, #8
 8004fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8004fce:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fd0:	463a      	mov	r2, r7
 8004fd2:	4631      	mov	r1, r6
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f7ff ff79 	bl	8004ecc <I2C_WaitOnTXISFlagUntilTimeout>
 8004fda:	b130      	cbz	r0, 8004fea <I2C_RequestMemoryWrite+0x7e>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fdc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d001      	beq.n	8004fe6 <I2C_RequestMemoryWrite+0x7a>
        return HAL_TIMEOUT;
 8004fe2:	2003      	movs	r0, #3
 8004fe4:	e7ed      	b.n	8004fc2 <I2C_RequestMemoryWrite+0x56>
        return HAL_ERROR;
 8004fe6:	2001      	movs	r0, #1
 8004fe8:	e7eb      	b.n	8004fc2 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	fa5f f288 	uxtb.w	r2, r8
 8004ff0:	629a      	str	r2, [r3, #40]	; 0x28
 8004ff2:	e7de      	b.n	8004fb2 <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 8004ff4:	2003      	movs	r0, #3
 8004ff6:	e7e4      	b.n	8004fc2 <I2C_RequestMemoryWrite+0x56>

08004ff8 <I2C_RequestMemoryRead>:
{
 8004ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	4604      	mov	r4, r0
 8005000:	4690      	mov	r8, r2
 8005002:	461d      	mov	r5, r3
 8005004:	9e08      	ldr	r6, [sp, #32]
 8005006:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005008:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	2300      	movs	r3, #0
 8005010:	b2ea      	uxtb	r2, r5
 8005012:	f7ff ff03 	bl	8004e1c <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005016:	463a      	mov	r2, r7
 8005018:	4631      	mov	r1, r6
 800501a:	4620      	mov	r0, r4
 800501c:	f7ff ff56 	bl	8004ecc <I2C_WaitOnTXISFlagUntilTimeout>
 8005020:	b130      	cbz	r0, 8005030 <I2C_RequestMemoryRead+0x38>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005022:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005024:	2b04      	cmp	r3, #4
 8005026:	d001      	beq.n	800502c <I2C_RequestMemoryRead+0x34>
      return HAL_TIMEOUT;
 8005028:	2003      	movs	r0, #3
 800502a:	e00f      	b.n	800504c <I2C_RequestMemoryRead+0x54>
      return HAL_ERROR;
 800502c:	2001      	movs	r0, #1
 800502e:	e00d      	b.n	800504c <I2C_RequestMemoryRead+0x54>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005030:	2d01      	cmp	r5, #1
 8005032:	d10e      	bne.n	8005052 <I2C_RequestMemoryRead+0x5a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	fa5f f288 	uxtb.w	r2, r8
 800503a:	629a      	str	r2, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800503c:	9700      	str	r7, [sp, #0]
 800503e:	4633      	mov	r3, r6
 8005040:	2200      	movs	r2, #0
 8005042:	2140      	movs	r1, #64	; 0x40
 8005044:	4620      	mov	r0, r4
 8005046:	f7ff ff6b 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 800504a:	b9c0      	cbnz	r0, 800507e <I2C_RequestMemoryRead+0x86>
}
 800504c:	b002      	add	sp, #8
 800504e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8005058:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800505a:	463a      	mov	r2, r7
 800505c:	4631      	mov	r1, r6
 800505e:	4620      	mov	r0, r4
 8005060:	f7ff ff34 	bl	8004ecc <I2C_WaitOnTXISFlagUntilTimeout>
 8005064:	b130      	cbz	r0, 8005074 <I2C_RequestMemoryRead+0x7c>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005066:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005068:	2b04      	cmp	r3, #4
 800506a:	d001      	beq.n	8005070 <I2C_RequestMemoryRead+0x78>
        return HAL_TIMEOUT;
 800506c:	2003      	movs	r0, #3
 800506e:	e7ed      	b.n	800504c <I2C_RequestMemoryRead+0x54>
        return HAL_ERROR;
 8005070:	2001      	movs	r0, #1
 8005072:	e7eb      	b.n	800504c <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	fa5f f288 	uxtb.w	r2, r8
 800507a:	629a      	str	r2, [r3, #40]	; 0x28
 800507c:	e7de      	b.n	800503c <I2C_RequestMemoryRead+0x44>
    return HAL_TIMEOUT;
 800507e:	2003      	movs	r0, #3
 8005080:	e7e4      	b.n	800504c <I2C_RequestMemoryRead+0x54>

08005082 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005082:	b570      	push	{r4, r5, r6, lr}
 8005084:	4605      	mov	r5, r0
 8005086:	460c      	mov	r4, r1
 8005088:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800508a:	682b      	ldr	r3, [r5, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	f013 0f20 	tst.w	r3, #32
 8005092:	d119      	bne.n	80050c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005094:	4632      	mov	r2, r6
 8005096:	4621      	mov	r1, r4
 8005098:	4628      	mov	r0, r5
 800509a:	f7ff fed6 	bl	8004e4a <I2C_IsAcknowledgeFailed>
 800509e:	b9a8      	cbnz	r0, 80050cc <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80050a0:	b124      	cbz	r4, 80050ac <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
 80050a2:	f7fe fe31 	bl	8003d08 <HAL_GetTick>
 80050a6:	1b80      	subs	r0, r0, r6
 80050a8:	42a0      	cmp	r0, r4
 80050aa:	d9ee      	bls.n	800508a <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050ac:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80050ae:	f043 0320 	orr.w	r3, r3, #32
 80050b2:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 80050b4:	2320      	movs	r3, #32
 80050b6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ba:	2300      	movs	r3, #0
 80050bc:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80050c0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_TIMEOUT;
 80050c4:	2003      	movs	r0, #3
}
 80050c6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80050c8:	2000      	movs	r0, #0
 80050ca:	e7fc      	b.n	80050c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
      return HAL_ERROR;
 80050cc:	2001      	movs	r0, #1
 80050ce:	e7fa      	b.n	80050c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

080050d0 <HAL_I2C_MspInit>:
}
 80050d0:	4770      	bx	lr
	...

080050d4 <HAL_I2C_Init>:
  if(hi2c == NULL)
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d057      	beq.n	8005188 <HAL_I2C_Init+0xb4>
{
 80050d8:	b510      	push	{r4, lr}
 80050da:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80050dc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d041      	beq.n	8005168 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80050e4:	2324      	movs	r3, #36	; 0x24
 80050e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80050ea:	6822      	ldr	r2, [r4, #0]
 80050ec:	6813      	ldr	r3, [r2, #0]
 80050ee:	f023 0301 	bic.w	r3, r3, #1
 80050f2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80050f4:	6863      	ldr	r3, [r4, #4]
 80050f6:	6822      	ldr	r2, [r4, #0]
 80050f8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80050fc:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80050fe:	6822      	ldr	r2, [r4, #0]
 8005100:	6893      	ldr	r3, [r2, #8]
 8005102:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005106:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005108:	68e3      	ldr	r3, [r4, #12]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d031      	beq.n	8005172 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800510e:	68a3      	ldr	r3, [r4, #8]
 8005110:	6822      	ldr	r2, [r4, #0]
 8005112:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8005116:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005118:	68e3      	ldr	r3, [r4, #12]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d02f      	beq.n	800517e <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800511e:	6822      	ldr	r2, [r4, #0]
 8005120:	6851      	ldr	r1, [r2, #4]
 8005122:	4b1a      	ldr	r3, [pc, #104]	; (800518c <HAL_I2C_Init+0xb8>)
 8005124:	430b      	orrs	r3, r1
 8005126:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005128:	6822      	ldr	r2, [r4, #0]
 800512a:	68d3      	ldr	r3, [r2, #12]
 800512c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005130:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005132:	6923      	ldr	r3, [r4, #16]
 8005134:	6962      	ldr	r2, [r4, #20]
 8005136:	4313      	orrs	r3, r2
 8005138:	69a1      	ldr	r1, [r4, #24]
 800513a:	6822      	ldr	r2, [r4, #0]
 800513c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005140:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005142:	69e3      	ldr	r3, [r4, #28]
 8005144:	6a21      	ldr	r1, [r4, #32]
 8005146:	6822      	ldr	r2, [r4, #0]
 8005148:	430b      	orrs	r3, r1
 800514a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800514c:	6822      	ldr	r2, [r4, #0]
 800514e:	6813      	ldr	r3, [r2, #0]
 8005150:	f043 0301 	orr.w	r3, r3, #1
 8005154:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005156:	2000      	movs	r0, #0
 8005158:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800515a:	2320      	movs	r3, #32
 800515c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005160:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005162:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005166:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005168:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800516c:	f7ff ffb0 	bl	80050d0 <HAL_I2C_MspInit>
 8005170:	e7b8      	b.n	80050e4 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005172:	68a3      	ldr	r3, [r4, #8]
 8005174:	6822      	ldr	r2, [r4, #0]
 8005176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800517a:	6093      	str	r3, [r2, #8]
 800517c:	e7cc      	b.n	8005118 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005184:	605a      	str	r2, [r3, #4]
 8005186:	e7ca      	b.n	800511e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8005188:	2001      	movs	r0, #1
}
 800518a:	4770      	bx	lr
 800518c:	02008000 	.word	0x02008000

08005190 <HAL_I2C_MspDeInit>:
}
 8005190:	4770      	bx	lr

08005192 <HAL_I2C_DeInit>:
  if(hi2c == NULL)
 8005192:	b1a8      	cbz	r0, 80051c0 <HAL_I2C_DeInit+0x2e>
{
 8005194:	b510      	push	{r4, lr}
 8005196:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005198:	2324      	movs	r3, #36	; 0x24
 800519a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800519e:	6802      	ldr	r2, [r0, #0]
 80051a0:	6813      	ldr	r3, [r2, #0]
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80051a8:	f7ff fff2 	bl	8005190 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051ac:	2000      	movs	r0, #0
 80051ae:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80051b0:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80051b4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 80051ba:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80051be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80051c0:	2001      	movs	r0, #1
}
 80051c2:	4770      	bx	lr

080051c4 <HAL_I2C_Mem_Write>:
{
 80051c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c8:	b083      	sub	sp, #12
 80051ca:	460d      	mov	r5, r1
 80051cc:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80051d0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if(hi2c->State == HAL_I2C_STATE_READY)
 80051d2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80051d6:	b2c9      	uxtb	r1, r1
 80051d8:	2920      	cmp	r1, #32
 80051da:	f040 80d1 	bne.w	8005380 <HAL_I2C_Mem_Write+0x1bc>
 80051de:	4604      	mov	r4, r0
 80051e0:	4690      	mov	r8, r2
 80051e2:	4699      	mov	r9, r3
    if((pData == NULL) || (Size == 0U))
 80051e4:	faba f38a 	clz	r3, sl
 80051e8:	095b      	lsrs	r3, r3, #5
 80051ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051ec:	2a00      	cmp	r2, #0
 80051ee:	bf08      	it	eq
 80051f0:	2301      	moveq	r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f040 80c8 	bne.w	8005388 <HAL_I2C_Mem_Write+0x1c4>
    __HAL_LOCK(hi2c);
 80051f8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	f000 80c5 	beq.w	800538c <HAL_I2C_Mem_Write+0x1c8>
 8005202:	f04f 0b01 	mov.w	fp, #1
 8005206:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800520a:	f7fe fd7d 	bl	8003d08 <HAL_GetTick>
 800520e:	4606      	mov	r6, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005210:	9000      	str	r0, [sp, #0]
 8005212:	2319      	movs	r3, #25
 8005214:	465a      	mov	r2, fp
 8005216:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800521a:	4620      	mov	r0, r4
 800521c:	f7ff fe80 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 8005220:	2800      	cmp	r0, #0
 8005222:	f040 80b5 	bne.w	8005390 <HAL_I2C_Mem_Write+0x1cc>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005226:	2321      	movs	r3, #33	; 0x21
 8005228:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800522c:	2340      	movs	r3, #64	; 0x40
 800522e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005232:	2300      	movs	r3, #0
 8005234:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005236:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005238:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800523a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800523e:	6363      	str	r3, [r4, #52]	; 0x34
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005240:	9601      	str	r6, [sp, #4]
 8005242:	9700      	str	r7, [sp, #0]
 8005244:	464b      	mov	r3, r9
 8005246:	4642      	mov	r2, r8
 8005248:	4629      	mov	r1, r5
 800524a:	4620      	mov	r0, r4
 800524c:	f7ff fe8e 	bl	8004f6c <I2C_RequestMemoryWrite>
 8005250:	b160      	cbz	r0, 800526c <HAL_I2C_Mem_Write+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005252:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005254:	2b04      	cmp	r3, #4
 8005256:	d004      	beq.n	8005262 <HAL_I2C_Mem_Write+0x9e>
        __HAL_UNLOCK(hi2c);
 8005258:	2300      	movs	r3, #0
 800525a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800525e:	2003      	movs	r0, #3
 8005260:	e08f      	b.n	8005382 <HAL_I2C_Mem_Write+0x1be>
        __HAL_UNLOCK(hi2c);
 8005262:	2300      	movs	r3, #0
 8005264:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005268:	4658      	mov	r0, fp
 800526a:	e08a      	b.n	8005382 <HAL_I2C_Mem_Write+0x1be>
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800526c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800526e:	b29b      	uxth	r3, r3
 8005270:	2bff      	cmp	r3, #255	; 0xff
 8005272:	d90a      	bls.n	800528a <HAL_I2C_Mem_Write+0xc6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005274:	22ff      	movs	r2, #255	; 0xff
 8005276:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005278:	2300      	movs	r3, #0
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005280:	4629      	mov	r1, r5
 8005282:	4620      	mov	r0, r4
 8005284:	f7ff fdca 	bl	8004e1c <I2C_TransferConfig>
 8005288:	e023      	b.n	80052d2 <HAL_I2C_Mem_Write+0x10e>
      hi2c->XferSize = hi2c->XferCount;
 800528a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800528c:	b292      	uxth	r2, r2
 800528e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005290:	2300      	movs	r3, #0
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	4629      	mov	r1, r5
 800529c:	4620      	mov	r0, r4
 800529e:	f7ff fdbd 	bl	8004e1c <I2C_TransferConfig>
 80052a2:	e016      	b.n	80052d2 <HAL_I2C_Mem_Write+0x10e>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d001      	beq.n	80052ae <HAL_I2C_Mem_Write+0xea>
          return HAL_TIMEOUT;
 80052aa:	2003      	movs	r0, #3
 80052ac:	e069      	b.n	8005382 <HAL_I2C_Mem_Write+0x1be>
          return HAL_ERROR;
 80052ae:	2001      	movs	r0, #1
 80052b0:	e067      	b.n	8005382 <HAL_I2C_Mem_Write+0x1be>
          hi2c->XferSize = hi2c->XferCount;
 80052b2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80052b4:	b292      	uxth	r2, r2
 80052b6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80052b8:	2300      	movs	r3, #0
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	4629      	mov	r1, r5
 80052c4:	4620      	mov	r0, r4
 80052c6:	f7ff fda9 	bl	8004e1c <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 80052ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d033      	beq.n	800533a <HAL_I2C_Mem_Write+0x176>
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052d2:	4632      	mov	r2, r6
 80052d4:	4639      	mov	r1, r7
 80052d6:	4620      	mov	r0, r4
 80052d8:	f7ff fdf8 	bl	8004ecc <I2C_WaitOnTXISFlagUntilTimeout>
 80052dc:	2800      	cmp	r0, #0
 80052de:	d1e1      	bne.n	80052a4 <HAL_I2C_Mem_Write+0xe0>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80052e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	6262      	str	r2, [r4, #36]	; 0x24
 80052e6:	6822      	ldr	r2, [r4, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80052ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80052f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	8523      	strh	r3, [r4, #40]	; 0x28
      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e3      	bne.n	80052ca <HAL_I2C_Mem_Write+0x106>
 8005302:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0df      	beq.n	80052ca <HAL_I2C_Mem_Write+0x106>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800530a:	9600      	str	r6, [sp, #0]
 800530c:	463b      	mov	r3, r7
 800530e:	2200      	movs	r2, #0
 8005310:	2180      	movs	r1, #128	; 0x80
 8005312:	4620      	mov	r0, r4
 8005314:	f7ff fe04 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 8005318:	2800      	cmp	r0, #0
 800531a:	d13b      	bne.n	8005394 <HAL_I2C_Mem_Write+0x1d0>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800531c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800531e:	b29b      	uxth	r3, r3
 8005320:	2bff      	cmp	r3, #255	; 0xff
 8005322:	d9c6      	bls.n	80052b2 <HAL_I2C_Mem_Write+0xee>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005324:	22ff      	movs	r2, #255	; 0xff
 8005326:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005328:	2300      	movs	r3, #0
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005330:	4629      	mov	r1, r5
 8005332:	4620      	mov	r0, r4
 8005334:	f7ff fd72 	bl	8004e1c <I2C_TransferConfig>
 8005338:	e7c7      	b.n	80052ca <HAL_I2C_Mem_Write+0x106>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800533a:	4632      	mov	r2, r6
 800533c:	4639      	mov	r1, r7
 800533e:	4620      	mov	r0, r4
 8005340:	f7ff fe9f 	bl	8005082 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005344:	b130      	cbz	r0, 8005354 <HAL_I2C_Mem_Write+0x190>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005346:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005348:	2b04      	cmp	r3, #4
 800534a:	d001      	beq.n	8005350 <HAL_I2C_Mem_Write+0x18c>
        return HAL_TIMEOUT;
 800534c:	2003      	movs	r0, #3
 800534e:	e018      	b.n	8005382 <HAL_I2C_Mem_Write+0x1be>
        return HAL_ERROR;
 8005350:	2001      	movs	r0, #1
 8005352:	e016      	b.n	8005382 <HAL_I2C_Mem_Write+0x1be>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	2220      	movs	r2, #32
 8005358:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800535a:	6821      	ldr	r1, [r4, #0]
 800535c:	684b      	ldr	r3, [r1, #4]
 800535e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005362:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005366:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800536a:	f023 0301 	bic.w	r3, r3, #1
 800536e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005370:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005374:	2300      	movs	r3, #0
 8005376:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800537a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800537e:	e000      	b.n	8005382 <HAL_I2C_Mem_Write+0x1be>
    return HAL_BUSY;
 8005380:	2002      	movs	r0, #2
}
 8005382:	b003      	add	sp, #12
 8005384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 8005388:	2001      	movs	r0, #1
 800538a:	e7fa      	b.n	8005382 <HAL_I2C_Mem_Write+0x1be>
    __HAL_LOCK(hi2c);
 800538c:	2002      	movs	r0, #2
 800538e:	e7f8      	b.n	8005382 <HAL_I2C_Mem_Write+0x1be>
      return HAL_TIMEOUT;
 8005390:	2003      	movs	r0, #3
 8005392:	e7f6      	b.n	8005382 <HAL_I2C_Mem_Write+0x1be>
          return HAL_TIMEOUT;
 8005394:	2003      	movs	r0, #3
 8005396:	e7f4      	b.n	8005382 <HAL_I2C_Mem_Write+0x1be>

08005398 <HAL_I2C_Mem_Read>:
{
 8005398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539c:	b083      	sub	sp, #12
 800539e:	460d      	mov	r5, r1
 80053a0:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80053a4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if(hi2c->State == HAL_I2C_STATE_READY)
 80053a6:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80053aa:	b2c9      	uxtb	r1, r1
 80053ac:	2920      	cmp	r1, #32
 80053ae:	f040 80cd 	bne.w	800554c <HAL_I2C_Mem_Read+0x1b4>
 80053b2:	4604      	mov	r4, r0
 80053b4:	4690      	mov	r8, r2
 80053b6:	4699      	mov	r9, r3
    if((pData == NULL) || (Size == 0U))
 80053b8:	faba f38a 	clz	r3, sl
 80053bc:	095b      	lsrs	r3, r3, #5
 80053be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053c0:	2a00      	cmp	r2, #0
 80053c2:	bf08      	it	eq
 80053c4:	2301      	moveq	r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f040 80c4 	bne.w	8005554 <HAL_I2C_Mem_Read+0x1bc>
    __HAL_LOCK(hi2c);
 80053cc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	f000 80c1 	beq.w	8005558 <HAL_I2C_Mem_Read+0x1c0>
 80053d6:	f04f 0b01 	mov.w	fp, #1
 80053da:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80053de:	f7fe fc93 	bl	8003d08 <HAL_GetTick>
 80053e2:	4606      	mov	r6, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053e4:	9000      	str	r0, [sp, #0]
 80053e6:	2319      	movs	r3, #25
 80053e8:	465a      	mov	r2, fp
 80053ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053ee:	4620      	mov	r0, r4
 80053f0:	f7ff fd96 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	f040 80b1 	bne.w	800555c <HAL_I2C_Mem_Read+0x1c4>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053fa:	2322      	movs	r3, #34	; 0x22
 80053fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005400:	2340      	movs	r3, #64	; 0x40
 8005402:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005406:	2300      	movs	r3, #0
 8005408:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800540a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800540c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800540e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005412:	6363      	str	r3, [r4, #52]	; 0x34
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005414:	9601      	str	r6, [sp, #4]
 8005416:	9700      	str	r7, [sp, #0]
 8005418:	464b      	mov	r3, r9
 800541a:	4642      	mov	r2, r8
 800541c:	4629      	mov	r1, r5
 800541e:	4620      	mov	r0, r4
 8005420:	f7ff fdea 	bl	8004ff8 <I2C_RequestMemoryRead>
 8005424:	b160      	cbz	r0, 8005440 <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005426:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005428:	2b04      	cmp	r3, #4
 800542a:	d004      	beq.n	8005436 <HAL_I2C_Mem_Read+0x9e>
        __HAL_UNLOCK(hi2c);
 800542c:	2300      	movs	r3, #0
 800542e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8005432:	2003      	movs	r0, #3
 8005434:	e08b      	b.n	800554e <HAL_I2C_Mem_Read+0x1b6>
        __HAL_UNLOCK(hi2c);
 8005436:	2300      	movs	r3, #0
 8005438:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800543c:	4658      	mov	r0, fp
 800543e:	e086      	b.n	800554e <HAL_I2C_Mem_Read+0x1b6>
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8005440:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005442:	b29b      	uxth	r3, r3
 8005444:	2bff      	cmp	r3, #255	; 0xff
 8005446:	d90b      	bls.n	8005460 <HAL_I2C_Mem_Read+0xc8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005448:	22ff      	movs	r2, #255	; 0xff
 800544a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800544c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005456:	4629      	mov	r1, r5
 8005458:	4620      	mov	r0, r4
 800545a:	f7ff fcdf 	bl	8004e1c <I2C_TransferConfig>
 800545e:	e01d      	b.n	800549c <HAL_I2C_Mem_Read+0x104>
      hi2c->XferSize = hi2c->XferCount;
 8005460:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005462:	b292      	uxth	r2, r2
 8005464:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005466:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	4629      	mov	r1, r5
 8005474:	4620      	mov	r0, r4
 8005476:	f7ff fcd1 	bl	8004e1c <I2C_TransferConfig>
 800547a:	e00f      	b.n	800549c <HAL_I2C_Mem_Read+0x104>
          hi2c->XferSize = hi2c->XferCount;
 800547c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800547e:	b292      	uxth	r2, r2
 8005480:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005482:	2300      	movs	r3, #0
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	4629      	mov	r1, r5
 800548e:	4620      	mov	r0, r4
 8005490:	f7ff fcc4 	bl	8004e1c <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 8005494:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d034      	beq.n	8005506 <HAL_I2C_Mem_Read+0x16e>
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800549c:	9600      	str	r6, [sp, #0]
 800549e:	463b      	mov	r3, r7
 80054a0:	2200      	movs	r2, #0
 80054a2:	2104      	movs	r1, #4
 80054a4:	4620      	mov	r0, r4
 80054a6:	f7ff fd3b 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 80054aa:	2800      	cmp	r0, #0
 80054ac:	d158      	bne.n	8005560 <HAL_I2C_Mem_Read+0x1c8>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054b4:	1c59      	adds	r1, r3, #1
 80054b6:	6261      	str	r1, [r4, #36]	; 0x24
 80054b8:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80054ba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80054bc:	3a01      	subs	r2, #1
 80054be:	b292      	uxth	r2, r2
 80054c0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80054c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80054cc:	2a00      	cmp	r2, #0
 80054ce:	d1e1      	bne.n	8005494 <HAL_I2C_Mem_Read+0xfc>
 80054d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0dd      	beq.n	8005494 <HAL_I2C_Mem_Read+0xfc>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054d8:	9600      	str	r6, [sp, #0]
 80054da:	463b      	mov	r3, r7
 80054dc:	2180      	movs	r1, #128	; 0x80
 80054de:	4620      	mov	r0, r4
 80054e0:	f7ff fd1e 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d13d      	bne.n	8005564 <HAL_I2C_Mem_Read+0x1cc>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80054e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	2bff      	cmp	r3, #255	; 0xff
 80054ee:	d9c5      	bls.n	800547c <HAL_I2C_Mem_Read+0xe4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054f0:	22ff      	movs	r2, #255	; 0xff
 80054f2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80054f4:	2300      	movs	r3, #0
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054fc:	4629      	mov	r1, r5
 80054fe:	4620      	mov	r0, r4
 8005500:	f7ff fc8c 	bl	8004e1c <I2C_TransferConfig>
 8005504:	e7c6      	b.n	8005494 <HAL_I2C_Mem_Read+0xfc>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005506:	4632      	mov	r2, r6
 8005508:	4639      	mov	r1, r7
 800550a:	4620      	mov	r0, r4
 800550c:	f7ff fdb9 	bl	8005082 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005510:	b130      	cbz	r0, 8005520 <HAL_I2C_Mem_Read+0x188>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005512:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005514:	2b04      	cmp	r3, #4
 8005516:	d001      	beq.n	800551c <HAL_I2C_Mem_Read+0x184>
        return HAL_TIMEOUT;
 8005518:	2003      	movs	r0, #3
 800551a:	e018      	b.n	800554e <HAL_I2C_Mem_Read+0x1b6>
        return HAL_ERROR;
 800551c:	2001      	movs	r0, #1
 800551e:	e016      	b.n	800554e <HAL_I2C_Mem_Read+0x1b6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	2220      	movs	r2, #32
 8005524:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005526:	6821      	ldr	r1, [r4, #0]
 8005528:	684b      	ldr	r3, [r1, #4]
 800552a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800552e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005532:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005536:	f023 0301 	bic.w	r3, r3, #1
 800553a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800553c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005540:	2300      	movs	r3, #0
 8005542:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005546:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800554a:	e000      	b.n	800554e <HAL_I2C_Mem_Read+0x1b6>
    return HAL_BUSY;
 800554c:	2002      	movs	r0, #2
}
 800554e:	b003      	add	sp, #12
 8005550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 8005554:	2001      	movs	r0, #1
 8005556:	e7fa      	b.n	800554e <HAL_I2C_Mem_Read+0x1b6>
    __HAL_LOCK(hi2c);
 8005558:	2002      	movs	r0, #2
 800555a:	e7f8      	b.n	800554e <HAL_I2C_Mem_Read+0x1b6>
      return HAL_TIMEOUT;
 800555c:	2003      	movs	r0, #3
 800555e:	e7f6      	b.n	800554e <HAL_I2C_Mem_Read+0x1b6>
        return HAL_TIMEOUT;
 8005560:	2003      	movs	r0, #3
 8005562:	e7f4      	b.n	800554e <HAL_I2C_Mem_Read+0x1b6>
          return HAL_TIMEOUT;
 8005564:	2003      	movs	r0, #3
 8005566:	e7f2      	b.n	800554e <HAL_I2C_Mem_Read+0x1b6>

08005568 <HAL_I2C_GetState>:
  return hi2c->State;
 8005568:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800556c:	4770      	bx	lr

0800556e <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimmension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800556e:	b4f0      	push	{r4, r5, r6, r7}
 8005570:	469c      	mov	ip, r3
  uint32_t i, p, l, code, si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
 8005572:	2700      	movs	r7, #0
  p = 0;
 8005574:	463e      	mov	r6, r7
  for (l = 0; l < 16UL; l++)
 8005576:	e007      	b.n	8005588 <JPEG_Bits_To_SizeCodes+0x1a>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8005578:	b2fc      	uxtb	r4, r7
 800557a:	3401      	adds	r4, #1
 800557c:	558c      	strb	r4, [r1, r6]
      p++;
 800557e:	3601      	adds	r6, #1
      i--;
 8005580:	3d01      	subs	r5, #1
    while (i != 0UL)
 8005582:	2d00      	cmp	r5, #0
 8005584:	d1f8      	bne.n	8005578 <JPEG_Bits_To_SizeCodes+0xa>
  for (l = 0; l < 16UL; l++)
 8005586:	3701      	adds	r7, #1
 8005588:	2f0f      	cmp	r7, #15
 800558a:	d807      	bhi.n	800559c <JPEG_Bits_To_SizeCodes+0x2e>
    i = (uint32_t)Bits[l];
 800558c:	5dc5      	ldrb	r5, [r0, r7]
    if ((p + i) > 256UL)
 800558e:	1974      	adds	r4, r6, r5
 8005590:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8005594:	d9f5      	bls.n	8005582 <JPEG_Bits_To_SizeCodes+0x14>
      return HAL_ERROR;
 8005596:	2001      	movs	r0, #1
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 8005598:	bcf0      	pop	{r4, r5, r6, r7}
 800559a:	4770      	bx	lr
  Huffsize[p] = 0;
 800559c:	2300      	movs	r3, #0
 800559e:	558b      	strb	r3, [r1, r6]
  *LastK = p;
 80055a0:	f8cc 6000 	str.w	r6, [ip]
  si = Huffsize[0];
 80055a4:	780d      	ldrb	r5, [r1, #0]
  code = 0;
 80055a6:	461c      	mov	r4, r3
  while (Huffsize[p] != 0U)
 80055a8:	e007      	b.n	80055ba <JPEG_Bits_To_SizeCodes+0x4c>
    if(si > 31UL)
 80055aa:	2d1f      	cmp	r5, #31
 80055ac:	d810      	bhi.n	80055d0 <JPEG_Bits_To_SizeCodes+0x62>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80055ae:	2001      	movs	r0, #1
 80055b0:	40a8      	lsls	r0, r5
 80055b2:	42a0      	cmp	r0, r4
 80055b4:	d90e      	bls.n	80055d4 <JPEG_Bits_To_SizeCodes+0x66>
    code <<= 1;
 80055b6:	0064      	lsls	r4, r4, #1
    si++;
 80055b8:	3501      	adds	r5, #1
  while (Huffsize[p] != 0U)
 80055ba:	5cc8      	ldrb	r0, [r1, r3]
 80055bc:	2800      	cmp	r0, #0
 80055be:	d0eb      	beq.n	8005598 <JPEG_Bits_To_SizeCodes+0x2a>
    while (((uint32_t) Huffsize[p]) == si)
 80055c0:	5cc8      	ldrb	r0, [r1, r3]
 80055c2:	42a8      	cmp	r0, r5
 80055c4:	d1f1      	bne.n	80055aa <JPEG_Bits_To_SizeCodes+0x3c>
      Huffcode[p] = code;
 80055c6:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 80055ca:	3301      	adds	r3, #1
      code++;
 80055cc:	3401      	adds	r4, #1
 80055ce:	e7f7      	b.n	80055c0 <JPEG_Bits_To_SizeCodes+0x52>
      return HAL_ERROR;
 80055d0:	2001      	movs	r0, #1
 80055d2:	e7e1      	b.n	8005598 <JPEG_Bits_To_SizeCodes+0x2a>
      return HAL_ERROR;
 80055d4:	2001      	movs	r0, #1
 80055d6:	e7df      	b.n	8005598 <JPEG_Bits_To_SizeCodes+0x2a>

080055d8 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 80055d8:	b570      	push	{r4, r5, r6, lr}
 80055da:	f5ad 6da2 	sub.w	sp, sp, #1296	; 0x510
 80055de:	4605      	mov	r5, r0
 80055e0:	460c      	mov	r4, r1
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80055e2:	ab01      	add	r3, sp, #4
 80055e4:	aa02      	add	r2, sp, #8
 80055e6:	f20d 410c 	addw	r1, sp, #1036	; 0x40c
 80055ea:	f7ff ffc0 	bl	800556e <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 80055ee:	bb20      	cbnz	r0, 800563a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x62>
 80055f0:	4603      	mov	r3, r0
 80055f2:	e00e      	b.n	8005612 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x3a>
  while (k < lastK)
  {
    l = AC_BitsValsTable->HuffVal[k];
    if (l == 0UL)
    {
      l = 160; /*l = 0x00 EOB code*/
 80055f4:	22a0      	movs	r2, #160	; 0xa0
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80055f6:	a902      	add	r1, sp, #8
 80055f8:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 80055fc:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8005600:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005604:	604e      	str	r6, [r1, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8005606:	f20d 410c 	addw	r1, sp, #1036	; 0x40c
 800560a:	5cc9      	ldrb	r1, [r1, r3]
 800560c:	3901      	subs	r1, #1
 800560e:	54a1      	strb	r1, [r4, r2]
      k++;
 8005610:	3301      	adds	r3, #1
  while (k < lastK)
 8005612:	9a01      	ldr	r2, [sp, #4]
 8005614:	429a      	cmp	r2, r3
 8005616:	d910      	bls.n	800563a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x62>
    l = AC_BitsValsTable->HuffVal[k];
 8005618:	18ea      	adds	r2, r5, r3
 800561a:	7c12      	ldrb	r2, [r2, #16]
    if (l == 0UL)
 800561c:	2a00      	cmp	r2, #0
 800561e:	d0e9      	beq.n	80055f4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x1c>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8005620:	2af0      	cmp	r2, #240	; 0xf0
 8005622:	d00d      	beq.n	8005640 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x68>
      lsb = (l & 0x0FUL);
 8005624:	f002 010f 	and.w	r1, r2, #15
      l = (msb * 10UL) + lsb - 1UL;
 8005628:	0912      	lsrs	r2, r2, #4
 800562a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800562e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005632:	3a01      	subs	r2, #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8005634:	2aa1      	cmp	r2, #161	; 0xa1
 8005636:	d9de      	bls.n	80055f6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x1e>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8005638:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800563a:	f50d 6da2 	add.w	sp, sp, #1296	; 0x510
 800563e:	bd70      	pop	{r4, r5, r6, pc}
      l = 161;
 8005640:	22a1      	movs	r2, #161	; 0xa1
 8005642:	e7d8      	b.n	80055f6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x1e>

08005644 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8005644:	b570      	push	{r4, r5, r6, lr}
 8005646:	f5ad 6da2 	sub.w	sp, sp, #1296	; 0x510
 800564a:	4606      	mov	r6, r0
 800564c:	460d      	mov	r5, r1
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800564e:	f20d 530c 	addw	r3, sp, #1292	; 0x50c
 8005652:	aa01      	add	r2, sp, #4
 8005654:	f50d 6181 	add.w	r1, sp, #1032	; 0x408
 8005658:	f7ff ff89 	bl	800556e <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800565c:	b9b8      	cbnz	r0, 800568e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
 800565e:	4603      	mov	r3, r0
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8005660:	f8dd 250c 	ldr.w	r2, [sp, #1292]	; 0x50c
 8005664:	429a      	cmp	r2, r3
 8005666:	d912      	bls.n	800568e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8005668:	18f2      	adds	r2, r6, r3
 800566a:	7c12      	ldrb	r2, [r2, #16]
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800566c:	2a0b      	cmp	r2, #11
 800566e:	d80d      	bhi.n	800568c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x48>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8005670:	a901      	add	r1, sp, #4
 8005672:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005676:	1c94      	adds	r4, r2, #2
 8005678:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800567c:	6061      	str	r1, [r4, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800567e:	f50d 6181 	add.w	r1, sp, #1032	; 0x408
 8005682:	5ccc      	ldrb	r4, [r1, r3]
 8005684:	3c01      	subs	r4, #1
 8005686:	54ac      	strb	r4, [r5, r2]
      k++;
 8005688:	3301      	adds	r3, #1
 800568a:	e7e9      	b.n	8005660 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x1c>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800568c:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800568e:	f50d 6da2 	add.w	sp, sp, #1296	; 0x510
 8005692:	bd70      	pop	{r4, r5, r6, pc}

08005694 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8005694:	b530      	push	{r4, r5, lr}
 8005696:	b091      	sub	sp, #68	; 0x44
 8005698:	460b      	mov	r3, r1
  HAL_StatusTypeDef error;
  JPEG_DC_HuffCodeTableTypeDef dcSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800569a:	6804      	ldr	r4, [r0, #0]
 800569c:	f504 61f8 	add.w	r1, r4, #1984	; 0x7c0
 80056a0:	4291      	cmp	r1, r2
 80056a2:	d006      	beq.n	80056b2 <JPEG_Set_HuffDC_Mem+0x1e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80056a4:	f504 61fc 	add.w	r1, r4, #2016	; 0x7e0
 80056a8:	4291      	cmp	r1, r2
 80056aa:	d005      	beq.n	80056b8 <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 80056ac:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80056ae:	b011      	add	sp, #68	; 0x44
 80056b0:	bd30      	pop	{r4, r5, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80056b2:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
 80056b6:	e001      	b.n	80056bc <JPEG_Set_HuffDC_Mem+0x28>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80056b8:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
  if (HuffTableDC != NULL)
 80056bc:	b383      	cbz	r3, 8005720 <JPEG_Set_HuffDC_Mem+0x8c>
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80056be:	a901      	add	r1, sp, #4
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff ffbf 	bl	8005644 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d1f1      	bne.n	80056ae <JPEG_Set_HuffDC_Mem+0x1a>
    *addressDef = 0x0FFF0FFF;
 80056ca:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 80056ce:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 80056d0:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
 80056d2:	210c      	movs	r1, #12
    while (i > 1UL)
 80056d4:	2901      	cmp	r1, #1
 80056d6:	d9ea      	bls.n	80056ae <JPEG_Set_HuffDC_Mem+0x1a>
      i--;
 80056d8:	1e4b      	subs	r3, r1, #1
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80056da:	aa10      	add	r2, sp, #64	; 0x40
 80056dc:	4413      	add	r3, r2
 80056de:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80056e2:	021b      	lsls	r3, r3, #8
 80056e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80056e8:	1c4a      	adds	r2, r1, #1
 80056ea:	ad10      	add	r5, sp, #64	; 0x40
 80056ec:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80056f0:	f812 2c38 	ldrb.w	r2, [r2, #-56]
 80056f4:	431a      	orrs	r2, r3
      i--;
 80056f6:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80056f8:	462b      	mov	r3, r5
 80056fa:	440b      	add	r3, r1
 80056fc:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005706:	1c8d      	adds	r5, r1, #2
 8005708:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 800570c:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 8005710:	f815 5c38 	ldrb.w	r5, [r5, #-56]
 8005714:	432b      	orrs	r3, r5
      *address = lsb | (msb << 16);
 8005716:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800571a:	f844 3d04 	str.w	r3, [r4, #-4]!
 800571e:	e7d9      	b.n	80056d4 <JPEG_Set_HuffDC_Mem+0x40>
  return HAL_OK;
 8005720:	2000      	movs	r0, #0
 8005722:	e7c4      	b.n	80056ae <JPEG_Set_HuffDC_Mem+0x1a>

08005724 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8005724:	b570      	push	{r4, r5, r6, lr}
 8005726:	f5ad 7d4c 	sub.w	sp, sp, #816	; 0x330
 800572a:	460b      	mov	r3, r1
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800572c:	6804      	ldr	r4, [r0, #0]
 800572e:	f504 61a0 	add.w	r1, r4, #1280	; 0x500
 8005732:	4291      	cmp	r1, r2
 8005734:	d007      	beq.n	8005746 <JPEG_Set_HuffAC_Mem+0x22>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8005736:	f504 61cc 	add.w	r1, r4, #1632	; 0x660
 800573a:	4291      	cmp	r1, r2
 800573c:	d006      	beq.n	800574c <JPEG_Set_HuffAC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 800573e:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8005740:	f50d 7d4c 	add.w	sp, sp, #816	; 0x330
 8005744:	bd70      	pop	{r4, r5, r6, pc}
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8005746:	f204 6444 	addw	r4, r4, #1604	; 0x644
 800574a:	e001      	b.n	8005750 <JPEG_Set_HuffAC_Mem+0x2c>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800574c:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
  if (HuffTableAC != NULL)
 8005750:	2b00      	cmp	r3, #0
 8005752:	d039      	beq.n	80057c8 <JPEG_Set_HuffAC_Mem+0xa4>
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8005754:	a901      	add	r1, sp, #4
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff ff3e 	bl	80055d8 <JPEG_ACHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800575c:	2800      	cmp	r0, #0
 800575e:	d1ef      	bne.n	8005740 <JPEG_Set_HuffAC_Mem+0x1c>
    addressDef = address;
 8005760:	4623      	mov	r3, r4
    for (i = 0; i < 3UL; i++)
 8005762:	2200      	movs	r2, #0
 8005764:	e004      	b.n	8005770 <JPEG_Set_HuffAC_Mem+0x4c>
      *addressDef = 0x0FFF0FFF;
 8005766:	f06f 21f0 	mvn.w	r1, #4026593280	; 0xf000f000
 800576a:	f843 1b04 	str.w	r1, [r3], #4
    for (i = 0; i < 3UL; i++)
 800576e:	3201      	adds	r2, #1
 8005770:	2a02      	cmp	r2, #2
 8005772:	d9f8      	bls.n	8005766 <JPEG_Set_HuffAC_Mem+0x42>
    *addressDef = 0x0FD10FD0;
 8005774:	4a15      	ldr	r2, [pc, #84]	; (80057cc <JPEG_Set_HuffAC_Mem+0xa8>)
 8005776:	601a      	str	r2, [r3, #0]
    *addressDef = 0x0FD30FD2;
 8005778:	f102 1202 	add.w	r2, r2, #131074	; 0x20002
 800577c:	605a      	str	r2, [r3, #4]
    *addressDef = 0x0FD50FD4;
 800577e:	f102 1202 	add.w	r2, r2, #131074	; 0x20002
 8005782:	609a      	str	r2, [r3, #8]
    *addressDef = 0x0FD70FD6;
 8005784:	f102 1202 	add.w	r2, r2, #131074	; 0x20002
 8005788:	60da      	str	r2, [r3, #12]
    i = JPEG_AC_HUFF_TABLE_SIZE;
 800578a:	21a2      	movs	r1, #162	; 0xa2
    while (i > 1UL)
 800578c:	2901      	cmp	r1, #1
 800578e:	d9d7      	bls.n	8005740 <JPEG_Set_HuffAC_Mem+0x1c>
      i--;
 8005790:	1e4b      	subs	r3, r1, #1
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8005792:	ad01      	add	r5, sp, #4
 8005794:	5ceb      	ldrb	r3, [r5, r3]
 8005796:	021b      	lsls	r3, r3, #8
 8005798:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800579c:	f101 0227 	add.w	r2, r1, #39	; 0x27
 80057a0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80057a4:	7912      	ldrb	r2, [r2, #4]
 80057a6:	431a      	orrs	r2, r3
      i--;
 80057a8:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80057aa:	5c6b      	ldrb	r3, [r5, r1]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80057b2:	f101 0628 	add.w	r6, r1, #40	; 0x28
 80057b6:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 80057ba:	792d      	ldrb	r5, [r5, #4]
 80057bc:	432b      	orrs	r3, r5
      *address = lsb | (msb << 16);
 80057be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057c2:	f844 3d04 	str.w	r3, [r4, #-4]!
 80057c6:	e7e1      	b.n	800578c <JPEG_Set_HuffAC_Mem+0x68>
  return HAL_OK;
 80057c8:	2000      	movs	r0, #0
 80057ca:	e7b9      	b.n	8005740 <JPEG_Set_HuffAC_Mem+0x1c>
 80057cc:	0fd10fd0 	.word	0x0fd10fd0

080057d0 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 80057d0:	b470      	push	{r4, r5, r6}
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 80057d2:	6804      	ldr	r4, [r0, #0]
 80057d4:	f504 745b 	add.w	r4, r4, #876	; 0x36c
  index = 16;
 80057d8:	2210      	movs	r2, #16
  while (index > 3UL)
 80057da:	e010      	b.n	80057fe <JPEG_Set_Huff_DHTMem+0x2e>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80057dc:	1e53      	subs	r3, r2, #1
 80057de:	4996      	ldr	r1, [pc, #600]	; (8005a38 <JPEG_Set_Huff_DHTMem+0x268>)
 80057e0:	5ccd      	ldrb	r5, [r1, r3]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80057e2:	1e93      	subs	r3, r2, #2
 80057e4:	5ccb      	ldrb	r3, [r1, r3]
 80057e6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80057e8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80057ec:	1ed5      	subs	r5, r2, #3
 80057ee:	5d4d      	ldrb	r5, [r1, r5]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80057f0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 80057f4:	3a04      	subs	r2, #4
 80057f6:	5c89      	ldrb	r1, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80057f8:	430b      	orrs	r3, r1
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80057fa:	f844 3904 	str.w	r3, [r4], #-4
  while (index > 3UL)
 80057fe:	2a03      	cmp	r2, #3
 8005800:	d8ec      	bhi.n	80057dc <JPEG_Set_Huff_DHTMem+0xc>
    index -= 4UL;

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8005802:	6805      	ldr	r5, [r0, #0]
 8005804:	f505 755e 	add.w	r5, r5, #888	; 0x378
  index = 12;
 8005808:	220c      	movs	r2, #12
  while (index > 3UL)
 800580a:	2a03      	cmp	r2, #3
 800580c:	d915      	bls.n	800583a <JPEG_Set_Huff_DHTMem+0x6a>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800580e:	1e53      	subs	r3, r2, #1
 8005810:	4989      	ldr	r1, [pc, #548]	; (8005a38 <JPEG_Set_Huff_DHTMem+0x268>)
 8005812:	440b      	add	r3, r1
 8005814:	7c1e      	ldrb	r6, [r3, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005816:	1e94      	subs	r4, r2, #2
 8005818:	440c      	add	r4, r1
 800581a:	7c23      	ldrb	r3, [r4, #16]
 800581c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800581e:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005822:	1ed4      	subs	r4, r2, #3
 8005824:	440c      	add	r4, r1
 8005826:	7c24      	ldrb	r4, [r4, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005828:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800582c:	3a04      	subs	r2, #4
 800582e:	4411      	add	r1, r2
 8005830:	7c09      	ldrb	r1, [r1, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005832:	430b      	orrs	r3, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005834:	f845 3904 	str.w	r3, [r5], #-4
    address--;
    index -= 4UL;
 8005838:	e7e7      	b.n	800580a <JPEG_Set_Huff_DHTMem+0x3a>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800583a:	6805      	ldr	r5, [r0, #0]
 800583c:	f505 7562 	add.w	r5, r5, #904	; 0x388
  index = 16;
 8005840:	2210      	movs	r2, #16
  while (index > 3UL)
 8005842:	e014      	b.n	800586e <JPEG_Set_Huff_DHTMem+0x9e>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005844:	1e53      	subs	r3, r2, #1
 8005846:	497c      	ldr	r1, [pc, #496]	; (8005a38 <JPEG_Set_Huff_DHTMem+0x268>)
 8005848:	440b      	add	r3, r1
 800584a:	7f1e      	ldrb	r6, [r3, #28]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800584c:	1e94      	subs	r4, r2, #2
 800584e:	440c      	add	r4, r1
 8005850:	7f23      	ldrb	r3, [r4, #28]
 8005852:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005854:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005858:	1ed4      	subs	r4, r2, #3
 800585a:	440c      	add	r4, r1
 800585c:	7f24      	ldrb	r4, [r4, #28]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800585e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8005862:	3a04      	subs	r2, #4
 8005864:	4411      	add	r1, r2
 8005866:	7f09      	ldrb	r1, [r1, #28]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005868:	430b      	orrs	r3, r1
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800586a:	f845 3904 	str.w	r3, [r5], #-4
  while (index > 3UL)
 800586e:	2a03      	cmp	r2, #3
 8005870:	d8e8      	bhi.n	8005844 <JPEG_Set_Huff_DHTMem+0x74>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8005872:	6805      	ldr	r5, [r0, #0]
  value = *address & 0xFFFF0000U;
 8005874:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
 8005878:	4a70      	ldr	r2, [pc, #448]	; (8005a3c <JPEG_Set_Huff_DHTMem+0x26c>)
 800587a:	401a      	ands	r2, r3
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800587c:	f64f 23f9 	movw	r3, #64249	; 0xfaf9
 8005880:	4313      	orrs	r3, r2
  *address = value;
 8005882:	f8c5 342c 	str.w	r3, [r5, #1068]	; 0x42c

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8005886:	f505 6585 	add.w	r5, r5, #1064	; 0x428
  index = 160;
 800588a:	22a0      	movs	r2, #160	; 0xa0
  while (index > 3UL)
 800588c:	e018      	b.n	80058c0 <JPEG_Set_Huff_DHTMem+0xf0>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800588e:	1e53      	subs	r3, r2, #1
 8005890:	4969      	ldr	r1, [pc, #420]	; (8005a38 <JPEG_Set_Huff_DHTMem+0x268>)
 8005892:	440b      	add	r3, r1
 8005894:	f893 602c 	ldrb.w	r6, [r3, #44]	; 0x2c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005898:	1e94      	subs	r4, r2, #2
 800589a:	440c      	add	r4, r1
 800589c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80058a0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80058a2:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80058a6:	1ed4      	subs	r4, r2, #3
 80058a8:	440c      	add	r4, r1
 80058aa:	f894 402c 	ldrb.w	r4, [r4, #44]	; 0x2c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80058ae:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80058b2:	3a04      	subs	r2, #4
 80058b4:	4411      	add	r1, r2
 80058b6:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80058ba:	430b      	orrs	r3, r1
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80058bc:	f845 3904 	str.w	r3, [r5], #-4
  while (index > 3UL)
 80058c0:	2a03      	cmp	r2, #3
 80058c2:	d8e4      	bhi.n	800588e <JPEG_Set_Huff_DHTMem+0xbe>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80058c4:	6802      	ldr	r2, [r0, #0]
  value = *address & 0x0000FFFFU;
 80058c6:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
 80058ca:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 80058cc:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
 80058d0:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80058d4:	6805      	ldr	r5, [r0, #0]
  value = *address & 0xFFFF0000U;
 80058d6:	f8d5 243c 	ldr.w	r2, [r5, #1084]	; 0x43c
 80058da:	4b58      	ldr	r3, [pc, #352]	; (8005a3c <JPEG_Set_Huff_DHTMem+0x26c>)
 80058dc:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
  *address = value;
 80058de:	f8c5 343c 	str.w	r3, [r5, #1084]	; 0x43c

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 80058e2:	f505 6587 	add.w	r5, r5, #1080	; 0x438
  index = 12;
 80058e6:	220c      	movs	r2, #12
  while (index > 3UL)
 80058e8:	e018      	b.n	800591c <JPEG_Set_Huff_DHTMem+0x14c>
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80058ea:	1c53      	adds	r3, r2, #1
 80058ec:	4952      	ldr	r1, [pc, #328]	; (8005a38 <JPEG_Set_Huff_DHTMem+0x268>)
 80058ee:	440b      	add	r3, r1
 80058f0:	f893 40d0 	ldrb.w	r4, [r3, #208]	; 0xd0
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80058f4:	188b      	adds	r3, r1, r2
 80058f6:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 80058fa:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80058fc:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005900:	1e54      	subs	r4, r2, #1
 8005902:	440c      	add	r4, r1
 8005904:	f894 40d0 	ldrb.w	r4, [r4, #208]	; 0xd0
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8005908:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800590c:	1e94      	subs	r4, r2, #2
 800590e:	4421      	add	r1, r4
 8005910:	f891 10d0 	ldrb.w	r1, [r1, #208]	; 0xd0
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005914:	430b      	orrs	r3, r1
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005916:	f845 3904 	str.w	r3, [r5], #-4
    address--;
    index -= 4UL;
 800591a:	3a04      	subs	r2, #4
  while (index > 3UL)
 800591c:	2a03      	cmp	r2, #3
 800591e:	d8e4      	bhi.n	80058ea <JPEG_Set_Huff_DHTMem+0x11a>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8005920:	6802      	ldr	r2, [r0, #0]
  value = *address & 0x0000FFFFUL;
 8005922:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
 8005926:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8005928:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
                                                                         16);
  *address = value;
 800592c:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005930:	6804      	ldr	r4, [r0, #0]
  value = *address & 0xFFFF0000UL;
 8005932:	f8d4 3448 	ldr.w	r3, [r4, #1096]	; 0x448
 8005936:	4a41      	ldr	r2, [pc, #260]	; (8005a3c <JPEG_Set_Huff_DHTMem+0x26c>)
 8005938:	401a      	ands	r2, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800593a:	f640 330a 	movw	r3, #2826	; 0xb0a
 800593e:	4313      	orrs	r3, r2
  *address = value;
 8005940:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8005944:	f204 4444 	addw	r4, r4, #1092	; 0x444
  index = 8;
 8005948:	2208      	movs	r2, #8
  while (index > 3UL)
 800594a:	e018      	b.n	800597e <JPEG_Set_Huff_DHTMem+0x1ae>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800594c:	1c53      	adds	r3, r2, #1
 800594e:	493a      	ldr	r1, [pc, #232]	; (8005a38 <JPEG_Set_Huff_DHTMem+0x268>)
 8005950:	440b      	add	r3, r1
 8005952:	f893 50e0 	ldrb.w	r5, [r3, #224]	; 0xe0
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8005956:	188b      	adds	r3, r1, r2
 8005958:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800595c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800595e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005962:	1e55      	subs	r5, r2, #1
 8005964:	440d      	add	r5, r1
 8005966:	f895 50e0 	ldrb.w	r5, [r5, #224]	; 0xe0
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800596a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800596e:	1e95      	subs	r5, r2, #2
 8005970:	4429      	add	r1, r5
 8005972:	f891 10e0 	ldrb.w	r1, [r1, #224]	; 0xe0
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005976:	430b      	orrs	r3, r1
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005978:	f844 3904 	str.w	r3, [r4], #-4
    address--;
    index -= 4UL;
 800597c:	3a04      	subs	r2, #4
  while (index > 3UL)
 800597e:	2a03      	cmp	r2, #3
 8005980:	d8e4      	bhi.n	800594c <JPEG_Set_Huff_DHTMem+0x17c>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005982:	6802      	ldr	r2, [r0, #0]
  value = *address & 0x0000FFFFU;
 8005984:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
 8005988:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800598a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  *address = value;
 800598e:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8005992:	6805      	ldr	r5, [r0, #0]
  value = *address & 0xFFFF0000U;
 8005994:	f8d5 3458 	ldr.w	r3, [r5, #1112]	; 0x458
 8005998:	4a28      	ldr	r2, [pc, #160]	; (8005a3c <JPEG_Set_Huff_DHTMem+0x26c>)
 800599a:	401a      	ands	r2, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800599c:	f247 7302 	movw	r3, #30466	; 0x7702
 80059a0:	4313      	orrs	r3, r2
  *address = value;
 80059a2:	f8c5 3458 	str.w	r3, [r5, #1112]	; 0x458

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 80059a6:	f205 4554 	addw	r5, r5, #1108	; 0x454
  index = 12;
 80059aa:	220c      	movs	r2, #12
  while (index > 3UL)
 80059ac:	e018      	b.n	80059e0 <JPEG_Set_Huff_DHTMem+0x210>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80059ae:	1c53      	adds	r3, r2, #1
 80059b0:	4921      	ldr	r1, [pc, #132]	; (8005a38 <JPEG_Set_Huff_DHTMem+0x268>)
 80059b2:	440b      	add	r3, r1
 80059b4:	f893 40ec 	ldrb.w	r4, [r3, #236]	; 0xec
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80059b8:	188b      	adds	r3, r1, r2
 80059ba:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 80059be:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80059c0:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80059c4:	1e54      	subs	r4, r2, #1
 80059c6:	440c      	add	r4, r1
 80059c8:	f894 40ec 	ldrb.w	r4, [r4, #236]	; 0xec
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80059cc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 80059d0:	1e94      	subs	r4, r2, #2
 80059d2:	4421      	add	r1, r4
 80059d4:	f891 10ec 	ldrb.w	r1, [r1, #236]	; 0xec
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80059d8:	430b      	orrs	r3, r1
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80059da:	f845 3904 	str.w	r3, [r5], #-4
    address--;
    index -= 4UL;
 80059de:	3a04      	subs	r2, #4
  while (index > 3UL)
 80059e0:	2a03      	cmp	r2, #3
 80059e2:	d8e4      	bhi.n	80059ae <JPEG_Set_Huff_DHTMem+0x1de>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80059e4:	6802      	ldr	r2, [r0, #0]
  value = *address & 0x0000FFFFUL;
 80059e6:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 80059ea:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80059ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
                                                                         16);
  *address = value;
 80059f0:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 80059f4:	6804      	ldr	r4, [r0, #0]
 80059f6:	f504 649f 	add.w	r4, r4, #1272	; 0x4f8
  index = 160;
 80059fa:	22a0      	movs	r2, #160	; 0xa0
  while (index > 3UL)
 80059fc:	e018      	b.n	8005a30 <JPEG_Set_Huff_DHTMem+0x260>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80059fe:	1c53      	adds	r3, r2, #1
 8005a00:	490d      	ldr	r1, [pc, #52]	; (8005a38 <JPEG_Set_Huff_DHTMem+0x268>)
 8005a02:	440b      	add	r3, r1
 8005a04:	f893 00fc 	ldrb.w	r0, [r3, #252]	; 0xfc
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8005a08:	188b      	adds	r3, r1, r2
 8005a0a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8005a0e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005a10:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005a14:	1e50      	subs	r0, r2, #1
 8005a16:	4408      	add	r0, r1
 8005a18:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8005a1c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8005a20:	1e90      	subs	r0, r2, #2
 8005a22:	4401      	add	r1, r0
 8005a24:	f891 10fc 	ldrb.w	r1, [r1, #252]	; 0xfc
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005a28:	430b      	orrs	r3, r1
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005a2a:	f844 3904 	str.w	r3, [r4], #-4
    address--;
    index -= 4UL;
 8005a2e:	3a04      	subs	r2, #4
  while (index > 3UL)
 8005a30:	2a03      	cmp	r2, #3
 8005a32:	d8e4      	bhi.n	80059fe <JPEG_Set_Huff_DHTMem+0x22e>
  }

}
 8005a34:	bc70      	pop	{r4, r5, r6}
 8005a36:	4770      	bx	lr
 8005a38:	080109ec 	.word	0x080109ec
 8005a3c:	ffff0000 	.word	0xffff0000

08005a40 <JPEG_Set_HuffEnc_Mem>:
{
 8005a40:	b510      	push	{r4, lr}
 8005a42:	4604      	mov	r4, r0
  JPEG_Set_Huff_DHTMem(hjpeg);
 8005a44:	f7ff fec4 	bl	80057d0 <JPEG_Set_Huff_DHTMem>
                              (hjpeg->Instance->HUFFENC_AC0));
 8005a48:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8005a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a4e:	4912      	ldr	r1, [pc, #72]	; (8005a98 <JPEG_Set_HuffEnc_Mem+0x58>)
 8005a50:	4620      	mov	r0, r4
 8005a52:	f7ff fe67 	bl	8005724 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8005a56:	4603      	mov	r3, r0
 8005a58:	b108      	cbz	r0, 8005a5e <JPEG_Set_HuffEnc_Mem+0x1e>
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	bd10      	pop	{r4, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
 8005a5e:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8005a60:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
 8005a64:	490d      	ldr	r1, [pc, #52]	; (8005a9c <JPEG_Set_HuffEnc_Mem+0x5c>)
 8005a66:	4620      	mov	r0, r4
 8005a68:	f7ff fe5c 	bl	8005724 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d1f3      	bne.n	8005a5a <JPEG_Set_HuffEnc_Mem+0x1a>
                              hjpeg->Instance->HUFFENC_DC0);
 8005a72:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8005a74:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8005a78:	4909      	ldr	r1, [pc, #36]	; (8005aa0 <JPEG_Set_HuffEnc_Mem+0x60>)
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f7ff fe0a 	bl	8005694 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8005a80:	4603      	mov	r3, r0
 8005a82:	2800      	cmp	r0, #0
 8005a84:	d1e9      	bne.n	8005a5a <JPEG_Set_HuffEnc_Mem+0x1a>
                              hjpeg->Instance->HUFFENC_DC1);
 8005a86:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8005a88:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
 8005a8c:	4905      	ldr	r1, [pc, #20]	; (8005aa4 <JPEG_Set_HuffEnc_Mem+0x64>)
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f7ff fe00 	bl	8005694 <JPEG_Set_HuffDC_Mem>
 8005a94:	4603      	mov	r3, r0
  if (error != HAL_OK)
 8005a96:	e7e0      	b.n	8005a5a <JPEG_Set_HuffEnc_Mem+0x1a>
 8005a98:	08010a08 	.word	0x08010a08
 8005a9c:	08010ad8 	.word	0x08010ad8
 8005aa0:	080109ec 	.word	0x080109ec
 8005aa4:	08010abc 	.word	0x08010abc

08005aa8 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8005aa8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005aaa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005aae:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005ab0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d032      	beq.n	8005b20 <JPEG_Init_Process+0x78>
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8005aba:	6802      	ldr	r2, [r0, #0]
 8005abc:	6853      	ldr	r3, [r2, #4]
 8005abe:	f023 0308 	bic.w	r3, r3, #8
 8005ac2:	6053      	str	r3, [r2, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005ac4:	6802      	ldr	r2, [r0, #0]
 8005ac6:	6813      	ldr	r3, [r2, #0]
 8005ac8:	f023 0301 	bic.w	r3, r3, #1
 8005acc:	6013      	str	r3, [r2, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005ace:	6802      	ldr	r2, [r0, #0]
 8005ad0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005ad2:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8005ad6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8005ad8:	6802      	ldr	r2, [r0, #0]
 8005ada:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005adc:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8005ae0:	6313      	str	r3, [r2, #48]	; 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8005ae2:	6802      	ldr	r2, [r0, #0]
 8005ae4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005ae6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005aea:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8005aec:	6802      	ldr	r2, [r0, #0]
 8005aee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005af4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8005af6:	6802      	ldr	r2, [r0, #0]
 8005af8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005afa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005afe:	6393      	str	r3, [r2, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8005b00:	6802      	ldr	r2, [r0, #0]
 8005b02:	6813      	ldr	r3, [r2, #0]
 8005b04:	f043 0301 	orr.w	r3, r3, #1
 8005b08:	6013      	str	r3, [r2, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8005b0a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005b0c:	f003 030c 	and.w	r3, r3, #12
 8005b10:	2b08      	cmp	r3, #8
 8005b12:	d00b      	beq.n	8005b2c <JPEG_Init_Process+0x84>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8005b14:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005b16:	f003 030c 	and.w	r3, r3, #12
 8005b1a:	2b0c      	cmp	r3, #12
 8005b1c:	d00c      	beq.n	8005b38 <JPEG_Init_Process+0x90>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b1e:	4770      	bx	lr
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8005b20:	6802      	ldr	r2, [r0, #0]
 8005b22:	6853      	ldr	r3, [r2, #4]
 8005b24:	f043 0308 	orr.w	r3, r3, #8
 8005b28:	6053      	str	r3, [r2, #4]
 8005b2a:	e7cb      	b.n	8005ac4 <JPEG_Init_Process+0x1c>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8005b2c:	6802      	ldr	r2, [r0, #0]
 8005b2e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005b30:	f043 036e 	orr.w	r3, r3, #110	; 0x6e
 8005b34:	6313      	str	r3, [r2, #48]	; 0x30
 8005b36:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8005b38:	6802      	ldr	r2, [r0, #0]
 8005b3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005b3c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005b40:	6313      	str	r3, [r2, #48]	; 0x30
}
 8005b42:	e7ec      	b.n	8005b1e <JPEG_Init_Process+0x76>

08005b44 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8005b44:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8005b46:	6807      	ldr	r7, [r0, #0]
 8005b48:	3750      	adds	r7, #80	; 0x50

  i = 0;
 8005b4a:	2500      	movs	r5, #0
  uint32_t quality = 0;
 8005b4c:	462c      	mov	r4, r5
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8005b4e:	e027      	b.n	8005ba0 <JPEG_GetQuality+0x5c>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
      if (quantVal == 1UL)
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8005b50:	3464      	adds	r4, #100	; 0x64
    for (j = 0; j < 4UL; j++)
 8005b52:	3101      	adds	r1, #1
 8005b54:	2903      	cmp	r1, #3
 8005b56:	d821      	bhi.n	8005b9c <JPEG_GetQuality+0x58>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8005b58:	00cb      	lsls	r3, r1, #3
 8005b5a:	fa26 f303 	lsr.w	r3, r6, r3
 8005b5e:	b2db      	uxtb	r3, r3
      if (quantVal == 1UL)
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d0f5      	beq.n	8005b50 <JPEG_GetQuality+0xc>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8005b64:	2264      	movs	r2, #100	; 0x64
 8005b66:	fb02 f303 	mul.w	r3, r2, r3
 8005b6a:	eb05 0e01 	add.w	lr, r5, r1
 8005b6e:	4a10      	ldr	r2, [pc, #64]	; (8005bb0 <JPEG_GetQuality+0x6c>)
 8005b70:	eb02 0c0e 	add.w	ip, r2, lr
 8005b74:	f89c c1a0 	ldrb.w	ip, [ip, #416]	; 0x1a0
 8005b78:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005b7a:	f812 200c 	ldrb.w	r2, [r2, ip]
 8005b7e:	fbb3 f3f2 	udiv	r3, r3, r2

        if (scale <= 100UL)
 8005b82:	2b64      	cmp	r3, #100	; 0x64
 8005b84:	d804      	bhi.n	8005b90 <JPEG_GetQuality+0x4c>
        {
          quality += (200UL - scale) / 2UL;
 8005b86:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8005b8a:	eb04 0453 	add.w	r4, r4, r3, lsr #1
 8005b8e:	e7e0      	b.n	8005b52 <JPEG_GetQuality+0xe>
        }
        else
        {
          quality += 5000UL / scale;
 8005b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b98:	441c      	add	r4, r3
 8005b9a:	e7da      	b.n	8005b52 <JPEG_GetQuality+0xe>
        }
      }
    }

    i += 4UL;
 8005b9c:	3504      	adds	r5, #4
    tableAddress ++;
 8005b9e:	3704      	adds	r7, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8005ba0:	2d3c      	cmp	r5, #60	; 0x3c
 8005ba2:	d802      	bhi.n	8005baa <JPEG_GetQuality+0x66>
    quantRow = *tableAddress;
 8005ba4:	683e      	ldr	r6, [r7, #0]
    for (j = 0; j < 4UL; j++)
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	e7d4      	b.n	8005b54 <JPEG_GetQuality+0x10>
  }

  return (quality / 64UL);
}
 8005baa:	09a0      	lsrs	r0, r4, #6
 8005bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	080109ec 	.word	0x080109ec

08005bb4 <HAL_JPEG_MspInit>:
}
 8005bb4:	4770      	bx	lr
	...

08005bb8 <HAL_JPEG_Init>:
  if (hjpeg == NULL)
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d04f      	beq.n	8005c5c <HAL_JPEG_Init+0xa4>
{
 8005bbc:	b510      	push	{r4, lr}
 8005bbe:	4604      	mov	r4, r0
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8005bc0:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d041      	beq.n	8005c4c <HAL_JPEG_Init+0x94>
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8005bc8:	2302      	movs	r3, #2
 8005bca:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
 8005bce:	6822      	ldr	r2, [r4, #0]
 8005bd0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005bd8:	6822      	ldr	r2, [r4, #0]
 8005bda:	6813      	ldr	r3, [r2, #0]
 8005bdc:	f023 0301 	bic.w	r3, r3, #1
 8005be0:	6013      	str	r3, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005be2:	6822      	ldr	r2, [r4, #0]
 8005be4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005be6:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8005bea:	6313      	str	r3, [r2, #48]	; 0x30
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8005bec:	6822      	ldr	r2, [r4, #0]
 8005bee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005bf0:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8005bf4:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8005bf6:	6822      	ldr	r2, [r4, #0]
 8005bf8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005bfa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005bfe:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8005c00:	6822      	ldr	r2, [r4, #0]
 8005c02:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c08:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8005c0a:	6822      	ldr	r2, [r4, #0]
 8005c0c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005c0e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c12:	6393      	str	r3, [r2, #56]	; 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8005c14:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <HAL_JPEG_Init+0xa8>)
 8005c16:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 8005c1a:	63e2      	str	r2, [r4, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8005c1c:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8005c20:	6423      	str	r3, [r4, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	6463      	str	r3, [r4, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 8005c26:	64a3      	str	r3, [r4, #72]	; 0x48
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f7ff ff09 	bl	8005a40 <JPEG_Set_HuffEnc_Mem>
 8005c2e:	b990      	cbnz	r0, 8005c56 <HAL_JPEG_Init+0x9e>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8005c30:	6822      	ldr	r2, [r4, #0]
 8005c32:	6853      	ldr	r3, [r2, #4]
 8005c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c38:	6053      	str	r3, [r2, #4]
  hjpeg->JpegInCount = 0;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	6223      	str	r3, [r4, #32]
  hjpeg->JpegOutCount = 0;
 8005c3e:	6263      	str	r3, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8005c40:	2201      	movs	r2, #1
 8005c42:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8005c46:	6523      	str	r3, [r4, #80]	; 0x50
  hjpeg->Context = 0;
 8005c48:	6563      	str	r3, [r4, #84]	; 0x54
}
 8005c4a:	bd10      	pop	{r4, pc}
    hjpeg->Lock = HAL_UNLOCKED;
 8005c4c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8005c50:	f7ff ffb0 	bl	8005bb4 <HAL_JPEG_MspInit>
 8005c54:	e7b8      	b.n	8005bc8 <HAL_JPEG_Init+0x10>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8005c56:	2001      	movs	r0, #1
 8005c58:	6520      	str	r0, [r4, #80]	; 0x50
    return HAL_ERROR;
 8005c5a:	e7f6      	b.n	8005c4a <HAL_JPEG_Init+0x92>
    return HAL_ERROR;
 8005c5c:	2001      	movs	r0, #1
}
 8005c5e:	4770      	bx	lr
 8005c60:	080109ec 	.word	0x080109ec

08005c64 <HAL_JPEG_GetInfo>:
{
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8005c66:	460c      	mov	r4, r1
 8005c68:	fab1 f181 	clz	r1, r1
 8005c6c:	0949      	lsrs	r1, r1, #5
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	bf08      	it	eq
 8005c72:	2101      	moveq	r1, #1
 8005c74:	2900      	cmp	r1, #0
 8005c76:	d15a      	bne.n	8005d2e <HAL_JPEG_GetInfo+0xca>
 8005c78:	4603      	mov	r3, r0
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8005c7a:	6801      	ldr	r1, [r0, #0]
 8005c7c:	684a      	ldr	r2, [r1, #4]
 8005c7e:	f002 0203 	and.w	r2, r2, #3
 8005c82:	2a02      	cmp	r2, #2
 8005c84:	d006      	beq.n	8005c94 <HAL_JPEG_GetInfo+0x30>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8005c86:	684a      	ldr	r2, [r1, #4]
 8005c88:	f012 0f03 	tst.w	r2, #3
 8005c8c:	d12a      	bne.n	8005ce4 <HAL_JPEG_GetInfo+0x80>
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8005c8e:	2200      	movs	r2, #0
 8005c90:	6022      	str	r2, [r4, #0]
 8005c92:	e001      	b.n	8005c98 <HAL_JPEG_GetInfo+0x34>
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8005c94:	2210      	movs	r2, #16
 8005c96:	6022      	str	r2, [r4, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	6852      	ldr	r2, [r2, #4]
 8005c9c:	0c12      	lsrs	r2, r2, #16
 8005c9e:	60a2      	str	r2, [r4, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68d2      	ldr	r2, [r2, #12]
 8005ca4:	0c12      	lsrs	r2, r2, #16
 8005ca6:	60e2      	str	r2, [r4, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8005ca8:	6822      	ldr	r2, [r4, #0]
 8005caa:	2a30      	cmp	r2, #48	; 0x30
 8005cac:	bf18      	it	ne
 8005cae:	2a10      	cmpne	r2, #16
 8005cb0:	d135      	bne.n	8005d1e <HAL_JPEG_GetInfo+0xba>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8005cb2:	6819      	ldr	r1, [r3, #0]
 8005cb4:	690a      	ldr	r2, [r1, #16]
 8005cb6:	0915      	lsrs	r5, r2, #4
 8005cb8:	f3c2 1203 	ubfx	r2, r2, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8005cbc:	6948      	ldr	r0, [r1, #20]
 8005cbe:	0907      	lsrs	r7, r0, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8005cc0:	6989      	ldr	r1, [r1, #24]
 8005cc2:	f3c1 1103 	ubfx	r1, r1, #4, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8005cc6:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 8005cca:	bf0c      	ite	eq
 8005ccc:	2001      	moveq	r0, #1
 8005cce:	2000      	movne	r0, #0
 8005cd0:	2a01      	cmp	r2, #1
 8005cd2:	bf14      	ite	ne
 8005cd4:	2600      	movne	r6, #0
 8005cd6:	f000 0601 	andeq.w	r6, r0, #1
 8005cda:	b15e      	cbz	r6, 8005cf4 <HAL_JPEG_GetInfo+0x90>
 8005cdc:	b951      	cbnz	r1, 8005cf4 <HAL_JPEG_GetInfo+0x90>
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8005cde:	2202      	movs	r2, #2
 8005ce0:	6062      	str	r2, [r4, #4]
 8005ce2:	e01e      	b.n	8005d22 <HAL_JPEG_GetInfo+0xbe>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8005ce4:	684a      	ldr	r2, [r1, #4]
 8005ce6:	f002 0203 	and.w	r2, r2, #3
 8005cea:	2a03      	cmp	r2, #3
 8005cec:	d121      	bne.n	8005d32 <HAL_JPEG_GetInfo+0xce>
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8005cee:	2230      	movs	r2, #48	; 0x30
 8005cf0:	6022      	str	r2, [r4, #0]
 8005cf2:	e7d1      	b.n	8005c98 <HAL_JPEG_GetInfo+0x34>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8005cf4:	433d      	orrs	r5, r7
 8005cf6:	f015 0f0f 	tst.w	r5, #15
 8005cfa:	d103      	bne.n	8005d04 <HAL_JPEG_GetInfo+0xa0>
 8005cfc:	b911      	cbnz	r1, 8005d04 <HAL_JPEG_GetInfo+0xa0>
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8005cfe:	2200      	movs	r2, #0
 8005d00:	6062      	str	r2, [r4, #4]
 8005d02:	e00e      	b.n	8005d22 <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8005d04:	2a03      	cmp	r2, #3
 8005d06:	bf14      	ite	ne
 8005d08:	2200      	movne	r2, #0
 8005d0a:	f000 0201 	andeq.w	r2, r0, #1
 8005d0e:	b11a      	cbz	r2, 8005d18 <HAL_JPEG_GetInfo+0xb4>
 8005d10:	b911      	cbnz	r1, 8005d18 <HAL_JPEG_GetInfo+0xb4>
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8005d12:	2201      	movs	r2, #1
 8005d14:	6062      	str	r2, [r4, #4]
 8005d16:	e004      	b.n	8005d22 <HAL_JPEG_GetInfo+0xbe>
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8005d18:	2200      	movs	r2, #0
 8005d1a:	6062      	str	r2, [r4, #4]
 8005d1c:	e001      	b.n	8005d22 <HAL_JPEG_GetInfo+0xbe>
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8005d1e:	2200      	movs	r2, #0
 8005d20:	6062      	str	r2, [r4, #4]
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff ff0e 	bl	8005b44 <JPEG_GetQuality>
 8005d28:	6120      	str	r0, [r4, #16]
  return HAL_OK;
 8005d2a:	2000      	movs	r0, #0
}
 8005d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005d2e:	2001      	movs	r0, #1
 8005d30:	e7fc      	b.n	8005d2c <HAL_JPEG_GetInfo+0xc8>
    return HAL_ERROR;
 8005d32:	2001      	movs	r0, #1
 8005d34:	e7fa      	b.n	8005d2c <HAL_JPEG_GetInfo+0xc8>

08005d36 <HAL_JPEG_Decode_IT>:
{
 8005d36:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8005d38:	460d      	mov	r5, r1
 8005d3a:	fab1 f181 	clz	r1, r1
 8005d3e:	0949      	lsrs	r1, r1, #5
 8005d40:	2800      	cmp	r0, #0
 8005d42:	bf08      	it	eq
 8005d44:	2101      	moveq	r1, #1
 8005d46:	bb61      	cbnz	r1, 8005da2 <HAL_JPEG_Decode_IT+0x6c>
 8005d48:	b36b      	cbz	r3, 8005da6 <HAL_JPEG_Decode_IT+0x70>
  __HAL_LOCK(hjpeg);
 8005d4a:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 8005d4e:	2901      	cmp	r1, #1
 8005d50:	d02b      	beq.n	8005daa <HAL_JPEG_Decode_IT+0x74>
 8005d52:	2101      	movs	r1, #1
 8005d54:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8005d58:	f890 104d 	ldrb.w	r1, [r0, #77]	; 0x4d
 8005d5c:	b2c9      	uxtb	r1, r1
 8005d5e:	2901      	cmp	r1, #1
 8005d60:	d004      	beq.n	8005d6c <HAL_JPEG_Decode_IT+0x36>
    __HAL_UNLOCK(hjpeg);
 8005d62:	2300      	movs	r3, #0
 8005d64:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    return HAL_BUSY;
 8005d68:	2002      	movs	r0, #2
 8005d6a:	e01b      	b.n	8005da4 <HAL_JPEG_Decode_IT+0x6e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8005d6c:	2104      	movs	r1, #4
 8005d6e:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8005d72:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8005d74:	f021 010f 	bic.w	r1, r1, #15
 8005d78:	6541      	str	r1, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_IT);
 8005d7a:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8005d7c:	f041 010a 	orr.w	r1, r1, #10
 8005d80:	6541      	str	r1, [r0, #84]	; 0x54
    hjpeg->pJpegInBuffPtr = pDataIn;
 8005d82:	6185      	str	r5, [r0, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8005d84:	61c3      	str	r3, [r0, #28]
    hjpeg->InDataLength = InDataLength - (InDataLength % 4UL);    /*In Data length must be multiple of 4 Bytes (1 word)*/
 8005d86:	f022 0203 	bic.w	r2, r2, #3
 8005d8a:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength - (OutDataLength % 4UL); /*Out Data length must be multiple of 4 Bytes (1 word)*/
 8005d8c:	9b04      	ldr	r3, [sp, #16]
 8005d8e:	f023 0303 	bic.w	r3, r3, #3
 8005d92:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->JpegInCount = 0;
 8005d94:	2500      	movs	r5, #0
 8005d96:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
 8005d98:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
 8005d9a:	f7ff fe85 	bl	8005aa8 <JPEG_Init_Process>
  return HAL_OK;
 8005d9e:	4628      	mov	r0, r5
 8005da0:	e000      	b.n	8005da4 <HAL_JPEG_Decode_IT+0x6e>
    return HAL_ERROR;
 8005da2:	2001      	movs	r0, #1
}
 8005da4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005da6:	2001      	movs	r0, #1
 8005da8:	e7fc      	b.n	8005da4 <HAL_JPEG_Decode_IT+0x6e>
  __HAL_LOCK(hjpeg);
 8005daa:	2002      	movs	r0, #2
 8005dac:	e7fa      	b.n	8005da4 <HAL_JPEG_Decode_IT+0x6e>

08005dae <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8005dae:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005db0:	f003 030c 	and.w	r3, r3, #12
 8005db4:	2b0c      	cmp	r3, #12
 8005db6:	d006      	beq.n	8005dc6 <HAL_JPEG_Pause+0x18>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8005db8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005dba:	f003 030c 	and.w	r3, r3, #12
 8005dbe:	2b08      	cmp	r3, #8
 8005dc0:	d01b      	beq.n	8005dfa <HAL_JPEG_Pause+0x4c>
}
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8005dc6:	f011 0301 	ands.w	r3, r1, #1
 8005dca:	d005      	beq.n	8005dd8 <HAL_JPEG_Pause+0x2a>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8005dcc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005dce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005dd2:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 8005dd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8005dd8:	f011 0f02 	tst.w	r1, #2
 8005ddc:	d005      	beq.n	8005dea <HAL_JPEG_Pause+0x3c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8005dde:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005de4:	6542      	str	r2, [r0, #84]	; 0x54
      mask |= JPEG_DMA_ODMA;
 8005de6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    JPEG_DISABLE_DMA(hjpeg, mask);
 8005dea:	6801      	ldr	r1, [r0, #0]
 8005dec:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005dee:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005df2:	ea22 0303 	bic.w	r3, r2, r3
 8005df6:	630b      	str	r3, [r1, #48]	; 0x30
 8005df8:	e7e3      	b.n	8005dc2 <HAL_JPEG_Pause+0x14>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8005dfa:	f011 0201 	ands.w	r2, r1, #1
 8005dfe:	d004      	beq.n	8005e0a <HAL_JPEG_Pause+0x5c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8005e00:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005e02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e06:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8005e08:	2206      	movs	r2, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8005e0a:	f011 0f02 	tst.w	r1, #2
 8005e0e:	d005      	beq.n	8005e1c <HAL_JPEG_Pause+0x6e>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8005e10:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005e12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005e16:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8005e18:	f042 0228 	orr.w	r2, r2, #40	; 0x28
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8005e1c:	6801      	ldr	r1, [r0, #0]
 8005e1e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8005e20:	ea23 0302 	bic.w	r3, r3, r2
 8005e24:	630b      	str	r3, [r1, #48]	; 0x30
 8005e26:	e7cc      	b.n	8005dc2 <HAL_JPEG_Pause+0x14>

08005e28 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8005e28:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8005e2a:	6282      	str	r2, [r0, #40]	; 0x28
}
 8005e2c:	4770      	bx	lr

08005e2e <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8005e2e:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8005e30:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 8005e32:	4770      	bx	lr

08005e34 <HAL_JPEG_EncodeCpltCallback>:
}
 8005e34:	4770      	bx	lr

08005e36 <JPEG_ReadInputData>:
{
 8005e36:	b570      	push	{r4, r5, r6, lr}
 8005e38:	4604      	mov	r4, r0
 8005e3a:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8005e3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e3e:	b103      	cbz	r3, 8005e42 <JPEG_ReadInputData+0xc>
 8005e40:	b991      	cbnz	r1, 8005e68 <JPEG_ReadInputData+0x32>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8005e42:	2101      	movs	r1, #1
 8005e44:	4620      	mov	r0, r4
 8005e46:	f7ff ffb2 	bl	8005dae <HAL_JPEG_Pause>
  uint32_t nbBytes = 0, nBwords, index, Dataword, inputCount;
 8005e4a:	2200      	movs	r2, #0
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nbBytes > 0UL))
 8005e4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e4e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8005e52:	d15d      	bne.n	8005f10 <JPEG_ReadInputData+0xda>
 8005e54:	2a00      	cmp	r2, #0
 8005e56:	d05b      	beq.n	8005f10 <JPEG_ReadInputData+0xda>
    nBwords = nbBytes / 4UL;
 8005e58:	0896      	lsrs	r6, r2, #2
    if (nBwords >= nbRequestWords)
 8005e5a:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 8005e5e:	d91b      	bls.n	8005e98 <JPEG_ReadInputData+0x62>
      if (nBwords > 0UL)
 8005e60:	2a03      	cmp	r2, #3
 8005e62:	d82f      	bhi.n	8005ec4 <JPEG_ReadInputData+0x8e>
        Dataword = 0;
 8005e64:	461d      	mov	r5, r3
 8005e66:	e04f      	b.n	8005f08 <JPEG_ReadInputData+0xd2>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8005e68:	6a02      	ldr	r2, [r0, #32]
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d902      	bls.n	8005e74 <JPEG_ReadInputData+0x3e>
    nbBytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8005e6e:	6a02      	ldr	r2, [r0, #32]
 8005e70:	1a9a      	subs	r2, r3, r2
 8005e72:	e7eb      	b.n	8005e4c <JPEG_ReadInputData+0x16>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8005e74:	6a02      	ldr	r2, [r0, #32]
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d001      	beq.n	8005e7e <JPEG_ReadInputData+0x48>
  uint32_t nbBytes = 0, nBwords, index, Dataword, inputCount;
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	e7e6      	b.n	8005e4c <JPEG_ReadInputData+0x16>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8005e7e:	6a01      	ldr	r1, [r0, #32]
 8005e80:	f005 fcf4 	bl	800b86c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8005e84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d902      	bls.n	8005e90 <JPEG_ReadInputData+0x5a>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8005e8a:	f023 0303 	bic.w	r3, r3, #3
 8005e8e:	62a3      	str	r3, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 8005e90:	2300      	movs	r3, #0
 8005e92:	6223      	str	r3, [r4, #32]
    nbBytes = hjpeg->InDataLength;
 8005e94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005e96:	e7d9      	b.n	8005e4c <JPEG_ReadInputData+0x16>
      for (index = 0; index < nbRequestWords; index++)
 8005e98:	42ab      	cmp	r3, r5
 8005e9a:	d239      	bcs.n	8005f10 <JPEG_ReadInputData+0xda>
        inputCount = hjpeg->JpegInCount;
 8005e9c:	6a21      	ldr	r1, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8005e9e:	69a0      	ldr	r0, [r4, #24]
 8005ea0:	5c42      	ldrb	r2, [r0, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8005ea2:	4408      	add	r0, r1
 8005ea4:	7841      	ldrb	r1, [r0, #1]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8005ea6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 8005eaa:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8005eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 3UL])) << 24));
 8005eb0:	78c0      	ldrb	r0, [r0, #3]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8005eb2:	6821      	ldr	r1, [r4, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 8005eb4:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8005eb8:	640a      	str	r2, [r1, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
 8005eba:	6a22      	ldr	r2, [r4, #32]
 8005ebc:	3204      	adds	r2, #4
 8005ebe:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	e7e9      	b.n	8005e98 <JPEG_ReadInputData+0x62>
        for (index = 0; index < nBwords; index++)
 8005ec4:	42b3      	cmp	r3, r6
 8005ec6:	d223      	bcs.n	8005f10 <JPEG_ReadInputData+0xda>
          inputCount = hjpeg->JpegInCount;
 8005ec8:	6a20      	ldr	r0, [r4, #32]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8005eca:	69a1      	ldr	r1, [r4, #24]
 8005ecc:	5c0a      	ldrb	r2, [r1, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8005ece:	4401      	add	r1, r0
 8005ed0:	7848      	ldrb	r0, [r1, #1]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8005ed2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 8005ed6:	7888      	ldrb	r0, [r1, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8005ed8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 3UL])) << 24));
 8005edc:	78c8      	ldrb	r0, [r1, #3]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8005ede:	6821      	ldr	r1, [r4, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 8005ee0:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8005ee4:	640a      	str	r2, [r1, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 8005ee6:	6a22      	ldr	r2, [r4, #32]
 8005ee8:	3204      	adds	r2, #4
 8005eea:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nBwords; index++)
 8005eec:	3301      	adds	r3, #1
 8005eee:	e7e9      	b.n	8005ec4 <JPEG_ReadInputData+0x8e>
          Dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8005ef0:	69a0      	ldr	r0, [r4, #24]
 8005ef2:	6a21      	ldr	r1, [r4, #32]
 8005ef4:	5c41      	ldrb	r1, [r0, r1]
 8005ef6:	f003 0003 	and.w	r0, r3, #3
 8005efa:	00c0      	lsls	r0, r0, #3
 8005efc:	4081      	lsls	r1, r0
 8005efe:	430d      	orrs	r5, r1
          hjpeg->JpegInCount++;
 8005f00:	6a21      	ldr	r1, [r4, #32]
 8005f02:	3101      	adds	r1, #1
 8005f04:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nbBytes; index++)
 8005f06:	3301      	adds	r3, #1
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d8f1      	bhi.n	8005ef0 <JPEG_ReadInputData+0xba>
        hjpeg->Instance->DIR = Dataword;
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	641d      	str	r5, [r3, #64]	; 0x40
}
 8005f10:	bd70      	pop	{r4, r5, r6, pc}

08005f12 <JPEG_StoreOutputData>:
{
 8005f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f14:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8005f16:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8005f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f1a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005f1e:	4298      	cmp	r0, r3
 8005f20:	d223      	bcs.n	8005f6a <JPEG_StoreOutputData+0x58>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8005f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f24:	4298      	cmp	r0, r3
 8005f26:	d942      	bls.n	8005fae <JPEG_StoreOutputData+0x9c>
    nBwords = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8005f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f2a:	1ac0      	subs	r0, r0, r3
 8005f2c:	0880      	lsrs	r0, r0, #2
    for (index = 0; index < nBwords; index++)
 8005f2e:	2100      	movs	r1, #0
 8005f30:	4281      	cmp	r1, r0
 8005f32:	d245      	bcs.n	8005fc0 <JPEG_StoreOutputData+0xae>
      dataword = hjpeg->Instance->DOR;
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005f38:	69e5      	ldr	r5, [r4, #28]
 8005f3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f3c:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8005f3e:	69e5      	ldr	r5, [r4, #28]
 8005f40:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f42:	3201      	adds	r2, #1
 8005f44:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8005f48:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005f4a:	69e5      	ldr	r5, [r4, #28]
 8005f4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f4e:	3202      	adds	r2, #2
 8005f50:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8005f54:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005f56:	69e5      	ldr	r5, [r4, #28]
 8005f58:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f5a:	3203      	adds	r2, #3
 8005f5c:	0e1b      	lsrs	r3, r3, #24
 8005f5e:	54ab      	strb	r3, [r5, r2]
      hjpeg->JpegOutCount += 4UL;
 8005f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f62:	3304      	adds	r3, #4
 8005f64:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nBwords; index++)
 8005f66:	3101      	adds	r1, #1
 8005f68:	e7e2      	b.n	8005f30 <JPEG_StoreOutputData+0x1e>
    for (index = 0; index < nbOutputWords; index++)
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	4288      	cmp	r0, r1
 8005f6e:	d21a      	bcs.n	8005fa6 <JPEG_StoreOutputData+0x94>
      dataword = hjpeg->Instance->DOR;
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005f74:	69e5      	ldr	r5, [r4, #28]
 8005f76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f78:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8005f7a:	69e5      	ldr	r5, [r4, #28]
 8005f7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f7e:	3201      	adds	r2, #1
 8005f80:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8005f84:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005f86:	69e5      	ldr	r5, [r4, #28]
 8005f88:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f8a:	3202      	adds	r2, #2
 8005f8c:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8005f90:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005f92:	69e5      	ldr	r5, [r4, #28]
 8005f94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f96:	3203      	adds	r2, #3
 8005f98:	0e1b      	lsrs	r3, r3, #24
 8005f9a:	54ab      	strb	r3, [r5, r2]
      hjpeg->JpegOutCount += 4UL;
 8005f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	e7e2      	b.n	8005f6c <JPEG_StoreOutputData+0x5a>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8005fa6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d000      	beq.n	8005fb0 <JPEG_StoreOutputData+0x9e>
}
 8005fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005fb0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005fb2:	69e1      	ldr	r1, [r4, #28]
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f005 fc6b 	bl	800b890 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	6263      	str	r3, [r4, #36]	; 0x24
 8005fbe:	e7f6      	b.n	8005fae <JPEG_StoreOutputData+0x9c>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8005fc0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fc4:	429f      	cmp	r7, r3
 8005fc6:	d006      	beq.n	8005fd6 <JPEG_StoreOutputData+0xc4>
      nbBytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8005fc8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005fca:	eba7 0c05 	sub.w	ip, r7, r5
      dataword = hjpeg->Instance->DOR;
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	6c5e      	ldr	r6, [r3, #68]	; 0x44
      for (index = 0; index < nbBytes; index++)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	e013      	b.n	8005ffe <JPEG_StoreOutputData+0xec>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005fd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005fd8:	69e1      	ldr	r1, [r4, #28]
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f005 fc58 	bl	800b890 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	6263      	str	r3, [r4, #36]	; 0x24
 8005fe4:	e7e3      	b.n	8005fae <JPEG_StoreOutputData+0x9c>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8005fe6:	f002 0303 	and.w	r3, r2, #3
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	fa26 f303 	lsr.w	r3, r6, r3
 8005ff0:	69e0      	ldr	r0, [r4, #28]
 8005ff2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005ff4:	5443      	strb	r3, [r0, r1]
        hjpeg->JpegOutCount++;
 8005ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nbBytes; index++)
 8005ffc:	3201      	adds	r2, #1
 8005ffe:	4562      	cmp	r2, ip
 8006000:	d3f1      	bcc.n	8005fe6 <JPEG_StoreOutputData+0xd4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006002:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006004:	69e1      	ldr	r1, [r4, #28]
 8006006:	4620      	mov	r0, r4
 8006008:	f005 fc42 	bl	800b890 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	6263      	str	r3, [r4, #36]	; 0x24
      nbBytes = 4UL - nbBytes;
 8006010:	1bed      	subs	r5, r5, r7
 8006012:	3504      	adds	r5, #4
      for (index = nbBytes; index < 4UL; index++)
 8006014:	e009      	b.n	800602a <JPEG_StoreOutputData+0x118>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8006016:	00eb      	lsls	r3, r5, #3
 8006018:	fa26 f303 	lsr.w	r3, r6, r3
 800601c:	69e1      	ldr	r1, [r4, #28]
 800601e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006020:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
 8006022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006024:	3301      	adds	r3, #1
 8006026:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nbBytes; index < 4UL; index++)
 8006028:	3501      	adds	r5, #1
 800602a:	2d03      	cmp	r5, #3
 800602c:	d9f3      	bls.n	8006016 <JPEG_StoreOutputData+0x104>
 800602e:	e7be      	b.n	8005fae <JPEG_StoreOutputData+0x9c>

08006030 <JPEG_Process>:
{
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006034:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006036:	f003 0303 	and.w	r3, r3, #3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d021      	beq.n	8006082 <JPEG_Process+0x52>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800603e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006040:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006044:	d108      	bne.n	8006058 <JPEG_Process+0x28>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800604a:	f012 0f02 	tst.w	r2, #2
 800604e:	d132      	bne.n	80060b6 <JPEG_Process+0x86>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8006050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006052:	f013 0f04 	tst.w	r3, #4
 8006056:	d133      	bne.n	80060c0 <JPEG_Process+0x90>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8006058:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800605a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800605e:	d108      	bne.n	8006072 <JPEG_Process+0x42>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006064:	f012 0f08 	tst.w	r2, #8
 8006068:	d12f      	bne.n	80060ca <JPEG_Process+0x9a>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800606a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606c:	f013 0f10 	tst.w	r3, #16
 8006070:	d130      	bne.n	80060d4 <JPEG_Process+0xa4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8006072:	6822      	ldr	r2, [r4, #0]
 8006074:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8006076:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800607a:	2b20      	cmp	r3, #32
 800607c:	d02f      	beq.n	80060de <JPEG_Process+0xae>
  return JPEG_PROCESS_ONGOING;
 800607e:	2000      	movs	r0, #0
}
 8006080:	bd38      	pop	{r3, r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8006082:	6803      	ldr	r3, [r0, #0]
 8006084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006086:	f013 0f40 	tst.w	r3, #64	; 0x40
 800608a:	d0d8      	beq.n	800603e <JPEG_Process+0xe>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800608c:	1d05      	adds	r5, r0, #4
 800608e:	4629      	mov	r1, r5
 8006090:	f7ff fde8 	bl	8005c64 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8006094:	2300      	movs	r3, #0
 8006096:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8006098:	4629      	mov	r1, r5
 800609a:	4620      	mov	r0, r4
 800609c:	f005 fc0a 	bl	800b8b4 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80060a0:	6822      	ldr	r2, [r4, #0]
 80060a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80060a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060a8:	6313      	str	r3, [r2, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80060aa:	6822      	ldr	r2, [r4, #0]
 80060ac:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80060ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060b2:	6393      	str	r3, [r2, #56]	; 0x38
 80060b4:	e7c3      	b.n	800603e <JPEG_Process+0xe>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80060b6:	2104      	movs	r1, #4
 80060b8:	4620      	mov	r0, r4
 80060ba:	f7ff febc 	bl	8005e36 <JPEG_ReadInputData>
 80060be:	e7cb      	b.n	8006058 <JPEG_Process+0x28>
      JPEG_ReadInputData(hjpeg, 1);
 80060c0:	2101      	movs	r1, #1
 80060c2:	4620      	mov	r0, r4
 80060c4:	f7ff feb7 	bl	8005e36 <JPEG_ReadInputData>
 80060c8:	e7c6      	b.n	8006058 <JPEG_Process+0x28>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80060ca:	2104      	movs	r1, #4
 80060cc:	4620      	mov	r0, r4
 80060ce:	f7ff ff20 	bl	8005f12 <JPEG_StoreOutputData>
 80060d2:	e7ce      	b.n	8006072 <JPEG_Process+0x42>
      JPEG_StoreOutputData(hjpeg, 1);
 80060d4:	2101      	movs	r1, #1
 80060d6:	4620      	mov	r0, r4
 80060d8:	f7ff ff1b 	bl	8005f12 <JPEG_StoreOutputData>
 80060dc:	e7c9      	b.n	8006072 <JPEG_Process+0x42>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80060de:	6813      	ldr	r3, [r2, #0]
 80060e0:	f023 0301 	bic.w	r3, r3, #1
 80060e4:	6013      	str	r3, [r2, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80060e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80060e8:	f003 030c 	and.w	r3, r3, #12
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d01a      	beq.n	8006126 <JPEG_Process+0xf6>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80060f0:	6822      	ldr	r2, [r4, #0]
 80060f2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80060f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80060f8:	6393      	str	r3, [r2, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
 80060fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060fc:	b9cb      	cbnz	r3, 8006132 <JPEG_Process+0x102>
    tmpContext = hjpeg->Context;
 80060fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8006100:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006102:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
 8006106:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 8006108:	2200      	movs	r2, #0
 800610a:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800610e:	2201      	movs	r2, #1
 8006110:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006114:	f003 0303 	and.w	r3, r3, #3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d012      	beq.n	8006142 <JPEG_Process+0x112>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800611c:	4620      	mov	r0, r4
 800611e:	f7ff fe89 	bl	8005e34 <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
 8006122:	2001      	movs	r0, #1
 8006124:	e7ac      	b.n	8006080 <JPEG_Process+0x50>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8006126:	6822      	ldr	r2, [r4, #0]
 8006128:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800612a:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 800612e:	6313      	str	r3, [r2, #48]	; 0x30
 8006130:	e7de      	b.n	80060f0 <JPEG_Process+0xc0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006132:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006134:	69e1      	ldr	r1, [r4, #28]
 8006136:	4620      	mov	r0, r4
 8006138:	f005 fbaa 	bl	800b890 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	6263      	str	r3, [r4, #36]	; 0x24
 8006140:	e7dd      	b.n	80060fe <JPEG_Process+0xce>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8006142:	4620      	mov	r0, r4
 8006144:	f005 fbb0 	bl	800b8a8 <HAL_JPEG_DecodeCpltCallback>
 8006148:	e7eb      	b.n	8006122 <JPEG_Process+0xf2>

0800614a <JPEG_DMA_PollResidualData>:
{
 800614a:	b538      	push	{r3, r4, r5, lr}
 800614c:	4604      	mov	r4, r0
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800614e:	2510      	movs	r5, #16
 8006150:	e007      	b.n	8006162 <JPEG_DMA_PollResidualData+0x18>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006152:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006154:	69e1      	ldr	r1, [r4, #28]
 8006156:	4620      	mov	r0, r4
 8006158:	f005 fb9a 	bl	800b890 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	6263      	str	r3, [r4, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8006160:	3d01      	subs	r5, #1
 8006162:	b32d      	cbz	r5, 80061b0 <JPEG_DMA_PollResidualData+0x66>
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8006164:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006166:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800616a:	d1f9      	bne.n	8006160 <JPEG_DMA_PollResidualData+0x16>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006170:	f012 0f10 	tst.w	r2, #16
 8006174:	d0f4      	beq.n	8006160 <JPEG_DMA_PollResidualData+0x16>
        dataOut = hjpeg->Instance->DOR;
 8006176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8006178:	69e1      	ldr	r1, [r4, #28]
 800617a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800617c:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800617e:	69e1      	ldr	r1, [r4, #28]
 8006180:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006182:	3201      	adds	r2, #1
 8006184:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8006188:	5488      	strb	r0, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800618a:	69e1      	ldr	r1, [r4, #28]
 800618c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800618e:	3202      	adds	r2, #2
 8006190:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8006194:	5488      	strb	r0, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8006196:	69e1      	ldr	r1, [r4, #28]
 8006198:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800619a:	3203      	adds	r2, #3
 800619c:	0e1b      	lsrs	r3, r3, #24
 800619e:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount += 4UL;
 80061a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061a2:	3304      	adds	r3, #4
 80061a4:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80061a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80061a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d1d8      	bne.n	8006160 <JPEG_DMA_PollResidualData+0x16>
 80061ae:	e7d0      	b.n	8006152 <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
 80061b0:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061b6:	f012 0f10 	tst.w	r2, #16
 80061ba:	d002      	beq.n	80061c2 <JPEG_DMA_PollResidualData+0x78>
 80061bc:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 80061c0:	d117      	bne.n	80061f2 <JPEG_DMA_PollResidualData+0xa8>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	f022 0201 	bic.w	r2, r2, #1
 80061c8:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 80061ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061cc:	b993      	cbnz	r3, 80061f4 <JPEG_DMA_PollResidualData+0xaa>
    tmpContext = hjpeg->Context;
 80061ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80061d0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80061d2:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
 80061d6:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 80061d8:	2200      	movs	r2, #0
 80061da:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80061de:	2201      	movs	r2, #1
 80061e0:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80061e4:	f003 0303 	and.w	r3, r3, #3
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d00b      	beq.n	8006204 <JPEG_DMA_PollResidualData+0xba>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80061ec:	4620      	mov	r0, r4
 80061ee:	f7ff fe21 	bl	8005e34 <HAL_JPEG_EncodeCpltCallback>
}
 80061f2:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80061f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80061f6:	69e1      	ldr	r1, [r4, #28]
 80061f8:	4620      	mov	r0, r4
 80061fa:	f005 fb49 	bl	800b890 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80061fe:	2300      	movs	r3, #0
 8006200:	6263      	str	r3, [r4, #36]	; 0x24
 8006202:	e7e4      	b.n	80061ce <JPEG_DMA_PollResidualData+0x84>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8006204:	4620      	mov	r0, r4
 8006206:	f005 fb4f 	bl	800b8a8 <HAL_JPEG_DecodeCpltCallback>
 800620a:	e7f2      	b.n	80061f2 <JPEG_DMA_PollResidualData+0xa8>

0800620c <JPEG_DMA_EndProcess>:
{
 800620c:	b510      	push	{r4, lr}
 800620e:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 8006210:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006212:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6859      	ldr	r1, [r3, #4]
 8006218:	4b21      	ldr	r3, [pc, #132]	; (80062a0 <JPEG_DMA_EndProcess+0x94>)
 800621a:	ea03 0381 	and.w	r3, r3, r1, lsl #2
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	6243      	str	r3, [r0, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8006222:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006224:	429a      	cmp	r2, r3
 8006226:	d01e      	beq.n	8006266 <JPEG_DMA_EndProcess+0x5a>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622c:	f013 0f10 	tst.w	r3, #16
 8006230:	d12c      	bne.n	800628c <JPEG_DMA_EndProcess+0x80>
    if (hjpeg->JpegOutCount > 0UL)
 8006232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006234:	b9f3      	cbnz	r3, 8006274 <JPEG_DMA_EndProcess+0x68>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006236:	6822      	ldr	r2, [r4, #0]
 8006238:	6813      	ldr	r3, [r2, #0]
 800623a:	f023 0301 	bic.w	r3, r3, #1
 800623e:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8006240:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8006242:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006244:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
 8006248:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 800624a:	2200      	movs	r2, #0
 800624c:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8006250:	2201      	movs	r2, #1
 8006252:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d012      	beq.n	8006284 <JPEG_DMA_EndProcess+0x78>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800625e:	4620      	mov	r0, r4
 8006260:	f7ff fde8 	bl	8005e34 <HAL_JPEG_EncodeCpltCallback>
 8006264:	e016      	b.n	8006294 <JPEG_DMA_EndProcess+0x88>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006266:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006268:	69c1      	ldr	r1, [r0, #28]
 800626a:	f005 fb11 	bl	800b890 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	6263      	str	r3, [r4, #36]	; 0x24
 8006272:	e7d9      	b.n	8006228 <JPEG_DMA_EndProcess+0x1c>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006274:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006276:	69e1      	ldr	r1, [r4, #28]
 8006278:	4620      	mov	r0, r4
 800627a:	f005 fb09 	bl	800b890 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800627e:	2300      	movs	r3, #0
 8006280:	6263      	str	r3, [r4, #36]	; 0x24
 8006282:	e7d8      	b.n	8006236 <JPEG_DMA_EndProcess+0x2a>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8006284:	4620      	mov	r0, r4
 8006286:	f005 fb0f 	bl	800b8a8 <HAL_JPEG_DecodeCpltCallback>
 800628a:	e003      	b.n	8006294 <JPEG_DMA_EndProcess+0x88>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800628c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800628e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006292:	d000      	beq.n	8006296 <JPEG_DMA_EndProcess+0x8a>
}
 8006294:	bd10      	pop	{r4, pc}
    JPEG_DMA_PollResidualData(hjpeg);
 8006296:	4620      	mov	r0, r4
 8006298:	f7ff ff57 	bl	800614a <JPEG_DMA_PollResidualData>
}
 800629c:	e7fa      	b.n	8006294 <JPEG_DMA_EndProcess+0x88>
 800629e:	bf00      	nop
 80062a0:	0003fffc 	.word	0x0003fffc

080062a4 <JPEG_DMA_ContinueProcess>:
{
 80062a4:	b538      	push	{r3, r4, r5, lr}
 80062a6:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80062a8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d02b      	beq.n	800630a <JPEG_DMA_ContinueProcess+0x66>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b6:	f012 0f20 	tst.w	r2, #32
 80062ba:	d025      	beq.n	8006308 <JPEG_DMA_ContinueProcess+0x64>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 80062bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062be:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80062c2:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80062c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80062c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ca:	6563      	str	r3, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80062cc:	6822      	ldr	r2, [r4, #0]
 80062ce:	6813      	ldr	r3, [r2, #0]
 80062d0:	f023 0301 	bic.w	r3, r3, #1
 80062d4:	6013      	str	r3, [r2, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80062d6:	6822      	ldr	r2, [r4, #0]
 80062d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80062da:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 80062de:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80062e0:	6822      	ldr	r2, [r4, #0]
 80062e2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80062e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80062e8:	6393      	str	r3, [r2, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 80062ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80062ec:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d023      	beq.n	800633e <JPEG_DMA_ContinueProcess+0x9a>
    if (hjpeg->hdmaout->State == HAL_DMA_STATE_BUSY)
 80062f6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80062f8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d020      	beq.n	8006344 <JPEG_DMA_ContinueProcess+0xa0>
      JPEG_DMA_EndProcess(hjpeg);
 8006302:	4620      	mov	r0, r4
 8006304:	f7ff ff82 	bl	800620c <JPEG_DMA_EndProcess>
}
 8006308:	bd38      	pop	{r3, r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800630a:	6803      	ldr	r3, [r0, #0]
 800630c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800630e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006312:	d0ce      	beq.n	80062b2 <JPEG_DMA_ContinueProcess+0xe>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8006314:	1d05      	adds	r5, r0, #4
 8006316:	4629      	mov	r1, r5
 8006318:	f7ff fca4 	bl	8005c64 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800631c:	2300      	movs	r3, #0
 800631e:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8006320:	4629      	mov	r1, r5
 8006322:	4620      	mov	r0, r4
 8006324:	f005 fac6 	bl	800b8b4 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8006328:	6822      	ldr	r2, [r4, #0]
 800632a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800632c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006330:	6313      	str	r3, [r2, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8006332:	6822      	ldr	r2, [r4, #0]
 8006334:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800633a:	6393      	str	r3, [r2, #56]	; 0x38
 800633c:	e7b9      	b.n	80062b2 <JPEG_DMA_ContinueProcess+0xe>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmain);
 800633e:	f7fd fea6 	bl	800408e <HAL_DMA_Abort_IT>
 8006342:	e7d8      	b.n	80062f6 <JPEG_DMA_ContinueProcess+0x52>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmaout);
 8006344:	f7fd fea3 	bl	800408e <HAL_DMA_Abort_IT>
 8006348:	e7de      	b.n	8006308 <JPEG_DMA_ContinueProcess+0x64>

0800634a <HAL_JPEG_IRQHandler>:
{
 800634a:	b508      	push	{r3, lr}
  switch (hjpeg->State)
 800634c:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 8006350:	3b03      	subs	r3, #3
 8006352:	2b01      	cmp	r3, #1
 8006354:	d900      	bls.n	8006358 <HAL_JPEG_IRQHandler+0xe>
}
 8006356:	bd08      	pop	{r3, pc}
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8006358:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800635a:	f003 030c 	and.w	r3, r3, #12
 800635e:	2b08      	cmp	r3, #8
 8006360:	d007      	beq.n	8006372 <HAL_JPEG_IRQHandler+0x28>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8006362:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006364:	f003 030c 	and.w	r3, r3, #12
 8006368:	2b0c      	cmp	r3, #12
 800636a:	d1f4      	bne.n	8006356 <HAL_JPEG_IRQHandler+0xc>
        JPEG_DMA_ContinueProcess(hjpeg);
 800636c:	f7ff ff9a 	bl	80062a4 <JPEG_DMA_ContinueProcess>
}
 8006370:	e7f1      	b.n	8006356 <HAL_JPEG_IRQHandler+0xc>
        (void) JPEG_Process(hjpeg);
 8006372:	f7ff fe5d 	bl	8006030 <JPEG_Process>
 8006376:	e7ee      	b.n	8006356 <HAL_JPEG_IRQHandler+0xc>

08006378 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006378:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800637a:	684e      	ldr	r6, [r1, #4]
 800637c:	6805      	ldr	r5, [r0, #0]
 800637e:	68eb      	ldr	r3, [r5, #12]
 8006380:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8006384:	441e      	add	r6, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006386:	01d4      	lsls	r4, r2, #7
 8006388:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 800638c:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8006390:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006394:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006398:	680b      	ldr	r3, [r1, #0]
 800639a:	6805      	ldr	r5, [r0, #0]
 800639c:	68ef      	ldr	r7, [r5, #12]
 800639e:	f3c7 470b 	ubfx	r7, r7, #16, #12
 80063a2:	443b      	add	r3, r7
 80063a4:	3301      	adds	r3, #1
 80063a6:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 80063aa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80063ae:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80063b2:	68ce      	ldr	r6, [r1, #12]
 80063b4:	6805      	ldr	r5, [r0, #0]
 80063b6:	68eb      	ldr	r3, [r5, #12]
 80063b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063bc:	441e      	add	r6, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80063be:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 80063c2:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80063c6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80063ca:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80063ce:	688b      	ldr	r3, [r1, #8]
 80063d0:	6805      	ldr	r5, [r0, #0]
 80063d2:	68ef      	ldr	r7, [r5, #12]
 80063d4:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80063d8:	443b      	add	r3, r7
 80063da:	3301      	adds	r3, #1
 80063dc:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 80063e0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80063e4:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80063e8:	6803      	ldr	r3, [r0, #0]
 80063ea:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80063ee:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
 80063f2:	f025 0507 	bic.w	r5, r5, #7
 80063f6:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80063fa:	6803      	ldr	r3, [r0, #0]
 80063fc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006400:	690d      	ldr	r5, [r1, #16]
 8006402:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006406:	f891 e031 	ldrb.w	lr, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800640a:	f891 c032 	ldrb.w	ip, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800640e:	698f      	ldr	r7, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006410:	6806      	ldr	r6, [r0, #0]
 8006412:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
 8006416:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
 800641a:	2500      	movs	r5, #0
 800641c:	f8c6 509c 	str.w	r5, [r6, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006420:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8006424:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8006428:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800642c:	6806      	ldr	r6, [r0, #0]
 800642e:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
 8006432:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8006436:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800643a:	6803      	ldr	r3, [r0, #0]
 800643c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006440:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8006444:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
 8006448:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800644c:	6803      	ldr	r3, [r0, #0]
 800644e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006452:	694e      	ldr	r6, [r1, #20]
 8006454:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006458:	6803      	ldr	r3, [r0, #0]
 800645a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800645e:	f8d3 70a0 	ldr.w	r7, [r3, #160]	; 0xa0
 8006462:	4e2e      	ldr	r6, [pc, #184]	; (800651c <LTDC_SetConfig+0x1a4>)
 8006464:	403e      	ands	r6, r7
 8006466:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800646a:	69ce      	ldr	r6, [r1, #28]
 800646c:	6a0f      	ldr	r7, [r1, #32]
 800646e:	6803      	ldr	r3, [r0, #0]
 8006470:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006474:	433e      	orrs	r6, r7
 8006476:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800647a:	6803      	ldr	r3, [r0, #0]
 800647c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006480:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
 8006484:	f8c3 50ac 	str.w	r5, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006488:	6803      	ldr	r3, [r0, #0]
 800648a:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 800648e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8006490:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006494:	690b      	ldr	r3, [r1, #16]
 8006496:	b16b      	cbz	r3, 80064b4 <LTDC_SetConfig+0x13c>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006498:	2b01      	cmp	r3, #1
 800649a:	d039      	beq.n	8006510 <LTDC_SetConfig+0x198>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800649c:	2b02      	cmp	r3, #2
 800649e:	bf18      	it	ne
 80064a0:	2b04      	cmpne	r3, #4
 80064a2:	d037      	beq.n	8006514 <LTDC_SetConfig+0x19c>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d037      	beq.n	8006518 <LTDC_SetConfig+0x1a0>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064a8:	2b07      	cmp	r3, #7
 80064aa:	d001      	beq.n	80064b0 <LTDC_SetConfig+0x138>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e002      	b.n	80064b6 <LTDC_SetConfig+0x13e>
    tmp = 2U;
 80064b0:	2302      	movs	r3, #2
 80064b2:	e000      	b.n	80064b6 <LTDC_SetConfig+0x13e>
    tmp = 4U;
 80064b4:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80064b6:	6802      	ldr	r2, [r0, #0]
 80064b8:	4422      	add	r2, r4
 80064ba:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
 80064be:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80064c2:	f8c2 50b0 	str.w	r5, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80064c6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80064c8:	fb03 f502 	mul.w	r5, r3, r2
 80064cc:	684a      	ldr	r2, [r1, #4]
 80064ce:	680e      	ldr	r6, [r1, #0]
 80064d0:	1b92      	subs	r2, r2, r6
 80064d2:	fb03 f302 	mul.w	r3, r3, r2
 80064d6:	3303      	adds	r3, #3
 80064d8:	6802      	ldr	r2, [r0, #0]
 80064da:	4422      	add	r2, r4
 80064dc:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80064e0:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80064e4:	6803      	ldr	r3, [r0, #0]
 80064e6:	4423      	add	r3, r4
 80064e8:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 80064ec:	4a0c      	ldr	r2, [pc, #48]	; (8006520 <LTDC_SetConfig+0x1a8>)
 80064ee:	402a      	ands	r2, r5
 80064f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80064f4:	6803      	ldr	r3, [r0, #0]
 80064f6:	4423      	add	r3, r4
 80064f8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80064fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80064fe:	6803      	ldr	r3, [r0, #0]
 8006500:	441c      	add	r4, r3
 8006502:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006506:	f043 0301 	orr.w	r3, r3, #1
 800650a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 800650e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 8006510:	2303      	movs	r3, #3
 8006512:	e7d0      	b.n	80064b6 <LTDC_SetConfig+0x13e>
    tmp = 2U;
 8006514:	2302      	movs	r3, #2
 8006516:	e7ce      	b.n	80064b6 <LTDC_SetConfig+0x13e>
 8006518:	2302      	movs	r3, #2
 800651a:	e7cc      	b.n	80064b6 <LTDC_SetConfig+0x13e>
 800651c:	fffff8f8 	.word	0xfffff8f8
 8006520:	fffff800 	.word	0xfffff800

08006524 <HAL_LTDC_MspInit>:
}
 8006524:	4770      	bx	lr
	...

08006528 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8006528:	2800      	cmp	r0, #0
 800652a:	d072      	beq.n	8006612 <HAL_LTDC_Init+0xea>
{
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006530:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d067      	beq.n	8006608 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006538:	2302      	movs	r3, #2
 800653a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800653e:	6822      	ldr	r2, [r4, #0]
 8006540:	6993      	ldr	r3, [r2, #24]
 8006542:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006546:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006548:	6821      	ldr	r1, [r4, #0]
 800654a:	698a      	ldr	r2, [r1, #24]
 800654c:	6863      	ldr	r3, [r4, #4]
 800654e:	68a0      	ldr	r0, [r4, #8]
 8006550:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006552:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006554:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006556:	6920      	ldr	r0, [r4, #16]
 8006558:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800655a:	4313      	orrs	r3, r2
 800655c:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800655e:	6821      	ldr	r1, [r4, #0]
 8006560:	688a      	ldr	r2, [r1, #8]
 8006562:	4b2d      	ldr	r3, [pc, #180]	; (8006618 <HAL_LTDC_Init+0xf0>)
 8006564:	401a      	ands	r2, r3
 8006566:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006568:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800656a:	6820      	ldr	r0, [r4, #0]
 800656c:	6882      	ldr	r2, [r0, #8]
 800656e:	69a1      	ldr	r1, [r4, #24]
 8006570:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8006574:	430a      	orrs	r2, r1
 8006576:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006578:	6821      	ldr	r1, [r4, #0]
 800657a:	68ca      	ldr	r2, [r1, #12]
 800657c:	401a      	ands	r2, r3
 800657e:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006580:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006582:	6820      	ldr	r0, [r4, #0]
 8006584:	68c2      	ldr	r2, [r0, #12]
 8006586:	6a21      	ldr	r1, [r4, #32]
 8006588:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800658c:	430a      	orrs	r2, r1
 800658e:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006590:	6821      	ldr	r1, [r4, #0]
 8006592:	690a      	ldr	r2, [r1, #16]
 8006594:	401a      	ands	r2, r3
 8006596:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006598:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800659a:	6820      	ldr	r0, [r4, #0]
 800659c:	6902      	ldr	r2, [r0, #16]
 800659e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80065a0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80065a4:	430a      	orrs	r2, r1
 80065a6:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80065a8:	6821      	ldr	r1, [r4, #0]
 80065aa:	694a      	ldr	r2, [r1, #20]
 80065ac:	4013      	ands	r3, r2
 80065ae:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80065b0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80065b2:	6821      	ldr	r1, [r4, #0]
 80065b4:	694b      	ldr	r3, [r1, #20]
 80065b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80065b8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80065bc:	4313      	orrs	r3, r2
 80065be:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80065c0:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80065c4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80065c8:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80065ca:	6821      	ldr	r1, [r4, #0]
 80065cc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80065ce:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80065d2:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80065d4:	6821      	ldr	r1, [r4, #0]
 80065d6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80065d8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80065dc:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80065e0:	4303      	orrs	r3, r0
 80065e2:	4313      	orrs	r3, r2
 80065e4:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80065e6:	6822      	ldr	r2, [r4, #0]
 80065e8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80065ea:	f043 0306 	orr.w	r3, r3, #6
 80065ee:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80065f0:	6822      	ldr	r2, [r4, #0]
 80065f2:	6993      	ldr	r3, [r2, #24]
 80065f4:	f043 0301 	orr.w	r3, r3, #1
 80065f8:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80065fa:	2000      	movs	r0, #0
 80065fc:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8006600:	2301      	movs	r3, #1
 8006602:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8006606:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8006608:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800660c:	f7ff ff8a 	bl	8006524 <HAL_LTDC_MspInit>
 8006610:	e792      	b.n	8006538 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8006612:	2001      	movs	r0, #1
}
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	f000f800 	.word	0xf000f800

0800661c <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 800661c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8006620:	2b01      	cmp	r3, #1
 8006622:	d027      	beq.n	8006674 <HAL_LTDC_ConfigLayer+0x58>
{
 8006624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006628:	4606      	mov	r6, r0
 800662a:	460f      	mov	r7, r1
 800662c:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800662e:	f04f 0801 	mov.w	r8, #1
 8006632:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006636:	2302      	movs	r3, #2
 8006638:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800663c:	2434      	movs	r4, #52	; 0x34
 800663e:	fb04 0402 	mla	r4, r4, r2, r0
 8006642:	3438      	adds	r4, #56	; 0x38
 8006644:	460d      	mov	r5, r1
 8006646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800664a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800664c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800664e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006652:	682b      	ldr	r3, [r5, #0]
 8006654:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006656:	4662      	mov	r2, ip
 8006658:	4639      	mov	r1, r7
 800665a:	4630      	mov	r0, r6
 800665c:	f7ff fe8c 	bl	8006378 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006660:	6833      	ldr	r3, [r6, #0]
 8006662:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006666:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800666a:	2000      	movs	r0, #0
 800666c:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8006670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8006674:	2002      	movs	r0, #2
}
 8006676:	4770      	bx	lr

08006678 <HAL_LTDCEx_StructInitFromVideoConfig>:

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8006678:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800667a:	b10b      	cbz	r3, 8006680 <HAL_LTDCEx_StructInitFromVideoConfig+0x8>
 800667c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006680:	60c3      	str	r3, [r0, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8006682:	6a0b      	ldr	r3, [r1, #32]
 8006684:	bb0b      	cbnz	r3, 80066ca <HAL_LTDCEx_StructInitFromVideoConfig+0x52>
 8006686:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800668a:	6083      	str	r3, [r0, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800668c:	69cb      	ldr	r3, [r1, #28]
 800668e:	b9f3      	cbnz	r3, 80066ce <HAL_LTDCEx_StructInitFromVideoConfig+0x56>
 8006690:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006694:	6043      	str	r3, [r0, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8006696:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006698:	3b01      	subs	r3, #1
 800669a:	6183      	str	r3, [r0, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 800669c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800669e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80066a0:	4413      	add	r3, r2
 80066a2:	3b01      	subs	r3, #1
 80066a4:	6203      	str	r3, [r0, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80066a6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80066a8:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80066aa:	4413      	add	r3, r2
 80066ac:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80066ae:	4413      	add	r3, r2
 80066b0:	3b01      	subs	r3, #1
 80066b2:	6283      	str	r3, [r0, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80066b4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80066b6:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80066b8:	4413      	add	r3, r2
 80066ba:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80066bc:	4413      	add	r3, r2
 80066be:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80066c0:	4413      	add	r3, r2
 80066c2:	3b01      	subs	r3, #1
 80066c4:	6303      	str	r3, [r0, #48]	; 0x30

  return HAL_OK;
}
 80066c6:	2000      	movs	r0, #0
 80066c8:	4770      	bx	lr
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	e7dd      	b.n	800668a <HAL_LTDCEx_StructInitFromVideoConfig+0x12>
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	e7e0      	b.n	8006694 <HAL_LTDCEx_StructInitFromVideoConfig+0x1c>
	...

080066d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80066d4:	b510      	push	{r4, lr}
 80066d6:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80066d8:	4b1b      	ldr	r3, [pc, #108]	; (8006748 <HAL_PWREx_EnableOverDrive+0x74>)
 80066da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80066e0:	641a      	str	r2, [r3, #64]	; 0x40
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e8:	9301      	str	r3, [sp, #4]
 80066ea:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80066ec:	4a17      	ldr	r2, [pc, #92]	; (800674c <HAL_PWREx_EnableOverDrive+0x78>)
 80066ee:	6813      	ldr	r3, [r2, #0]
 80066f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066f6:	f7fd fb07 	bl	8003d08 <HAL_GetTick>
 80066fa:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80066fc:	4b13      	ldr	r3, [pc, #76]	; (800674c <HAL_PWREx_EnableOverDrive+0x78>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006704:	d108      	bne.n	8006718 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006706:	f7fd faff 	bl	8003d08 <HAL_GetTick>
 800670a:	1b00      	subs	r0, r0, r4
 800670c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006710:	d9f4      	bls.n	80066fc <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8006712:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8006714:	b002      	add	sp, #8
 8006716:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006718:	4a0c      	ldr	r2, [pc, #48]	; (800674c <HAL_PWREx_EnableOverDrive+0x78>)
 800671a:	6813      	ldr	r3, [r2, #0]
 800671c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006720:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8006722:	f7fd faf1 	bl	8003d08 <HAL_GetTick>
 8006726:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006728:	4b08      	ldr	r3, [pc, #32]	; (800674c <HAL_PWREx_EnableOverDrive+0x78>)
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006730:	d107      	bne.n	8006742 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006732:	f7fd fae9 	bl	8003d08 <HAL_GetTick>
 8006736:	1b00      	subs	r0, r0, r4
 8006738:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800673c:	d9f4      	bls.n	8006728 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 800673e:	2003      	movs	r0, #3
 8006740:	e7e8      	b.n	8006714 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8006742:	2000      	movs	r0, #0
 8006744:	e7e6      	b.n	8006714 <HAL_PWREx_EnableOverDrive+0x40>
 8006746:	bf00      	nop
 8006748:	40023800 	.word	0x40023800
 800674c:	40007000 	.word	0x40007000

08006750 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006756:	6803      	ldr	r3, [r0, #0]
 8006758:	f013 0f01 	tst.w	r3, #1
 800675c:	d029      	beq.n	80067b2 <HAL_RCC_OscConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800675e:	4ba8      	ldr	r3, [pc, #672]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f003 030c 	and.w	r3, r3, #12
 8006766:	2b04      	cmp	r3, #4
 8006768:	d01a      	beq.n	80067a0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800676a:	4ba5      	ldr	r3, [pc, #660]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 030c 	and.w	r3, r3, #12
 8006772:	2b08      	cmp	r3, #8
 8006774:	d00f      	beq.n	8006796 <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006776:	6863      	ldr	r3, [r4, #4]
 8006778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800677c:	d040      	beq.n	8006800 <HAL_RCC_OscConfig+0xb0>
 800677e:	2b00      	cmp	r3, #0
 8006780:	d154      	bne.n	800682c <HAL_RCC_OscConfig+0xdc>
 8006782:	4b9f      	ldr	r3, [pc, #636]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	e039      	b.n	800680a <HAL_RCC_OscConfig+0xba>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006796:	4b9a      	ldr	r3, [pc, #616]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800679e:	d0ea      	beq.n	8006776 <HAL_RCC_OscConfig+0x26>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067a0:	4b97      	ldr	r3, [pc, #604]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80067a8:	d003      	beq.n	80067b2 <HAL_RCC_OscConfig+0x62>
 80067aa:	6863      	ldr	r3, [r4, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 81d1 	beq.w	8006b54 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	f013 0f02 	tst.w	r3, #2
 80067b8:	d07a      	beq.n	80068b0 <HAL_RCC_OscConfig+0x160>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80067ba:	4b91      	ldr	r3, [pc, #580]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f013 0f0c 	tst.w	r3, #12
 80067c2:	d05e      	beq.n	8006882 <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067c4:	4b8e      	ldr	r3, [pc, #568]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f003 030c 	and.w	r3, r3, #12
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d053      	beq.n	8006878 <HAL_RCC_OscConfig+0x128>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067d0:	68e3      	ldr	r3, [r4, #12]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 8096 	beq.w	8006904 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067d8:	4a89      	ldr	r2, [pc, #548]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 80067da:	6813      	ldr	r3, [r2, #0]
 80067dc:	f043 0301 	orr.w	r3, r3, #1
 80067e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e2:	f7fd fa91 	bl	8003d08 <HAL_GetTick>
 80067e6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e8:	4b85      	ldr	r3, [pc, #532]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f013 0f02 	tst.w	r3, #2
 80067f0:	d179      	bne.n	80068e6 <HAL_RCC_OscConfig+0x196>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067f2:	f7fd fa89 	bl	8003d08 <HAL_GetTick>
 80067f6:	1b40      	subs	r0, r0, r5
 80067f8:	2802      	cmp	r0, #2
 80067fa:	d9f5      	bls.n	80067e8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80067fc:	2003      	movs	r0, #3
 80067fe:	e1ae      	b.n	8006b5e <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006800:	4a7f      	ldr	r2, [pc, #508]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 8006802:	6813      	ldr	r3, [r2, #0]
 8006804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006808:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800680a:	6863      	ldr	r3, [r4, #4]
 800680c:	b32b      	cbz	r3, 800685a <HAL_RCC_OscConfig+0x10a>
        tickstart = HAL_GetTick();
 800680e:	f7fd fa7b 	bl	8003d08 <HAL_GetTick>
 8006812:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006814:	4b7a      	ldr	r3, [pc, #488]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800681c:	d1c9      	bne.n	80067b2 <HAL_RCC_OscConfig+0x62>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800681e:	f7fd fa73 	bl	8003d08 <HAL_GetTick>
 8006822:	1b40      	subs	r0, r0, r5
 8006824:	2864      	cmp	r0, #100	; 0x64
 8006826:	d9f5      	bls.n	8006814 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 8006828:	2003      	movs	r0, #3
 800682a:	e198      	b.n	8006b5e <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800682c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006830:	d009      	beq.n	8006846 <HAL_RCC_OscConfig+0xf6>
 8006832:	4b73      	ldr	r3, [pc, #460]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	e7e1      	b.n	800680a <HAL_RCC_OscConfig+0xba>
 8006846:	4b6e      	ldr	r3, [pc, #440]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	e7d7      	b.n	800680a <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 800685a:	f7fd fa55 	bl	8003d08 <HAL_GetTick>
 800685e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006860:	4b67      	ldr	r3, [pc, #412]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006868:	d0a3      	beq.n	80067b2 <HAL_RCC_OscConfig+0x62>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800686a:	f7fd fa4d 	bl	8003d08 <HAL_GetTick>
 800686e:	1b40      	subs	r0, r0, r5
 8006870:	2864      	cmp	r0, #100	; 0x64
 8006872:	d9f5      	bls.n	8006860 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8006874:	2003      	movs	r0, #3
 8006876:	e172      	b.n	8006b5e <HAL_RCC_OscConfig+0x40e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006878:	4b61      	ldr	r3, [pc, #388]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006880:	d1a6      	bne.n	80067d0 <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006882:	4b5f      	ldr	r3, [pc, #380]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f013 0f02 	tst.w	r3, #2
 800688a:	d003      	beq.n	8006894 <HAL_RCC_OscConfig+0x144>
 800688c:	68e3      	ldr	r3, [r4, #12]
 800688e:	2b01      	cmp	r3, #1
 8006890:	f040 8162 	bne.w	8006b58 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006894:	485a      	ldr	r0, [pc, #360]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 8006896:	6803      	ldr	r3, [r0, #0]
 8006898:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800689c:	6921      	ldr	r1, [r4, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800689e:	22f8      	movs	r2, #248	; 0xf8
 80068a0:	fa92 f2a2 	rbit	r2, r2
 80068a4:	fab2 f282 	clz	r2, r2
 80068a8:	fa01 f202 	lsl.w	r2, r1, r2
 80068ac:	4313      	orrs	r3, r2
 80068ae:	6003      	str	r3, [r0, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	f013 0f08 	tst.w	r3, #8
 80068b6:	d04d      	beq.n	8006954 <HAL_RCC_OscConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068b8:	6963      	ldr	r3, [r4, #20]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d036      	beq.n	800692c <HAL_RCC_OscConfig+0x1dc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068be:	4a50      	ldr	r2, [pc, #320]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 80068c0:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80068c2:	f043 0301 	orr.w	r3, r3, #1
 80068c6:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c8:	f7fd fa1e 	bl	8003d08 <HAL_GetTick>
 80068cc:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068ce:	4b4c      	ldr	r3, [pc, #304]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 80068d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d2:	f013 0f02 	tst.w	r3, #2
 80068d6:	d13d      	bne.n	8006954 <HAL_RCC_OscConfig+0x204>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068d8:	f7fd fa16 	bl	8003d08 <HAL_GetTick>
 80068dc:	1b40      	subs	r0, r0, r5
 80068de:	2802      	cmp	r0, #2
 80068e0:	d9f5      	bls.n	80068ce <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 80068e2:	2003      	movs	r0, #3
 80068e4:	e13b      	b.n	8006b5e <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068e6:	4846      	ldr	r0, [pc, #280]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 80068e8:	6803      	ldr	r3, [r0, #0]
 80068ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80068ee:	6921      	ldr	r1, [r4, #16]
 80068f0:	22f8      	movs	r2, #248	; 0xf8
 80068f2:	fa92 f2a2 	rbit	r2, r2
 80068f6:	fab2 f282 	clz	r2, r2
 80068fa:	fa01 f202 	lsl.w	r2, r1, r2
 80068fe:	4313      	orrs	r3, r2
 8006900:	6003      	str	r3, [r0, #0]
 8006902:	e7d5      	b.n	80068b0 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_DISABLE();
 8006904:	4a3e      	ldr	r2, [pc, #248]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 8006906:	6813      	ldr	r3, [r2, #0]
 8006908:	f023 0301 	bic.w	r3, r3, #1
 800690c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800690e:	f7fd f9fb 	bl	8003d08 <HAL_GetTick>
 8006912:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006914:	4b3a      	ldr	r3, [pc, #232]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f013 0f02 	tst.w	r3, #2
 800691c:	d0c8      	beq.n	80068b0 <HAL_RCC_OscConfig+0x160>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800691e:	f7fd f9f3 	bl	8003d08 <HAL_GetTick>
 8006922:	1b40      	subs	r0, r0, r5
 8006924:	2802      	cmp	r0, #2
 8006926:	d9f5      	bls.n	8006914 <HAL_RCC_OscConfig+0x1c4>
            return HAL_TIMEOUT;
 8006928:	2003      	movs	r0, #3
 800692a:	e118      	b.n	8006b5e <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800692c:	4a34      	ldr	r2, [pc, #208]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 800692e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8006930:	f023 0301 	bic.w	r3, r3, #1
 8006934:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006936:	f7fd f9e7 	bl	8003d08 <HAL_GetTick>
 800693a:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800693c:	4b30      	ldr	r3, [pc, #192]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 800693e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006940:	f013 0f02 	tst.w	r3, #2
 8006944:	d006      	beq.n	8006954 <HAL_RCC_OscConfig+0x204>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006946:	f7fd f9df 	bl	8003d08 <HAL_GetTick>
 800694a:	1b40      	subs	r0, r0, r5
 800694c:	2802      	cmp	r0, #2
 800694e:	d9f5      	bls.n	800693c <HAL_RCC_OscConfig+0x1ec>
        {
          return HAL_TIMEOUT;
 8006950:	2003      	movs	r0, #3
 8006952:	e104      	b.n	8006b5e <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	f013 0f04 	tst.w	r3, #4
 800695a:	d07d      	beq.n	8006a58 <HAL_RCC_OscConfig+0x308>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800695c:	4b28      	ldr	r3, [pc, #160]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006964:	d10b      	bne.n	800697e <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006966:	4b26      	ldr	r3, [pc, #152]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 8006968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800696a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800696e:	641a      	str	r2, [r3, #64]	; 0x40
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800697a:	2501      	movs	r5, #1
 800697c:	e000      	b.n	8006980 <HAL_RCC_OscConfig+0x230>
  FlagStatus pwrclkchanged = RESET;
 800697e:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006980:	4b20      	ldr	r3, [pc, #128]	; (8006a04 <HAL_RCC_OscConfig+0x2b4>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006988:	d00e      	beq.n	80069a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800698a:	68a3      	ldr	r3, [r4, #8]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d01f      	beq.n	80069d0 <HAL_RCC_OscConfig+0x280>
 8006990:	2b00      	cmp	r3, #0
 8006992:	d139      	bne.n	8006a08 <HAL_RCC_OscConfig+0x2b8>
 8006994:	4b1a      	ldr	r3, [pc, #104]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 8006996:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006998:	f022 0201 	bic.w	r2, r2, #1
 800699c:	671a      	str	r2, [r3, #112]	; 0x70
 800699e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069a0:	f022 0204 	bic.w	r2, r2, #4
 80069a4:	671a      	str	r2, [r3, #112]	; 0x70
 80069a6:	e018      	b.n	80069da <HAL_RCC_OscConfig+0x28a>
      PWR->CR1 |= PWR_CR1_DBP;
 80069a8:	4a16      	ldr	r2, [pc, #88]	; (8006a04 <HAL_RCC_OscConfig+0x2b4>)
 80069aa:	6813      	ldr	r3, [r2, #0]
 80069ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069b0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80069b2:	f7fd f9a9 	bl	8003d08 <HAL_GetTick>
 80069b6:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069b8:	4b12      	ldr	r3, [pc, #72]	; (8006a04 <HAL_RCC_OscConfig+0x2b4>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80069c0:	d1e3      	bne.n	800698a <HAL_RCC_OscConfig+0x23a>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80069c2:	f7fd f9a1 	bl	8003d08 <HAL_GetTick>
 80069c6:	1b80      	subs	r0, r0, r6
 80069c8:	2864      	cmp	r0, #100	; 0x64
 80069ca:	d9f5      	bls.n	80069b8 <HAL_RCC_OscConfig+0x268>
          return HAL_TIMEOUT;
 80069cc:	2003      	movs	r0, #3
 80069ce:	e0c6      	b.n	8006b5e <HAL_RCC_OscConfig+0x40e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069d0:	4a0b      	ldr	r2, [pc, #44]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 80069d2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80069d4:	f043 0301 	orr.w	r3, r3, #1
 80069d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069da:	68a3      	ldr	r3, [r4, #8]
 80069dc:	b353      	cbz	r3, 8006a34 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069de:	f7fd f993 	bl	8003d08 <HAL_GetTick>
 80069e2:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069e4:	4b06      	ldr	r3, [pc, #24]	; (8006a00 <HAL_RCC_OscConfig+0x2b0>)
 80069e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e8:	f013 0f02 	tst.w	r3, #2
 80069ec:	d133      	bne.n	8006a56 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069ee:	f7fd f98b 	bl	8003d08 <HAL_GetTick>
 80069f2:	1b80      	subs	r0, r0, r6
 80069f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80069f8:	4298      	cmp	r0, r3
 80069fa:	d9f3      	bls.n	80069e4 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 80069fc:	2003      	movs	r0, #3
 80069fe:	e0ae      	b.n	8006b5e <HAL_RCC_OscConfig+0x40e>
 8006a00:	40023800 	.word	0x40023800
 8006a04:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a08:	2b05      	cmp	r3, #5
 8006a0a:	d009      	beq.n	8006a20 <HAL_RCC_OscConfig+0x2d0>
 8006a0c:	4b56      	ldr	r3, [pc, #344]	; (8006b68 <HAL_RCC_OscConfig+0x418>)
 8006a0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a10:	f022 0201 	bic.w	r2, r2, #1
 8006a14:	671a      	str	r2, [r3, #112]	; 0x70
 8006a16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a18:	f022 0204 	bic.w	r2, r2, #4
 8006a1c:	671a      	str	r2, [r3, #112]	; 0x70
 8006a1e:	e7dc      	b.n	80069da <HAL_RCC_OscConfig+0x28a>
 8006a20:	4b51      	ldr	r3, [pc, #324]	; (8006b68 <HAL_RCC_OscConfig+0x418>)
 8006a22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a24:	f042 0204 	orr.w	r2, r2, #4
 8006a28:	671a      	str	r2, [r3, #112]	; 0x70
 8006a2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a2c:	f042 0201 	orr.w	r2, r2, #1
 8006a30:	671a      	str	r2, [r3, #112]	; 0x70
 8006a32:	e7d2      	b.n	80069da <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a34:	f7fd f968 	bl	8003d08 <HAL_GetTick>
 8006a38:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a3a:	4b4b      	ldr	r3, [pc, #300]	; (8006b68 <HAL_RCC_OscConfig+0x418>)
 8006a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3e:	f013 0f02 	tst.w	r3, #2
 8006a42:	d008      	beq.n	8006a56 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a44:	f7fd f960 	bl	8003d08 <HAL_GetTick>
 8006a48:	1b80      	subs	r0, r0, r6
 8006a4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a4e:	4298      	cmp	r0, r3
 8006a50:	d9f3      	bls.n	8006a3a <HAL_RCC_OscConfig+0x2ea>
        {
          return HAL_TIMEOUT;
 8006a52:	2003      	movs	r0, #3
 8006a54:	e083      	b.n	8006b5e <HAL_RCC_OscConfig+0x40e>
        }       
      }
    }
    
    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a56:	b9f5      	cbnz	r5, 8006a96 <HAL_RCC_OscConfig+0x346>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a58:	69a3      	ldr	r3, [r4, #24]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d07e      	beq.n	8006b5c <HAL_RCC_OscConfig+0x40c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a5e:	4a42      	ldr	r2, [pc, #264]	; (8006b68 <HAL_RCC_OscConfig+0x418>)
 8006a60:	6892      	ldr	r2, [r2, #8]
 8006a62:	f002 020c 	and.w	r2, r2, #12
 8006a66:	2a08      	cmp	r2, #8
 8006a68:	d07b      	beq.n	8006b62 <HAL_RCC_OscConfig+0x412>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d019      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x352>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a6e:	4a3e      	ldr	r2, [pc, #248]	; (8006b68 <HAL_RCC_OscConfig+0x418>)
 8006a70:	6813      	ldr	r3, [r2, #0]
 8006a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a76:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a78:	f7fd f946 	bl	8003d08 <HAL_GetTick>
 8006a7c:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a7e:	4b3a      	ldr	r3, [pc, #232]	; (8006b68 <HAL_RCC_OscConfig+0x418>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006a86:	d063      	beq.n	8006b50 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a88:	f7fd f93e 	bl	8003d08 <HAL_GetTick>
 8006a8c:	1b00      	subs	r0, r0, r4
 8006a8e:	2802      	cmp	r0, #2
 8006a90:	d9f5      	bls.n	8006a7e <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8006a92:	2003      	movs	r0, #3
 8006a94:	e063      	b.n	8006b5e <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a96:	4a34      	ldr	r2, [pc, #208]	; (8006b68 <HAL_RCC_OscConfig+0x418>)
 8006a98:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8006aa0:	e7da      	b.n	8006a58 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8006aa2:	4a31      	ldr	r2, [pc, #196]	; (8006b68 <HAL_RCC_OscConfig+0x418>)
 8006aa4:	6813      	ldr	r3, [r2, #0]
 8006aa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aaa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006aac:	f7fd f92c 	bl	8003d08 <HAL_GetTick>
 8006ab0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ab2:	4b2d      	ldr	r3, [pc, #180]	; (8006b68 <HAL_RCC_OscConfig+0x418>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006aba:	d006      	beq.n	8006aca <HAL_RCC_OscConfig+0x37a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006abc:	f7fd f924 	bl	8003d08 <HAL_GetTick>
 8006ac0:	1b40      	subs	r0, r0, r5
 8006ac2:	2802      	cmp	r0, #2
 8006ac4:	d9f5      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x362>
            return HAL_TIMEOUT;
 8006ac6:	2003      	movs	r0, #3
 8006ac8:	e049      	b.n	8006b5e <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006aca:	69e3      	ldr	r3, [r4, #28]
 8006acc:	6a22      	ldr	r2, [r4, #32]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006ad2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8006ad6:	fa92 f2a2 	rbit	r2, r2
 8006ada:	fab2 f282 	clz	r2, r2
 8006ade:	fa01 f202 	lsl.w	r2, r1, r2
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006ae6:	0852      	lsrs	r2, r2, #1
 8006ae8:	3a01      	subs	r2, #1
 8006aea:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8006aee:	fa91 f1a1 	rbit	r1, r1
 8006af2:	fab1 f181 	clz	r1, r1
 8006af6:	408a      	lsls	r2, r1
 8006af8:	4313      	orrs	r3, r2
 8006afa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006afc:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8006b00:	fa92 f2a2 	rbit	r2, r2
 8006b04:	fab2 f282 	clz	r2, r2
 8006b08:	fa01 f202 	lsl.w	r2, r1, r2
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006b10:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8006b14:	fa92 f2a2 	rbit	r2, r2
 8006b18:	fab2 f282 	clz	r2, r2
 8006b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8006b20:	4313      	orrs	r3, r2
 8006b22:	4a11      	ldr	r2, [pc, #68]	; (8006b68 <HAL_RCC_OscConfig+0x418>)
 8006b24:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8006b26:	6813      	ldr	r3, [r2, #0]
 8006b28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b2c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006b2e:	f7fd f8eb 	bl	8003d08 <HAL_GetTick>
 8006b32:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b34:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <HAL_RCC_OscConfig+0x418>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006b3c:	d106      	bne.n	8006b4c <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b3e:	f7fd f8e3 	bl	8003d08 <HAL_GetTick>
 8006b42:	1b00      	subs	r0, r0, r4
 8006b44:	2802      	cmp	r0, #2
 8006b46:	d9f5      	bls.n	8006b34 <HAL_RCC_OscConfig+0x3e4>
            return HAL_TIMEOUT;
 8006b48:	2003      	movs	r0, #3
 8006b4a:	e008      	b.n	8006b5e <HAL_RCC_OscConfig+0x40e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	e006      	b.n	8006b5e <HAL_RCC_OscConfig+0x40e>
 8006b50:	2000      	movs	r0, #0
 8006b52:	e004      	b.n	8006b5e <HAL_RCC_OscConfig+0x40e>
        return HAL_ERROR;
 8006b54:	2001      	movs	r0, #1
 8006b56:	e002      	b.n	8006b5e <HAL_RCC_OscConfig+0x40e>
        return HAL_ERROR;
 8006b58:	2001      	movs	r0, #1
 8006b5a:	e000      	b.n	8006b5e <HAL_RCC_OscConfig+0x40e>
  return HAL_OK;
 8006b5c:	2000      	movs	r0, #0
}
 8006b5e:	b002      	add	sp, #8
 8006b60:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006b62:	2001      	movs	r0, #1
 8006b64:	e7fb      	b.n	8006b5e <HAL_RCC_OscConfig+0x40e>
 8006b66:	bf00      	nop
 8006b68:	40023800 	.word	0x40023800

08006b6c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b6c:	4b21      	ldr	r3, [pc, #132]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x88>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f003 030c 	and.w	r3, r3, #12
 8006b74:	2b04      	cmp	r3, #4
 8006b76:	d038      	beq.n	8006bea <HAL_RCC_GetSysClockFreq+0x7e>
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d138      	bne.n	8006bee <HAL_RCC_GetSysClockFreq+0x82>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b7c:	4b1d      	ldr	r3, [pc, #116]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x88>)
 8006b7e:	6858      	ldr	r0, [r3, #4]
 8006b80:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006b8a:	d01e      	beq.n	8006bca <HAL_RCC_GetSysClockFreq+0x5e>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8006b8c:	4a1a      	ldr	r2, [pc, #104]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8006b8e:	fbb2 f2f0 	udiv	r2, r2, r0
 8006b92:	4b18      	ldr	r3, [pc, #96]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x88>)
 8006b94:	6858      	ldr	r0, [r3, #4]
 8006b96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b9a:	4018      	ands	r0, r3
 8006b9c:	fa93 f3a3 	rbit	r3, r3
 8006ba0:	fab3 f383 	clz	r3, r3
 8006ba4:	40d8      	lsrs	r0, r3
 8006ba6:	fb00 f002 	mul.w	r0, r0, r2
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8006baa:	4b12      	ldr	r3, [pc, #72]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x88>)
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bb2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006bb6:	fa92 f2a2 	rbit	r2, r2
 8006bba:	fab2 f282 	clz	r2, r2
 8006bbe:	40d3      	lsrs	r3, r2
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 8006bc4:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8006bc8:	4770      	bx	lr
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8006bca:	4a0c      	ldr	r2, [pc, #48]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x90>)
 8006bcc:	fbb2 f2f0 	udiv	r2, r2, r0
 8006bd0:	4b08      	ldr	r3, [pc, #32]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x88>)
 8006bd2:	6858      	ldr	r0, [r3, #4]
 8006bd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bd8:	4018      	ands	r0, r3
 8006bda:	fa93 f3a3 	rbit	r3, r3
 8006bde:	fab3 f383 	clz	r3, r3
 8006be2:	40d8      	lsrs	r0, r3
 8006be4:	fb00 f002 	mul.w	r0, r0, r2
 8006be8:	e7df      	b.n	8006baa <HAL_RCC_GetSysClockFreq+0x3e>
      sysclockfreq = HSE_VALUE;
 8006bea:	4803      	ldr	r0, [pc, #12]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8006bec:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bee:	4803      	ldr	r0, [pc, #12]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x90>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	40023800 	.word	0x40023800
 8006bf8:	017d7840 	.word	0x017d7840
 8006bfc:	00f42400 	.word	0x00f42400

08006c00 <HAL_RCC_ClockConfig>:
{
 8006c00:	b570      	push	{r4, r5, r6, lr}
 8006c02:	4604      	mov	r4, r0
 8006c04:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8006c06:	4b5c      	ldr	r3, [pc, #368]	; (8006d78 <HAL_RCC_ClockConfig+0x178>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 030f 	and.w	r3, r3, #15
 8006c0e:	428b      	cmp	r3, r1
 8006c10:	d20b      	bcs.n	8006c2a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c12:	4a59      	ldr	r2, [pc, #356]	; (8006d78 <HAL_RCC_ClockConfig+0x178>)
 8006c14:	6813      	ldr	r3, [r2, #0]
 8006c16:	f023 030f 	bic.w	r3, r3, #15
 8006c1a:	430b      	orrs	r3, r1
 8006c1c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006c1e:	6813      	ldr	r3, [r2, #0]
 8006c20:	f003 030f 	and.w	r3, r3, #15
 8006c24:	428b      	cmp	r3, r1
 8006c26:	f040 80a0 	bne.w	8006d6a <HAL_RCC_ClockConfig+0x16a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	f013 0f02 	tst.w	r3, #2
 8006c30:	d006      	beq.n	8006c40 <HAL_RCC_ClockConfig+0x40>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c32:	4a52      	ldr	r2, [pc, #328]	; (8006d7c <HAL_RCC_ClockConfig+0x17c>)
 8006c34:	6893      	ldr	r3, [r2, #8]
 8006c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c3a:	68a1      	ldr	r1, [r4, #8]
 8006c3c:	430b      	orrs	r3, r1
 8006c3e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	f013 0f01 	tst.w	r3, #1
 8006c46:	d052      	beq.n	8006cee <HAL_RCC_ClockConfig+0xee>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c48:	6863      	ldr	r3, [r4, #4]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d023      	beq.n	8006c96 <HAL_RCC_ClockConfig+0x96>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d028      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c52:	4a4a      	ldr	r2, [pc, #296]	; (8006d7c <HAL_RCC_ClockConfig+0x17c>)
 8006c54:	6812      	ldr	r2, [r2, #0]
 8006c56:	f012 0f02 	tst.w	r2, #2
 8006c5a:	f000 8088 	beq.w	8006d6e <HAL_RCC_ClockConfig+0x16e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c5e:	4947      	ldr	r1, [pc, #284]	; (8006d7c <HAL_RCC_ClockConfig+0x17c>)
 8006c60:	688a      	ldr	r2, [r1, #8]
 8006c62:	f022 0203 	bic.w	r2, r2, #3
 8006c66:	4313      	orrs	r3, r2
 8006c68:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006c6a:	f7fd f84d 	bl	8003d08 <HAL_GetTick>
 8006c6e:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c70:	6863      	ldr	r3, [r4, #4]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d01d      	beq.n	8006cb2 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d02a      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0xd0>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c7a:	4b40      	ldr	r3, [pc, #256]	; (8006d7c <HAL_RCC_ClockConfig+0x17c>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f013 0f0c 	tst.w	r3, #12
 8006c82:	d034      	beq.n	8006cee <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c84:	f7fd f840 	bl	8003d08 <HAL_GetTick>
 8006c88:	1b83      	subs	r3, r0, r6
 8006c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d9f3      	bls.n	8006c7a <HAL_RCC_ClockConfig+0x7a>
          return HAL_TIMEOUT;
 8006c92:	2003      	movs	r0, #3
 8006c94:	e068      	b.n	8006d68 <HAL_RCC_ClockConfig+0x168>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c96:	4a39      	ldr	r2, [pc, #228]	; (8006d7c <HAL_RCC_ClockConfig+0x17c>)
 8006c98:	6812      	ldr	r2, [r2, #0]
 8006c9a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006c9e:	d1de      	bne.n	8006c5e <HAL_RCC_ClockConfig+0x5e>
        return HAL_ERROR;
 8006ca0:	2001      	movs	r0, #1
 8006ca2:	e061      	b.n	8006d68 <HAL_RCC_ClockConfig+0x168>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ca4:	4a35      	ldr	r2, [pc, #212]	; (8006d7c <HAL_RCC_ClockConfig+0x17c>)
 8006ca6:	6812      	ldr	r2, [r2, #0]
 8006ca8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006cac:	d1d7      	bne.n	8006c5e <HAL_RCC_ClockConfig+0x5e>
        return HAL_ERROR;
 8006cae:	2001      	movs	r0, #1
 8006cb0:	e05a      	b.n	8006d68 <HAL_RCC_ClockConfig+0x168>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cb2:	4b32      	ldr	r3, [pc, #200]	; (8006d7c <HAL_RCC_ClockConfig+0x17c>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f003 030c 	and.w	r3, r3, #12
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d017      	beq.n	8006cee <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cbe:	f7fd f823 	bl	8003d08 <HAL_GetTick>
 8006cc2:	1b83      	subs	r3, r0, r6
 8006cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d9f2      	bls.n	8006cb2 <HAL_RCC_ClockConfig+0xb2>
          return HAL_TIMEOUT;
 8006ccc:	2003      	movs	r0, #3
 8006cce:	e04b      	b.n	8006d68 <HAL_RCC_ClockConfig+0x168>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cd0:	4b2a      	ldr	r3, [pc, #168]	; (8006d7c <HAL_RCC_ClockConfig+0x17c>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f003 030c 	and.w	r3, r3, #12
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d008      	beq.n	8006cee <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cdc:	f7fd f814 	bl	8003d08 <HAL_GetTick>
 8006ce0:	1b80      	subs	r0, r0, r6
 8006ce2:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ce6:	4298      	cmp	r0, r3
 8006ce8:	d9f2      	bls.n	8006cd0 <HAL_RCC_ClockConfig+0xd0>
          return HAL_TIMEOUT;
 8006cea:	2003      	movs	r0, #3
 8006cec:	e03c      	b.n	8006d68 <HAL_RCC_ClockConfig+0x168>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8006cee:	4b22      	ldr	r3, [pc, #136]	; (8006d78 <HAL_RCC_ClockConfig+0x178>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 030f 	and.w	r3, r3, #15
 8006cf6:	42ab      	cmp	r3, r5
 8006cf8:	d90a      	bls.n	8006d10 <HAL_RCC_ClockConfig+0x110>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cfa:	4a1f      	ldr	r2, [pc, #124]	; (8006d78 <HAL_RCC_ClockConfig+0x178>)
 8006cfc:	6813      	ldr	r3, [r2, #0]
 8006cfe:	f023 030f 	bic.w	r3, r3, #15
 8006d02:	432b      	orrs	r3, r5
 8006d04:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006d06:	6813      	ldr	r3, [r2, #0]
 8006d08:	f003 030f 	and.w	r3, r3, #15
 8006d0c:	42ab      	cmp	r3, r5
 8006d0e:	d130      	bne.n	8006d72 <HAL_RCC_ClockConfig+0x172>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	f013 0f04 	tst.w	r3, #4
 8006d16:	d006      	beq.n	8006d26 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d18:	4a18      	ldr	r2, [pc, #96]	; (8006d7c <HAL_RCC_ClockConfig+0x17c>)
 8006d1a:	6893      	ldr	r3, [r2, #8]
 8006d1c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006d20:	68e1      	ldr	r1, [r4, #12]
 8006d22:	430b      	orrs	r3, r1
 8006d24:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	f013 0f08 	tst.w	r3, #8
 8006d2c:	d007      	beq.n	8006d3e <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d2e:	4a13      	ldr	r2, [pc, #76]	; (8006d7c <HAL_RCC_ClockConfig+0x17c>)
 8006d30:	6893      	ldr	r3, [r2, #8]
 8006d32:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006d36:	6921      	ldr	r1, [r4, #16]
 8006d38:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006d3c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8006d3e:	f7ff ff15 	bl	8006b6c <HAL_RCC_GetSysClockFreq>
 8006d42:	4b0e      	ldr	r3, [pc, #56]	; (8006d7c <HAL_RCC_ClockConfig+0x17c>)
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d4a:	22f0      	movs	r2, #240	; 0xf0
 8006d4c:	fa92 f2a2 	rbit	r2, r2
 8006d50:	fab2 f282 	clz	r2, r2
 8006d54:	40d3      	lsrs	r3, r2
 8006d56:	4a0a      	ldr	r2, [pc, #40]	; (8006d80 <HAL_RCC_ClockConfig+0x180>)
 8006d58:	5cd3      	ldrb	r3, [r2, r3]
 8006d5a:	40d8      	lsrs	r0, r3
 8006d5c:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <HAL_RCC_ClockConfig+0x184>)
 8006d5e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8006d60:	2000      	movs	r0, #0
 8006d62:	f7fc ffa7 	bl	8003cb4 <HAL_InitTick>
  return HAL_OK;
 8006d66:	2000      	movs	r0, #0
}
 8006d68:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006d6a:	2001      	movs	r0, #1
 8006d6c:	e7fc      	b.n	8006d68 <HAL_RCC_ClockConfig+0x168>
        return HAL_ERROR;
 8006d6e:	2001      	movs	r0, #1
 8006d70:	e7fa      	b.n	8006d68 <HAL_RCC_ClockConfig+0x168>
      return HAL_ERROR;
 8006d72:	2001      	movs	r0, #1
 8006d74:	e7f8      	b.n	8006d68 <HAL_RCC_ClockConfig+0x168>
 8006d76:	bf00      	nop
 8006d78:	40023c00 	.word	0x40023c00
 8006d7c:	40023800 	.word	0x40023800
 8006d80:	08011148 	.word	0x08011148
 8006d84:	2000008c 	.word	0x2000008c

08006d88 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8006d88:	4b01      	ldr	r3, [pc, #4]	; (8006d90 <HAL_RCC_GetHCLKFreq+0x8>)
 8006d8a:	6818      	ldr	r0, [r3, #0]
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	2000008c 	.word	0x2000008c

08006d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8006d94:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8006d96:	f7ff fff7 	bl	8006d88 <HAL_RCC_GetHCLKFreq>
 8006d9a:	4b07      	ldr	r3, [pc, #28]	; (8006db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006da2:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8006da6:	fa92 f2a2 	rbit	r2, r2
 8006daa:	fab2 f282 	clz	r2, r2
 8006dae:	40d3      	lsrs	r3, r2
 8006db0:	4a02      	ldr	r2, [pc, #8]	; (8006dbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006db2:	5cd3      	ldrb	r3, [r2, r3]
}
 8006db4:	40d8      	lsrs	r0, r3
 8006db6:	bd08      	pop	{r3, pc}
 8006db8:	40023800 	.word	0x40023800
 8006dbc:	08011158 	.word	0x08011158

08006dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dc0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8006dc2:	f7ff ffe1 	bl	8006d88 <HAL_RCC_GetHCLKFreq>
 8006dc6:	4b07      	ldr	r3, [pc, #28]	; (8006de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006dce:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8006dd2:	fa92 f2a2 	rbit	r2, r2
 8006dd6:	fab2 f282 	clz	r2, r2
 8006dda:	40d3      	lsrs	r3, r2
 8006ddc:	4a02      	ldr	r2, [pc, #8]	; (8006de8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dde:	5cd3      	ldrb	r3, [r2, r3]
} 
 8006de0:	40d8      	lsrs	r0, r3
 8006de2:	bd08      	pop	{r3, pc}
 8006de4:	40023800 	.word	0x40023800
 8006de8:	08011158 	.word	0x08011158

08006dec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dee:	b083      	sub	sp, #12
 8006df0:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006df2:	6806      	ldr	r6, [r0, #0]
 8006df4:	f016 0601 	ands.w	r6, r6, #1
 8006df8:	d00d      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006dfa:	4bb5      	ldr	r3, [pc, #724]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006dfc:	689a      	ldr	r2, [r3, #8]
 8006dfe:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006e02:	609a      	str	r2, [r3, #8]
 8006e04:	689a      	ldr	r2, [r3, #8]
 8006e06:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	609a      	str	r2, [r3, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006e0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 8155 	beq.w	80070be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  uint32_t plli2sused = 0;
 8006e14:	2600      	movs	r6, #0
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006e16:	6825      	ldr	r5, [r4, #0]
 8006e18:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8006e1c:	d011      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e1e:	4aac      	ldr	r2, [pc, #688]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006e20:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006e24:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006e28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006e2a:	430b      	orrs	r3, r1
 8006e2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006e30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e36:	f000 8144 	beq.w	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 8143 	beq.w	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  uint32_t pllsaiused = 0;
 8006e40:	2500      	movs	r5, #0
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006e48:	d00f      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e4a:	4aa1      	ldr	r2, [pc, #644]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006e4c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006e50:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006e54:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006e56:	430b      	orrs	r3, r1
 8006e58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006e5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e62:	f000 8132 	beq.w	80070ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006e66:	b903      	cbnz	r3, 8006e6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1; 
 8006e68:	2501      	movs	r5, #1
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006e70:	d000      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {    
      plli2sused = 1; 
 8006e72:	2601      	movs	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e74:	f013 0f20 	tst.w	r3, #32
 8006e78:	f040 812c 	bne.w	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	f013 0f10 	tst.w	r3, #16
 8006e82:	d00c      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e84:	4b92      	ldr	r3, [pc, #584]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006e86:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006e8a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006e8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8006e92:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006e96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006ea4:	d008      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ea6:	4a8a      	ldr	r2, [pc, #552]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006ea8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006eac:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006eb0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006eb2:	430b      	orrs	r3, r1
 8006eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006ebe:	d008      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ec0:	4a83      	ldr	r2, [pc, #524]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006ec2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006ec6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8006eca:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8006ecc:	430b      	orrs	r3, r1
 8006ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006ed8:	d008      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006eda:	4a7d      	ldr	r2, [pc, #500]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006edc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006ee0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006ee4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8006ee6:	430b      	orrs	r3, r1
 8006ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006eec:	6823      	ldr	r3, [r4, #0]
 8006eee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006ef2:	d008      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ef4:	4a76      	ldr	r2, [pc, #472]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006ef6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006efa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006efe:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8006f00:	430b      	orrs	r3, r1
 8006f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006f0c:	d008      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f0e:	4a70      	ldr	r2, [pc, #448]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006f10:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f14:	f023 0303 	bic.w	r3, r3, #3
 8006f18:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006f1a:	430b      	orrs	r3, r1
 8006f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f26:	d008      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f28:	4a69      	ldr	r2, [pc, #420]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006f2a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f2e:	f023 030c 	bic.w	r3, r3, #12
 8006f32:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006f34:	430b      	orrs	r3, r1
 8006f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006f40:	d008      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f42:	4a63      	ldr	r2, [pc, #396]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006f44:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f48:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006f4c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006f4e:	430b      	orrs	r3, r1
 8006f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006f5a:	d008      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f5c:	4a5c      	ldr	r2, [pc, #368]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006f5e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006f66:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006f68:	430b      	orrs	r3, r1
 8006f6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006f74:	d008      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006f76:	4a56      	ldr	r2, [pc, #344]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006f78:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f80:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006f82:	430b      	orrs	r3, r1
 8006f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006f8e:	d008      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006f90:	4a4f      	ldr	r2, [pc, #316]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006f92:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f96:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006f9a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006f9c:	430b      	orrs	r3, r1
 8006f9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006fa8:	d008      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006faa:	4a49      	ldr	r2, [pc, #292]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006fac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006fb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006fb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006fb6:	430b      	orrs	r3, r1
 8006fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006fc2:	d008      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006fc4:	4a42      	ldr	r2, [pc, #264]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006fc6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006fca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006fce:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8006fd0:	430b      	orrs	r3, r1
 8006fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006fdc:	d008      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006fde:	4a3c      	ldr	r2, [pc, #240]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006fe0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006fe4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006fe8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8006fea:	430b      	orrs	r3, r1
 8006fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8006ff6:	d00d      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006ff8:	4a35      	ldr	r2, [pc, #212]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006ffa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006ffe:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8007002:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8007004:	430b      	orrs	r3, r1
 8007006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800700a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800700c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007010:	f000 80c6 	beq.w	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	f013 0f08 	tst.w	r3, #8
 800701a:	d000      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1; 
 800701c:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800701e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8007022:	d008      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007024:	4a2a      	ldr	r2, [pc, #168]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007026:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800702a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800702e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8007030:	430b      	orrs	r3, r1
 8007032:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800703c:	d009      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800703e:	4a24      	ldr	r2, [pc, #144]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007040:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007048:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800704c:	430b      	orrs	r3, r1
 800704e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8007058:	d009      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800705a:	4a1d      	ldr	r2, [pc, #116]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800705c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007060:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007064:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8007068:	430b      	orrs	r3, r1
 800706a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007074:	d009      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007076:	4a16      	ldr	r2, [pc, #88]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007078:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800707c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007080:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8007084:	430b      	orrs	r3, r1
 8007086:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007090:	d009      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007092:	4a0f      	ldr	r2, [pc, #60]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007094:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8007098:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800709c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80070a0:	430b      	orrs	r3, r1
 80070a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80070a6:	2e00      	cmp	r6, #0
 80070a8:	d17c      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070b0:	d078      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80070b2:	2d01      	cmp	r5, #1
 80070b4:	f000 819e 	beq.w	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x608>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80070b8:	2000      	movs	r0, #0
}
 80070ba:	b003      	add	sp, #12
 80070bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1; 
 80070be:	2601      	movs	r6, #1
 80070c0:	e6a9      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1; 
 80070c2:	2601      	movs	r6, #1
 80070c4:	e6b9      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1; 
 80070c6:	2501      	movs	r5, #1
 80070c8:	e6bb      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1; 
 80070ca:	2601      	movs	r6, #1
 80070cc:	e6cb      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80070ce:	bf00      	nop
 80070d0:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 80070d4:	4bc4      	ldr	r3, [pc, #784]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 80070d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80070dc:	641a      	str	r2, [r3, #64]	; 0x40
 80070de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070e4:	9301      	str	r3, [sp, #4]
 80070e6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80070e8:	4ac0      	ldr	r2, [pc, #768]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x600>)
 80070ea:	6813      	ldr	r3, [r2, #0]
 80070ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070f0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80070f2:	f7fc fe09 	bl	8003d08 <HAL_GetTick>
 80070f6:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80070f8:	4bbc      	ldr	r3, [pc, #752]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x600>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007100:	d106      	bne.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x324>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007102:	f7fc fe01 	bl	8003d08 <HAL_GetTick>
 8007106:	1bc0      	subs	r0, r0, r7
 8007108:	2864      	cmp	r0, #100	; 0x64
 800710a:	d9f5      	bls.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
 800710c:	2003      	movs	r0, #3
 800710e:	e7d4      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007110:	4bb5      	ldr	r3, [pc, #724]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007114:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007118:	d015      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800711a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800711c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8007120:	429a      	cmp	r2, r3
 8007122:	d010      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007124:	4bb0      	ldr	r3, [pc, #704]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007126:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007128:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800712c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800712e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8007132:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007134:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007136:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800713a:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800713c:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800713e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007140:	f013 0f01 	tst.w	r3, #1
 8007144:	d112      	bne.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x380>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007146:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007148:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800714c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007150:	d01d      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8007152:	4aa5      	ldr	r2, [pc, #660]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007154:	6893      	ldr	r3, [r2, #8]
 8007156:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800715a:	6093      	str	r3, [r2, #8]
 800715c:	49a2      	ldr	r1, [pc, #648]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 800715e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8007160:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007162:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007166:	4313      	orrs	r3, r2
 8007168:	670b      	str	r3, [r1, #112]	; 0x70
 800716a:	e687      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 800716c:	f7fc fdcc 	bl	8003d08 <HAL_GetTick>
 8007170:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007172:	4b9d      	ldr	r3, [pc, #628]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007176:	f013 0f02 	tst.w	r3, #2
 800717a:	d1e4      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800717c:	f7fc fdc4 	bl	8003d08 <HAL_GetTick>
 8007180:	1bc0      	subs	r0, r0, r7
 8007182:	f241 3388 	movw	r3, #5000	; 0x1388
 8007186:	4298      	cmp	r0, r3
 8007188:	d9f3      	bls.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x386>
            return HAL_TIMEOUT;
 800718a:	2003      	movs	r0, #3
 800718c:	e795      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800718e:	4896      	ldr	r0, [pc, #600]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007190:	6882      	ldr	r2, [r0, #8]
 8007192:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8007196:	4996      	ldr	r1, [pc, #600]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8007198:	4019      	ands	r1, r3
 800719a:	430a      	orrs	r2, r1
 800719c:	6082      	str	r2, [r0, #8]
 800719e:	e7dd      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x370>
      pllsaiused = 1; 
 80071a0:	2501      	movs	r5, #1
 80071a2:	e737      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_PLLI2S_DISABLE();  
 80071a4:	4a90      	ldr	r2, [pc, #576]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 80071a6:	6813      	ldr	r3, [r2, #0]
 80071a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071ac:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80071ae:	f7fc fdab 	bl	8003d08 <HAL_GetTick>
 80071b2:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071b4:	4b8c      	ldr	r3, [pc, #560]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80071bc:	d006      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80071be:	f7fc fda3 	bl	8003d08 <HAL_GetTick>
 80071c2:	1b80      	subs	r0, r0, r6
 80071c4:	2864      	cmp	r0, #100	; 0x64
 80071c6:	d9f5      	bls.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
 80071c8:	2003      	movs	r0, #3
 80071ca:	e776      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	f013 0f01 	tst.w	r3, #1
 80071d2:	d03a      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80071d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071d6:	bbc3      	cbnz	r3, 800724a <HAL_RCCEx_PeriphCLKConfig+0x45e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80071d8:	4e83      	ldr	r6, [pc, #524]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 80071da:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 80071de:	f403 3c40 	and.w	ip, r3, #196608	; 0x30000
 80071e2:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80071e6:	fa90 f3a0 	rbit	r3, r0
 80071ea:	fab3 f383 	clz	r3, r3
 80071ee:	fa2c fc03 	lsr.w	ip, ip, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80071f2:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 80071f6:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80071fa:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80071fe:	fa91 f3a1 	rbit	r3, r1
 8007202:	fab3 f383 	clz	r3, r3
 8007206:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007208:	6863      	ldr	r3, [r4, #4]
 800720a:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 800720e:	fa97 f7a7 	rbit	r7, r7
 8007212:	fab7 f787 	clz	r7, r7
 8007216:	40bb      	lsls	r3, r7
 8007218:	fa90 f0a0 	rbit	r0, r0
 800721c:	fab0 f080 	clz	r0, r0
 8007220:	fa0c f000 	lsl.w	r0, ip, r0
 8007224:	4303      	orrs	r3, r0
 8007226:	fa91 f1a1 	rbit	r1, r1
 800722a:	fab1 f181 	clz	r1, r1
 800722e:	408a      	lsls	r2, r1
 8007230:	4313      	orrs	r3, r2
 8007232:	68a1      	ldr	r1, [r4, #8]
 8007234:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8007238:	fa92 f2a2 	rbit	r2, r2
 800723c:	fab2 f282 	clz	r2, r2
 8007240:	fa01 f202 	lsl.w	r2, r1, r2
 8007244:	4313      	orrs	r3, r2
 8007246:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8007250:	d003      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x46e>
 8007252:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007254:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8007258:	d006      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800725a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800725e:	d045      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x500>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8007260:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007266:	d141      	bne.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x500>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8007268:	4e5f      	ldr	r6, [pc, #380]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 800726a:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
 800726e:	f400 3c40 	and.w	ip, r0, #196608	; 0x30000
 8007272:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8007276:	fa90 f3a0 	rbit	r3, r0
 800727a:	fab3 f383 	clz	r3, r3
 800727e:	fa2c fc03 	lsr.w	ip, ip, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8007282:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8007286:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800728a:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800728e:	fa91 f3a1 	rbit	r3, r1
 8007292:	fab3 f383 	clz	r3, r3
 8007296:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007298:	6863      	ldr	r3, [r4, #4]
 800729a:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 800729e:	fa97 f7a7 	rbit	r7, r7
 80072a2:	fab7 f787 	clz	r7, r7
 80072a6:	40bb      	lsls	r3, r7
 80072a8:	fa90 f0a0 	rbit	r0, r0
 80072ac:	fab0 f080 	clz	r0, r0
 80072b0:	fa0c f000 	lsl.w	r0, ip, r0
 80072b4:	4303      	orrs	r3, r0
 80072b6:	68e7      	ldr	r7, [r4, #12]
 80072b8:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 80072bc:	fa90 f0a0 	rbit	r0, r0
 80072c0:	fab0 f080 	clz	r0, r0
 80072c4:	fa07 f000 	lsl.w	r0, r7, r0
 80072c8:	4303      	orrs	r3, r0
 80072ca:	fa91 f1a1 	rbit	r1, r1
 80072ce:	fab1 f181 	clz	r1, r1
 80072d2:	408a      	lsls	r2, r1
 80072d4:	4313      	orrs	r3, r2
 80072d6:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 80072da:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80072de:	f023 031f 	bic.w	r3, r3, #31
 80072e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80072e4:	3a01      	subs	r2, #1
 80072e6:	4313      	orrs	r3, r2
 80072e8:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80072f2:	d037      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x578>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80072f4:	4e3c      	ldr	r6, [pc, #240]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 80072f6:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
 80072fa:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80072fe:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 8007302:	fa9c f3ac 	rbit	r3, ip
 8007306:	fab3 f383 	clz	r3, r3
 800730a:	40d9      	lsrs	r1, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 800730c:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8007310:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8007314:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 8007318:	fa90 f3a0 	rbit	r3, r0
 800731c:	fab3 f383 	clz	r3, r3
 8007320:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007322:	6863      	ldr	r3, [r4, #4]
 8007324:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8007328:	fa97 f7a7 	rbit	r7, r7
 800732c:	fab7 f787 	clz	r7, r7
 8007330:	40bb      	lsls	r3, r7
 8007332:	6927      	ldr	r7, [r4, #16]
 8007334:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
 8007338:	fa9e feae 	rbit	lr, lr
 800733c:	fabe fe8e 	clz	lr, lr
 8007340:	fa07 f70e 	lsl.w	r7, r7, lr
 8007344:	433b      	orrs	r3, r7
 8007346:	fa9c fcac 	rbit	ip, ip
 800734a:	fabc fc8c 	clz	ip, ip
 800734e:	fa01 f10c 	lsl.w	r1, r1, ip
 8007352:	430b      	orrs	r3, r1
 8007354:	fa90 f0a0 	rbit	r0, r0
 8007358:	fab0 f080 	clz	r0, r0
 800735c:	4082      	lsls	r2, r0
 800735e:	4313      	orrs	r3, r2
 8007360:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800736a:	d028      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800736c:	6863      	ldr	r3, [r4, #4]
 800736e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8007372:	fa92 f2a2 	rbit	r2, r2
 8007376:	fab2 f282 	clz	r2, r2
 800737a:	4093      	lsls	r3, r2
 800737c:	6921      	ldr	r1, [r4, #16]
 800737e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007382:	fa92 f2a2 	rbit	r2, r2
 8007386:	fab2 f282 	clz	r2, r2
 800738a:	fa01 f202 	lsl.w	r2, r1, r2
 800738e:	4313      	orrs	r3, r2
 8007390:	68e1      	ldr	r1, [r4, #12]
 8007392:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8007396:	fa92 f2a2 	rbit	r2, r2
 800739a:	fab2 f282 	clz	r2, r2
 800739e:	fa01 f202 	lsl.w	r2, r1, r2
 80073a2:	4313      	orrs	r3, r2
 80073a4:	68a1      	ldr	r1, [r4, #8]
 80073a6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80073aa:	fa92 f2a2 	rbit	r2, r2
 80073ae:	fab2 f282 	clz	r2, r2
 80073b2:	fa01 f202 	lsl.w	r2, r1, r2
 80073b6:	4313      	orrs	r3, r2
 80073b8:	4a0b      	ldr	r2, [pc, #44]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 80073ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80073be:	4a0a      	ldr	r2, [pc, #40]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 80073c0:	6813      	ldr	r3, [r2, #0]
 80073c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073c6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80073c8:	f7fc fc9e 	bl	8003d08 <HAL_GetTick>
 80073cc:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073ce:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80073d6:	f47f ae6c 	bne.w	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073da:	f7fc fc95 	bl	8003d08 <HAL_GetTick>
 80073de:	1b80      	subs	r0, r0, r6
 80073e0:	2864      	cmp	r0, #100	; 0x64
 80073e2:	d9f4      	bls.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x5e2>
        return HAL_TIMEOUT;
 80073e4:	2003      	movs	r0, #3
 80073e6:	e668      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80073e8:	40023800 	.word	0x40023800
 80073ec:	40007000 	.word	0x40007000
 80073f0:	0ffffcff 	.word	0x0ffffcff
    __HAL_RCC_PLLSAI_DISABLE(); 
 80073f4:	4a7d      	ldr	r2, [pc, #500]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80073f6:	6813      	ldr	r3, [r2, #0]
 80073f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073fc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80073fe:	f7fc fc83 	bl	8003d08 <HAL_GetTick>
 8007402:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007404:	4b79      	ldr	r3, [pc, #484]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800740c:	d006      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x630>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800740e:	f7fc fc7b 	bl	8003d08 <HAL_GetTick>
 8007412:	1b40      	subs	r0, r0, r5
 8007414:	2864      	cmp	r0, #100	; 0x64
 8007416:	d9f5      	bls.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x618>
        return HAL_TIMEOUT;
 8007418:	2003      	movs	r0, #3
 800741a:	e64e      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800741c:	6823      	ldr	r3, [r4, #0]
 800741e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8007422:	d001      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8007424:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007426:	b12a      	cbz	r2, 8007434 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8007428:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800742c:	d044      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800742e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007430:	2b00      	cmp	r3, #0
 8007432:	d141      	bne.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8007434:	4d6d      	ldr	r5, [pc, #436]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007436:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
 800743a:	f407 3740 	and.w	r7, r7, #196608	; 0x30000
 800743e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8007442:	fa90 f3a0 	rbit	r3, r0
 8007446:	fab3 f383 	clz	r3, r3
 800744a:	40df      	lsrs	r7, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 800744c:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8007450:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8007454:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8007458:	fa91 f3a1 	rbit	r3, r1
 800745c:	fab3 f383 	clz	r3, r3
 8007460:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007462:	6963      	ldr	r3, [r4, #20]
 8007464:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 8007468:	fa96 f6a6 	rbit	r6, r6
 800746c:	fab6 f686 	clz	r6, r6
 8007470:	40b3      	lsls	r3, r6
 8007472:	fa90 f0a0 	rbit	r0, r0
 8007476:	fab0 f080 	clz	r0, r0
 800747a:	fa07 f000 	lsl.w	r0, r7, r0
 800747e:	4303      	orrs	r3, r0
 8007480:	69a6      	ldr	r6, [r4, #24]
 8007482:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8007486:	fa90 f0a0 	rbit	r0, r0
 800748a:	fab0 f080 	clz	r0, r0
 800748e:	fa06 f000 	lsl.w	r0, r6, r0
 8007492:	4303      	orrs	r3, r0
 8007494:	fa91 f1a1 	rbit	r1, r1
 8007498:	fab1 f181 	clz	r1, r1
 800749c:	408a      	lsls	r2, r1
 800749e:	4313      	orrs	r3, r2
 80074a0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80074a4:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80074a8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80074ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80074ae:	3a01      	subs	r2, #1
 80074b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80074b4:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80074be:	d003      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 80074c0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80074c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074c6:	d056      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	f013 0f08 	tst.w	r3, #8
 80074ce:	d03e      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x762>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80074d0:	4d46      	ldr	r5, [pc, #280]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80074d2:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 80074d6:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80074da:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 80074de:	fa90 f3a0 	rbit	r3, r0
 80074e2:	fab3 f383 	clz	r3, r3
 80074e6:	40da      	lsrs	r2, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80074e8:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 80074ec:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 80074f0:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 80074f4:	fa96 f3a6 	rbit	r3, r6
 80074f8:	fab3 f383 	clz	r3, r3
 80074fc:	40d9      	lsrs	r1, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80074fe:	6963      	ldr	r3, [r4, #20]
 8007500:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8007504:	fa97 f7a7 	rbit	r7, r7
 8007508:	fab7 f787 	clz	r7, r7
 800750c:	40bb      	lsls	r3, r7
 800750e:	fa96 f6a6 	rbit	r6, r6
 8007512:	fab6 f686 	clz	r6, r6
 8007516:	40b1      	lsls	r1, r6
 8007518:	430b      	orrs	r3, r1
 800751a:	fa90 f1a0 	rbit	r1, r0
 800751e:	fab1 f181 	clz	r1, r1
 8007522:	408a      	lsls	r2, r1
 8007524:	4313      	orrs	r3, r2
 8007526:	69e1      	ldr	r1, [r4, #28]
 8007528:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800752c:	fa92 f2a2 	rbit	r2, r2
 8007530:	fab2 f282 	clz	r2, r2
 8007534:	fa01 f202 	lsl.w	r2, r1, r2
 8007538:	4313      	orrs	r3, r2
 800753a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800753e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8007542:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007546:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007548:	4313      	orrs	r3, r2
 800754a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800754e:	4a27      	ldr	r2, [pc, #156]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007550:	6813      	ldr	r3, [r2, #0]
 8007552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007556:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007558:	f7fc fbd6 	bl	8003d08 <HAL_GetTick>
 800755c:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800755e:	4b23      	ldr	r3, [pc, #140]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8007566:	d13e      	bne.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007568:	f7fc fbce 	bl	8003d08 <HAL_GetTick>
 800756c:	1b00      	subs	r0, r0, r4
 800756e:	2864      	cmp	r0, #100	; 0x64
 8007570:	d9f5      	bls.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x772>
        return HAL_TIMEOUT;
 8007572:	2003      	movs	r0, #3
 8007574:	e5a1      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8007576:	4e1d      	ldr	r6, [pc, #116]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007578:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 800757c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8007580:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 8007584:	fa95 f3a5 	rbit	r3, r5
 8007588:	fab3 f383 	clz	r3, r3
 800758c:	40d9      	lsrs	r1, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 800758e:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 8007592:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8007596:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 800759a:	fa90 f3a0 	rbit	r3, r0
 800759e:	fab3 f383 	clz	r3, r3
 80075a2:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80075a4:	6963      	ldr	r3, [r4, #20]
 80075a6:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 80075aa:	fa97 f7a7 	rbit	r7, r7
 80075ae:	fab7 f787 	clz	r7, r7
 80075b2:	40bb      	lsls	r3, r7
 80075b4:	6a27      	ldr	r7, [r4, #32]
 80075b6:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 80075ba:	fa9c fcac 	rbit	ip, ip
 80075be:	fabc fc8c 	clz	ip, ip
 80075c2:	fa07 f70c 	lsl.w	r7, r7, ip
 80075c6:	433b      	orrs	r3, r7
 80075c8:	fa95 f5a5 	rbit	r5, r5
 80075cc:	fab5 f585 	clz	r5, r5
 80075d0:	40a9      	lsls	r1, r5
 80075d2:	430b      	orrs	r3, r1
 80075d4:	fa90 f1a0 	rbit	r1, r0
 80075d8:	fab1 f181 	clz	r1, r1
 80075dc:	408a      	lsls	r2, r1
 80075de:	4313      	orrs	r3, r2
 80075e0:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
 80075e4:	e770      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  return HAL_OK;
 80075e6:	2000      	movs	r0, #0
 80075e8:	e567      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80075ea:	bf00      	nop
 80075ec:	40023800 	.word	0x40023800

080075f0 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit: pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075f0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tempreg = 0;
  
  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 80075f2:	4b80      	ldr	r3, [pc, #512]	; (80077f4 <HAL_RCCEx_GetPeriphCLKConfig+0x204>)
 80075f4:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 80075f6:	4b80      	ldr	r3, [pc, #512]	; (80077f8 <HAL_RCCEx_GetPeriphCLKConfig+0x208>)
 80075f8:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80075fc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8007600:	4011      	ands	r1, r2
 8007602:	fa92 f4a2 	rbit	r4, r2
 8007606:	fab4 f484 	clz	r4, r4
 800760a:	40e1      	lsrs	r1, r4
 800760c:	6041      	str	r1, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 800760e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007612:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
 8007616:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800761a:	fa91 f5a1 	rbit	r5, r1
 800761e:	fab5 f585 	clz	r5, r5
 8007622:	40ec      	lsrs	r4, r5
 8007624:	6104      	str	r4, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8007626:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800762a:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
 800762e:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 8007632:	fa95 f6a5 	rbit	r6, r5
 8007636:	fab6 f686 	clz	r6, r6
 800763a:	40f4      	lsrs	r4, r6
 800763c:	60c4      	str	r4, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 800763e:	f8d3 6084 	ldr.w	r6, [r3, #132]	; 0x84
 8007642:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8007646:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
 800764a:	fa94 f7a4 	rbit	r7, r4
 800764e:	fab7 f787 	clz	r7, r7
 8007652:	40fe      	lsrs	r6, r7
 8007654:	6086      	str	r6, [r0, #8]
  
  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
 8007656:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 800765a:	4016      	ands	r6, r2
 800765c:	fa92 f2a2 	rbit	r2, r2
 8007660:	fab2 f282 	clz	r2, r2
 8007664:	fa26 f202 	lsr.w	r2, r6, r2
 8007668:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800766a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800766e:	400a      	ands	r2, r1
 8007670:	fa91 f6a1 	rbit	r6, r1
 8007674:	fab6 f686 	clz	r6, r6
 8007678:	40f2      	lsrs	r2, r6
 800767a:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
 800767c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007680:	402a      	ands	r2, r5
 8007682:	fa95 f5a5 	rbit	r5, r5
 8007686:	fab5 f585 	clz	r5, r5
 800768a:	fa22 f505 	lsr.w	r5, r2, r5
 800768e:	6185      	str	r5, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR)); 
 8007690:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007694:	4022      	ands	r2, r4
 8007696:	fa94 f4a4 	rbit	r4, r4
 800769a:	fab4 f484 	clz	r4, r4
 800769e:	fa22 f404 	lsr.w	r4, r2, r4
 80076a2:	61c4      	str	r4, [r0, #28]
  
  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLI2SDIVQ));
 80076a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80076a8:	f002 021f 	and.w	r2, r2, #31
 80076ac:	241f      	movs	r4, #31
 80076ae:	fa94 f4a4 	rbit	r4, r4
 80076b2:	fab4 f484 	clz	r4, r4
 80076b6:	40e2      	lsrs	r2, r4
 80076b8:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVQ));
 80076ba:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80076be:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 80076c2:	f44f 54f8 	mov.w	r4, #7936	; 0x1f00
 80076c6:	fa94 f4a4 	rbit	r4, r4
 80076ca:	fab4 f484 	clz	r4, r4
 80076ce:	40e2      	lsrs	r2, r4
 80076d0:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVR));
 80076d2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80076d6:	400a      	ands	r2, r1
 80076d8:	fa91 f1a1 	rbit	r1, r1
 80076dc:	fab1 f181 	clz	r1, r1
 80076e0:	fa22 f101 	lsr.w	r1, r2, r1
 80076e4:	62c1      	str	r1, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80076e6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80076ea:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80076ee:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80076f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80076f4:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 80076f8:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8007700:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8007702:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007706:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800770a:	6642      	str	r2, [r0, #100]	; 0x64
  
  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800770c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007710:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8007714:	6682      	str	r2, [r0, #104]	; 0x68
  
  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8007716:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800771a:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800771e:	66c2      	str	r2, [r0, #108]	; 0x6c
  
  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8007720:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007724:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8007728:	6702      	str	r2, [r0, #112]	; 0x70
  
  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800772a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800772e:	f002 0203 	and.w	r2, r2, #3
 8007732:	6442      	str	r2, [r0, #68]	; 0x44
  
  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8007734:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007738:	f002 020c 	and.w	r2, r2, #12
 800773c:	6482      	str	r2, [r0, #72]	; 0x48
  
  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800773e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007742:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8007746:	64c2      	str	r2, [r0, #76]	; 0x4c
  
  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8007748:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800774c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8007750:	6502      	str	r2, [r0, #80]	; 0x50
  
  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8007752:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007756:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800775a:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800775c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007760:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8007764:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8007766:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800776a:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800776e:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8007770:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007774:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8007778:	6602      	str	r2, [r0, #96]	; 0x60
  
  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800777a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800777e:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 8007782:	6742      	str	r2, [r0, #116]	; 0x74
  
  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8007784:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007788:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800778c:	6782      	str	r2, [r0, #120]	; 0x78
  
  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800778e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007792:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007796:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007798:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800779c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80077a0:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 80077a4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80077a8:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80077ac:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
	
  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 80077b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80077b4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80077b8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
 80077bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80077c0:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80077c4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80077c8:	6899      	ldr	r1, [r3, #8]
 80077ca:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80077ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80077d0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80077d4:	430a      	orrs	r2, r1
 80077d6:	6302      	str	r2, [r0, #48]	; 0x30
  
  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 80077d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80077e0:	d103      	bne.n	80077ea <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80077e2:	2300      	movs	r3, #0
 80077e4:	6383      	str	r3, [r0, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80077e6:	bcf0      	pop	{r4, r5, r6, r7}
 80077e8:	4770      	bx	lr
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80077ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077ee:	6383      	str	r3, [r0, #56]	; 0x38
}
 80077f0:	e7f9      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKConfig+0x1f6>
 80077f2:	bf00      	nop
 80077f4:	1cfffff1 	.word	0x1cfffff1
 80077f8:	40023800 	.word	0x40023800

080077fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80077fc:	b410      	push	{r4}
 80077fe:	4603      	mov	r3, r0
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
  
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007800:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8007804:	d006      	beq.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
  uint32_t frequency = 0;
 8007806:	2000      	movs	r0, #0
        break;
      }
    }
  }
  
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800780c:	d073      	beq.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
      }
    }
  }
  
  return frequency;
}
 800780e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007812:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;   
 8007814:	4a6f      	ldr	r2, [pc, #444]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8007816:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800781a:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 800781e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8007822:	d064      	beq.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8007824:	d826      	bhi.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8007826:	b38a      	cbz	r2, 800788c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8007828:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800782c:	d120      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800782e:	4a69      	ldr	r2, [pc, #420]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8007830:	6852      	ldr	r2, [r2, #4]
 8007832:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8007836:	d152      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007838:	4a66      	ldr	r2, [pc, #408]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800783a:	6852      	ldr	r2, [r2, #4]
 800783c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007840:	4865      	ldr	r0, [pc, #404]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8007842:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007846:	4a63      	ldr	r2, [pc, #396]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8007848:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 800784c:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007850:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
 8007854:	f3c4 1488 	ubfx	r4, r4, #6, #9
 8007858:	fb00 f004 	mul.w	r0, r0, r4
 800785c:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8007860:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8007864:	f002 021f 	and.w	r2, r2, #31
 8007868:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 800786a:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 800786e:	e7cb      	b.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
    switch (saiclocksource)
 8007870:	2000      	movs	r0, #0
 8007872:	e7c9      	b.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
 8007874:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8007878:	d106      	bne.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800787a:	4a56      	ldr	r2, [pc, #344]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800787c:	6852      	ldr	r2, [r2, #4]
 800787e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8007882:	d136      	bne.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
          frequency = HSI_VALUE;
 8007884:	4854      	ldr	r0, [pc, #336]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8007886:	e7bf      	b.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
    switch (saiclocksource)
 8007888:	2000      	movs	r0, #0
 800788a:	e7bd      	b.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800788c:	4a51      	ldr	r2, [pc, #324]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800788e:	6852      	ldr	r2, [r2, #4]
 8007890:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8007894:	d11b      	bne.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007896:	4a4f      	ldr	r2, [pc, #316]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8007898:	6852      	ldr	r2, [r2, #4]
 800789a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800789e:	484e      	ldr	r0, [pc, #312]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80078a0:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80078a4:	4a4b      	ldr	r2, [pc, #300]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80078a6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80078aa:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80078ae:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
 80078b2:	f3c4 1488 	ubfx	r4, r4, #6, #9
 80078b6:	fb00 f004 	mul.w	r0, r0, r4
 80078ba:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80078be:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80078c2:	f3c2 2204 	ubfx	r2, r2, #8, #5
 80078c6:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg); 
 80078c8:	fbb0 f0f2 	udiv	r0, r0, r2
        break;       
 80078cc:	e79c      	b.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80078ce:	4a41      	ldr	r2, [pc, #260]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80078d0:	6852      	ldr	r2, [r2, #4]
 80078d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80078d6:	4841      	ldr	r0, [pc, #260]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 80078d8:	fbb0 f0f2 	udiv	r0, r0, r2
 80078dc:	e7e2      	b.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80078de:	4a3d      	ldr	r2, [pc, #244]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80078e0:	6852      	ldr	r2, [r2, #4]
 80078e2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80078e6:	483d      	ldr	r0, [pc, #244]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 80078e8:	fbb0 f0f2 	udiv	r0, r0, r2
 80078ec:	e7ab      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
        frequency = EXTERNAL_CLOCK_VALUE;
 80078ee:	483c      	ldr	r0, [pc, #240]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 80078f0:	e78a      	b.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
          frequency = HSE_VALUE;
 80078f2:	483a      	ldr	r0, [pc, #232]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 80078f4:	e788      	b.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
    saiclocksource = RCC->DCKCFGR1;   
 80078f6:	4b37      	ldr	r3, [pc, #220]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80078f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80078fc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (saiclocksource)
 8007900:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007904:	d062      	beq.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007906:	d825      	bhi.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8007908:	b37b      	cbz	r3, 800796a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 800790a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800790e:	f47f af7e 	bne.w	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x12>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007912:	4b30      	ldr	r3, [pc, #192]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800791a:	d14f      	bne.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800791c:	4b2d      	ldr	r3, [pc, #180]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007924:	482c      	ldr	r0, [pc, #176]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8007926:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800792a:	4b2a      	ldr	r3, [pc, #168]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800792c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007930:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007934:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8007938:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800793c:	fb00 f001 	mul.w	r0, r0, r1
 8007940:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8007944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007948:	f003 031f 	and.w	r3, r3, #31
 800794c:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 800794e:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8007952:	e75c      	b.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x12>
    switch (saiclocksource)
 8007954:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007958:	f47f af59 	bne.w	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x12>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800795c:	4b1d      	ldr	r3, [pc, #116]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007964:	d134      	bne.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
          frequency = HSI_VALUE;
 8007966:	481c      	ldr	r0, [pc, #112]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8007968:	e751      	b.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x12>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800796a:	4b1a      	ldr	r3, [pc, #104]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007972:	d11b      	bne.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007974:	4b17      	ldr	r3, [pc, #92]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800797c:	4816      	ldr	r0, [pc, #88]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800797e:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007982:	4b14      	ldr	r3, [pc, #80]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8007984:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007988:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800798c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8007990:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007994:	fb00 f001 	mul.w	r0, r0, r1
 8007998:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800799c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079a0:	f3c3 2304 	ubfx	r3, r3, #8, #5
 80079a4:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg); 
 80079a6:	fbb0 f0f3 	udiv	r0, r0, r3
        break;       
 80079aa:	e730      	b.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x12>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80079ac:	4b09      	ldr	r3, [pc, #36]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079b4:	4809      	ldr	r0, [pc, #36]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 80079b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80079ba:	e7e2      	b.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80079bc:	4b05      	ldr	r3, [pc, #20]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079c4:	4805      	ldr	r0, [pc, #20]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 80079c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80079ca:	e7ae      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
        frequency = EXTERNAL_CLOCK_VALUE;
 80079cc:	4804      	ldr	r0, [pc, #16]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 80079ce:	e71e      	b.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x12>
          frequency = HSE_VALUE;
 80079d0:	4802      	ldr	r0, [pc, #8]	; (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
  return frequency;
 80079d2:	e71c      	b.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 80079d4:	40023800 	.word	0x40023800
 80079d8:	00f42400 	.word	0x00f42400
 80079dc:	017d7840 	.word	0x017d7840
 80079e0:	00bb8000 	.word	0x00bb8000

080079e4 <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
  
  if(mode == SAI_MODE_IT)
 80079e4:	2901      	cmp	r1, #1
 80079e6:	d00a      	beq.n	80079fe <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80079e8:	2301      	movs	r3, #1
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80079ea:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80079ec:	2a08      	cmp	r2, #8
 80079ee:	d008      	beq.n	8007a02 <SAI_InterruptFlag+0x1e>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT|= SAI_IT_CNRDY;
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80079f0:	6842      	ldr	r2, [r0, #4]
 80079f2:	3a02      	subs	r2, #2
 80079f4:	2a01      	cmp	r2, #1
 80079f6:	d90c      	bls.n	8007a12 <SAI_InterruptFlag+0x2e>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 80079f8:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 80079fc:	4770      	bx	lr
    tmpIT|= SAI_IT_FREQ;
 80079fe:	2309      	movs	r3, #9
 8007a00:	e7f3      	b.n	80079ea <SAI_InterruptFlag+0x6>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007a02:	6842      	ldr	r2, [r0, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007a04:	2a01      	cmp	r2, #1
 8007a06:	bf18      	it	ne
 8007a08:	2a03      	cmpne	r2, #3
 8007a0a:	d1f1      	bne.n	80079f0 <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_CNRDY;
 8007a0c:	f043 0310 	orr.w	r3, r3, #16
 8007a10:	e7ee      	b.n	80079f0 <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007a12:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 8007a16:	4770      	bx	lr

08007a18 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8007a18:	4b0e      	ldr	r3, [pc, #56]	; (8007a54 <SAI_Disable+0x3c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a0e      	ldr	r2, [pc, #56]	; (8007a58 <SAI_Disable+0x40>)
 8007a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a22:	0b1b      	lsrs	r3, r3, #12
 8007a24:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007a26:	6801      	ldr	r1, [r0, #0]
 8007a28:	680a      	ldr	r2, [r1, #0]
 8007a2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007a2e:	600a      	str	r2, [r1, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007a30:	461a      	mov	r2, r3
 8007a32:	3b01      	subs	r3, #1
 8007a34:	b132      	cbz	r2, 8007a44 <SAI_Disable+0x2c>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007a36:	6802      	ldr	r2, [r0, #0]
 8007a38:	6812      	ldr	r2, [r2, #0]
 8007a3a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8007a3e:	d1f7      	bne.n	8007a30 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8007a40:	2000      	movs	r0, #0

  return status;
}
 8007a42:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007a44:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8007a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a4c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007a50:	2003      	movs	r0, #3
      break;
 8007a52:	4770      	bx	lr
 8007a54:	2000008c 	.word	0x2000008c
 8007a58:	95cbec1b 	.word	0x95cbec1b

08007a5c <HAL_SAI_MspInit>:
}
 8007a5c:	4770      	bx	lr
	...

08007a60 <HAL_SAI_Init>:
  if(hsai == NULL)
 8007a60:	2800      	cmp	r0, #0
 8007a62:	f000 80eb 	beq.w	8007c3c <HAL_SAI_Init+0x1dc>
{
 8007a66:	b570      	push	{r4, r5, r6, lr}
 8007a68:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_RESET)
 8007a6a:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 80b9 	beq.w	8007be6 <HAL_SAI_Init+0x186>
  hsai->State = HAL_SAI_STATE_BUSY;
 8007a74:	2302      	movs	r3, #2
 8007a76:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f7ff ffcc 	bl	8007a18 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 8007a80:	68e3      	ldr	r3, [r4, #12]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	f000 80b4 	beq.w	8007bf0 <HAL_SAI_Init+0x190>
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	f040 80b3 	bne.w	8007bf4 <HAL_SAI_Init+0x194>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007a8e:	2220      	movs	r2, #32
  switch(hsai->Init.Synchro)
 8007a90:	68a3      	ldr	r3, [r4, #8]
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	f000 80b8 	beq.w	8007c08 <HAL_SAI_Init+0x1a8>
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	f000 80b0 	beq.w	8007bfe <HAL_SAI_Init+0x19e>
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	f000 80aa 	beq.w	8007bf8 <HAL_SAI_Init+0x198>
 8007aa4:	2500      	movs	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	4865      	ldr	r0, [pc, #404]	; (8007c40 <HAL_SAI_Init+0x1e0>)
 8007aaa:	4966      	ldr	r1, [pc, #408]	; (8007c44 <HAL_SAI_Init+0x1e4>)
 8007aac:	428b      	cmp	r3, r1
 8007aae:	bf18      	it	ne
 8007ab0:	4283      	cmpne	r3, r0
 8007ab2:	f040 80ac 	bne.w	8007c0e <HAL_SAI_Init+0x1ae>
    SAI1->GCR = tmpregisterGCR;
 8007ab6:	4b64      	ldr	r3, [pc, #400]	; (8007c48 <HAL_SAI_Init+0x1e8>)
 8007ab8:	601a      	str	r2, [r3, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007aba:	69e3      	ldr	r3, [r4, #28]
 8007abc:	b323      	cbz	r3, 8007b08 <HAL_SAI_Init+0xa8>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	495f      	ldr	r1, [pc, #380]	; (8007c40 <HAL_SAI_Init+0x1e0>)
 8007ac2:	4a60      	ldr	r2, [pc, #384]	; (8007c44 <HAL_SAI_Init+0x1e4>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	bf18      	it	ne
 8007ac8:	428b      	cmpne	r3, r1
 8007aca:	f000 80a3 	beq.w	8007c14 <HAL_SAI_Init+0x1b4>
    uint32_t freq = 0;
 8007ace:	2000      	movs	r0, #0
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	495e      	ldr	r1, [pc, #376]	; (8007c4c <HAL_SAI_Init+0x1ec>)
 8007ad4:	4a5e      	ldr	r2, [pc, #376]	; (8007c50 <HAL_SAI_Init+0x1f0>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	bf18      	it	ne
 8007ada:	428b      	cmpne	r3, r1
 8007adc:	f000 809f 	beq.w	8007c1e <HAL_SAI_Init+0x1be>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007ae0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007ae4:	0040      	lsls	r0, r0, #1
 8007ae6:	69e3      	ldr	r3, [r4, #28]
 8007ae8:	025b      	lsls	r3, r3, #9
 8007aea:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8007aee:	4b59      	ldr	r3, [pc, #356]	; (8007c54 <HAL_SAI_Init+0x1f4>)
 8007af0:	fba3 2300 	umull	r2, r3, r3, r0
 8007af4:	08db      	lsrs	r3, r3, #3
 8007af6:	6223      	str	r3, [r4, #32]
    if((tmpval % 10) > 8)
 8007af8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007afc:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8007b00:	2808      	cmp	r0, #8
 8007b02:	d901      	bls.n	8007b08 <HAL_SAI_Init+0xa8>
      hsai->Init.Mckdiv+= 1;
 8007b04:	3301      	adds	r3, #1
 8007b06:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007b08:	6862      	ldr	r2, [r4, #4]
 8007b0a:	2a02      	cmp	r2, #2
 8007b0c:	bf14      	ite	ne
 8007b0e:	2300      	movne	r3, #0
 8007b10:	2301      	moveq	r3, #1
 8007b12:	2a00      	cmp	r2, #0
 8007b14:	bf08      	it	eq
 8007b16:	2301      	moveq	r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 8087 	beq.w	8007c2c <HAL_SAI_Init+0x1cc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007b1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	f000 8081 	beq.w	8007c28 <HAL_SAI_Init+0x1c8>
 8007b26:	f44f 7600 	mov.w	r6, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007b2a:	6821      	ldr	r1, [r4, #0]
 8007b2c:	680b      	ldr	r3, [r1, #0]
 8007b2e:	4a4a      	ldr	r2, [pc, #296]	; (8007c58 <HAL_SAI_Init+0x1f8>)
 8007b30:	401a      	ands	r2, r3
 8007b32:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b34:	6822      	ldr	r2, [r4, #0]
 8007b36:	6811      	ldr	r1, [r2, #0]
 8007b38:	6863      	ldr	r3, [r4, #4]
 8007b3a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007b3c:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007b3e:	6b60      	ldr	r0, [r4, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b40:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007b42:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007b44:	4303      	orrs	r3, r0
 8007b46:	4333      	orrs	r3, r6
                        ckstr_bits | syncen_bits |                               \
 8007b48:	432b      	orrs	r3, r5
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007b4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8007b4c:	4303      	orrs	r3, r0
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007b4e:	6920      	ldr	r0, [r4, #16]
 8007b50:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007b52:	6960      	ldr	r0, [r4, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007b54:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007b56:	6a20      	ldr	r0, [r4, #32]
 8007b58:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b5c:	430b      	orrs	r3, r1
 8007b5e:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007b60:	6822      	ldr	r2, [r4, #0]
 8007b62:	6851      	ldr	r1, [r2, #4]
 8007b64:	4b3d      	ldr	r3, [pc, #244]	; (8007c5c <HAL_SAI_Init+0x1fc>)
 8007b66:	400b      	ands	r3, r1
 8007b68:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007b6a:	6821      	ldr	r1, [r4, #0]
 8007b6c:	684a      	ldr	r2, [r1, #4]
 8007b6e:	69a3      	ldr	r3, [r4, #24]
 8007b70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007b72:	4303      	orrs	r3, r0
 8007b74:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007b76:	4303      	orrs	r3, r0
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007b7c:	6822      	ldr	r2, [r4, #0]
 8007b7e:	6891      	ldr	r1, [r2, #8]
 8007b80:	4b37      	ldr	r3, [pc, #220]	; (8007c60 <HAL_SAI_Init+0x200>)
 8007b82:	400b      	ands	r3, r1
 8007b84:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007b86:	6820      	ldr	r0, [r4, #0]
 8007b88:	6882      	ldr	r2, [r0, #8]
 8007b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b8c:	3b01      	subs	r3, #1
                          hsai->FrameInit.FSOffset |
 8007b8e:	6d21      	ldr	r1, [r4, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007b90:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSDefinition |
 8007b92:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8007b94:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSPolarity   |
 8007b96:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8007b98:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007b9a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007b9c:	3901      	subs	r1, #1
                          hsai->FrameInit.FSPolarity   |
 8007b9e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007ba6:	6822      	ldr	r2, [r4, #0]
 8007ba8:	68d3      	ldr	r3, [r2, #12]
 8007baa:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8007bae:	f023 030f 	bic.w	r3, r3, #15
 8007bb2:	041b      	lsls	r3, r3, #16
 8007bb4:	0c1b      	lsrs	r3, r3, #16
 8007bb6:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007bb8:	6820      	ldr	r0, [r4, #0]
 8007bba:	68c2      	ldr	r2, [r0, #12]
 8007bbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007bbe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007bc0:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007bc2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8007bc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007bc8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007bca:	3901      	subs	r1, #1
 8007bcc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  hsai->State= HAL_SAI_STATE_READY;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8007be0:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8007be4:	bd70      	pop	{r4, r5, r6, pc}
    hsai->Lock = HAL_UNLOCKED;
 8007be6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8007bea:	f7ff ff37 	bl	8007a5c <HAL_SAI_MspInit>
 8007bee:	e741      	b.n	8007a74 <HAL_SAI_Init+0x14>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007bf0:	2210      	movs	r2, #16
 8007bf2:	e74d      	b.n	8007a90 <HAL_SAI_Init+0x30>
  switch(hsai->Init.SynchroExt)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	e74b      	b.n	8007a90 <HAL_SAI_Init+0x30>
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007bf8:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8007bfc:	e753      	b.n	8007aa6 <HAL_SAI_Init+0x46>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007bfe:	f042 0201 	orr.w	r2, r2, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007c02:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 8007c06:	e74e      	b.n	8007aa6 <HAL_SAI_Init+0x46>
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007c08:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8007c0c:	e74b      	b.n	8007aa6 <HAL_SAI_Init+0x46>
    SAI2->GCR = tmpregisterGCR;
 8007c0e:	4b15      	ldr	r3, [pc, #84]	; (8007c64 <HAL_SAI_Init+0x204>)
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	e752      	b.n	8007aba <HAL_SAI_Init+0x5a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007c14:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007c18:	f7ff fdf0 	bl	80077fc <HAL_RCCEx_GetPeriphCLKFreq>
 8007c1c:	e758      	b.n	8007ad0 <HAL_SAI_Init+0x70>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007c1e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007c22:	f7ff fdeb 	bl	80077fc <HAL_RCCEx_GetPeriphCLKFreq>
 8007c26:	e75b      	b.n	8007ae0 <HAL_SAI_Init+0x80>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007c28:	2600      	movs	r6, #0
 8007c2a:	e77e      	b.n	8007b2a <HAL_SAI_Init+0xca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007c2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d001      	beq.n	8007c36 <HAL_SAI_Init+0x1d6>
 8007c32:	2600      	movs	r6, #0
 8007c34:	e779      	b.n	8007b2a <HAL_SAI_Init+0xca>
 8007c36:	f44f 7600 	mov.w	r6, #512	; 0x200
 8007c3a:	e776      	b.n	8007b2a <HAL_SAI_Init+0xca>
    return HAL_ERROR;
 8007c3c:	2001      	movs	r0, #1
}
 8007c3e:	4770      	bx	lr
 8007c40:	40015804 	.word	0x40015804
 8007c44:	40015824 	.word	0x40015824
 8007c48:	40015800 	.word	0x40015800
 8007c4c:	40015c04 	.word	0x40015c04
 8007c50:	40015c24 	.word	0x40015c24
 8007c54:	cccccccd 	.word	0xcccccccd
 8007c58:	ff05c010 	.word	0xff05c010
 8007c5c:	ffff1ff0 	.word	0xffff1ff0
 8007c60:	fff88000 	.word	0xfff88000
 8007c64:	40015c00 	.word	0x40015c00

08007c68 <HAL_SAI_MspDeInit>:
}
 8007c68:	4770      	bx	lr

08007c6a <HAL_SAI_DeInit>:
  if(hsai == NULL)
 8007c6a:	b1e8      	cbz	r0, 8007ca8 <HAL_SAI_DeInit+0x3e>
{
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	4604      	mov	r4, r0
  hsai->State = HAL_SAI_STATE_BUSY;
 8007c70:	2302      	movs	r3, #2
 8007c72:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  hsai->Instance->IMR = 0;
 8007c76:	6803      	ldr	r3, [r0, #0]
 8007c78:	2500      	movs	r5, #0
 8007c7a:	611d      	str	r5, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007c7c:	6803      	ldr	r3, [r0, #0]
 8007c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c82:	619a      	str	r2, [r3, #24]
  SAI_Disable(hsai);
 8007c84:	f7ff fec8 	bl	8007a18 <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007c88:	6822      	ldr	r2, [r4, #0]
 8007c8a:	6853      	ldr	r3, [r2, #4]
 8007c8c:	f043 0308 	orr.w	r3, r3, #8
 8007c90:	6053      	str	r3, [r2, #4]
  HAL_SAI_MspDeInit(hsai);
 8007c92:	4620      	mov	r0, r4
 8007c94:	f7ff ffe8 	bl	8007c68 <HAL_SAI_MspDeInit>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007c98:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  hsai->State = HAL_SAI_STATE_RESET;
 8007c9c:	f884 507d 	strb.w	r5, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8007ca0:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
  return HAL_OK;
 8007ca4:	4628      	mov	r0, r5
}
 8007ca6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007ca8:	2001      	movs	r0, #1
}
 8007caa:	4770      	bx	lr

08007cac <HAL_SAI_Transmit_DMA>:
{
 8007cac:	b570      	push	{r4, r5, r6, lr}
  if((pData == NULL) || (Size == 0))
 8007cae:	4613      	mov	r3, r2
 8007cb0:	fab2 f282 	clz	r2, r2
 8007cb4:	0952      	lsrs	r2, r2, #5
 8007cb6:	2900      	cmp	r1, #0
 8007cb8:	bf08      	it	eq
 8007cba:	2201      	moveq	r2, #1
 8007cbc:	2a00      	cmp	r2, #0
 8007cbe:	d14b      	bne.n	8007d58 <HAL_SAI_Transmit_DMA+0xac>
 8007cc0:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_READY)
 8007cc2:	f894 507d 	ldrb.w	r5, [r4, #125]	; 0x7d
 8007cc6:	b2ed      	uxtb	r5, r5
 8007cc8:	2d01      	cmp	r5, #1
 8007cca:	d148      	bne.n	8007d5e <HAL_SAI_Transmit_DMA+0xb2>
    __HAL_LOCK(hsai);
 8007ccc:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 8007cd0:	2a01      	cmp	r2, #1
 8007cd2:	d046      	beq.n	8007d62 <HAL_SAI_Transmit_DMA+0xb6>
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 8007cda:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 8007cdc:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 8007ce0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8007cea:	2212      	movs	r2, #18
 8007cec:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007cf0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007cf2:	491d      	ldr	r1, [pc, #116]	; (8007d68 <HAL_SAI_Transmit_DMA+0xbc>)
 8007cf4:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8007cf6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007cf8:	491c      	ldr	r1, [pc, #112]	; (8007d6c <HAL_SAI_Transmit_DMA+0xc0>)
 8007cfa:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8007cfc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007cfe:	491c      	ldr	r1, [pc, #112]	; (8007d70 <HAL_SAI_Transmit_DMA+0xc4>)
 8007d00:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 8007d02:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007d04:	6513      	str	r3, [r2, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007d06:	6822      	ldr	r2, [r4, #0]
 8007d08:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8007d0c:	321c      	adds	r2, #28
 8007d0e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007d10:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007d12:	f7fc f982 	bl	800401a <HAL_DMA_Start_IT>
 8007d16:	4606      	mov	r6, r0
 8007d18:	b118      	cbz	r0, 8007d22 <HAL_SAI_Transmit_DMA+0x76>
      __HAL_UNLOCK(hsai);
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
      return  HAL_ERROR;
 8007d20:	e01b      	b.n	8007d5a <HAL_SAI_Transmit_DMA+0xae>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8007d2a:	d103      	bne.n	8007d34 <HAL_SAI_Transmit_DMA+0x88>
      __HAL_SAI_ENABLE(hsai);
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007d32:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007d34:	2100      	movs	r1, #0
 8007d36:	4620      	mov	r0, r4
 8007d38:	f7ff fe54 	bl	80079e4 <SAI_InterruptFlag>
 8007d3c:	6822      	ldr	r2, [r4, #0]
 8007d3e:	6913      	ldr	r3, [r2, #16]
 8007d40:	4303      	orrs	r3, r0
 8007d42:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007d44:	6822      	ldr	r2, [r4, #0]
 8007d46:	6813      	ldr	r3, [r2, #0]
 8007d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d4c:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8007d54:	4635      	mov	r5, r6
 8007d56:	e000      	b.n	8007d5a <HAL_SAI_Transmit_DMA+0xae>
    return  HAL_ERROR;
 8007d58:	2501      	movs	r5, #1
}
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8007d5e:	2502      	movs	r5, #2
 8007d60:	e7fb      	b.n	8007d5a <HAL_SAI_Transmit_DMA+0xae>
    __HAL_LOCK(hsai);
 8007d62:	2502      	movs	r5, #2
 8007d64:	e7f9      	b.n	8007d5a <HAL_SAI_Transmit_DMA+0xae>
 8007d66:	bf00      	nop
 8007d68:	08007e79 	.word	0x08007e79
 8007d6c:	08007e3d 	.word	0x08007e3d
 8007d70:	08007ec9 	.word	0x08007ec9

08007d74 <HAL_SAI_Receive_DMA>:
{
 8007d74:	b570      	push	{r4, r5, r6, lr}
  if((pData == NULL) || (Size == 0))
 8007d76:	4613      	mov	r3, r2
 8007d78:	fab2 f282 	clz	r2, r2
 8007d7c:	0952      	lsrs	r2, r2, #5
 8007d7e:	2900      	cmp	r1, #0
 8007d80:	bf08      	it	eq
 8007d82:	2201      	moveq	r2, #1
 8007d84:	2a00      	cmp	r2, #0
 8007d86:	d14b      	bne.n	8007e20 <HAL_SAI_Receive_DMA+0xac>
 8007d88:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_READY)
 8007d8a:	f894 507d 	ldrb.w	r5, [r4, #125]	; 0x7d
 8007d8e:	b2ed      	uxtb	r5, r5
 8007d90:	2d01      	cmp	r5, #1
 8007d92:	d148      	bne.n	8007e26 <HAL_SAI_Receive_DMA+0xb2>
    __HAL_LOCK(hsai);
 8007d94:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 8007d98:	2a01      	cmp	r2, #1
 8007d9a:	d046      	beq.n	8007e2a <HAL_SAI_Receive_DMA+0xb6>
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 8007da2:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 8007da4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 8007da8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007dac:	2300      	movs	r3, #0
 8007dae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007db2:	2222      	movs	r2, #34	; 0x22
 8007db4:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007db8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8007dba:	491d      	ldr	r1, [pc, #116]	; (8007e30 <HAL_SAI_Receive_DMA+0xbc>)
 8007dbc:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007dbe:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8007dc0:	491c      	ldr	r1, [pc, #112]	; (8007e34 <HAL_SAI_Receive_DMA+0xc0>)
 8007dc2:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007dc4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8007dc6:	491c      	ldr	r1, [pc, #112]	; (8007e38 <HAL_SAI_Receive_DMA+0xc4>)
 8007dc8:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 8007dca:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8007dcc:	6513      	str	r3, [r2, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007dce:	6821      	ldr	r1, [r4, #0]
 8007dd0:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8007dd4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007dd6:	311c      	adds	r1, #28
 8007dd8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007dda:	f7fc f91e 	bl	800401a <HAL_DMA_Start_IT>
 8007dde:	4606      	mov	r6, r0
 8007de0:	b118      	cbz	r0, 8007dea <HAL_SAI_Receive_DMA+0x76>
      __HAL_UNLOCK(hsai);
 8007de2:	2300      	movs	r3, #0
 8007de4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
      return  HAL_ERROR;
 8007de8:	e01b      	b.n	8007e22 <HAL_SAI_Receive_DMA+0xae>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8007df2:	d103      	bne.n	8007dfc <HAL_SAI_Receive_DMA+0x88>
      __HAL_SAI_ENABLE(hsai);
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007dfa:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f7ff fdf0 	bl	80079e4 <SAI_InterruptFlag>
 8007e04:	6822      	ldr	r2, [r4, #0]
 8007e06:	6913      	ldr	r3, [r2, #16]
 8007e08:	4303      	orrs	r3, r0
 8007e0a:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007e0c:	6822      	ldr	r2, [r4, #0]
 8007e0e:	6813      	ldr	r3, [r2, #0]
 8007e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e14:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8007e16:	2300      	movs	r3, #0
 8007e18:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8007e1c:	4635      	mov	r5, r6
 8007e1e:	e000      	b.n	8007e22 <HAL_SAI_Receive_DMA+0xae>
    return  HAL_ERROR;
 8007e20:	2501      	movs	r5, #1
}
 8007e22:	4628      	mov	r0, r5
 8007e24:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8007e26:	2502      	movs	r5, #2
 8007e28:	e7fb      	b.n	8007e22 <HAL_SAI_Receive_DMA+0xae>
    __HAL_LOCK(hsai);
 8007e2a:	2502      	movs	r5, #2
 8007e2c:	e7f9      	b.n	8007e22 <HAL_SAI_Receive_DMA+0xae>
 8007e2e:	bf00      	nop
 8007e30:	08007ebf 	.word	0x08007ebf
 8007e34:	08007e83 	.word	0x08007e83
 8007e38:	08007ec9 	.word	0x08007ec9

08007e3c <SAI_DMATxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007e3c:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 8007e3e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8007e40:	6803      	ldr	r3, [r0, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007e48:	d112      	bne.n	8007e70 <SAI_DMATxCplt+0x34>
  {
    hsai->XferCount = 0;
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    
    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007e50:	6822      	ldr	r2, [r4, #0]
 8007e52:	6813      	ldr	r3, [r2, #0]
 8007e54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e58:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f7ff fdc2 	bl	80079e4 <SAI_InterruptFlag>
 8007e60:	6822      	ldr	r2, [r4, #0]
 8007e62:	6913      	ldr	r3, [r2, #16]
 8007e64:	ea23 0300 	bic.w	r3, r3, r0
 8007e68:	6113      	str	r3, [r2, #16]
    
    hsai->State= HAL_SAI_STATE_READY;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_TxCpltCallback(hsai);
 8007e70:	4620      	mov	r0, r4
 8007e72:	f7f9 fc14 	bl	800169e <HAL_SAI_TxCpltCallback>
}
 8007e76:	bd10      	pop	{r4, pc}

08007e78 <SAI_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e78:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_TxHalfCpltCallback(hsai);
 8007e7a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007e7c:	f7f9 fc13 	bl	80016a6 <HAL_SAI_TxHalfCpltCallback>
}
 8007e80:	bd08      	pop	{r3, pc}

08007e82 <SAI_DMARxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007e82:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e84:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8007e86:	6803      	ldr	r3, [r0, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007e8e:	d112      	bne.n	8007eb6 <SAI_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007e90:	6822      	ldr	r2, [r4, #0]
 8007e92:	6813      	ldr	r3, [r2, #0]
 8007e94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e98:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f7ff fd9f 	bl	80079e4 <SAI_InterruptFlag>
 8007ea6:	6822      	ldr	r2, [r4, #0]
 8007ea8:	6913      	ldr	r3, [r2, #16]
 8007eaa:	ea23 0300 	bic.w	r3, r3, r0
 8007eae:	6113      	str	r3, [r2, #16]
    
    hsai->State = HAL_SAI_STATE_READY;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_RxCpltCallback(hsai);
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f7f9 fcb3 	bl	8001822 <HAL_SAI_RxCpltCallback>
}
 8007ebc:	bd10      	pop	{r4, pc}

08007ebe <SAI_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ebe:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_RxHalfCpltCallback(hsai);
 8007ec0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007ec2:	f7f9 fcb2 	bl	800182a <HAL_SAI_RxHalfCpltCallback>
}
 8007ec6:	bd08      	pop	{r3, pc}

08007ec8 <SAI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ec8:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007eca:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007ecc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8007ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8007ed8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d007      	beq.n	8007ef0 <SAI_DMAError+0x28>
 8007ee0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d003      	beq.n	8007ef0 <SAI_DMAError+0x28>

    /* Initialize XferCount */
    hsai->XferCount = 0U;
  }
  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f7f9 fca3 	bl	8001834 <HAL_SAI_ErrorCallback>
}
 8007eee:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007ef0:	6822      	ldr	r2, [r4, #0]
 8007ef2:	6813      	ldr	r3, [r2, #0]
 8007ef4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007ef8:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 8007efa:	4620      	mov	r0, r4
 8007efc:	f7ff fd8c 	bl	8007a18 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 8007f00:	2301      	movs	r3, #1
 8007f02:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    hsai->XferCount = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8007f0c:	e7ec      	b.n	8007ee8 <SAI_DMAError+0x20>

08007f0e <HAL_SAI_GetState>:
  return hsai->State;
 8007f0e:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 8007f12:	4770      	bx	lr

08007f14 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007f14:	b570      	push	{r4, r5, r6, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007f1e:	6800      	ldr	r0, [r0, #0]
 8007f20:	f001 fe5e 	bl	8009be0 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f24:	4605      	mov	r5, r0
 8007f26:	b110      	cbz	r0, 8007f2e <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 8007f28:	4628      	mov	r0, r5
 8007f2a:	b002      	add	sp, #8
 8007f2c:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007f2e:	6820      	ldr	r0, [r4, #0]
 8007f30:	f001 fe69 	bl	8009c06 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f34:	b938      	cbnz	r0, 8007f46 <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007f36:	2301      	movs	r3, #1
 8007f38:	64a3      	str	r3, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007f3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d00b      	beq.n	8007f58 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007f40:	462e      	mov	r6, r5
 8007f42:	4628      	mov	r0, r5
 8007f44:	e014      	b.n	8007f70 <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007f46:	2300      	movs	r3, #0
 8007f48:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007f4a:	6820      	ldr	r0, [r4, #0]
 8007f4c:	f001 fe48 	bl	8009be0 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d0f2      	beq.n	8007f3a <SD_PowerON+0x26>
      return errorstate;
 8007f54:	4605      	mov	r5, r0
 8007f56:	e7e7      	b.n	8007f28 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f58:	2100      	movs	r1, #0
 8007f5a:	6820      	ldr	r0, [r4, #0]
 8007f5c:	f001 fe6a 	bl	8009c34 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d0ed      	beq.n	8007f40 <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f64:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8007f68:	e7de      	b.n	8007f28 <SD_PowerON+0x14>
    count++;
 8007f6a:	9b01      	ldr	r3, [sp, #4]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007f70:	9a01      	ldr	r2, [sp, #4]
 8007f72:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d813      	bhi.n	8007fa2 <SD_PowerON+0x8e>
 8007f7a:	b996      	cbnz	r6, 8007fa2 <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	6820      	ldr	r0, [r4, #0]
 8007f80:	f001 fe58 	bl	8009c34 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f84:	b9e0      	cbnz	r0, 8007fc0 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007f86:	4912      	ldr	r1, [pc, #72]	; (8007fd0 <SD_PowerON+0xbc>)
 8007f88:	6820      	ldr	r0, [r4, #0]
 8007f8a:	f001 fe6b 	bl	8009c64 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f8e:	4606      	mov	r6, r0
 8007f90:	b9c0      	cbnz	r0, 8007fc4 <SD_PowerON+0xb0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007f92:	2100      	movs	r1, #0
 8007f94:	6820      	ldr	r0, [r4, #0]
 8007f96:	f001 fc6a 	bl	800986e <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007f9a:	0fc3      	lsrs	r3, r0, #31
 8007f9c:	d0e5      	beq.n	8007f6a <SD_PowerON+0x56>
 8007f9e:	461e      	mov	r6, r3
 8007fa0:	e7e3      	b.n	8007f6a <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007fa2:	9a01      	ldr	r2, [sp, #4]
 8007fa4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d80e      	bhi.n	8007fca <SD_PowerON+0xb6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007fac:	f010 4380 	ands.w	r3, r0, #1073741824	; 0x40000000
 8007fb0:	d002      	beq.n	8007fb8 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	6463      	str	r3, [r4, #68]	; 0x44
 8007fb6:	e7b7      	b.n	8007f28 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDSC;
 8007fb8:	2200      	movs	r2, #0
 8007fba:	6462      	str	r2, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 8007fbc:	461d      	mov	r5, r3
 8007fbe:	e7b3      	b.n	8007f28 <SD_PowerON+0x14>
      return errorstate;
 8007fc0:	4605      	mov	r5, r0
 8007fc2:	e7b1      	b.n	8007f28 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007fc4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8007fc8:	e7ae      	b.n	8007f28 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007fca:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8007fce:	e7ab      	b.n	8007f28 <SD_PowerON+0x14>
 8007fd0:	c1100000 	.word	0xc1100000

08007fd4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fd6:	b089      	sub	sp, #36	; 0x24
 8007fd8:	4604      	mov	r4, r0
 8007fda:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007fdc:	f7fb fe94 	bl	8003d08 <HAL_GetTick>
 8007fe0:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007fe8:	2108      	movs	r1, #8
 8007fea:	6820      	ldr	r0, [r4, #0]
 8007fec:	f001 fd4e 	bl	8009a8c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	b110      	cbz	r0, 8007ffa <SD_FindSCR+0x26>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	b009      	add	sp, #36	; 0x24
 8007ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007ffa:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007ffc:	0409      	lsls	r1, r1, #16
 8007ffe:	6820      	ldr	r0, [r4, #0]
 8008000:	f001 fe18 	bl	8009c34 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008004:	4605      	mov	r5, r0
 8008006:	2800      	cmp	r0, #0
 8008008:	d1f4      	bne.n	8007ff4 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800800a:	f04f 33ff 	mov.w	r3, #4294967295
 800800e:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8008010:	2308      	movs	r3, #8
 8008012:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008014:	2330      	movs	r3, #48	; 0x30
 8008016:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008018:	2302      	movs	r3, #2
 800801a:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800801c:	2300      	movs	r3, #0
 800801e:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008020:	2301      	movs	r3, #1
 8008022:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008024:	a902      	add	r1, sp, #8
 8008026:	6820      	ldr	r0, [r4, #0]
 8008028:	f001 fd1e 	bl	8009a68 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800802c:	6820      	ldr	r0, [r4, #0]
 800802e:	f001 fe4b 	bl	8009cc8 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008032:	4605      	mov	r5, r0
 8008034:	b158      	cbz	r0, 800804e <SD_FindSCR+0x7a>
 8008036:	e7dd      	b.n	8007ff4 <SD_FindSCR+0x20>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008038:	f001 fbf0 	bl	800981c <SDMMC_ReadFIFO>
 800803c:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
      index++;
 8008040:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008042:	f7fb fe61 	bl	8003d08 <HAL_GetTick>
 8008046:	1b83      	subs	r3, r0, r6
 8008048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804c:	d03d      	beq.n	80080ca <SD_FindSCR+0xf6>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800804e:	6820      	ldr	r0, [r4, #0]
 8008050:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008052:	f240 432a 	movw	r3, #1066	; 0x42a
 8008056:	421a      	tst	r2, r3
 8008058:	d104      	bne.n	8008064 <SD_FindSCR+0x90>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800805a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800805c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8008060:	d0ef      	beq.n	8008042 <SD_FindSCR+0x6e>
 8008062:	e7e9      	b.n	8008038 <SD_FindSCR+0x64>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008064:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008066:	f013 0f08 	tst.w	r3, #8
 800806a:	d125      	bne.n	80080b8 <SD_FindSCR+0xe4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800806c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800806e:	f013 0f02 	tst.w	r3, #2
 8008072:	d124      	bne.n	80080be <SD_FindSCR+0xea>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008074:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8008076:	f015 0520 	ands.w	r5, r5, #32
 800807a:	d123      	bne.n	80080c4 <SD_FindSCR+0xf0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800807c:	f240 533a 	movw	r3, #1338	; 0x53a
 8008080:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008082:	9a01      	ldr	r2, [sp, #4]
 8008084:	0213      	lsls	r3, r2, #8
 8008086:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800808a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800808e:	0a11      	lsrs	r1, r2, #8
 8008090:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008094:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008096:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800809a:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800809c:	9a00      	ldr	r2, [sp, #0]
 800809e:	0213      	lsls	r3, r2, #8
 80080a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80080a8:	0a11      	lsrs	r1, r2, #8
 80080aa:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80080ae:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80080b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80080b4:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 80080b6:	e79d      	b.n	8007ff4 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80080b8:	2508      	movs	r5, #8
 80080ba:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80080bc:	e79a      	b.n	8007ff4 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80080be:	2502      	movs	r5, #2
 80080c0:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80080c2:	e797      	b.n	8007ff4 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80080c4:	2520      	movs	r5, #32
 80080c6:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80080c8:	e794      	b.n	8007ff4 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 80080ca:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80080ce:	e791      	b.n	8007ff4 <SD_FindSCR+0x20>

080080d0 <SD_WideBus_Enable>:
{
 80080d0:	b510      	push	{r4, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 80080d6:	2100      	movs	r1, #0
 80080d8:	9100      	str	r1, [sp, #0]
 80080da:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80080dc:	6800      	ldr	r0, [r0, #0]
 80080de:	f001 fbc6 	bl	800986e <SDMMC_GetResponse>
 80080e2:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80080e6:	d113      	bne.n	8008110 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 80080e8:	4669      	mov	r1, sp
 80080ea:	4620      	mov	r0, r4
 80080ec:	f7ff ff72 	bl	8007fd4 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80080f0:	b980      	cbnz	r0, 8008114 <SD_WideBus_Enable+0x44>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80080f2:	9b01      	ldr	r3, [sp, #4]
 80080f4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80080f8:	d00e      	beq.n	8008118 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080fa:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80080fc:	0409      	lsls	r1, r1, #16
 80080fe:	6820      	ldr	r0, [r4, #0]
 8008100:	f001 fd98 	bl	8009c34 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008104:	b930      	cbnz	r0, 8008114 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008106:	2102      	movs	r1, #2
 8008108:	6820      	ldr	r0, [r4, #0]
 800810a:	f001 fdc5 	bl	8009c98 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 800810e:	e001      	b.n	8008114 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008110:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8008114:	b002      	add	sp, #8
 8008116:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008118:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800811c:	e7fa      	b.n	8008114 <SD_WideBus_Enable+0x44>

0800811e <SD_WideBus_Disable>:
{
 800811e:	b510      	push	{r4, lr}
 8008120:	b082      	sub	sp, #8
 8008122:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8008124:	2100      	movs	r1, #0
 8008126:	9100      	str	r1, [sp, #0]
 8008128:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800812a:	6800      	ldr	r0, [r0, #0]
 800812c:	f001 fb9f 	bl	800986e <SDMMC_GetResponse>
 8008130:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8008134:	d113      	bne.n	800815e <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8008136:	4669      	mov	r1, sp
 8008138:	4620      	mov	r0, r4
 800813a:	f7ff ff4b 	bl	8007fd4 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800813e:	b980      	cbnz	r0, 8008162 <SD_WideBus_Disable+0x44>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008140:	9b01      	ldr	r3, [sp, #4]
 8008142:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008146:	d00e      	beq.n	8008166 <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008148:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800814a:	0409      	lsls	r1, r1, #16
 800814c:	6820      	ldr	r0, [r4, #0]
 800814e:	f001 fd71 	bl	8009c34 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008152:	b930      	cbnz	r0, 8008162 <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008154:	2100      	movs	r1, #0
 8008156:	6820      	ldr	r0, [r4, #0]
 8008158:	f001 fd9e 	bl	8009c98 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 800815c:	e001      	b.n	8008162 <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800815e:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8008162:	b002      	add	sp, #8
 8008164:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008166:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800816a:	e7fa      	b.n	8008162 <SD_WideBus_Disable+0x44>

0800816c <SD_SendStatus>:
{
 800816c:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 800816e:	b181      	cbz	r1, 8008192 <SD_SendStatus+0x26>
 8008170:	4604      	mov	r4, r0
 8008172:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008174:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8008176:	0409      	lsls	r1, r1, #16
 8008178:	6800      	ldr	r0, [r0, #0]
 800817a:	f001 fdff 	bl	8009d7c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800817e:	4605      	mov	r5, r0
 8008180:	b108      	cbz	r0, 8008186 <SD_SendStatus+0x1a>
}
 8008182:	4628      	mov	r0, r5
 8008184:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008186:	2100      	movs	r1, #0
 8008188:	6820      	ldr	r0, [r4, #0]
 800818a:	f001 fb70 	bl	800986e <SDMMC_GetResponse>
 800818e:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8008190:	e7f7      	b.n	8008182 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8008192:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8008196:	e7f4      	b.n	8008182 <SD_SendStatus+0x16>

08008198 <HAL_SD_MspInit>:
}
 8008198:	4770      	bx	lr
	...

0800819c <HAL_SD_ReadBlocks>:
{
 800819c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a0:	b087      	sub	sp, #28
 80081a2:	4604      	mov	r4, r0
 80081a4:	460d      	mov	r5, r1
 80081a6:	4616      	mov	r6, r2
 80081a8:	4699      	mov	r9, r3
 80081aa:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80081ae:	f7fb fdab 	bl	8003d08 <HAL_GetTick>
  if(NULL == pData)
 80081b2:	b33d      	cbz	r5, 8008204 <HAL_SD_ReadBlocks+0x68>
 80081b4:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 80081b6:	f894 7034 	ldrb.w	r7, [r4, #52]	; 0x34
 80081ba:	b2ff      	uxtb	r7, r7
 80081bc:	2f01      	cmp	r7, #1
 80081be:	f040 8114 	bne.w	80083ea <HAL_SD_ReadBlocks+0x24e>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80081c2:	2300      	movs	r3, #0
 80081c4:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80081c6:	eb06 0309 	add.w	r3, r6, r9
 80081ca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d81f      	bhi.n	8008210 <HAL_SD_ReadBlocks+0x74>
    hsd->State = HAL_SD_STATE_BUSY;
 80081d0:	2303      	movs	r3, #3
 80081d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	2200      	movs	r2, #0
 80081da:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80081dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d000      	beq.n	80081e4 <HAL_SD_ReadBlocks+0x48>
      add *= 512U;
 80081e2:	0276      	lsls	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80081e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80081e8:	6820      	ldr	r0, [r4, #0]
 80081ea:	f001 fc4f 	bl	8009a8c <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80081ee:	b1a0      	cbz	r0, 800821a <HAL_SD_ReadBlocks+0x7e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081f0:	6823      	ldr	r3, [r4, #0]
 80081f2:	4982      	ldr	r1, [pc, #520]	; (80083fc <HAL_SD_ReadBlocks+0x260>)
 80081f4:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80081f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80081f8:	4303      	orrs	r3, r0
 80081fa:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80081fc:	2301      	movs	r3, #1
 80081fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8008202:	e0f7      	b.n	80083f4 <HAL_SD_ReadBlocks+0x258>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008204:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008206:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800820a:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800820c:	2701      	movs	r7, #1
 800820e:	e0f1      	b.n	80083f4 <HAL_SD_ReadBlocks+0x258>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008210:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008212:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008216:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8008218:	e0ec      	b.n	80083f4 <HAL_SD_ReadBlocks+0x258>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800821a:	f04f 33ff 	mov.w	r3, #4294967295
 800821e:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008220:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8008224:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008226:	2390      	movs	r3, #144	; 0x90
 8008228:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800822a:	2302      	movs	r3, #2
 800822c:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800822e:	2300      	movs	r3, #0
 8008230:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8008232:	2301      	movs	r3, #1
 8008234:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008236:	4669      	mov	r1, sp
 8008238:	6820      	ldr	r0, [r4, #0]
 800823a:	f001 fc15 	bl	8009a68 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 800823e:	f1b9 0f01 	cmp.w	r9, #1
 8008242:	d909      	bls.n	8008258 <HAL_SD_ReadBlocks+0xbc>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008244:	2302      	movs	r3, #2
 8008246:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008248:	4631      	mov	r1, r6
 800824a:	6820      	ldr	r0, [r4, #0]
 800824c:	f001 fc4e 	bl	8009aec <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008250:	b948      	cbnz	r0, 8008266 <HAL_SD_ReadBlocks+0xca>
    dataremaining = config.DataLength;
 8008252:	f8dd b004 	ldr.w	fp, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008256:	e02d      	b.n	80082b4 <HAL_SD_ReadBlocks+0x118>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008258:	2301      	movs	r3, #1
 800825a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800825c:	4631      	mov	r1, r6
 800825e:	6820      	ldr	r0, [r4, #0]
 8008260:	f001 fc2c 	bl	8009abc <SDMMC_CmdReadSingleBlock>
 8008264:	e7f4      	b.n	8008250 <HAL_SD_ReadBlocks+0xb4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	4a64      	ldr	r2, [pc, #400]	; (80083fc <HAL_SD_ReadBlocks+0x260>)
 800826a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800826c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800826e:	4318      	orrs	r0, r3
 8008270:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008272:	2301      	movs	r3, #1
 8008274:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008278:	2300      	movs	r3, #0
 800827a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800827c:	e0ba      	b.n	80083f4 <HAL_SD_ReadBlocks+0x258>
          data = SDMMC_ReadFIFO(hsd->Instance);
 800827e:	6820      	ldr	r0, [r4, #0]
 8008280:	f001 facc 	bl	800981c <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008284:	7028      	strb	r0, [r5, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008286:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800828a:	706b      	strb	r3, [r5, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800828c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8008290:	70ab      	strb	r3, [r5, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008292:	0e00      	lsrs	r0, r0, #24
 8008294:	70e8      	strb	r0, [r5, #3]
          tempbuff++;
 8008296:	3504      	adds	r5, #4
          dataremaining--;
 8008298:	f1ab 0b04 	sub.w	fp, fp, #4
        for(count = 0U; count < 8U; count++)
 800829c:	3601      	adds	r6, #1
 800829e:	2e07      	cmp	r6, #7
 80082a0:	d9ed      	bls.n	800827e <HAL_SD_ReadBlocks+0xe2>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80082a2:	f7fb fd31 	bl	8003d08 <HAL_GetTick>
 80082a6:	eba0 0008 	sub.w	r0, r0, r8
 80082aa:	4550      	cmp	r0, sl
 80082ac:	d20f      	bcs.n	80082ce <HAL_SD_ReadBlocks+0x132>
 80082ae:	f1ba 0f00 	cmp.w	sl, #0
 80082b2:	d00c      	beq.n	80082ce <HAL_SD_ReadBlocks+0x132>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80082b4:	6820      	ldr	r0, [r4, #0]
 80082b6:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80082b8:	f416 7695 	ands.w	r6, r6, #298	; 0x12a
 80082bc:	d115      	bne.n	80082ea <HAL_SD_ReadBlocks+0x14e>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80082be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80082c0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80082c4:	d0ed      	beq.n	80082a2 <HAL_SD_ReadBlocks+0x106>
 80082c6:	f1bb 0f00 	cmp.w	fp, #0
 80082ca:	d0ea      	beq.n	80082a2 <HAL_SD_ReadBlocks+0x106>
 80082cc:	e7e7      	b.n	800829e <HAL_SD_ReadBlocks+0x102>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	4a4a      	ldr	r2, [pc, #296]	; (80083fc <HAL_SD_ReadBlocks+0x260>)
 80082d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80082d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80082d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082da:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80082dc:	2301      	movs	r3, #1
 80082de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80082e2:	2300      	movs	r3, #0
 80082e4:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80082e6:	2703      	movs	r7, #3
 80082e8:	e084      	b.n	80083f4 <HAL_SD_ReadBlocks+0x258>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80082ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80082ec:	f413 7f80 	tst.w	r3, #256	; 0x100
 80082f0:	d005      	beq.n	80082fe <HAL_SD_ReadBlocks+0x162>
 80082f2:	f1b9 0f01 	cmp.w	r9, #1
 80082f6:	d902      	bls.n	80082fe <HAL_SD_ReadBlocks+0x162>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80082f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d138      	bne.n	8008370 <HAL_SD_ReadBlocks+0x1d4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008302:	f012 0f08 	tst.w	r2, #8
 8008306:	d144      	bne.n	8008392 <HAL_SD_ReadBlocks+0x1f6>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800830a:	f012 0f02 	tst.w	r2, #2
 800830e:	d14c      	bne.n	80083aa <HAL_SD_ReadBlocks+0x20e>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008312:	f012 0f20 	tst.w	r2, #32
 8008316:	d154      	bne.n	80083c2 <HAL_SD_ReadBlocks+0x226>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008318:	6820      	ldr	r0, [r4, #0]
 800831a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800831c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8008320:	d05b      	beq.n	80083da <HAL_SD_ReadBlocks+0x23e>
 8008322:	f1bb 0f00 	cmp.w	fp, #0
 8008326:	d058      	beq.n	80083da <HAL_SD_ReadBlocks+0x23e>
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008328:	f001 fa78 	bl	800981c <SDMMC_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 800832c:	7028      	strb	r0, [r5, #0]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800832e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8008332:	706b      	strb	r3, [r5, #1]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008334:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8008338:	70ab      	strb	r3, [r5, #2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800833a:	0e00      	lsrs	r0, r0, #24
 800833c:	70e8      	strb	r0, [r5, #3]
      tempbuff++;
 800833e:	3504      	adds	r5, #4
      dataremaining--;
 8008340:	f1ab 0b04 	sub.w	fp, fp, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008344:	f7fb fce0 	bl	8003d08 <HAL_GetTick>
 8008348:	eba0 0008 	sub.w	r0, r0, r8
 800834c:	4550      	cmp	r0, sl
 800834e:	d202      	bcs.n	8008356 <HAL_SD_ReadBlocks+0x1ba>
 8008350:	f1ba 0f00 	cmp.w	sl, #0
 8008354:	d1e0      	bne.n	8008318 <HAL_SD_ReadBlocks+0x17c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	4a28      	ldr	r2, [pc, #160]	; (80083fc <HAL_SD_ReadBlocks+0x260>)
 800835a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800835c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800835e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008362:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008364:	2301      	movs	r3, #1
 8008366:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800836a:	2300      	movs	r3, #0
 800836c:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 800836e:	e041      	b.n	80083f4 <HAL_SD_ReadBlocks+0x258>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008370:	f001 fc04 	bl	8009b7c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8008374:	4603      	mov	r3, r0
 8008376:	2800      	cmp	r0, #0
 8008378:	d0c1      	beq.n	80082fe <HAL_SD_ReadBlocks+0x162>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800837a:	6822      	ldr	r2, [r4, #0]
 800837c:	491f      	ldr	r1, [pc, #124]	; (80083fc <HAL_SD_ReadBlocks+0x260>)
 800837e:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008380:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008382:	4313      	orrs	r3, r2
 8008384:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008386:	2301      	movs	r3, #1
 8008388:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800838c:	2300      	movs	r3, #0
 800838e:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8008390:	e030      	b.n	80083f4 <HAL_SD_ReadBlocks+0x258>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008392:	4a1a      	ldr	r2, [pc, #104]	; (80083fc <HAL_SD_ReadBlocks+0x260>)
 8008394:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008396:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008398:	f043 0308 	orr.w	r3, r3, #8
 800839c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800839e:	2301      	movs	r3, #1
 80083a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083a4:	2300      	movs	r3, #0
 80083a6:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80083a8:	e024      	b.n	80083f4 <HAL_SD_ReadBlocks+0x258>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083aa:	4a14      	ldr	r2, [pc, #80]	; (80083fc <HAL_SD_ReadBlocks+0x260>)
 80083ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80083ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80083b0:	f043 0302 	orr.w	r3, r3, #2
 80083b4:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083b6:	2301      	movs	r3, #1
 80083b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083bc:	2300      	movs	r3, #0
 80083be:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80083c0:	e018      	b.n	80083f4 <HAL_SD_ReadBlocks+0x258>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083c2:	4a0e      	ldr	r2, [pc, #56]	; (80083fc <HAL_SD_ReadBlocks+0x260>)
 80083c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80083c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80083c8:	f043 0320 	orr.w	r3, r3, #32
 80083cc:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083ce:	2301      	movs	r3, #1
 80083d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083d4:	2300      	movs	r3, #0
 80083d6:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80083d8:	e00c      	b.n	80083f4 <HAL_SD_ReadBlocks+0x258>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80083da:	f240 533a 	movw	r3, #1338	; 0x53a
 80083de:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80083e0:	2301      	movs	r3, #1
 80083e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 80083e6:	2700      	movs	r7, #0
 80083e8:	e004      	b.n	80083f4 <HAL_SD_ReadBlocks+0x258>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80083ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80083ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083f0:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80083f2:	2701      	movs	r7, #1
}
 80083f4:	4638      	mov	r0, r7
 80083f6:	b007      	add	sp, #28
 80083f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083fc:	004005ff 	.word	0x004005ff

08008400 <HAL_SD_WriteBlocks>:
{
 8008400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008404:	b089      	sub	sp, #36	; 0x24
 8008406:	4604      	mov	r4, r0
 8008408:	460d      	mov	r5, r1
 800840a:	4616      	mov	r6, r2
 800840c:	4699      	mov	r9, r3
  uint32_t tickstart = HAL_GetTick();
 800840e:	f7fb fc7b 	bl	8003d08 <HAL_GetTick>
  if(NULL == pData)
 8008412:	b33d      	cbz	r5, 8008464 <HAL_SD_WriteBlocks+0x64>
 8008414:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8008416:	f894 7034 	ldrb.w	r7, [r4, #52]	; 0x34
 800841a:	b2ff      	uxtb	r7, r7
 800841c:	2f01      	cmp	r7, #1
 800841e:	f040 80ee 	bne.w	80085fe <HAL_SD_WriteBlocks+0x1fe>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008422:	2300      	movs	r3, #0
 8008424:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008426:	eb06 0309 	add.w	r3, r6, r9
 800842a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800842c:	4293      	cmp	r3, r2
 800842e:	d81f      	bhi.n	8008470 <HAL_SD_WriteBlocks+0x70>
    hsd->State = HAL_SD_STATE_BUSY;
 8008430:	2303      	movs	r3, #3
 8008432:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	2200      	movs	r2, #0
 800843a:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800843c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800843e:	2b01      	cmp	r3, #1
 8008440:	d000      	beq.n	8008444 <HAL_SD_WriteBlocks+0x44>
      add *= 512U;
 8008442:	0276      	lsls	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008448:	6820      	ldr	r0, [r4, #0]
 800844a:	f001 fb1f 	bl	8009a8c <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 800844e:	b1a0      	cbz	r0, 800847a <HAL_SD_WriteBlocks+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	496f      	ldr	r1, [pc, #444]	; (8008610 <HAL_SD_WriteBlocks+0x210>)
 8008454:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008456:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008458:	4303      	orrs	r3, r0
 800845a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800845c:	2301      	movs	r3, #1
 800845e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8008462:	e0d1      	b.n	8008608 <HAL_SD_WriteBlocks+0x208>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008464:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008466:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800846a:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800846c:	2701      	movs	r7, #1
 800846e:	e0cb      	b.n	8008608 <HAL_SD_WriteBlocks+0x208>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008470:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008472:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008476:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8008478:	e0c6      	b.n	8008608 <HAL_SD_WriteBlocks+0x208>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800847a:	f04f 33ff 	mov.w	r3, #4294967295
 800847e:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008480:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8008484:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008486:	2390      	movs	r3, #144	; 0x90
 8008488:	9304      	str	r3, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800848a:	2300      	movs	r3, #0
 800848c:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800848e:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8008490:	2301      	movs	r3, #1
 8008492:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008494:	a902      	add	r1, sp, #8
 8008496:	6820      	ldr	r0, [r4, #0]
 8008498:	f001 fae6 	bl	8009a68 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 800849c:	f1b9 0f01 	cmp.w	r9, #1
 80084a0:	d90c      	bls.n	80084bc <HAL_SD_WriteBlocks+0xbc>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80084a2:	2320      	movs	r3, #32
 80084a4:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80084a6:	4631      	mov	r1, r6
 80084a8:	6820      	ldr	r0, [r4, #0]
 80084aa:	f001 fb4f 	bl	8009b4c <SDMMC_CmdWriteMultiBlock>
 80084ae:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 80084b0:	f1ba 0f00 	cmp.w	sl, #0
 80084b4:	d10a      	bne.n	80084cc <HAL_SD_WriteBlocks+0xcc>
    dataremaining = config.DataLength;
 80084b6:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80084ba:	e031      	b.n	8008520 <HAL_SD_WriteBlocks+0x120>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80084bc:	2310      	movs	r3, #16
 80084be:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80084c0:	4631      	mov	r1, r6
 80084c2:	6820      	ldr	r0, [r4, #0]
 80084c4:	f001 fb2a 	bl	8009b1c <SDMMC_CmdWriteSingleBlock>
 80084c8:	4682      	mov	sl, r0
 80084ca:	e7f1      	b.n	80084b0 <HAL_SD_WriteBlocks+0xb0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	4a50      	ldr	r2, [pc, #320]	; (8008610 <HAL_SD_WriteBlocks+0x210>)
 80084d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80084d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80084d4:	ea40 000a 	orr.w	r0, r0, sl
 80084d8:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80084da:	2301      	movs	r3, #1
 80084dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80084e0:	2300      	movs	r3, #0
 80084e2:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80084e4:	e090      	b.n	8008608 <HAL_SD_WriteBlocks+0x208>
          data = (uint32_t)(*tempbuff);
 80084e6:	782b      	ldrb	r3, [r5, #0]
          data |= ((uint32_t)(*tempbuff) << 8U);
 80084e8:	786a      	ldrb	r2, [r5, #1]
 80084ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
          data |= ((uint32_t)(*tempbuff) << 16U);
 80084ee:	78aa      	ldrb	r2, [r5, #2]
 80084f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
          data |= ((uint32_t)(*tempbuff) << 24U);
 80084f4:	78ea      	ldrb	r2, [r5, #3]
 80084f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80084fa:	9301      	str	r3, [sp, #4]
          tempbuff++;
 80084fc:	3504      	adds	r5, #4
          dataremaining--;
 80084fe:	f1ab 0b04 	sub.w	fp, fp, #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008502:	a901      	add	r1, sp, #4
 8008504:	6820      	ldr	r0, [r4, #0]
 8008506:	f001 f98c 	bl	8009822 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800850a:	3601      	adds	r6, #1
 800850c:	2e07      	cmp	r6, #7
 800850e:	d9ea      	bls.n	80084e6 <HAL_SD_WriteBlocks+0xe6>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008510:	f7fb fbfa 	bl	8003d08 <HAL_GetTick>
 8008514:	eba0 0008 	sub.w	r0, r0, r8
 8008518:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800851a:	4298      	cmp	r0, r3
 800851c:	d20d      	bcs.n	800853a <HAL_SD_WriteBlocks+0x13a>
 800851e:	b163      	cbz	r3, 800853a <HAL_SD_WriteBlocks+0x13a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008520:	6820      	ldr	r0, [r4, #0]
 8008522:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8008524:	f416 768d 	ands.w	r6, r6, #282	; 0x11a
 8008528:	d115      	bne.n	8008556 <HAL_SD_WriteBlocks+0x156>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800852a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800852c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008530:	d0ee      	beq.n	8008510 <HAL_SD_WriteBlocks+0x110>
 8008532:	f1bb 0f00 	cmp.w	fp, #0
 8008536:	d0eb      	beq.n	8008510 <HAL_SD_WriteBlocks+0x110>
 8008538:	e7e8      	b.n	800850c <HAL_SD_WriteBlocks+0x10c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	4a34      	ldr	r2, [pc, #208]	; (8008610 <HAL_SD_WriteBlocks+0x210>)
 800853e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008540:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008542:	ea40 000a 	orr.w	r0, r0, sl
 8008546:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008548:	2301      	movs	r3, #1
 800854a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800854e:	2300      	movs	r3, #0
 8008550:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8008552:	2703      	movs	r7, #3
 8008554:	e058      	b.n	8008608 <HAL_SD_WriteBlocks+0x208>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008556:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008558:	f413 7f80 	tst.w	r3, #256	; 0x100
 800855c:	d005      	beq.n	800856a <HAL_SD_WriteBlocks+0x16a>
 800855e:	f1b9 0f01 	cmp.w	r9, #1
 8008562:	d902      	bls.n	800856a <HAL_SD_WriteBlocks+0x16a>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008564:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008566:	2b03      	cmp	r3, #3
 8008568:	d118      	bne.n	800859c <HAL_SD_WriteBlocks+0x19c>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800856e:	f012 0f08 	tst.w	r2, #8
 8008572:	d124      	bne.n	80085be <HAL_SD_WriteBlocks+0x1be>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008576:	f012 0f02 	tst.w	r2, #2
 800857a:	d12c      	bne.n	80085d6 <HAL_SD_WriteBlocks+0x1d6>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800857c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800857e:	f012 0f10 	tst.w	r2, #16
 8008582:	d034      	beq.n	80085ee <HAL_SD_WriteBlocks+0x1ee>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008584:	4a22      	ldr	r2, [pc, #136]	; (8008610 <HAL_SD_WriteBlocks+0x210>)
 8008586:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008588:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800858a:	f043 0310 	orr.w	r3, r3, #16
 800858e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008590:	2301      	movs	r3, #1
 8008592:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008596:	2300      	movs	r3, #0
 8008598:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800859a:	e035      	b.n	8008608 <HAL_SD_WriteBlocks+0x208>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800859c:	f001 faee 	bl	8009b7c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80085a0:	4603      	mov	r3, r0
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d0e1      	beq.n	800856a <HAL_SD_WriteBlocks+0x16a>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085a6:	6822      	ldr	r2, [r4, #0]
 80085a8:	4919      	ldr	r1, [pc, #100]	; (8008610 <HAL_SD_WriteBlocks+0x210>)
 80085aa:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80085ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80085ae:	4313      	orrs	r3, r2
 80085b0:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80085b2:	2301      	movs	r3, #1
 80085b4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80085b8:	2300      	movs	r3, #0
 80085ba:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 80085bc:	e024      	b.n	8008608 <HAL_SD_WriteBlocks+0x208>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085be:	4a14      	ldr	r2, [pc, #80]	; (8008610 <HAL_SD_WriteBlocks+0x210>)
 80085c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80085c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085c4:	f043 0308 	orr.w	r3, r3, #8
 80085c8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085ca:	2301      	movs	r3, #1
 80085cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085d0:	2300      	movs	r3, #0
 80085d2:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80085d4:	e018      	b.n	8008608 <HAL_SD_WriteBlocks+0x208>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085d6:	4a0e      	ldr	r2, [pc, #56]	; (8008610 <HAL_SD_WriteBlocks+0x210>)
 80085d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80085da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085dc:	f043 0302 	orr.w	r3, r3, #2
 80085e0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085e2:	2301      	movs	r3, #1
 80085e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085e8:	2300      	movs	r3, #0
 80085ea:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80085ec:	e00c      	b.n	8008608 <HAL_SD_WriteBlocks+0x208>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80085ee:	f240 523a 	movw	r2, #1338	; 0x53a
 80085f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80085f4:	2301      	movs	r3, #1
 80085f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 80085fa:	2700      	movs	r7, #0
 80085fc:	e004      	b.n	8008608 <HAL_SD_WriteBlocks+0x208>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80085fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008600:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008604:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8008606:	2701      	movs	r7, #1
}
 8008608:	4638      	mov	r0, r7
 800860a:	b009      	add	sp, #36	; 0x24
 800860c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008610:	004005ff 	.word	0x004005ff

08008614 <HAL_SD_GetCardCSD>:
{
 8008614:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008616:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008618:	0f9b      	lsrs	r3, r3, #30
 800861a:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800861c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800861e:	f3c3 6383 	ubfx	r3, r3, #26, #4
 8008622:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008624:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 8008628:	f003 0303 	and.w	r3, r3, #3
 800862c:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800862e:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8008632:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008634:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 8008638:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800863a:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 800863e:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008640:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8008642:	0d1b      	lsrs	r3, r3, #20
 8008644:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008646:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800864a:	f003 030f 	and.w	r3, r3, #15
 800864e:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008650:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8008652:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8008656:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008658:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800865a:	f3c3 3380 	ubfx	r3, r3, #14, #1
 800865e:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008660:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8008662:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8008666:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008668:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800866a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800866e:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008670:	2300      	movs	r3, #0
 8008672:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8008674:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008676:	2b00      	cmp	r3, #0
 8008678:	f040 8088 	bne.w	800878c <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800867c:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800867e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008682:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 8008686:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8008688:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800868c:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800868e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8008690:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 8008694:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008696:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 800869a:	f003 0307 	and.w	r3, r3, #7
 800869e:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80086a0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80086a2:	f3c3 5342 	ubfx	r3, r3, #21, #3
 80086a6:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80086a8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80086aa:	f3c3 4382 	ubfx	r3, r3, #18, #3
 80086ae:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80086b0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80086b2:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 80086b6:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80086b8:	690b      	ldr	r3, [r1, #16]
 80086ba:	3301      	adds	r3, #1
 80086bc:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80086be:	7e0a      	ldrb	r2, [r1, #24]
 80086c0:	f002 0207 	and.w	r2, r2, #7
 80086c4:	3202      	adds	r2, #2
 80086c6:	fa03 f202 	lsl.w	r2, r3, r2
 80086ca:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80086cc:	7a0b      	ldrb	r3, [r1, #8]
 80086ce:	f003 040f 	and.w	r4, r3, #15
 80086d2:	2301      	movs	r3, #1
 80086d4:	40a3      	lsls	r3, r4
 80086d6:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80086d8:	0a5b      	lsrs	r3, r3, #9
 80086da:	fb03 f302 	mul.w	r3, r3, r2
 80086de:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80086e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086e4:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80086e6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80086e8:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80086ec:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80086ee:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80086f0:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 80086f4:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80086f6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80086f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086fc:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80086fe:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8008700:	0fdb      	lsrs	r3, r3, #31
 8008702:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008704:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8008706:	f3c3 7341 	ubfx	r3, r3, #29, #2
 800870a:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800870c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800870e:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8008712:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008714:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8008716:	f3c3 5383 	ubfx	r3, r3, #22, #4
 800871a:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800871c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800871e:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8008722:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800872c:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 8008730:	f002 0201 	and.w	r2, r2, #1
 8008734:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008738:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800873a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800873e:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008742:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8008744:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8008748:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800874c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800874e:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8008752:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008756:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8008758:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800875c:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008760:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8008762:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8008766:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800876a:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800876c:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8008770:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008774:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8008776:	f3c2 0246 	ubfx	r2, r2, #1, #7
 800877a:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800877e:	2201      	movs	r2, #1
 8008780:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 8008784:	4618      	mov	r0, r3
}
 8008786:	f85d 4b04 	ldr.w	r4, [sp], #4
 800878a:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800878c:	2b01      	cmp	r3, #1
 800878e:	d111      	bne.n	80087b4 <HAL_SD_GetCardCSD+0x1a0>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008790:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8008792:	041b      	lsls	r3, r3, #16
 8008794:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8008798:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 800879c:	4313      	orrs	r3, r2
 800879e:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80087a0:	690b      	ldr	r3, [r1, #16]
 80087a2:	3301      	adds	r3, #1
 80087a4:	029b      	lsls	r3, r3, #10
 80087a6:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80087a8:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80087aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087ae:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80087b0:	6603      	str	r3, [r0, #96]	; 0x60
 80087b2:	e798      	b.n	80086e6 <HAL_SD_GetCardCSD+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087b4:	6803      	ldr	r3, [r0, #0]
 80087b6:	4a05      	ldr	r2, [pc, #20]	; (80087cc <HAL_SD_GetCardCSD+0x1b8>)
 80087b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80087bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087c0:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80087c2:	2301      	movs	r3, #1
 80087c4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80087c8:	4618      	mov	r0, r3
 80087ca:	e7dc      	b.n	8008786 <HAL_SD_GetCardCSD+0x172>
 80087cc:	004005ff 	.word	0x004005ff

080087d0 <SD_InitCard>:
{
 80087d0:	b570      	push	{r4, r5, r6, lr}
 80087d2:	b090      	sub	sp, #64	; 0x40
 80087d4:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 80087d6:	2301      	movs	r3, #1
 80087d8:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80087dc:	6800      	ldr	r0, [r0, #0]
 80087de:	f001 f82d 	bl	800983c <SDMMC_GetPowerState>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d06c      	beq.n	80088c0 <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80087e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80087e8:	2b03      	cmp	r3, #3
 80087ea:	d145      	bne.n	8008878 <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80087ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	d15d      	bne.n	80088ae <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80087f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80087f4:	2b03      	cmp	r3, #3
 80087f6:	d01d      	beq.n	8008834 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 80087f8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80087fc:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80087fe:	0409      	lsls	r1, r1, #16
 8008800:	6820      	ldr	r0, [r4, #0]
 8008802:	f001 fa8e 	bl	8009d22 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008806:	4605      	mov	r5, r0
 8008808:	2800      	cmp	r0, #0
 800880a:	d15b      	bne.n	80088c4 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800880c:	2100      	movs	r1, #0
 800880e:	6820      	ldr	r0, [r4, #0]
 8008810:	f001 f82d 	bl	800986e <SDMMC_GetResponse>
 8008814:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008816:	2104      	movs	r1, #4
 8008818:	6820      	ldr	r0, [r4, #0]
 800881a:	f001 f828 	bl	800986e <SDMMC_GetResponse>
 800881e:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008820:	2108      	movs	r1, #8
 8008822:	6820      	ldr	r0, [r4, #0]
 8008824:	f001 f823 	bl	800986e <SDMMC_GetResponse>
 8008828:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800882a:	210c      	movs	r1, #12
 800882c:	6820      	ldr	r0, [r4, #0]
 800882e:	f001 f81e 	bl	800986e <SDMMC_GetResponse>
 8008832:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008834:	2104      	movs	r1, #4
 8008836:	6820      	ldr	r0, [r4, #0]
 8008838:	f001 f819 	bl	800986e <SDMMC_GetResponse>
 800883c:	0d00      	lsrs	r0, r0, #20
 800883e:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008840:	a905      	add	r1, sp, #20
 8008842:	4620      	mov	r0, r4
 8008844:	f7ff fee6 	bl	8008614 <HAL_SD_GetCardCSD>
 8008848:	2800      	cmp	r0, #0
 800884a:	d13e      	bne.n	80088ca <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800884c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800884e:	0412      	lsls	r2, r2, #16
 8008850:	2300      	movs	r3, #0
 8008852:	6820      	ldr	r0, [r4, #0]
 8008854:	f001 f9ac 	bl	8009bb0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008858:	4605      	mov	r5, r0
 800885a:	bb98      	cbnz	r0, 80088c4 <SD_InitCard+0xf4>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800885c:	4623      	mov	r3, r4
 800885e:	f853 6b10 	ldr.w	r6, [r3], #16
 8008862:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008866:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800886a:	3404      	adds	r4, #4
 800886c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8008870:	4630      	mov	r0, r6
 8008872:	f000 ffb7 	bl	80097e4 <SDMMC_Init>
  return HAL_SD_ERROR_NONE;
 8008876:	e025      	b.n	80088c4 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008878:	6820      	ldr	r0, [r4, #0]
 800887a:	f001 fa3d 	bl	8009cf8 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800887e:	4605      	mov	r5, r0
 8008880:	bb00      	cbnz	r0, 80088c4 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008882:	2100      	movs	r1, #0
 8008884:	6820      	ldr	r0, [r4, #0]
 8008886:	f000 fff2 	bl	800986e <SDMMC_GetResponse>
 800888a:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800888c:	2104      	movs	r1, #4
 800888e:	6820      	ldr	r0, [r4, #0]
 8008890:	f000 ffed 	bl	800986e <SDMMC_GetResponse>
 8008894:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008896:	2108      	movs	r1, #8
 8008898:	6820      	ldr	r0, [r4, #0]
 800889a:	f000 ffe8 	bl	800986e <SDMMC_GetResponse>
 800889e:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80088a0:	210c      	movs	r1, #12
 80088a2:	6820      	ldr	r0, [r4, #0]
 80088a4:	f000 ffe3 	bl	800986e <SDMMC_GetResponse>
 80088a8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 80088ac:	e79e      	b.n	80087ec <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80088ae:	f10d 0112 	add.w	r1, sp, #18
 80088b2:	6820      	ldr	r0, [r4, #0]
 80088b4:	f001 fa4a 	bl	8009d4c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80088b8:	4605      	mov	r5, r0
 80088ba:	2800      	cmp	r0, #0
 80088bc:	d099      	beq.n	80087f2 <SD_InitCard+0x22>
 80088be:	e001      	b.n	80088c4 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80088c0:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 80088c4:	4628      	mov	r0, r5
 80088c6:	b010      	add	sp, #64	; 0x40
 80088c8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088ca:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80088ce:	e7f9      	b.n	80088c4 <SD_InitCard+0xf4>

080088d0 <HAL_SD_InitCard>:
{
 80088d0:	b530      	push	{r4, r5, lr}
 80088d2:	b08b      	sub	sp, #44	; 0x2c
 80088d4:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80088d6:	2300      	movs	r3, #0
 80088d8:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80088da:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80088dc:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80088de:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80088e0:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80088e2:	2376      	movs	r3, #118	; 0x76
 80088e4:	9309      	str	r3, [sp, #36]	; 0x24
  status = SDMMC_Init(hsd->Instance, Init);
 80088e6:	ab0a      	add	r3, sp, #40	; 0x28
 80088e8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80088ec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80088f0:	ab04      	add	r3, sp, #16
 80088f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088f4:	6820      	ldr	r0, [r4, #0]
 80088f6:	f000 ff75 	bl	80097e4 <SDMMC_Init>
  if(status != HAL_OK)
 80088fa:	b118      	cbz	r0, 8008904 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 80088fc:	2501      	movs	r5, #1
}
 80088fe:	4628      	mov	r0, r5
 8008900:	b00b      	add	sp, #44	; 0x2c
 8008902:	bd30      	pop	{r4, r5, pc}
 8008904:	4605      	mov	r5, r0
  __HAL_SD_DISABLE(hsd);
 8008906:	6822      	ldr	r2, [r4, #0]
 8008908:	6853      	ldr	r3, [r2, #4]
 800890a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800890e:	6053      	str	r3, [r2, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008910:	6820      	ldr	r0, [r4, #0]
 8008912:	f000 ff8b 	bl	800982c <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8008916:	6822      	ldr	r2, [r4, #0]
 8008918:	6853      	ldr	r3, [r2, #4]
 800891a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800891e:	6053      	str	r3, [r2, #4]
  errorstate = SD_PowerON(hsd);
 8008920:	4620      	mov	r0, r4
 8008922:	f7ff faf7 	bl	8007f14 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008926:	b130      	cbz	r0, 8008936 <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 8008928:	2501      	movs	r5, #1
 800892a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800892e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008930:	4303      	orrs	r3, r0
 8008932:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8008934:	e7e3      	b.n	80088fe <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 8008936:	4620      	mov	r0, r4
 8008938:	f7ff ff4a 	bl	80087d0 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 800893c:	2800      	cmp	r0, #0
 800893e:	d0de      	beq.n	80088fe <HAL_SD_InitCard+0x2e>
    hsd->State = HAL_SD_STATE_READY;
 8008940:	2501      	movs	r5, #1
 8008942:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008946:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008948:	4303      	orrs	r3, r0
 800894a:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800894c:	e7d7      	b.n	80088fe <HAL_SD_InitCard+0x2e>

0800894e <HAL_SD_Init>:
  if(hsd == NULL)
 800894e:	b1a8      	cbz	r0, 800897c <HAL_SD_Init+0x2e>
{
 8008950:	b510      	push	{r4, lr}
 8008952:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8008954:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8008958:	b163      	cbz	r3, 8008974 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 800895a:	2303      	movs	r3, #3
 800895c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008960:	4620      	mov	r0, r4
 8008962:	f7ff ffb5 	bl	80088d0 <HAL_SD_InitCard>
 8008966:	b958      	cbnz	r0, 8008980 <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008968:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800896a:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800896c:	2301      	movs	r3, #1
 800896e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8008972:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8008974:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8008976:	f7ff fc0f 	bl	8008198 <HAL_SD_MspInit>
 800897a:	e7ee      	b.n	800895a <HAL_SD_Init+0xc>
    return HAL_ERROR;
 800897c:	2001      	movs	r0, #1
}
 800897e:	4770      	bx	lr
    return HAL_ERROR;
 8008980:	2001      	movs	r0, #1
 8008982:	e7f6      	b.n	8008972 <HAL_SD_Init+0x24>

08008984 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008984:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008986:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008988:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800898a:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800898c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800898e:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008990:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008992:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008994:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008996:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008998:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800899a:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800899c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800899e:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80089a0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80089a2:	61cb      	str	r3, [r1, #28]
}
 80089a4:	2000      	movs	r0, #0
 80089a6:	4770      	bx	lr

080089a8 <HAL_SD_ConfigWideBusOperation>:
{
 80089a8:	b530      	push	{r4, r5, lr}
 80089aa:	b08b      	sub	sp, #44	; 0x2c
 80089ac:	4604      	mov	r4, r0
 80089ae:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80089b0:	2303      	movs	r3, #3
 80089b2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 80089b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80089b8:	2b03      	cmp	r3, #3
 80089ba:	d01c      	beq.n	80089f6 <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80089bc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80089c0:	d008      	beq.n	80089d4 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80089c2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80089c6:	d00a      	beq.n	80089de <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80089c8:	b179      	cbz	r1, 80089ea <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80089ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80089cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089d0:	6383      	str	r3, [r0, #56]	; 0x38
 80089d2:	e014      	b.n	80089fe <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80089d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089da:	6383      	str	r3, [r0, #56]	; 0x38
 80089dc:	e00f      	b.n	80089fe <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 80089de:	f7ff fb77 	bl	80080d0 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 80089e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80089e4:	4303      	orrs	r3, r0
 80089e6:	63a3      	str	r3, [r4, #56]	; 0x38
 80089e8:	e009      	b.n	80089fe <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 80089ea:	f7ff fb98 	bl	800811e <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 80089ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80089f0:	4303      	orrs	r3, r0
 80089f2:	63a3      	str	r3, [r4, #56]	; 0x38
 80089f4:	e003      	b.n	80089fe <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80089f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089fc:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80089fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008a00:	b13b      	cbz	r3, 8008a12 <HAL_SD_ConfigWideBusOperation+0x6a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	4a10      	ldr	r2, [pc, #64]	; (8008a48 <HAL_SD_ConfigWideBusOperation+0xa0>)
 8008a06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008a08:	2001      	movs	r0, #1
 8008a0a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8008a0e:	b00b      	add	sp, #44	; 0x2c
 8008a10:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008a12:	6863      	ldr	r3, [r4, #4]
 8008a14:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008a16:	68a3      	ldr	r3, [r4, #8]
 8008a18:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008a1a:	68e3      	ldr	r3, [r4, #12]
 8008a1c:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8008a1e:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008a20:	6963      	ldr	r3, [r4, #20]
 8008a22:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008a24:	69a3      	ldr	r3, [r4, #24]
 8008a26:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 8008a28:	ab0a      	add	r3, sp, #40	; 0x28
 8008a2a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8008a2e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008a32:	ab04      	add	r3, sp, #16
 8008a34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a36:	6820      	ldr	r0, [r4, #0]
 8008a38:	f000 fed4 	bl	80097e4 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8008a42:	2000      	movs	r0, #0
 8008a44:	e7e3      	b.n	8008a0e <HAL_SD_ConfigWideBusOperation+0x66>
 8008a46:	bf00      	nop
 8008a48:	004005ff 	.word	0x004005ff

08008a4c <HAL_SD_GetCardState>:
{
 8008a4c:	b510      	push	{r4, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8008a52:	2300      	movs	r3, #0
 8008a54:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 8008a56:	a901      	add	r1, sp, #4
 8008a58:	f7ff fb88 	bl	800816c <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a5c:	b110      	cbz	r0, 8008a64 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 8008a5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008a60:	4303      	orrs	r3, r0
 8008a62:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8008a64:	9801      	ldr	r0, [sp, #4]
 8008a66:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8008a6a:	b002      	add	sp, #8
 8008a6c:	bd10      	pop	{r4, pc}

08008a6e <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8008a6e:	4770      	bx	lr

08008a70 <HAL_SDRAM_Init>:
  if(hsdram == NULL)
 8008a70:	b1e0      	cbz	r0, 8008aac <HAL_SDRAM_Init+0x3c>
{   
 8008a72:	b538      	push	{r3, r4, r5, lr}
 8008a74:	460d      	mov	r5, r1
 8008a76:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008a78:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8008a7c:	b18b      	cbz	r3, 8008aa2 <HAL_SDRAM_Init+0x32>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a7e:	2302      	movs	r3, #2
 8008a80:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008a84:	4621      	mov	r1, r4
 8008a86:	f851 0b04 	ldr.w	r0, [r1], #4
 8008a8a:	f000 fd67 	bl	800955c <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008a8e:	6862      	ldr	r2, [r4, #4]
 8008a90:	4629      	mov	r1, r5
 8008a92:	6820      	ldr	r0, [r4, #0]
 8008a94:	f000 fd9c 	bl	80095d0 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8008a9e:	2000      	movs	r0, #0
}
 8008aa0:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8008aa2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8008aa6:	f7ff ffe2 	bl	8008a6e <HAL_SDRAM_MspInit>
 8008aaa:	e7e8      	b.n	8008a7e <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8008aac:	2001      	movs	r0, #1
}
 8008aae:	4770      	bx	lr

08008ab0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008ab4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8008ab8:	b2c0      	uxtb	r0, r0
 8008aba:	2802      	cmp	r0, #2
 8008abc:	d00d      	beq.n	8008ada <HAL_SDRAM_SendCommand+0x2a>
 8008abe:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008ac6:	6820      	ldr	r0, [r4, #0]
 8008ac8:	f000 fdce 	bl	8009668 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008acc:	682b      	ldr	r3, [r5, #0]
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d004      	beq.n	8008adc <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008ad8:	2000      	movs	r0, #0
}
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008adc:	2305      	movs	r3, #5
 8008ade:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	e7f9      	b.n	8008ada <HAL_SDRAM_SendCommand+0x2a>

08008ae6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008ae6:	b510      	push	{r4, lr}
 8008ae8:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008aea:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8008aee:	b2c0      	uxtb	r0, r0
 8008af0:	2802      	cmp	r0, #2
 8008af2:	d009      	beq.n	8008b08 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008af4:	2302      	movs	r3, #2
 8008af6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008afa:	6820      	ldr	r0, [r4, #0]
 8008afc:	f000 fdca 	bl	8009694 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008b00:	2301      	movs	r3, #1
 8008b02:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 8008b06:	2000      	movs	r0, #0
}
 8008b08:	bd10      	pop	{r4, pc}

08008b0a <HAL_TIM_Base_MspInit>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008b0a:	4770      	bx	lr

08008b0c <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b0c:	6802      	ldr	r2, [r0, #0]
 8008b0e:	68d3      	ldr	r3, [r2, #12]
 8008b10:	f043 0301 	orr.w	r3, r3, #1
 8008b14:	60d3      	str	r3, [r2, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008b16:	6802      	ldr	r2, [r0, #0]
 8008b18:	6813      	ldr	r3, [r2, #0]
 8008b1a:	f043 0301 	orr.w	r3, r3, #1
 8008b1e:	6013      	str	r3, [r2, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8008b20:	2000      	movs	r0, #0
 8008b22:	4770      	bx	lr

08008b24 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b24:	4770      	bx	lr

08008b26 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b26:	4770      	bx	lr

08008b28 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b28:	4770      	bx	lr

08008b2a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b2a:	4770      	bx	lr

08008b2c <HAL_TIM_IRQHandler>:
{
 8008b2c:	b510      	push	{r4, lr}
 8008b2e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b30:	6803      	ldr	r3, [r0, #0]
 8008b32:	691a      	ldr	r2, [r3, #16]
 8008b34:	f012 0f02 	tst.w	r2, #2
 8008b38:	d011      	beq.n	8008b5e <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8008b3a:	68da      	ldr	r2, [r3, #12]
 8008b3c:	f012 0f02 	tst.w	r2, #2
 8008b40:	d00d      	beq.n	8008b5e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b42:	f06f 0202 	mvn.w	r2, #2
 8008b46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8008b4c:	6803      	ldr	r3, [r0, #0]
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	f013 0f03 	tst.w	r3, #3
 8008b54:	d079      	beq.n	8008c4a <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8008b56:	f7ff ffe6 	bl	8008b26 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	691a      	ldr	r2, [r3, #16]
 8008b62:	f012 0f04 	tst.w	r2, #4
 8008b66:	d012      	beq.n	8008b8e <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8008b68:	68da      	ldr	r2, [r3, #12]
 8008b6a:	f012 0f04 	tst.w	r2, #4
 8008b6e:	d00e      	beq.n	8008b8e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b70:	f06f 0204 	mvn.w	r2, #4
 8008b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b76:	2302      	movs	r3, #2
 8008b78:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008b82:	d068      	beq.n	8008c56 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8008b84:	4620      	mov	r0, r4
 8008b86:	f7ff ffce 	bl	8008b26 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	691a      	ldr	r2, [r3, #16]
 8008b92:	f012 0f08 	tst.w	r2, #8
 8008b96:	d012      	beq.n	8008bbe <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8008b98:	68da      	ldr	r2, [r3, #12]
 8008b9a:	f012 0f08 	tst.w	r2, #8
 8008b9e:	d00e      	beq.n	8008bbe <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ba0:	f06f 0208 	mvn.w	r2, #8
 8008ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ba6:	2304      	movs	r3, #4
 8008ba8:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	f013 0f03 	tst.w	r3, #3
 8008bb2:	d057      	beq.n	8008c64 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f7ff ffb6 	bl	8008b26 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008bbe:	6823      	ldr	r3, [r4, #0]
 8008bc0:	691a      	ldr	r2, [r3, #16]
 8008bc2:	f012 0f10 	tst.w	r2, #16
 8008bc6:	d012      	beq.n	8008bee <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8008bc8:	68da      	ldr	r2, [r3, #12]
 8008bca:	f012 0f10 	tst.w	r2, #16
 8008bce:	d00e      	beq.n	8008bee <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bd0:	f06f 0210 	mvn.w	r2, #16
 8008bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bd6:	2308      	movs	r3, #8
 8008bd8:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008be2:	d046      	beq.n	8008c72 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8008be4:	4620      	mov	r0, r4
 8008be6:	f7ff ff9e 	bl	8008b26 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bea:	2300      	movs	r3, #0
 8008bec:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	691a      	ldr	r2, [r3, #16]
 8008bf2:	f012 0f01 	tst.w	r2, #1
 8008bf6:	d003      	beq.n	8008c00 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8008bf8:	68da      	ldr	r2, [r3, #12]
 8008bfa:	f012 0f01 	tst.w	r2, #1
 8008bfe:	d13f      	bne.n	8008c80 <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	691a      	ldr	r2, [r3, #16]
 8008c04:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008c08:	d003      	beq.n	8008c12 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8008c0a:	68da      	ldr	r2, [r3, #12]
 8008c0c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008c10:	d13d      	bne.n	8008c8e <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	691a      	ldr	r2, [r3, #16]
 8008c16:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008c1a:	d003      	beq.n	8008c24 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8008c1c:	68da      	ldr	r2, [r3, #12]
 8008c1e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008c22:	d13b      	bne.n	8008c9c <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c24:	6823      	ldr	r3, [r4, #0]
 8008c26:	691a      	ldr	r2, [r3, #16]
 8008c28:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008c2c:	d003      	beq.n	8008c36 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8008c2e:	68da      	ldr	r2, [r3, #12]
 8008c30:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008c34:	d139      	bne.n	8008caa <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	691a      	ldr	r2, [r3, #16]
 8008c3a:	f012 0f20 	tst.w	r2, #32
 8008c3e:	d003      	beq.n	8008c48 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	f012 0f20 	tst.w	r2, #32
 8008c46:	d137      	bne.n	8008cb8 <HAL_TIM_IRQHandler+0x18c>
}
 8008c48:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c4a:	f7ff ff6b 	bl	8008b24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f7ff ff6a 	bl	8008b28 <HAL_TIM_PWM_PulseFinishedCallback>
 8008c54:	e781      	b.n	8008b5a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c56:	4620      	mov	r0, r4
 8008c58:	f7ff ff64 	bl	8008b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f7ff ff63 	bl	8008b28 <HAL_TIM_PWM_PulseFinishedCallback>
 8008c62:	e792      	b.n	8008b8a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c64:	4620      	mov	r0, r4
 8008c66:	f7ff ff5d 	bl	8008b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f7ff ff5c 	bl	8008b28 <HAL_TIM_PWM_PulseFinishedCallback>
 8008c70:	e7a3      	b.n	8008bba <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c72:	4620      	mov	r0, r4
 8008c74:	f7ff ff56 	bl	8008b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f7ff ff55 	bl	8008b28 <HAL_TIM_PWM_PulseFinishedCallback>
 8008c7e:	e7b4      	b.n	8008bea <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c80:	f06f 0201 	mvn.w	r2, #1
 8008c84:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c86:	4620      	mov	r0, r4
 8008c88:	f001 ff18 	bl	800aabc <HAL_TIM_PeriodElapsedCallback>
 8008c8c:	e7b8      	b.n	8008c00 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c92:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008c94:	4620      	mov	r0, r4
 8008c96:	f000 f8b8 	bl	8008e0a <HAL_TIMEx_BreakCallback>
 8008c9a:	e7ba      	b.n	8008c12 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ca0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f000 f8b1 	bl	8008e0a <HAL_TIMEx_BreakCallback>
 8008ca8:	e7bc      	b.n	8008c24 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008caa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008cae:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f7ff ff3a 	bl	8008b2a <HAL_TIM_TriggerCallback>
 8008cb6:	e7be      	b.n	8008c36 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008cb8:	f06f 0220 	mvn.w	r2, #32
 8008cbc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f000 f8a2 	bl	8008e08 <HAL_TIMEx_CommutCallback>
}
 8008cc4:	e7c0      	b.n	8008c48 <HAL_TIM_IRQHandler+0x11c>
	...

08008cc8 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008cc8:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8008cca:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8008ccc:	4c3a      	ldr	r4, [pc, #232]	; (8008db8 <TIM_Base_SetConfig+0xf0>)
 8008cce:	42a0      	cmp	r0, r4
 8008cd0:	bf14      	ite	ne
 8008cd2:	2400      	movne	r4, #0
 8008cd4:	2401      	moveq	r4, #1
 8008cd6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008cda:	bf14      	ite	ne
 8008cdc:	4622      	movne	r2, r4
 8008cde:	f044 0201 	orreq.w	r2, r4, #1
 8008ce2:	b9aa      	cbnz	r2, 8008d10 <TIM_Base_SetConfig+0x48>
 8008ce4:	4d35      	ldr	r5, [pc, #212]	; (8008dbc <TIM_Base_SetConfig+0xf4>)
 8008ce6:	42a8      	cmp	r0, r5
 8008ce8:	bf14      	ite	ne
 8008cea:	2500      	movne	r5, #0
 8008cec:	2501      	moveq	r5, #1
 8008cee:	4e34      	ldr	r6, [pc, #208]	; (8008dc0 <TIM_Base_SetConfig+0xf8>)
 8008cf0:	42b0      	cmp	r0, r6
 8008cf2:	d00d      	beq.n	8008d10 <TIM_Base_SetConfig+0x48>
 8008cf4:	b965      	cbnz	r5, 8008d10 <TIM_Base_SetConfig+0x48>
 8008cf6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8008cfa:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8008cfe:	42a8      	cmp	r0, r5
 8008d00:	bf14      	ite	ne
 8008d02:	2500      	movne	r5, #0
 8008d04:	2501      	moveq	r5, #1
 8008d06:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008d0a:	42b0      	cmp	r0, r6
 8008d0c:	d000      	beq.n	8008d10 <TIM_Base_SetConfig+0x48>
 8008d0e:	b11d      	cbz	r5, 8008d18 <TIM_Base_SetConfig+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008d14:	684d      	ldr	r5, [r1, #4]
 8008d16:	432b      	orrs	r3, r5
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8008d18:	2a00      	cmp	r2, #0
 8008d1a:	d133      	bne.n	8008d84 <TIM_Base_SetConfig+0xbc>
 8008d1c:	4a27      	ldr	r2, [pc, #156]	; (8008dbc <TIM_Base_SetConfig+0xf4>)
 8008d1e:	4290      	cmp	r0, r2
 8008d20:	bf14      	ite	ne
 8008d22:	2200      	movne	r2, #0
 8008d24:	2201      	moveq	r2, #1
 8008d26:	4d26      	ldr	r5, [pc, #152]	; (8008dc0 <TIM_Base_SetConfig+0xf8>)
 8008d28:	42a8      	cmp	r0, r5
 8008d2a:	d02b      	beq.n	8008d84 <TIM_Base_SetConfig+0xbc>
 8008d2c:	bb52      	cbnz	r2, 8008d84 <TIM_Base_SetConfig+0xbc>
 8008d2e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008d32:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8008d36:	4290      	cmp	r0, r2
 8008d38:	bf14      	ite	ne
 8008d3a:	2200      	movne	r2, #0
 8008d3c:	2201      	moveq	r2, #1
 8008d3e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008d42:	42a8      	cmp	r0, r5
 8008d44:	d01e      	beq.n	8008d84 <TIM_Base_SetConfig+0xbc>
 8008d46:	b9ea      	cbnz	r2, 8008d84 <TIM_Base_SetConfig+0xbc>
 8008d48:	4a1e      	ldr	r2, [pc, #120]	; (8008dc4 <TIM_Base_SetConfig+0xfc>)
 8008d4a:	4290      	cmp	r0, r2
 8008d4c:	bf14      	ite	ne
 8008d4e:	2200      	movne	r2, #0
 8008d50:	2201      	moveq	r2, #1
 8008d52:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8008d56:	42a8      	cmp	r0, r5
 8008d58:	d014      	beq.n	8008d84 <TIM_Base_SetConfig+0xbc>
 8008d5a:	b99a      	cbnz	r2, 8008d84 <TIM_Base_SetConfig+0xbc>
 8008d5c:	4a1a      	ldr	r2, [pc, #104]	; (8008dc8 <TIM_Base_SetConfig+0x100>)
 8008d5e:	4290      	cmp	r0, r2
 8008d60:	bf14      	ite	ne
 8008d62:	2200      	movne	r2, #0
 8008d64:	2201      	moveq	r2, #1
 8008d66:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008d6a:	42a8      	cmp	r0, r5
 8008d6c:	d00a      	beq.n	8008d84 <TIM_Base_SetConfig+0xbc>
 8008d6e:	b94a      	cbnz	r2, 8008d84 <TIM_Base_SetConfig+0xbc>
 8008d70:	4a16      	ldr	r2, [pc, #88]	; (8008dcc <TIM_Base_SetConfig+0x104>)
 8008d72:	4290      	cmp	r0, r2
 8008d74:	bf14      	ite	ne
 8008d76:	2200      	movne	r2, #0
 8008d78:	2201      	moveq	r2, #1
 8008d7a:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8008d7e:	42a8      	cmp	r0, r5
 8008d80:	d000      	beq.n	8008d84 <TIM_Base_SetConfig+0xbc>
 8008d82:	b11a      	cbz	r2, 8008d8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d88:	68ca      	ldr	r2, [r1, #12]
 8008d8a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d90:	694a      	ldr	r2, [r1, #20]
 8008d92:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8008d94:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d96:	688a      	ldr	r2, [r1, #8]
 8008d98:	62c2      	str	r2, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8008d9a:	680a      	ldr	r2, [r1, #0]
 8008d9c:	6282      	str	r2, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8008d9e:	4b0c      	ldr	r3, [pc, #48]	; (8008dd0 <TIM_Base_SetConfig+0x108>)
 8008da0:	4298      	cmp	r0, r3
 8008da2:	bf14      	ite	ne
 8008da4:	4623      	movne	r3, r4
 8008da6:	f044 0301 	orreq.w	r3, r4, #1
 8008daa:	b10b      	cbz	r3, 8008db0 <TIM_Base_SetConfig+0xe8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dac:	690b      	ldr	r3, [r1, #16]
 8008dae:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008db0:	2301      	movs	r3, #1
 8008db2:	6143      	str	r3, [r0, #20]
}
 8008db4:	bc70      	pop	{r4, r5, r6}
 8008db6:	4770      	bx	lr
 8008db8:	40010000 	.word	0x40010000
 8008dbc:	40000800 	.word	0x40000800
 8008dc0:	40000400 	.word	0x40000400
 8008dc4:	40014400 	.word	0x40014400
 8008dc8:	40001800 	.word	0x40001800
 8008dcc:	40002000 	.word	0x40002000
 8008dd0:	40010400 	.word	0x40010400

08008dd4 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8008dd4:	b1b0      	cbz	r0, 8008e04 <HAL_TIM_Base_Init+0x30>
{ 
 8008dd6:	b510      	push	{r4, lr}
 8008dd8:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8008dda:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008dde:	b163      	cbz	r3, 8008dfa <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8008de0:	2302      	movs	r3, #2
 8008de2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8008de6:	4621      	mov	r1, r4
 8008de8:	f851 0b04 	ldr.w	r0, [r1], #4
 8008dec:	f7ff ff6c 	bl	8008cc8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8008df0:	2301      	movs	r3, #1
 8008df2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008df6:	2000      	movs	r0, #0
}
 8008df8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008dfa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008dfe:	f7ff fe84 	bl	8008b0a <HAL_TIM_Base_MspInit>
 8008e02:	e7ed      	b.n	8008de0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8008e04:	2001      	movs	r0, #1
}
 8008e06:	4770      	bx	lr

08008e08 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8008e08:	4770      	bx	lr

08008e0a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e0a:	4770      	bx	lr

08008e0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e10:	4605      	mov	r5, r0
 8008e12:	460f      	mov	r7, r1
 8008e14:	4616      	mov	r6, r2
 8008e16:	4699      	mov	r9, r3
 8008e18:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e1c:	682c      	ldr	r4, [r5, #0]
 8008e1e:	69e4      	ldr	r4, [r4, #28]
 8008e20:	ea37 0304 	bics.w	r3, r7, r4
 8008e24:	bf0c      	ite	eq
 8008e26:	2401      	moveq	r4, #1
 8008e28:	2400      	movne	r4, #0
 8008e2a:	42b4      	cmp	r4, r6
 8008e2c:	d11f      	bne.n	8008e6e <UART_WaitOnFlagUntilTimeout+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008e2e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008e32:	d0f3      	beq.n	8008e1c <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8008e34:	f1b8 0f00 	cmp.w	r8, #0
 8008e38:	d005      	beq.n	8008e46 <UART_WaitOnFlagUntilTimeout+0x3a>
 8008e3a:	f7fa ff65 	bl	8003d08 <HAL_GetTick>
 8008e3e:	eba0 0009 	sub.w	r0, r0, r9
 8008e42:	4540      	cmp	r0, r8
 8008e44:	d3ea      	bcc.n	8008e1c <UART_WaitOnFlagUntilTimeout+0x10>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e46:	682a      	ldr	r2, [r5, #0]
 8008e48:	6813      	ldr	r3, [r2, #0]
 8008e4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e4e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e50:	682a      	ldr	r2, [r5, #0]
 8008e52:	6893      	ldr	r3, [r2, #8]
 8008e54:	f023 0301 	bic.w	r3, r3, #1
 8008e58:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008e5a:	2320      	movs	r3, #32
 8008e5c:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8008e60:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008e64:	2300      	movs	r3, #0
 8008e66:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8008e6a:	2003      	movs	r0, #3
 8008e6c:	e000      	b.n	8008e70 <UART_WaitOnFlagUntilTimeout+0x64>
      }
    }
  }
  return HAL_OK;
 8008e6e:	2000      	movs	r0, #0
}
 8008e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008e74 <HAL_UART_Transmit>:
{
 8008e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e78:	b082      	sub	sp, #8
 8008e7a:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8008e7c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	2b20      	cmp	r3, #32
 8008e84:	d152      	bne.n	8008f2c <HAL_UART_Transmit+0xb8>
 8008e86:	4604      	mov	r4, r0
 8008e88:	460d      	mov	r5, r1
 8008e8a:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8008e8c:	fab2 f382 	clz	r3, r2
 8008e90:	095b      	lsrs	r3, r3, #5
 8008e92:	2900      	cmp	r1, #0
 8008e94:	bf08      	it	eq
 8008e96:	2301      	moveq	r3, #1
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d14b      	bne.n	8008f34 <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8008e9c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d049      	beq.n	8008f38 <HAL_UART_Transmit+0xc4>
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008eae:	2321      	movs	r3, #33	; 0x21
 8008eb0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8008eb4:	f7fa ff28 	bl	8003d08 <HAL_GetTick>
 8008eb8:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8008eba:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8008ebe:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8008ec2:	e003      	b.n	8008ecc <HAL_UART_Transmit+0x58>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8008ec4:	f815 2b01 	ldrb.w	r2, [r5], #1
 8008ec8:	6823      	ldr	r3, [r4, #0]
 8008eca:	629a      	str	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8008ecc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	b1e3      	cbz	r3, 8008f0e <HAL_UART_Transmit+0x9a>
      huart->TxXferCount--;
 8008ed4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8008ed8:	b292      	uxth	r2, r2
 8008eda:	3a01      	subs	r2, #1
 8008edc:	b292      	uxth	r2, r2
 8008ede:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ee2:	9600      	str	r6, [sp, #0]
 8008ee4:	463b      	mov	r3, r7
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	2180      	movs	r1, #128	; 0x80
 8008eea:	4620      	mov	r0, r4
 8008eec:	f7ff ff8e 	bl	8008e0c <UART_WaitOnFlagUntilTimeout>
 8008ef0:	bb20      	cbnz	r0, 8008f3c <HAL_UART_Transmit+0xc8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ef2:	68a3      	ldr	r3, [r4, #8]
 8008ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ef8:	d1e4      	bne.n	8008ec4 <HAL_UART_Transmit+0x50>
 8008efa:	6923      	ldr	r3, [r4, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d1e1      	bne.n	8008ec4 <HAL_UART_Transmit+0x50>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8008f00:	f835 3b02 	ldrh.w	r3, [r5], #2
 8008f04:	6822      	ldr	r2, [r4, #0]
 8008f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f0a:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 8008f0c:	e7de      	b.n	8008ecc <HAL_UART_Transmit+0x58>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f0e:	9600      	str	r6, [sp, #0]
 8008f10:	463b      	mov	r3, r7
 8008f12:	2200      	movs	r2, #0
 8008f14:	2140      	movs	r1, #64	; 0x40
 8008f16:	4620      	mov	r0, r4
 8008f18:	f7ff ff78 	bl	8008e0c <UART_WaitOnFlagUntilTimeout>
 8008f1c:	b980      	cbnz	r0, 8008f40 <HAL_UART_Transmit+0xcc>
    huart->gState = HAL_UART_STATE_READY;
 8008f1e:	2320      	movs	r3, #32
 8008f20:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8008f24:	2300      	movs	r3, #0
 8008f26:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    return HAL_OK;
 8008f2a:	e000      	b.n	8008f2e <HAL_UART_Transmit+0xba>
    return HAL_BUSY;
 8008f2c:	2002      	movs	r0, #2
}
 8008f2e:	b002      	add	sp, #8
 8008f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8008f34:	2001      	movs	r0, #1
 8008f36:	e7fa      	b.n	8008f2e <HAL_UART_Transmit+0xba>
    __HAL_LOCK(huart);
 8008f38:	2002      	movs	r0, #2
 8008f3a:	e7f8      	b.n	8008f2e <HAL_UART_Transmit+0xba>
        return HAL_TIMEOUT;
 8008f3c:	2003      	movs	r0, #3
 8008f3e:	e7f6      	b.n	8008f2e <HAL_UART_Transmit+0xba>
      return HAL_TIMEOUT;
 8008f40:	2003      	movs	r0, #3
 8008f42:	e7f4      	b.n	8008f2e <HAL_UART_Transmit+0xba>

08008f44 <HAL_UART_Receive>:
{
 8008f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f48:	b082      	sub	sp, #8
 8008f4a:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8008f4c:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b20      	cmp	r3, #32
 8008f54:	d176      	bne.n	8009044 <HAL_UART_Receive+0x100>
 8008f56:	4604      	mov	r4, r0
 8008f58:	460d      	mov	r5, r1
 8008f5a:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8008f5c:	fab2 f382 	clz	r3, r2
 8008f60:	095b      	lsrs	r3, r3, #5
 8008f62:	2900      	cmp	r1, #0
 8008f64:	bf08      	it	eq
 8008f66:	2301      	moveq	r3, #1
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d16f      	bne.n	800904c <HAL_UART_Receive+0x108>
    __HAL_LOCK(huart);
 8008f6c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d06d      	beq.n	8009050 <HAL_UART_Receive+0x10c>
 8008f74:	2301      	movs	r3, #1
 8008f76:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f7e:	2322      	movs	r3, #34	; 0x22
 8008f80:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 8008f84:	f7fa fec0 	bl	8003d08 <HAL_GetTick>
 8008f88:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8008f8a:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8008f8e:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8008f92:	68a3      	ldr	r3, [r4, #8]
 8008f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f98:	d006      	beq.n	8008fa8 <HAL_UART_Receive+0x64>
 8008f9a:	b9a3      	cbnz	r3, 8008fc6 <HAL_UART_Receive+0x82>
 8008f9c:	6923      	ldr	r3, [r4, #16]
 8008f9e:	b973      	cbnz	r3, 8008fbe <HAL_UART_Receive+0x7a>
 8008fa0:	23ff      	movs	r3, #255	; 0xff
 8008fa2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8008fa6:	e011      	b.n	8008fcc <HAL_UART_Receive+0x88>
 8008fa8:	6923      	ldr	r3, [r4, #16]
 8008faa:	b923      	cbnz	r3, 8008fb6 <HAL_UART_Receive+0x72>
 8008fac:	f240 13ff 	movw	r3, #511	; 0x1ff
 8008fb0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8008fb4:	e00a      	b.n	8008fcc <HAL_UART_Receive+0x88>
 8008fb6:	23ff      	movs	r3, #255	; 0xff
 8008fb8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8008fbc:	e006      	b.n	8008fcc <HAL_UART_Receive+0x88>
 8008fbe:	237f      	movs	r3, #127	; 0x7f
 8008fc0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8008fc4:	e002      	b.n	8008fcc <HAL_UART_Receive+0x88>
 8008fc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fca:	d002      	beq.n	8008fd2 <HAL_UART_Receive+0x8e>
    uhMask = huart->Mask;
 8008fcc:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 8008fd0:	e010      	b.n	8008ff4 <HAL_UART_Receive+0xb0>
    UART_MASK_COMPUTATION(huart);
 8008fd2:	6923      	ldr	r3, [r4, #16]
 8008fd4:	b91b      	cbnz	r3, 8008fde <HAL_UART_Receive+0x9a>
 8008fd6:	237f      	movs	r3, #127	; 0x7f
 8008fd8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8008fdc:	e7f6      	b.n	8008fcc <HAL_UART_Receive+0x88>
 8008fde:	233f      	movs	r3, #63	; 0x3f
 8008fe0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8008fe4:	e7f2      	b.n	8008fcc <HAL_UART_Receive+0x88>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fea:	fa5f f388 	uxtb.w	r3, r8
 8008fee:	4013      	ands	r3, r2
 8008ff0:	f805 3b01 	strb.w	r3, [r5], #1
    while(huart->RxXferCount > 0U)
 8008ff4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	b1e3      	cbz	r3, 8009036 <HAL_UART_Receive+0xf2>
      huart->RxXferCount--;
 8008ffc:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8009000:	b292      	uxth	r2, r2
 8009002:	3a01      	subs	r2, #1
 8009004:	b292      	uxth	r2, r2
 8009006:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800900a:	9600      	str	r6, [sp, #0]
 800900c:	463b      	mov	r3, r7
 800900e:	2200      	movs	r2, #0
 8009010:	2120      	movs	r1, #32
 8009012:	4620      	mov	r0, r4
 8009014:	f7ff fefa 	bl	8008e0c <UART_WaitOnFlagUntilTimeout>
 8009018:	b9e0      	cbnz	r0, 8009054 <HAL_UART_Receive+0x110>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800901a:	68a3      	ldr	r3, [r4, #8]
 800901c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009020:	d1e1      	bne.n	8008fe6 <HAL_UART_Receive+0xa2>
 8009022:	6923      	ldr	r3, [r4, #16]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1de      	bne.n	8008fe6 <HAL_UART_Receive+0xa2>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8009028:	6823      	ldr	r3, [r4, #0]
 800902a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902c:	ea08 0303 	and.w	r3, r8, r3
 8009030:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8009034:	e7de      	b.n	8008ff4 <HAL_UART_Receive+0xb0>
    huart->RxState = HAL_UART_STATE_READY;
 8009036:	2320      	movs	r3, #32
 8009038:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 800903c:	2000      	movs	r0, #0
 800903e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8009042:	e000      	b.n	8009046 <HAL_UART_Receive+0x102>
    return HAL_BUSY;
 8009044:	2002      	movs	r0, #2
}
 8009046:	b002      	add	sp, #8
 8009048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800904c:	2001      	movs	r0, #1
 800904e:	e7fa      	b.n	8009046 <HAL_UART_Receive+0x102>
    __HAL_LOCK(huart);
 8009050:	2002      	movs	r0, #2
 8009052:	e7f8      	b.n	8009046 <HAL_UART_Receive+0x102>
        return HAL_TIMEOUT;
 8009054:	2003      	movs	r0, #3
 8009056:	e7f6      	b.n	8009046 <HAL_UART_Receive+0x102>

08009058 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009058:	b538      	push	{r3, r4, r5, lr}
 800905a:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800905c:	6883      	ldr	r3, [r0, #8]
 800905e:	6902      	ldr	r2, [r0, #16]
 8009060:	4313      	orrs	r3, r2
 8009062:	6942      	ldr	r2, [r0, #20]
 8009064:	4313      	orrs	r3, r2
 8009066:	69c2      	ldr	r2, [r0, #28]
 8009068:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800906a:	6801      	ldr	r1, [r0, #0]
 800906c:	6808      	ldr	r0, [r1, #0]
 800906e:	4aa0      	ldr	r2, [pc, #640]	; (80092f0 <UART_SetConfig+0x298>)
 8009070:	4002      	ands	r2, r0
 8009072:	4313      	orrs	r3, r2
 8009074:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009076:	6822      	ldr	r2, [r4, #0]
 8009078:	6853      	ldr	r3, [r2, #4]
 800907a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800907e:	68e1      	ldr	r1, [r4, #12]
 8009080:	430b      	orrs	r3, r1
 8009082:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8009084:	69a3      	ldr	r3, [r4, #24]
 8009086:	6a22      	ldr	r2, [r4, #32]
 8009088:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800908a:	6821      	ldr	r1, [r4, #0]
 800908c:	688b      	ldr	r3, [r1, #8]
 800908e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009092:	4313      	orrs	r3, r2
 8009094:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	4a96      	ldr	r2, [pc, #600]	; (80092f4 <UART_SetConfig+0x29c>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d019      	beq.n	80090d2 <UART_SetConfig+0x7a>
 800909e:	4a96      	ldr	r2, [pc, #600]	; (80092f8 <UART_SetConfig+0x2a0>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d02a      	beq.n	80090fa <UART_SetConfig+0xa2>
 80090a4:	4a95      	ldr	r2, [pc, #596]	; (80092fc <UART_SetConfig+0x2a4>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d040      	beq.n	800912c <UART_SetConfig+0xd4>
 80090aa:	4a95      	ldr	r2, [pc, #596]	; (8009300 <UART_SetConfig+0x2a8>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d065      	beq.n	800917c <UART_SetConfig+0x124>
 80090b0:	4a94      	ldr	r2, [pc, #592]	; (8009304 <UART_SetConfig+0x2ac>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d075      	beq.n	80091a2 <UART_SetConfig+0x14a>
 80090b6:	4a94      	ldr	r2, [pc, #592]	; (8009308 <UART_SetConfig+0x2b0>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	f000 8088 	beq.w	80091ce <UART_SetConfig+0x176>
 80090be:	4a93      	ldr	r2, [pc, #588]	; (800930c <UART_SetConfig+0x2b4>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	f000 809a 	beq.w	80091fa <UART_SetConfig+0x1a2>
 80090c6:	4a92      	ldr	r2, [pc, #584]	; (8009310 <UART_SetConfig+0x2b8>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	f000 80ac 	beq.w	8009226 <UART_SetConfig+0x1ce>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80090ce:	2510      	movs	r5, #16
 80090d0:	e03d      	b.n	800914e <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090d2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80090d6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80090da:	f002 0203 	and.w	r2, r2, #3
 80090de:	2a03      	cmp	r2, #3
 80090e0:	d803      	bhi.n	80090ea <UART_SetConfig+0x92>
 80090e2:	e8df f002 	tbb	[pc, r2]
 80090e6:	06b5      	.short	0x06b5
 80090e8:	0804      	.short	0x0804
 80090ea:	2510      	movs	r5, #16
 80090ec:	e02f      	b.n	800914e <UART_SetConfig+0xf6>
 80090ee:	2502      	movs	r5, #2
 80090f0:	e02d      	b.n	800914e <UART_SetConfig+0xf6>
 80090f2:	2504      	movs	r5, #4
 80090f4:	e02b      	b.n	800914e <UART_SetConfig+0xf6>
 80090f6:	2508      	movs	r5, #8
 80090f8:	e029      	b.n	800914e <UART_SetConfig+0xf6>
 80090fa:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80090fe:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009102:	f002 020c 	and.w	r2, r2, #12
 8009106:	2a0c      	cmp	r2, #12
 8009108:	d808      	bhi.n	800911c <UART_SetConfig+0xc4>
 800910a:	e8df f002 	tbb	[pc, r2]
 800910e:	07a3      	.short	0x07a3
 8009110:	070b0707 	.word	0x070b0707
 8009114:	07090707 	.word	0x07090707
 8009118:	0707      	.short	0x0707
 800911a:	0d          	.byte	0x0d
 800911b:	00          	.byte	0x00
 800911c:	2510      	movs	r5, #16
 800911e:	e016      	b.n	800914e <UART_SetConfig+0xf6>
 8009120:	2502      	movs	r5, #2
 8009122:	e014      	b.n	800914e <UART_SetConfig+0xf6>
 8009124:	2504      	movs	r5, #4
 8009126:	e012      	b.n	800914e <UART_SetConfig+0xf6>
 8009128:	2508      	movs	r5, #8
 800912a:	e010      	b.n	800914e <UART_SetConfig+0xf6>
 800912c:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8009130:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009134:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8009138:	2a20      	cmp	r2, #32
 800913a:	f000 808d 	beq.w	8009258 <UART_SetConfig+0x200>
 800913e:	d819      	bhi.n	8009174 <UART_SetConfig+0x11c>
 8009140:	2a00      	cmp	r2, #0
 8009142:	f000 808b 	beq.w	800925c <UART_SetConfig+0x204>
 8009146:	2a10      	cmp	r2, #16
 8009148:	f040 808a 	bne.w	8009260 <UART_SetConfig+0x208>
 800914c:	2504      	movs	r5, #4

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800914e:	69e2      	ldr	r2, [r4, #28]
 8009150:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009154:	f000 80b0 	beq.w	80092b8 <UART_SetConfig+0x260>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8009158:	2d08      	cmp	r5, #8
 800915a:	f200 813d 	bhi.w	80093d8 <UART_SetConfig+0x380>
 800915e:	e8df f015 	tbh	[pc, r5, lsl #1]
 8009162:	0104      	.short	0x0104
 8009164:	011b010f 	.word	0x011b010f
 8009168:	0125013b 	.word	0x0125013b
 800916c:	013b013b 	.word	0x013b013b
 8009170:	0131013b 	.word	0x0131013b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009174:	2a30      	cmp	r2, #48	; 0x30
 8009176:	d175      	bne.n	8009264 <UART_SetConfig+0x20c>
 8009178:	2508      	movs	r5, #8
 800917a:	e7e8      	b.n	800914e <UART_SetConfig+0xf6>
 800917c:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8009180:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009184:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8009188:	2a80      	cmp	r2, #128	; 0x80
 800918a:	d06d      	beq.n	8009268 <UART_SetConfig+0x210>
 800918c:	d805      	bhi.n	800919a <UART_SetConfig+0x142>
 800918e:	2a00      	cmp	r2, #0
 8009190:	d06c      	beq.n	800926c <UART_SetConfig+0x214>
 8009192:	2a40      	cmp	r2, #64	; 0x40
 8009194:	d16c      	bne.n	8009270 <UART_SetConfig+0x218>
 8009196:	2504      	movs	r5, #4
 8009198:	e7d9      	b.n	800914e <UART_SetConfig+0xf6>
 800919a:	2ac0      	cmp	r2, #192	; 0xc0
 800919c:	d16a      	bne.n	8009274 <UART_SetConfig+0x21c>
 800919e:	2508      	movs	r5, #8
 80091a0:	e7d5      	b.n	800914e <UART_SetConfig+0xf6>
 80091a2:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 80091a6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80091aa:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80091ae:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80091b2:	d061      	beq.n	8009278 <UART_SetConfig+0x220>
 80091b4:	d806      	bhi.n	80091c4 <UART_SetConfig+0x16c>
 80091b6:	2a00      	cmp	r2, #0
 80091b8:	d060      	beq.n	800927c <UART_SetConfig+0x224>
 80091ba:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80091be:	d15f      	bne.n	8009280 <UART_SetConfig+0x228>
 80091c0:	2504      	movs	r5, #4
 80091c2:	e7c4      	b.n	800914e <UART_SetConfig+0xf6>
 80091c4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80091c8:	d15c      	bne.n	8009284 <UART_SetConfig+0x22c>
 80091ca:	2508      	movs	r5, #8
 80091cc:	e7bf      	b.n	800914e <UART_SetConfig+0xf6>
 80091ce:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 80091d2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80091d6:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80091da:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80091de:	d053      	beq.n	8009288 <UART_SetConfig+0x230>
 80091e0:	d806      	bhi.n	80091f0 <UART_SetConfig+0x198>
 80091e2:	2a00      	cmp	r2, #0
 80091e4:	d052      	beq.n	800928c <UART_SetConfig+0x234>
 80091e6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80091ea:	d151      	bne.n	8009290 <UART_SetConfig+0x238>
 80091ec:	2504      	movs	r5, #4
 80091ee:	e7ae      	b.n	800914e <UART_SetConfig+0xf6>
 80091f0:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80091f4:	d14e      	bne.n	8009294 <UART_SetConfig+0x23c>
 80091f6:	2508      	movs	r5, #8
 80091f8:	e7a9      	b.n	800914e <UART_SetConfig+0xf6>
 80091fa:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80091fe:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009202:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8009206:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800920a:	d045      	beq.n	8009298 <UART_SetConfig+0x240>
 800920c:	d806      	bhi.n	800921c <UART_SetConfig+0x1c4>
 800920e:	2a00      	cmp	r2, #0
 8009210:	d044      	beq.n	800929c <UART_SetConfig+0x244>
 8009212:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009216:	d143      	bne.n	80092a0 <UART_SetConfig+0x248>
 8009218:	2504      	movs	r5, #4
 800921a:	e798      	b.n	800914e <UART_SetConfig+0xf6>
 800921c:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8009220:	d140      	bne.n	80092a4 <UART_SetConfig+0x24c>
 8009222:	2508      	movs	r5, #8
 8009224:	e793      	b.n	800914e <UART_SetConfig+0xf6>
 8009226:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 800922a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800922e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8009232:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009236:	d037      	beq.n	80092a8 <UART_SetConfig+0x250>
 8009238:	d805      	bhi.n	8009246 <UART_SetConfig+0x1ee>
 800923a:	b3ba      	cbz	r2, 80092ac <UART_SetConfig+0x254>
 800923c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009240:	d136      	bne.n	80092b0 <UART_SetConfig+0x258>
 8009242:	2504      	movs	r5, #4
 8009244:	e783      	b.n	800914e <UART_SetConfig+0xf6>
 8009246:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 800924a:	d133      	bne.n	80092b4 <UART_SetConfig+0x25c>
 800924c:	2508      	movs	r5, #8
 800924e:	e77e      	b.n	800914e <UART_SetConfig+0xf6>
 8009250:	2501      	movs	r5, #1
 8009252:	e77c      	b.n	800914e <UART_SetConfig+0xf6>
 8009254:	2500      	movs	r5, #0
 8009256:	e77a      	b.n	800914e <UART_SetConfig+0xf6>
 8009258:	2502      	movs	r5, #2
 800925a:	e778      	b.n	800914e <UART_SetConfig+0xf6>
 800925c:	2500      	movs	r5, #0
 800925e:	e776      	b.n	800914e <UART_SetConfig+0xf6>
 8009260:	2510      	movs	r5, #16
 8009262:	e774      	b.n	800914e <UART_SetConfig+0xf6>
 8009264:	2510      	movs	r5, #16
 8009266:	e772      	b.n	800914e <UART_SetConfig+0xf6>
 8009268:	2502      	movs	r5, #2
 800926a:	e770      	b.n	800914e <UART_SetConfig+0xf6>
 800926c:	2500      	movs	r5, #0
 800926e:	e76e      	b.n	800914e <UART_SetConfig+0xf6>
 8009270:	2510      	movs	r5, #16
 8009272:	e76c      	b.n	800914e <UART_SetConfig+0xf6>
 8009274:	2510      	movs	r5, #16
 8009276:	e76a      	b.n	800914e <UART_SetConfig+0xf6>
 8009278:	2502      	movs	r5, #2
 800927a:	e768      	b.n	800914e <UART_SetConfig+0xf6>
 800927c:	2500      	movs	r5, #0
 800927e:	e766      	b.n	800914e <UART_SetConfig+0xf6>
 8009280:	2510      	movs	r5, #16
 8009282:	e764      	b.n	800914e <UART_SetConfig+0xf6>
 8009284:	2510      	movs	r5, #16
 8009286:	e762      	b.n	800914e <UART_SetConfig+0xf6>
 8009288:	2502      	movs	r5, #2
 800928a:	e760      	b.n	800914e <UART_SetConfig+0xf6>
 800928c:	2501      	movs	r5, #1
 800928e:	e75e      	b.n	800914e <UART_SetConfig+0xf6>
 8009290:	2510      	movs	r5, #16
 8009292:	e75c      	b.n	800914e <UART_SetConfig+0xf6>
 8009294:	2510      	movs	r5, #16
 8009296:	e75a      	b.n	800914e <UART_SetConfig+0xf6>
 8009298:	2502      	movs	r5, #2
 800929a:	e758      	b.n	800914e <UART_SetConfig+0xf6>
 800929c:	2500      	movs	r5, #0
 800929e:	e756      	b.n	800914e <UART_SetConfig+0xf6>
 80092a0:	2510      	movs	r5, #16
 80092a2:	e754      	b.n	800914e <UART_SetConfig+0xf6>
 80092a4:	2510      	movs	r5, #16
 80092a6:	e752      	b.n	800914e <UART_SetConfig+0xf6>
 80092a8:	2502      	movs	r5, #2
 80092aa:	e750      	b.n	800914e <UART_SetConfig+0xf6>
 80092ac:	2500      	movs	r5, #0
 80092ae:	e74e      	b.n	800914e <UART_SetConfig+0xf6>
 80092b0:	2510      	movs	r5, #16
 80092b2:	e74c      	b.n	800914e <UART_SetConfig+0xf6>
 80092b4:	2510      	movs	r5, #16
 80092b6:	e74a      	b.n	800914e <UART_SetConfig+0xf6>
    switch (clocksource)
 80092b8:	2d08      	cmp	r5, #8
 80092ba:	d853      	bhi.n	8009364 <UART_SetConfig+0x30c>
 80092bc:	e8df f005 	tbb	[pc, r5]
 80092c0:	52352a05 	.word	0x52352a05
 80092c4:	5252523e 	.word	0x5252523e
 80092c8:	49          	.byte	0x49
 80092c9:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80092ca:	f7fd fd63 	bl	8006d94 <HAL_RCC_GetPCLK1Freq>
 80092ce:	6862      	ldr	r2, [r4, #4]
 80092d0:	0853      	lsrs	r3, r2, #1
 80092d2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80092d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80092da:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 80092dc:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092e0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80092e4:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 80092e6:	6822      	ldr	r2, [r4, #0]
 80092e8:	60d3      	str	r3, [r2, #12]
    }
  }

  return ret;

}
 80092ea:	4628      	mov	r0, r5
 80092ec:	bd38      	pop	{r3, r4, r5, pc}
 80092ee:	bf00      	nop
 80092f0:	efff69f3 	.word	0xefff69f3
 80092f4:	40011000 	.word	0x40011000
 80092f8:	40004400 	.word	0x40004400
 80092fc:	40004800 	.word	0x40004800
 8009300:	40004c00 	.word	0x40004c00
 8009304:	40005000 	.word	0x40005000
 8009308:	40011400 	.word	0x40011400
 800930c:	40007800 	.word	0x40007800
 8009310:	40007c00 	.word	0x40007c00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009314:	f7fd fd54 	bl	8006dc0 <HAL_RCC_GetPCLK2Freq>
 8009318:	6862      	ldr	r2, [r4, #4]
 800931a:	0853      	lsrs	r3, r2, #1
 800931c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8009320:	fbb3 f3f2 	udiv	r3, r3, r2
 8009324:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8009326:	2500      	movs	r5, #0
      break;
 8009328:	e7d8      	b.n	80092dc <UART_SetConfig+0x284>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800932a:	6862      	ldr	r2, [r4, #4]
 800932c:	4b2b      	ldr	r3, [pc, #172]	; (80093dc <UART_SetConfig+0x384>)
 800932e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8009332:	fbb3 f3f2 	udiv	r3, r3, r2
 8009336:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8009338:	2500      	movs	r5, #0
      break;
 800933a:	e7cf      	b.n	80092dc <UART_SetConfig+0x284>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800933c:	f7fd fc16 	bl	8006b6c <HAL_RCC_GetSysClockFreq>
 8009340:	6862      	ldr	r2, [r4, #4]
 8009342:	0853      	lsrs	r3, r2, #1
 8009344:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8009348:	fbb3 f3f2 	udiv	r3, r3, r2
 800934c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800934e:	2500      	movs	r5, #0
      break;
 8009350:	e7c4      	b.n	80092dc <UART_SetConfig+0x284>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009352:	6862      	ldr	r2, [r4, #4]
 8009354:	0853      	lsrs	r3, r2, #1
 8009356:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800935a:	fbb3 f3f2 	udiv	r3, r3, r2
 800935e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8009360:	2500      	movs	r5, #0
      break;
 8009362:	e7bb      	b.n	80092dc <UART_SetConfig+0x284>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009364:	2501      	movs	r5, #1
 8009366:	2300      	movs	r3, #0
 8009368:	e7b8      	b.n	80092dc <UART_SetConfig+0x284>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800936a:	f7fd fd13 	bl	8006d94 <HAL_RCC_GetPCLK1Freq>
 800936e:	6862      	ldr	r2, [r4, #4]
 8009370:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8009374:	fbb3 f3f2 	udiv	r3, r3, r2
 8009378:	6822      	ldr	r2, [r4, #0]
 800937a:	b29b      	uxth	r3, r3
 800937c:	60d3      	str	r3, [r2, #12]
      break;
 800937e:	e7b4      	b.n	80092ea <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009380:	f7fd fd1e 	bl	8006dc0 <HAL_RCC_GetPCLK2Freq>
 8009384:	6862      	ldr	r2, [r4, #4]
 8009386:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800938a:	fbb3 f3f2 	udiv	r3, r3, r2
 800938e:	6822      	ldr	r2, [r4, #0]
 8009390:	b29b      	uxth	r3, r3
 8009392:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009394:	2500      	movs	r5, #0
      break;
 8009396:	e7a8      	b.n	80092ea <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009398:	6861      	ldr	r1, [r4, #4]
 800939a:	4a11      	ldr	r2, [pc, #68]	; (80093e0 <UART_SetConfig+0x388>)
 800939c:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 80093a0:	fbb2 f2f1 	udiv	r2, r2, r1
 80093a4:	b292      	uxth	r2, r2
 80093a6:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80093a8:	2500      	movs	r5, #0
      break;
 80093aa:	e79e      	b.n	80092ea <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80093ac:	f7fd fbde 	bl	8006b6c <HAL_RCC_GetSysClockFreq>
 80093b0:	6862      	ldr	r2, [r4, #4]
 80093b2:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80093b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80093ba:	6822      	ldr	r2, [r4, #0]
 80093bc:	b29b      	uxth	r3, r3
 80093be:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80093c0:	2500      	movs	r5, #0
      break;
 80093c2:	e792      	b.n	80092ea <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80093c4:	6861      	ldr	r1, [r4, #4]
 80093c6:	084a      	lsrs	r2, r1, #1
 80093c8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80093cc:	fbb2 f2f1 	udiv	r2, r2, r1
 80093d0:	b292      	uxth	r2, r2
 80093d2:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80093d4:	2500      	movs	r5, #0
      break;
 80093d6:	e788      	b.n	80092ea <UART_SetConfig+0x292>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093d8:	2501      	movs	r5, #1
 80093da:	e786      	b.n	80092ea <UART_SetConfig+0x292>
 80093dc:	01e84800 	.word	0x01e84800
 80093e0:	00f42400 	.word	0x00f42400

080093e4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80093e6:	f013 0f01 	tst.w	r3, #1
 80093ea:	d006      	beq.n	80093fa <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093ec:	6802      	ldr	r2, [r0, #0]
 80093ee:	6853      	ldr	r3, [r2, #4]
 80093f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80093f4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80093f6:	430b      	orrs	r3, r1
 80093f8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80093fc:	f013 0f02 	tst.w	r3, #2
 8009400:	d006      	beq.n	8009410 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009402:	6802      	ldr	r2, [r0, #0]
 8009404:	6853      	ldr	r3, [r2, #4]
 8009406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800940a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800940c:	430b      	orrs	r3, r1
 800940e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009410:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009412:	f013 0f04 	tst.w	r3, #4
 8009416:	d006      	beq.n	8009426 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009418:	6802      	ldr	r2, [r0, #0]
 800941a:	6853      	ldr	r3, [r2, #4]
 800941c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009420:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8009422:	430b      	orrs	r3, r1
 8009424:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009426:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009428:	f013 0f08 	tst.w	r3, #8
 800942c:	d006      	beq.n	800943c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800942e:	6802      	ldr	r2, [r0, #0]
 8009430:	6853      	ldr	r3, [r2, #4]
 8009432:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009436:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8009438:	430b      	orrs	r3, r1
 800943a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800943c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800943e:	f013 0f10 	tst.w	r3, #16
 8009442:	d006      	beq.n	8009452 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009444:	6802      	ldr	r2, [r0, #0]
 8009446:	6893      	ldr	r3, [r2, #8]
 8009448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800944c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800944e:	430b      	orrs	r3, r1
 8009450:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009452:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009454:	f013 0f20 	tst.w	r3, #32
 8009458:	d006      	beq.n	8009468 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800945a:	6802      	ldr	r2, [r0, #0]
 800945c:	6893      	ldr	r3, [r2, #8]
 800945e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009462:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8009464:	430b      	orrs	r3, r1
 8009466:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009468:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800946a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800946e:	d00a      	beq.n	8009486 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009470:	6802      	ldr	r2, [r0, #0]
 8009472:	6853      	ldr	r3, [r2, #4]
 8009474:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009478:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800947a:	430b      	orrs	r3, r1
 800947c:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800947e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009480:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009484:	d00b      	beq.n	800949e <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009486:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009488:	f013 0f80 	tst.w	r3, #128	; 0x80
 800948c:	d006      	beq.n	800949c <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800948e:	6802      	ldr	r2, [r0, #0]
 8009490:	6853      	ldr	r3, [r2, #4]
 8009492:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8009496:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8009498:	430b      	orrs	r3, r1
 800949a:	6053      	str	r3, [r2, #4]
  }
}
 800949c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800949e:	6802      	ldr	r2, [r0, #0]
 80094a0:	6853      	ldr	r3, [r2, #4]
 80094a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80094a6:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80094a8:	430b      	orrs	r3, r1
 80094aa:	6053      	str	r3, [r2, #4]
 80094ac:	e7eb      	b.n	8009486 <UART_AdvFeatureConfig+0xa2>

080094ae <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094ae:	b510      	push	{r4, lr}
 80094b0:	b082      	sub	sp, #8
 80094b2:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094b4:	2300      	movs	r3, #0
 80094b6:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80094b8:	f7fa fc26 	bl	8003d08 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094bc:	6823      	ldr	r3, [r4, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f013 0f08 	tst.w	r3, #8
 80094c4:	d109      	bne.n	80094da <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 80094c6:	2320      	movs	r3, #32
 80094c8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 80094cc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094d0:	2000      	movs	r0, #0
 80094d2:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return HAL_OK;
}
 80094d6:	b002      	add	sp, #8
 80094d8:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	4603      	mov	r3, r0
 80094e2:	2200      	movs	r2, #0
 80094e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80094e8:	4620      	mov	r0, r4
 80094ea:	f7ff fc8f 	bl	8008e0c <UART_WaitOnFlagUntilTimeout>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d0e9      	beq.n	80094c6 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80094f2:	2003      	movs	r0, #3
 80094f4:	e7ef      	b.n	80094d6 <UART_CheckIdleState+0x28>

080094f6 <HAL_UART_Init>:
  if(huart == NULL)
 80094f6:	b378      	cbz	r0, 8009558 <HAL_UART_Init+0x62>
{
 80094f8:	b510      	push	{r4, lr}
 80094fa:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80094fc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8009500:	b30b      	cbz	r3, 8009546 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8009502:	2324      	movs	r3, #36	; 0x24
 8009504:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8009508:	6822      	ldr	r2, [r4, #0]
 800950a:	6813      	ldr	r3, [r2, #0]
 800950c:	f023 0301 	bic.w	r3, r3, #1
 8009510:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009512:	4620      	mov	r0, r4
 8009514:	f7ff fda0 	bl	8009058 <UART_SetConfig>
 8009518:	2801      	cmp	r0, #1
 800951a:	d013      	beq.n	8009544 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800951c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800951e:	b9bb      	cbnz	r3, 8009550 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009520:	6822      	ldr	r2, [r4, #0]
 8009522:	6853      	ldr	r3, [r2, #4]
 8009524:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8009528:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800952a:	6822      	ldr	r2, [r4, #0]
 800952c:	6893      	ldr	r3, [r2, #8]
 800952e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8009532:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8009534:	6822      	ldr	r2, [r4, #0]
 8009536:	6813      	ldr	r3, [r2, #0]
 8009538:	f043 0301 	orr.w	r3, r3, #1
 800953c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800953e:	4620      	mov	r0, r4
 8009540:	f7ff ffb5 	bl	80094ae <UART_CheckIdleState>
}
 8009544:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8009546:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800954a:	f001 fafd 	bl	800ab48 <HAL_UART_MspInit>
 800954e:	e7d8      	b.n	8009502 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8009550:	4620      	mov	r0, r4
 8009552:	f7ff ff47 	bl	80093e4 <UART_AdvFeatureConfig>
 8009556:	e7e3      	b.n	8009520 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8009558:	2001      	movs	r0, #1
}
 800955a:	4770      	bx	lr

0800955c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800955c:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800955e:	680b      	ldr	r3, [r1, #0]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d018      	beq.n	8009596 <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009564:	6803      	ldr	r3, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009566:	4a19      	ldr	r2, [pc, #100]	; (80095cc <FMC_SDRAM_Init+0x70>)
 8009568:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800956a:	684b      	ldr	r3, [r1, #4]
                        Init->RowBitsNumber      |\
 800956c:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800956e:	4323      	orrs	r3, r4
                        Init->MemoryDataWidth    |\
 8009570:	68cc      	ldr	r4, [r1, #12]
                        Init->RowBitsNumber      |\
 8009572:	4323      	orrs	r3, r4
                        Init->InternalBankNumber |\
 8009574:	690c      	ldr	r4, [r1, #16]
                        Init->MemoryDataWidth    |\
 8009576:	4323      	orrs	r3, r4
                        Init->CASLatency         |\
 8009578:	694c      	ldr	r4, [r1, #20]
                        Init->InternalBankNumber |\
 800957a:	4323      	orrs	r3, r4
                        Init->WriteProtection    |\
 800957c:	698c      	ldr	r4, [r1, #24]
                        Init->CASLatency         |\
 800957e:	4323      	orrs	r3, r4
                        Init->SDClockPeriod      |\
 8009580:	69cc      	ldr	r4, [r1, #28]
                        Init->WriteProtection    |\
 8009582:	4323      	orrs	r3, r4
                        Init->ReadBurst          |\
 8009584:	6a0c      	ldr	r4, [r1, #32]
                        Init->SDClockPeriod      |\
 8009586:	4323      	orrs	r3, r4
                        Init->ReadPipeDelay
 8009588:	6a49      	ldr	r1, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 800958a:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800958c:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800958e:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8009590:	2000      	movs	r0, #0
 8009592:	bc30      	pop	{r4, r5}
 8009594:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009596:	6804      	ldr	r4, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009598:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800959c:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 800959e:	6a0a      	ldr	r2, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80095a0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80095a2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 80095a4:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80095a6:	4322      	orrs	r2, r4
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80095a8:	6843      	ldr	r3, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80095aa:	4c08      	ldr	r4, [pc, #32]	; (80095cc <FMC_SDRAM_Init+0x70>)
 80095ac:	401c      	ands	r4, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80095ae:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber       |\
 80095b0:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80095b2:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth     |\
 80095b4:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber       |\
 80095b6:	432b      	orrs	r3, r5
                       Init->InternalBankNumber  |\
 80095b8:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth     |\
 80095ba:	432b      	orrs	r3, r5
                       Init->CASLatency          |\
 80095bc:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber  |\
 80095be:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 80095c0:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency          |\
 80095c2:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80095c4:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80095c6:	6002      	str	r2, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80095c8:	6043      	str	r3, [r0, #4]
 80095ca:	e7e1      	b.n	8009590 <FMC_SDRAM_Init+0x34>
 80095cc:	ffff8000 	.word	0xffff8000

080095d0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80095d0:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80095d2:	2a01      	cmp	r2, #1
 80095d4:	d021      	beq.n	800961a <FMC_SDRAM_Timing_Init+0x4a>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80095d6:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80095d8:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80095dc:	680b      	ldr	r3, [r1, #0]
 80095de:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80095e0:	684c      	ldr	r4, [r1, #4]
 80095e2:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80095e4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80095e8:	688c      	ldr	r4, [r1, #8]
 80095ea:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80095ec:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80095f0:	68cc      	ldr	r4, [r1, #12]
 80095f2:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80095f4:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80095f8:	690c      	ldr	r4, [r1, #16]
 80095fa:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80095fc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 8009600:	694c      	ldr	r4, [r1, #20]
 8009602:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8009604:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8009608:	6989      	ldr	r1, [r1, #24]
 800960a:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800960c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8009610:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009612:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8009614:	2000      	movs	r0, #0
 8009616:	bc30      	pop	{r4, r5}
 8009618:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800961a:	6883      	ldr	r3, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800961c:	4c11      	ldr	r4, [pc, #68]	; (8009664 <FMC_SDRAM_Timing_Init+0x94>)
 800961e:	401c      	ands	r4, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8009620:	68ca      	ldr	r2, [r1, #12]
 8009622:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1) << 20)); 
 8009624:	694b      	ldr	r3, [r1, #20]
 8009626:	1e5a      	subs	r2, r3, #1
 8009628:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800962a:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 800962e:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009630:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009632:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009636:	680b      	ldr	r3, [r1, #0]
 8009638:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800963a:	684d      	ldr	r5, [r1, #4]
 800963c:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800963e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009642:	688d      	ldr	r5, [r1, #8]
 8009644:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8009646:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800964a:	690d      	ldr	r5, [r1, #16]
 800964c:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800964e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 8009652:	6989      	ldr	r1, [r1, #24]
 8009654:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009656:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800965a:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800965c:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800965e:	60c3      	str	r3, [r0, #12]
 8009660:	e7d8      	b.n	8009614 <FMC_SDRAM_Timing_Init+0x44>
 8009662:	bf00      	nop
 8009664:	ff0f0fff 	.word	0xff0f0fff

08009668 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009668:	b410      	push	{r4}
 800966a:	b083      	sub	sp, #12
 800966c:	4602      	mov	r2, r0
  __IO uint32_t tmpr = 0;
 800966e:	2000      	movs	r0, #0
 8009670:	9001      	str	r0, [sp, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009672:	680b      	ldr	r3, [r1, #0]
                    (Command->CommandTarget)                |\
 8009674:	684c      	ldr	r4, [r1, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009676:	4323      	orrs	r3, r4
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8009678:	688c      	ldr	r4, [r1, #8]
 800967a:	3c01      	subs	r4, #1
                    (Command->CommandTarget)                |\
 800967c:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
                    ((Command->ModeRegisterDefinition) << 9)
 8009680:	68c9      	ldr	r1, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009682:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8009686:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8009688:	9b01      	ldr	r3, [sp, #4]
 800968a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
}
 800968c:	b003      	add	sp, #12
 800968e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009692:	4770      	bx	lr

08009694 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8009694:	6943      	ldr	r3, [r0, #20]
 8009696:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800969a:	6143      	str	r3, [r0, #20]
  
  return HAL_OK;   
}
 800969c:	2000      	movs	r0, #0
 800969e:	4770      	bx	lr

080096a0 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096a0:	4b0b      	ldr	r3, [pc, #44]	; (80096d0 <SDMMC_GetCmdError+0x30>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a0b      	ldr	r2, [pc, #44]	; (80096d4 <SDMMC_GetCmdError+0x34>)
 80096a6:	fba2 2303 	umull	r2, r3, r2, r3
 80096aa:	0a5a      	lsrs	r2, r3, #9
 80096ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80096b0:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 80096b4:	461a      	mov	r2, r3
 80096b6:	3b01      	subs	r3, #1
 80096b8:	b13a      	cbz	r2, 80096ca <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80096ba:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80096bc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80096c0:	d0f8      	beq.n	80096b4 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80096c2:	23c5      	movs	r3, #197	; 0xc5
 80096c4:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80096c6:	2000      	movs	r0, #0
 80096c8:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80096ca:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80096ce:	4770      	bx	lr
 80096d0:	2000008c 	.word	0x2000008c
 80096d4:	10624dd3 	.word	0x10624dd3

080096d8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80096d8:	4601      	mov	r1, r0
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096da:	4b14      	ldr	r3, [pc, #80]	; (800972c <SDMMC_GetCmdResp2+0x54>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a14      	ldr	r2, [pc, #80]	; (8009730 <SDMMC_GetCmdResp2+0x58>)
 80096e0:	fba2 2303 	umull	r2, r3, r2, r3
 80096e4:	0a5a      	lsrs	r2, r3, #9
 80096e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80096ea:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 80096ee:	461a      	mov	r2, r3
 80096f0:	3b01      	subs	r3, #1
 80096f2:	b1ba      	cbz	r2, 8009724 <SDMMC_GetCmdResp2+0x4c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 80096f4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80096f6:	f012 0f45 	tst.w	r2, #69	; 0x45
 80096fa:	d0f8      	beq.n	80096ee <SDMMC_GetCmdResp2+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80096fc:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8009700:	d1f5      	bne.n	80096ee <SDMMC_GetCmdResp2+0x16>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009702:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009704:	f013 0f04 	tst.w	r3, #4
 8009708:	d106      	bne.n	8009718 <SDMMC_GetCmdResp2+0x40>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800970a:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800970c:	f010 0001 	ands.w	r0, r0, #1
 8009710:	d105      	bne.n	800971e <SDMMC_GetCmdResp2+0x46>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009712:	23c5      	movs	r3, #197	; 0xc5
 8009714:	638b      	str	r3, [r1, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009716:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009718:	2004      	movs	r0, #4
 800971a:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800971c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800971e:	2001      	movs	r0, #1
 8009720:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009722:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8009724:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	2000008c 	.word	0x2000008c
 8009730:	10624dd3 	.word	0x10624dd3

08009734 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009734:	4601      	mov	r1, r0
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009736:	4b10      	ldr	r3, [pc, #64]	; (8009778 <SDMMC_GetCmdResp3+0x44>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a10      	ldr	r2, [pc, #64]	; (800977c <SDMMC_GetCmdResp3+0x48>)
 800973c:	fba2 2303 	umull	r2, r3, r2, r3
 8009740:	0a5a      	lsrs	r2, r3, #9
 8009742:	f241 3388 	movw	r3, #5000	; 0x1388
 8009746:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 800974a:	461a      	mov	r2, r3
 800974c:	3b01      	subs	r3, #1
 800974e:	b182      	cbz	r2, 8009772 <SDMMC_GetCmdResp3+0x3e>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8009750:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009752:	f012 0f45 	tst.w	r2, #69	; 0x45
 8009756:	d0f8      	beq.n	800974a <SDMMC_GetCmdResp3+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009758:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800975c:	d1f5      	bne.n	800974a <SDMMC_GetCmdResp3+0x16>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800975e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8009760:	f010 0004 	ands.w	r0, r0, #4
 8009764:	d102      	bne.n	800976c <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009766:	23c5      	movs	r3, #197	; 0xc5
 8009768:	638b      	str	r3, [r1, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800976a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800976c:	2004      	movs	r0, #4
 800976e:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009770:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8009772:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009776:	4770      	bx	lr
 8009778:	2000008c 	.word	0x2000008c
 800977c:	10624dd3 	.word	0x10624dd3

08009780 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009780:	4601      	mov	r1, r0
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009782:	4b16      	ldr	r3, [pc, #88]	; (80097dc <SDMMC_GetCmdResp7+0x5c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a16      	ldr	r2, [pc, #88]	; (80097e0 <SDMMC_GetCmdResp7+0x60>)
 8009788:	fba2 2303 	umull	r2, r3, r2, r3
 800978c:	0a5a      	lsrs	r2, r3, #9
 800978e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009792:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8009796:	461a      	mov	r2, r3
 8009798:	3b01      	subs	r3, #1
 800979a:	b1e2      	cbz	r2, 80097d6 <SDMMC_GetCmdResp7+0x56>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800979c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800979e:	f012 0f45 	tst.w	r2, #69	; 0x45
 80097a2:	d0f8      	beq.n	8009796 <SDMMC_GetCmdResp7+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097a4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80097a8:	d1f5      	bne.n	8009796 <SDMMC_GetCmdResp7+0x16>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80097aa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80097ac:	f013 0f04 	tst.w	r3, #4
 80097b0:	d10b      	bne.n	80097ca <SDMMC_GetCmdResp7+0x4a>
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80097b2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80097b4:	f013 0301 	ands.w	r3, r3, #1
 80097b8:	d10a      	bne.n	80097d0 <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80097ba:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80097bc:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80097c0:	d00b      	beq.n	80097da <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80097c2:	2240      	movs	r2, #64	; 0x40
 80097c4:	638a      	str	r2, [r1, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80097c6:	4618      	mov	r0, r3
 80097c8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80097ca:	2004      	movs	r0, #4
 80097cc:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097ce:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80097d0:	2001      	movs	r0, #1
 80097d2:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097d4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80097d6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  
}
 80097da:	4770      	bx	lr
 80097dc:	2000008c 	.word	0x2000008c
 80097e0:	10624dd3 	.word	0x10624dd3

080097e4 <SDMMC_Init>:
{
 80097e4:	b084      	sub	sp, #16
 80097e6:	b410      	push	{r4}
 80097e8:	ac02      	add	r4, sp, #8
 80097ea:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 80097ee:	460b      	mov	r3, r1
 80097f0:	9a03      	ldr	r2, [sp, #12]
 80097f2:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 80097f4:	9a04      	ldr	r2, [sp, #16]
             Init.ClockBypass         |\
 80097f6:	4313      	orrs	r3, r2
             Init.BusWide             |\
 80097f8:	9a05      	ldr	r2, [sp, #20]
             Init.ClockPowerSave      |\
 80097fa:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 80097fc:	9a06      	ldr	r2, [sp, #24]
             Init.BusWide             |\
 80097fe:	4313      	orrs	r3, r2
             Init.ClockDiv
 8009800:	9a07      	ldr	r2, [sp, #28]
             Init.HardwareFlowControl |\
 8009802:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009804:	6841      	ldr	r1, [r0, #4]
 8009806:	4a04      	ldr	r2, [pc, #16]	; (8009818 <SDMMC_Init+0x34>)
 8009808:	400a      	ands	r2, r1
 800980a:	4313      	orrs	r3, r2
 800980c:	6043      	str	r3, [r0, #4]
}
 800980e:	2000      	movs	r0, #0
 8009810:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009814:	b004      	add	sp, #16
 8009816:	4770      	bx	lr
 8009818:	ffff8100 	.word	0xffff8100

0800981c <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800981c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8009820:	4770      	bx	lr

08009822 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 8009822:	680b      	ldr	r3, [r1, #0]
 8009824:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8009828:	2000      	movs	r0, #0
 800982a:	4770      	bx	lr

0800982c <SDMMC_PowerState_ON>:
{  
 800982c:	b508      	push	{r3, lr}
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800982e:	2303      	movs	r3, #3
 8009830:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8009832:	2002      	movs	r0, #2
 8009834:	f7fa fa6e 	bl	8003d14 <HAL_Delay>
}
 8009838:	2000      	movs	r0, #0
 800983a:	bd08      	pop	{r3, pc}

0800983c <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800983c:	6800      	ldr	r0, [r0, #0]
}
 800983e:	f000 0003 	and.w	r0, r0, #3
 8009842:	4770      	bx	lr

08009844 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8009844:	680b      	ldr	r3, [r1, #0]
 8009846:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009848:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 800984a:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800984c:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 800984e:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8009850:	4313      	orrs	r3, r2
                       Command->CPSM);
 8009852:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8009854:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009856:	68c1      	ldr	r1, [r0, #12]
 8009858:	4a02      	ldr	r2, [pc, #8]	; (8009864 <SDMMC_SendCommand+0x20>)
 800985a:	400a      	ands	r2, r1
 800985c:	4313      	orrs	r3, r2
 800985e:	60c3      	str	r3, [r0, #12]
}
 8009860:	2000      	movs	r0, #0
 8009862:	4770      	bx	lr
 8009864:	fffff000 	.word	0xfffff000

08009868 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 8009868:	6900      	ldr	r0, [r0, #16]
}
 800986a:	b2c0      	uxtb	r0, r0
 800986c:	4770      	bx	lr

0800986e <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800986e:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8009870:	5840      	ldr	r0, [r0, r1]
}  
 8009872:	4770      	bx	lr

08009874 <SDMMC_GetCmdResp1>:
{
 8009874:	b538      	push	{r3, r4, r5, lr}
 8009876:	4604      	mov	r4, r0
 8009878:	460d      	mov	r5, r1
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800987a:	4b50      	ldr	r3, [pc, #320]	; (80099bc <SDMMC_GetCmdResp1+0x148>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4950      	ldr	r1, [pc, #320]	; (80099c0 <SDMMC_GetCmdResp1+0x14c>)
 8009880:	fba1 1303 	umull	r1, r3, r1, r3
 8009884:	0a5b      	lsrs	r3, r3, #9
 8009886:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 800988a:	4613      	mov	r3, r2
 800988c:	3a01      	subs	r2, #1
 800988e:	2b00      	cmp	r3, #0
 8009890:	d05d      	beq.n	800994e <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDMMCx->STA;
 8009892:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009894:	f013 0f45 	tst.w	r3, #69	; 0x45
 8009898:	d0f7      	beq.n	800988a <SDMMC_GetCmdResp1+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800989a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800989e:	d1f4      	bne.n	800988a <SDMMC_GetCmdResp1+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80098a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098a2:	f013 0f04 	tst.w	r3, #4
 80098a6:	d106      	bne.n	80098b6 <SDMMC_GetCmdResp1+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80098a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098aa:	f013 0f01 	tst.w	r3, #1
 80098ae:	d005      	beq.n	80098bc <SDMMC_GetCmdResp1+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80098b0:	2001      	movs	r0, #1
 80098b2:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098b4:	e04d      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80098b6:	2004      	movs	r0, #4
 80098b8:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80098ba:	e04a      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80098bc:	23c5      	movs	r3, #197	; 0xc5
 80098be:	63a3      	str	r3, [r4, #56]	; 0x38
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80098c0:	4620      	mov	r0, r4
 80098c2:	f7ff ffd1 	bl	8009868 <SDMMC_GetCommandResponse>
 80098c6:	42a8      	cmp	r0, r5
 80098c8:	d001      	beq.n	80098ce <SDMMC_GetCmdResp1+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098ca:	2001      	movs	r0, #1
 80098cc:	e041      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80098ce:	2100      	movs	r1, #0
 80098d0:	4620      	mov	r0, r4
 80098d2:	f7ff ffcc 	bl	800986e <SDMMC_GetResponse>
 80098d6:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80098d8:	483a      	ldr	r0, [pc, #232]	; (80099c4 <SDMMC_GetCmdResp1+0x150>)
 80098da:	4018      	ands	r0, r3
 80098dc:	b3c8      	cbz	r0, 8009952 <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80098de:	2b00      	cmp	r3, #0
 80098e0:	db38      	blt.n	8009954 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80098e2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80098e6:	d138      	bne.n	800995a <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80098e8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80098ec:	d137      	bne.n	800995e <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80098ee:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80098f2:	d136      	bne.n	8009962 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80098f4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80098f8:	d136      	bne.n	8009968 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80098fa:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80098fe:	d136      	bne.n	800996e <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009900:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8009904:	d136      	bne.n	8009974 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009906:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800990a:	d136      	bne.n	800997a <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800990c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8009910:	d136      	bne.n	8009980 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009912:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8009916:	d136      	bne.n	8009986 <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009918:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800991c:	d136      	bne.n	800998c <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800991e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8009922:	d136      	bne.n	8009992 <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009924:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009928:	d136      	bne.n	8009998 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800992a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800992e:	d136      	bne.n	800999e <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009930:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8009934:	d136      	bne.n	80099a4 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009936:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800993a:	d136      	bne.n	80099aa <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800993c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009940:	d136      	bne.n	80099b0 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009942:	f013 0f08 	tst.w	r3, #8
 8009946:	d036      	beq.n	80099b6 <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009948:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800994c:	e001      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 800994e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009952:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009954:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8009958:	e7fb      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800995a:	2040      	movs	r0, #64	; 0x40
 800995c:	e7f9      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800995e:	2080      	movs	r0, #128	; 0x80
 8009960:	e7f7      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009962:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009966:	e7f4      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009968:	f44f 7000 	mov.w	r0, #512	; 0x200
 800996c:	e7f1      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800996e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009972:	e7ee      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009974:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009978:	e7eb      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800997a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800997e:	e7e8      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009980:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009984:	e7e5      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009986:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800998a:	e7e2      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 800998c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009990:	e7df      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009992:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009996:	e7dc      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009998:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800999c:	e7d9      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800999e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80099a2:	e7d6      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80099a4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80099a8:	e7d3      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80099aa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80099ae:	e7d0      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 80099b0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80099b4:	e7cd      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80099b6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80099ba:	e7ca      	b.n	8009952 <SDMMC_GetCmdResp1+0xde>
 80099bc:	2000008c 	.word	0x2000008c
 80099c0:	10624dd3 	.word	0x10624dd3
 80099c4:	fdffe008 	.word	0xfdffe008

080099c8 <SDMMC_GetCmdResp6>:
{
 80099c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ca:	4605      	mov	r5, r0
 80099cc:	460e      	mov	r6, r1
 80099ce:	4617      	mov	r7, r2
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80099d0:	4b23      	ldr	r3, [pc, #140]	; (8009a60 <SDMMC_GetCmdResp6+0x98>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4823      	ldr	r0, [pc, #140]	; (8009a64 <SDMMC_GetCmdResp6+0x9c>)
 80099d6:	fba0 2303 	umull	r2, r3, r0, r3
 80099da:	0a58      	lsrs	r0, r3, #9
 80099dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80099e0:	fb03 f300 	mul.w	r3, r3, r0
    if (count-- == 0U)
 80099e4:	461c      	mov	r4, r3
 80099e6:	3b01      	subs	r3, #1
 80099e8:	b38c      	cbz	r4, 8009a4e <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDMMCx->STA;
 80099ea:	6b6c      	ldr	r4, [r5, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80099ec:	f014 0f45 	tst.w	r4, #69	; 0x45
 80099f0:	d0f8      	beq.n	80099e4 <SDMMC_GetCmdResp6+0x1c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80099f2:	f414 6f00 	tst.w	r4, #2048	; 0x800
 80099f6:	d1f5      	bne.n	80099e4 <SDMMC_GetCmdResp6+0x1c>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80099f8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80099fa:	f013 0f04 	tst.w	r3, #4
 80099fe:	d106      	bne.n	8009a0e <SDMMC_GetCmdResp6+0x46>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a00:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009a02:	f013 0f01 	tst.w	r3, #1
 8009a06:	d005      	beq.n	8009a14 <SDMMC_GetCmdResp6+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a08:	2001      	movs	r0, #1
 8009a0a:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a0c:	e021      	b.n	8009a52 <SDMMC_GetCmdResp6+0x8a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a0e:	2004      	movs	r0, #4
 8009a10:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a12:	e01e      	b.n	8009a52 <SDMMC_GetCmdResp6+0x8a>
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009a14:	4628      	mov	r0, r5
 8009a16:	f7ff ff27 	bl	8009868 <SDMMC_GetCommandResponse>
 8009a1a:	42b0      	cmp	r0, r6
 8009a1c:	d001      	beq.n	8009a22 <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a1e:	2001      	movs	r0, #1
 8009a20:	e017      	b.n	8009a52 <SDMMC_GetCmdResp6+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009a22:	23c5      	movs	r3, #197	; 0xc5
 8009a24:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009a26:	2100      	movs	r1, #0
 8009a28:	4628      	mov	r0, r5
 8009a2a:	f7ff ff20 	bl	800986e <SDMMC_GetResponse>
 8009a2e:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009a30:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 8009a34:	d008      	beq.n	8009a48 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009a36:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8009a3a:	d10b      	bne.n	8009a54 <SDMMC_GetCmdResp6+0x8c>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009a3c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8009a40:	d00b      	beq.n	8009a5a <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009a42:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009a46:	e004      	b.n	8009a52 <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009a48:	0c1b      	lsrs	r3, r3, #16
 8009a4a:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 8009a4c:	e001      	b.n	8009a52 <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 8009a4e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009a54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009a58:	e7fb      	b.n	8009a52 <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009a5a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009a5e:	e7f8      	b.n	8009a52 <SDMMC_GetCmdResp6+0x8a>
 8009a60:	2000008c 	.word	0x2000008c
 8009a64:	10624dd3 	.word	0x10624dd3

08009a68 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009a68:	680b      	ldr	r3, [r1, #0]
 8009a6a:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8009a6c:	684b      	ldr	r3, [r1, #4]
 8009a6e:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009a70:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 8009a72:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009a74:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8009a76:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8009a78:	4313      	orrs	r3, r2
                       Data->DPSM);
 8009a7a:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8009a7c:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009a7e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009a80:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8009a84:	4313      	orrs	r3, r2
 8009a86:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8009a88:	2000      	movs	r0, #0
 8009a8a:	4770      	bx	lr

08009a8c <SDMMC_CmdBlockLength>:
{
 8009a8c:	b530      	push	{r4, r5, lr}
 8009a8e:	b087      	sub	sp, #28
 8009a90:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009a92:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009a94:	2510      	movs	r5, #16
 8009a96:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a98:	2340      	movs	r3, #64	; 0x40
 8009a9a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aa4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009aa6:	a901      	add	r1, sp, #4
 8009aa8:	f7ff fecc 	bl	8009844 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f7ff fede 	bl	8009874 <SDMMC_GetCmdResp1>
}
 8009ab8:	b007      	add	sp, #28
 8009aba:	bd30      	pop	{r4, r5, pc}

08009abc <SDMMC_CmdReadSingleBlock>:
{
 8009abc:	b530      	push	{r4, r5, lr}
 8009abe:	b087      	sub	sp, #28
 8009ac0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009ac2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009ac4:	2511      	movs	r5, #17
 8009ac6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ac8:	2340      	movs	r3, #64	; 0x40
 8009aca:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009acc:	2300      	movs	r3, #0
 8009ace:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ad4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ad6:	a901      	add	r1, sp, #4
 8009ad8:	f7ff feb4 	bl	8009844 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ae0:	4629      	mov	r1, r5
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	f7ff fec6 	bl	8009874 <SDMMC_GetCmdResp1>
}
 8009ae8:	b007      	add	sp, #28
 8009aea:	bd30      	pop	{r4, r5, pc}

08009aec <SDMMC_CmdReadMultiBlock>:
{
 8009aec:	b530      	push	{r4, r5, lr}
 8009aee:	b087      	sub	sp, #28
 8009af0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009af2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009af4:	2512      	movs	r5, #18
 8009af6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009af8:	2340      	movs	r3, #64	; 0x40
 8009afa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009afc:	2300      	movs	r3, #0
 8009afe:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b04:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b06:	a901      	add	r1, sp, #4
 8009b08:	f7ff fe9c 	bl	8009844 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b10:	4629      	mov	r1, r5
 8009b12:	4620      	mov	r0, r4
 8009b14:	f7ff feae 	bl	8009874 <SDMMC_GetCmdResp1>
}
 8009b18:	b007      	add	sp, #28
 8009b1a:	bd30      	pop	{r4, r5, pc}

08009b1c <SDMMC_CmdWriteSingleBlock>:
{
 8009b1c:	b530      	push	{r4, r5, lr}
 8009b1e:	b087      	sub	sp, #28
 8009b20:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009b22:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009b24:	2518      	movs	r5, #24
 8009b26:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b28:	2340      	movs	r3, #64	; 0x40
 8009b2a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b34:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b36:	a901      	add	r1, sp, #4
 8009b38:	f7ff fe84 	bl	8009844 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b40:	4629      	mov	r1, r5
 8009b42:	4620      	mov	r0, r4
 8009b44:	f7ff fe96 	bl	8009874 <SDMMC_GetCmdResp1>
}
 8009b48:	b007      	add	sp, #28
 8009b4a:	bd30      	pop	{r4, r5, pc}

08009b4c <SDMMC_CmdWriteMultiBlock>:
{
 8009b4c:	b530      	push	{r4, r5, lr}
 8009b4e:	b087      	sub	sp, #28
 8009b50:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009b52:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009b54:	2519      	movs	r5, #25
 8009b56:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b58:	2340      	movs	r3, #64	; 0x40
 8009b5a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b64:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b66:	a901      	add	r1, sp, #4
 8009b68:	f7ff fe6c 	bl	8009844 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b70:	4629      	mov	r1, r5
 8009b72:	4620      	mov	r0, r4
 8009b74:	f7ff fe7e 	bl	8009874 <SDMMC_GetCmdResp1>
}
 8009b78:	b007      	add	sp, #28
 8009b7a:	bd30      	pop	{r4, r5, pc}

08009b7c <SDMMC_CmdStopTransfer>:
{
 8009b7c:	b530      	push	{r4, r5, lr}
 8009b7e:	b087      	sub	sp, #28
 8009b80:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8009b82:	2300      	movs	r3, #0
 8009b84:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009b86:	250c      	movs	r5, #12
 8009b88:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b8a:	2240      	movs	r2, #64	; 0x40
 8009b8c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b8e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b94:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b96:	a901      	add	r1, sp, #4
 8009b98:	f7ff fe54 	bl	8009844 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009b9c:	4a03      	ldr	r2, [pc, #12]	; (8009bac <SDMMC_CmdStopTransfer+0x30>)
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f7ff fe67 	bl	8009874 <SDMMC_GetCmdResp1>
}
 8009ba6:	b007      	add	sp, #28
 8009ba8:	bd30      	pop	{r4, r5, pc}
 8009baa:	bf00      	nop
 8009bac:	05f5e100 	.word	0x05f5e100

08009bb0 <SDMMC_CmdSelDesel>:
{
 8009bb0:	b530      	push	{r4, r5, lr}
 8009bb2:	b087      	sub	sp, #28
 8009bb4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009bb6:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009bb8:	2507      	movs	r5, #7
 8009bba:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bbc:	2340      	movs	r3, #64	; 0x40
 8009bbe:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bc8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bca:	a901      	add	r1, sp, #4
 8009bcc:	f7ff fe3a 	bl	8009844 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f7ff fe4c 	bl	8009874 <SDMMC_GetCmdResp1>
}
 8009bdc:	b007      	add	sp, #28
 8009bde:	bd30      	pop	{r4, r5, pc}

08009be0 <SDMMC_CmdGoIdleState>:
{
 8009be0:	b510      	push	{r4, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8009be6:	2300      	movs	r3, #0
 8009be8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009bea:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009bec:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bee:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bf4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bf6:	a901      	add	r1, sp, #4
 8009bf8:	f7ff fe24 	bl	8009844 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f7ff fd4f 	bl	80096a0 <SDMMC_GetCmdError>
}
 8009c02:	b006      	add	sp, #24
 8009c04:	bd10      	pop	{r4, pc}

08009c06 <SDMMC_CmdOperCond>:
{
 8009c06:	b510      	push	{r4, lr}
 8009c08:	b086      	sub	sp, #24
 8009c0a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009c0c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009c10:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009c12:	2308      	movs	r3, #8
 8009c14:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c16:	2340      	movs	r3, #64	; 0x40
 8009c18:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c22:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c24:	a901      	add	r1, sp, #4
 8009c26:	f7ff fe0d 	bl	8009844 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f7ff fda8 	bl	8009780 <SDMMC_GetCmdResp7>
}
 8009c30:	b006      	add	sp, #24
 8009c32:	bd10      	pop	{r4, pc}

08009c34 <SDMMC_CmdAppCommand>:
{
 8009c34:	b530      	push	{r4, r5, lr}
 8009c36:	b087      	sub	sp, #28
 8009c38:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009c3a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009c3c:	2537      	movs	r5, #55	; 0x37
 8009c3e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c40:	2340      	movs	r3, #64	; 0x40
 8009c42:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c44:	2300      	movs	r3, #0
 8009c46:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c4c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c4e:	a901      	add	r1, sp, #4
 8009c50:	f7ff fdf8 	bl	8009844 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c58:	4629      	mov	r1, r5
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f7ff fe0a 	bl	8009874 <SDMMC_GetCmdResp1>
}
 8009c60:	b007      	add	sp, #28
 8009c62:	bd30      	pop	{r4, r5, pc}

08009c64 <SDMMC_CmdAppOperCommand>:
{
 8009c64:	b510      	push	{r4, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009c6a:	4b0a      	ldr	r3, [pc, #40]	; (8009c94 <SDMMC_CmdAppOperCommand+0x30>)
 8009c6c:	430b      	orrs	r3, r1
 8009c6e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009c70:	2329      	movs	r3, #41	; 0x29
 8009c72:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c74:	2340      	movs	r3, #64	; 0x40
 8009c76:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c80:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c82:	a901      	add	r1, sp, #4
 8009c84:	f7ff fdde 	bl	8009844 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f7ff fd53 	bl	8009734 <SDMMC_GetCmdResp3>
}
 8009c8e:	b006      	add	sp, #24
 8009c90:	bd10      	pop	{r4, pc}
 8009c92:	bf00      	nop
 8009c94:	80100000 	.word	0x80100000

08009c98 <SDMMC_CmdBusWidth>:
{
 8009c98:	b530      	push	{r4, r5, lr}
 8009c9a:	b087      	sub	sp, #28
 8009c9c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009c9e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009ca0:	2506      	movs	r5, #6
 8009ca2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ca4:	2340      	movs	r3, #64	; 0x40
 8009ca6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cb0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cb2:	a901      	add	r1, sp, #4
 8009cb4:	f7ff fdc6 	bl	8009844 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f7ff fdd8 	bl	8009874 <SDMMC_GetCmdResp1>
}
 8009cc4:	b007      	add	sp, #28
 8009cc6:	bd30      	pop	{r4, r5, pc}

08009cc8 <SDMMC_CmdSendSCR>:
{
 8009cc8:	b530      	push	{r4, r5, lr}
 8009cca:	b087      	sub	sp, #28
 8009ccc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009cd2:	2533      	movs	r5, #51	; 0x33
 8009cd4:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cd6:	2240      	movs	r2, #64	; 0x40
 8009cd8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cda:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ce0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ce2:	a901      	add	r1, sp, #4
 8009ce4:	f7ff fdae 	bl	8009844 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cec:	4629      	mov	r1, r5
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f7ff fdc0 	bl	8009874 <SDMMC_GetCmdResp1>
}
 8009cf4:	b007      	add	sp, #28
 8009cf6:	bd30      	pop	{r4, r5, pc}

08009cf8 <SDMMC_CmdSendCID>:
{
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009d02:	2202      	movs	r2, #2
 8009d04:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009d06:	22c0      	movs	r2, #192	; 0xc0
 8009d08:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d0a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d10:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d12:	a901      	add	r1, sp, #4
 8009d14:	f7ff fd96 	bl	8009844 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f7ff fcdd 	bl	80096d8 <SDMMC_GetCmdResp2>
}
 8009d1e:	b006      	add	sp, #24
 8009d20:	bd10      	pop	{r4, pc}

08009d22 <SDMMC_CmdSendCSD>:
{
 8009d22:	b510      	push	{r4, lr}
 8009d24:	b086      	sub	sp, #24
 8009d26:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8009d28:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009d2a:	2309      	movs	r3, #9
 8009d2c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009d2e:	23c0      	movs	r3, #192	; 0xc0
 8009d30:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d32:	2300      	movs	r3, #0
 8009d34:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d3a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d3c:	a901      	add	r1, sp, #4
 8009d3e:	f7ff fd81 	bl	8009844 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009d42:	4620      	mov	r0, r4
 8009d44:	f7ff fcc8 	bl	80096d8 <SDMMC_GetCmdResp2>
}
 8009d48:	b006      	add	sp, #24
 8009d4a:	bd10      	pop	{r4, pc}

08009d4c <SDMMC_CmdSetRelAdd>:
{
 8009d4c:	b570      	push	{r4, r5, r6, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	4604      	mov	r4, r0
 8009d52:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 8009d54:	2300      	movs	r3, #0
 8009d56:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009d58:	2603      	movs	r6, #3
 8009d5a:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d5c:	2240      	movs	r2, #64	; 0x40
 8009d5e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d60:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d66:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d68:	a901      	add	r1, sp, #4
 8009d6a:	f7ff fd6b 	bl	8009844 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009d6e:	462a      	mov	r2, r5
 8009d70:	4631      	mov	r1, r6
 8009d72:	4620      	mov	r0, r4
 8009d74:	f7ff fe28 	bl	80099c8 <SDMMC_GetCmdResp6>
}
 8009d78:	b006      	add	sp, #24
 8009d7a:	bd70      	pop	{r4, r5, r6, pc}

08009d7c <SDMMC_CmdSendStatus>:
{
 8009d7c:	b530      	push	{r4, r5, lr}
 8009d7e:	b087      	sub	sp, #28
 8009d80:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8009d82:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009d84:	250d      	movs	r5, #13
 8009d86:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d88:	2340      	movs	r3, #64	; 0x40
 8009d8a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d94:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d96:	a901      	add	r1, sp, #4
 8009d98:	f7ff fd54 	bl	8009844 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009da0:	4629      	mov	r1, r5
 8009da2:	4620      	mov	r0, r4
 8009da4:	f7ff fd66 	bl	8009874 <SDMMC_GetCmdResp1>
}
 8009da8:	b007      	add	sp, #28
 8009daa:	bd30      	pop	{r4, r5, pc}

08009dac <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8009dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db0:	b089      	sub	sp, #36	; 0x24
 8009db2:	9003      	str	r0, [sp, #12]
 8009db4:	9105      	str	r1, [sp, #20]
 8009db6:	4611      	mov	r1, r2
 8009db8:	9207      	str	r2, [sp, #28]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8009dba:	4a67      	ldr	r2, [pc, #412]	; (8009f58 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ac>)
 8009dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc0:	0a1b      	lsrs	r3, r3, #8
 8009dc2:	9306      	str	r3, [sp, #24]
  currentMCU = BlockIndex;
 8009dc4:	9104      	str	r1, [sp, #16]
  

  while(currentMCU < (numberMCU + BlockIndex))
 8009dc6:	e0a4      	b.n	8009f12 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x166>
    
    for(i= 0; i <  16; i+=2)
    {
      if(i == 8)
      {
        pLum = pInBuffer + 128;
 8009dc8:	9b03      	ldr	r3, [sp, #12]
 8009dca:	f103 0780 	add.w	r7, r3, #128	; 0x80
 8009dce:	e08e      	b.n	8009eee <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x142>
        
        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
          {           
            cbcomp = (int32_t)(*(pChrom));
 8009dd0:	f898 5000 	ldrb.w	r5, [r8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8009dd4:	4b61      	ldr	r3, [pc, #388]	; (8009f5c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b0>)
 8009dd6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8009dda:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
            
            crcomp = (int32_t)(*(pChrom + 64));
 8009dde:	f898 2040 	ldrb.w	r2, [r8, #64]	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 8009de2:	f503 6188 	add.w	r1, r3, #1088	; 0x440
 8009de6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8009dea:	f503 6604 	add.w	r6, r3, #2112	; 0x840
 8009dee:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8009df2:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8009df6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009dfa:	441a      	add	r2, r3
          
            
            
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
            ycomp = (int32_t)(*(pLum +j));
 8009dfc:	5d3e      	ldrb	r6, [r7, r4]
            
            *(__IO uint32_t *)pOutAddr = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8009dfe:	198d      	adds	r5, r1, r6
 8009e00:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8009e04:	4b56      	ldr	r3, [pc, #344]	; (8009f60 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b4>)
 8009e06:	f813 9005 	ldrb.w	r9, [r3, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8009e0a:	eb06 4522 	add.w	r5, r6, r2, asr #16
 8009e0e:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8009e12:	5d5d      	ldrb	r5, [r3, r5]
 8009e14:	022d      	lsls	r5, r5, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8009e16:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 8009e1a:	4406      	add	r6, r0
 8009e1c:	f506 7680 	add.w	r6, r6, #256	; 0x100
 8009e20:	5d9e      	ldrb	r6, [r3, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8009e22:	4335      	orrs	r5, r6
            *(__IO uint32_t *)pOutAddr = 
 8009e24:	f8cc 5000 	str.w	r5, [ip]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8009e28:	1c65      	adds	r5, r4, #1
 8009e2a:	5d7e      	ldrb	r6, [r7, r5]
            
            *((__IO uint32_t *)(pOutAddr + 4)) = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8009e2c:	198d      	adds	r5, r1, r6
 8009e2e:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8009e32:	f813 9005 	ldrb.w	r9, [r3, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8009e36:	eb06 4522 	add.w	r5, r6, r2, asr #16
 8009e3a:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8009e3e:	5d5d      	ldrb	r5, [r3, r5]
 8009e40:	022d      	lsls	r5, r5, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8009e42:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 8009e46:	4406      	add	r6, r0
 8009e48:	f506 7680 	add.w	r6, r6, #256	; 0x100
 8009e4c:	5d9e      	ldrb	r6, [r3, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8009e4e:	4335      	orrs	r5, r6
            *((__IO uint32_t *)(pOutAddr + 4)) = 
 8009e50:	f8cc 5004 	str.w	r5, [ip, #4]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 8009e54:	f104 0508 	add.w	r5, r4, #8
 8009e58:	5d7e      	ldrb	r6, [r7, r5]
            
            *(__IO uint32_t *)pOutAddr2 = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8009e5a:	198d      	adds	r5, r1, r6
 8009e5c:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8009e60:	f813 9005 	ldrb.w	r9, [r3, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8009e64:	eb06 4522 	add.w	r5, r6, r2, asr #16
 8009e68:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8009e6c:	5d5d      	ldrb	r5, [r3, r5]
 8009e6e:	022d      	lsls	r5, r5, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8009e70:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 8009e74:	4406      	add	r6, r0
 8009e76:	f506 7680 	add.w	r6, r6, #256	; 0x100
 8009e7a:	5d9e      	ldrb	r6, [r3, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8009e7c:	4335      	orrs	r5, r6
            *(__IO uint32_t *)pOutAddr2 = 
 8009e7e:	f8ce 5000 	str.w	r5, [lr]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 8009e82:	f104 0509 	add.w	r5, r4, #9
 8009e86:	5d7d      	ldrb	r5, [r7, r5]
            
            *((__IO uint32_t *)(pOutAddr2 +4)) = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8009e88:	4429      	add	r1, r5
 8009e8a:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8009e8e:	5c5e      	ldrb	r6, [r3, r1]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8009e90:	eb05 4122 	add.w	r1, r5, r2, asr #16
 8009e94:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8009e98:	5c59      	ldrb	r1, [r3, r1]
 8009e9a:	0209      	lsls	r1, r1, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8009e9c:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 8009ea0:	1942      	adds	r2, r0, r5
 8009ea2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009ea6:	5c9b      	ldrb	r3, [r3, r2]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8009ea8:	430b      	orrs	r3, r1
            *((__IO uint32_t *)(pOutAddr2 +4)) = 
 8009eaa:	f8ce 3004 	str.w	r3, [lr, #4]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8009eae:	f10c 0c08 	add.w	ip, ip, #8
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 8009eb2:	f10e 0e08 	add.w	lr, lr, #8
          
            pChrom++;
 8009eb6:	f108 0801 	add.w	r8, r8, #1
          for(j=0; j < 8; j+=2)
 8009eba:	3402      	adds	r4, #2
 8009ebc:	2c07      	cmp	r4, #7
 8009ebe:	d987      	bls.n	8009dd0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x24>
          }
          pLum += 64;                      
 8009ec0:	3740      	adds	r7, #64	; 0x40
        for(k= 0; k<2; k++)
 8009ec2:	f10b 0b01 	add.w	fp, fp, #1
 8009ec6:	f1bb 0f01 	cmp.w	fp, #1
 8009eca:	d801      	bhi.n	8009ed0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x124>
          for(j=0; j < 8; j+=2)
 8009ecc:	2400      	movs	r4, #0
 8009ece:	e7f5      	b.n	8009ebc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x110>
        }

        pLum = pLum - 128 + 16;
 8009ed0:	3f70      	subs	r7, #112	; 0x70
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 8009ed2:	9b01      	ldr	r3, [sp, #4]
 8009ed4:	9a02      	ldr	r2, [sp, #8]
 8009ed6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8009eda:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
 8009edc:	f10a 0a02 	add.w	sl, sl, #2
 8009ee0:	f1ba 0f0f 	cmp.w	sl, #15
 8009ee4:	d811      	bhi.n	8009f0a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x15e>
      if(i == 8)
 8009ee6:	f1ba 0f08 	cmp.w	sl, #8
 8009eea:	f43f af6d 	beq.w	8009dc8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1c>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8009eee:	4b1b      	ldr	r3, [pc, #108]	; (8009f5c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b0>)
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	9a01      	ldr	r2, [sp, #4]
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d9f1      	bls.n	8009edc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x130>
        pOutAddr = pOutBuffer + refline;
 8009ef8:	9b05      	ldr	r3, [sp, #20]
 8009efa:	eb03 0c02 	add.w	ip, r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 8009efe:	9b02      	ldr	r3, [sp, #8]
 8009f00:	eb0c 0e03 	add.w	lr, ip, r3
        for(k= 0; k<2; k++)
 8009f04:	f04f 0b00 	mov.w	fp, #0
 8009f08:	e7dd      	b.n	8009ec6 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x11a>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 8009f0a:	9b03      	ldr	r3, [sp, #12]
 8009f0c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009f10:	9303      	str	r3, [sp, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8009f12:	9b06      	ldr	r3, [sp, #24]
 8009f14:	9a07      	ldr	r2, [sp, #28]
 8009f16:	4413      	add	r3, r2
 8009f18:	9a04      	ldr	r2, [sp, #16]
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d917      	bls.n	8009f4e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1a2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8009f1e:	9c04      	ldr	r4, [sp, #16]
 8009f20:	0120      	lsls	r0, r4, #4
 8009f22:	490e      	ldr	r1, [pc, #56]	; (8009f5c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b0>)
 8009f24:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8009f26:	fbb0 f2f3 	udiv	r2, r0, r3
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8009f2a:	fb03 0312 	mls	r3, r3, r2, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8009f2e:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8009f30:	9102      	str	r1, [sp, #8]
 8009f32:	fb01 f202 	mul.w	r2, r1, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8009f3c:	9301      	str	r3, [sp, #4]
    currentMCU++;
 8009f3e:	1c63      	adds	r3, r4, #1
 8009f40:	9304      	str	r3, [sp, #16]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 8009f42:	9f03      	ldr	r7, [sp, #12]
 8009f44:	f507 7880 	add.w	r8, r7, #256	; 0x100
    for(i= 0; i <  16; i+=2)
 8009f48:	f04f 0a00 	mov.w	sl, #0
 8009f4c:	e7c8      	b.n	8009ee0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x134>
  }
  return numberMCU;
}
 8009f4e:	9806      	ldr	r0, [sp, #24]
 8009f50:	b009      	add	sp, #36	; 0x24
 8009f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f56:	bf00      	nop
 8009f58:	aaaaaaab 	.word	0xaaaaaaab
 8009f5c:	200006b8 	.word	0x200006b8
 8009f60:	08010c4c 	.word	0x08010c4c

08009f64 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8009f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f68:	b087      	sub	sp, #28
 8009f6a:	9002      	str	r0, [sp, #8]
 8009f6c:	9103      	str	r1, [sp, #12]
 8009f6e:	9205      	str	r2, [sp, #20]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8009f70:	0a1b      	lsrs	r3, r3, #8
 8009f72:	9304      	str	r3, [sp, #16]
  currentMCU = BlockIndex;
 8009f74:	9200      	str	r2, [sp, #0]
  

  while(currentMCU < (numberMCU + BlockIndex))
 8009f76:	e066      	b.n	800a046 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xe2>
        
        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
          {           
            cbcomp = (int32_t)(*(pChrom));
 8009f78:	f89c 4000 	ldrb.w	r4, [ip]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8009f7c:	4a44      	ldr	r2, [pc, #272]	; (800a090 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x12c>)
 8009f7e:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8009f82:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            
            crcomp = (int32_t)(*(pChrom + 64));
 8009f86:	f89c 3040 	ldrb.w	r3, [ip, #64]	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 8009f8a:	f502 6588 	add.w	r5, r2, #1088	; 0x440
 8009f8e:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8009f92:	f502 6504 	add.w	r5, r2, #2112	; 0x840
 8009f96:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8009f9a:	f502 6244 	add.w	r2, r2, #3136	; 0xc40
 8009f9e:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8009fa2:	442b      	add	r3, r5
          
            
            
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888) 
          
            ycomp = (int32_t)(*(pLum +j));
 8009fa4:	f81e 5000 	ldrb.w	r5, [lr, r0]
            
            *(__IO uint32_t *)pOutAddr = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8009fa8:	1972      	adds	r2, r6, r5
 8009faa:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009fae:	4c39      	ldr	r4, [pc, #228]	; (800a094 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x130>)
 8009fb0:	f814 8002 	ldrb.w	r8, [r4, r2]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8009fb4:	eb05 4223 	add.w	r2, r5, r3, asr #16
 8009fb8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009fbc:	5ca2      	ldrb	r2, [r4, r2]
 8009fbe:	0212      	lsls	r2, r2, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8009fc0:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 8009fc4:	440d      	add	r5, r1
 8009fc6:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8009fca:	5d65      	ldrb	r5, [r4, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8009fcc:	432a      	orrs	r2, r5
            *(__IO uint32_t *)pOutAddr = 
 8009fce:	603a      	str	r2, [r7, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8009fd0:	1c42      	adds	r2, r0, #1
 8009fd2:	f81e 2002 	ldrb.w	r2, [lr, r2]
            
            *((__IO uint32_t *)(pOutAddr + 4)) = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8009fd6:	4416      	add	r6, r2
 8009fd8:	f506 7680 	add.w	r6, r6, #256	; 0x100
 8009fdc:	5da5      	ldrb	r5, [r4, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8009fde:	eb02 4323 	add.w	r3, r2, r3, asr #16
 8009fe2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009fe6:	5ce3      	ldrb	r3, [r4, r3]
 8009fe8:	021b      	lsls	r3, r3, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8009fea:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);         
 8009fee:	4411      	add	r1, r2
 8009ff0:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8009ff4:	5c62      	ldrb	r2, [r4, r1]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8009ff6:	4313      	orrs	r3, r2
            *((__IO uint32_t *)(pOutAddr + 4)) = 
 8009ff8:	607b      	str	r3, [r7, #4]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
          
#endif /* JPEG_RGB_FORMAT*/          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8009ffa:	3708      	adds	r7, #8
          
            pChrom++;
 8009ffc:	f10c 0c01 	add.w	ip, ip, #1
          for(j=0; j < 8; j+=2)
 800a000:	3002      	adds	r0, #2
 800a002:	2807      	cmp	r0, #7
 800a004:	d9b8      	bls.n	8009f78 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14>
          }
          pLum += 64;                      
 800a006:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
        for(k= 0; k<2; k++)
 800a00a:	f10b 0b01 	add.w	fp, fp, #1
 800a00e:	f1bb 0f01 	cmp.w	fp, #1
 800a012:	d801      	bhi.n	800a018 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xb4>
          for(j=0; j < 8; j+=2)
 800a014:	2000      	movs	r0, #0
 800a016:	e7f4      	b.n	800a002 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9e>
        }
        
        pLum = pLum - 128 + 8;
 800a018:	f1ae 0e78 	sub.w	lr, lr, #120	; 0x78
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800a01c:	9b01      	ldr	r3, [sp, #4]
 800a01e:	449a      	add	sl, r3
    for(i= 0; i <  8; i++)
 800a020:	f109 0901 	add.w	r9, r9, #1
 800a024:	f1b9 0f07 	cmp.w	r9, #7
 800a028:	d809      	bhi.n	800a03e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xda>
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800a02a:	4b19      	ldr	r3, [pc, #100]	; (800a090 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x12c>)
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	4553      	cmp	r3, sl
 800a030:	d9f6      	bls.n	800a020 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xbc>
        pOutAddr = pOutBuffer + refline;
 800a032:	9b03      	ldr	r3, [sp, #12]
 800a034:	eb03 070a 	add.w	r7, r3, sl
        for(k= 0; k<2; k++)
 800a038:	f04f 0b00 	mov.w	fp, #0
 800a03c:	e7e7      	b.n	800a00e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xaa>
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 800a03e:	9b02      	ldr	r3, [sp, #8]
 800a040:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a044:	9302      	str	r3, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 800a046:	9b04      	ldr	r3, [sp, #16]
 800a048:	9a05      	ldr	r2, [sp, #20]
 800a04a:	4413      	add	r3, r2
 800a04c:	9a00      	ldr	r2, [sp, #0]
 800a04e:	4293      	cmp	r3, r2
 800a050:	d919      	bls.n	800a086 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x122>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800a052:	9800      	ldr	r0, [sp, #0]
 800a054:	ea4f 1a00 	mov.w	sl, r0, lsl #4
 800a058:	490d      	ldr	r1, [pc, #52]	; (800a090 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x12c>)
 800a05a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800a05c:	fbba f2f3 	udiv	r2, sl, r3
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800a060:	fb03 aa12 	mls	sl, r3, r2, sl
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800a064:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800a066:	9301      	str	r3, [sp, #4]
 800a068:	fb03 f202 	mul.w	r2, r3, r2
 800a06c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800a070:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
    currentMCU++;
 800a074:	1c43      	adds	r3, r0, #1
 800a076:	9300      	str	r3, [sp, #0]
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 800a078:	9b02      	ldr	r3, [sp, #8]
 800a07a:	f103 0c80 	add.w	ip, r3, #128	; 0x80
    pLum = pInBuffer;
 800a07e:	469e      	mov	lr, r3
    for(i= 0; i <  8; i++)
 800a080:	f04f 0900 	mov.w	r9, #0
 800a084:	e7ce      	b.n	800a024 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xc0>
  }
  return numberMCU;
}
 800a086:	9804      	ldr	r0, [sp, #16]
 800a088:	b007      	add	sp, #28
 800a08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08e:	bf00      	nop
 800a090:	200006b8 	.word	0x200006b8
 800a094:	08010c4c 	.word	0x08010c4c

0800a098 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800a098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a09c:	b085      	sub	sp, #20
 800a09e:	9000      	str	r0, [sp, #0]
 800a0a0:	9101      	str	r1, [sp, #4]
 800a0a2:	4692      	mov	sl, r2
 800a0a4:	9203      	str	r2, [sp, #12]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800a0a6:	4a35      	ldr	r2, [pc, #212]	; (800a17c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe4>)
 800a0a8:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ac:	09db      	lsrs	r3, r3, #7
 800a0ae:	9302      	str	r3, [sp, #8]
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
 800a0b0:	e042      	b.n	800a138 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xa0>
        pOutAddr = pOutBuffer+ refline;
        

          for(j=0; j < 8; j++)
          {           
            cbcomp = (int32_t)(*pChrom);
 800a0b2:	7825      	ldrb	r5, [r4, #0]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800a0b4:	4b32      	ldr	r3, [pc, #200]	; (800a180 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
 800a0b6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800a0ba:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
            
            crcomp = (int32_t)(*(pChrom + 64));
 800a0be:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800a0c2:	f503 6688 	add.w	r6, r3, #1088	; 0x440
 800a0c6:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800a0ca:	f503 6c04 	add.w	ip, r3, #2112	; 0x840
 800a0ce:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 800a0d2:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 800a0d6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a0da:	441a      	add	r2, r3
                      
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
            ycomp = (int32_t)(*(pLum +j));
 800a0dc:	f818 3000 	ldrb.w	r3, [r8, r0]
            
            *(__IO uint32_t *)pOutAddr = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800a0e0:	441e      	add	r6, r3
 800a0e2:	f506 7680 	add.w	r6, r6, #256	; 0x100
 800a0e6:	4d27      	ldr	r5, [pc, #156]	; (800a184 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
 800a0e8:	5dae      	ldrb	r6, [r5, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800a0ea:	eb03 4222 	add.w	r2, r3, r2, asr #16
 800a0ee:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800a0f2:	5caa      	ldrb	r2, [r5, r2]
 800a0f4:	0212      	lsls	r2, r2, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800a0f6:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);       
 800a0fa:	440b      	add	r3, r1
 800a0fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a100:	5ceb      	ldrb	r3, [r5, r3]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800a102:	431e      	orrs	r6, r3
            *(__IO uint32_t *)pOutAddr = 
 800a104:	f847 6b04 	str.w	r6, [r7], #4
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
          
            pChrom++;
 800a108:	3401      	adds	r4, #1
          for(j=0; j < 8; j++)
 800a10a:	3001      	adds	r0, #1
 800a10c:	2807      	cmp	r0, #7
 800a10e:	d9d0      	bls.n	800a0b2 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x1a>
          }
          pLum += 8;
 800a110:	f108 0808 	add.w	r8, r8, #8

        refline += JPEG_ConvertorParams.ScaledWidth;          
 800a114:	44d9      	add	r9, fp
    for(i= 0; i <  8; i++)
 800a116:	f10e 0e01 	add.w	lr, lr, #1
 800a11a:	f1be 0f07 	cmp.w	lr, #7
 800a11e:	d808      	bhi.n	800a132 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x9a>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800a120:	4b17      	ldr	r3, [pc, #92]	; (800a180 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	454b      	cmp	r3, r9
 800a126:	d9f6      	bls.n	800a116 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7e>
        pOutAddr = pOutBuffer+ refline;
 800a128:	9b01      	ldr	r3, [sp, #4]
 800a12a:	eb03 0709 	add.w	r7, r3, r9
          for(j=0; j < 8; j++)
 800a12e:	2000      	movs	r0, #0
 800a130:	e7ec      	b.n	800a10c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x74>
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 800a132:	9b00      	ldr	r3, [sp, #0]
 800a134:	33c0      	adds	r3, #192	; 0xc0
 800a136:	9300      	str	r3, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 800a138:	9b02      	ldr	r3, [sp, #8]
 800a13a:	9a03      	ldr	r2, [sp, #12]
 800a13c:	4413      	add	r3, r2
 800a13e:	4553      	cmp	r3, sl
 800a140:	d918      	bls.n	800a174 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xdc>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800a142:	ea4f 09ca 	mov.w	r9, sl, lsl #3
 800a146:	490e      	ldr	r1, [pc, #56]	; (800a180 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
 800a148:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800a14a:	fbb9 f2f3 	udiv	r2, r9, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800a14e:	fb03 9912 	mls	r9, r3, r2, r9
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800a152:	f8d1 b028 	ldr.w	fp, [r1, #40]	; 0x28
 800a156:	fb0b f202 	mul.w	r2, fp, r2
 800a15a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800a15e:	eb09 09c2 	add.w	r9, r9, r2, lsl #3
    currentMCU++;   
 800a162:	f10a 0a01 	add.w	sl, sl, #1
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 800a166:	9b00      	ldr	r3, [sp, #0]
 800a168:	f103 0440 	add.w	r4, r3, #64	; 0x40
    pLum = pInBuffer;
 800a16c:	4698      	mov	r8, r3
    for(i= 0; i <  8; i++)
 800a16e:	f04f 0e00 	mov.w	lr, #0
 800a172:	e7d2      	b.n	800a11a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x82>
  }
  return numberMCU;
}
 800a174:	9802      	ldr	r0, [sp, #8]
 800a176:	b005      	add	sp, #20
 800a178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17c:	aaaaaaab 	.word	0xaaaaaaab
 800a180:	200006b8 	.word	0x200006b8
 800a184:	08010c4c 	.word	0x08010c4c

0800a188 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 800a188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a18c:	4681      	mov	r9, r0
 800a18e:	4692      	mov	sl, r2

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 800a190:	0998      	lsrs	r0, r3, #6
  currentMCU = BlockIndex;
 800a192:	4690      	mov	r8, r2
  
  while(currentMCU < (numberMCU + BlockIndex))
 800a194:	e01a      	b.n	800a1cc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x44>
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
      {  
        for(j=0; j < 8; j++)
        { 
          ySample =   (uint32_t)(*pLum);
 800a196:	f817 4b01 	ldrb.w	r4, [r7], #1

#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
          *(__IO uint32_t *)pOutAddr = ySample |  (ySample << 8) | (ySample << 16);
 800a19a:	ea44 2304 	orr.w	r3, r4, r4, lsl #8
 800a19e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a1a2:	f846 3b04 	str.w	r3, [r6], #4
        for(j=0; j < 8; j++)
 800a1a6:	3501      	adds	r5, #1
 800a1a8:	2d07      	cmp	r5, #7
 800a1aa:	d9f4      	bls.n	800a196 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xe>
          
          pOutAddr += JPEG_BYTES_PER_PIXEL;
          pLum++;
        }

        refline += JPEG_ConvertorParams.ScaledWidth;        
 800a1ac:	4494      	add	ip, r2
    for(i= 0; i <  8; i++)
 800a1ae:	f10e 0e01 	add.w	lr, lr, #1
 800a1b2:	f1be 0f07 	cmp.w	lr, #7
 800a1b6:	d807      	bhi.n	800a1c8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x40>
      pOutAddr = pOutBuffer + refline;
 800a1b8:	eb01 060c 	add.w	r6, r1, ip
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800a1bc:	4b11      	ldr	r3, [pc, #68]	; (800a204 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	4563      	cmp	r3, ip
 800a1c2:	d9f4      	bls.n	800a1ae <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
        for(j=0; j < 8; j++)
 800a1c4:	2500      	movs	r5, #0
 800a1c6:	e7ef      	b.n	800a1a8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x20>
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 800a1c8:	f109 0940 	add.w	r9, r9, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
 800a1cc:	eb00 030a 	add.w	r3, r0, sl
 800a1d0:	4543      	cmp	r3, r8
 800a1d2:	d914      	bls.n	800a1fe <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x76>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800a1d4:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800a1d8:	4a0a      	ldr	r2, [pc, #40]	; (800a204 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
 800a1da:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800a1dc:	fbbc f4f3 	udiv	r4, ip, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800a1e0:	fb03 cc14 	mls	ip, r3, r4, ip
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800a1e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a1e6:	fb02 f404 	mul.w	r4, r2, r4
 800a1ea:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800a1ee:	eb0c 0cc4 	add.w	ip, ip, r4, lsl #3
    currentMCU++;
 800a1f2:	f108 0801 	add.w	r8, r8, #1
    pLum = pInBuffer;
 800a1f6:	464f      	mov	r7, r9
    for(i= 0; i <  8; i++)
 800a1f8:	f04f 0e00 	mov.w	lr, #0
 800a1fc:	e7d9      	b.n	800a1b2 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
 800a1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a202:	bf00      	nop
 800a204:	200006b8 	.word	0x200006b8

0800a208 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800a208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a20c:	b085      	sub	sp, #20
 800a20e:	9203      	str	r2, [sp, #12]
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 800a210:	0a1b      	lsrs	r3, r3, #8
 800a212:	9302      	str	r3, [sp, #8]
  currentMCU = BlockIndex;
 800a214:	4691      	mov	r9, r2
 800a216:	468a      	mov	sl, r1
  

  while(currentMCU < (numberMCU + BlockIndex))
 800a218:	e035      	b.n	800a286 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7e>
      {
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
 800a21a:	f894 c0c0 	ldrb.w	ip, [r4, #192]	; 0xc0
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800a21e:	7823      	ldrb	r3, [r4, #0]
 800a220:	fb0c f303 	mul.w	r3, ip, r3
 800a224:	4a27      	ldr	r2, [pc, #156]	; (800a2c4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xbc>)
 800a226:	fb82 b703 	smull	fp, r7, r2, r3
 800a22a:	443b      	add	r3, r7
 800a22c:	11df      	asrs	r7, r3, #7
            
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 800a22e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800a232:	fb0c f303 	mul.w	r3, ip, r3
 800a236:	fb82 1b03 	smull	r1, fp, r2, r3
 800a23a:	445b      	add	r3, fp
 800a23c:	11db      	asrs	r3, r3, #7
            
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 800a23e:	f894 b080 	ldrb.w	fp, [r4, #128]	; 0x80
 800a242:	fb0c fc0b 	mul.w	ip, ip, fp
 800a246:	fb82 120c 	smull	r1, r2, r2, ip
 800a24a:	4462      	add	r2, ip
                      
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
          *(__IO uint32_t *)pOutAddr = 
            (c_red << JPEG_RED_OFFSET) | \
            (c_green << JPEG_GREEN_OFFSET) | \
 800a24c:	021b      	lsls	r3, r3, #8
            (c_red << JPEG_RED_OFFSET) | \
 800a24e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
            (c_green << JPEG_GREEN_OFFSET) | \
 800a252:	ea43 13e2 	orr.w	r3, r3, r2, asr #7
          *(__IO uint32_t *)pOutAddr = 
 800a256:	f846 3b04 	str.w	r3, [r6], #4
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
          
            pChrom++;
 800a25a:	3401      	adds	r4, #1
          for(j=0; j < 8; j++)
 800a25c:	3501      	adds	r5, #1
 800a25e:	2d07      	cmp	r5, #7
 800a260:	d9db      	bls.n	800a21a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x12>
 800a262:	9901      	ldr	r1, [sp, #4]
          }

        refline += JPEG_ConvertorParams.ScaledWidth;          
 800a264:	4488      	add	r8, r1
    for(i= 0; i <  8; i++)
 800a266:	f10e 0e01 	add.w	lr, lr, #1
 800a26a:	f1be 0f07 	cmp.w	lr, #7
 800a26e:	d808      	bhi.n	800a282 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7a>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800a270:	4b15      	ldr	r3, [pc, #84]	; (800a2c8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xc0>)
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	4543      	cmp	r3, r8
 800a276:	d9f6      	bls.n	800a266 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x5e>
        pOutAddr = pOutBuffer+ refline;        
 800a278:	eb0a 0608 	add.w	r6, sl, r8
          for(j=0; j < 8; j++)
 800a27c:	2500      	movs	r5, #0
 800a27e:	9101      	str	r1, [sp, #4]
 800a280:	e7ed      	b.n	800a25e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x56>
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 800a282:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
 800a286:	9b02      	ldr	r3, [sp, #8]
 800a288:	9a03      	ldr	r2, [sp, #12]
 800a28a:	4413      	add	r3, r2
 800a28c:	454b      	cmp	r3, r9
 800a28e:	d914      	bls.n	800a2ba <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb2>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800a290:	ea4f 08c9 	mov.w	r8, r9, lsl #3
 800a294:	490c      	ldr	r1, [pc, #48]	; (800a2c8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xc0>)
 800a296:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800a298:	fbb8 f2f3 	udiv	r2, r8, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800a29c:	fb03 8812 	mls	r8, r3, r2, r8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800a2a0:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800a2a2:	fb01 f202 	mul.w	r2, r1, r2
 800a2a6:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800a2aa:	eb08 08c2 	add.w	r8, r8, r2, lsl #3
    currentMCU++;
 800a2ae:	f109 0901 	add.w	r9, r9, #1
    pChrom = pInBuffer;
 800a2b2:	4604      	mov	r4, r0
    for(i= 0; i <  8; i++)
 800a2b4:	f04f 0e00 	mov.w	lr, #0
 800a2b8:	e7d7      	b.n	800a26a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x62>
  }
  return numberMCU;
}
 800a2ba:	9802      	ldr	r0, [sp, #8]
 800a2bc:	b005      	add	sp, #20
 800a2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c2:	bf00      	nop
 800a2c4:	80808081 	.word	0x80808081
 800a2c8:	200006b8 	.word	0x200006b8

0800a2cc <JPEG_InitPostProcColorTables>:
  */
void JPEG_InitPostProcColorTables(void)
{
  int32_t index, i; 
    
  for (i = 0; i <= 255; i++) 
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	29ff      	cmp	r1, #255	; 0xff
 800a2d0:	dc1f      	bgt.n	800a312 <JPEG_InitPostProcColorTables+0x46>
  {
    index = (i * 2) - 256;
 800a2d2:	f1a1 0080 	sub.w	r0, r1, #128	; 0x80
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800a2d6:	4b0f      	ldr	r3, [pc, #60]	; (800a314 <JPEG_InitPostProcColorTables+0x48>)
 800a2d8:	fb03 f300 	mul.w	r3, r3, r0
 800a2dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a2e0:	141b      	asrs	r3, r3, #16
 800a2e2:	4a0d      	ldr	r2, [pc, #52]	; (800a318 <JPEG_InitPostProcColorTables+0x4c>)
 800a2e4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a2e8:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800a2ec:	4b0b      	ldr	r3, [pc, #44]	; (800a31c <JPEG_InitPostProcColorTables+0x50>)
 800a2ee:	fb03 f300 	mul.w	r3, r3, r0
 800a2f2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a2f6:	141b      	asrs	r3, r3, #16
 800a2f8:	6413      	str	r3, [r2, #64]	; 0x40
    
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 800a2fa:	4b09      	ldr	r3, [pc, #36]	; (800a320 <JPEG_InitPostProcColorTables+0x54>)
 800a2fc:	fb03 f300 	mul.w	r3, r3, r0
 800a300:	f8c2 3840 	str.w	r3, [r2, #2112]	; 0x840
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800a304:	4b07      	ldr	r3, [pc, #28]	; (800a324 <JPEG_InitPostProcColorTables+0x58>)
 800a306:	fb03 f000 	mul.w	r0, r3, r0
 800a30a:	f8c2 0c40 	str.w	r0, [r2, #3136]	; 0xc40
  for (i = 0; i <= 255; i++) 
 800a30e:	3101      	adds	r1, #1
 800a310:	e7dd      	b.n	800a2ce <JPEG_InitPostProcColorTables+0x2>
  }  
}
 800a312:	4770      	bx	lr
 800a314:	000166e8 	.word	0x000166e8
 800a318:	200006b8 	.word	0x200006b8
 800a31c:	0001c5a0 	.word	0x0001c5a0
 800a320:	ffff4930 	.word	0xffff4930
 800a324:	ffffa7e8 	.word	0xffffa7e8

0800a328 <JPEG_GetDecodeColorConvertFunc>:
{
 800a328:	b4f0      	push	{r4, r5, r6, r7}
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800a32a:	6807      	ldr	r7, [r0, #0]
 800a32c:	4c3f      	ldr	r4, [pc, #252]	; (800a42c <JPEG_GetDecodeColorConvertFunc+0x104>)
 800a32e:	6027      	str	r7, [r4, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800a330:	68c3      	ldr	r3, [r0, #12]
 800a332:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800a334:	6885      	ldr	r5, [r0, #8]
 800a336:	60e5      	str	r5, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800a338:	fb05 f603 	mul.w	r6, r5, r3
 800a33c:	00b6      	lsls	r6, r6, #2
 800a33e:	6126      	str	r6, [r4, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800a340:	6840      	ldr	r0, [r0, #4]
 800a342:	6060      	str	r0, [r4, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800a344:	2f10      	cmp	r7, #16
 800a346:	d02c      	beq.n	800a3a2 <JPEG_GetDecodeColorConvertFunc+0x7a>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 800a348:	2f00      	cmp	r7, #0
 800a34a:	d15b      	bne.n	800a404 <JPEG_GetDecodeColorConvertFunc+0xdc>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800a34c:	4838      	ldr	r0, [pc, #224]	; (800a430 <JPEG_GetDecodeColorConvertFunc+0x108>)
 800a34e:	6008      	str	r0, [r1, #0]
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800a350:	f003 0107 	and.w	r1, r3, #7
 800a354:	4835      	ldr	r0, [pc, #212]	; (800a42c <JPEG_GetDecodeColorConvertFunc+0x104>)
 800a356:	6141      	str	r1, [r0, #20]
    if(JPEG_ConvertorParams.LineOffset != 0)
 800a358:	b111      	cbz	r1, 800a360 <JPEG_GetDecodeColorConvertFunc+0x38>
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800a35a:	f1c1 0108 	rsb	r1, r1, #8
 800a35e:	6141      	str	r1, [r0, #20]
    JPEG_ConvertorParams.H_factor = 8;
 800a360:	4932      	ldr	r1, [pc, #200]	; (800a42c <JPEG_GetDecodeColorConvertFunc+0x104>)
 800a362:	2008      	movs	r0, #8
 800a364:	61c8      	str	r0, [r1, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 800a366:	6208      	str	r0, [r1, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800a368:	4930      	ldr	r1, [pc, #192]	; (800a42c <JPEG_GetDecodeColorConvertFunc+0x104>)
 800a36a:	6948      	ldr	r0, [r1, #20]
 800a36c:	4418      	add	r0, r3
 800a36e:	6248      	str	r0, [r1, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 800a370:	0098      	lsls	r0, r3, #2
 800a372:	6288      	str	r0, [r1, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800a374:	69c9      	ldr	r1, [r1, #28]
 800a376:	fbb3 f0f1 	udiv	r0, r3, r1
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 800a37a:	fb01 3110 	mls	r1, r1, r0, r3
 800a37e:	b101      	cbz	r1, 800a382 <JPEG_GetDecodeColorConvertFunc+0x5a>
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 800a380:	3001      	adds	r0, #1
  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 800a382:	4b2a      	ldr	r3, [pc, #168]	; (800a42c <JPEG_GetDecodeColorConvertFunc+0x104>)
 800a384:	6a19      	ldr	r1, [r3, #32]
 800a386:	fbb5 f3f1 	udiv	r3, r5, r1
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 800a38a:	fb01 5513 	mls	r5, r1, r3, r5
 800a38e:	b105      	cbz	r5, 800a392 <JPEG_GetDecodeColorConvertFunc+0x6a>
    vMCU++; /*+1 for vertical incomplete MCU */                
 800a390:	3301      	adds	r3, #1
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800a392:	fb03 f300 	mul.w	r3, r3, r0
 800a396:	4925      	ldr	r1, [pc, #148]	; (800a42c <JPEG_GetDecodeColorConvertFunc+0x104>)
 800a398:	62cb      	str	r3, [r1, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 800a39a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800a39c:	2000      	movs	r0, #0
}
 800a39e:	bcf0      	pop	{r4, r5, r6, r7}
 800a3a0:	4770      	bx	lr
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800a3a2:	2801      	cmp	r0, #1
 800a3a4:	d010      	beq.n	800a3c8 <JPEG_GetDecodeColorConvertFunc+0xa0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800a3a6:	2802      	cmp	r0, #2
 800a3a8:	d01c      	beq.n	800a3e4 <JPEG_GetDecodeColorConvertFunc+0xbc>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 800a3aa:	4822      	ldr	r0, [pc, #136]	; (800a434 <JPEG_GetDecodeColorConvertFunc+0x10c>)
 800a3ac:	6008      	str	r0, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800a3ae:	f003 0107 	and.w	r1, r3, #7
 800a3b2:	481e      	ldr	r0, [pc, #120]	; (800a42c <JPEG_GetDecodeColorConvertFunc+0x104>)
 800a3b4:	6141      	str	r1, [r0, #20]
      if(JPEG_ConvertorParams.LineOffset != 0)
 800a3b6:	b111      	cbz	r1, 800a3be <JPEG_GetDecodeColorConvertFunc+0x96>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800a3b8:	f1c1 0108 	rsb	r1, r1, #8
 800a3bc:	6141      	str	r1, [r0, #20]
      JPEG_ConvertorParams.H_factor = 8;
 800a3be:	491b      	ldr	r1, [pc, #108]	; (800a42c <JPEG_GetDecodeColorConvertFunc+0x104>)
 800a3c0:	2008      	movs	r0, #8
 800a3c2:	61c8      	str	r0, [r1, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800a3c4:	6208      	str	r0, [r1, #32]
 800a3c6:	e7cf      	b.n	800a368 <JPEG_GetDecodeColorConvertFunc+0x40>
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 800a3c8:	481b      	ldr	r0, [pc, #108]	; (800a438 <JPEG_GetDecodeColorConvertFunc+0x110>)
 800a3ca:	6008      	str	r0, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 800a3cc:	f003 010f 	and.w	r1, r3, #15
 800a3d0:	6161      	str	r1, [r4, #20]
      if(JPEG_ConvertorParams.LineOffset != 0)
 800a3d2:	b111      	cbz	r1, 800a3da <JPEG_GetDecodeColorConvertFunc+0xb2>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800a3d4:	f1c1 0110 	rsb	r1, r1, #16
 800a3d8:	6161      	str	r1, [r4, #20]
      JPEG_ConvertorParams.H_factor = 16;
 800a3da:	4914      	ldr	r1, [pc, #80]	; (800a42c <JPEG_GetDecodeColorConvertFunc+0x104>)
 800a3dc:	2010      	movs	r0, #16
 800a3de:	61c8      	str	r0, [r1, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 800a3e0:	6208      	str	r0, [r1, #32]
 800a3e2:	e7c1      	b.n	800a368 <JPEG_GetDecodeColorConvertFunc+0x40>
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 800a3e4:	4815      	ldr	r0, [pc, #84]	; (800a43c <JPEG_GetDecodeColorConvertFunc+0x114>)
 800a3e6:	6008      	str	r0, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 800a3e8:	f003 010f 	and.w	r1, r3, #15
 800a3ec:	480f      	ldr	r0, [pc, #60]	; (800a42c <JPEG_GetDecodeColorConvertFunc+0x104>)
 800a3ee:	6141      	str	r1, [r0, #20]
      if(JPEG_ConvertorParams.LineOffset != 0)
 800a3f0:	b111      	cbz	r1, 800a3f8 <JPEG_GetDecodeColorConvertFunc+0xd0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800a3f2:	f1c1 0110 	rsb	r1, r1, #16
 800a3f6:	6141      	str	r1, [r0, #20]
      JPEG_ConvertorParams.H_factor = 16;
 800a3f8:	490c      	ldr	r1, [pc, #48]	; (800a42c <JPEG_GetDecodeColorConvertFunc+0x104>)
 800a3fa:	2010      	movs	r0, #16
 800a3fc:	61c8      	str	r0, [r1, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800a3fe:	2008      	movs	r0, #8
 800a400:	6208      	str	r0, [r1, #32]
 800a402:	e7b1      	b.n	800a368 <JPEG_GetDecodeColorConvertFunc+0x40>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 800a404:	2f30      	cmp	r7, #48	; 0x30
 800a406:	d10e      	bne.n	800a426 <JPEG_GetDecodeColorConvertFunc+0xfe>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 800a408:	480d      	ldr	r0, [pc, #52]	; (800a440 <JPEG_GetDecodeColorConvertFunc+0x118>)
 800a40a:	6008      	str	r0, [r1, #0]
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800a40c:	f003 0107 	and.w	r1, r3, #7
 800a410:	4806      	ldr	r0, [pc, #24]	; (800a42c <JPEG_GetDecodeColorConvertFunc+0x104>)
 800a412:	6141      	str	r1, [r0, #20]
    if(JPEG_ConvertorParams.LineOffset != 0)
 800a414:	b111      	cbz	r1, 800a41c <JPEG_GetDecodeColorConvertFunc+0xf4>
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800a416:	f1c1 0108 	rsb	r1, r1, #8
 800a41a:	6141      	str	r1, [r0, #20]
    JPEG_ConvertorParams.H_factor = 8;
 800a41c:	4903      	ldr	r1, [pc, #12]	; (800a42c <JPEG_GetDecodeColorConvertFunc+0x104>)
 800a41e:	2008      	movs	r0, #8
 800a420:	61c8      	str	r0, [r1, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 800a422:	6208      	str	r0, [r1, #32]
 800a424:	e7a0      	b.n	800a368 <JPEG_GetDecodeColorConvertFunc+0x40>
    return HAL_ERROR; /* Color space Not supported*/
 800a426:	2001      	movs	r0, #1
 800a428:	e7b9      	b.n	800a39e <JPEG_GetDecodeColorConvertFunc+0x76>
 800a42a:	bf00      	nop
 800a42c:	200006b8 	.word	0x200006b8
 800a430:	0800a189 	.word	0x0800a189
 800a434:	0800a099 	.word	0x0800a099
 800a438:	08009dad 	.word	0x08009dad
 800a43c:	08009f65 	.word	0x08009f65
 800a440:	0800a209 	.word	0x0800a209

0800a444 <JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitColorTables(void)
{
 800a444:	b508      	push	{r3, lr}
  JPEG_InitPreProcColorTables();
  JPEG_Init_MCU_LUT();
#endif

#if (USE_JPEG_DECODER == 1)
  JPEG_InitPostProcColorTables();
 800a446:	f7ff ff41 	bl	800a2cc <JPEG_InitPostProcColorTables>
#endif

}
 800a44a:	bd08      	pop	{r3, pc}

0800a44c <Line_Audio_Init>:
/*
 * Line Audio Initalizaionts
 */


void Line_Audio_Init(void) {
 800a44c:	b508      	push	{r3, lr}

	 /* Initialize Audio Recorder with 4 channels to be used */
	 if (BSP_AUDIO_IN_OUT_Init(BSP_AUDIO_FREQUENCY_48K) == AUDIO_OK)
 800a44e:	f64b 3080 	movw	r0, #48000	; 0xbb80
 800a452:	f000 f977 	bl	800a744 <BSP_AUDIO_IN_OUT_Init>
 800a456:	bb00      	cbnz	r0, 800a49a <Line_Audio_Init+0x4e>
	 {
		 printf("Audio I/O initialization OK\r\n");
 800a458:	4816      	ldr	r0, [pc, #88]	; (800a4b4 <Line_Audio_Init+0x68>)
 800a45a:	f001 fdd7 	bl	800c00c <puts>
	 } else {
		 printf("Audio I/O initialization failed.\r\n");
	 }

	 /* Start Recording */
	 HAL_StatusTypeDef res = HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)audio_in_buffer, RECORD_BUFFER_SIZE);
 800a45e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a462:	4915      	ldr	r1, [pc, #84]	; (800a4b8 <Line_Audio_Init+0x6c>)
 800a464:	4815      	ldr	r0, [pc, #84]	; (800a4bc <Line_Audio_Init+0x70>)
 800a466:	f7fd fc85 	bl	8007d74 <HAL_SAI_Receive_DMA>
	 if (HAL_OK == res)
 800a46a:	4601      	mov	r1, r0
 800a46c:	b9c8      	cbnz	r0, 800a4a2 <Line_Audio_Init+0x56>
	 {
		 printf("SAI receive begin OK\r\n");
 800a46e:	4814      	ldr	r0, [pc, #80]	; (800a4c0 <Line_Audio_Init+0x74>)
 800a470:	f001 fdcc 	bl	800c00c <puts>
	 } else {
		 printf("SAI receive error: %d\r\n", res);
	 }

	 printf("Copying Record buffer to Playback buffer\r\n");
 800a474:	4813      	ldr	r0, [pc, #76]	; (800a4c4 <Line_Audio_Init+0x78>)
 800a476:	f001 fdc9 	bl	800c00c <puts>

	 /* Play the Recorded buffer */
	 if (_BSP_AUDIO_OUT_Play((uint16_t *) &audio_out_buffer[0], RECORD_BUFFER_SIZE) == AUDIO_OK)
 800a47a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a47e:	4812      	ldr	r0, [pc, #72]	; (800a4c8 <Line_Audio_Init+0x7c>)
 800a480:	f000 f9a4 	bl	800a7cc <_BSP_AUDIO_OUT_Play>
 800a484:	b988      	cbnz	r0, 800a4aa <Line_Audio_Init+0x5e>
	 {
		 printf("Audio output OK\r\n");
 800a486:	4811      	ldr	r0, [pc, #68]	; (800a4cc <Line_Audio_Init+0x80>)
 800a488:	f001 fdc0 	bl	800c00c <puts>
	 } else {
		 printf("Audio output error\r\n");
	 }
	 printf("\r\n");
 800a48c:	4810      	ldr	r0, [pc, #64]	; (800a4d0 <Line_Audio_Init+0x84>)
 800a48e:	f001 fdbd 	bl	800c00c <puts>

	 audio_line_in_buffer_state = BUFFER_OFFSET_NONE;
 800a492:	4b10      	ldr	r3, [pc, #64]	; (800a4d4 <Line_Audio_Init+0x88>)
 800a494:	2200      	movs	r2, #0
 800a496:	601a      	str	r2, [r3, #0]

 }
 800a498:	bd08      	pop	{r3, pc}
		 printf("Audio I/O initialization failed.\r\n");
 800a49a:	480f      	ldr	r0, [pc, #60]	; (800a4d8 <Line_Audio_Init+0x8c>)
 800a49c:	f001 fdb6 	bl	800c00c <puts>
 800a4a0:	e7dd      	b.n	800a45e <Line_Audio_Init+0x12>
		 printf("SAI receive error: %d\r\n", res);
 800a4a2:	480e      	ldr	r0, [pc, #56]	; (800a4dc <Line_Audio_Init+0x90>)
 800a4a4:	f001 fd2c 	bl	800bf00 <iprintf>
 800a4a8:	e7e4      	b.n	800a474 <Line_Audio_Init+0x28>
		 printf("Audio output error\r\n");
 800a4aa:	480d      	ldr	r0, [pc, #52]	; (800a4e0 <Line_Audio_Init+0x94>)
 800a4ac:	f001 fdae 	bl	800c00c <puts>
 800a4b0:	e7ec      	b.n	800a48c <Line_Audio_Init+0x40>
 800a4b2:	bf00      	nop
 800a4b4:	080111a4 	.word	0x080111a4
 800a4b8:	20004090 	.word	0x20004090
 800a4bc:	200019d4 	.word	0x200019d4
 800a4c0:	080111e8 	.word	0x080111e8
 800a4c4:	08011218 	.word	0x08011218
 800a4c8:	2000208c 	.word	0x2000208c
 800a4cc:	08011244 	.word	0x08011244
 800a4d0:	080111e4 	.word	0x080111e4
 800a4d4:	20006090 	.word	0x20006090
 800a4d8:	080111c4 	.word	0x080111c4
 800a4dc:	08011200 	.word	0x08011200
 800a4e0:	08011258 	.word	0x08011258

0800a4e4 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
 * Line Audio Callbacks
 */

 void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
 {
	 audio_line_out_buffer_state = 1;
 800a4e4:	4b01      	ldr	r3, [pc, #4]	; (800a4ec <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x8>)
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	601a      	str	r2, [r3, #0]
 }
 800a4ea:	4770      	bx	lr
 800a4ec:	2000408c 	.word	0x2000408c

0800a4f0 <BSP_AUDIO_IN_TransferComplete_CallBack>:
   * @param None
   * @retval None
   */
 void BSP_AUDIO_IN_TransferComplete_CallBack(void)
 {
	 audio_line_in_buffer_state = BUFFER_OFFSET_FULL;
 800a4f0:	4b01      	ldr	r3, [pc, #4]	; (800a4f8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8>)
 800a4f2:	2202      	movs	r2, #2
 800a4f4:	601a      	str	r2, [r3, #0]
 }
 800a4f6:	4770      	bx	lr
 800a4f8:	20006090 	.word	0x20006090

0800a4fc <BSP_AUDIO_IN_HalfTransfer_CallBack>:
   * @param  None
   * @retval None
   */
 void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
 {
	 audio_line_in_buffer_state = BUFFER_OFFSET_HALF;
 800a4fc:	4b01      	ldr	r3, [pc, #4]	; (800a504 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8>)
 800a4fe:	2201      	movs	r2, #1
 800a500:	601a      	str	r2, [r3, #0]
 }
 800a502:	4770      	bx	lr
 800a504:	20006090 	.word	0x20006090

0800a508 <BSP_AUDIO_IN_Error_CallBack>:
   * @param  None
   * @retval None
   */
void BSP_AUDIO_IN_Error_CallBack(void){
	/* handle errors */
 }
 800a508:	4770      	bx	lr
	...

0800a50c <SAIx_In_DeInit>:
     /**
       * @brief  Deinitializes the output Audio Codec audio interface (SAI).
       * @retval None
       */
     static void SAIx_In_DeInit(void)
     {
 800a50c:	b510      	push	{r4, lr}
         /* Initialize the haudio_in_sai Instance parameter */
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800a50e:	4808      	ldr	r0, [pc, #32]	; (800a530 <SAIx_In_DeInit+0x24>)
 800a510:	4b08      	ldr	r3, [pc, #32]	; (800a534 <SAIx_In_DeInit+0x28>)
 800a512:	6003      	str	r3, [r0, #0]
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800a514:	4c08      	ldr	r4, [pc, #32]	; (800a538 <SAIx_In_DeInit+0x2c>)
 800a516:	4a09      	ldr	r2, [pc, #36]	; (800a53c <SAIx_In_DeInit+0x30>)
 800a518:	6022      	str	r2, [r4, #0]
         /* Disable SAI peripheral */
         __HAL_SAI_DISABLE(&haudio_in_sai);
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a520:	601a      	str	r2, [r3, #0]

         HAL_SAI_DeInit(&haudio_in_sai);
 800a522:	f7fd fba2 	bl	8007c6a <HAL_SAI_DeInit>
         HAL_SAI_DeInit(&haudio_out_sai);
 800a526:	4620      	mov	r0, r4
 800a528:	f7fd fb9f 	bl	8007c6a <HAL_SAI_DeInit>
     }
 800a52c:	bd10      	pop	{r4, pc}
 800a52e:	bf00      	nop
 800a530:	200019d4 	.word	0x200019d4
 800a534:	40015824 	.word	0x40015824
 800a538:	20001ab8 	.word	0x20001ab8
 800a53c:	40015804 	.word	0x40015804

0800a540 <SAI_AUDIO_IN_MspInit>:
       * @brief  Initializes SAI Audio IN MSP.
       * @param  hsai: SAI handle
       * @retval None
       */
     static void SAI_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
     {
 800a540:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a542:	b08b      	sub	sp, #44	; 0x2c
 800a544:	4605      	mov	r5, r0
         static DMA_HandleTypeDef hdma_sai_rx;
         GPIO_InitTypeDef  gpio_init_structure;

         /* Enable SAI clock */
         AUDIO_IN_SAIx_CLK_ENABLE();
 800a546:	4c3b      	ldr	r4, [pc, #236]	; (800a634 <SAI_AUDIO_IN_MspInit+0xf4>)
 800a548:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a54a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a54e:	6463      	str	r3, [r4, #68]	; 0x44
 800a550:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a556:	9301      	str	r3, [sp, #4]
 800a558:	9b01      	ldr	r3, [sp, #4]

         /* Enable SD GPIO clock */
         AUDIO_IN_SAIx_SD_ENABLE();
 800a55a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a55c:	f043 0310 	orr.w	r3, r3, #16
 800a560:	6323      	str	r3, [r4, #48]	; 0x30
 800a562:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a564:	f003 0310 	and.w	r3, r3, #16
 800a568:	9302      	str	r3, [sp, #8]
 800a56a:	9b02      	ldr	r3, [sp, #8]
         /* CODEC_SAI pin configuration: SD pin */
         gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800a56c:	2308      	movs	r3, #8
 800a56e:	9305      	str	r3, [sp, #20]
         gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800a570:	2602      	movs	r6, #2
 800a572:	9606      	str	r6, [sp, #24]
         gpio_init_structure.Pull = GPIO_NOPULL;
 800a574:	2700      	movs	r7, #0
 800a576:	9707      	str	r7, [sp, #28]
         gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800a578:	9608      	str	r6, [sp, #32]
         gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 800a57a:	2306      	movs	r3, #6
 800a57c:	9309      	str	r3, [sp, #36]	; 0x24
         HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800a57e:	a905      	add	r1, sp, #20
 800a580:	482d      	ldr	r0, [pc, #180]	; (800a638 <SAI_AUDIO_IN_MspInit+0xf8>)
 800a582:	f7fa fb3d 	bl	8004c00 <HAL_GPIO_Init>

         /* Enable Audio INT GPIO clock */
         AUDIO_IN_INT_GPIO_ENABLE();
 800a586:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a588:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a58c:	6323      	str	r3, [r4, #48]	; 0x30
 800a58e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a594:	9303      	str	r3, [sp, #12]
 800a596:	9b03      	ldr	r3, [sp, #12]
         /* Audio INT pin configuration: input */
         gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 800a598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a59c:	9305      	str	r3, [sp, #20]
         gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800a59e:	9706      	str	r7, [sp, #24]
         gpio_init_structure.Pull = GPIO_NOPULL;
 800a5a0:	9707      	str	r7, [sp, #28]
         gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800a5a2:	9608      	str	r6, [sp, #32]
         HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 800a5a4:	a905      	add	r1, sp, #20
 800a5a6:	4825      	ldr	r0, [pc, #148]	; (800a63c <SAI_AUDIO_IN_MspInit+0xfc>)
 800a5a8:	f7fa fb2a 	bl	8004c00 <HAL_GPIO_Init>

         /* Enable the DMA clock */
         AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800a5ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a5ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a5b2:	6323      	str	r3, [r4, #48]	; 0x30
 800a5b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a5b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5ba:	9304      	str	r3, [sp, #16]
 800a5bc:	9b04      	ldr	r3, [sp, #16]

         if (hsai->Instance == AUDIO_IN_SAIx)
 800a5be:	682a      	ldr	r2, [r5, #0]
 800a5c0:	4b1f      	ldr	r3, [pc, #124]	; (800a640 <SAI_AUDIO_IN_MspInit+0x100>)
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d011      	beq.n	800a5ea <SAI_AUDIO_IN_MspInit+0xaa>
             /* Configure the DMA Stream */
             HAL_DMA_Init(&hdma_sai_rx);
         }

         /* SAI DMA IRQ Channel configuration */
         HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	210f      	movs	r1, #15
 800a5ca:	203c      	movs	r0, #60	; 0x3c
 800a5cc:	f7f9 fbc2 	bl	8003d54 <HAL_NVIC_SetPriority>
         HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800a5d0:	203c      	movs	r0, #60	; 0x3c
 800a5d2:	f7f9 fbf1 	bl	8003db8 <HAL_NVIC_EnableIRQ>

         /* Audio INT IRQ Channel configuration */
         HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	210f      	movs	r1, #15
 800a5da:	2028      	movs	r0, #40	; 0x28
 800a5dc:	f7f9 fbba 	bl	8003d54 <HAL_NVIC_SetPriority>
         HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 800a5e0:	2028      	movs	r0, #40	; 0x28
 800a5e2:	f7f9 fbe9 	bl	8003db8 <HAL_NVIC_EnableIRQ>
     }
 800a5e6:	b00b      	add	sp, #44	; 0x2c
 800a5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
             hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 800a5ea:	4c16      	ldr	r4, [pc, #88]	; (800a644 <SAI_AUDIO_IN_MspInit+0x104>)
 800a5ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5f0:	6063      	str	r3, [r4, #4]
             hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800a5f2:	60a7      	str	r7, [r4, #8]
             hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800a5f4:	60e7      	str	r7, [r4, #12]
             hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800a5f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a5fa:	6122      	str	r2, [r4, #16]
             hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800a5fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a600:	6162      	str	r2, [r4, #20]
             hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 800a602:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a606:	61a2      	str	r2, [r4, #24]
             hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800a608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a60c:	61e2      	str	r2, [r4, #28]
             hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800a60e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a612:	6222      	str	r2, [r4, #32]
             hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800a614:	6267      	str	r7, [r4, #36]	; 0x24
             hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800a616:	2203      	movs	r2, #3
 800a618:	62a2      	str	r2, [r4, #40]	; 0x28
             hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800a61a:	62e7      	str	r7, [r4, #44]	; 0x2c
             hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800a61c:	6327      	str	r7, [r4, #48]	; 0x30
             hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800a61e:	4b0a      	ldr	r3, [pc, #40]	; (800a648 <SAI_AUDIO_IN_MspInit+0x108>)
 800a620:	6023      	str	r3, [r4, #0]
             __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800a622:	672c      	str	r4, [r5, #112]	; 0x70
 800a624:	63a5      	str	r5, [r4, #56]	; 0x38
             HAL_DMA_DeInit(&hdma_sai_rx);
 800a626:	4620      	mov	r0, r4
 800a628:	f7f9 fccc 	bl	8003fc4 <HAL_DMA_DeInit>
             HAL_DMA_Init(&hdma_sai_rx);
 800a62c:	4620      	mov	r0, r4
 800a62e:	f7f9 fc63 	bl	8003ef8 <HAL_DMA_Init>
 800a632:	e7c8      	b.n	800a5c6 <SAI_AUDIO_IN_MspInit+0x86>
 800a634:	40023800 	.word	0x40023800
 800a638:	40021000 	.word	0x40021000
 800a63c:	40022400 	.word	0x40022400
 800a640:	40015824 	.word	0x40015824
 800a644:	200016f8 	.word	0x200016f8
 800a648:	40026470 	.word	0x40026470

0800a64c <SAIx_In_Init>:
     {
 800a64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a650:	b083      	sub	sp, #12
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800a652:	4c38      	ldr	r4, [pc, #224]	; (800a734 <SAIx_In_Init+0xe8>)
 800a654:	4b38      	ldr	r3, [pc, #224]	; (800a738 <SAIx_In_Init+0xec>)
 800a656:	6023      	str	r3, [r4, #0]
         __HAL_SAI_DISABLE(&haudio_out_sai);
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a65e:	601a      	str	r2, [r3, #0]
         haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 800a660:	2600      	movs	r6, #0
 800a662:	6266      	str	r6, [r4, #36]	; 0x24
         haudio_out_sai.Init.AudioFrequency = AudioFreq;
 800a664:	9001      	str	r0, [sp, #4]
 800a666:	61e0      	str	r0, [r4, #28]
         haudio_out_sai.Init.AudioMode      = SAI_MODEMASTER_TX;
 800a668:	6066      	str	r6, [r4, #4]
         haudio_out_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 800a66a:	6166      	str	r6, [r4, #20]
         haudio_out_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 800a66c:	6326      	str	r6, [r4, #48]	; 0x30
         haudio_out_sai.Init.DataSize       = SAI_DATASIZE_16;
 800a66e:	f04f 0b80 	mov.w	fp, #128	; 0x80
 800a672:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
         haudio_out_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 800a676:	63a6      	str	r6, [r4, #56]	; 0x38
         haudio_out_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a678:	63e6      	str	r6, [r4, #60]	; 0x3c
         haudio_out_sai.Init.Synchro        = SAI_ASYNCHRONOUS;
 800a67a:	60a6      	str	r6, [r4, #8]
         haudio_out_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 800a67c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a680:	6123      	str	r3, [r4, #16]
         haudio_out_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 800a682:	2701      	movs	r7, #1
 800a684:	61a7      	str	r7, [r4, #24]
         haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 800a686:	60e6      	str	r6, [r4, #12]
         haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 800a688:	62a6      	str	r6, [r4, #40]	; 0x28
         haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 800a68a:	62e6      	str	r6, [r4, #44]	; 0x2c
         haudio_out_sai.Init.Mckdiv         = 0;
 800a68c:	6226      	str	r6, [r4, #32]
         haudio_out_sai.FrameInit.FrameLength       = 64;
 800a68e:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800a692:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
         haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800a696:	f04f 0920 	mov.w	r9, #32
 800a69a:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
         haudio_out_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 800a69e:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800a6a2:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
         haudio_out_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800a6a6:	64e6      	str	r6, [r4, #76]	; 0x4c
         haudio_out_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 800a6a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a6ac:	6522      	str	r2, [r4, #80]	; 0x50
         haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800a6ae:	6566      	str	r6, [r4, #84]	; 0x54
         haudio_out_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 800a6b0:	65a6      	str	r6, [r4, #88]	; 0x58
         haudio_out_sai.SlotInit.SlotNumber     = 4;
 800a6b2:	2204      	movs	r2, #4
 800a6b4:	65e2      	str	r2, [r4, #92]	; 0x5c
         haudio_out_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 800a6b6:	220f      	movs	r2, #15
 800a6b8:	6622      	str	r2, [r4, #96]	; 0x60
         HAL_SAI_Init(&haudio_out_sai);
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f7fd f9d0 	bl	8007a60 <HAL_SAI_Init>
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800a6c0:	4d1e      	ldr	r5, [pc, #120]	; (800a73c <SAIx_In_Init+0xf0>)
 800a6c2:	4b1f      	ldr	r3, [pc, #124]	; (800a740 <SAIx_In_Init+0xf4>)
 800a6c4:	602b      	str	r3, [r5, #0]
         __HAL_SAI_DISABLE(&haudio_in_sai);
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a6cc:	601a      	str	r2, [r3, #0]
         haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 800a6ce:	626e      	str	r6, [r5, #36]	; 0x24
         haudio_in_sai.Init.AudioFrequency = AudioFreq;
 800a6d0:	9b01      	ldr	r3, [sp, #4]
 800a6d2:	61eb      	str	r3, [r5, #28]
         haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	606b      	str	r3, [r5, #4]
         haudio_in_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 800a6d8:	616e      	str	r6, [r5, #20]
         haudio_in_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 800a6da:	632e      	str	r6, [r5, #48]	; 0x30
         haudio_in_sai.Init.DataSize       = SAI_DATASIZE_16;
 800a6dc:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
         haudio_in_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 800a6e0:	63ae      	str	r6, [r5, #56]	; 0x38
         haudio_in_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a6e2:	63ee      	str	r6, [r5, #60]	; 0x3c
         haudio_in_sai.Init.Synchro        = SAI_SYNCHRONOUS;
 800a6e4:	60af      	str	r7, [r5, #8]
         haudio_in_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_DISABLE;
 800a6e6:	612e      	str	r6, [r5, #16]
         haudio_in_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 800a6e8:	61af      	str	r7, [r5, #24]
         haudio_in_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 800a6ea:	60ee      	str	r6, [r5, #12]
         haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 800a6ec:	62ae      	str	r6, [r5, #40]	; 0x28
         haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 800a6ee:	2310      	movs	r3, #16
 800a6f0:	62eb      	str	r3, [r5, #44]	; 0x2c
         haudio_in_sai.Init.Mckdiv         = 0;
 800a6f2:	622e      	str	r6, [r5, #32]
         haudio_in_sai.FrameInit.FrameLength       = 64;
 800a6f4:	f8c5 a040 	str.w	sl, [r5, #64]	; 0x40
         haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 800a6f8:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
         haudio_in_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 800a6fc:	f8c5 8048 	str.w	r8, [r5, #72]	; 0x48
         haudio_in_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800a700:	64ee      	str	r6, [r5, #76]	; 0x4c
         haudio_in_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 800a702:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a706:	652b      	str	r3, [r5, #80]	; 0x50
         haudio_in_sai.SlotInit.FirstBitOffset = 0;
 800a708:	656e      	str	r6, [r5, #84]	; 0x54
         haudio_in_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 800a70a:	65ae      	str	r6, [r5, #88]	; 0x58
         haudio_in_sai.SlotInit.SlotNumber     = 4;
 800a70c:	2304      	movs	r3, #4
 800a70e:	65eb      	str	r3, [r5, #92]	; 0x5c
         haudio_in_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 800a710:	230f      	movs	r3, #15
 800a712:	662b      	str	r3, [r5, #96]	; 0x60
         HAL_SAI_Init(&haudio_in_sai);
 800a714:	4628      	mov	r0, r5
 800a716:	f7fd f9a3 	bl	8007a60 <HAL_SAI_Init>
         __HAL_SAI_ENABLE(&haudio_in_sai);
 800a71a:	682a      	ldr	r2, [r5, #0]
 800a71c:	6813      	ldr	r3, [r2, #0]
 800a71e:	ea43 0308 	orr.w	r3, r3, r8
 800a722:	6013      	str	r3, [r2, #0]
         __HAL_SAI_ENABLE(&haudio_out_sai);
 800a724:	6822      	ldr	r2, [r4, #0]
 800a726:	6813      	ldr	r3, [r2, #0]
 800a728:	ea43 0308 	orr.w	r3, r3, r8
 800a72c:	6013      	str	r3, [r2, #0]
     }
 800a72e:	b003      	add	sp, #12
 800a730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a734:	20001ab8 	.word	0x20001ab8
 800a738:	40015804 	.word	0x40015804
 800a73c:	200019d4 	.word	0x200019d4
 800a740:	40015824 	.word	0x40015824

0800a744 <BSP_AUDIO_IN_OUT_Init>:



uint8_t BSP_AUDIO_IN_OUT_Init(uint32_t AudioFreq)
     {
 800a744:	b538      	push	{r3, r4, r5, lr}
 800a746:	4604      	mov	r4, r0
         uint8_t ret = AUDIO_ERROR;

         /* Disable SAI */
         SAIx_In_DeInit();
 800a748:	f7ff fee0 	bl	800a50c <SAIx_In_DeInit>

         /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
         BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL);
 800a74c:	4d19      	ldr	r5, [pc, #100]	; (800a7b4 <BSP_AUDIO_IN_OUT_Init+0x70>)
 800a74e:	2200      	movs	r2, #0
 800a750:	4621      	mov	r1, r4
 800a752:	4628      	mov	r0, r5
 800a754:	f7f7 f830 	bl	80017b8 <BSP_AUDIO_OUT_ClockConfig>
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800a758:	4b17      	ldr	r3, [pc, #92]	; (800a7b8 <BSP_AUDIO_IN_OUT_Init+0x74>)
 800a75a:	4a18      	ldr	r2, [pc, #96]	; (800a7bc <BSP_AUDIO_IN_OUT_Init+0x78>)
 800a75c:	601a      	str	r2, [r3, #0]
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800a75e:	4b18      	ldr	r3, [pc, #96]	; (800a7c0 <BSP_AUDIO_IN_OUT_Init+0x7c>)
 800a760:	602b      	str	r3, [r5, #0]
         if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 800a762:	4628      	mov	r0, r5
 800a764:	f7fd fbd3 	bl	8007f0e <HAL_SAI_GetState>
 800a768:	b160      	cbz	r0, 800a784 <BSP_AUDIO_IN_OUT_Init+0x40>
             BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
             SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
         }


         SAIx_In_Init(AudioFreq); // inclu déja le code de SAIx_Out_Init()
 800a76a:	4620      	mov	r0, r4
 800a76c:	f7ff ff6e 	bl	800a64c <SAIx_In_Init>


         if ((wm8994_drv.ReadID(AUDIO_I2C_ADDRESS)) == WM8994_ID)
 800a770:	4b14      	ldr	r3, [pc, #80]	; (800a7c4 <BSP_AUDIO_IN_OUT_Init+0x80>)
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	2034      	movs	r0, #52	; 0x34
 800a776:	4798      	blx	r3
 800a778:	f648 1394 	movw	r3, #35220	; 0x8994
 800a77c:	4298      	cmp	r0, r3
 800a77e:	d00a      	beq.n	800a796 <BSP_AUDIO_IN_OUT_Init+0x52>
             wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
             /* Initialize the audio driver structure */
             audio_drv = &wm8994_drv;
             ret = AUDIO_OK;
         } else {
             ret = AUDIO_ERROR;
 800a780:	2001      	movs	r0, #1
             audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_ANALOG_MIC | OUTPUT_DEVICE_HEADPHONE , 100, AudioFreq);
         }

         /* Return AUDIO_OK when all operations are correctly done */
         return ret;
     }
 800a782:	bd38      	pop	{r3, r4, r5, pc}
             BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 800a784:	2100      	movs	r1, #0
 800a786:	480c      	ldr	r0, [pc, #48]	; (800a7b8 <BSP_AUDIO_IN_OUT_Init+0x74>)
 800a788:	f7f6 ff92 	bl	80016b0 <BSP_AUDIO_OUT_MspInit>
             SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 800a78c:	2100      	movs	r1, #0
 800a78e:	4628      	mov	r0, r5
 800a790:	f7ff fed6 	bl	800a540 <SAI_AUDIO_IN_MspInit>
 800a794:	e7e9      	b.n	800a76a <BSP_AUDIO_IN_OUT_Init+0x26>
             wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800a796:	4d0b      	ldr	r5, [pc, #44]	; (800a7c4 <BSP_AUDIO_IN_OUT_Init+0x80>)
 800a798:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a79a:	2034      	movs	r0, #52	; 0x34
 800a79c:	4798      	blx	r3
             audio_drv = &wm8994_drv;
 800a79e:	4b0a      	ldr	r3, [pc, #40]	; (800a7c8 <BSP_AUDIO_IN_OUT_Init+0x84>)
 800a7a0:	661d      	str	r5, [r3, #96]	; 0x60
             audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_ANALOG_MIC | OUTPUT_DEVICE_HEADPHONE , 100, AudioFreq);
 800a7a2:	682d      	ldr	r5, [r5, #0]
 800a7a4:	4623      	mov	r3, r4
 800a7a6:	2264      	movs	r2, #100	; 0x64
 800a7a8:	f240 3102 	movw	r1, #770	; 0x302
 800a7ac:	2034      	movs	r0, #52	; 0x34
 800a7ae:	47a8      	blx	r5
             ret = AUDIO_OK;
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	e7e6      	b.n	800a782 <BSP_AUDIO_IN_OUT_Init+0x3e>
 800a7b4:	200019d4 	.word	0x200019d4
 800a7b8:	20001ab8 	.word	0x20001ab8
 800a7bc:	40015804 	.word	0x40015804
 800a7c0:	40015824 	.word	0x40015824
 800a7c4:	20000028 	.word	0x20000028
 800a7c8:	200016f8 	.word	0x200016f8

0800a7cc <_BSP_AUDIO_OUT_Play>:


     uint8_t _BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
     {
 800a7cc:	b538      	push	{r3, r4, r5, lr}
 800a7ce:	4604      	mov	r4, r0
         /* Call the audio Codec Play function */
         if (audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *)pBuffer, Size) != 0)
 800a7d0:	4b09      	ldr	r3, [pc, #36]	; (800a7f8 <_BSP_AUDIO_OUT_Play+0x2c>)
 800a7d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	b28d      	uxth	r5, r1
 800a7d8:	462a      	mov	r2, r5
 800a7da:	4601      	mov	r1, r0
 800a7dc:	2034      	movs	r0, #52	; 0x34
 800a7de:	4798      	blx	r3
 800a7e0:	b108      	cbz	r0, 800a7e6 <_BSP_AUDIO_OUT_Play+0x1a>
         {
             return AUDIO_ERROR;
 800a7e2:	2001      	movs	r0, #1
             //if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE)) !=  HAL_OK)
             if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, Size) !=  HAL_OK)
                 return AUDIO_ERROR;
             return AUDIO_OK;
         }
     }
 800a7e4:	bd38      	pop	{r3, r4, r5, pc}
             if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, Size) !=  HAL_OK)
 800a7e6:	462a      	mov	r2, r5
 800a7e8:	4621      	mov	r1, r4
 800a7ea:	4804      	ldr	r0, [pc, #16]	; (800a7fc <_BSP_AUDIO_OUT_Play+0x30>)
 800a7ec:	f7fd fa5e 	bl	8007cac <HAL_SAI_Transmit_DMA>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d0f7      	beq.n	800a7e4 <_BSP_AUDIO_OUT_Play+0x18>
                 return AUDIO_ERROR;
 800a7f4:	2001      	movs	r0, #1
 800a7f6:	e7f5      	b.n	800a7e4 <_BSP_AUDIO_OUT_Play+0x18>
 800a7f8:	200016f8 	.word	0x200016f8
 800a7fc:	20001ab8 	.word	0x20001ab8

0800a800 <Calc_FX1_Sample>:
    for (int i = 0; i < Buffer_Size; i++) {
    	pBuffer[i] = Calc_FX1_Sample(pBuffer[i]);
    }
}

int Calc_FX1_Sample(int inSample) {
 800a800:	ee04 0a90 	vmov	s9, r0
    float inSampleF = (float)inSample;
 800a804:	eef8 4ae4 	vcvt.f32.s32	s9, s9
    float outdata = 0;

    for (int i=0;i < FILTER_TAP_NUM_FX1; i++) {
 800a808:	2100      	movs	r1, #0
    float outdata = 0;
 800a80a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800a874 <Calc_FX1_Sample+0x74>
    for (int i=0;i < FILTER_TAP_NUM_FX1; i++) {
 800a80e:	e017      	b.n	800a840 <Calc_FX1_Sample+0x40>
        outdata += (firdata_fx1[i]*filter_taps_fx1[firptr_fx1[i]]);
 800a810:	4b19      	ldr	r3, [pc, #100]	; (800a878 <Calc_FX1_Sample+0x78>)
 800a812:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a816:	ed93 6a00 	vldr	s12, [r3]
 800a81a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 800a81e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 800a822:	4816      	ldr	r0, [pc, #88]	; (800a87c <Calc_FX1_Sample+0x7c>)
 800a824:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 800a828:	ed90 5b00 	vldr	d5, [r0]
 800a82c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800a830:	ee06 7b05 	vmla.f64	d7, d6, d5
 800a834:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        firptr_fx1[i]++;
 800a838:	3201      	adds	r2, #1
 800a83a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    for (int i=0;i < FILTER_TAP_NUM_FX1; i++) {
 800a83e:	3101      	adds	r1, #1
 800a840:	293e      	cmp	r1, #62	; 0x3e
 800a842:	dde5      	ble.n	800a810 <Calc_FX1_Sample+0x10>
    }

    firdata_fx1[fir_w_ptr_fx1] = inSampleF;
 800a844:	4a0c      	ldr	r2, [pc, #48]	; (800a878 <Calc_FX1_Sample+0x78>)
 800a846:	f8d2 31f8 	ldr.w	r3, [r2, #504]	; 0x1f8
 800a84a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800a84e:	edc1 4a00 	vstr	s9, [r1]
    firptr_fx1[fir_w_ptr_fx1] = 0;
 800a852:	2000      	movs	r0, #0
 800a854:	f8c1 00fc 	str.w	r0, [r1, #252]	; 0xfc
    fir_w_ptr_fx1++;
 800a858:	3301      	adds	r3, #1
 800a85a:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
    if (fir_w_ptr_fx1 == FILTER_TAP_NUM_FX1) fir_w_ptr_fx1=0;
 800a85e:	2b3f      	cmp	r3, #63	; 0x3f
 800a860:	d004      	beq.n	800a86c <Calc_FX1_Sample+0x6c>

    return (int) outdata;
}
 800a862:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800a866:	ee17 0a90 	vmov	r0, s15
 800a86a:	4770      	bx	lr
    if (fir_w_ptr_fx1 == FILTER_TAP_NUM_FX1) fir_w_ptr_fx1=0;
 800a86c:	f8c2 01f8 	str.w	r0, [r2, #504]	; 0x1f8
 800a870:	e7f7      	b.n	800a862 <Calc_FX1_Sample+0x62>
 800a872:	bf00      	nop
 800a874:	00000000 	.word	0x00000000
 800a878:	2000175c 	.word	0x2000175c
 800a87c:	08010f50 	.word	0x08010f50

0800a880 <Calc_FX1_Buffer>:
void Calc_FX1_Buffer(uint16_t* pBuffer, uint16_t Buffer_Size) {
 800a880:	b570      	push	{r4, r5, r6, lr}
 800a882:	4605      	mov	r5, r0
 800a884:	460e      	mov	r6, r1
    for (int i = 0; i < Buffer_Size; i++) {
 800a886:	2400      	movs	r4, #0
 800a888:	42a6      	cmp	r6, r4
 800a88a:	dd07      	ble.n	800a89c <Calc_FX1_Buffer+0x1c>
    	pBuffer[i] = Calc_FX1_Sample(pBuffer[i]);
 800a88c:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
 800a890:	f7ff ffb6 	bl	800a800 <Calc_FX1_Sample>
 800a894:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
    for (int i = 0; i < Buffer_Size; i++) {
 800a898:	3401      	adds	r4, #1
 800a89a:	e7f5      	b.n	800a888 <Calc_FX1_Buffer+0x8>
}
 800a89c:	bd70      	pop	{r4, r5, r6, pc}

0800a89e <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 800a89e:	b500      	push	{lr}
 800a8a0:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a8a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a8aa:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a8b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800a8b4:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 800a8b6:	2219      	movs	r2, #25
 800a8b8:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 800a8ba:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800a8be:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a8c0:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800a8c2:	2309      	movs	r3, #9
 800a8c4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 800a8c6:	2307      	movs	r3, #7
 800a8c8:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800a8ca:	4668      	mov	r0, sp
 800a8cc:	f7fb ff40 	bl	8006750 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 800a8d0:	b100      	cbz	r0, 800a8d4 <SystemClock_Config+0x36>
    while(1) { ; }
 800a8d2:	e7fe      	b.n	800a8d2 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800a8d4:	f7fb fefe 	bl	80066d4 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800a8d8:	b100      	cbz	r0, 800a8dc <SystemClock_Config+0x3e>
    while(1) { ; }
 800a8da:	e7fe      	b.n	800a8da <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800a8dc:	230f      	movs	r3, #15
 800a8de:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a8e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a8ec:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a8ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8f2:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800a8f4:	2107      	movs	r1, #7
 800a8f6:	a80d      	add	r0, sp, #52	; 0x34
 800a8f8:	f7fc f982 	bl	8006c00 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 800a8fc:	b100      	cbz	r0, 800a900 <SystemClock_Config+0x62>
    while(1) { ; }
 800a8fe:	e7fe      	b.n	800a8fe <SystemClock_Config+0x60>
  }
}
 800a900:	b013      	add	sp, #76	; 0x4c
 800a902:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a908 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 800a908:	b410      	push	{r4}
  __ASM volatile ("dsb 0xF":::"memory");
 800a90a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a90e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800a912:	4b1a      	ldr	r3, [pc, #104]	; (800a97c <CPU_CACHE_Enable+0x74>)
 800a914:	2100      	movs	r1, #0
 800a916:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800a91a:	695a      	ldr	r2, [r3, #20]
 800a91c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a920:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a922:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a926:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 800a92a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800a92e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800a932:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800a936:	f3c0 324e 	ubfx	r2, r0, #13, #15
 800a93a:	e000      	b.n	800a93e <CPU_CACHE_Enable+0x36>
    } while(sets--);
 800a93c:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800a93e:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a942:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800a946:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 800a94a:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 800a94e:	4c0b      	ldr	r4, [pc, #44]	; (800a97c <CPU_CACHE_Enable+0x74>)
 800a950:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
 800a954:	460b      	mov	r3, r1
 800a956:	3901      	subs	r1, #1
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1f2      	bne.n	800a942 <CPU_CACHE_Enable+0x3a>
    } while(sets--);
 800a95c:	1e53      	subs	r3, r2, #1
 800a95e:	2a00      	cmp	r2, #0
 800a960:	d1ec      	bne.n	800a93c <CPU_CACHE_Enable+0x34>
 800a962:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800a966:	6963      	ldr	r3, [r4, #20]
 800a968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a96c:	6163      	str	r3, [r4, #20]
 800a96e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a972:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800a976:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a97a:	4770      	bx	lr
 800a97c:	e000ed00 	.word	0xe000ed00

0800a980 <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 800a980:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 800a982:	f7ff ffc1 	bl	800a908 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 800a986:	f7f9 f9ab 	bl	8003ce0 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 800a98a:	f7ff ff88 	bl	800a89e <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 800a98e:	4a04      	ldr	r2, [pc, #16]	; (800a9a0 <Sys_Init+0x20>)
 800a990:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a994:	4803      	ldr	r0, [pc, #12]	; (800a9a4 <Sys_Init+0x24>)
 800a996:	f000 f941 	bl	800ac1c <initUart>

	/* Initialization for setting up JPEG Color Conversion */
	JPEG_InitColorTables();
 800a99a:	f7ff fd53 	bl	800a444 <JPEG_InitColorTables>

}
 800a99e:	bd08      	pop	{r3, pc}
 800a9a0:	40011000 	.word	0x40011000
 800a9a4:	2000201c 	.word	0x2000201c

0800a9a8 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 800a9a8:	b508      	push	{r3, lr}
  HAL_IncTick();
 800a9aa:	f7f9 f9a5 	bl	8003cf8 <HAL_IncTick>
}
 800a9ae:	bd08      	pop	{r3, pc}

0800a9b0 <Timer_Init>:

//
//
// -- Timer Initialization and Callbacks --
//
void Timer_Init() {
 800a9b0:	b510      	push	{r4, lr}
 800a9b2:	b082      	sub	sp, #8
	__HAL_RCC_TIM7_CLK_ENABLE(); // Clock Enable
 800a9b4:	4b0e      	ldr	r3, [pc, #56]	; (800a9f0 <Timer_Init+0x40>)
 800a9b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a9b8:	f042 0220 	orr.w	r2, r2, #32
 800a9bc:	641a      	str	r2, [r3, #64]	; 0x40
 800a9be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c0:	f003 0320 	and.w	r3, r3, #32
 800a9c4:	9301      	str	r3, [sp, #4]
 800a9c6:	9b01      	ldr	r3, [sp, #4]
	htim.Instance = TIM7;
 800a9c8:	4c0a      	ldr	r4, [pc, #40]	; (800a9f4 <Timer_Init+0x44>)
 800a9ca:	4b0b      	ldr	r3, [pc, #44]	; (800a9f8 <Timer_Init+0x48>)
 800a9cc:	6023      	str	r3, [r4, #0]
	htim.Init.Prescaler = 1079U; //108MHz/1080 = 100000Hz
 800a9ce:	f240 4337 	movw	r3, #1079	; 0x437
 800a9d2:	6063      	str	r3, [r4, #4]
	htim.Init.Period = 4999U; //100000Hz/5000 = 20Hz
 800a9d4:	f241 3387 	movw	r3, #4999	; 0x1387
 800a9d8:	60e3      	str	r3, [r4, #12]
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800a9da:	2037      	movs	r0, #55	; 0x37
 800a9dc:	f7f9 f9ec 	bl	8003db8 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Init(&htim);
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f7fe f9f7 	bl	8008dd4 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim);
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f7fe f890 	bl	8008b0c <HAL_TIM_Base_Start_IT>
}
 800a9ec:	b002      	add	sp, #8
 800a9ee:	bd10      	pop	{r4, pc}
 800a9f0:	40023800 	.word	0x40023800
 800a9f4:	20006094 	.word	0x20006094
 800a9f8:	40001400 	.word	0x40001400

0800a9fc <main>:
int main(void) {
 800a9fc:	b508      	push	{r3, lr}
	Sys_Init(); // Initialize STM32 System
 800a9fe:	f7ff ffbf 	bl	800a980 <Sys_Init>
	Timer_Init(); // Initialize Program Timer
 800aa02:	f7ff ffd5 	bl	800a9b0 <Timer_Init>
	UI_Init(); // Initialize SD Card, LCD, JPEG Peripheral, and Pushbutton
 800aa06:	f000 fafb 	bl	800b000 <UI_Init>
	Line_Audio_Init(); // Initialize Audio Functionality
 800aa0a:	f7ff fd1f 	bl	800a44c <Line_Audio_Init>
 800aa0e:	e028      	b.n	800aa62 <main+0x66>
			fx_state = UI_Handler((uint16_t*)&audio_out_buffer, fx_state);
 800aa10:	4c1f      	ldr	r4, [pc, #124]	; (800aa90 <main+0x94>)
 800aa12:	88a1      	ldrh	r1, [r4, #4]
 800aa14:	481f      	ldr	r0, [pc, #124]	; (800aa94 <main+0x98>)
 800aa16:	f000 ff15 	bl	800b844 <UI_Handler>
 800aa1a:	6060      	str	r0, [r4, #4]
			TIM_TICK = 0;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	6023      	str	r3, [r4, #0]
 800aa20:	e023      	b.n	800aa6a <main+0x6e>
				if (fx_state == FX_STATE_1) {
 800aa22:	4b1b      	ldr	r3, [pc, #108]	; (800aa90 <main+0x94>)
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d006      	beq.n	800aa38 <main+0x3c>
				memcpy(&audio_out_buffer[0], &audio_in_buffer[0], RECORD_BUFFER_SIZE);
 800aa2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aa2e:	491a      	ldr	r1, [pc, #104]	; (800aa98 <main+0x9c>)
 800aa30:	4818      	ldr	r0, [pc, #96]	; (800aa94 <main+0x98>)
 800aa32:	f001 f9a4 	bl	800bd7e <memcpy>
 800aa36:	e00b      	b.n	800aa50 <main+0x54>
					Calc_FX1_Buffer((uint16_t *)&audio_out_buffer[0], RECORD_BUFFER_SIZE/2);
 800aa38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aa3c:	4815      	ldr	r0, [pc, #84]	; (800aa94 <main+0x98>)
 800aa3e:	f7ff ff1f 	bl	800a880 <Calc_FX1_Buffer>
 800aa42:	e7f2      	b.n	800aa2a <main+0x2e>
				memcpy(&audio_out_buffer[RECORD_BUFFER_SIZE / 2],
 800aa44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aa48:	4914      	ldr	r1, [pc, #80]	; (800aa9c <main+0xa0>)
 800aa4a:	4815      	ldr	r0, [pc, #84]	; (800aaa0 <main+0xa4>)
 800aa4c:	f001 f997 	bl	800bd7e <memcpy>
			audio_line_in_buffer_state = BUFFER_OFFSET_NONE;
 800aa50:	4b14      	ldr	r3, [pc, #80]	; (800aaa4 <main+0xa8>)
 800aa52:	2200      	movs	r2, #0
 800aa54:	601a      	str	r2, [r3, #0]
		if (audio_line_out_buffer_state)
 800aa56:	4b14      	ldr	r3, [pc, #80]	; (800aaa8 <main+0xac>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	b113      	cbz	r3, 800aa62 <main+0x66>
			audio_line_out_buffer_state = 0;
 800aa5c:	4b12      	ldr	r3, [pc, #72]	; (800aaa8 <main+0xac>)
 800aa5e:	2200      	movs	r2, #0
 800aa60:	601a      	str	r2, [r3, #0]
		if (TIM_TICK == 1) {
 800aa62:	4b0b      	ldr	r3, [pc, #44]	; (800aa90 <main+0x94>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d0d2      	beq.n	800aa10 <main+0x14>
		if (audio_line_in_buffer_state != BUFFER_OFFSET_NONE)
 800aa6a:	4b0e      	ldr	r3, [pc, #56]	; (800aaa4 <main+0xa8>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d0f1      	beq.n	800aa56 <main+0x5a>
			if (audio_line_in_buffer_state == BUFFER_OFFSET_HALF)
 800aa72:	4b0c      	ldr	r3, [pc, #48]	; (800aaa4 <main+0xa8>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d0d3      	beq.n	800aa22 <main+0x26>
				if (fx_state == FX_STATE_1) {
 800aa7a:	4b05      	ldr	r3, [pc, #20]	; (800aa90 <main+0x94>)
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d1e0      	bne.n	800aa44 <main+0x48>
					Calc_FX1_Buffer((uint16_t *)&audio_out_buffer[RECORD_BUFFER_SIZE/2], RECORD_BUFFER_SIZE/2);
 800aa82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aa86:	4806      	ldr	r0, [pc, #24]	; (800aaa0 <main+0xa4>)
 800aa88:	f7ff fefa 	bl	800a880 <Calc_FX1_Buffer>
 800aa8c:	e7da      	b.n	800aa44 <main+0x48>
 800aa8e:	bf00      	nop
 800aa90:	20001958 	.word	0x20001958
 800aa94:	2000208c 	.word	0x2000208c
 800aa98:	20004090 	.word	0x20004090
 800aa9c:	20005090 	.word	0x20005090
 800aaa0:	2000308c 	.word	0x2000308c
 800aaa4:	20006090 	.word	0x20006090
 800aaa8:	2000408c 	.word	0x2000408c

0800aaac <TIM7_IRQHandler>:

void TIM7_IRQHandler(void) {
 800aaac:	b508      	push	{r3, lr}
	HAL_TIM_IRQHandler(&htim);
 800aaae:	4802      	ldr	r0, [pc, #8]	; (800aab8 <TIM7_IRQHandler+0xc>)
 800aab0:	f7fe f83c 	bl	8008b2c <HAL_TIM_IRQHandler>
}
 800aab4:	bd08      	pop	{r3, pc}
 800aab6:	bf00      	nop
 800aab8:	20006094 	.word	0x20006094

0800aabc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim->Instance == TIM7) {
 800aabc:	6802      	ldr	r2, [r0, #0]
 800aabe:	4b04      	ldr	r3, [pc, #16]	; (800aad0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d000      	beq.n	800aac6 <HAL_TIM_PeriodElapsedCallback+0xa>
		TIM_TICK = 1;
	}
}
 800aac4:	4770      	bx	lr
		TIM_TICK = 1;
 800aac6:	4b03      	ldr	r3, [pc, #12]	; (800aad4 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800aac8:	2201      	movs	r2, #1
 800aaca:	601a      	str	r2, [r3, #0]
}
 800aacc:	e7fa      	b.n	800aac4 <HAL_TIM_PeriodElapsedCallback+0x8>
 800aace:	bf00      	nop
 800aad0:	40001400 	.word	0x40001400
 800aad4:	20001958 	.word	0x20001958

0800aad8 <DMA2_Stream4_IRQHandler>:
/* please refer to the startup file (startup_stm32f7xx.s).                    */
/******************************************************************************/

/* ISR Handlers */
void DMA2_Stream4_IRQHandler(void)
{
 800aad8:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800aada:	4b02      	ldr	r3, [pc, #8]	; (800aae4 <DMA2_Stream4_IRQHandler+0xc>)
 800aadc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800aade:	f7f9 fae9 	bl	80040b4 <HAL_DMA_IRQHandler>
}
 800aae2:	bd08      	pop	{r3, pc}
 800aae4:	200019d4 	.word	0x200019d4

0800aae8 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800aae8:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800aaea:	4b02      	ldr	r3, [pc, #8]	; (800aaf4 <DMA2_Stream1_IRQHandler+0xc>)
 800aaec:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800aaee:	f7f9 fae1 	bl	80040b4 <HAL_DMA_IRQHandler>
}
 800aaf2:	bd08      	pop	{r3, pc}
 800aaf4:	20001ab8 	.word	0x20001ab8

0800aaf8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800aaf8:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800aafa:	4a0f      	ldr	r2, [pc, #60]	; (800ab38 <SystemInit+0x40>)
 800aafc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800ab00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ab08:	4b0c      	ldr	r3, [pc, #48]	; (800ab3c <SystemInit+0x44>)
 800ab0a:	6819      	ldr	r1, [r3, #0]
 800ab0c:	f041 0101 	orr.w	r1, r1, #1
 800ab10:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ab12:	2000      	movs	r0, #0
 800ab14:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ab16:	681c      	ldr	r4, [r3, #0]
 800ab18:	4909      	ldr	r1, [pc, #36]	; (800ab40 <SystemInit+0x48>)
 800ab1a:	4021      	ands	r1, r4
 800ab1c:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800ab1e:	4909      	ldr	r1, [pc, #36]	; (800ab44 <SystemInit+0x4c>)
 800ab20:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ab22:	6819      	ldr	r1, [r3, #0]
 800ab24:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800ab28:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ab2a:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ab2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab30:	6093      	str	r3, [r2, #8]
#endif
}
 800ab32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab36:	4770      	bx	lr
 800ab38:	e000ed00 	.word	0xe000ed00
 800ab3c:	40023800 	.word	0x40023800
 800ab40:	fef6ffff 	.word	0xfef6ffff
 800ab44:	24003010 	.word	0x24003010

0800ab48 <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 800ab48:	b530      	push	{r4, r5, lr}
 800ab4a:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 800ab4c:	6803      	ldr	r3, [r0, #0]
 800ab4e:	4a2e      	ldr	r2, [pc, #184]	; (800ac08 <HAL_UART_MspInit+0xc0>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d004      	beq.n	800ab5e <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 800ab54:	4a2d      	ldr	r2, [pc, #180]	; (800ac0c <HAL_UART_MspInit+0xc4>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d02c      	beq.n	800abb4 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 800ab5a:	b00b      	add	sp, #44	; 0x2c
 800ab5c:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 800ab5e:	4c2c      	ldr	r4, [pc, #176]	; (800ac10 <HAL_UART_MspInit+0xc8>)
 800ab60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ab62:	f043 0301 	orr.w	r3, r3, #1
 800ab66:	6323      	str	r3, [r4, #48]	; 0x30
 800ab68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ab6a:	f003 0301 	and.w	r3, r3, #1
 800ab6e:	9301      	str	r3, [sp, #4]
 800ab70:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 800ab72:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab76:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800ab78:	2302      	movs	r3, #2
 800ab7a:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800ab80:	2303      	movs	r3, #3
 800ab82:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ab84:	2307      	movs	r3, #7
 800ab86:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 800ab88:	4d22      	ldr	r5, [pc, #136]	; (800ac14 <HAL_UART_MspInit+0xcc>)
 800ab8a:	a905      	add	r1, sp, #20
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	f7fa f837 	bl	8004c00 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 800ab92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab96:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 800ab98:	a905      	add	r1, sp, #20
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	f7fa f830 	bl	8004c00 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 800aba0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800aba2:	f043 0310 	orr.w	r3, r3, #16
 800aba6:	6463      	str	r3, [r4, #68]	; 0x44
 800aba8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800abaa:	f003 0310 	and.w	r3, r3, #16
 800abae:	9302      	str	r3, [sp, #8]
 800abb0:	9b02      	ldr	r3, [sp, #8]
 800abb2:	e7d2      	b.n	800ab5a <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 800abb4:	4c16      	ldr	r4, [pc, #88]	; (800ac10 <HAL_UART_MspInit+0xc8>)
 800abb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800abb8:	f043 0304 	orr.w	r3, r3, #4
 800abbc:	6323      	str	r3, [r4, #48]	; 0x30
 800abbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800abc0:	f003 0304 	and.w	r3, r3, #4
 800abc4:	9303      	str	r3, [sp, #12]
 800abc6:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 800abc8:	2340      	movs	r3, #64	; 0x40
 800abca:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800abcc:	2302      	movs	r3, #2
 800abce:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800abd0:	2301      	movs	r3, #1
 800abd2:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800abd4:	2303      	movs	r3, #3
 800abd6:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800abd8:	2308      	movs	r3, #8
 800abda:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 800abdc:	4d0e      	ldr	r5, [pc, #56]	; (800ac18 <HAL_UART_MspInit+0xd0>)
 800abde:	a905      	add	r1, sp, #20
 800abe0:	4628      	mov	r0, r5
 800abe2:	f7fa f80d 	bl	8004c00 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 800abe6:	2380      	movs	r3, #128	; 0x80
 800abe8:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 800abea:	a905      	add	r1, sp, #20
 800abec:	4628      	mov	r0, r5
 800abee:	f7fa f807 	bl	8004c00 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 800abf2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800abf4:	f043 0320 	orr.w	r3, r3, #32
 800abf8:	6463      	str	r3, [r4, #68]	; 0x44
 800abfa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800abfc:	f003 0320 	and.w	r3, r3, #32
 800ac00:	9304      	str	r3, [sp, #16]
 800ac02:	9b04      	ldr	r3, [sp, #16]
}
 800ac04:	e7a9      	b.n	800ab5a <HAL_UART_MspInit+0x12>
 800ac06:	bf00      	nop
 800ac08:	40011000 	.word	0x40011000
 800ac0c:	40011400 	.word	0x40011400
 800ac10:	40023800 	.word	0x40023800
 800ac14:	40020000 	.word	0x40020000
 800ac18:	40020800 	.word	0x40020800

0800ac1c <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 800ac1c:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 800ac1e:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 800ac20:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 800ac22:	2200      	movs	r2, #0
 800ac24:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 800ac26:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 800ac28:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 800ac2a:	210c      	movs	r1, #12
 800ac2c:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800ac2e:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 800ac30:	f7fe fc61 	bl	80094f6 <HAL_UART_Init>
}
 800ac34:	bd08      	pop	{r3, pc}
	...

0800ac38 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 800ac38:	b510      	push	{r4, lr}
 800ac3a:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 800ac3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ac40:	b292      	uxth	r2, r2
 800ac42:	4802      	ldr	r0, [pc, #8]	; (800ac4c <_write+0x14>)
 800ac44:	f7fe f916 	bl	8008e74 <HAL_UART_Transmit>
	return len;
}
 800ac48:	4620      	mov	r0, r4
 800ac4a:	bd10      	pop	{r4, pc}
 800ac4c:	2000201c 	.word	0x2000201c

0800ac50 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 800ac50:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 800ac52:	2200      	movs	r2, #0
 800ac54:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800ac56:	f04f 33ff 	mov.w	r3, #4294967295
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	4802      	ldr	r0, [pc, #8]	; (800ac68 <_read+0x18>)
 800ac5e:	f7fe f971 	bl	8008f44 <HAL_UART_Receive>
	return len;
}
 800ac62:	2001      	movs	r0, #1
 800ac64:	bd08      	pop	{r3, pc}
 800ac66:	bf00      	nop
 800ac68:	2000201c 	.word	0x2000201c

0800ac6c <UI_Config_SV>:
		displayJPEG(iconName_FX4, iconPosX_FX4, iconPosY_FX4);
	}
}

/* Display Signal Viewer Screen */
void UI_Config_SV() {
 800ac6c:	b510      	push	{r4, lr}
	// Clear LCD
	BSP_LCD_Clear(LCD_COLOR_LIGHTGRAY);
 800ac6e:	481f      	ldr	r0, [pc, #124]	; (800acec <UI_Config_SV+0x80>)
 800ac70:	f7f6 febc 	bl	80019ec <BSP_LCD_Clear>
	// Major Axes
	for (int i = 1; i < 4; i++) BSP_LCD_DrawHLine(59, 419+i, axisScaleX);
 800ac74:	2401      	movs	r4, #1
 800ac76:	e008      	b.n	800ac8a <UI_Config_SV+0x1e>
 800ac78:	f204 11a3 	addw	r1, r4, #419	; 0x1a3
 800ac7c:	4b1c      	ldr	r3, [pc, #112]	; (800acf0 <UI_Config_SV+0x84>)
 800ac7e:	881a      	ldrh	r2, [r3, #0]
 800ac80:	b289      	uxth	r1, r1
 800ac82:	203b      	movs	r0, #59	; 0x3b
 800ac84:	f7f6 fed0 	bl	8001a28 <BSP_LCD_DrawHLine>
 800ac88:	3401      	adds	r4, #1
 800ac8a:	2c03      	cmp	r4, #3
 800ac8c:	ddf4      	ble.n	800ac78 <UI_Config_SV+0xc>
	for (int i = 1; i < 4; i++) BSP_LCD_DrawVLine(57+i, 49, axisScaleY+10);
 800ac8e:	2401      	movs	r4, #1
 800ac90:	e00a      	b.n	800aca8 <UI_Config_SV+0x3c>
 800ac92:	4b18      	ldr	r3, [pc, #96]	; (800acf4 <UI_Config_SV+0x88>)
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	320a      	adds	r2, #10
 800ac98:	f104 0039 	add.w	r0, r4, #57	; 0x39
 800ac9c:	b292      	uxth	r2, r2
 800ac9e:	2131      	movs	r1, #49	; 0x31
 800aca0:	b280      	uxth	r0, r0
 800aca2:	f7f6 fee9 	bl	8001a78 <BSP_LCD_DrawVLine>
 800aca6:	3401      	adds	r4, #1
 800aca8:	2c03      	cmp	r4, #3
 800acaa:	ddf2      	ble.n	800ac92 <UI_Config_SV+0x26>
	// Axes Subdivision Lines
	for (int i = 1; i < 12; i++) BSP_LCD_DrawVLine(60+62*i, 410, 25);
 800acac:	2401      	movs	r4, #1
 800acae:	e00a      	b.n	800acc6 <UI_Config_SV+0x5a>
 800acb0:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
 800acb4:	0058      	lsls	r0, r3, #1
 800acb6:	303c      	adds	r0, #60	; 0x3c
 800acb8:	b280      	uxth	r0, r0
 800acba:	2219      	movs	r2, #25
 800acbc:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800acc0:	f7f6 feda 	bl	8001a78 <BSP_LCD_DrawVLine>
 800acc4:	3401      	adds	r4, #1
 800acc6:	2c0b      	cmp	r4, #11
 800acc8:	ddf2      	ble.n	800acb0 <UI_Config_SV+0x44>
	for (int i = 0; i < 10; i++) BSP_LCD_DrawHLine(48, 49+37*i, 25);
 800acca:	2400      	movs	r4, #0
 800accc:	2c09      	cmp	r4, #9
 800acce:	dc0b      	bgt.n	800ace8 <UI_Config_SV+0x7c>
 800acd0:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800acd4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800acd8:	3131      	adds	r1, #49	; 0x31
 800acda:	2219      	movs	r2, #25
 800acdc:	b289      	uxth	r1, r1
 800acde:	2030      	movs	r0, #48	; 0x30
 800ace0:	f7f6 fea2 	bl	8001a28 <BSP_LCD_DrawHLine>
 800ace4:	3401      	adds	r4, #1
 800ace6:	e7f1      	b.n	800accc <UI_Config_SV+0x60>
}
 800ace8:	bd10      	pop	{r4, pc}
 800acea:	bf00      	nop
 800acec:	ffd3d3d3 	.word	0xffd3d3d3
 800acf0:	200065f0 	.word	0x200065f0
 800acf4:	200060e0 	.word	0x200060e0

0800acf8 <SV_Handler>:
		menu_state = MAIN_MENU_STATE;
	}
}

/* Handle Signal Viewer Display */
void SV_Handler(uint16_t* pData) {
 800acf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (menu_state == SV_MENU_STATE) {
 800acfa:	4b26      	ldr	r3, [pc, #152]	; (800ad94 <SV_Handler+0x9c>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2b02      	cmp	r3, #2
 800ad00:	d000      	beq.n	800ad04 <SV_Handler+0xc>
				avg = 0;
			}
		}
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
	}
}
 800ad02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad04:	4607      	mov	r7, r0
		UI_Config_SV();
 800ad06:	f7ff ffb1 	bl	800ac6c <UI_Config_SV>
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTRED);
 800ad0a:	4823      	ldr	r0, [pc, #140]	; (800ad98 <SV_Handler+0xa0>)
 800ad0c:	f7f6 fe50 	bl	80019b0 <BSP_LCD_SetTextColor>
		for (int i = 0; i < 4096; i++) {
 800ad10:	2600      	movs	r6, #0
		int prev_y = 0;
 800ad12:	4631      	mov	r1, r6
		int avg = 0;
 800ad14:	4633      	mov	r3, r6
		for (int i = 0; i < 4096; i++) {
 800ad16:	e004      	b.n	800ad22 <SV_Handler+0x2a>
				prev_y = axisScaleY-avg;
 800ad18:	4b20      	ldr	r3, [pc, #128]	; (800ad9c <SV_Handler+0xa4>)
 800ad1a:	6819      	ldr	r1, [r3, #0]
 800ad1c:	1b49      	subs	r1, r1, r5
				avg = 0;
 800ad1e:	4623      	mov	r3, r4
		for (int i = 0; i < 4096; i++) {
 800ad20:	3601      	adds	r6, #1
 800ad22:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 800ad26:	da30      	bge.n	800ad8a <SV_Handler+0x92>
			avg += *pData/inverse_scale_factor; // Scale to fit on plot
 800ad28:	f837 2b02 	ldrh.w	r2, [r7], #2
 800ad2c:	481c      	ldr	r0, [pc, #112]	; (800ada0 <SV_Handler+0xa8>)
 800ad2e:	fb80 0202 	smull	r0, r2, r0, r2
 800ad32:	eb03 1322 	add.w	r3, r3, r2, asr #4
			if (i % 6 == 0) {
 800ad36:	4c1b      	ldr	r4, [pc, #108]	; (800ada4 <SV_Handler+0xac>)
 800ad38:	fb84 2406 	smull	r2, r4, r4, r6
 800ad3c:	eba4 74e6 	sub.w	r4, r4, r6, asr #31
 800ad40:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800ad44:	ebb6 0444 	subs.w	r4, r6, r4, lsl #1
 800ad48:	d1ea      	bne.n	800ad20 <SV_Handler+0x28>
				avg /= 6;
 800ad4a:	4d16      	ldr	r5, [pc, #88]	; (800ada4 <SV_Handler+0xac>)
 800ad4c:	fb85 2503 	smull	r2, r5, r5, r3
 800ad50:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
				if (i > 0) BSP_LCD_DrawLine(axisPosX_StartLeft+i/6, axisPosY_StartTop+prev_y,
 800ad54:	2e00      	cmp	r6, #0
 800ad56:	dddf      	ble.n	800ad18 <SV_Handler+0x20>
 800ad58:	4812      	ldr	r0, [pc, #72]	; (800ada4 <SV_Handler+0xac>)
 800ad5a:	fb80 3006 	smull	r3, r0, r0, r6
 800ad5e:	eba0 70e6 	sub.w	r0, r0, r6, asr #31
 800ad62:	4b11      	ldr	r3, [pc, #68]	; (800ada8 <SV_Handler+0xb0>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4418      	add	r0, r3
 800ad68:	b280      	uxth	r0, r0
 800ad6a:	4b10      	ldr	r3, [pc, #64]	; (800adac <SV_Handler+0xb4>)
 800ad6c:	f8b3 c000 	ldrh.w	ip, [r3]
								 axisPosX_StartLeft+i/6+1, axisPosY_StartTop+(axisScaleY-avg));
 800ad70:	4b0a      	ldr	r3, [pc, #40]	; (800ad9c <SV_Handler+0xa4>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	1b5b      	subs	r3, r3, r5
				if (i > 0) BSP_LCD_DrawLine(axisPosX_StartLeft+i/6, axisPosY_StartTop+prev_y,
 800ad76:	fa1c f383 	uxtah	r3, ip, r3
 800ad7a:	1c42      	adds	r2, r0, #1
 800ad7c:	4461      	add	r1, ip
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	b292      	uxth	r2, r2
 800ad82:	b289      	uxth	r1, r1
 800ad84:	f7f7 f930 	bl	8001fe8 <BSP_LCD_DrawLine>
 800ad88:	e7c6      	b.n	800ad18 <SV_Handler+0x20>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800ad8a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800ad8e:	f7f6 fe0f 	bl	80019b0 <BSP_LCD_SetTextColor>
}
 800ad92:	e7b6      	b.n	800ad02 <SV_Handler+0xa>
 800ad94:	20001960 	.word	0x20001960
 800ad98:	ffff8080 	.word	0xffff8080
 800ad9c:	200060e0 	.word	0x200060e0
 800ada0:	2e8ba2e9 	.word	0x2e8ba2e9
 800ada4:	2aaaaaab 	.word	0x2aaaaaab
 800ada8:	200060dc 	.word	0x200060dc
 800adac:	20006348 	.word	0x20006348

0800adb0 <colorConversion>:

//
//
// -- JPEG Functions -----
//
uint8_t *colorConversion(uint8_t *jpeg_addr, uint32_t num_bytes) {
 800adb0:	b530      	push	{r4, r5, lr}
 800adb2:	b085      	sub	sp, #20
 800adb4:	460b      	mov	r3, r1
	uint8_t *raw_out_buf = jpeg_addr + num_bytes;
 800adb6:	1844      	adds	r4, r0, r1
	uint32_t total_raw_data;
	pConvert_Function(jpeg_addr, raw_out_buf, 0, num_bytes, &total_raw_data);
 800adb8:	aa03      	add	r2, sp, #12
 800adba:	9200      	str	r2, [sp, #0]
 800adbc:	4a03      	ldr	r2, [pc, #12]	; (800adcc <colorConversion+0x1c>)
 800adbe:	6815      	ldr	r5, [r2, #0]
 800adc0:	2200      	movs	r2, #0
 800adc2:	4621      	mov	r1, r4
 800adc4:	47a8      	blx	r5

	return raw_out_buf;
}
 800adc6:	4620      	mov	r0, r4
 800adc8:	b005      	add	sp, #20
 800adca:	bd30      	pop	{r4, r5, pc}
 800adcc:	200465f4 	.word	0x200465f4

0800add0 <DMA2D_CopyBuffer>:

void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, JPEG_ConfTypeDef *jpeg_info)
{
 800add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add4:	b087      	sub	sp, #28
 800add6:	9003      	str	r0, [sp, #12]
 800add8:	4688      	mov	r8, r1
 800adda:	4617      	mov	r7, r2
 800addc:	461e      	mov	r6, r3
 800adde:	9d10      	ldr	r5, [sp, #64]	; 0x40
	uint32_t destination = (uint32_t)pDst;
	uint32_t source = (uint32_t)pSrc;

	// DMA2D Clock Enable
	__HAL_RCC_DMA2D_CLK_ENABLE();
 800ade0:	4b2c      	ldr	r3, [pc, #176]	; (800ae94 <DMA2D_CopyBuffer+0xc4>)
 800ade2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ade4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800ade8:	631a      	str	r2, [r3, #48]	; 0x30
 800adea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adf0:	9305      	str	r3, [sp, #20]
 800adf2:	9b05      	ldr	r3, [sp, #20]

	// Width offset calculation (from STM32 examples)
	uint32_t width_offset = 0;
	if(jpeg_info->ChromaSubsampling == JPEG_420_SUBSAMPLING) {
 800adf4:	686b      	ldr	r3, [r5, #4]
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d03e      	beq.n	800ae78 <DMA2D_CopyBuffer+0xa8>
	uint32_t width_offset = 0;
 800adfa:	f04f 0900 	mov.w	r9, #0
		if((jpeg_info->ImageWidth % 16) != 0)
			width_offset = 16 - (jpeg_info->ImageWidth % 16);
	}

	if(jpeg_info->ChromaSubsampling == JPEG_422_SUBSAMPLING) {
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d041      	beq.n	800ae86 <DMA2D_CopyBuffer+0xb6>
		if((jpeg_info->ImageWidth % 16) != 0)
			width_offset = 16 - (jpeg_info->ImageWidth % 16);
	}

	if(jpeg_info->ChromaSubsampling == JPEG_444_SUBSAMPLING) {
 800ae02:	b92b      	cbnz	r3, 800ae10 <DMA2D_CopyBuffer+0x40>
		if((jpeg_info->ImageWidth % 8) != 0)
 800ae04:	68eb      	ldr	r3, [r5, #12]
 800ae06:	f013 0307 	ands.w	r3, r3, #7
 800ae0a:	d001      	beq.n	800ae10 <DMA2D_CopyBuffer+0x40>
			width_offset = 8 - (jpeg_info->ImageWidth % 8);
 800ae0c:	f1c3 0908 	rsb	r9, r3, #8
	}

	/*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
	hdma2d.Instance 		  = DMA2D;
 800ae10:	4c21      	ldr	r4, [pc, #132]	; (800ae98 <DMA2D_CopyBuffer+0xc8>)
 800ae12:	4b22      	ldr	r3, [pc, #136]	; (800ae9c <DMA2D_CopyBuffer+0xcc>)
 800ae14:	6023      	str	r3, [r4, #0]
	hdma2d.Init.Mode          = DMA2D_M2M_PFC;
 800ae16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ae1a:	6063      	str	r3, [r4, #4]
	hdma2d.Init.ColorMode     = DMA2D_OUTPUT_ARGB8888;
 800ae1c:	f04f 0b00 	mov.w	fp, #0
 800ae20:	f8c4 b008 	str.w	fp, [r4, #8]
	hdma2d.Init.OutputOffset  = BSP_LCD_GetXSize() - jpeg_info->ImageWidth;
 800ae24:	f7f6 fd74 	bl	8001910 <BSP_LCD_GetXSize>
 800ae28:	68eb      	ldr	r3, [r5, #12]
 800ae2a:	1ac0      	subs	r0, r0, r3
 800ae2c:	60e0      	str	r0, [r4, #12]

	/*##-2- Foreground Configuration ###########################################*/
	hdma2d.LayerCfg[1].AlphaMode 		= DMA2D_REPLACE_ALPHA;
 800ae2e:	f04f 0a01 	mov.w	sl, #1
 800ae32:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
	hdma2d.LayerCfg[1].InputAlpha 		= 0xFF;
 800ae36:	23ff      	movs	r3, #255	; 0xff
 800ae38:	6463      	str	r3, [r4, #68]	; 0x44
	hdma2d.LayerCfg[1].InputColorMode 	= DMA2D_INPUT_ARGB8888;
 800ae3a:	f8c4 b03c 	str.w	fp, [r4, #60]	; 0x3c
	hdma2d.LayerCfg[1].InputOffset 		= width_offset;
 800ae3e:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38

	/* DMA2D Initialization */
	HAL_DMA2D_Init(&hdma2d);
 800ae42:	4620      	mov	r0, r4
 800ae44:	f7f9 fa70 	bl	8004328 <HAL_DMA2D_Init>

	/* DMA2D Config Layer */
	HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 800ae48:	4651      	mov	r1, sl
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f7f9 fb62 	bl	8004514 <HAL_DMA2D_ConfigLayer>

	/* DMA2D Start */
	HAL_DMA2D_Start(&hdma2d, source, destination + ((y * BSP_LCD_GetXSize() + x) * 4),
 800ae50:	f7f6 fd5e 	bl	8001910 <BSP_LCD_GetXSize>
 800ae54:	fb00 7206 	mla	r2, r0, r6, r7
 800ae58:	68ab      	ldr	r3, [r5, #8]
 800ae5a:	9300      	str	r3, [sp, #0]
 800ae5c:	68eb      	ldr	r3, [r5, #12]
 800ae5e:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 800ae62:	9903      	ldr	r1, [sp, #12]
 800ae64:	4620      	mov	r0, r4
 800ae66:	f7f9 fa99 	bl	800439c <HAL_DMA2D_Start>
					jpeg_info->ImageWidth, jpeg_info->ImageHeight);

	/* DMA2D Poll for Transfer */
	HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 800ae6a:	210a      	movs	r1, #10
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f7f9 fab1 	bl	80043d4 <HAL_DMA2D_PollForTransfer>
}
 800ae72:	b007      	add	sp, #28
 800ae74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if((jpeg_info->ImageWidth % 16) != 0)
 800ae78:	68ea      	ldr	r2, [r5, #12]
 800ae7a:	f012 090f 	ands.w	r9, r2, #15
 800ae7e:	d0be      	beq.n	800adfe <DMA2D_CopyBuffer+0x2e>
			width_offset = 16 - (jpeg_info->ImageWidth % 16);
 800ae80:	f1c9 0910 	rsb	r9, r9, #16
 800ae84:	e7bb      	b.n	800adfe <DMA2D_CopyBuffer+0x2e>
		if((jpeg_info->ImageWidth % 16) != 0)
 800ae86:	68ea      	ldr	r2, [r5, #12]
 800ae88:	f012 020f 	ands.w	r2, r2, #15
 800ae8c:	d0b9      	beq.n	800ae02 <DMA2D_CopyBuffer+0x32>
			width_offset = 16 - (jpeg_info->ImageWidth % 16);
 800ae8e:	f1c2 0910 	rsb	r9, r2, #16
 800ae92:	e7b6      	b.n	800ae02 <DMA2D_CopyBuffer+0x32>
 800ae94:	40023800 	.word	0x40023800
 800ae98:	200466b8 	.word	0x200466b8
 800ae9c:	4002b000 	.word	0x4002b000

0800aea0 <displayJPEG>:
void displayJPEG(char* fileName, uint32_t xPos, uint32_t yPos) {
 800aea0:	b570      	push	{r4, r5, r6, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	4606      	mov	r6, r0
 800aea6:	460c      	mov	r4, r1
 800aea8:	4615      	mov	r5, r2
	f_opendir(&dir, path);
 800aeaa:	4b1b      	ldr	r3, [pc, #108]	; (800af18 <displayJPEG+0x78>)
 800aeac:	6819      	ldr	r1, [r3, #0]
 800aeae:	481b      	ldr	r0, [pc, #108]	; (800af1c <displayJPEG+0x7c>)
 800aeb0:	f7f8 fe14 	bl	8003adc <f_opendir>
	if (f_open(&file, (TCHAR*)fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE) == FR_OK) {
 800aeb4:	2213      	movs	r2, #19
 800aeb6:	4631      	mov	r1, r6
 800aeb8:	4819      	ldr	r0, [pc, #100]	; (800af20 <displayJPEG+0x80>)
 800aeba:	f7f8 fc15 	bl	80036e8 <f_open>
 800aebe:	b318      	cbz	r0, 800af08 <displayJPEG+0x68>
	HAL_JPEG_Decode_IT(&hjpeg, (uint8_t*)jpeg_input_buffer, JPEG_BUFFER_SIZE,
 800aec0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aec4:	9200      	str	r2, [sp, #0]
 800aec6:	4b14      	ldr	r3, [pc, #80]	; (800af18 <displayJPEG+0x78>)
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	4916      	ldr	r1, [pc, #88]	; (800af24 <displayJPEG+0x84>)
 800aecc:	4816      	ldr	r0, [pc, #88]	; (800af28 <displayJPEG+0x88>)
 800aece:	f7fa ff32 	bl	8005d36 <HAL_JPEG_Decode_IT>
	while (JPEG_DECODE_COMPLETE == 0); // Wait for Decode Completion
 800aed2:	4b16      	ldr	r3, [pc, #88]	; (800af2c <displayJPEG+0x8c>)
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d0fb      	beq.n	800aed2 <displayJPEG+0x32>
	JPEG_DECODE_COMPLETE = 0;
 800aeda:	4b14      	ldr	r3, [pc, #80]	; (800af2c <displayJPEG+0x8c>)
 800aedc:	2200      	movs	r2, #0
 800aede:	605a      	str	r2, [r3, #4]
	HAL_JPEG_GetInfo(&hjpeg, &jpeg_info);
 800aee0:	4e13      	ldr	r6, [pc, #76]	; (800af30 <displayJPEG+0x90>)
 800aee2:	4631      	mov	r1, r6
 800aee4:	4810      	ldr	r0, [pc, #64]	; (800af28 <displayJPEG+0x88>)
 800aee6:	f7fa febd 	bl	8005c64 <HAL_JPEG_GetInfo>
	uint8_t *raw_output = colorConversion((uint8_t *)jpeg_output_buffer, JPEG_BUFFER_SIZE);
 800aeea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800aeee:	4b0a      	ldr	r3, [pc, #40]	; (800af18 <displayJPEG+0x78>)
 800aef0:	6858      	ldr	r0, [r3, #4]
 800aef2:	f7ff ff5d 	bl	800adb0 <colorConversion>
	DMA2D_CopyBuffer((uint32_t *)raw_output, (uint32_t *)LCD_FRAME_BUFFER,
 800aef6:	9600      	str	r6, [sp, #0]
 800aef8:	b2ab      	uxth	r3, r5
 800aefa:	b2a2      	uxth	r2, r4
 800aefc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800af00:	f7ff ff66 	bl	800add0 <DMA2D_CopyBuffer>
}
 800af04:	b002      	add	sp, #8
 800af06:	bd70      	pop	{r4, r5, r6, pc}
		f_read(&file, jpeg_input_buffer, JPEG_BUFFER_SIZE, &br);
 800af08:	4b0a      	ldr	r3, [pc, #40]	; (800af34 <displayJPEG+0x94>)
 800af0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800af0e:	4905      	ldr	r1, [pc, #20]	; (800af24 <displayJPEG+0x84>)
 800af10:	4803      	ldr	r0, [pc, #12]	; (800af20 <displayJPEG+0x80>)
 800af12:	f7f8 fd01 	bl	8003918 <f_read>
 800af16:	e7d3      	b.n	800aec0 <displayJPEG+0x20>
 800af18:	20000090 	.word	0x20000090
 800af1c:	20046600 	.word	0x20046600
 800af20:	2000635c 	.word	0x2000635c
 800af24:	200065f4 	.word	0x200065f4
 800af28:	20006594 	.word	0x20006594
 800af2c:	20001960 	.word	0x20001960
 800af30:	20006330 	.word	0x20006330
 800af34:	20006350 	.word	0x20006350

0800af38 <UI_Config_Main>:
void UI_Config_Main() {
 800af38:	b538      	push	{r3, r4, r5, lr}
	BSP_LCD_Clear(LCD_COLOR_LIGHTGRAY);
 800af3a:	4826      	ldr	r0, [pc, #152]	; (800afd4 <UI_Config_Main+0x9c>)
 800af3c:	f7f6 fd56 	bl	80019ec <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800af40:	f04f 30ff 	mov.w	r0, #4294967295
 800af44:	f7f6 fd34 	bl	80019b0 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(iconPosX_FX, iconPosY_SV, iconSize, iconSize);
 800af48:	4c23      	ldr	r4, [pc, #140]	; (800afd8 <UI_Config_Main+0xa0>)
 800af4a:	8822      	ldrh	r2, [r4, #0]
 800af4c:	4d23      	ldr	r5, [pc, #140]	; (800afdc <UI_Config_Main+0xa4>)
 800af4e:	4613      	mov	r3, r2
 800af50:	8829      	ldrh	r1, [r5, #0]
 800af52:	4823      	ldr	r0, [pc, #140]	; (800afe0 <UI_Config_Main+0xa8>)
 800af54:	8800      	ldrh	r0, [r0, #0]
 800af56:	f7f6 fdd3 	bl	8001b00 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(iconPosX_SV, iconPosY_SV, iconSize, iconSize);
 800af5a:	8822      	ldrh	r2, [r4, #0]
 800af5c:	4613      	mov	r3, r2
 800af5e:	8829      	ldrh	r1, [r5, #0]
 800af60:	4820      	ldr	r0, [pc, #128]	; (800afe4 <UI_Config_Main+0xac>)
 800af62:	8800      	ldrh	r0, [r0, #0]
 800af64:	f7f6 fdcc 	bl	8001b00 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800af68:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800af6c:	f7f6 fd20 	bl	80019b0 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(650, ySize_LCD/2 + 3*iconSize/4,
 800af70:	4d1d      	ldr	r5, [pc, #116]	; (800afe8 <UI_Config_Main+0xb0>)
 800af72:	682a      	ldr	r2, [r5, #0]
 800af74:	6821      	ldr	r1, [r4, #0]
 800af76:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800af7a:	0889      	lsrs	r1, r1, #2
 800af7c:	eb01 0152 	add.w	r1, r1, r2, lsr #1
 800af80:	2301      	movs	r3, #1
 800af82:	4a1a      	ldr	r2, [pc, #104]	; (800afec <UI_Config_Main+0xb4>)
 800af84:	b289      	uxth	r1, r1
 800af86:	f240 208a 	movw	r0, #650	; 0x28a
 800af8a:	f7f6 ffcf 	bl	8001f2c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(150, ySize_LCD/2 + 3*iconSize/4,
 800af8e:	682a      	ldr	r2, [r5, #0]
 800af90:	6821      	ldr	r1, [r4, #0]
 800af92:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800af96:	0889      	lsrs	r1, r1, #2
 800af98:	eb01 0152 	add.w	r1, r1, r2, lsr #1
 800af9c:	2301      	movs	r3, #1
 800af9e:	4a14      	ldr	r2, [pc, #80]	; (800aff0 <UI_Config_Main+0xb8>)
 800afa0:	b289      	uxth	r1, r1
 800afa2:	2096      	movs	r0, #150	; 0x96
 800afa4:	f7f6 ffc2 	bl	8001f2c <BSP_LCD_DisplayStringAt>
	if (SD_CARD_ENABLED == 1) {
 800afa8:	4b12      	ldr	r3, [pc, #72]	; (800aff4 <UI_Config_Main+0xbc>)
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	2b01      	cmp	r3, #1
 800afae:	d000      	beq.n	800afb2 <UI_Config_Main+0x7a>
}
 800afb0:	bd38      	pop	{r3, r4, r5, pc}
		displayJPEG(iconName_SV, iconPosX_SV, iconPosY_SV); // Signal Viewer
 800afb2:	4c11      	ldr	r4, [pc, #68]	; (800aff8 <UI_Config_Main+0xc0>)
 800afb4:	4b09      	ldr	r3, [pc, #36]	; (800afdc <UI_Config_Main+0xa4>)
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	4b0a      	ldr	r3, [pc, #40]	; (800afe4 <UI_Config_Main+0xac>)
 800afba:	6819      	ldr	r1, [r3, #0]
 800afbc:	68a0      	ldr	r0, [r4, #8]
 800afbe:	f7ff ff6f 	bl	800aea0 <displayJPEG>
		displayJPEG(iconName_FX, iconPosX_FX, iconPosY_FX); // Sound Effects
 800afc2:	4b0e      	ldr	r3, [pc, #56]	; (800affc <UI_Config_Main+0xc4>)
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	4b06      	ldr	r3, [pc, #24]	; (800afe0 <UI_Config_Main+0xa8>)
 800afc8:	6819      	ldr	r1, [r3, #0]
 800afca:	68e0      	ldr	r0, [r4, #12]
 800afcc:	f7ff ff68 	bl	800aea0 <displayJPEG>
}
 800afd0:	e7ee      	b.n	800afb0 <UI_Config_Main+0x78>
 800afd2:	bf00      	nop
 800afd4:	ffd3d3d3 	.word	0xffd3d3d3
 800afd8:	20006344 	.word	0x20006344
 800afdc:	200466b4 	.word	0x200466b4
 800afe0:	200465fc 	.word	0x200465fc
 800afe4:	20006354 	.word	0x20006354
 800afe8:	20046720 	.word	0x20046720
 800afec:	0801126c 	.word	0x0801126c
 800aff0:	0801127c 	.word	0x0801127c
 800aff4:	20001960 	.word	0x20001960
 800aff8:	20000090 	.word	0x20000090
 800affc:	20006590 	.word	0x20006590

0800b000 <UI_Init>:
void UI_Init() {
 800b000:	b570      	push	{r4, r5, r6, lr}
 800b002:	b082      	sub	sp, #8
	if (FATFS_LinkDriver(&SD_Driver, path) == 0) {
 800b004:	4b58      	ldr	r3, [pc, #352]	; (800b168 <UI_Init+0x168>)
 800b006:	6819      	ldr	r1, [r3, #0]
 800b008:	4858      	ldr	r0, [pc, #352]	; (800b16c <UI_Init+0x16c>)
 800b00a:	f7f8 fdd1 	bl	8003bb0 <FATFS_LinkDriver>
 800b00e:	2800      	cmp	r0, #0
 800b010:	f000 8095 	beq.w	800b13e <UI_Init+0x13e>
    BSP_LCD_Init();
 800b014:	f7f6 fee6 	bl	8001de4 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER);
 800b018:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800b01c:	2000      	movs	r0, #0
 800b01e:	f7f6 fc83 	bl	8001928 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 800b022:	2000      	movs	r0, #0
 800b024:	f7f6 fcbe 	bl	80019a4 <BSP_LCD_SelectLayer>
	BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGRAY);
 800b028:	4851      	ldr	r0, [pc, #324]	; (800b170 <UI_Init+0x170>)
 800b02a:	f7f6 fccb 	bl	80019c4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800b02e:	f04f 30ff 	mov.w	r0, #4294967295
 800b032:	f7f6 fcbd 	bl	80019b0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 800b036:	484f      	ldr	r0, [pc, #316]	; (800b174 <UI_Init+0x174>)
 800b038:	f7f6 fcce 	bl	80019d8 <BSP_LCD_SetFont>
	xSize_LCD = BSP_LCD_GetXSize(); // 800 pixels
 800b03c:	f7f6 fc68 	bl	8001910 <BSP_LCD_GetXSize>
 800b040:	4c4d      	ldr	r4, [pc, #308]	; (800b178 <UI_Init+0x178>)
 800b042:	6020      	str	r0, [r4, #0]
	ySize_LCD = BSP_LCD_GetYSize(); // 480 pixels
 800b044:	f7f6 fc6a 	bl	800191c <BSP_LCD_GetYSize>
 800b048:	4b4c      	ldr	r3, [pc, #304]	; (800b17c <UI_Init+0x17c>)
 800b04a:	6018      	str	r0, [r3, #0]
	iconSize = xSize_LCD/8; // 100 pixels
 800b04c:	6823      	ldr	r3, [r4, #0]
 800b04e:	08da      	lsrs	r2, r3, #3
 800b050:	494b      	ldr	r1, [pc, #300]	; (800b180 <UI_Init+0x180>)
 800b052:	600a      	str	r2, [r1, #0]
	iconPosX_FX = xSize_LCD/4;
 800b054:	089d      	lsrs	r5, r3, #2
 800b056:	494b      	ldr	r1, [pc, #300]	; (800b184 <UI_Init+0x184>)
 800b058:	600d      	str	r5, [r1, #0]
	iconPosY_FX = ySize_LCD/2-iconSize/2;
 800b05a:	091c      	lsrs	r4, r3, #4
 800b05c:	ebc4 0450 	rsb	r4, r4, r0, lsr #1
 800b060:	4949      	ldr	r1, [pc, #292]	; (800b188 <UI_Init+0x188>)
 800b062:	600c      	str	r4, [r1, #0]
	iconPosX_SV = 5*xSize_LCD/8;
 800b064:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800b068:	08c9      	lsrs	r1, r1, #3
 800b06a:	4e48      	ldr	r6, [pc, #288]	; (800b18c <UI_Init+0x18c>)
 800b06c:	6031      	str	r1, [r6, #0]
	iconPosY_SV = ySize_LCD/2-iconSize/2;
 800b06e:	4e48      	ldr	r6, [pc, #288]	; (800b190 <UI_Init+0x190>)
 800b070:	6034      	str	r4, [r6, #0]
	iconPosX_FX1 = xSize_LCD/4;
 800b072:	4c48      	ldr	r4, [pc, #288]	; (800b194 <UI_Init+0x194>)
 800b074:	6025      	str	r5, [r4, #0]
	iconPosY_FX1 = ySize_LCD/4-iconSize/4;
 800b076:	095b      	lsrs	r3, r3, #5
 800b078:	ebc3 0390 	rsb	r3, r3, r0, lsr #2
 800b07c:	4c46      	ldr	r4, [pc, #280]	; (800b198 <UI_Init+0x198>)
 800b07e:	6023      	str	r3, [r4, #0]
	iconPosX_FX2 = 5*xSize_LCD/8;
 800b080:	4c46      	ldr	r4, [pc, #280]	; (800b19c <UI_Init+0x19c>)
 800b082:	6021      	str	r1, [r4, #0]
	iconPosY_FX2 = iconPosY_FX1;
 800b084:	4c46      	ldr	r4, [pc, #280]	; (800b1a0 <UI_Init+0x1a0>)
 800b086:	6023      	str	r3, [r4, #0]
	iconPosX_FX3 = iconPosX_FX1;
 800b088:	4b46      	ldr	r3, [pc, #280]	; (800b1a4 <UI_Init+0x1a4>)
 800b08a:	601d      	str	r5, [r3, #0]
	iconPosY_FX3 = 3*ySize_LCD/4-3*iconSize/4;
 800b08c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800b090:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b094:	0892      	lsrs	r2, r2, #2
 800b096:	ebc2 0290 	rsb	r2, r2, r0, lsr #2
 800b09a:	4b43      	ldr	r3, [pc, #268]	; (800b1a8 <UI_Init+0x1a8>)
 800b09c:	601a      	str	r2, [r3, #0]
	iconPosX_FX4 = iconPosX_FX2;
 800b09e:	4b43      	ldr	r3, [pc, #268]	; (800b1ac <UI_Init+0x1ac>)
 800b0a0:	6019      	str	r1, [r3, #0]
	iconPosY_FX4 = iconPosY_FX3;
 800b0a2:	4b43      	ldr	r3, [pc, #268]	; (800b1b0 <UI_Init+0x1b0>)
 800b0a4:	601a      	str	r2, [r3, #0]
	axisPosX_StartLeft = 59;
 800b0a6:	233b      	movs	r3, #59	; 0x3b
 800b0a8:	4a42      	ldr	r2, [pc, #264]	; (800b1b4 <UI_Init+0x1b4>)
 800b0aa:	6013      	str	r3, [r2, #0]
	axisPosY_StartTop = 59;
 800b0ac:	4a42      	ldr	r2, [pc, #264]	; (800b1b8 <UI_Init+0x1b8>)
 800b0ae:	6013      	str	r3, [r2, #0]
	axisScaleX = 684;
 800b0b0:	4b42      	ldr	r3, [pc, #264]	; (800b1bc <UI_Init+0x1bc>)
 800b0b2:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 800b0b6:	601a      	str	r2, [r3, #0]
	axisScaleY = 362;
 800b0b8:	4b41      	ldr	r3, [pc, #260]	; (800b1c0 <UI_Init+0x1c0>)
 800b0ba:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800b0be:	601a      	str	r2, [r3, #0]
	__HAL_RCC_JPEG_CLK_ENABLE(); // Enable CLK
 800b0c0:	4c40      	ldr	r4, [pc, #256]	; (800b1c4 <UI_Init+0x1c4>)
 800b0c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0c4:	f043 0302 	orr.w	r3, r3, #2
 800b0c8:	6363      	str	r3, [r4, #52]	; 0x34
 800b0ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0cc:	f003 0302 	and.w	r3, r3, #2
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	9b00      	ldr	r3, [sp, #0]
	hjpeg.Instance = JPEG;
 800b0d4:	483c      	ldr	r0, [pc, #240]	; (800b1c8 <UI_Init+0x1c8>)
 800b0d6:	4b3d      	ldr	r3, [pc, #244]	; (800b1cc <UI_Init+0x1cc>)
 800b0d8:	6003      	str	r3, [r0, #0]
	HAL_JPEG_Init(&hjpeg); // Initialize
 800b0da:	f7fa fd6d 	bl	8005bb8 <HAL_JPEG_Init>
	HAL_NVIC_SetPriority(JPEG_IRQn, 7, 15); // Enable Interrupts
 800b0de:	220f      	movs	r2, #15
 800b0e0:	2107      	movs	r1, #7
 800b0e2:	206c      	movs	r0, #108	; 0x6c
 800b0e4:	f7f8 fe36 	bl	8003d54 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800b0e8:	206c      	movs	r0, #108	; 0x6c
 800b0ea:	f7f8 fe65 	bl	8003db8 <HAL_NVIC_EnableIRQ>
	UI_Config_Main();
 800b0ee:	f7ff ff23 	bl	800af38 <UI_Config_Main>
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800b0f2:	f7f6 fc0d 	bl	8001910 <BSP_LCD_GetXSize>
 800b0f6:	4605      	mov	r5, r0
 800b0f8:	f7f6 fc10 	bl	800191c <BSP_LCD_GetYSize>
 800b0fc:	b281      	uxth	r1, r0
 800b0fe:	b2a8      	uxth	r0, r5
 800b100:	f7f7 faa6 	bl	8002650 <BSP_TS_Init>
	__HAL_RCC_GPIOA_CLK_ENABLE(); // Enable CLK
 800b104:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b106:	f043 0301 	orr.w	r3, r3, #1
 800b10a:	6323      	str	r3, [r4, #48]	; 0x30
 800b10c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b10e:	f003 0301 	and.w	r3, r3, #1
 800b112:	9301      	str	r3, [sp, #4]
 800b114:	9b01      	ldr	r3, [sp, #4]
	hgpio.Pin = GPIO_PIN_0;
 800b116:	492e      	ldr	r1, [pc, #184]	; (800b1d0 <UI_Init+0x1d0>)
 800b118:	2301      	movs	r3, #1
 800b11a:	600b      	str	r3, [r1, #0]
	hgpio.Mode = GPIO_MODE_INPUT;
 800b11c:	2300      	movs	r3, #0
 800b11e:	604b      	str	r3, [r1, #4]
	hgpio.Pull = GPIO_PULLDOWN;
 800b120:	2302      	movs	r3, #2
 800b122:	608b      	str	r3, [r1, #8]
	HAL_GPIO_Init(GPIOA, &hgpio); // Initialize
 800b124:	482b      	ldr	r0, [pc, #172]	; (800b1d4 <UI_Init+0x1d4>)
 800b126:	f7f9 fd6b 	bl	8004c00 <HAL_GPIO_Init>
	printf("\033[2J\033[;H\033c");
 800b12a:	482b      	ldr	r0, [pc, #172]	; (800b1d8 <UI_Init+0x1d8>)
 800b12c:	f000 fee8 	bl	800bf00 <iprintf>
	fflush(stdout);
 800b130:	4b2a      	ldr	r3, [pc, #168]	; (800b1dc <UI_Init+0x1dc>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	6898      	ldr	r0, [r3, #8]
 800b136:	f000 fcf3 	bl	800bb20 <fflush>
}
 800b13a:	b002      	add	sp, #8
 800b13c:	bd70      	pop	{r4, r5, r6, pc}
		if (f_mount(&fs, path, 1) == FR_OK) {
 800b13e:	2201      	movs	r2, #1
 800b140:	4b09      	ldr	r3, [pc, #36]	; (800b168 <UI_Init+0x168>)
 800b142:	6819      	ldr	r1, [r3, #0]
 800b144:	4826      	ldr	r0, [pc, #152]	; (800b1e0 <UI_Init+0x1e0>)
 800b146:	f7f8 fa9d 	bl	8003684 <f_mount>
 800b14a:	2800      	cmp	r0, #0
 800b14c:	f47f af62 	bne.w	800b014 <UI_Init+0x14>
			if (f_opendir(&dir, path) == FR_OK) {
 800b150:	4b05      	ldr	r3, [pc, #20]	; (800b168 <UI_Init+0x168>)
 800b152:	6819      	ldr	r1, [r3, #0]
 800b154:	4823      	ldr	r0, [pc, #140]	; (800b1e4 <UI_Init+0x1e4>)
 800b156:	f7f8 fcc1 	bl	8003adc <f_opendir>
 800b15a:	2800      	cmp	r0, #0
 800b15c:	f47f af5a 	bne.w	800b014 <UI_Init+0x14>
				SD_CARD_ENABLED = 1;
 800b160:	4b21      	ldr	r3, [pc, #132]	; (800b1e8 <UI_Init+0x1e8>)
 800b162:	2201      	movs	r2, #1
 800b164:	609a      	str	r2, [r3, #8]
 800b166:	e755      	b.n	800b014 <UI_Init+0x14>
 800b168:	20000090 	.word	0x20000090
 800b16c:	080109d0 	.word	0x080109d0
 800b170:	ffd3d3d3 	.word	0xffd3d3d3
 800b174:	20000060 	.word	0x20000060
 800b178:	200060d4 	.word	0x200060d4
 800b17c:	20046720 	.word	0x20046720
 800b180:	20006344 	.word	0x20006344
 800b184:	200465fc 	.word	0x200465fc
 800b188:	20006590 	.word	0x20006590
 800b18c:	20006354 	.word	0x20006354
 800b190:	200466b4 	.word	0x200466b4
 800b194:	2000632c 	.word	0x2000632c
 800b198:	200465f8 	.word	0x200465f8
 800b19c:	2004671c 	.word	0x2004671c
 800b1a0:	2000634c 	.word	0x2000634c
 800b1a4:	200065ec 	.word	0x200065ec
 800b1a8:	20006358 	.word	0x20006358
 800b1ac:	2000658c 	.word	0x2000658c
 800b1b0:	200060d8 	.word	0x200060d8
 800b1b4:	200060dc 	.word	0x200060dc
 800b1b8:	20006348 	.word	0x20006348
 800b1bc:	200065f0 	.word	0x200065f0
 800b1c0:	200060e0 	.word	0x200060e0
 800b1c4:	40023800 	.word	0x40023800
 800b1c8:	20006594 	.word	0x20006594
 800b1cc:	50051000 	.word	0x50051000
 800b1d0:	20046724 	.word	0x20046724
 800b1d4:	40020000 	.word	0x40020000
 800b1d8:	0801128c 	.word	0x0801128c
 800b1dc:	200000b4 	.word	0x200000b4
 800b1e0:	200060fc 	.word	0x200060fc
 800b1e4:	20046600 	.word	0x20046600
 800b1e8:	20001960 	.word	0x20001960

0800b1ec <Button_Handler>:
void Button_Handler() {
 800b1ec:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && menu_state != MAIN_MENU_STATE) {
 800b1ee:	2101      	movs	r1, #1
 800b1f0:	4807      	ldr	r0, [pc, #28]	; (800b210 <Button_Handler+0x24>)
 800b1f2:	f7f9 fdf5 	bl	8004de0 <HAL_GPIO_ReadPin>
 800b1f6:	2801      	cmp	r0, #1
 800b1f8:	d000      	beq.n	800b1fc <Button_Handler+0x10>
}
 800b1fa:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && menu_state != MAIN_MENU_STATE) {
 800b1fc:	4b05      	ldr	r3, [pc, #20]	; (800b214 <Button_Handler+0x28>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d0fa      	beq.n	800b1fa <Button_Handler+0xe>
		UI_Config_Main(); // Return to Main Menu on Button Press (if outside of main menu)
 800b204:	f7ff fe98 	bl	800af38 <UI_Config_Main>
		menu_state = MAIN_MENU_STATE;
 800b208:	4b02      	ldr	r3, [pc, #8]	; (800b214 <Button_Handler+0x28>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	601a      	str	r2, [r3, #0]
}
 800b20e:	e7f4      	b.n	800b1fa <Button_Handler+0xe>
 800b210:	40020000 	.word	0x40020000
 800b214:	20001960 	.word	0x20001960

0800b218 <UI_Config_FX>:
void UI_Config_FX() {
 800b218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BSP_LCD_Clear(LCD_COLOR_LIGHTGRAY);
 800b21c:	483e      	ldr	r0, [pc, #248]	; (800b318 <UI_Config_FX+0x100>)
 800b21e:	f7f6 fbe5 	bl	80019ec <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800b222:	f04f 30ff 	mov.w	r0, #4294967295
 800b226:	f7f6 fbc3 	bl	80019b0 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(iconPosX_FX1, iconPosY_FX1, iconSize, iconSize);
 800b22a:	4c3c      	ldr	r4, [pc, #240]	; (800b31c <UI_Config_FX+0x104>)
 800b22c:	8822      	ldrh	r2, [r4, #0]
 800b22e:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800b354 <UI_Config_FX+0x13c>
 800b232:	4613      	mov	r3, r2
 800b234:	f8b8 1000 	ldrh.w	r1, [r8]
 800b238:	4839      	ldr	r0, [pc, #228]	; (800b320 <UI_Config_FX+0x108>)
 800b23a:	8800      	ldrh	r0, [r0, #0]
 800b23c:	f7f6 fc60 	bl	8001b00 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(iconPosX_FX2, iconPosY_FX2, iconSize, iconSize);
 800b240:	8822      	ldrh	r2, [r4, #0]
 800b242:	4f38      	ldr	r7, [pc, #224]	; (800b324 <UI_Config_FX+0x10c>)
 800b244:	4613      	mov	r3, r2
 800b246:	8839      	ldrh	r1, [r7, #0]
 800b248:	4837      	ldr	r0, [pc, #220]	; (800b328 <UI_Config_FX+0x110>)
 800b24a:	8800      	ldrh	r0, [r0, #0]
 800b24c:	f7f6 fc58 	bl	8001b00 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(iconPosX_FX3, iconPosY_FX3, iconSize, iconSize);
 800b250:	8822      	ldrh	r2, [r4, #0]
 800b252:	4e36      	ldr	r6, [pc, #216]	; (800b32c <UI_Config_FX+0x114>)
 800b254:	4613      	mov	r3, r2
 800b256:	8831      	ldrh	r1, [r6, #0]
 800b258:	4835      	ldr	r0, [pc, #212]	; (800b330 <UI_Config_FX+0x118>)
 800b25a:	8800      	ldrh	r0, [r0, #0]
 800b25c:	f7f6 fc50 	bl	8001b00 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(iconPosX_FX4, iconPosY_FX4, iconSize, iconSize);
 800b260:	8822      	ldrh	r2, [r4, #0]
 800b262:	4d34      	ldr	r5, [pc, #208]	; (800b334 <UI_Config_FX+0x11c>)
 800b264:	4613      	mov	r3, r2
 800b266:	8829      	ldrh	r1, [r5, #0]
 800b268:	4833      	ldr	r0, [pc, #204]	; (800b338 <UI_Config_FX+0x120>)
 800b26a:	8800      	ldrh	r0, [r0, #0]
 800b26c:	f7f6 fc48 	bl	8001b00 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800b270:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800b274:	f7f6 fb9c 	bl	80019b0 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(650, iconPosY_FX1+iconSize+20, (uint8_t *)"FX1", CENTER_MODE);
 800b278:	f8d8 1000 	ldr.w	r1, [r8]
 800b27c:	6823      	ldr	r3, [r4, #0]
 800b27e:	4419      	add	r1, r3
 800b280:	b289      	uxth	r1, r1
 800b282:	3114      	adds	r1, #20
 800b284:	2301      	movs	r3, #1
 800b286:	4a2d      	ldr	r2, [pc, #180]	; (800b33c <UI_Config_FX+0x124>)
 800b288:	b289      	uxth	r1, r1
 800b28a:	f240 208a 	movw	r0, #650	; 0x28a
 800b28e:	f7f6 fe4d 	bl	8001f2c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(150, iconPosY_FX2+iconSize+20, (uint8_t *)"FX2", CENTER_MODE);
 800b292:	6839      	ldr	r1, [r7, #0]
 800b294:	6823      	ldr	r3, [r4, #0]
 800b296:	4419      	add	r1, r3
 800b298:	b289      	uxth	r1, r1
 800b29a:	3114      	adds	r1, #20
 800b29c:	2301      	movs	r3, #1
 800b29e:	4a28      	ldr	r2, [pc, #160]	; (800b340 <UI_Config_FX+0x128>)
 800b2a0:	b289      	uxth	r1, r1
 800b2a2:	2096      	movs	r0, #150	; 0x96
 800b2a4:	f7f6 fe42 	bl	8001f2c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(650, iconPosY_FX3+iconSize+20, (uint8_t *)"FX3", CENTER_MODE);
 800b2a8:	6831      	ldr	r1, [r6, #0]
 800b2aa:	6823      	ldr	r3, [r4, #0]
 800b2ac:	4419      	add	r1, r3
 800b2ae:	b289      	uxth	r1, r1
 800b2b0:	3114      	adds	r1, #20
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	4a23      	ldr	r2, [pc, #140]	; (800b344 <UI_Config_FX+0x12c>)
 800b2b6:	b289      	uxth	r1, r1
 800b2b8:	f240 208a 	movw	r0, #650	; 0x28a
 800b2bc:	f7f6 fe36 	bl	8001f2c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(150, iconPosY_FX4+iconSize+20, (uint8_t *)"FX4", CENTER_MODE);
 800b2c0:	6829      	ldr	r1, [r5, #0]
 800b2c2:	6823      	ldr	r3, [r4, #0]
 800b2c4:	4419      	add	r1, r3
 800b2c6:	b289      	uxth	r1, r1
 800b2c8:	3114      	adds	r1, #20
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	4a1e      	ldr	r2, [pc, #120]	; (800b348 <UI_Config_FX+0x130>)
 800b2ce:	b289      	uxth	r1, r1
 800b2d0:	2096      	movs	r0, #150	; 0x96
 800b2d2:	f7f6 fe2b 	bl	8001f2c <BSP_LCD_DisplayStringAt>
	if (SD_CARD_ENABLED == 1) {
 800b2d6:	4b1d      	ldr	r3, [pc, #116]	; (800b34c <UI_Config_FX+0x134>)
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d001      	beq.n	800b2e2 <UI_Config_FX+0xca>
}
 800b2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		displayJPEG(iconName_FX1, iconPosX_FX1, iconPosY_FX1);
 800b2e2:	4c1b      	ldr	r4, [pc, #108]	; (800b350 <UI_Config_FX+0x138>)
 800b2e4:	f8d8 2000 	ldr.w	r2, [r8]
 800b2e8:	4b0d      	ldr	r3, [pc, #52]	; (800b320 <UI_Config_FX+0x108>)
 800b2ea:	6819      	ldr	r1, [r3, #0]
 800b2ec:	6920      	ldr	r0, [r4, #16]
 800b2ee:	f7ff fdd7 	bl	800aea0 <displayJPEG>
		displayJPEG(iconName_FX2, iconPosX_FX2, iconPosY_FX2);
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	4b0c      	ldr	r3, [pc, #48]	; (800b328 <UI_Config_FX+0x110>)
 800b2f6:	6819      	ldr	r1, [r3, #0]
 800b2f8:	6960      	ldr	r0, [r4, #20]
 800b2fa:	f7ff fdd1 	bl	800aea0 <displayJPEG>
		displayJPEG(iconName_FX3, iconPosX_FX3, iconPosY_FX3);
 800b2fe:	6832      	ldr	r2, [r6, #0]
 800b300:	4b0b      	ldr	r3, [pc, #44]	; (800b330 <UI_Config_FX+0x118>)
 800b302:	6819      	ldr	r1, [r3, #0]
 800b304:	69a0      	ldr	r0, [r4, #24]
 800b306:	f7ff fdcb 	bl	800aea0 <displayJPEG>
		displayJPEG(iconName_FX4, iconPosX_FX4, iconPosY_FX4);
 800b30a:	682a      	ldr	r2, [r5, #0]
 800b30c:	4b0a      	ldr	r3, [pc, #40]	; (800b338 <UI_Config_FX+0x120>)
 800b30e:	6819      	ldr	r1, [r3, #0]
 800b310:	69e0      	ldr	r0, [r4, #28]
 800b312:	f7ff fdc5 	bl	800aea0 <displayJPEG>
}
 800b316:	e7e2      	b.n	800b2de <UI_Config_FX+0xc6>
 800b318:	ffd3d3d3 	.word	0xffd3d3d3
 800b31c:	20006344 	.word	0x20006344
 800b320:	2000632c 	.word	0x2000632c
 800b324:	2000634c 	.word	0x2000634c
 800b328:	2004671c 	.word	0x2004671c
 800b32c:	20006358 	.word	0x20006358
 800b330:	200065ec 	.word	0x200065ec
 800b334:	200060d8 	.word	0x200060d8
 800b338:	2000658c 	.word	0x2000658c
 800b33c:	08011298 	.word	0x08011298
 800b340:	0801129c 	.word	0x0801129c
 800b344:	080112a0 	.word	0x080112a0
 800b348:	080112a4 	.word	0x080112a4
 800b34c:	20001960 	.word	0x20001960
 800b350:	20000090 	.word	0x20000090
 800b354:	200465f8 	.word	0x200465f8

0800b358 <TouchScreen_Handler>:
int TouchScreen_Handler(uint16_t fx_state_current) {
 800b358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35a:	4604      	mov	r4, r0
	BSP_TS_GetState(&TS_State);
 800b35c:	4da2      	ldr	r5, [pc, #648]	; (800b5e8 <TouchScreen_Handler+0x290>)
 800b35e:	4628      	mov	r0, r5
 800b360:	f7f7 f9b2 	bl	80026c8 <BSP_TS_GetState>
	if (TS_State.touchDetected == 1) {
 800b364:	782b      	ldrb	r3, [r5, #0]
 800b366:	2b01      	cmp	r3, #1
 800b368:	d001      	beq.n	800b36e <TouchScreen_Handler+0x16>
}
 800b36a:	4620      	mov	r0, r4
 800b36c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800b36e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800b372:	f7f6 fb1d 	bl	80019b0 <BSP_LCD_SetTextColor>
		BSP_TS_GetState(&TS_State);
 800b376:	4628      	mov	r0, r5
 800b378:	f7f7 f9a6 	bl	80026c8 <BSP_TS_GetState>
		if (menu_state == MAIN_MENU_STATE) {
 800b37c:	4b9b      	ldr	r3, [pc, #620]	; (800b5ec <TouchScreen_Handler+0x294>)
 800b37e:	681d      	ldr	r5, [r3, #0]
 800b380:	2d00      	cmp	r5, #0
 800b382:	d165      	bne.n	800b450 <TouchScreen_Handler+0xf8>
			if ((TS_State.touchX[0] > iconPosX_FX) && (TS_State.touchX[0] < iconPosX_FX+iconSize) &&
 800b384:	4b98      	ldr	r3, [pc, #608]	; (800b5e8 <TouchScreen_Handler+0x290>)
 800b386:	885b      	ldrh	r3, [r3, #2]
 800b388:	4a99      	ldr	r2, [pc, #612]	; (800b5f0 <TouchScreen_Handler+0x298>)
 800b38a:	6812      	ldr	r2, [r2, #0]
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d90d      	bls.n	800b3ac <TouchScreen_Handler+0x54>
 800b390:	4998      	ldr	r1, [pc, #608]	; (800b5f4 <TouchScreen_Handler+0x29c>)
 800b392:	6809      	ldr	r1, [r1, #0]
 800b394:	440a      	add	r2, r1
 800b396:	4293      	cmp	r3, r2
 800b398:	d208      	bcs.n	800b3ac <TouchScreen_Handler+0x54>
				(TS_State.touchY[0] > iconPosY_FX) && (TS_State.touchY[0] < iconPosY_FX+iconSize))
 800b39a:	4a93      	ldr	r2, [pc, #588]	; (800b5e8 <TouchScreen_Handler+0x290>)
 800b39c:	88d2      	ldrh	r2, [r2, #6]
 800b39e:	4896      	ldr	r0, [pc, #600]	; (800b5f8 <TouchScreen_Handler+0x2a0>)
 800b3a0:	6800      	ldr	r0, [r0, #0]
			if ((TS_State.touchX[0] > iconPosX_FX) && (TS_State.touchX[0] < iconPosX_FX+iconSize) &&
 800b3a2:	4282      	cmp	r2, r0
 800b3a4:	d902      	bls.n	800b3ac <TouchScreen_Handler+0x54>
				(TS_State.touchY[0] > iconPosY_FX) && (TS_State.touchY[0] < iconPosY_FX+iconSize))
 800b3a6:	4401      	add	r1, r0
 800b3a8:	428a      	cmp	r2, r1
 800b3aa:	d338      	bcc.n	800b41e <TouchScreen_Handler+0xc6>
			else if ((TS_State.touchX[0] > iconPosX_SV) && (TS_State.touchX[0] < iconPosX_SV+iconSize) &&
 800b3ac:	4a93      	ldr	r2, [pc, #588]	; (800b5fc <TouchScreen_Handler+0x2a4>)
 800b3ae:	6812      	ldr	r2, [r2, #0]
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d90e      	bls.n	800b3d2 <TouchScreen_Handler+0x7a>
 800b3b4:	498f      	ldr	r1, [pc, #572]	; (800b5f4 <TouchScreen_Handler+0x29c>)
 800b3b6:	6809      	ldr	r1, [r1, #0]
 800b3b8:	440a      	add	r2, r1
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d209      	bcs.n	800b3d2 <TouchScreen_Handler+0x7a>
				(TS_State.touchY[0] > iconPosY_SV) && (TS_State.touchY[0] < iconPosY_SV+iconSize))
 800b3be:	4b8a      	ldr	r3, [pc, #552]	; (800b5e8 <TouchScreen_Handler+0x290>)
 800b3c0:	88db      	ldrh	r3, [r3, #6]
 800b3c2:	4a8f      	ldr	r2, [pc, #572]	; (800b600 <TouchScreen_Handler+0x2a8>)
 800b3c4:	6812      	ldr	r2, [r2, #0]
			else if ((TS_State.touchX[0] > iconPosX_SV) && (TS_State.touchX[0] < iconPosX_SV+iconSize) &&
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d903      	bls.n	800b3d2 <TouchScreen_Handler+0x7a>
				(TS_State.touchY[0] > iconPosY_SV) && (TS_State.touchY[0] < iconPosY_SV+iconSize))
 800b3ca:	4411      	add	r1, r2
 800b3cc:	428b      	cmp	r3, r1
 800b3ce:	f0c0 821a 	bcc.w	800b806 <TouchScreen_Handler+0x4ae>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800b3d2:	488c      	ldr	r0, [pc, #560]	; (800b604 <TouchScreen_Handler+0x2ac>)
 800b3d4:	f7f6 faec 	bl	80019b0 <BSP_LCD_SetTextColor>
				BSP_LCD_DrawRect(iconPosX_FX - 10, iconPosY_FX - 10, iconSize + 20, iconSize + 20);
 800b3d8:	4e86      	ldr	r6, [pc, #536]	; (800b5f4 <TouchScreen_Handler+0x29c>)
 800b3da:	6832      	ldr	r2, [r6, #0]
 800b3dc:	3214      	adds	r2, #20
 800b3de:	b292      	uxth	r2, r2
 800b3e0:	4b85      	ldr	r3, [pc, #532]	; (800b5f8 <TouchScreen_Handler+0x2a0>)
 800b3e2:	6819      	ldr	r1, [r3, #0]
 800b3e4:	390a      	subs	r1, #10
 800b3e6:	4b82      	ldr	r3, [pc, #520]	; (800b5f0 <TouchScreen_Handler+0x298>)
 800b3e8:	6818      	ldr	r0, [r3, #0]
 800b3ea:	380a      	subs	r0, #10
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	b289      	uxth	r1, r1
 800b3f0:	b280      	uxth	r0, r0
 800b3f2:	f7f6 fb6b 	bl	8001acc <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_SV - 10, iconPosY_SV - 10, iconSize + 20, iconSize + 20);
 800b3f6:	6832      	ldr	r2, [r6, #0]
 800b3f8:	3214      	adds	r2, #20
 800b3fa:	b292      	uxth	r2, r2
 800b3fc:	4b80      	ldr	r3, [pc, #512]	; (800b600 <TouchScreen_Handler+0x2a8>)
 800b3fe:	6819      	ldr	r1, [r3, #0]
 800b400:	390a      	subs	r1, #10
 800b402:	4b7e      	ldr	r3, [pc, #504]	; (800b5fc <TouchScreen_Handler+0x2a4>)
 800b404:	6818      	ldr	r0, [r3, #0]
 800b406:	380a      	subs	r0, #10
 800b408:	4613      	mov	r3, r2
 800b40a:	b289      	uxth	r1, r1
 800b40c:	b280      	uxth	r0, r0
 800b40e:	f7f6 fb5d 	bl	8001acc <BSP_LCD_DrawRect>
	int fx_selection_state = fx_state_current;
 800b412:	4623      	mov	r3, r4
		} else if (menu_selection_state == 2) { // Signal Viewer
 800b414:	2d02      	cmp	r5, #2
 800b416:	f000 81f9 	beq.w	800b80c <TouchScreen_Handler+0x4b4>
 800b41a:	461c      	mov	r4, r3
	return fx_selection_state;
 800b41c:	e7a5      	b.n	800b36a <TouchScreen_Handler+0x12>
			UI_Config_FX();
 800b41e:	f7ff fefb 	bl	800b218 <UI_Config_FX>
			menu_state = FX_MENU_STATE;
 800b422:	4b72      	ldr	r3, [pc, #456]	; (800b5ec <TouchScreen_Handler+0x294>)
 800b424:	2201      	movs	r2, #1
 800b426:	601a      	str	r2, [r3, #0]
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800b428:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800b42c:	f7f6 fac0 	bl	80019b0 <BSP_LCD_SetTextColor>
			if (fx_selection_state == FX_STATE_1) {
 800b430:	2c01      	cmp	r4, #1
 800b432:	f000 81a8 	beq.w	800b786 <TouchScreen_Handler+0x42e>
			} else if (fx_selection_state == FX_STATE_2) {
 800b436:	2c02      	cmp	r4, #2
 800b438:	f000 81b5 	beq.w	800b7a6 <TouchScreen_Handler+0x44e>
			} else if (fx_selection_state == FX_STATE_3) {
 800b43c:	2c03      	cmp	r4, #3
 800b43e:	f000 81c2 	beq.w	800b7c6 <TouchScreen_Handler+0x46e>
			} else if (fx_selection_state == FX_STATE_4) {
 800b442:	2c04      	cmp	r4, #4
 800b444:	f000 81cf 	beq.w	800b7e6 <TouchScreen_Handler+0x48e>
			BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800b448:	486e      	ldr	r0, [pc, #440]	; (800b604 <TouchScreen_Handler+0x2ac>)
 800b44a:	f7f6 fab1 	bl	80019b0 <BSP_LCD_SetTextColor>
 800b44e:	e78c      	b.n	800b36a <TouchScreen_Handler+0x12>
		else if (menu_state == FX_MENU_STATE) {
 800b450:	2d01      	cmp	r5, #1
 800b452:	d002      	beq.n	800b45a <TouchScreen_Handler+0x102>
	int fx_selection_state = fx_state_current;
 800b454:	4623      	mov	r3, r4
	int menu_selection_state = 0;
 800b456:	2500      	movs	r5, #0
 800b458:	e7dc      	b.n	800b414 <TouchScreen_Handler+0xbc>
			if ((TS_State.touchX[0] > iconPosX_FX1) && (TS_State.touchX[0] < iconPosX_FX1+iconSize) &&
 800b45a:	4b63      	ldr	r3, [pc, #396]	; (800b5e8 <TouchScreen_Handler+0x290>)
 800b45c:	885b      	ldrh	r3, [r3, #2]
 800b45e:	4a6a      	ldr	r2, [pc, #424]	; (800b608 <TouchScreen_Handler+0x2b0>)
 800b460:	6810      	ldr	r0, [r2, #0]
 800b462:	4283      	cmp	r3, r0
 800b464:	d90d      	bls.n	800b482 <TouchScreen_Handler+0x12a>
 800b466:	4a63      	ldr	r2, [pc, #396]	; (800b5f4 <TouchScreen_Handler+0x29c>)
 800b468:	6812      	ldr	r2, [r2, #0]
 800b46a:	1881      	adds	r1, r0, r2
 800b46c:	428b      	cmp	r3, r1
 800b46e:	d208      	bcs.n	800b482 <TouchScreen_Handler+0x12a>
				(TS_State.touchY[0] > iconPosY_FX1) && (TS_State.touchY[0] < iconPosY_FX1+iconSize))
 800b470:	495d      	ldr	r1, [pc, #372]	; (800b5e8 <TouchScreen_Handler+0x290>)
 800b472:	88ce      	ldrh	r6, [r1, #6]
 800b474:	4965      	ldr	r1, [pc, #404]	; (800b60c <TouchScreen_Handler+0x2b4>)
 800b476:	6809      	ldr	r1, [r1, #0]
			if ((TS_State.touchX[0] > iconPosX_FX1) && (TS_State.touchX[0] < iconPosX_FX1+iconSize) &&
 800b478:	428e      	cmp	r6, r1
 800b47a:	d902      	bls.n	800b482 <TouchScreen_Handler+0x12a>
				(TS_State.touchY[0] > iconPosY_FX1) && (TS_State.touchY[0] < iconPosY_FX1+iconSize))
 800b47c:	1857      	adds	r7, r2, r1
 800b47e:	42be      	cmp	r6, r7
 800b480:	d377      	bcc.n	800b572 <TouchScreen_Handler+0x21a>
			else if ((TS_State.touchX[0] > iconPosX_FX2) && (TS_State.touchX[0] < iconPosX_FX2+iconSize) &&
 800b482:	4a63      	ldr	r2, [pc, #396]	; (800b610 <TouchScreen_Handler+0x2b8>)
 800b484:	6810      	ldr	r0, [r2, #0]
 800b486:	4283      	cmp	r3, r0
 800b488:	d90e      	bls.n	800b4a8 <TouchScreen_Handler+0x150>
 800b48a:	4a5a      	ldr	r2, [pc, #360]	; (800b5f4 <TouchScreen_Handler+0x29c>)
 800b48c:	6812      	ldr	r2, [r2, #0]
 800b48e:	1881      	adds	r1, r0, r2
 800b490:	428b      	cmp	r3, r1
 800b492:	d209      	bcs.n	800b4a8 <TouchScreen_Handler+0x150>
					(TS_State.touchY[0] > iconPosY_FX2) && (TS_State.touchY[0] < iconPosY_FX2+iconSize))
 800b494:	4954      	ldr	r1, [pc, #336]	; (800b5e8 <TouchScreen_Handler+0x290>)
 800b496:	88cd      	ldrh	r5, [r1, #6]
 800b498:	495e      	ldr	r1, [pc, #376]	; (800b614 <TouchScreen_Handler+0x2bc>)
 800b49a:	6809      	ldr	r1, [r1, #0]
			else if ((TS_State.touchX[0] > iconPosX_FX2) && (TS_State.touchX[0] < iconPosX_FX2+iconSize) &&
 800b49c:	428d      	cmp	r5, r1
 800b49e:	d903      	bls.n	800b4a8 <TouchScreen_Handler+0x150>
					(TS_State.touchY[0] > iconPosY_FX2) && (TS_State.touchY[0] < iconPosY_FX2+iconSize))
 800b4a0:	1856      	adds	r6, r2, r1
 800b4a2:	42b5      	cmp	r5, r6
 800b4a4:	f0c0 80c0 	bcc.w	800b628 <TouchScreen_Handler+0x2d0>
			else if ((TS_State.touchX[0] > iconPosX_FX3) && (TS_State.touchX[0] < iconPosX_FX3+iconSize) &&
 800b4a8:	4a5b      	ldr	r2, [pc, #364]	; (800b618 <TouchScreen_Handler+0x2c0>)
 800b4aa:	6810      	ldr	r0, [r2, #0]
 800b4ac:	4283      	cmp	r3, r0
 800b4ae:	d90e      	bls.n	800b4ce <TouchScreen_Handler+0x176>
 800b4b0:	4a50      	ldr	r2, [pc, #320]	; (800b5f4 <TouchScreen_Handler+0x29c>)
 800b4b2:	6812      	ldr	r2, [r2, #0]
 800b4b4:	1881      	adds	r1, r0, r2
 800b4b6:	428b      	cmp	r3, r1
 800b4b8:	d209      	bcs.n	800b4ce <TouchScreen_Handler+0x176>
					(TS_State.touchY[0] > iconPosY_FX3) && (TS_State.touchY[0] < iconPosY_FX3+iconSize))
 800b4ba:	494b      	ldr	r1, [pc, #300]	; (800b5e8 <TouchScreen_Handler+0x290>)
 800b4bc:	88cd      	ldrh	r5, [r1, #6]
 800b4be:	4957      	ldr	r1, [pc, #348]	; (800b61c <TouchScreen_Handler+0x2c4>)
 800b4c0:	6809      	ldr	r1, [r1, #0]
			else if ((TS_State.touchX[0] > iconPosX_FX3) && (TS_State.touchX[0] < iconPosX_FX3+iconSize) &&
 800b4c2:	428d      	cmp	r5, r1
 800b4c4:	d903      	bls.n	800b4ce <TouchScreen_Handler+0x176>
					(TS_State.touchY[0] > iconPosY_FX3) && (TS_State.touchY[0] < iconPosY_FX3+iconSize))
 800b4c6:	1856      	adds	r6, r2, r1
 800b4c8:	42b5      	cmp	r5, r6
 800b4ca:	f0c0 80e7 	bcc.w	800b69c <TouchScreen_Handler+0x344>
			else if ((TS_State.touchX[0] > iconPosX_FX4) && (TS_State.touchX[0] < iconPosX_FX4+iconSize) &&
 800b4ce:	4a54      	ldr	r2, [pc, #336]	; (800b620 <TouchScreen_Handler+0x2c8>)
 800b4d0:	6810      	ldr	r0, [r2, #0]
 800b4d2:	4283      	cmp	r3, r0
 800b4d4:	d90e      	bls.n	800b4f4 <TouchScreen_Handler+0x19c>
 800b4d6:	4a47      	ldr	r2, [pc, #284]	; (800b5f4 <TouchScreen_Handler+0x29c>)
 800b4d8:	6812      	ldr	r2, [r2, #0]
 800b4da:	1881      	adds	r1, r0, r2
 800b4dc:	428b      	cmp	r3, r1
 800b4de:	d209      	bcs.n	800b4f4 <TouchScreen_Handler+0x19c>
					(TS_State.touchY[0] > iconPosY_FX4) && (TS_State.touchY[0] < iconPosY_FX4+iconSize))
 800b4e0:	4b41      	ldr	r3, [pc, #260]	; (800b5e8 <TouchScreen_Handler+0x290>)
 800b4e2:	88d9      	ldrh	r1, [r3, #6]
 800b4e4:	4b4f      	ldr	r3, [pc, #316]	; (800b624 <TouchScreen_Handler+0x2cc>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
			else if ((TS_State.touchX[0] > iconPosX_FX4) && (TS_State.touchX[0] < iconPosX_FX4+iconSize) &&
 800b4e8:	4299      	cmp	r1, r3
 800b4ea:	d903      	bls.n	800b4f4 <TouchScreen_Handler+0x19c>
					(TS_State.touchY[0] > iconPosY_FX4) && (TS_State.touchY[0] < iconPosY_FX4+iconSize))
 800b4ec:	18d5      	adds	r5, r2, r3
 800b4ee:	42a9      	cmp	r1, r5
 800b4f0:	f0c0 810e 	bcc.w	800b710 <TouchScreen_Handler+0x3b8>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800b4f4:	4843      	ldr	r0, [pc, #268]	; (800b604 <TouchScreen_Handler+0x2ac>)
 800b4f6:	f7f6 fa5b 	bl	80019b0 <BSP_LCD_SetTextColor>
				BSP_LCD_DrawRect(iconPosX_FX1 - 10, iconPosY_FX1 - 10, iconSize + 20, iconSize + 20);
 800b4fa:	4d3e      	ldr	r5, [pc, #248]	; (800b5f4 <TouchScreen_Handler+0x29c>)
 800b4fc:	682a      	ldr	r2, [r5, #0]
 800b4fe:	3214      	adds	r2, #20
 800b500:	b292      	uxth	r2, r2
 800b502:	4b42      	ldr	r3, [pc, #264]	; (800b60c <TouchScreen_Handler+0x2b4>)
 800b504:	6819      	ldr	r1, [r3, #0]
 800b506:	390a      	subs	r1, #10
 800b508:	4b3f      	ldr	r3, [pc, #252]	; (800b608 <TouchScreen_Handler+0x2b0>)
 800b50a:	6818      	ldr	r0, [r3, #0]
 800b50c:	380a      	subs	r0, #10
 800b50e:	4613      	mov	r3, r2
 800b510:	b289      	uxth	r1, r1
 800b512:	b280      	uxth	r0, r0
 800b514:	f7f6 fada 	bl	8001acc <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX2 - 10, iconPosY_FX2 - 10, iconSize + 20, iconSize + 20);
 800b518:	682a      	ldr	r2, [r5, #0]
 800b51a:	3214      	adds	r2, #20
 800b51c:	b292      	uxth	r2, r2
 800b51e:	4b3d      	ldr	r3, [pc, #244]	; (800b614 <TouchScreen_Handler+0x2bc>)
 800b520:	6819      	ldr	r1, [r3, #0]
 800b522:	390a      	subs	r1, #10
 800b524:	4b3a      	ldr	r3, [pc, #232]	; (800b610 <TouchScreen_Handler+0x2b8>)
 800b526:	6818      	ldr	r0, [r3, #0]
 800b528:	380a      	subs	r0, #10
 800b52a:	4613      	mov	r3, r2
 800b52c:	b289      	uxth	r1, r1
 800b52e:	b280      	uxth	r0, r0
 800b530:	f7f6 facc 	bl	8001acc <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX3 - 10, iconPosY_FX3 - 10, iconSize + 20, iconSize + 20);
 800b534:	682a      	ldr	r2, [r5, #0]
 800b536:	3214      	adds	r2, #20
 800b538:	b292      	uxth	r2, r2
 800b53a:	4b38      	ldr	r3, [pc, #224]	; (800b61c <TouchScreen_Handler+0x2c4>)
 800b53c:	6819      	ldr	r1, [r3, #0]
 800b53e:	390a      	subs	r1, #10
 800b540:	4b35      	ldr	r3, [pc, #212]	; (800b618 <TouchScreen_Handler+0x2c0>)
 800b542:	6818      	ldr	r0, [r3, #0]
 800b544:	380a      	subs	r0, #10
 800b546:	4613      	mov	r3, r2
 800b548:	b289      	uxth	r1, r1
 800b54a:	b280      	uxth	r0, r0
 800b54c:	f7f6 fabe 	bl	8001acc <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX4 - 10, iconPosY_FX4 - 10, iconSize + 20, iconSize + 20);
 800b550:	682a      	ldr	r2, [r5, #0]
 800b552:	3214      	adds	r2, #20
 800b554:	b292      	uxth	r2, r2
 800b556:	4b33      	ldr	r3, [pc, #204]	; (800b624 <TouchScreen_Handler+0x2cc>)
 800b558:	6819      	ldr	r1, [r3, #0]
 800b55a:	390a      	subs	r1, #10
 800b55c:	4b30      	ldr	r3, [pc, #192]	; (800b620 <TouchScreen_Handler+0x2c8>)
 800b55e:	6818      	ldr	r0, [r3, #0]
 800b560:	380a      	subs	r0, #10
 800b562:	4613      	mov	r3, r2
 800b564:	b289      	uxth	r1, r1
 800b566:	b280      	uxth	r0, r0
 800b568:	f7f6 fab0 	bl	8001acc <BSP_LCD_DrawRect>
				fx_selection_state = FX_STATE_NONE;
 800b56c:	2300      	movs	r3, #0
	int menu_selection_state = 0;
 800b56e:	461d      	mov	r5, r3
 800b570:	e750      	b.n	800b414 <TouchScreen_Handler+0xbc>
				BSP_LCD_DrawRect(iconPosX_FX1 - 10, iconPosY_FX1 - 10, iconSize + 20, iconSize + 20);
 800b572:	3214      	adds	r2, #20
 800b574:	b292      	uxth	r2, r2
 800b576:	390a      	subs	r1, #10
 800b578:	380a      	subs	r0, #10
 800b57a:	4613      	mov	r3, r2
 800b57c:	b289      	uxth	r1, r1
 800b57e:	b280      	uxth	r0, r0
 800b580:	f7f6 faa4 	bl	8001acc <BSP_LCD_DrawRect>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800b584:	481f      	ldr	r0, [pc, #124]	; (800b604 <TouchScreen_Handler+0x2ac>)
 800b586:	f7f6 fa13 	bl	80019b0 <BSP_LCD_SetTextColor>
				BSP_LCD_DrawRect(iconPosX_FX2 - 10, iconPosY_FX2 - 10, iconSize + 20, iconSize + 20);
 800b58a:	4e1a      	ldr	r6, [pc, #104]	; (800b5f4 <TouchScreen_Handler+0x29c>)
 800b58c:	6833      	ldr	r3, [r6, #0]
 800b58e:	3314      	adds	r3, #20
 800b590:	b29a      	uxth	r2, r3
 800b592:	4b20      	ldr	r3, [pc, #128]	; (800b614 <TouchScreen_Handler+0x2bc>)
 800b594:	6819      	ldr	r1, [r3, #0]
 800b596:	390a      	subs	r1, #10
 800b598:	4b1d      	ldr	r3, [pc, #116]	; (800b610 <TouchScreen_Handler+0x2b8>)
 800b59a:	6818      	ldr	r0, [r3, #0]
 800b59c:	380a      	subs	r0, #10
 800b59e:	4613      	mov	r3, r2
 800b5a0:	b289      	uxth	r1, r1
 800b5a2:	b280      	uxth	r0, r0
 800b5a4:	f7f6 fa92 	bl	8001acc <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX3 - 10, iconPosY_FX3 - 10, iconSize + 20, iconSize + 20);
 800b5a8:	6833      	ldr	r3, [r6, #0]
 800b5aa:	3314      	adds	r3, #20
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	4b1b      	ldr	r3, [pc, #108]	; (800b61c <TouchScreen_Handler+0x2c4>)
 800b5b0:	6819      	ldr	r1, [r3, #0]
 800b5b2:	390a      	subs	r1, #10
 800b5b4:	4b18      	ldr	r3, [pc, #96]	; (800b618 <TouchScreen_Handler+0x2c0>)
 800b5b6:	6818      	ldr	r0, [r3, #0]
 800b5b8:	380a      	subs	r0, #10
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	b289      	uxth	r1, r1
 800b5be:	b280      	uxth	r0, r0
 800b5c0:	f7f6 fa84 	bl	8001acc <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX4 - 10, iconPosY_FX4 - 10, iconSize + 20, iconSize + 20);
 800b5c4:	6832      	ldr	r2, [r6, #0]
 800b5c6:	3214      	adds	r2, #20
 800b5c8:	b292      	uxth	r2, r2
 800b5ca:	4b16      	ldr	r3, [pc, #88]	; (800b624 <TouchScreen_Handler+0x2cc>)
 800b5cc:	6819      	ldr	r1, [r3, #0]
 800b5ce:	390a      	subs	r1, #10
 800b5d0:	4b13      	ldr	r3, [pc, #76]	; (800b620 <TouchScreen_Handler+0x2c8>)
 800b5d2:	6818      	ldr	r0, [r3, #0]
 800b5d4:	380a      	subs	r0, #10
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	b289      	uxth	r1, r1
 800b5da:	b280      	uxth	r0, r0
 800b5dc:	f7f6 fa76 	bl	8001acc <BSP_LCD_DrawRect>
				fx_selection_state = FX_STATE_1;
 800b5e0:	462b      	mov	r3, r5
	int menu_selection_state = 0;
 800b5e2:	2500      	movs	r5, #0
 800b5e4:	e716      	b.n	800b414 <TouchScreen_Handler+0xbc>
 800b5e6:	bf00      	nop
 800b5e8:	20046710 	.word	0x20046710
 800b5ec:	20001960 	.word	0x20001960
 800b5f0:	200465fc 	.word	0x200465fc
 800b5f4:	20006344 	.word	0x20006344
 800b5f8:	20006590 	.word	0x20006590
 800b5fc:	20006354 	.word	0x20006354
 800b600:	200466b4 	.word	0x200466b4
 800b604:	ffd3d3d3 	.word	0xffd3d3d3
 800b608:	2000632c 	.word	0x2000632c
 800b60c:	200465f8 	.word	0x200465f8
 800b610:	2004671c 	.word	0x2004671c
 800b614:	2000634c 	.word	0x2000634c
 800b618:	200065ec 	.word	0x200065ec
 800b61c:	20006358 	.word	0x20006358
 800b620:	2000658c 	.word	0x2000658c
 800b624:	200060d8 	.word	0x200060d8
				BSP_LCD_DrawRect(iconPosX_FX2 - 10, iconPosY_FX2 - 10, iconSize + 20, iconSize + 20);
 800b628:	3214      	adds	r2, #20
 800b62a:	b292      	uxth	r2, r2
 800b62c:	390a      	subs	r1, #10
 800b62e:	380a      	subs	r0, #10
 800b630:	4613      	mov	r3, r2
 800b632:	b289      	uxth	r1, r1
 800b634:	b280      	uxth	r0, r0
 800b636:	f7f6 fa49 	bl	8001acc <BSP_LCD_DrawRect>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800b63a:	4877      	ldr	r0, [pc, #476]	; (800b818 <TouchScreen_Handler+0x4c0>)
 800b63c:	f7f6 f9b8 	bl	80019b0 <BSP_LCD_SetTextColor>
				BSP_LCD_DrawRect(iconPosX_FX1 - 10, iconPosY_FX1 - 10, iconSize + 20, iconSize + 20);
 800b640:	4d76      	ldr	r5, [pc, #472]	; (800b81c <TouchScreen_Handler+0x4c4>)
 800b642:	682b      	ldr	r3, [r5, #0]
 800b644:	3314      	adds	r3, #20
 800b646:	b29a      	uxth	r2, r3
 800b648:	4b75      	ldr	r3, [pc, #468]	; (800b820 <TouchScreen_Handler+0x4c8>)
 800b64a:	6819      	ldr	r1, [r3, #0]
 800b64c:	390a      	subs	r1, #10
 800b64e:	4b75      	ldr	r3, [pc, #468]	; (800b824 <TouchScreen_Handler+0x4cc>)
 800b650:	6818      	ldr	r0, [r3, #0]
 800b652:	380a      	subs	r0, #10
 800b654:	4613      	mov	r3, r2
 800b656:	b289      	uxth	r1, r1
 800b658:	b280      	uxth	r0, r0
 800b65a:	f7f6 fa37 	bl	8001acc <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX3 - 10, iconPosY_FX3 - 10, iconSize + 20, iconSize + 20);
 800b65e:	682b      	ldr	r3, [r5, #0]
 800b660:	3314      	adds	r3, #20
 800b662:	b29a      	uxth	r2, r3
 800b664:	4b70      	ldr	r3, [pc, #448]	; (800b828 <TouchScreen_Handler+0x4d0>)
 800b666:	6819      	ldr	r1, [r3, #0]
 800b668:	390a      	subs	r1, #10
 800b66a:	4b70      	ldr	r3, [pc, #448]	; (800b82c <TouchScreen_Handler+0x4d4>)
 800b66c:	6818      	ldr	r0, [r3, #0]
 800b66e:	380a      	subs	r0, #10
 800b670:	4613      	mov	r3, r2
 800b672:	b289      	uxth	r1, r1
 800b674:	b280      	uxth	r0, r0
 800b676:	f7f6 fa29 	bl	8001acc <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX4 - 10, iconPosY_FX4 - 10, iconSize + 20, iconSize + 20);
 800b67a:	682a      	ldr	r2, [r5, #0]
 800b67c:	3214      	adds	r2, #20
 800b67e:	b292      	uxth	r2, r2
 800b680:	4b6b      	ldr	r3, [pc, #428]	; (800b830 <TouchScreen_Handler+0x4d8>)
 800b682:	6819      	ldr	r1, [r3, #0]
 800b684:	390a      	subs	r1, #10
 800b686:	4b6b      	ldr	r3, [pc, #428]	; (800b834 <TouchScreen_Handler+0x4dc>)
 800b688:	6818      	ldr	r0, [r3, #0]
 800b68a:	380a      	subs	r0, #10
 800b68c:	4613      	mov	r3, r2
 800b68e:	b289      	uxth	r1, r1
 800b690:	b280      	uxth	r0, r0
 800b692:	f7f6 fa1b 	bl	8001acc <BSP_LCD_DrawRect>
				fx_selection_state = FX_STATE_2;
 800b696:	2302      	movs	r3, #2
	int menu_selection_state = 0;
 800b698:	2500      	movs	r5, #0
 800b69a:	e6bb      	b.n	800b414 <TouchScreen_Handler+0xbc>
				BSP_LCD_DrawRect(iconPosX_FX3 - 10, iconPosY_FX3 - 10, iconSize + 20, iconSize + 20);
 800b69c:	3214      	adds	r2, #20
 800b69e:	b292      	uxth	r2, r2
 800b6a0:	390a      	subs	r1, #10
 800b6a2:	380a      	subs	r0, #10
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	b289      	uxth	r1, r1
 800b6a8:	b280      	uxth	r0, r0
 800b6aa:	f7f6 fa0f 	bl	8001acc <BSP_LCD_DrawRect>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800b6ae:	485a      	ldr	r0, [pc, #360]	; (800b818 <TouchScreen_Handler+0x4c0>)
 800b6b0:	f7f6 f97e 	bl	80019b0 <BSP_LCD_SetTextColor>
				BSP_LCD_DrawRect(iconPosX_FX1 - 10, iconPosY_FX1 - 10, iconSize + 20, iconSize + 20);
 800b6b4:	4d59      	ldr	r5, [pc, #356]	; (800b81c <TouchScreen_Handler+0x4c4>)
 800b6b6:	682b      	ldr	r3, [r5, #0]
 800b6b8:	3314      	adds	r3, #20
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	4b58      	ldr	r3, [pc, #352]	; (800b820 <TouchScreen_Handler+0x4c8>)
 800b6be:	6819      	ldr	r1, [r3, #0]
 800b6c0:	390a      	subs	r1, #10
 800b6c2:	4b58      	ldr	r3, [pc, #352]	; (800b824 <TouchScreen_Handler+0x4cc>)
 800b6c4:	6818      	ldr	r0, [r3, #0]
 800b6c6:	380a      	subs	r0, #10
 800b6c8:	4613      	mov	r3, r2
 800b6ca:	b289      	uxth	r1, r1
 800b6cc:	b280      	uxth	r0, r0
 800b6ce:	f7f6 f9fd 	bl	8001acc <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX2 - 10, iconPosY_FX2 - 10, iconSize + 20, iconSize + 20);
 800b6d2:	682b      	ldr	r3, [r5, #0]
 800b6d4:	3314      	adds	r3, #20
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	4b57      	ldr	r3, [pc, #348]	; (800b838 <TouchScreen_Handler+0x4e0>)
 800b6da:	6819      	ldr	r1, [r3, #0]
 800b6dc:	390a      	subs	r1, #10
 800b6de:	4b57      	ldr	r3, [pc, #348]	; (800b83c <TouchScreen_Handler+0x4e4>)
 800b6e0:	6818      	ldr	r0, [r3, #0]
 800b6e2:	380a      	subs	r0, #10
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	b289      	uxth	r1, r1
 800b6e8:	b280      	uxth	r0, r0
 800b6ea:	f7f6 f9ef 	bl	8001acc <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX4 - 10, iconPosY_FX4 - 10, iconSize + 20, iconSize + 20);
 800b6ee:	682a      	ldr	r2, [r5, #0]
 800b6f0:	3214      	adds	r2, #20
 800b6f2:	b292      	uxth	r2, r2
 800b6f4:	4b4e      	ldr	r3, [pc, #312]	; (800b830 <TouchScreen_Handler+0x4d8>)
 800b6f6:	6819      	ldr	r1, [r3, #0]
 800b6f8:	390a      	subs	r1, #10
 800b6fa:	4b4e      	ldr	r3, [pc, #312]	; (800b834 <TouchScreen_Handler+0x4dc>)
 800b6fc:	6818      	ldr	r0, [r3, #0]
 800b6fe:	380a      	subs	r0, #10
 800b700:	4613      	mov	r3, r2
 800b702:	b289      	uxth	r1, r1
 800b704:	b280      	uxth	r0, r0
 800b706:	f7f6 f9e1 	bl	8001acc <BSP_LCD_DrawRect>
				fx_selection_state = FX_STATE_3;
 800b70a:	2303      	movs	r3, #3
	int menu_selection_state = 0;
 800b70c:	2500      	movs	r5, #0
 800b70e:	e681      	b.n	800b414 <TouchScreen_Handler+0xbc>
				BSP_LCD_DrawRect(iconPosX_FX4 - 10, iconPosY_FX4 - 10, iconSize + 20, iconSize + 20);
 800b710:	3214      	adds	r2, #20
 800b712:	b292      	uxth	r2, r2
 800b714:	f1a3 010a 	sub.w	r1, r3, #10
 800b718:	380a      	subs	r0, #10
 800b71a:	4613      	mov	r3, r2
 800b71c:	b289      	uxth	r1, r1
 800b71e:	b280      	uxth	r0, r0
 800b720:	f7f6 f9d4 	bl	8001acc <BSP_LCD_DrawRect>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800b724:	483c      	ldr	r0, [pc, #240]	; (800b818 <TouchScreen_Handler+0x4c0>)
 800b726:	f7f6 f943 	bl	80019b0 <BSP_LCD_SetTextColor>
				BSP_LCD_DrawRect(iconPosX_FX1 - 10, iconPosY_FX1 - 10, iconSize + 20, iconSize + 20);
 800b72a:	4d3c      	ldr	r5, [pc, #240]	; (800b81c <TouchScreen_Handler+0x4c4>)
 800b72c:	682b      	ldr	r3, [r5, #0]
 800b72e:	3314      	adds	r3, #20
 800b730:	b29a      	uxth	r2, r3
 800b732:	4b3b      	ldr	r3, [pc, #236]	; (800b820 <TouchScreen_Handler+0x4c8>)
 800b734:	6819      	ldr	r1, [r3, #0]
 800b736:	390a      	subs	r1, #10
 800b738:	4b3a      	ldr	r3, [pc, #232]	; (800b824 <TouchScreen_Handler+0x4cc>)
 800b73a:	6818      	ldr	r0, [r3, #0]
 800b73c:	380a      	subs	r0, #10
 800b73e:	4613      	mov	r3, r2
 800b740:	b289      	uxth	r1, r1
 800b742:	b280      	uxth	r0, r0
 800b744:	f7f6 f9c2 	bl	8001acc <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX2 - 10, iconPosY_FX2 - 10, iconSize + 20, iconSize + 20);
 800b748:	682b      	ldr	r3, [r5, #0]
 800b74a:	3314      	adds	r3, #20
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	4b3a      	ldr	r3, [pc, #232]	; (800b838 <TouchScreen_Handler+0x4e0>)
 800b750:	6819      	ldr	r1, [r3, #0]
 800b752:	390a      	subs	r1, #10
 800b754:	4b39      	ldr	r3, [pc, #228]	; (800b83c <TouchScreen_Handler+0x4e4>)
 800b756:	6818      	ldr	r0, [r3, #0]
 800b758:	380a      	subs	r0, #10
 800b75a:	4613      	mov	r3, r2
 800b75c:	b289      	uxth	r1, r1
 800b75e:	b280      	uxth	r0, r0
 800b760:	f7f6 f9b4 	bl	8001acc <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX3 - 10, iconPosY_FX3 - 10, iconSize + 20, iconSize + 20);
 800b764:	682a      	ldr	r2, [r5, #0]
 800b766:	3214      	adds	r2, #20
 800b768:	b292      	uxth	r2, r2
 800b76a:	4b2f      	ldr	r3, [pc, #188]	; (800b828 <TouchScreen_Handler+0x4d0>)
 800b76c:	6819      	ldr	r1, [r3, #0]
 800b76e:	390a      	subs	r1, #10
 800b770:	4b2e      	ldr	r3, [pc, #184]	; (800b82c <TouchScreen_Handler+0x4d4>)
 800b772:	6818      	ldr	r0, [r3, #0]
 800b774:	380a      	subs	r0, #10
 800b776:	4613      	mov	r3, r2
 800b778:	b289      	uxth	r1, r1
 800b77a:	b280      	uxth	r0, r0
 800b77c:	f7f6 f9a6 	bl	8001acc <BSP_LCD_DrawRect>
				fx_selection_state = FX_STATE_4;
 800b780:	2304      	movs	r3, #4
	int menu_selection_state = 0;
 800b782:	2500      	movs	r5, #0
 800b784:	e646      	b.n	800b414 <TouchScreen_Handler+0xbc>
				BSP_LCD_DrawRect(iconPosX_FX1 - 10, iconPosY_FX1 - 10, iconSize + 20, iconSize + 20);
 800b786:	4b25      	ldr	r3, [pc, #148]	; (800b81c <TouchScreen_Handler+0x4c4>)
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	3214      	adds	r2, #20
 800b78c:	b292      	uxth	r2, r2
 800b78e:	4b24      	ldr	r3, [pc, #144]	; (800b820 <TouchScreen_Handler+0x4c8>)
 800b790:	6819      	ldr	r1, [r3, #0]
 800b792:	390a      	subs	r1, #10
 800b794:	4b23      	ldr	r3, [pc, #140]	; (800b824 <TouchScreen_Handler+0x4cc>)
 800b796:	6818      	ldr	r0, [r3, #0]
 800b798:	380a      	subs	r0, #10
 800b79a:	4613      	mov	r3, r2
 800b79c:	b289      	uxth	r1, r1
 800b79e:	b280      	uxth	r0, r0
 800b7a0:	f7f6 f994 	bl	8001acc <BSP_LCD_DrawRect>
 800b7a4:	e650      	b.n	800b448 <TouchScreen_Handler+0xf0>
				BSP_LCD_DrawRect(iconPosX_FX2 - 10, iconPosY_FX2 - 10, iconSize + 20, iconSize + 20);
 800b7a6:	4b1d      	ldr	r3, [pc, #116]	; (800b81c <TouchScreen_Handler+0x4c4>)
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	3214      	adds	r2, #20
 800b7ac:	b292      	uxth	r2, r2
 800b7ae:	4b22      	ldr	r3, [pc, #136]	; (800b838 <TouchScreen_Handler+0x4e0>)
 800b7b0:	6819      	ldr	r1, [r3, #0]
 800b7b2:	390a      	subs	r1, #10
 800b7b4:	4b21      	ldr	r3, [pc, #132]	; (800b83c <TouchScreen_Handler+0x4e4>)
 800b7b6:	6818      	ldr	r0, [r3, #0]
 800b7b8:	380a      	subs	r0, #10
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	b289      	uxth	r1, r1
 800b7be:	b280      	uxth	r0, r0
 800b7c0:	f7f6 f984 	bl	8001acc <BSP_LCD_DrawRect>
 800b7c4:	e640      	b.n	800b448 <TouchScreen_Handler+0xf0>
				BSP_LCD_DrawRect(iconPosX_FX3 - 10, iconPosY_FX3 - 10, iconSize + 20, iconSize + 20);
 800b7c6:	4b15      	ldr	r3, [pc, #84]	; (800b81c <TouchScreen_Handler+0x4c4>)
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	3214      	adds	r2, #20
 800b7cc:	b292      	uxth	r2, r2
 800b7ce:	4b16      	ldr	r3, [pc, #88]	; (800b828 <TouchScreen_Handler+0x4d0>)
 800b7d0:	6819      	ldr	r1, [r3, #0]
 800b7d2:	390a      	subs	r1, #10
 800b7d4:	4b15      	ldr	r3, [pc, #84]	; (800b82c <TouchScreen_Handler+0x4d4>)
 800b7d6:	6818      	ldr	r0, [r3, #0]
 800b7d8:	380a      	subs	r0, #10
 800b7da:	4613      	mov	r3, r2
 800b7dc:	b289      	uxth	r1, r1
 800b7de:	b280      	uxth	r0, r0
 800b7e0:	f7f6 f974 	bl	8001acc <BSP_LCD_DrawRect>
 800b7e4:	e630      	b.n	800b448 <TouchScreen_Handler+0xf0>
				BSP_LCD_DrawRect(iconPosX_FX4 - 10, iconPosY_FX4 - 10, iconSize + 20, iconSize + 20);
 800b7e6:	4b0d      	ldr	r3, [pc, #52]	; (800b81c <TouchScreen_Handler+0x4c4>)
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	3214      	adds	r2, #20
 800b7ec:	b292      	uxth	r2, r2
 800b7ee:	4b10      	ldr	r3, [pc, #64]	; (800b830 <TouchScreen_Handler+0x4d8>)
 800b7f0:	6819      	ldr	r1, [r3, #0]
 800b7f2:	390a      	subs	r1, #10
 800b7f4:	4b0f      	ldr	r3, [pc, #60]	; (800b834 <TouchScreen_Handler+0x4dc>)
 800b7f6:	6818      	ldr	r0, [r3, #0]
 800b7f8:	380a      	subs	r0, #10
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	b289      	uxth	r1, r1
 800b7fe:	b280      	uxth	r0, r0
 800b800:	f7f6 f964 	bl	8001acc <BSP_LCD_DrawRect>
 800b804:	e620      	b.n	800b448 <TouchScreen_Handler+0xf0>
	int fx_selection_state = fx_state_current;
 800b806:	4623      	mov	r3, r4
				menu_selection_state = 2;
 800b808:	2502      	movs	r5, #2
 800b80a:	e603      	b.n	800b414 <TouchScreen_Handler+0xbc>
			UI_Config_SV();
 800b80c:	f7ff fa2e 	bl	800ac6c <UI_Config_SV>
			menu_state = SV_MENU_STATE;
 800b810:	4b0b      	ldr	r3, [pc, #44]	; (800b840 <TouchScreen_Handler+0x4e8>)
 800b812:	2202      	movs	r2, #2
 800b814:	601a      	str	r2, [r3, #0]
			fx_selection_state = fx_state_current;
 800b816:	e5a8      	b.n	800b36a <TouchScreen_Handler+0x12>
 800b818:	ffd3d3d3 	.word	0xffd3d3d3
 800b81c:	20006344 	.word	0x20006344
 800b820:	200465f8 	.word	0x200465f8
 800b824:	2000632c 	.word	0x2000632c
 800b828:	20006358 	.word	0x20006358
 800b82c:	200065ec 	.word	0x200065ec
 800b830:	200060d8 	.word	0x200060d8
 800b834:	2000658c 	.word	0x2000658c
 800b838:	2000634c 	.word	0x2000634c
 800b83c:	2004671c 	.word	0x2004671c
 800b840:	20001960 	.word	0x20001960

0800b844 <UI_Handler>:
int UI_Handler(uint16_t* pData, uint16_t fx_state_current) {
 800b844:	b538      	push	{r3, r4, r5, lr}
 800b846:	4605      	mov	r5, r0
 800b848:	460c      	mov	r4, r1
	Button_Handler();
 800b84a:	f7ff fccf 	bl	800b1ec <Button_Handler>
	SV_Handler(pData); // pData must have 4096 entries
 800b84e:	4628      	mov	r0, r5
 800b850:	f7ff fa52 	bl	800acf8 <SV_Handler>
	return TouchScreen_Handler(fx_state_current);
 800b854:	4620      	mov	r0, r4
 800b856:	f7ff fd7f 	bl	800b358 <TouchScreen_Handler>
}
 800b85a:	bd38      	pop	{r3, r4, r5, pc}

0800b85c <JPEG_IRQHandler>:

//
//
// -- Interrupt & Callback FUnctions -----
//
void JPEG_IRQHandler(void) {
 800b85c:	b508      	push	{r3, lr}
	HAL_JPEG_IRQHandler(&hjpeg); // Pass to HAL
 800b85e:	4802      	ldr	r0, [pc, #8]	; (800b868 <JPEG_IRQHandler+0xc>)
 800b860:	f7fa fd73 	bl	800634a <HAL_JPEG_IRQHandler>
}
 800b864:	bd08      	pop	{r3, pc}
 800b866:	bf00      	nop
 800b868:	20006594 	.word	0x20006594

0800b86c <HAL_JPEG_GetDataCallback>:

void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData) {
 800b86c:	b570      	push	{r4, r5, r6, lr}
 800b86e:	4604      	mov	r4, r0
	bzero(jpeg_input_buffer, JPEG_BUFFER_SIZE);
 800b870:	4d06      	ldr	r5, [pc, #24]	; (800b88c <HAL_JPEG_GetDataCallback+0x20>)
 800b872:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800b876:	4632      	mov	r2, r6
 800b878:	2100      	movs	r1, #0
 800b87a:	4628      	mov	r0, r5
 800b87c:	f000 fa8d 	bl	800bd9a <memset>
	HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)jpeg_input_buffer, JPEG_BUFFER_SIZE);
 800b880:	4632      	mov	r2, r6
 800b882:	4629      	mov	r1, r5
 800b884:	4620      	mov	r0, r4
 800b886:	f7fa facf 	bl	8005e28 <HAL_JPEG_ConfigInputBuffer>
}
 800b88a:	bd70      	pop	{r4, r5, r6, pc}
 800b88c:	200065f4 	.word	0x200065f4

0800b890 <HAL_JPEG_DataReadyCallback>:

void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength) {
 800b890:	b508      	push	{r3, lr}
	OutputBufferAddress = JPEG_OUTPUT_DATA_BUFFER;
 800b892:	4b03      	ldr	r3, [pc, #12]	; (800b8a0 <HAL_JPEG_DataReadyCallback+0x10>)
 800b894:	4a03      	ldr	r2, [pc, #12]	; (800b8a4 <HAL_JPEG_DataReadyCallback+0x14>)
 800b896:	621a      	str	r2, [r3, #32]
	HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)jpeg_output_buffer, OutputBufferAddress);
 800b898:	6859      	ldr	r1, [r3, #4]
 800b89a:	f7fa fac8 	bl	8005e2e <HAL_JPEG_ConfigOutputBuffer>
}
 800b89e:	bd08      	pop	{r3, pc}
 800b8a0:	20000090 	.word	0x20000090
 800b8a4:	c0200000 	.word	0xc0200000

0800b8a8 <HAL_JPEG_DecodeCpltCallback>:

void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg) {
	JPEG_DECODE_COMPLETE = 1;
 800b8a8:	4b01      	ldr	r3, [pc, #4]	; (800b8b0 <HAL_JPEG_DecodeCpltCallback+0x8>)
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	605a      	str	r2, [r3, #4]
}
 800b8ae:	4770      	bx	lr
 800b8b0:	20001960 	.word	0x20001960

0800b8b4 <HAL_JPEG_InfoReadyCallback>:
		printf("\r\nError Code: Unknown");
	fflush(stdout);
}

/* Adjust the width to be a multiple of 8 or 16 when JPEG header has been parsed */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo) {
 800b8b4:	b508      	push	{r3, lr}
 800b8b6:	4608      	mov	r0, r1
	// Have to add padding for DMA2D
	if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING) {
 800b8b8:	684a      	ldr	r2, [r1, #4]
 800b8ba:	2a01      	cmp	r2, #1
 800b8bc:	d018      	beq.n	800b8f0 <HAL_JPEG_InfoReadyCallback+0x3c>

		if((pInfo->ImageHeight % 16) != 0)
			pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
	}

	if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING) {
 800b8be:	2a02      	cmp	r2, #2
 800b8c0:	d027      	beq.n	800b912 <HAL_JPEG_InfoReadyCallback+0x5e>

		if((pInfo->ImageHeight % 8) != 0)
			pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
	}

	if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING) {
 800b8c2:	b97a      	cbnz	r2, 800b8e4 <HAL_JPEG_InfoReadyCallback+0x30>
		if((pInfo->ImageWidth % 8) != 0)
 800b8c4:	68c3      	ldr	r3, [r0, #12]
 800b8c6:	f013 0f07 	tst.w	r3, #7
 800b8ca:	d003      	beq.n	800b8d4 <HAL_JPEG_InfoReadyCallback+0x20>
			pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 800b8cc:	f023 0307 	bic.w	r3, r3, #7
 800b8d0:	3308      	adds	r3, #8
 800b8d2:	60c3      	str	r3, [r0, #12]

		if((pInfo->ImageHeight % 8) != 0)
 800b8d4:	6883      	ldr	r3, [r0, #8]
 800b8d6:	f013 0f07 	tst.w	r3, #7
 800b8da:	d003      	beq.n	800b8e4 <HAL_JPEG_InfoReadyCallback+0x30>
			pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 800b8dc:	f023 0307 	bic.w	r3, r3, #7
 800b8e0:	3308      	adds	r3, #8
 800b8e2:	6083      	str	r3, [r0, #8]
	}

	if(JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb) != HAL_OK) {
 800b8e4:	4a15      	ldr	r2, [pc, #84]	; (800b93c <HAL_JPEG_InfoReadyCallback+0x88>)
 800b8e6:	4916      	ldr	r1, [pc, #88]	; (800b940 <HAL_JPEG_InfoReadyCallback+0x8c>)
 800b8e8:	f7fe fd1e 	bl	800a328 <JPEG_GetDecodeColorConvertFunc>
 800b8ec:	bb10      	cbnz	r0, 800b934 <HAL_JPEG_InfoReadyCallback+0x80>
		printf("Error getting DecodeColorConvertFunct\r\n");
		while(1);
	}
}
 800b8ee:	bd08      	pop	{r3, pc}
		if((pInfo->ImageWidth % 16) != 0)
 800b8f0:	68cb      	ldr	r3, [r1, #12]
 800b8f2:	f013 0f0f 	tst.w	r3, #15
 800b8f6:	d003      	beq.n	800b900 <HAL_JPEG_InfoReadyCallback+0x4c>
			pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800b8f8:	f023 030f 	bic.w	r3, r3, #15
 800b8fc:	3310      	adds	r3, #16
 800b8fe:	60cb      	str	r3, [r1, #12]
		if((pInfo->ImageHeight % 16) != 0)
 800b900:	6883      	ldr	r3, [r0, #8]
 800b902:	f013 0f0f 	tst.w	r3, #15
 800b906:	d0da      	beq.n	800b8be <HAL_JPEG_InfoReadyCallback+0xa>
			pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 800b908:	f023 030f 	bic.w	r3, r3, #15
 800b90c:	3310      	adds	r3, #16
 800b90e:	6083      	str	r3, [r0, #8]
 800b910:	e7d5      	b.n	800b8be <HAL_JPEG_InfoReadyCallback+0xa>
		if((pInfo->ImageWidth % 16) != 0)
 800b912:	68c3      	ldr	r3, [r0, #12]
 800b914:	f013 0f0f 	tst.w	r3, #15
 800b918:	d003      	beq.n	800b922 <HAL_JPEG_InfoReadyCallback+0x6e>
			pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800b91a:	f023 030f 	bic.w	r3, r3, #15
 800b91e:	3310      	adds	r3, #16
 800b920:	60c3      	str	r3, [r0, #12]
		if((pInfo->ImageHeight % 8) != 0)
 800b922:	6883      	ldr	r3, [r0, #8]
 800b924:	f013 0f07 	tst.w	r3, #7
 800b928:	d0cb      	beq.n	800b8c2 <HAL_JPEG_InfoReadyCallback+0xe>
			pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 800b92a:	f023 0307 	bic.w	r3, r3, #7
 800b92e:	3308      	adds	r3, #8
 800b930:	6083      	str	r3, [r0, #8]
 800b932:	e7c6      	b.n	800b8c2 <HAL_JPEG_InfoReadyCallback+0xe>
		printf("Error getting DecodeColorConvertFunct\r\n");
 800b934:	4803      	ldr	r0, [pc, #12]	; (800b944 <HAL_JPEG_InfoReadyCallback+0x90>)
 800b936:	f000 fb69 	bl	800c00c <puts>
		while(1);
 800b93a:	e7fe      	b.n	800b93a <HAL_JPEG_InfoReadyCallback+0x86>
 800b93c:	2000196c 	.word	0x2000196c
 800b940:	200465f4 	.word	0x200465f4
 800b944:	08011378 	.word	0x08011378

0800b948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b948:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b980 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b94c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b94e:	e003      	b.n	800b958 <LoopCopyDataInit>

0800b950 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b950:	4b0c      	ldr	r3, [pc, #48]	; (800b984 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b952:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b954:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b956:	3104      	adds	r1, #4

0800b958 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b958:	480b      	ldr	r0, [pc, #44]	; (800b988 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b95a:	4b0c      	ldr	r3, [pc, #48]	; (800b98c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b95c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b95e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b960:	d3f6      	bcc.n	800b950 <CopyDataInit>
  ldr  r2, =_sbss
 800b962:	4a0b      	ldr	r2, [pc, #44]	; (800b990 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b964:	e002      	b.n	800b96c <LoopFillZerobss>

0800b966 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b966:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b968:	f842 3b04 	str.w	r3, [r2], #4

0800b96c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b96c:	4b09      	ldr	r3, [pc, #36]	; (800b994 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b96e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b970:	d3f9      	bcc.n	800b966 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b972:	f7ff f8c1 	bl	800aaf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b976:	f000 f9db 	bl	800bd30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b97a:	f7ff f83f 	bl	800a9fc <main>
  bx  lr    
 800b97e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b980:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800b984:	0801145c 	.word	0x0801145c
  ldr  r0, =_sdata
 800b988:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b98c:	20000118 	.word	0x20000118
  ldr  r2, =_sbss
 800b990:	20000118 	.word	0x20000118
  ldr  r3, = _ebss
 800b994:	20046748 	.word	0x20046748

0800b998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b998:	e7fe      	b.n	800b998 <ADC_IRQHandler>
	...

0800b99c <__sflush_r>:
 800b99c:	898a      	ldrh	r2, [r1, #12]
 800b99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	0710      	lsls	r0, r2, #28
 800b9a6:	460c      	mov	r4, r1
 800b9a8:	d458      	bmi.n	800ba5c <__sflush_r+0xc0>
 800b9aa:	684b      	ldr	r3, [r1, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	dc05      	bgt.n	800b9bc <__sflush_r+0x20>
 800b9b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	dc02      	bgt.n	800b9bc <__sflush_r+0x20>
 800b9b6:	2000      	movs	r0, #0
 800b9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9be:	2e00      	cmp	r6, #0
 800b9c0:	d0f9      	beq.n	800b9b6 <__sflush_r+0x1a>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b9c8:	682f      	ldr	r7, [r5, #0]
 800b9ca:	602b      	str	r3, [r5, #0]
 800b9cc:	d032      	beq.n	800ba34 <__sflush_r+0x98>
 800b9ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	075a      	lsls	r2, r3, #29
 800b9d4:	d505      	bpl.n	800b9e2 <__sflush_r+0x46>
 800b9d6:	6863      	ldr	r3, [r4, #4]
 800b9d8:	1ac0      	subs	r0, r0, r3
 800b9da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9dc:	b10b      	cbz	r3, 800b9e2 <__sflush_r+0x46>
 800b9de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9e0:	1ac0      	subs	r0, r0, r3
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9e8:	6a21      	ldr	r1, [r4, #32]
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	47b0      	blx	r6
 800b9ee:	1c43      	adds	r3, r0, #1
 800b9f0:	89a3      	ldrh	r3, [r4, #12]
 800b9f2:	d106      	bne.n	800ba02 <__sflush_r+0x66>
 800b9f4:	6829      	ldr	r1, [r5, #0]
 800b9f6:	291d      	cmp	r1, #29
 800b9f8:	d82c      	bhi.n	800ba54 <__sflush_r+0xb8>
 800b9fa:	4a2a      	ldr	r2, [pc, #168]	; (800baa4 <__sflush_r+0x108>)
 800b9fc:	40ca      	lsrs	r2, r1
 800b9fe:	07d6      	lsls	r6, r2, #31
 800ba00:	d528      	bpl.n	800ba54 <__sflush_r+0xb8>
 800ba02:	2200      	movs	r2, #0
 800ba04:	6062      	str	r2, [r4, #4]
 800ba06:	04d9      	lsls	r1, r3, #19
 800ba08:	6922      	ldr	r2, [r4, #16]
 800ba0a:	6022      	str	r2, [r4, #0]
 800ba0c:	d504      	bpl.n	800ba18 <__sflush_r+0x7c>
 800ba0e:	1c42      	adds	r2, r0, #1
 800ba10:	d101      	bne.n	800ba16 <__sflush_r+0x7a>
 800ba12:	682b      	ldr	r3, [r5, #0]
 800ba14:	b903      	cbnz	r3, 800ba18 <__sflush_r+0x7c>
 800ba16:	6560      	str	r0, [r4, #84]	; 0x54
 800ba18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba1a:	602f      	str	r7, [r5, #0]
 800ba1c:	2900      	cmp	r1, #0
 800ba1e:	d0ca      	beq.n	800b9b6 <__sflush_r+0x1a>
 800ba20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba24:	4299      	cmp	r1, r3
 800ba26:	d002      	beq.n	800ba2e <__sflush_r+0x92>
 800ba28:	4628      	mov	r0, r5
 800ba2a:	f000 f9bf 	bl	800bdac <_free_r>
 800ba2e:	2000      	movs	r0, #0
 800ba30:	6360      	str	r0, [r4, #52]	; 0x34
 800ba32:	e7c1      	b.n	800b9b8 <__sflush_r+0x1c>
 800ba34:	6a21      	ldr	r1, [r4, #32]
 800ba36:	2301      	movs	r3, #1
 800ba38:	4628      	mov	r0, r5
 800ba3a:	47b0      	blx	r6
 800ba3c:	1c41      	adds	r1, r0, #1
 800ba3e:	d1c7      	bne.n	800b9d0 <__sflush_r+0x34>
 800ba40:	682b      	ldr	r3, [r5, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d0c4      	beq.n	800b9d0 <__sflush_r+0x34>
 800ba46:	2b1d      	cmp	r3, #29
 800ba48:	d001      	beq.n	800ba4e <__sflush_r+0xb2>
 800ba4a:	2b16      	cmp	r3, #22
 800ba4c:	d101      	bne.n	800ba52 <__sflush_r+0xb6>
 800ba4e:	602f      	str	r7, [r5, #0]
 800ba50:	e7b1      	b.n	800b9b6 <__sflush_r+0x1a>
 800ba52:	89a3      	ldrh	r3, [r4, #12]
 800ba54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba58:	81a3      	strh	r3, [r4, #12]
 800ba5a:	e7ad      	b.n	800b9b8 <__sflush_r+0x1c>
 800ba5c:	690f      	ldr	r7, [r1, #16]
 800ba5e:	2f00      	cmp	r7, #0
 800ba60:	d0a9      	beq.n	800b9b6 <__sflush_r+0x1a>
 800ba62:	0793      	lsls	r3, r2, #30
 800ba64:	680e      	ldr	r6, [r1, #0]
 800ba66:	bf08      	it	eq
 800ba68:	694b      	ldreq	r3, [r1, #20]
 800ba6a:	600f      	str	r7, [r1, #0]
 800ba6c:	bf18      	it	ne
 800ba6e:	2300      	movne	r3, #0
 800ba70:	eba6 0807 	sub.w	r8, r6, r7
 800ba74:	608b      	str	r3, [r1, #8]
 800ba76:	f1b8 0f00 	cmp.w	r8, #0
 800ba7a:	dd9c      	ble.n	800b9b6 <__sflush_r+0x1a>
 800ba7c:	6a21      	ldr	r1, [r4, #32]
 800ba7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba80:	4643      	mov	r3, r8
 800ba82:	463a      	mov	r2, r7
 800ba84:	4628      	mov	r0, r5
 800ba86:	47b0      	blx	r6
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	dc06      	bgt.n	800ba9a <__sflush_r+0xfe>
 800ba8c:	89a3      	ldrh	r3, [r4, #12]
 800ba8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba92:	81a3      	strh	r3, [r4, #12]
 800ba94:	f04f 30ff 	mov.w	r0, #4294967295
 800ba98:	e78e      	b.n	800b9b8 <__sflush_r+0x1c>
 800ba9a:	4407      	add	r7, r0
 800ba9c:	eba8 0800 	sub.w	r8, r8, r0
 800baa0:	e7e9      	b.n	800ba76 <__sflush_r+0xda>
 800baa2:	bf00      	nop
 800baa4:	20400001 	.word	0x20400001

0800baa8 <_fflush_r>:
 800baa8:	b538      	push	{r3, r4, r5, lr}
 800baaa:	690b      	ldr	r3, [r1, #16]
 800baac:	4605      	mov	r5, r0
 800baae:	460c      	mov	r4, r1
 800bab0:	b913      	cbnz	r3, 800bab8 <_fflush_r+0x10>
 800bab2:	2500      	movs	r5, #0
 800bab4:	4628      	mov	r0, r5
 800bab6:	bd38      	pop	{r3, r4, r5, pc}
 800bab8:	b118      	cbz	r0, 800bac2 <_fflush_r+0x1a>
 800baba:	6983      	ldr	r3, [r0, #24]
 800babc:	b90b      	cbnz	r3, 800bac2 <_fflush_r+0x1a>
 800babe:	f000 f899 	bl	800bbf4 <__sinit>
 800bac2:	4b14      	ldr	r3, [pc, #80]	; (800bb14 <_fflush_r+0x6c>)
 800bac4:	429c      	cmp	r4, r3
 800bac6:	d11b      	bne.n	800bb00 <_fflush_r+0x58>
 800bac8:	686c      	ldr	r4, [r5, #4]
 800baca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d0ef      	beq.n	800bab2 <_fflush_r+0xa>
 800bad2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bad4:	07d0      	lsls	r0, r2, #31
 800bad6:	d404      	bmi.n	800bae2 <_fflush_r+0x3a>
 800bad8:	0599      	lsls	r1, r3, #22
 800bada:	d402      	bmi.n	800bae2 <_fflush_r+0x3a>
 800badc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bade:	f000 f94c 	bl	800bd7a <__retarget_lock_acquire_recursive>
 800bae2:	4628      	mov	r0, r5
 800bae4:	4621      	mov	r1, r4
 800bae6:	f7ff ff59 	bl	800b99c <__sflush_r>
 800baea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800baec:	07da      	lsls	r2, r3, #31
 800baee:	4605      	mov	r5, r0
 800baf0:	d4e0      	bmi.n	800bab4 <_fflush_r+0xc>
 800baf2:	89a3      	ldrh	r3, [r4, #12]
 800baf4:	059b      	lsls	r3, r3, #22
 800baf6:	d4dd      	bmi.n	800bab4 <_fflush_r+0xc>
 800baf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bafa:	f000 f93f 	bl	800bd7c <__retarget_lock_release_recursive>
 800bafe:	e7d9      	b.n	800bab4 <_fflush_r+0xc>
 800bb00:	4b05      	ldr	r3, [pc, #20]	; (800bb18 <_fflush_r+0x70>)
 800bb02:	429c      	cmp	r4, r3
 800bb04:	d101      	bne.n	800bb0a <_fflush_r+0x62>
 800bb06:	68ac      	ldr	r4, [r5, #8]
 800bb08:	e7df      	b.n	800baca <_fflush_r+0x22>
 800bb0a:	4b04      	ldr	r3, [pc, #16]	; (800bb1c <_fflush_r+0x74>)
 800bb0c:	429c      	cmp	r4, r3
 800bb0e:	bf08      	it	eq
 800bb10:	68ec      	ldreq	r4, [r5, #12]
 800bb12:	e7da      	b.n	800baca <_fflush_r+0x22>
 800bb14:	080113dc 	.word	0x080113dc
 800bb18:	080113fc 	.word	0x080113fc
 800bb1c:	080113bc 	.word	0x080113bc

0800bb20 <fflush>:
 800bb20:	4601      	mov	r1, r0
 800bb22:	b920      	cbnz	r0, 800bb2e <fflush+0xe>
 800bb24:	4b04      	ldr	r3, [pc, #16]	; (800bb38 <fflush+0x18>)
 800bb26:	4905      	ldr	r1, [pc, #20]	; (800bb3c <fflush+0x1c>)
 800bb28:	6818      	ldr	r0, [r3, #0]
 800bb2a:	f000 b8e1 	b.w	800bcf0 <_fwalk_reent>
 800bb2e:	4b04      	ldr	r3, [pc, #16]	; (800bb40 <fflush+0x20>)
 800bb30:	6818      	ldr	r0, [r3, #0]
 800bb32:	f7ff bfb9 	b.w	800baa8 <_fflush_r>
 800bb36:	bf00      	nop
 800bb38:	0801141c 	.word	0x0801141c
 800bb3c:	0800baa9 	.word	0x0800baa9
 800bb40:	200000b4 	.word	0x200000b4

0800bb44 <std>:
 800bb44:	2300      	movs	r3, #0
 800bb46:	b510      	push	{r4, lr}
 800bb48:	4604      	mov	r4, r0
 800bb4a:	e9c0 3300 	strd	r3, r3, [r0]
 800bb4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb52:	6083      	str	r3, [r0, #8]
 800bb54:	8181      	strh	r1, [r0, #12]
 800bb56:	6643      	str	r3, [r0, #100]	; 0x64
 800bb58:	81c2      	strh	r2, [r0, #14]
 800bb5a:	6183      	str	r3, [r0, #24]
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	2208      	movs	r2, #8
 800bb60:	305c      	adds	r0, #92	; 0x5c
 800bb62:	f000 f91a 	bl	800bd9a <memset>
 800bb66:	4b05      	ldr	r3, [pc, #20]	; (800bb7c <std+0x38>)
 800bb68:	6263      	str	r3, [r4, #36]	; 0x24
 800bb6a:	4b05      	ldr	r3, [pc, #20]	; (800bb80 <std+0x3c>)
 800bb6c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb6e:	4b05      	ldr	r3, [pc, #20]	; (800bb84 <std+0x40>)
 800bb70:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb72:	4b05      	ldr	r3, [pc, #20]	; (800bb88 <std+0x44>)
 800bb74:	6224      	str	r4, [r4, #32]
 800bb76:	6323      	str	r3, [r4, #48]	; 0x30
 800bb78:	bd10      	pop	{r4, pc}
 800bb7a:	bf00      	nop
 800bb7c:	0800c03d 	.word	0x0800c03d
 800bb80:	0800c05f 	.word	0x0800c05f
 800bb84:	0800c097 	.word	0x0800c097
 800bb88:	0800c0bb 	.word	0x0800c0bb

0800bb8c <_cleanup_r>:
 800bb8c:	4901      	ldr	r1, [pc, #4]	; (800bb94 <_cleanup_r+0x8>)
 800bb8e:	f000 b8af 	b.w	800bcf0 <_fwalk_reent>
 800bb92:	bf00      	nop
 800bb94:	0800baa9 	.word	0x0800baa9

0800bb98 <__sfmoreglue>:
 800bb98:	b570      	push	{r4, r5, r6, lr}
 800bb9a:	1e4a      	subs	r2, r1, #1
 800bb9c:	2568      	movs	r5, #104	; 0x68
 800bb9e:	4355      	muls	r5, r2
 800bba0:	460e      	mov	r6, r1
 800bba2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bba6:	f000 f951 	bl	800be4c <_malloc_r>
 800bbaa:	4604      	mov	r4, r0
 800bbac:	b140      	cbz	r0, 800bbc0 <__sfmoreglue+0x28>
 800bbae:	2100      	movs	r1, #0
 800bbb0:	e9c0 1600 	strd	r1, r6, [r0]
 800bbb4:	300c      	adds	r0, #12
 800bbb6:	60a0      	str	r0, [r4, #8]
 800bbb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bbbc:	f000 f8ed 	bl	800bd9a <memset>
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	bd70      	pop	{r4, r5, r6, pc}

0800bbc4 <__sfp_lock_acquire>:
 800bbc4:	4801      	ldr	r0, [pc, #4]	; (800bbcc <__sfp_lock_acquire+0x8>)
 800bbc6:	f000 b8d8 	b.w	800bd7a <__retarget_lock_acquire_recursive>
 800bbca:	bf00      	nop
 800bbcc:	20046740 	.word	0x20046740

0800bbd0 <__sfp_lock_release>:
 800bbd0:	4801      	ldr	r0, [pc, #4]	; (800bbd8 <__sfp_lock_release+0x8>)
 800bbd2:	f000 b8d3 	b.w	800bd7c <__retarget_lock_release_recursive>
 800bbd6:	bf00      	nop
 800bbd8:	20046740 	.word	0x20046740

0800bbdc <__sinit_lock_acquire>:
 800bbdc:	4801      	ldr	r0, [pc, #4]	; (800bbe4 <__sinit_lock_acquire+0x8>)
 800bbde:	f000 b8cc 	b.w	800bd7a <__retarget_lock_acquire_recursive>
 800bbe2:	bf00      	nop
 800bbe4:	2004673b 	.word	0x2004673b

0800bbe8 <__sinit_lock_release>:
 800bbe8:	4801      	ldr	r0, [pc, #4]	; (800bbf0 <__sinit_lock_release+0x8>)
 800bbea:	f000 b8c7 	b.w	800bd7c <__retarget_lock_release_recursive>
 800bbee:	bf00      	nop
 800bbf0:	2004673b 	.word	0x2004673b

0800bbf4 <__sinit>:
 800bbf4:	b510      	push	{r4, lr}
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	f7ff fff0 	bl	800bbdc <__sinit_lock_acquire>
 800bbfc:	69a3      	ldr	r3, [r4, #24]
 800bbfe:	b11b      	cbz	r3, 800bc08 <__sinit+0x14>
 800bc00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc04:	f7ff bff0 	b.w	800bbe8 <__sinit_lock_release>
 800bc08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc0c:	6523      	str	r3, [r4, #80]	; 0x50
 800bc0e:	4b13      	ldr	r3, [pc, #76]	; (800bc5c <__sinit+0x68>)
 800bc10:	4a13      	ldr	r2, [pc, #76]	; (800bc60 <__sinit+0x6c>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc16:	42a3      	cmp	r3, r4
 800bc18:	bf04      	itt	eq
 800bc1a:	2301      	moveq	r3, #1
 800bc1c:	61a3      	streq	r3, [r4, #24]
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f000 f820 	bl	800bc64 <__sfp>
 800bc24:	6060      	str	r0, [r4, #4]
 800bc26:	4620      	mov	r0, r4
 800bc28:	f000 f81c 	bl	800bc64 <__sfp>
 800bc2c:	60a0      	str	r0, [r4, #8]
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f000 f818 	bl	800bc64 <__sfp>
 800bc34:	2200      	movs	r2, #0
 800bc36:	60e0      	str	r0, [r4, #12]
 800bc38:	2104      	movs	r1, #4
 800bc3a:	6860      	ldr	r0, [r4, #4]
 800bc3c:	f7ff ff82 	bl	800bb44 <std>
 800bc40:	68a0      	ldr	r0, [r4, #8]
 800bc42:	2201      	movs	r2, #1
 800bc44:	2109      	movs	r1, #9
 800bc46:	f7ff ff7d 	bl	800bb44 <std>
 800bc4a:	68e0      	ldr	r0, [r4, #12]
 800bc4c:	2202      	movs	r2, #2
 800bc4e:	2112      	movs	r1, #18
 800bc50:	f7ff ff78 	bl	800bb44 <std>
 800bc54:	2301      	movs	r3, #1
 800bc56:	61a3      	str	r3, [r4, #24]
 800bc58:	e7d2      	b.n	800bc00 <__sinit+0xc>
 800bc5a:	bf00      	nop
 800bc5c:	0801141c 	.word	0x0801141c
 800bc60:	0800bb8d 	.word	0x0800bb8d

0800bc64 <__sfp>:
 800bc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc66:	4607      	mov	r7, r0
 800bc68:	f7ff ffac 	bl	800bbc4 <__sfp_lock_acquire>
 800bc6c:	4b1e      	ldr	r3, [pc, #120]	; (800bce8 <__sfp+0x84>)
 800bc6e:	681e      	ldr	r6, [r3, #0]
 800bc70:	69b3      	ldr	r3, [r6, #24]
 800bc72:	b913      	cbnz	r3, 800bc7a <__sfp+0x16>
 800bc74:	4630      	mov	r0, r6
 800bc76:	f7ff ffbd 	bl	800bbf4 <__sinit>
 800bc7a:	3648      	adds	r6, #72	; 0x48
 800bc7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc80:	3b01      	subs	r3, #1
 800bc82:	d503      	bpl.n	800bc8c <__sfp+0x28>
 800bc84:	6833      	ldr	r3, [r6, #0]
 800bc86:	b30b      	cbz	r3, 800bccc <__sfp+0x68>
 800bc88:	6836      	ldr	r6, [r6, #0]
 800bc8a:	e7f7      	b.n	800bc7c <__sfp+0x18>
 800bc8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc90:	b9d5      	cbnz	r5, 800bcc8 <__sfp+0x64>
 800bc92:	4b16      	ldr	r3, [pc, #88]	; (800bcec <__sfp+0x88>)
 800bc94:	60e3      	str	r3, [r4, #12]
 800bc96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc9a:	6665      	str	r5, [r4, #100]	; 0x64
 800bc9c:	f000 f86c 	bl	800bd78 <__retarget_lock_init_recursive>
 800bca0:	f7ff ff96 	bl	800bbd0 <__sfp_lock_release>
 800bca4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bca8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bcac:	6025      	str	r5, [r4, #0]
 800bcae:	61a5      	str	r5, [r4, #24]
 800bcb0:	2208      	movs	r2, #8
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bcb8:	f000 f86f 	bl	800bd9a <memset>
 800bcbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bcc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcc8:	3468      	adds	r4, #104	; 0x68
 800bcca:	e7d9      	b.n	800bc80 <__sfp+0x1c>
 800bccc:	2104      	movs	r1, #4
 800bcce:	4638      	mov	r0, r7
 800bcd0:	f7ff ff62 	bl	800bb98 <__sfmoreglue>
 800bcd4:	4604      	mov	r4, r0
 800bcd6:	6030      	str	r0, [r6, #0]
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d1d5      	bne.n	800bc88 <__sfp+0x24>
 800bcdc:	f7ff ff78 	bl	800bbd0 <__sfp_lock_release>
 800bce0:	230c      	movs	r3, #12
 800bce2:	603b      	str	r3, [r7, #0]
 800bce4:	e7ee      	b.n	800bcc4 <__sfp+0x60>
 800bce6:	bf00      	nop
 800bce8:	0801141c 	.word	0x0801141c
 800bcec:	ffff0001 	.word	0xffff0001

0800bcf0 <_fwalk_reent>:
 800bcf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcf4:	4606      	mov	r6, r0
 800bcf6:	4688      	mov	r8, r1
 800bcf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bcfc:	2700      	movs	r7, #0
 800bcfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd02:	f1b9 0901 	subs.w	r9, r9, #1
 800bd06:	d505      	bpl.n	800bd14 <_fwalk_reent+0x24>
 800bd08:	6824      	ldr	r4, [r4, #0]
 800bd0a:	2c00      	cmp	r4, #0
 800bd0c:	d1f7      	bne.n	800bcfe <_fwalk_reent+0xe>
 800bd0e:	4638      	mov	r0, r7
 800bd10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd14:	89ab      	ldrh	r3, [r5, #12]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d907      	bls.n	800bd2a <_fwalk_reent+0x3a>
 800bd1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	d003      	beq.n	800bd2a <_fwalk_reent+0x3a>
 800bd22:	4629      	mov	r1, r5
 800bd24:	4630      	mov	r0, r6
 800bd26:	47c0      	blx	r8
 800bd28:	4307      	orrs	r7, r0
 800bd2a:	3568      	adds	r5, #104	; 0x68
 800bd2c:	e7e9      	b.n	800bd02 <_fwalk_reent+0x12>
	...

0800bd30 <__libc_init_array>:
 800bd30:	b570      	push	{r4, r5, r6, lr}
 800bd32:	4d0d      	ldr	r5, [pc, #52]	; (800bd68 <__libc_init_array+0x38>)
 800bd34:	4c0d      	ldr	r4, [pc, #52]	; (800bd6c <__libc_init_array+0x3c>)
 800bd36:	1b64      	subs	r4, r4, r5
 800bd38:	10a4      	asrs	r4, r4, #2
 800bd3a:	2600      	movs	r6, #0
 800bd3c:	42a6      	cmp	r6, r4
 800bd3e:	d109      	bne.n	800bd54 <__libc_init_array+0x24>
 800bd40:	4d0b      	ldr	r5, [pc, #44]	; (800bd70 <__libc_init_array+0x40>)
 800bd42:	4c0c      	ldr	r4, [pc, #48]	; (800bd74 <__libc_init_array+0x44>)
 800bd44:	f000 fe72 	bl	800ca2c <_init>
 800bd48:	1b64      	subs	r4, r4, r5
 800bd4a:	10a4      	asrs	r4, r4, #2
 800bd4c:	2600      	movs	r6, #0
 800bd4e:	42a6      	cmp	r6, r4
 800bd50:	d105      	bne.n	800bd5e <__libc_init_array+0x2e>
 800bd52:	bd70      	pop	{r4, r5, r6, pc}
 800bd54:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd58:	4798      	blx	r3
 800bd5a:	3601      	adds	r6, #1
 800bd5c:	e7ee      	b.n	800bd3c <__libc_init_array+0xc>
 800bd5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd62:	4798      	blx	r3
 800bd64:	3601      	adds	r6, #1
 800bd66:	e7f2      	b.n	800bd4e <__libc_init_array+0x1e>
 800bd68:	08011454 	.word	0x08011454
 800bd6c:	08011454 	.word	0x08011454
 800bd70:	08011454 	.word	0x08011454
 800bd74:	08011458 	.word	0x08011458

0800bd78 <__retarget_lock_init_recursive>:
 800bd78:	4770      	bx	lr

0800bd7a <__retarget_lock_acquire_recursive>:
 800bd7a:	4770      	bx	lr

0800bd7c <__retarget_lock_release_recursive>:
 800bd7c:	4770      	bx	lr

0800bd7e <memcpy>:
 800bd7e:	440a      	add	r2, r1
 800bd80:	4291      	cmp	r1, r2
 800bd82:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd86:	d100      	bne.n	800bd8a <memcpy+0xc>
 800bd88:	4770      	bx	lr
 800bd8a:	b510      	push	{r4, lr}
 800bd8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd90:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd94:	4291      	cmp	r1, r2
 800bd96:	d1f9      	bne.n	800bd8c <memcpy+0xe>
 800bd98:	bd10      	pop	{r4, pc}

0800bd9a <memset>:
 800bd9a:	4402      	add	r2, r0
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d100      	bne.n	800bda4 <memset+0xa>
 800bda2:	4770      	bx	lr
 800bda4:	f803 1b01 	strb.w	r1, [r3], #1
 800bda8:	e7f9      	b.n	800bd9e <memset+0x4>
	...

0800bdac <_free_r>:
 800bdac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdae:	2900      	cmp	r1, #0
 800bdb0:	d048      	beq.n	800be44 <_free_r+0x98>
 800bdb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdb6:	9001      	str	r0, [sp, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f1a1 0404 	sub.w	r4, r1, #4
 800bdbe:	bfb8      	it	lt
 800bdc0:	18e4      	addlt	r4, r4, r3
 800bdc2:	f000 fad7 	bl	800c374 <__malloc_lock>
 800bdc6:	4a20      	ldr	r2, [pc, #128]	; (800be48 <_free_r+0x9c>)
 800bdc8:	9801      	ldr	r0, [sp, #4]
 800bdca:	6813      	ldr	r3, [r2, #0]
 800bdcc:	4615      	mov	r5, r2
 800bdce:	b933      	cbnz	r3, 800bdde <_free_r+0x32>
 800bdd0:	6063      	str	r3, [r4, #4]
 800bdd2:	6014      	str	r4, [r2, #0]
 800bdd4:	b003      	add	sp, #12
 800bdd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdda:	f000 bad1 	b.w	800c380 <__malloc_unlock>
 800bdde:	42a3      	cmp	r3, r4
 800bde0:	d90b      	bls.n	800bdfa <_free_r+0x4e>
 800bde2:	6821      	ldr	r1, [r4, #0]
 800bde4:	1862      	adds	r2, r4, r1
 800bde6:	4293      	cmp	r3, r2
 800bde8:	bf04      	itt	eq
 800bdea:	681a      	ldreq	r2, [r3, #0]
 800bdec:	685b      	ldreq	r3, [r3, #4]
 800bdee:	6063      	str	r3, [r4, #4]
 800bdf0:	bf04      	itt	eq
 800bdf2:	1852      	addeq	r2, r2, r1
 800bdf4:	6022      	streq	r2, [r4, #0]
 800bdf6:	602c      	str	r4, [r5, #0]
 800bdf8:	e7ec      	b.n	800bdd4 <_free_r+0x28>
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	b10b      	cbz	r3, 800be04 <_free_r+0x58>
 800be00:	42a3      	cmp	r3, r4
 800be02:	d9fa      	bls.n	800bdfa <_free_r+0x4e>
 800be04:	6811      	ldr	r1, [r2, #0]
 800be06:	1855      	adds	r5, r2, r1
 800be08:	42a5      	cmp	r5, r4
 800be0a:	d10b      	bne.n	800be24 <_free_r+0x78>
 800be0c:	6824      	ldr	r4, [r4, #0]
 800be0e:	4421      	add	r1, r4
 800be10:	1854      	adds	r4, r2, r1
 800be12:	42a3      	cmp	r3, r4
 800be14:	6011      	str	r1, [r2, #0]
 800be16:	d1dd      	bne.n	800bdd4 <_free_r+0x28>
 800be18:	681c      	ldr	r4, [r3, #0]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	6053      	str	r3, [r2, #4]
 800be1e:	4421      	add	r1, r4
 800be20:	6011      	str	r1, [r2, #0]
 800be22:	e7d7      	b.n	800bdd4 <_free_r+0x28>
 800be24:	d902      	bls.n	800be2c <_free_r+0x80>
 800be26:	230c      	movs	r3, #12
 800be28:	6003      	str	r3, [r0, #0]
 800be2a:	e7d3      	b.n	800bdd4 <_free_r+0x28>
 800be2c:	6825      	ldr	r5, [r4, #0]
 800be2e:	1961      	adds	r1, r4, r5
 800be30:	428b      	cmp	r3, r1
 800be32:	bf04      	itt	eq
 800be34:	6819      	ldreq	r1, [r3, #0]
 800be36:	685b      	ldreq	r3, [r3, #4]
 800be38:	6063      	str	r3, [r4, #4]
 800be3a:	bf04      	itt	eq
 800be3c:	1949      	addeq	r1, r1, r5
 800be3e:	6021      	streq	r1, [r4, #0]
 800be40:	6054      	str	r4, [r2, #4]
 800be42:	e7c7      	b.n	800bdd4 <_free_r+0x28>
 800be44:	b003      	add	sp, #12
 800be46:	bd30      	pop	{r4, r5, pc}
 800be48:	20001974 	.word	0x20001974

0800be4c <_malloc_r>:
 800be4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4e:	1ccd      	adds	r5, r1, #3
 800be50:	f025 0503 	bic.w	r5, r5, #3
 800be54:	3508      	adds	r5, #8
 800be56:	2d0c      	cmp	r5, #12
 800be58:	bf38      	it	cc
 800be5a:	250c      	movcc	r5, #12
 800be5c:	2d00      	cmp	r5, #0
 800be5e:	4606      	mov	r6, r0
 800be60:	db01      	blt.n	800be66 <_malloc_r+0x1a>
 800be62:	42a9      	cmp	r1, r5
 800be64:	d903      	bls.n	800be6e <_malloc_r+0x22>
 800be66:	230c      	movs	r3, #12
 800be68:	6033      	str	r3, [r6, #0]
 800be6a:	2000      	movs	r0, #0
 800be6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be6e:	f000 fa81 	bl	800c374 <__malloc_lock>
 800be72:	4921      	ldr	r1, [pc, #132]	; (800bef8 <_malloc_r+0xac>)
 800be74:	680a      	ldr	r2, [r1, #0]
 800be76:	4614      	mov	r4, r2
 800be78:	b99c      	cbnz	r4, 800bea2 <_malloc_r+0x56>
 800be7a:	4f20      	ldr	r7, [pc, #128]	; (800befc <_malloc_r+0xb0>)
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	b923      	cbnz	r3, 800be8a <_malloc_r+0x3e>
 800be80:	4621      	mov	r1, r4
 800be82:	4630      	mov	r0, r6
 800be84:	f000 f8ca 	bl	800c01c <_sbrk_r>
 800be88:	6038      	str	r0, [r7, #0]
 800be8a:	4629      	mov	r1, r5
 800be8c:	4630      	mov	r0, r6
 800be8e:	f000 f8c5 	bl	800c01c <_sbrk_r>
 800be92:	1c43      	adds	r3, r0, #1
 800be94:	d123      	bne.n	800bede <_malloc_r+0x92>
 800be96:	230c      	movs	r3, #12
 800be98:	6033      	str	r3, [r6, #0]
 800be9a:	4630      	mov	r0, r6
 800be9c:	f000 fa70 	bl	800c380 <__malloc_unlock>
 800bea0:	e7e3      	b.n	800be6a <_malloc_r+0x1e>
 800bea2:	6823      	ldr	r3, [r4, #0]
 800bea4:	1b5b      	subs	r3, r3, r5
 800bea6:	d417      	bmi.n	800bed8 <_malloc_r+0x8c>
 800bea8:	2b0b      	cmp	r3, #11
 800beaa:	d903      	bls.n	800beb4 <_malloc_r+0x68>
 800beac:	6023      	str	r3, [r4, #0]
 800beae:	441c      	add	r4, r3
 800beb0:	6025      	str	r5, [r4, #0]
 800beb2:	e004      	b.n	800bebe <_malloc_r+0x72>
 800beb4:	6863      	ldr	r3, [r4, #4]
 800beb6:	42a2      	cmp	r2, r4
 800beb8:	bf0c      	ite	eq
 800beba:	600b      	streq	r3, [r1, #0]
 800bebc:	6053      	strne	r3, [r2, #4]
 800bebe:	4630      	mov	r0, r6
 800bec0:	f000 fa5e 	bl	800c380 <__malloc_unlock>
 800bec4:	f104 000b 	add.w	r0, r4, #11
 800bec8:	1d23      	adds	r3, r4, #4
 800beca:	f020 0007 	bic.w	r0, r0, #7
 800bece:	1ac2      	subs	r2, r0, r3
 800bed0:	d0cc      	beq.n	800be6c <_malloc_r+0x20>
 800bed2:	1a1b      	subs	r3, r3, r0
 800bed4:	50a3      	str	r3, [r4, r2]
 800bed6:	e7c9      	b.n	800be6c <_malloc_r+0x20>
 800bed8:	4622      	mov	r2, r4
 800beda:	6864      	ldr	r4, [r4, #4]
 800bedc:	e7cc      	b.n	800be78 <_malloc_r+0x2c>
 800bede:	1cc4      	adds	r4, r0, #3
 800bee0:	f024 0403 	bic.w	r4, r4, #3
 800bee4:	42a0      	cmp	r0, r4
 800bee6:	d0e3      	beq.n	800beb0 <_malloc_r+0x64>
 800bee8:	1a21      	subs	r1, r4, r0
 800beea:	4630      	mov	r0, r6
 800beec:	f000 f896 	bl	800c01c <_sbrk_r>
 800bef0:	3001      	adds	r0, #1
 800bef2:	d1dd      	bne.n	800beb0 <_malloc_r+0x64>
 800bef4:	e7cf      	b.n	800be96 <_malloc_r+0x4a>
 800bef6:	bf00      	nop
 800bef8:	20001974 	.word	0x20001974
 800befc:	20001978 	.word	0x20001978

0800bf00 <iprintf>:
 800bf00:	b40f      	push	{r0, r1, r2, r3}
 800bf02:	4b0a      	ldr	r3, [pc, #40]	; (800bf2c <iprintf+0x2c>)
 800bf04:	b513      	push	{r0, r1, r4, lr}
 800bf06:	681c      	ldr	r4, [r3, #0]
 800bf08:	b124      	cbz	r4, 800bf14 <iprintf+0x14>
 800bf0a:	69a3      	ldr	r3, [r4, #24]
 800bf0c:	b913      	cbnz	r3, 800bf14 <iprintf+0x14>
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f7ff fe70 	bl	800bbf4 <__sinit>
 800bf14:	ab05      	add	r3, sp, #20
 800bf16:	9a04      	ldr	r2, [sp, #16]
 800bf18:	68a1      	ldr	r1, [r4, #8]
 800bf1a:	9301      	str	r3, [sp, #4]
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	f000 fa5f 	bl	800c3e0 <_vfiprintf_r>
 800bf22:	b002      	add	sp, #8
 800bf24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf28:	b004      	add	sp, #16
 800bf2a:	4770      	bx	lr
 800bf2c:	200000b4 	.word	0x200000b4

0800bf30 <_puts_r>:
 800bf30:	b570      	push	{r4, r5, r6, lr}
 800bf32:	460e      	mov	r6, r1
 800bf34:	4605      	mov	r5, r0
 800bf36:	b118      	cbz	r0, 800bf40 <_puts_r+0x10>
 800bf38:	6983      	ldr	r3, [r0, #24]
 800bf3a:	b90b      	cbnz	r3, 800bf40 <_puts_r+0x10>
 800bf3c:	f7ff fe5a 	bl	800bbf4 <__sinit>
 800bf40:	69ab      	ldr	r3, [r5, #24]
 800bf42:	68ac      	ldr	r4, [r5, #8]
 800bf44:	b913      	cbnz	r3, 800bf4c <_puts_r+0x1c>
 800bf46:	4628      	mov	r0, r5
 800bf48:	f7ff fe54 	bl	800bbf4 <__sinit>
 800bf4c:	4b2c      	ldr	r3, [pc, #176]	; (800c000 <_puts_r+0xd0>)
 800bf4e:	429c      	cmp	r4, r3
 800bf50:	d120      	bne.n	800bf94 <_puts_r+0x64>
 800bf52:	686c      	ldr	r4, [r5, #4]
 800bf54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf56:	07db      	lsls	r3, r3, #31
 800bf58:	d405      	bmi.n	800bf66 <_puts_r+0x36>
 800bf5a:	89a3      	ldrh	r3, [r4, #12]
 800bf5c:	0598      	lsls	r0, r3, #22
 800bf5e:	d402      	bmi.n	800bf66 <_puts_r+0x36>
 800bf60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf62:	f7ff ff0a 	bl	800bd7a <__retarget_lock_acquire_recursive>
 800bf66:	89a3      	ldrh	r3, [r4, #12]
 800bf68:	0719      	lsls	r1, r3, #28
 800bf6a:	d51d      	bpl.n	800bfa8 <_puts_r+0x78>
 800bf6c:	6923      	ldr	r3, [r4, #16]
 800bf6e:	b1db      	cbz	r3, 800bfa8 <_puts_r+0x78>
 800bf70:	3e01      	subs	r6, #1
 800bf72:	68a3      	ldr	r3, [r4, #8]
 800bf74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf78:	3b01      	subs	r3, #1
 800bf7a:	60a3      	str	r3, [r4, #8]
 800bf7c:	bb39      	cbnz	r1, 800bfce <_puts_r+0x9e>
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	da38      	bge.n	800bff4 <_puts_r+0xc4>
 800bf82:	4622      	mov	r2, r4
 800bf84:	210a      	movs	r1, #10
 800bf86:	4628      	mov	r0, r5
 800bf88:	f000 f89c 	bl	800c0c4 <__swbuf_r>
 800bf8c:	3001      	adds	r0, #1
 800bf8e:	d011      	beq.n	800bfb4 <_puts_r+0x84>
 800bf90:	250a      	movs	r5, #10
 800bf92:	e011      	b.n	800bfb8 <_puts_r+0x88>
 800bf94:	4b1b      	ldr	r3, [pc, #108]	; (800c004 <_puts_r+0xd4>)
 800bf96:	429c      	cmp	r4, r3
 800bf98:	d101      	bne.n	800bf9e <_puts_r+0x6e>
 800bf9a:	68ac      	ldr	r4, [r5, #8]
 800bf9c:	e7da      	b.n	800bf54 <_puts_r+0x24>
 800bf9e:	4b1a      	ldr	r3, [pc, #104]	; (800c008 <_puts_r+0xd8>)
 800bfa0:	429c      	cmp	r4, r3
 800bfa2:	bf08      	it	eq
 800bfa4:	68ec      	ldreq	r4, [r5, #12]
 800bfa6:	e7d5      	b.n	800bf54 <_puts_r+0x24>
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	4628      	mov	r0, r5
 800bfac:	f000 f8ee 	bl	800c18c <__swsetup_r>
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	d0dd      	beq.n	800bf70 <_puts_r+0x40>
 800bfb4:	f04f 35ff 	mov.w	r5, #4294967295
 800bfb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfba:	07da      	lsls	r2, r3, #31
 800bfbc:	d405      	bmi.n	800bfca <_puts_r+0x9a>
 800bfbe:	89a3      	ldrh	r3, [r4, #12]
 800bfc0:	059b      	lsls	r3, r3, #22
 800bfc2:	d402      	bmi.n	800bfca <_puts_r+0x9a>
 800bfc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfc6:	f7ff fed9 	bl	800bd7c <__retarget_lock_release_recursive>
 800bfca:	4628      	mov	r0, r5
 800bfcc:	bd70      	pop	{r4, r5, r6, pc}
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	da04      	bge.n	800bfdc <_puts_r+0xac>
 800bfd2:	69a2      	ldr	r2, [r4, #24]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	dc06      	bgt.n	800bfe6 <_puts_r+0xb6>
 800bfd8:	290a      	cmp	r1, #10
 800bfda:	d004      	beq.n	800bfe6 <_puts_r+0xb6>
 800bfdc:	6823      	ldr	r3, [r4, #0]
 800bfde:	1c5a      	adds	r2, r3, #1
 800bfe0:	6022      	str	r2, [r4, #0]
 800bfe2:	7019      	strb	r1, [r3, #0]
 800bfe4:	e7c5      	b.n	800bf72 <_puts_r+0x42>
 800bfe6:	4622      	mov	r2, r4
 800bfe8:	4628      	mov	r0, r5
 800bfea:	f000 f86b 	bl	800c0c4 <__swbuf_r>
 800bfee:	3001      	adds	r0, #1
 800bff0:	d1bf      	bne.n	800bf72 <_puts_r+0x42>
 800bff2:	e7df      	b.n	800bfb4 <_puts_r+0x84>
 800bff4:	6823      	ldr	r3, [r4, #0]
 800bff6:	250a      	movs	r5, #10
 800bff8:	1c5a      	adds	r2, r3, #1
 800bffa:	6022      	str	r2, [r4, #0]
 800bffc:	701d      	strb	r5, [r3, #0]
 800bffe:	e7db      	b.n	800bfb8 <_puts_r+0x88>
 800c000:	080113dc 	.word	0x080113dc
 800c004:	080113fc 	.word	0x080113fc
 800c008:	080113bc 	.word	0x080113bc

0800c00c <puts>:
 800c00c:	4b02      	ldr	r3, [pc, #8]	; (800c018 <puts+0xc>)
 800c00e:	4601      	mov	r1, r0
 800c010:	6818      	ldr	r0, [r3, #0]
 800c012:	f7ff bf8d 	b.w	800bf30 <_puts_r>
 800c016:	bf00      	nop
 800c018:	200000b4 	.word	0x200000b4

0800c01c <_sbrk_r>:
 800c01c:	b538      	push	{r3, r4, r5, lr}
 800c01e:	4d06      	ldr	r5, [pc, #24]	; (800c038 <_sbrk_r+0x1c>)
 800c020:	2300      	movs	r3, #0
 800c022:	4604      	mov	r4, r0
 800c024:	4608      	mov	r0, r1
 800c026:	602b      	str	r3, [r5, #0]
 800c028:	f000 fcf2 	bl	800ca10 <_sbrk>
 800c02c:	1c43      	adds	r3, r0, #1
 800c02e:	d102      	bne.n	800c036 <_sbrk_r+0x1a>
 800c030:	682b      	ldr	r3, [r5, #0]
 800c032:	b103      	cbz	r3, 800c036 <_sbrk_r+0x1a>
 800c034:	6023      	str	r3, [r4, #0]
 800c036:	bd38      	pop	{r3, r4, r5, pc}
 800c038:	20046744 	.word	0x20046744

0800c03c <__sread>:
 800c03c:	b510      	push	{r4, lr}
 800c03e:	460c      	mov	r4, r1
 800c040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c044:	f000 fc90 	bl	800c968 <_read_r>
 800c048:	2800      	cmp	r0, #0
 800c04a:	bfab      	itete	ge
 800c04c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c04e:	89a3      	ldrhlt	r3, [r4, #12]
 800c050:	181b      	addge	r3, r3, r0
 800c052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c056:	bfac      	ite	ge
 800c058:	6563      	strge	r3, [r4, #84]	; 0x54
 800c05a:	81a3      	strhlt	r3, [r4, #12]
 800c05c:	bd10      	pop	{r4, pc}

0800c05e <__swrite>:
 800c05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c062:	461f      	mov	r7, r3
 800c064:	898b      	ldrh	r3, [r1, #12]
 800c066:	05db      	lsls	r3, r3, #23
 800c068:	4605      	mov	r5, r0
 800c06a:	460c      	mov	r4, r1
 800c06c:	4616      	mov	r6, r2
 800c06e:	d505      	bpl.n	800c07c <__swrite+0x1e>
 800c070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c074:	2302      	movs	r3, #2
 800c076:	2200      	movs	r2, #0
 800c078:	f000 f906 	bl	800c288 <_lseek_r>
 800c07c:	89a3      	ldrh	r3, [r4, #12]
 800c07e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c082:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c086:	81a3      	strh	r3, [r4, #12]
 800c088:	4632      	mov	r2, r6
 800c08a:	463b      	mov	r3, r7
 800c08c:	4628      	mov	r0, r5
 800c08e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c092:	f000 b869 	b.w	800c168 <_write_r>

0800c096 <__sseek>:
 800c096:	b510      	push	{r4, lr}
 800c098:	460c      	mov	r4, r1
 800c09a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c09e:	f000 f8f3 	bl	800c288 <_lseek_r>
 800c0a2:	1c43      	adds	r3, r0, #1
 800c0a4:	89a3      	ldrh	r3, [r4, #12]
 800c0a6:	bf15      	itete	ne
 800c0a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c0ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c0b2:	81a3      	strheq	r3, [r4, #12]
 800c0b4:	bf18      	it	ne
 800c0b6:	81a3      	strhne	r3, [r4, #12]
 800c0b8:	bd10      	pop	{r4, pc}

0800c0ba <__sclose>:
 800c0ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0be:	f000 b8d3 	b.w	800c268 <_close_r>
	...

0800c0c4 <__swbuf_r>:
 800c0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0c6:	460e      	mov	r6, r1
 800c0c8:	4614      	mov	r4, r2
 800c0ca:	4605      	mov	r5, r0
 800c0cc:	b118      	cbz	r0, 800c0d6 <__swbuf_r+0x12>
 800c0ce:	6983      	ldr	r3, [r0, #24]
 800c0d0:	b90b      	cbnz	r3, 800c0d6 <__swbuf_r+0x12>
 800c0d2:	f7ff fd8f 	bl	800bbf4 <__sinit>
 800c0d6:	4b21      	ldr	r3, [pc, #132]	; (800c15c <__swbuf_r+0x98>)
 800c0d8:	429c      	cmp	r4, r3
 800c0da:	d12b      	bne.n	800c134 <__swbuf_r+0x70>
 800c0dc:	686c      	ldr	r4, [r5, #4]
 800c0de:	69a3      	ldr	r3, [r4, #24]
 800c0e0:	60a3      	str	r3, [r4, #8]
 800c0e2:	89a3      	ldrh	r3, [r4, #12]
 800c0e4:	071a      	lsls	r2, r3, #28
 800c0e6:	d52f      	bpl.n	800c148 <__swbuf_r+0x84>
 800c0e8:	6923      	ldr	r3, [r4, #16]
 800c0ea:	b36b      	cbz	r3, 800c148 <__swbuf_r+0x84>
 800c0ec:	6923      	ldr	r3, [r4, #16]
 800c0ee:	6820      	ldr	r0, [r4, #0]
 800c0f0:	1ac0      	subs	r0, r0, r3
 800c0f2:	6963      	ldr	r3, [r4, #20]
 800c0f4:	b2f6      	uxtb	r6, r6
 800c0f6:	4283      	cmp	r3, r0
 800c0f8:	4637      	mov	r7, r6
 800c0fa:	dc04      	bgt.n	800c106 <__swbuf_r+0x42>
 800c0fc:	4621      	mov	r1, r4
 800c0fe:	4628      	mov	r0, r5
 800c100:	f7ff fcd2 	bl	800baa8 <_fflush_r>
 800c104:	bb30      	cbnz	r0, 800c154 <__swbuf_r+0x90>
 800c106:	68a3      	ldr	r3, [r4, #8]
 800c108:	3b01      	subs	r3, #1
 800c10a:	60a3      	str	r3, [r4, #8]
 800c10c:	6823      	ldr	r3, [r4, #0]
 800c10e:	1c5a      	adds	r2, r3, #1
 800c110:	6022      	str	r2, [r4, #0]
 800c112:	701e      	strb	r6, [r3, #0]
 800c114:	6963      	ldr	r3, [r4, #20]
 800c116:	3001      	adds	r0, #1
 800c118:	4283      	cmp	r3, r0
 800c11a:	d004      	beq.n	800c126 <__swbuf_r+0x62>
 800c11c:	89a3      	ldrh	r3, [r4, #12]
 800c11e:	07db      	lsls	r3, r3, #31
 800c120:	d506      	bpl.n	800c130 <__swbuf_r+0x6c>
 800c122:	2e0a      	cmp	r6, #10
 800c124:	d104      	bne.n	800c130 <__swbuf_r+0x6c>
 800c126:	4621      	mov	r1, r4
 800c128:	4628      	mov	r0, r5
 800c12a:	f7ff fcbd 	bl	800baa8 <_fflush_r>
 800c12e:	b988      	cbnz	r0, 800c154 <__swbuf_r+0x90>
 800c130:	4638      	mov	r0, r7
 800c132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c134:	4b0a      	ldr	r3, [pc, #40]	; (800c160 <__swbuf_r+0x9c>)
 800c136:	429c      	cmp	r4, r3
 800c138:	d101      	bne.n	800c13e <__swbuf_r+0x7a>
 800c13a:	68ac      	ldr	r4, [r5, #8]
 800c13c:	e7cf      	b.n	800c0de <__swbuf_r+0x1a>
 800c13e:	4b09      	ldr	r3, [pc, #36]	; (800c164 <__swbuf_r+0xa0>)
 800c140:	429c      	cmp	r4, r3
 800c142:	bf08      	it	eq
 800c144:	68ec      	ldreq	r4, [r5, #12]
 800c146:	e7ca      	b.n	800c0de <__swbuf_r+0x1a>
 800c148:	4621      	mov	r1, r4
 800c14a:	4628      	mov	r0, r5
 800c14c:	f000 f81e 	bl	800c18c <__swsetup_r>
 800c150:	2800      	cmp	r0, #0
 800c152:	d0cb      	beq.n	800c0ec <__swbuf_r+0x28>
 800c154:	f04f 37ff 	mov.w	r7, #4294967295
 800c158:	e7ea      	b.n	800c130 <__swbuf_r+0x6c>
 800c15a:	bf00      	nop
 800c15c:	080113dc 	.word	0x080113dc
 800c160:	080113fc 	.word	0x080113fc
 800c164:	080113bc 	.word	0x080113bc

0800c168 <_write_r>:
 800c168:	b538      	push	{r3, r4, r5, lr}
 800c16a:	4d07      	ldr	r5, [pc, #28]	; (800c188 <_write_r+0x20>)
 800c16c:	4604      	mov	r4, r0
 800c16e:	4608      	mov	r0, r1
 800c170:	4611      	mov	r1, r2
 800c172:	2200      	movs	r2, #0
 800c174:	602a      	str	r2, [r5, #0]
 800c176:	461a      	mov	r2, r3
 800c178:	f7fe fd5e 	bl	800ac38 <_write>
 800c17c:	1c43      	adds	r3, r0, #1
 800c17e:	d102      	bne.n	800c186 <_write_r+0x1e>
 800c180:	682b      	ldr	r3, [r5, #0]
 800c182:	b103      	cbz	r3, 800c186 <_write_r+0x1e>
 800c184:	6023      	str	r3, [r4, #0]
 800c186:	bd38      	pop	{r3, r4, r5, pc}
 800c188:	20046744 	.word	0x20046744

0800c18c <__swsetup_r>:
 800c18c:	4b32      	ldr	r3, [pc, #200]	; (800c258 <__swsetup_r+0xcc>)
 800c18e:	b570      	push	{r4, r5, r6, lr}
 800c190:	681d      	ldr	r5, [r3, #0]
 800c192:	4606      	mov	r6, r0
 800c194:	460c      	mov	r4, r1
 800c196:	b125      	cbz	r5, 800c1a2 <__swsetup_r+0x16>
 800c198:	69ab      	ldr	r3, [r5, #24]
 800c19a:	b913      	cbnz	r3, 800c1a2 <__swsetup_r+0x16>
 800c19c:	4628      	mov	r0, r5
 800c19e:	f7ff fd29 	bl	800bbf4 <__sinit>
 800c1a2:	4b2e      	ldr	r3, [pc, #184]	; (800c25c <__swsetup_r+0xd0>)
 800c1a4:	429c      	cmp	r4, r3
 800c1a6:	d10f      	bne.n	800c1c8 <__swsetup_r+0x3c>
 800c1a8:	686c      	ldr	r4, [r5, #4]
 800c1aa:	89a3      	ldrh	r3, [r4, #12]
 800c1ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1b0:	0719      	lsls	r1, r3, #28
 800c1b2:	d42c      	bmi.n	800c20e <__swsetup_r+0x82>
 800c1b4:	06dd      	lsls	r5, r3, #27
 800c1b6:	d411      	bmi.n	800c1dc <__swsetup_r+0x50>
 800c1b8:	2309      	movs	r3, #9
 800c1ba:	6033      	str	r3, [r6, #0]
 800c1bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c1c0:	81a3      	strh	r3, [r4, #12]
 800c1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c6:	e03e      	b.n	800c246 <__swsetup_r+0xba>
 800c1c8:	4b25      	ldr	r3, [pc, #148]	; (800c260 <__swsetup_r+0xd4>)
 800c1ca:	429c      	cmp	r4, r3
 800c1cc:	d101      	bne.n	800c1d2 <__swsetup_r+0x46>
 800c1ce:	68ac      	ldr	r4, [r5, #8]
 800c1d0:	e7eb      	b.n	800c1aa <__swsetup_r+0x1e>
 800c1d2:	4b24      	ldr	r3, [pc, #144]	; (800c264 <__swsetup_r+0xd8>)
 800c1d4:	429c      	cmp	r4, r3
 800c1d6:	bf08      	it	eq
 800c1d8:	68ec      	ldreq	r4, [r5, #12]
 800c1da:	e7e6      	b.n	800c1aa <__swsetup_r+0x1e>
 800c1dc:	0758      	lsls	r0, r3, #29
 800c1de:	d512      	bpl.n	800c206 <__swsetup_r+0x7a>
 800c1e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1e2:	b141      	cbz	r1, 800c1f6 <__swsetup_r+0x6a>
 800c1e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1e8:	4299      	cmp	r1, r3
 800c1ea:	d002      	beq.n	800c1f2 <__swsetup_r+0x66>
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	f7ff fddd 	bl	800bdac <_free_r>
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	6363      	str	r3, [r4, #52]	; 0x34
 800c1f6:	89a3      	ldrh	r3, [r4, #12]
 800c1f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c1fc:	81a3      	strh	r3, [r4, #12]
 800c1fe:	2300      	movs	r3, #0
 800c200:	6063      	str	r3, [r4, #4]
 800c202:	6923      	ldr	r3, [r4, #16]
 800c204:	6023      	str	r3, [r4, #0]
 800c206:	89a3      	ldrh	r3, [r4, #12]
 800c208:	f043 0308 	orr.w	r3, r3, #8
 800c20c:	81a3      	strh	r3, [r4, #12]
 800c20e:	6923      	ldr	r3, [r4, #16]
 800c210:	b94b      	cbnz	r3, 800c226 <__swsetup_r+0x9a>
 800c212:	89a3      	ldrh	r3, [r4, #12]
 800c214:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c21c:	d003      	beq.n	800c226 <__swsetup_r+0x9a>
 800c21e:	4621      	mov	r1, r4
 800c220:	4630      	mov	r0, r6
 800c222:	f000 f867 	bl	800c2f4 <__smakebuf_r>
 800c226:	89a0      	ldrh	r0, [r4, #12]
 800c228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c22c:	f010 0301 	ands.w	r3, r0, #1
 800c230:	d00a      	beq.n	800c248 <__swsetup_r+0xbc>
 800c232:	2300      	movs	r3, #0
 800c234:	60a3      	str	r3, [r4, #8]
 800c236:	6963      	ldr	r3, [r4, #20]
 800c238:	425b      	negs	r3, r3
 800c23a:	61a3      	str	r3, [r4, #24]
 800c23c:	6923      	ldr	r3, [r4, #16]
 800c23e:	b943      	cbnz	r3, 800c252 <__swsetup_r+0xc6>
 800c240:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c244:	d1ba      	bne.n	800c1bc <__swsetup_r+0x30>
 800c246:	bd70      	pop	{r4, r5, r6, pc}
 800c248:	0781      	lsls	r1, r0, #30
 800c24a:	bf58      	it	pl
 800c24c:	6963      	ldrpl	r3, [r4, #20]
 800c24e:	60a3      	str	r3, [r4, #8]
 800c250:	e7f4      	b.n	800c23c <__swsetup_r+0xb0>
 800c252:	2000      	movs	r0, #0
 800c254:	e7f7      	b.n	800c246 <__swsetup_r+0xba>
 800c256:	bf00      	nop
 800c258:	200000b4 	.word	0x200000b4
 800c25c:	080113dc 	.word	0x080113dc
 800c260:	080113fc 	.word	0x080113fc
 800c264:	080113bc 	.word	0x080113bc

0800c268 <_close_r>:
 800c268:	b538      	push	{r3, r4, r5, lr}
 800c26a:	4d06      	ldr	r5, [pc, #24]	; (800c284 <_close_r+0x1c>)
 800c26c:	2300      	movs	r3, #0
 800c26e:	4604      	mov	r4, r0
 800c270:	4608      	mov	r0, r1
 800c272:	602b      	str	r3, [r5, #0]
 800c274:	f000 fbac 	bl	800c9d0 <_close>
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	d102      	bne.n	800c282 <_close_r+0x1a>
 800c27c:	682b      	ldr	r3, [r5, #0]
 800c27e:	b103      	cbz	r3, 800c282 <_close_r+0x1a>
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	bd38      	pop	{r3, r4, r5, pc}
 800c284:	20046744 	.word	0x20046744

0800c288 <_lseek_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	4d07      	ldr	r5, [pc, #28]	; (800c2a8 <_lseek_r+0x20>)
 800c28c:	4604      	mov	r4, r0
 800c28e:	4608      	mov	r0, r1
 800c290:	4611      	mov	r1, r2
 800c292:	2200      	movs	r2, #0
 800c294:	602a      	str	r2, [r5, #0]
 800c296:	461a      	mov	r2, r3
 800c298:	f000 fbb2 	bl	800ca00 <_lseek>
 800c29c:	1c43      	adds	r3, r0, #1
 800c29e:	d102      	bne.n	800c2a6 <_lseek_r+0x1e>
 800c2a0:	682b      	ldr	r3, [r5, #0]
 800c2a2:	b103      	cbz	r3, 800c2a6 <_lseek_r+0x1e>
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	bd38      	pop	{r3, r4, r5, pc}
 800c2a8:	20046744 	.word	0x20046744

0800c2ac <__swhatbuf_r>:
 800c2ac:	b570      	push	{r4, r5, r6, lr}
 800c2ae:	460e      	mov	r6, r1
 800c2b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2b4:	2900      	cmp	r1, #0
 800c2b6:	b096      	sub	sp, #88	; 0x58
 800c2b8:	4614      	mov	r4, r2
 800c2ba:	461d      	mov	r5, r3
 800c2bc:	da07      	bge.n	800c2ce <__swhatbuf_r+0x22>
 800c2be:	2300      	movs	r3, #0
 800c2c0:	602b      	str	r3, [r5, #0]
 800c2c2:	89b3      	ldrh	r3, [r6, #12]
 800c2c4:	061a      	lsls	r2, r3, #24
 800c2c6:	d410      	bmi.n	800c2ea <__swhatbuf_r+0x3e>
 800c2c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2cc:	e00e      	b.n	800c2ec <__swhatbuf_r+0x40>
 800c2ce:	466a      	mov	r2, sp
 800c2d0:	f000 fb5c 	bl	800c98c <_fstat_r>
 800c2d4:	2800      	cmp	r0, #0
 800c2d6:	dbf2      	blt.n	800c2be <__swhatbuf_r+0x12>
 800c2d8:	9a01      	ldr	r2, [sp, #4]
 800c2da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c2de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c2e2:	425a      	negs	r2, r3
 800c2e4:	415a      	adcs	r2, r3
 800c2e6:	602a      	str	r2, [r5, #0]
 800c2e8:	e7ee      	b.n	800c2c8 <__swhatbuf_r+0x1c>
 800c2ea:	2340      	movs	r3, #64	; 0x40
 800c2ec:	2000      	movs	r0, #0
 800c2ee:	6023      	str	r3, [r4, #0]
 800c2f0:	b016      	add	sp, #88	; 0x58
 800c2f2:	bd70      	pop	{r4, r5, r6, pc}

0800c2f4 <__smakebuf_r>:
 800c2f4:	898b      	ldrh	r3, [r1, #12]
 800c2f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c2f8:	079d      	lsls	r5, r3, #30
 800c2fa:	4606      	mov	r6, r0
 800c2fc:	460c      	mov	r4, r1
 800c2fe:	d507      	bpl.n	800c310 <__smakebuf_r+0x1c>
 800c300:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c304:	6023      	str	r3, [r4, #0]
 800c306:	6123      	str	r3, [r4, #16]
 800c308:	2301      	movs	r3, #1
 800c30a:	6163      	str	r3, [r4, #20]
 800c30c:	b002      	add	sp, #8
 800c30e:	bd70      	pop	{r4, r5, r6, pc}
 800c310:	ab01      	add	r3, sp, #4
 800c312:	466a      	mov	r2, sp
 800c314:	f7ff ffca 	bl	800c2ac <__swhatbuf_r>
 800c318:	9900      	ldr	r1, [sp, #0]
 800c31a:	4605      	mov	r5, r0
 800c31c:	4630      	mov	r0, r6
 800c31e:	f7ff fd95 	bl	800be4c <_malloc_r>
 800c322:	b948      	cbnz	r0, 800c338 <__smakebuf_r+0x44>
 800c324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c328:	059a      	lsls	r2, r3, #22
 800c32a:	d4ef      	bmi.n	800c30c <__smakebuf_r+0x18>
 800c32c:	f023 0303 	bic.w	r3, r3, #3
 800c330:	f043 0302 	orr.w	r3, r3, #2
 800c334:	81a3      	strh	r3, [r4, #12]
 800c336:	e7e3      	b.n	800c300 <__smakebuf_r+0xc>
 800c338:	4b0d      	ldr	r3, [pc, #52]	; (800c370 <__smakebuf_r+0x7c>)
 800c33a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c33c:	89a3      	ldrh	r3, [r4, #12]
 800c33e:	6020      	str	r0, [r4, #0]
 800c340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c344:	81a3      	strh	r3, [r4, #12]
 800c346:	9b00      	ldr	r3, [sp, #0]
 800c348:	6163      	str	r3, [r4, #20]
 800c34a:	9b01      	ldr	r3, [sp, #4]
 800c34c:	6120      	str	r0, [r4, #16]
 800c34e:	b15b      	cbz	r3, 800c368 <__smakebuf_r+0x74>
 800c350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c354:	4630      	mov	r0, r6
 800c356:	f000 fb2b 	bl	800c9b0 <_isatty_r>
 800c35a:	b128      	cbz	r0, 800c368 <__smakebuf_r+0x74>
 800c35c:	89a3      	ldrh	r3, [r4, #12]
 800c35e:	f023 0303 	bic.w	r3, r3, #3
 800c362:	f043 0301 	orr.w	r3, r3, #1
 800c366:	81a3      	strh	r3, [r4, #12]
 800c368:	89a0      	ldrh	r0, [r4, #12]
 800c36a:	4305      	orrs	r5, r0
 800c36c:	81a5      	strh	r5, [r4, #12]
 800c36e:	e7cd      	b.n	800c30c <__smakebuf_r+0x18>
 800c370:	0800bb8d 	.word	0x0800bb8d

0800c374 <__malloc_lock>:
 800c374:	4801      	ldr	r0, [pc, #4]	; (800c37c <__malloc_lock+0x8>)
 800c376:	f7ff bd00 	b.w	800bd7a <__retarget_lock_acquire_recursive>
 800c37a:	bf00      	nop
 800c37c:	2004673c 	.word	0x2004673c

0800c380 <__malloc_unlock>:
 800c380:	4801      	ldr	r0, [pc, #4]	; (800c388 <__malloc_unlock+0x8>)
 800c382:	f7ff bcfb 	b.w	800bd7c <__retarget_lock_release_recursive>
 800c386:	bf00      	nop
 800c388:	2004673c 	.word	0x2004673c

0800c38c <__sfputc_r>:
 800c38c:	6893      	ldr	r3, [r2, #8]
 800c38e:	3b01      	subs	r3, #1
 800c390:	2b00      	cmp	r3, #0
 800c392:	b410      	push	{r4}
 800c394:	6093      	str	r3, [r2, #8]
 800c396:	da08      	bge.n	800c3aa <__sfputc_r+0x1e>
 800c398:	6994      	ldr	r4, [r2, #24]
 800c39a:	42a3      	cmp	r3, r4
 800c39c:	db01      	blt.n	800c3a2 <__sfputc_r+0x16>
 800c39e:	290a      	cmp	r1, #10
 800c3a0:	d103      	bne.n	800c3aa <__sfputc_r+0x1e>
 800c3a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3a6:	f7ff be8d 	b.w	800c0c4 <__swbuf_r>
 800c3aa:	6813      	ldr	r3, [r2, #0]
 800c3ac:	1c58      	adds	r0, r3, #1
 800c3ae:	6010      	str	r0, [r2, #0]
 800c3b0:	7019      	strb	r1, [r3, #0]
 800c3b2:	4608      	mov	r0, r1
 800c3b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3b8:	4770      	bx	lr

0800c3ba <__sfputs_r>:
 800c3ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3bc:	4606      	mov	r6, r0
 800c3be:	460f      	mov	r7, r1
 800c3c0:	4614      	mov	r4, r2
 800c3c2:	18d5      	adds	r5, r2, r3
 800c3c4:	42ac      	cmp	r4, r5
 800c3c6:	d101      	bne.n	800c3cc <__sfputs_r+0x12>
 800c3c8:	2000      	movs	r0, #0
 800c3ca:	e007      	b.n	800c3dc <__sfputs_r+0x22>
 800c3cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3d0:	463a      	mov	r2, r7
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	f7ff ffda 	bl	800c38c <__sfputc_r>
 800c3d8:	1c43      	adds	r3, r0, #1
 800c3da:	d1f3      	bne.n	800c3c4 <__sfputs_r+0xa>
 800c3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c3e0 <_vfiprintf_r>:
 800c3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e4:	460d      	mov	r5, r1
 800c3e6:	b09d      	sub	sp, #116	; 0x74
 800c3e8:	4614      	mov	r4, r2
 800c3ea:	4698      	mov	r8, r3
 800c3ec:	4606      	mov	r6, r0
 800c3ee:	b118      	cbz	r0, 800c3f8 <_vfiprintf_r+0x18>
 800c3f0:	6983      	ldr	r3, [r0, #24]
 800c3f2:	b90b      	cbnz	r3, 800c3f8 <_vfiprintf_r+0x18>
 800c3f4:	f7ff fbfe 	bl	800bbf4 <__sinit>
 800c3f8:	4b89      	ldr	r3, [pc, #548]	; (800c620 <_vfiprintf_r+0x240>)
 800c3fa:	429d      	cmp	r5, r3
 800c3fc:	d11b      	bne.n	800c436 <_vfiprintf_r+0x56>
 800c3fe:	6875      	ldr	r5, [r6, #4]
 800c400:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c402:	07d9      	lsls	r1, r3, #31
 800c404:	d405      	bmi.n	800c412 <_vfiprintf_r+0x32>
 800c406:	89ab      	ldrh	r3, [r5, #12]
 800c408:	059a      	lsls	r2, r3, #22
 800c40a:	d402      	bmi.n	800c412 <_vfiprintf_r+0x32>
 800c40c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c40e:	f7ff fcb4 	bl	800bd7a <__retarget_lock_acquire_recursive>
 800c412:	89ab      	ldrh	r3, [r5, #12]
 800c414:	071b      	lsls	r3, r3, #28
 800c416:	d501      	bpl.n	800c41c <_vfiprintf_r+0x3c>
 800c418:	692b      	ldr	r3, [r5, #16]
 800c41a:	b9eb      	cbnz	r3, 800c458 <_vfiprintf_r+0x78>
 800c41c:	4629      	mov	r1, r5
 800c41e:	4630      	mov	r0, r6
 800c420:	f7ff feb4 	bl	800c18c <__swsetup_r>
 800c424:	b1c0      	cbz	r0, 800c458 <_vfiprintf_r+0x78>
 800c426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c428:	07dc      	lsls	r4, r3, #31
 800c42a:	d50e      	bpl.n	800c44a <_vfiprintf_r+0x6a>
 800c42c:	f04f 30ff 	mov.w	r0, #4294967295
 800c430:	b01d      	add	sp, #116	; 0x74
 800c432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c436:	4b7b      	ldr	r3, [pc, #492]	; (800c624 <_vfiprintf_r+0x244>)
 800c438:	429d      	cmp	r5, r3
 800c43a:	d101      	bne.n	800c440 <_vfiprintf_r+0x60>
 800c43c:	68b5      	ldr	r5, [r6, #8]
 800c43e:	e7df      	b.n	800c400 <_vfiprintf_r+0x20>
 800c440:	4b79      	ldr	r3, [pc, #484]	; (800c628 <_vfiprintf_r+0x248>)
 800c442:	429d      	cmp	r5, r3
 800c444:	bf08      	it	eq
 800c446:	68f5      	ldreq	r5, [r6, #12]
 800c448:	e7da      	b.n	800c400 <_vfiprintf_r+0x20>
 800c44a:	89ab      	ldrh	r3, [r5, #12]
 800c44c:	0598      	lsls	r0, r3, #22
 800c44e:	d4ed      	bmi.n	800c42c <_vfiprintf_r+0x4c>
 800c450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c452:	f7ff fc93 	bl	800bd7c <__retarget_lock_release_recursive>
 800c456:	e7e9      	b.n	800c42c <_vfiprintf_r+0x4c>
 800c458:	2300      	movs	r3, #0
 800c45a:	9309      	str	r3, [sp, #36]	; 0x24
 800c45c:	2320      	movs	r3, #32
 800c45e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c462:	f8cd 800c 	str.w	r8, [sp, #12]
 800c466:	2330      	movs	r3, #48	; 0x30
 800c468:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c62c <_vfiprintf_r+0x24c>
 800c46c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c470:	f04f 0901 	mov.w	r9, #1
 800c474:	4623      	mov	r3, r4
 800c476:	469a      	mov	sl, r3
 800c478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c47c:	b10a      	cbz	r2, 800c482 <_vfiprintf_r+0xa2>
 800c47e:	2a25      	cmp	r2, #37	; 0x25
 800c480:	d1f9      	bne.n	800c476 <_vfiprintf_r+0x96>
 800c482:	ebba 0b04 	subs.w	fp, sl, r4
 800c486:	d00b      	beq.n	800c4a0 <_vfiprintf_r+0xc0>
 800c488:	465b      	mov	r3, fp
 800c48a:	4622      	mov	r2, r4
 800c48c:	4629      	mov	r1, r5
 800c48e:	4630      	mov	r0, r6
 800c490:	f7ff ff93 	bl	800c3ba <__sfputs_r>
 800c494:	3001      	adds	r0, #1
 800c496:	f000 80aa 	beq.w	800c5ee <_vfiprintf_r+0x20e>
 800c49a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c49c:	445a      	add	r2, fp
 800c49e:	9209      	str	r2, [sp, #36]	; 0x24
 800c4a0:	f89a 3000 	ldrb.w	r3, [sl]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f000 80a2 	beq.w	800c5ee <_vfiprintf_r+0x20e>
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c4b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4b4:	f10a 0a01 	add.w	sl, sl, #1
 800c4b8:	9304      	str	r3, [sp, #16]
 800c4ba:	9307      	str	r3, [sp, #28]
 800c4bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4c0:	931a      	str	r3, [sp, #104]	; 0x68
 800c4c2:	4654      	mov	r4, sl
 800c4c4:	2205      	movs	r2, #5
 800c4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ca:	4858      	ldr	r0, [pc, #352]	; (800c62c <_vfiprintf_r+0x24c>)
 800c4cc:	f7f3 feb8 	bl	8000240 <memchr>
 800c4d0:	9a04      	ldr	r2, [sp, #16]
 800c4d2:	b9d8      	cbnz	r0, 800c50c <_vfiprintf_r+0x12c>
 800c4d4:	06d1      	lsls	r1, r2, #27
 800c4d6:	bf44      	itt	mi
 800c4d8:	2320      	movmi	r3, #32
 800c4da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4de:	0713      	lsls	r3, r2, #28
 800c4e0:	bf44      	itt	mi
 800c4e2:	232b      	movmi	r3, #43	; 0x2b
 800c4e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4e8:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ec:	2b2a      	cmp	r3, #42	; 0x2a
 800c4ee:	d015      	beq.n	800c51c <_vfiprintf_r+0x13c>
 800c4f0:	9a07      	ldr	r2, [sp, #28]
 800c4f2:	4654      	mov	r4, sl
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	f04f 0c0a 	mov.w	ip, #10
 800c4fa:	4621      	mov	r1, r4
 800c4fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c500:	3b30      	subs	r3, #48	; 0x30
 800c502:	2b09      	cmp	r3, #9
 800c504:	d94e      	bls.n	800c5a4 <_vfiprintf_r+0x1c4>
 800c506:	b1b0      	cbz	r0, 800c536 <_vfiprintf_r+0x156>
 800c508:	9207      	str	r2, [sp, #28]
 800c50a:	e014      	b.n	800c536 <_vfiprintf_r+0x156>
 800c50c:	eba0 0308 	sub.w	r3, r0, r8
 800c510:	fa09 f303 	lsl.w	r3, r9, r3
 800c514:	4313      	orrs	r3, r2
 800c516:	9304      	str	r3, [sp, #16]
 800c518:	46a2      	mov	sl, r4
 800c51a:	e7d2      	b.n	800c4c2 <_vfiprintf_r+0xe2>
 800c51c:	9b03      	ldr	r3, [sp, #12]
 800c51e:	1d19      	adds	r1, r3, #4
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	9103      	str	r1, [sp, #12]
 800c524:	2b00      	cmp	r3, #0
 800c526:	bfbb      	ittet	lt
 800c528:	425b      	neglt	r3, r3
 800c52a:	f042 0202 	orrlt.w	r2, r2, #2
 800c52e:	9307      	strge	r3, [sp, #28]
 800c530:	9307      	strlt	r3, [sp, #28]
 800c532:	bfb8      	it	lt
 800c534:	9204      	strlt	r2, [sp, #16]
 800c536:	7823      	ldrb	r3, [r4, #0]
 800c538:	2b2e      	cmp	r3, #46	; 0x2e
 800c53a:	d10c      	bne.n	800c556 <_vfiprintf_r+0x176>
 800c53c:	7863      	ldrb	r3, [r4, #1]
 800c53e:	2b2a      	cmp	r3, #42	; 0x2a
 800c540:	d135      	bne.n	800c5ae <_vfiprintf_r+0x1ce>
 800c542:	9b03      	ldr	r3, [sp, #12]
 800c544:	1d1a      	adds	r2, r3, #4
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	9203      	str	r2, [sp, #12]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	bfb8      	it	lt
 800c54e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c552:	3402      	adds	r4, #2
 800c554:	9305      	str	r3, [sp, #20]
 800c556:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c63c <_vfiprintf_r+0x25c>
 800c55a:	7821      	ldrb	r1, [r4, #0]
 800c55c:	2203      	movs	r2, #3
 800c55e:	4650      	mov	r0, sl
 800c560:	f7f3 fe6e 	bl	8000240 <memchr>
 800c564:	b140      	cbz	r0, 800c578 <_vfiprintf_r+0x198>
 800c566:	2340      	movs	r3, #64	; 0x40
 800c568:	eba0 000a 	sub.w	r0, r0, sl
 800c56c:	fa03 f000 	lsl.w	r0, r3, r0
 800c570:	9b04      	ldr	r3, [sp, #16]
 800c572:	4303      	orrs	r3, r0
 800c574:	3401      	adds	r4, #1
 800c576:	9304      	str	r3, [sp, #16]
 800c578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c57c:	482c      	ldr	r0, [pc, #176]	; (800c630 <_vfiprintf_r+0x250>)
 800c57e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c582:	2206      	movs	r2, #6
 800c584:	f7f3 fe5c 	bl	8000240 <memchr>
 800c588:	2800      	cmp	r0, #0
 800c58a:	d03f      	beq.n	800c60c <_vfiprintf_r+0x22c>
 800c58c:	4b29      	ldr	r3, [pc, #164]	; (800c634 <_vfiprintf_r+0x254>)
 800c58e:	bb1b      	cbnz	r3, 800c5d8 <_vfiprintf_r+0x1f8>
 800c590:	9b03      	ldr	r3, [sp, #12]
 800c592:	3307      	adds	r3, #7
 800c594:	f023 0307 	bic.w	r3, r3, #7
 800c598:	3308      	adds	r3, #8
 800c59a:	9303      	str	r3, [sp, #12]
 800c59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c59e:	443b      	add	r3, r7
 800c5a0:	9309      	str	r3, [sp, #36]	; 0x24
 800c5a2:	e767      	b.n	800c474 <_vfiprintf_r+0x94>
 800c5a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5a8:	460c      	mov	r4, r1
 800c5aa:	2001      	movs	r0, #1
 800c5ac:	e7a5      	b.n	800c4fa <_vfiprintf_r+0x11a>
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	3401      	adds	r4, #1
 800c5b2:	9305      	str	r3, [sp, #20]
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	f04f 0c0a 	mov.w	ip, #10
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5c0:	3a30      	subs	r2, #48	; 0x30
 800c5c2:	2a09      	cmp	r2, #9
 800c5c4:	d903      	bls.n	800c5ce <_vfiprintf_r+0x1ee>
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d0c5      	beq.n	800c556 <_vfiprintf_r+0x176>
 800c5ca:	9105      	str	r1, [sp, #20]
 800c5cc:	e7c3      	b.n	800c556 <_vfiprintf_r+0x176>
 800c5ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5d2:	4604      	mov	r4, r0
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	e7f0      	b.n	800c5ba <_vfiprintf_r+0x1da>
 800c5d8:	ab03      	add	r3, sp, #12
 800c5da:	9300      	str	r3, [sp, #0]
 800c5dc:	462a      	mov	r2, r5
 800c5de:	4b16      	ldr	r3, [pc, #88]	; (800c638 <_vfiprintf_r+0x258>)
 800c5e0:	a904      	add	r1, sp, #16
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	f3af 8000 	nop.w
 800c5e8:	4607      	mov	r7, r0
 800c5ea:	1c78      	adds	r0, r7, #1
 800c5ec:	d1d6      	bne.n	800c59c <_vfiprintf_r+0x1bc>
 800c5ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5f0:	07d9      	lsls	r1, r3, #31
 800c5f2:	d405      	bmi.n	800c600 <_vfiprintf_r+0x220>
 800c5f4:	89ab      	ldrh	r3, [r5, #12]
 800c5f6:	059a      	lsls	r2, r3, #22
 800c5f8:	d402      	bmi.n	800c600 <_vfiprintf_r+0x220>
 800c5fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5fc:	f7ff fbbe 	bl	800bd7c <__retarget_lock_release_recursive>
 800c600:	89ab      	ldrh	r3, [r5, #12]
 800c602:	065b      	lsls	r3, r3, #25
 800c604:	f53f af12 	bmi.w	800c42c <_vfiprintf_r+0x4c>
 800c608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c60a:	e711      	b.n	800c430 <_vfiprintf_r+0x50>
 800c60c:	ab03      	add	r3, sp, #12
 800c60e:	9300      	str	r3, [sp, #0]
 800c610:	462a      	mov	r2, r5
 800c612:	4b09      	ldr	r3, [pc, #36]	; (800c638 <_vfiprintf_r+0x258>)
 800c614:	a904      	add	r1, sp, #16
 800c616:	4630      	mov	r0, r6
 800c618:	f000 f880 	bl	800c71c <_printf_i>
 800c61c:	e7e4      	b.n	800c5e8 <_vfiprintf_r+0x208>
 800c61e:	bf00      	nop
 800c620:	080113dc 	.word	0x080113dc
 800c624:	080113fc 	.word	0x080113fc
 800c628:	080113bc 	.word	0x080113bc
 800c62c:	08011420 	.word	0x08011420
 800c630:	0801142a 	.word	0x0801142a
 800c634:	00000000 	.word	0x00000000
 800c638:	0800c3bb 	.word	0x0800c3bb
 800c63c:	08011426 	.word	0x08011426

0800c640 <_printf_common>:
 800c640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c644:	4616      	mov	r6, r2
 800c646:	4699      	mov	r9, r3
 800c648:	688a      	ldr	r2, [r1, #8]
 800c64a:	690b      	ldr	r3, [r1, #16]
 800c64c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c650:	4293      	cmp	r3, r2
 800c652:	bfb8      	it	lt
 800c654:	4613      	movlt	r3, r2
 800c656:	6033      	str	r3, [r6, #0]
 800c658:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c65c:	4607      	mov	r7, r0
 800c65e:	460c      	mov	r4, r1
 800c660:	b10a      	cbz	r2, 800c666 <_printf_common+0x26>
 800c662:	3301      	adds	r3, #1
 800c664:	6033      	str	r3, [r6, #0]
 800c666:	6823      	ldr	r3, [r4, #0]
 800c668:	0699      	lsls	r1, r3, #26
 800c66a:	bf42      	ittt	mi
 800c66c:	6833      	ldrmi	r3, [r6, #0]
 800c66e:	3302      	addmi	r3, #2
 800c670:	6033      	strmi	r3, [r6, #0]
 800c672:	6825      	ldr	r5, [r4, #0]
 800c674:	f015 0506 	ands.w	r5, r5, #6
 800c678:	d106      	bne.n	800c688 <_printf_common+0x48>
 800c67a:	f104 0a19 	add.w	sl, r4, #25
 800c67e:	68e3      	ldr	r3, [r4, #12]
 800c680:	6832      	ldr	r2, [r6, #0]
 800c682:	1a9b      	subs	r3, r3, r2
 800c684:	42ab      	cmp	r3, r5
 800c686:	dc26      	bgt.n	800c6d6 <_printf_common+0x96>
 800c688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c68c:	1e13      	subs	r3, r2, #0
 800c68e:	6822      	ldr	r2, [r4, #0]
 800c690:	bf18      	it	ne
 800c692:	2301      	movne	r3, #1
 800c694:	0692      	lsls	r2, r2, #26
 800c696:	d42b      	bmi.n	800c6f0 <_printf_common+0xb0>
 800c698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c69c:	4649      	mov	r1, r9
 800c69e:	4638      	mov	r0, r7
 800c6a0:	47c0      	blx	r8
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	d01e      	beq.n	800c6e4 <_printf_common+0xa4>
 800c6a6:	6823      	ldr	r3, [r4, #0]
 800c6a8:	68e5      	ldr	r5, [r4, #12]
 800c6aa:	6832      	ldr	r2, [r6, #0]
 800c6ac:	f003 0306 	and.w	r3, r3, #6
 800c6b0:	2b04      	cmp	r3, #4
 800c6b2:	bf08      	it	eq
 800c6b4:	1aad      	subeq	r5, r5, r2
 800c6b6:	68a3      	ldr	r3, [r4, #8]
 800c6b8:	6922      	ldr	r2, [r4, #16]
 800c6ba:	bf0c      	ite	eq
 800c6bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6c0:	2500      	movne	r5, #0
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	bfc4      	itt	gt
 800c6c6:	1a9b      	subgt	r3, r3, r2
 800c6c8:	18ed      	addgt	r5, r5, r3
 800c6ca:	2600      	movs	r6, #0
 800c6cc:	341a      	adds	r4, #26
 800c6ce:	42b5      	cmp	r5, r6
 800c6d0:	d11a      	bne.n	800c708 <_printf_common+0xc8>
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	e008      	b.n	800c6e8 <_printf_common+0xa8>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	4652      	mov	r2, sl
 800c6da:	4649      	mov	r1, r9
 800c6dc:	4638      	mov	r0, r7
 800c6de:	47c0      	blx	r8
 800c6e0:	3001      	adds	r0, #1
 800c6e2:	d103      	bne.n	800c6ec <_printf_common+0xac>
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ec:	3501      	adds	r5, #1
 800c6ee:	e7c6      	b.n	800c67e <_printf_common+0x3e>
 800c6f0:	18e1      	adds	r1, r4, r3
 800c6f2:	1c5a      	adds	r2, r3, #1
 800c6f4:	2030      	movs	r0, #48	; 0x30
 800c6f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6fa:	4422      	add	r2, r4
 800c6fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c700:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c704:	3302      	adds	r3, #2
 800c706:	e7c7      	b.n	800c698 <_printf_common+0x58>
 800c708:	2301      	movs	r3, #1
 800c70a:	4622      	mov	r2, r4
 800c70c:	4649      	mov	r1, r9
 800c70e:	4638      	mov	r0, r7
 800c710:	47c0      	blx	r8
 800c712:	3001      	adds	r0, #1
 800c714:	d0e6      	beq.n	800c6e4 <_printf_common+0xa4>
 800c716:	3601      	adds	r6, #1
 800c718:	e7d9      	b.n	800c6ce <_printf_common+0x8e>
	...

0800c71c <_printf_i>:
 800c71c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c720:	460c      	mov	r4, r1
 800c722:	4691      	mov	r9, r2
 800c724:	7e27      	ldrb	r7, [r4, #24]
 800c726:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c728:	2f78      	cmp	r7, #120	; 0x78
 800c72a:	4680      	mov	r8, r0
 800c72c:	469a      	mov	sl, r3
 800c72e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c732:	d807      	bhi.n	800c744 <_printf_i+0x28>
 800c734:	2f62      	cmp	r7, #98	; 0x62
 800c736:	d80a      	bhi.n	800c74e <_printf_i+0x32>
 800c738:	2f00      	cmp	r7, #0
 800c73a:	f000 80d8 	beq.w	800c8ee <_printf_i+0x1d2>
 800c73e:	2f58      	cmp	r7, #88	; 0x58
 800c740:	f000 80a3 	beq.w	800c88a <_printf_i+0x16e>
 800c744:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c74c:	e03a      	b.n	800c7c4 <_printf_i+0xa8>
 800c74e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c752:	2b15      	cmp	r3, #21
 800c754:	d8f6      	bhi.n	800c744 <_printf_i+0x28>
 800c756:	a001      	add	r0, pc, #4	; (adr r0, 800c75c <_printf_i+0x40>)
 800c758:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c75c:	0800c7b5 	.word	0x0800c7b5
 800c760:	0800c7c9 	.word	0x0800c7c9
 800c764:	0800c745 	.word	0x0800c745
 800c768:	0800c745 	.word	0x0800c745
 800c76c:	0800c745 	.word	0x0800c745
 800c770:	0800c745 	.word	0x0800c745
 800c774:	0800c7c9 	.word	0x0800c7c9
 800c778:	0800c745 	.word	0x0800c745
 800c77c:	0800c745 	.word	0x0800c745
 800c780:	0800c745 	.word	0x0800c745
 800c784:	0800c745 	.word	0x0800c745
 800c788:	0800c8d5 	.word	0x0800c8d5
 800c78c:	0800c7f9 	.word	0x0800c7f9
 800c790:	0800c8b7 	.word	0x0800c8b7
 800c794:	0800c745 	.word	0x0800c745
 800c798:	0800c745 	.word	0x0800c745
 800c79c:	0800c8f7 	.word	0x0800c8f7
 800c7a0:	0800c745 	.word	0x0800c745
 800c7a4:	0800c7f9 	.word	0x0800c7f9
 800c7a8:	0800c745 	.word	0x0800c745
 800c7ac:	0800c745 	.word	0x0800c745
 800c7b0:	0800c8bf 	.word	0x0800c8bf
 800c7b4:	680b      	ldr	r3, [r1, #0]
 800c7b6:	1d1a      	adds	r2, r3, #4
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	600a      	str	r2, [r1, #0]
 800c7bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c7c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	e0a3      	b.n	800c910 <_printf_i+0x1f4>
 800c7c8:	6825      	ldr	r5, [r4, #0]
 800c7ca:	6808      	ldr	r0, [r1, #0]
 800c7cc:	062e      	lsls	r6, r5, #24
 800c7ce:	f100 0304 	add.w	r3, r0, #4
 800c7d2:	d50a      	bpl.n	800c7ea <_printf_i+0xce>
 800c7d4:	6805      	ldr	r5, [r0, #0]
 800c7d6:	600b      	str	r3, [r1, #0]
 800c7d8:	2d00      	cmp	r5, #0
 800c7da:	da03      	bge.n	800c7e4 <_printf_i+0xc8>
 800c7dc:	232d      	movs	r3, #45	; 0x2d
 800c7de:	426d      	negs	r5, r5
 800c7e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7e4:	485e      	ldr	r0, [pc, #376]	; (800c960 <_printf_i+0x244>)
 800c7e6:	230a      	movs	r3, #10
 800c7e8:	e019      	b.n	800c81e <_printf_i+0x102>
 800c7ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c7ee:	6805      	ldr	r5, [r0, #0]
 800c7f0:	600b      	str	r3, [r1, #0]
 800c7f2:	bf18      	it	ne
 800c7f4:	b22d      	sxthne	r5, r5
 800c7f6:	e7ef      	b.n	800c7d8 <_printf_i+0xbc>
 800c7f8:	680b      	ldr	r3, [r1, #0]
 800c7fa:	6825      	ldr	r5, [r4, #0]
 800c7fc:	1d18      	adds	r0, r3, #4
 800c7fe:	6008      	str	r0, [r1, #0]
 800c800:	0628      	lsls	r0, r5, #24
 800c802:	d501      	bpl.n	800c808 <_printf_i+0xec>
 800c804:	681d      	ldr	r5, [r3, #0]
 800c806:	e002      	b.n	800c80e <_printf_i+0xf2>
 800c808:	0669      	lsls	r1, r5, #25
 800c80a:	d5fb      	bpl.n	800c804 <_printf_i+0xe8>
 800c80c:	881d      	ldrh	r5, [r3, #0]
 800c80e:	4854      	ldr	r0, [pc, #336]	; (800c960 <_printf_i+0x244>)
 800c810:	2f6f      	cmp	r7, #111	; 0x6f
 800c812:	bf0c      	ite	eq
 800c814:	2308      	moveq	r3, #8
 800c816:	230a      	movne	r3, #10
 800c818:	2100      	movs	r1, #0
 800c81a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c81e:	6866      	ldr	r6, [r4, #4]
 800c820:	60a6      	str	r6, [r4, #8]
 800c822:	2e00      	cmp	r6, #0
 800c824:	bfa2      	ittt	ge
 800c826:	6821      	ldrge	r1, [r4, #0]
 800c828:	f021 0104 	bicge.w	r1, r1, #4
 800c82c:	6021      	strge	r1, [r4, #0]
 800c82e:	b90d      	cbnz	r5, 800c834 <_printf_i+0x118>
 800c830:	2e00      	cmp	r6, #0
 800c832:	d04d      	beq.n	800c8d0 <_printf_i+0x1b4>
 800c834:	4616      	mov	r6, r2
 800c836:	fbb5 f1f3 	udiv	r1, r5, r3
 800c83a:	fb03 5711 	mls	r7, r3, r1, r5
 800c83e:	5dc7      	ldrb	r7, [r0, r7]
 800c840:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c844:	462f      	mov	r7, r5
 800c846:	42bb      	cmp	r3, r7
 800c848:	460d      	mov	r5, r1
 800c84a:	d9f4      	bls.n	800c836 <_printf_i+0x11a>
 800c84c:	2b08      	cmp	r3, #8
 800c84e:	d10b      	bne.n	800c868 <_printf_i+0x14c>
 800c850:	6823      	ldr	r3, [r4, #0]
 800c852:	07df      	lsls	r7, r3, #31
 800c854:	d508      	bpl.n	800c868 <_printf_i+0x14c>
 800c856:	6923      	ldr	r3, [r4, #16]
 800c858:	6861      	ldr	r1, [r4, #4]
 800c85a:	4299      	cmp	r1, r3
 800c85c:	bfde      	ittt	le
 800c85e:	2330      	movle	r3, #48	; 0x30
 800c860:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c864:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c868:	1b92      	subs	r2, r2, r6
 800c86a:	6122      	str	r2, [r4, #16]
 800c86c:	f8cd a000 	str.w	sl, [sp]
 800c870:	464b      	mov	r3, r9
 800c872:	aa03      	add	r2, sp, #12
 800c874:	4621      	mov	r1, r4
 800c876:	4640      	mov	r0, r8
 800c878:	f7ff fee2 	bl	800c640 <_printf_common>
 800c87c:	3001      	adds	r0, #1
 800c87e:	d14c      	bne.n	800c91a <_printf_i+0x1fe>
 800c880:	f04f 30ff 	mov.w	r0, #4294967295
 800c884:	b004      	add	sp, #16
 800c886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c88a:	4835      	ldr	r0, [pc, #212]	; (800c960 <_printf_i+0x244>)
 800c88c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c890:	6823      	ldr	r3, [r4, #0]
 800c892:	680e      	ldr	r6, [r1, #0]
 800c894:	061f      	lsls	r7, r3, #24
 800c896:	f856 5b04 	ldr.w	r5, [r6], #4
 800c89a:	600e      	str	r6, [r1, #0]
 800c89c:	d514      	bpl.n	800c8c8 <_printf_i+0x1ac>
 800c89e:	07d9      	lsls	r1, r3, #31
 800c8a0:	bf44      	itt	mi
 800c8a2:	f043 0320 	orrmi.w	r3, r3, #32
 800c8a6:	6023      	strmi	r3, [r4, #0]
 800c8a8:	b91d      	cbnz	r5, 800c8b2 <_printf_i+0x196>
 800c8aa:	6823      	ldr	r3, [r4, #0]
 800c8ac:	f023 0320 	bic.w	r3, r3, #32
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	2310      	movs	r3, #16
 800c8b4:	e7b0      	b.n	800c818 <_printf_i+0xfc>
 800c8b6:	6823      	ldr	r3, [r4, #0]
 800c8b8:	f043 0320 	orr.w	r3, r3, #32
 800c8bc:	6023      	str	r3, [r4, #0]
 800c8be:	2378      	movs	r3, #120	; 0x78
 800c8c0:	4828      	ldr	r0, [pc, #160]	; (800c964 <_printf_i+0x248>)
 800c8c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8c6:	e7e3      	b.n	800c890 <_printf_i+0x174>
 800c8c8:	065e      	lsls	r6, r3, #25
 800c8ca:	bf48      	it	mi
 800c8cc:	b2ad      	uxthmi	r5, r5
 800c8ce:	e7e6      	b.n	800c89e <_printf_i+0x182>
 800c8d0:	4616      	mov	r6, r2
 800c8d2:	e7bb      	b.n	800c84c <_printf_i+0x130>
 800c8d4:	680b      	ldr	r3, [r1, #0]
 800c8d6:	6826      	ldr	r6, [r4, #0]
 800c8d8:	6960      	ldr	r0, [r4, #20]
 800c8da:	1d1d      	adds	r5, r3, #4
 800c8dc:	600d      	str	r5, [r1, #0]
 800c8de:	0635      	lsls	r5, r6, #24
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	d501      	bpl.n	800c8e8 <_printf_i+0x1cc>
 800c8e4:	6018      	str	r0, [r3, #0]
 800c8e6:	e002      	b.n	800c8ee <_printf_i+0x1d2>
 800c8e8:	0671      	lsls	r1, r6, #25
 800c8ea:	d5fb      	bpl.n	800c8e4 <_printf_i+0x1c8>
 800c8ec:	8018      	strh	r0, [r3, #0]
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	6123      	str	r3, [r4, #16]
 800c8f2:	4616      	mov	r6, r2
 800c8f4:	e7ba      	b.n	800c86c <_printf_i+0x150>
 800c8f6:	680b      	ldr	r3, [r1, #0]
 800c8f8:	1d1a      	adds	r2, r3, #4
 800c8fa:	600a      	str	r2, [r1, #0]
 800c8fc:	681e      	ldr	r6, [r3, #0]
 800c8fe:	6862      	ldr	r2, [r4, #4]
 800c900:	2100      	movs	r1, #0
 800c902:	4630      	mov	r0, r6
 800c904:	f7f3 fc9c 	bl	8000240 <memchr>
 800c908:	b108      	cbz	r0, 800c90e <_printf_i+0x1f2>
 800c90a:	1b80      	subs	r0, r0, r6
 800c90c:	6060      	str	r0, [r4, #4]
 800c90e:	6863      	ldr	r3, [r4, #4]
 800c910:	6123      	str	r3, [r4, #16]
 800c912:	2300      	movs	r3, #0
 800c914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c918:	e7a8      	b.n	800c86c <_printf_i+0x150>
 800c91a:	6923      	ldr	r3, [r4, #16]
 800c91c:	4632      	mov	r2, r6
 800c91e:	4649      	mov	r1, r9
 800c920:	4640      	mov	r0, r8
 800c922:	47d0      	blx	sl
 800c924:	3001      	adds	r0, #1
 800c926:	d0ab      	beq.n	800c880 <_printf_i+0x164>
 800c928:	6823      	ldr	r3, [r4, #0]
 800c92a:	079b      	lsls	r3, r3, #30
 800c92c:	d413      	bmi.n	800c956 <_printf_i+0x23a>
 800c92e:	68e0      	ldr	r0, [r4, #12]
 800c930:	9b03      	ldr	r3, [sp, #12]
 800c932:	4298      	cmp	r0, r3
 800c934:	bfb8      	it	lt
 800c936:	4618      	movlt	r0, r3
 800c938:	e7a4      	b.n	800c884 <_printf_i+0x168>
 800c93a:	2301      	movs	r3, #1
 800c93c:	4632      	mov	r2, r6
 800c93e:	4649      	mov	r1, r9
 800c940:	4640      	mov	r0, r8
 800c942:	47d0      	blx	sl
 800c944:	3001      	adds	r0, #1
 800c946:	d09b      	beq.n	800c880 <_printf_i+0x164>
 800c948:	3501      	adds	r5, #1
 800c94a:	68e3      	ldr	r3, [r4, #12]
 800c94c:	9903      	ldr	r1, [sp, #12]
 800c94e:	1a5b      	subs	r3, r3, r1
 800c950:	42ab      	cmp	r3, r5
 800c952:	dcf2      	bgt.n	800c93a <_printf_i+0x21e>
 800c954:	e7eb      	b.n	800c92e <_printf_i+0x212>
 800c956:	2500      	movs	r5, #0
 800c958:	f104 0619 	add.w	r6, r4, #25
 800c95c:	e7f5      	b.n	800c94a <_printf_i+0x22e>
 800c95e:	bf00      	nop
 800c960:	08011431 	.word	0x08011431
 800c964:	08011442 	.word	0x08011442

0800c968 <_read_r>:
 800c968:	b538      	push	{r3, r4, r5, lr}
 800c96a:	4d07      	ldr	r5, [pc, #28]	; (800c988 <_read_r+0x20>)
 800c96c:	4604      	mov	r4, r0
 800c96e:	4608      	mov	r0, r1
 800c970:	4611      	mov	r1, r2
 800c972:	2200      	movs	r2, #0
 800c974:	602a      	str	r2, [r5, #0]
 800c976:	461a      	mov	r2, r3
 800c978:	f7fe f96a 	bl	800ac50 <_read>
 800c97c:	1c43      	adds	r3, r0, #1
 800c97e:	d102      	bne.n	800c986 <_read_r+0x1e>
 800c980:	682b      	ldr	r3, [r5, #0]
 800c982:	b103      	cbz	r3, 800c986 <_read_r+0x1e>
 800c984:	6023      	str	r3, [r4, #0]
 800c986:	bd38      	pop	{r3, r4, r5, pc}
 800c988:	20046744 	.word	0x20046744

0800c98c <_fstat_r>:
 800c98c:	b538      	push	{r3, r4, r5, lr}
 800c98e:	4d07      	ldr	r5, [pc, #28]	; (800c9ac <_fstat_r+0x20>)
 800c990:	2300      	movs	r3, #0
 800c992:	4604      	mov	r4, r0
 800c994:	4608      	mov	r0, r1
 800c996:	4611      	mov	r1, r2
 800c998:	602b      	str	r3, [r5, #0]
 800c99a:	f000 f821 	bl	800c9e0 <_fstat>
 800c99e:	1c43      	adds	r3, r0, #1
 800c9a0:	d102      	bne.n	800c9a8 <_fstat_r+0x1c>
 800c9a2:	682b      	ldr	r3, [r5, #0]
 800c9a4:	b103      	cbz	r3, 800c9a8 <_fstat_r+0x1c>
 800c9a6:	6023      	str	r3, [r4, #0]
 800c9a8:	bd38      	pop	{r3, r4, r5, pc}
 800c9aa:	bf00      	nop
 800c9ac:	20046744 	.word	0x20046744

0800c9b0 <_isatty_r>:
 800c9b0:	b538      	push	{r3, r4, r5, lr}
 800c9b2:	4d06      	ldr	r5, [pc, #24]	; (800c9cc <_isatty_r+0x1c>)
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	4604      	mov	r4, r0
 800c9b8:	4608      	mov	r0, r1
 800c9ba:	602b      	str	r3, [r5, #0]
 800c9bc:	f000 f818 	bl	800c9f0 <_isatty>
 800c9c0:	1c43      	adds	r3, r0, #1
 800c9c2:	d102      	bne.n	800c9ca <_isatty_r+0x1a>
 800c9c4:	682b      	ldr	r3, [r5, #0]
 800c9c6:	b103      	cbz	r3, 800c9ca <_isatty_r+0x1a>
 800c9c8:	6023      	str	r3, [r4, #0]
 800c9ca:	bd38      	pop	{r3, r4, r5, pc}
 800c9cc:	20046744 	.word	0x20046744

0800c9d0 <_close>:
 800c9d0:	4b02      	ldr	r3, [pc, #8]	; (800c9dc <_close+0xc>)
 800c9d2:	2258      	movs	r2, #88	; 0x58
 800c9d4:	601a      	str	r2, [r3, #0]
 800c9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9da:	4770      	bx	lr
 800c9dc:	20046744 	.word	0x20046744

0800c9e0 <_fstat>:
 800c9e0:	4b02      	ldr	r3, [pc, #8]	; (800c9ec <_fstat+0xc>)
 800c9e2:	2258      	movs	r2, #88	; 0x58
 800c9e4:	601a      	str	r2, [r3, #0]
 800c9e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ea:	4770      	bx	lr
 800c9ec:	20046744 	.word	0x20046744

0800c9f0 <_isatty>:
 800c9f0:	4b02      	ldr	r3, [pc, #8]	; (800c9fc <_isatty+0xc>)
 800c9f2:	2258      	movs	r2, #88	; 0x58
 800c9f4:	601a      	str	r2, [r3, #0]
 800c9f6:	2000      	movs	r0, #0
 800c9f8:	4770      	bx	lr
 800c9fa:	bf00      	nop
 800c9fc:	20046744 	.word	0x20046744

0800ca00 <_lseek>:
 800ca00:	4b02      	ldr	r3, [pc, #8]	; (800ca0c <_lseek+0xc>)
 800ca02:	2258      	movs	r2, #88	; 0x58
 800ca04:	601a      	str	r2, [r3, #0]
 800ca06:	f04f 30ff 	mov.w	r0, #4294967295
 800ca0a:	4770      	bx	lr
 800ca0c:	20046744 	.word	0x20046744

0800ca10 <_sbrk>:
 800ca10:	4b04      	ldr	r3, [pc, #16]	; (800ca24 <_sbrk+0x14>)
 800ca12:	6819      	ldr	r1, [r3, #0]
 800ca14:	4602      	mov	r2, r0
 800ca16:	b909      	cbnz	r1, 800ca1c <_sbrk+0xc>
 800ca18:	4903      	ldr	r1, [pc, #12]	; (800ca28 <_sbrk+0x18>)
 800ca1a:	6019      	str	r1, [r3, #0]
 800ca1c:	6818      	ldr	r0, [r3, #0]
 800ca1e:	4402      	add	r2, r0
 800ca20:	601a      	str	r2, [r3, #0]
 800ca22:	4770      	bx	lr
 800ca24:	2000197c 	.word	0x2000197c
 800ca28:	20046748 	.word	0x20046748

0800ca2c <_init>:
 800ca2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca2e:	bf00      	nop
 800ca30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca32:	bc08      	pop	{r3}
 800ca34:	469e      	mov	lr, r3
 800ca36:	4770      	bx	lr

0800ca38 <_fini>:
 800ca38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca3a:	bf00      	nop
 800ca3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca3e:	bc08      	pop	{r3}
 800ca40:	469e      	mov	lr, r3
 800ca42:	4770      	bx	lr
