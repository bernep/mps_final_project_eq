
mps_final_project_eq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed24  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000045d4  0800ef1c  0800ef1c  0001ef1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080134f0  080134f0  000234f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080134f4  080134f4  000234f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000270  20000000  080134f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00058e20  20000270  08013768  00030270  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20059090  08013768  00039090  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00030270  2**0
                  CONTENTS, READONLY
  9 .debug_info   00064f41  00000000  00000000  0003029e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000977e  00000000  00000000  000951df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0002bbff  00000000  00000000  0009e95d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000027b8  00000000  00000000  000ca560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002630  00000000  00000000  000ccd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c7cb  00000000  00000000  000cf348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00057df2  00000000  00000000  0010bb13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00139c4b  00000000  00000000  00163905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0029d550  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007a1c  00000000  00000000  0029d5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         0000006c  00000000  00000000  002a4fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000e3  00000000  00000000  002a502c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000270 	.word	0x20000270
 8000214:	00000000 	.word	0x00000000
 8000218:	0800ef04 	.word	0x0800ef04

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000274 	.word	0x20000274
 8000234:	0800ef04 	.word	0x0800ef04

08000238 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8000238:	b508      	push	{r3, lr}
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800023a:	f000 fecd 	bl	8000fd8 <AUDIO_IO_Write>
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
}
 800023e:	2000      	movs	r0, #0
 8000240:	bd08      	pop	{r3, pc}
	...

08000244 <wm8994_SetMute>:
{
 8000244:	b538      	push	{r3, r4, r5, lr}
 8000246:	4603      	mov	r3, r0
  if (outputEnabled != 0)
 8000248:	4a13      	ldr	r2, [pc, #76]	; (8000298 <wm8994_SetMute+0x54>)
 800024a:	6810      	ldr	r0, [r2, #0]
 800024c:	b180      	cbz	r0, 8000270 <wm8994_SetMute+0x2c>
    if(Cmd == AUDIO_MUTE_ON)
 800024e:	2901      	cmp	r1, #1
 8000250:	d00f      	beq.n	8000272 <wm8994_SetMute+0x2e>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8000252:	b2dd      	uxtb	r5, r3
 8000254:	2200      	movs	r2, #0
 8000256:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800025a:	4628      	mov	r0, r5
 800025c:	f7ff ffec 	bl	8000238 <CODEC_IO_Write>
 8000260:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8000262:	2200      	movs	r2, #0
 8000264:	f240 4122 	movw	r1, #1058	; 0x422
 8000268:	4628      	mov	r0, r5
 800026a:	f7ff ffe5 	bl	8000238 <CODEC_IO_Write>
 800026e:	4420      	add	r0, r4
}
 8000270:	bd38      	pop	{r3, r4, r5, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8000272:	b2dd      	uxtb	r5, r3
 8000274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000278:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800027c:	4628      	mov	r0, r5
 800027e:	f7ff ffdb 	bl	8000238 <CODEC_IO_Write>
 8000282:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8000284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000288:	f240 4122 	movw	r1, #1058	; 0x422
 800028c:	4628      	mov	r0, r5
 800028e:	f7ff ffd3 	bl	8000238 <CODEC_IO_Write>
 8000292:	4420      	add	r0, r4
 8000294:	e7ec      	b.n	8000270 <wm8994_SetMute+0x2c>
 8000296:	bf00      	nop
 8000298:	2000028c 	.word	0x2000028c

0800029c <wm8994_Play>:
{
 800029c:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800029e:	2100      	movs	r1, #0
 80002a0:	f7ff ffd0 	bl	8000244 <wm8994_SetMute>
}
 80002a4:	bd08      	pop	{r3, pc}

080002a6 <wm8994_Resume>:
{
 80002a6:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80002a8:	2100      	movs	r1, #0
 80002aa:	f7ff ffcb 	bl	8000244 <wm8994_SetMute>
}
 80002ae:	bd08      	pop	{r3, pc}

080002b0 <wm8994_Pause>:
{  
 80002b0:	b538      	push	{r3, r4, r5, lr}
 80002b2:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80002b4:	2101      	movs	r1, #1
 80002b6:	f7ff ffc5 	bl	8000244 <wm8994_SetMute>
 80002ba:	4604      	mov	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 80002bc:	2201      	movs	r2, #1
 80002be:	2102      	movs	r1, #2
 80002c0:	b2e8      	uxtb	r0, r5
 80002c2:	f7ff ffb9 	bl	8000238 <CODEC_IO_Write>
}
 80002c6:	4420      	add	r0, r4
 80002c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080002cc <wm8994_Stop>:
{
 80002cc:	b570      	push	{r4, r5, r6, lr}
  if (outputEnabled != 0)
 80002ce:	4b1d      	ldr	r3, [pc, #116]	; (8000344 <wm8994_Stop+0x78>)
 80002d0:	681c      	ldr	r4, [r3, #0]
 80002d2:	b90c      	cbnz	r4, 80002d8 <wm8994_Stop+0xc>
}
 80002d4:	4620      	mov	r0, r4
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	4605      	mov	r5, r0
 80002da:	460e      	mov	r6, r1
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80002dc:	2101      	movs	r1, #1
 80002de:	f7ff ffb1 	bl	8000244 <wm8994_SetMute>
 80002e2:	4604      	mov	r4, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 80002e4:	2e02      	cmp	r6, #2
 80002e6:	d0f5      	beq.n	80002d4 <wm8994_Stop+0x8>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80002e8:	b2ed      	uxtb	r5, r5
 80002ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002ee:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80002f2:	4628      	mov	r0, r5
 80002f4:	f7ff ffa0 	bl	8000238 <CODEC_IO_Write>
 80002f8:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80002fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002fe:	f240 4122 	movw	r1, #1058	; 0x422
 8000302:	4628      	mov	r0, r5
 8000304:	f7ff ff98 	bl	8000238 <CODEC_IO_Write>
 8000308:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 800030a:	2200      	movs	r2, #0
 800030c:	212d      	movs	r1, #45	; 0x2d
 800030e:	4628      	mov	r0, r5
 8000310:	f7ff ff92 	bl	8000238 <CODEC_IO_Write>
 8000314:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8000316:	2200      	movs	r2, #0
 8000318:	212e      	movs	r1, #46	; 0x2e
 800031a:	4628      	mov	r0, r5
 800031c:	f7ff ff8c 	bl	8000238 <CODEC_IO_Write>
 8000320:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8000322:	2200      	movs	r2, #0
 8000324:	2105      	movs	r1, #5
 8000326:	4628      	mov	r0, r5
 8000328:	f7ff ff86 	bl	8000238 <CODEC_IO_Write>
 800032c:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800032e:	2200      	movs	r2, #0
 8000330:	4611      	mov	r1, r2
 8000332:	4628      	mov	r0, r5
 8000334:	f7ff ff80 	bl	8000238 <CODEC_IO_Write>
 8000338:	4404      	add	r4, r0
      outputEnabled = 0;
 800033a:	4b02      	ldr	r3, [pc, #8]	; (8000344 <wm8994_Stop+0x78>)
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
  return counter;
 8000340:	e7c8      	b.n	80002d4 <wm8994_Stop+0x8>
 8000342:	bf00      	nop
 8000344:	2000028c 	.word	0x2000028c

08000348 <wm8994_SetVolume>:
{
 8000348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800034c:	4606      	mov	r6, r0
 800034e:	460c      	mov	r4, r1
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000350:	2964      	cmp	r1, #100	; 0x64
 8000352:	d809      	bhi.n	8000368 <wm8994_SetVolume+0x20>
 8000354:	ebc1 1381 	rsb	r3, r1, r1, lsl #6
 8000358:	4a46      	ldr	r2, [pc, #280]	; (8000474 <wm8994_SetVolume+0x12c>)
 800035a:	fb82 1203 	smull	r1, r2, r2, r3
 800035e:	17df      	asrs	r7, r3, #31
 8000360:	ebc7 1762 	rsb	r7, r7, r2, asr #5
 8000364:	b2ff      	uxtb	r7, r7
 8000366:	e000      	b.n	800036a <wm8994_SetVolume+0x22>
 8000368:	2764      	movs	r7, #100	; 0x64
  if (outputEnabled != 0)
 800036a:	4b43      	ldr	r3, [pc, #268]	; (8000478 <wm8994_SetVolume+0x130>)
 800036c:	681d      	ldr	r5, [r3, #0]
 800036e:	b13d      	cbz	r5, 8000380 <wm8994_SetVolume+0x38>
    if(convertedvol > 0x3E)
 8000370:	2f3e      	cmp	r7, #62	; 0x3e
 8000372:	d816      	bhi.n	80003a2 <wm8994_SetVolume+0x5a>
    else if (Volume == 0)
 8000374:	bbc4      	cbnz	r4, 80003e8 <wm8994_SetVolume+0xa0>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000376:	2101      	movs	r1, #1
 8000378:	4630      	mov	r0, r6
 800037a:	f7ff ff63 	bl	8000244 <wm8994_SetMute>
 800037e:	4605      	mov	r5, r0
  if (inputEnabled != 0)
 8000380:	4b3d      	ldr	r3, [pc, #244]	; (8000478 <wm8994_SetVolume+0x130>)
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d071      	beq.n	800046c <wm8994_SetVolume+0x124>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8000388:	2c63      	cmp	r4, #99	; 0x63
 800038a:	d84f      	bhi.n	800042c <wm8994_SetVolume+0xe4>
 800038c:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8000390:	0124      	lsls	r4, r4, #4
 8000392:	4b38      	ldr	r3, [pc, #224]	; (8000474 <wm8994_SetVolume+0x12c>)
 8000394:	fb83 2304 	smull	r2, r3, r3, r4
 8000398:	17e4      	asrs	r4, r4, #31
 800039a:	ebc4 1463 	rsb	r4, r4, r3, asr #5
 800039e:	b2e4      	uxtb	r4, r4
 80003a0:	e045      	b.n	800042e <wm8994_SetVolume+0xe6>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80003a2:	2100      	movs	r1, #0
 80003a4:	4630      	mov	r0, r6
 80003a6:	f7ff ff4d 	bl	8000244 <wm8994_SetMute>
 80003aa:	4605      	mov	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80003ac:	b2f7      	uxtb	r7, r6
 80003ae:	f240 127f 	movw	r2, #383	; 0x17f
 80003b2:	211c      	movs	r1, #28
 80003b4:	4638      	mov	r0, r7
 80003b6:	f7ff ff3f 	bl	8000238 <CODEC_IO_Write>
 80003ba:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80003bc:	f240 127f 	movw	r2, #383	; 0x17f
 80003c0:	211d      	movs	r1, #29
 80003c2:	4638      	mov	r0, r7
 80003c4:	f7ff ff38 	bl	8000238 <CODEC_IO_Write>
 80003c8:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80003ca:	f240 127f 	movw	r2, #383	; 0x17f
 80003ce:	2126      	movs	r1, #38	; 0x26
 80003d0:	4638      	mov	r0, r7
 80003d2:	f7ff ff31 	bl	8000238 <CODEC_IO_Write>
 80003d6:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80003d8:	f240 127f 	movw	r2, #383	; 0x17f
 80003dc:	2127      	movs	r1, #39	; 0x27
 80003de:	4638      	mov	r0, r7
 80003e0:	f7ff ff2a 	bl	8000238 <CODEC_IO_Write>
 80003e4:	4405      	add	r5, r0
 80003e6:	e7cb      	b.n	8000380 <wm8994_SetVolume+0x38>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80003e8:	2100      	movs	r1, #0
 80003ea:	4630      	mov	r0, r6
 80003ec:	f7ff ff2a 	bl	8000244 <wm8994_SetMute>
 80003f0:	4605      	mov	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80003f2:	fa5f f886 	uxtb.w	r8, r6
 80003f6:	f447 77a0 	orr.w	r7, r7, #320	; 0x140
 80003fa:	463a      	mov	r2, r7
 80003fc:	211c      	movs	r1, #28
 80003fe:	4640      	mov	r0, r8
 8000400:	f7ff ff1a 	bl	8000238 <CODEC_IO_Write>
 8000404:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8000406:	463a      	mov	r2, r7
 8000408:	211d      	movs	r1, #29
 800040a:	4640      	mov	r0, r8
 800040c:	f7ff ff14 	bl	8000238 <CODEC_IO_Write>
 8000410:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8000412:	463a      	mov	r2, r7
 8000414:	2126      	movs	r1, #38	; 0x26
 8000416:	4640      	mov	r0, r8
 8000418:	f7ff ff0e 	bl	8000238 <CODEC_IO_Write>
 800041c:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 800041e:	463a      	mov	r2, r7
 8000420:	2127      	movs	r1, #39	; 0x27
 8000422:	4640      	mov	r0, r8
 8000424:	f7ff ff08 	bl	8000238 <CODEC_IO_Write>
 8000428:	4405      	add	r5, r0
 800042a:	e7a9      	b.n	8000380 <wm8994_SetVolume+0x38>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800042c:	24ef      	movs	r4, #239	; 0xef
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800042e:	b2f6      	uxtb	r6, r6
 8000430:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8000434:	4622      	mov	r2, r4
 8000436:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800043a:	4630      	mov	r0, r6
 800043c:	f7ff fefc 	bl	8000238 <CODEC_IO_Write>
 8000440:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8000442:	4622      	mov	r2, r4
 8000444:	f240 4101 	movw	r1, #1025	; 0x401
 8000448:	4630      	mov	r0, r6
 800044a:	f7ff fef5 	bl	8000238 <CODEC_IO_Write>
 800044e:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8000450:	4622      	mov	r2, r4
 8000452:	f240 4104 	movw	r1, #1028	; 0x404
 8000456:	4630      	mov	r0, r6
 8000458:	f7ff feee 	bl	8000238 <CODEC_IO_Write>
 800045c:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 800045e:	4622      	mov	r2, r4
 8000460:	f240 4105 	movw	r1, #1029	; 0x405
 8000464:	4630      	mov	r0, r6
 8000466:	f7ff fee7 	bl	8000238 <CODEC_IO_Write>
 800046a:	4405      	add	r5, r0
}
 800046c:	4628      	mov	r0, r5
 800046e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000472:	bf00      	nop
 8000474:	51eb851f 	.word	0x51eb851f
 8000478:	2000028c 	.word	0x2000028c

0800047c <wm8994_InitExt>:
{
 800047c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000480:	4681      	mov	r9, r0
 8000482:	4692      	mov	sl, r2
 8000484:	461e      	mov	r6, r3
  uint16_t output_device = OutputInputDevice & 0xFF;
 8000486:	fa5f f881 	uxtb.w	r8, r1
  uint16_t input_device = OutputInputDevice & 0xFF00;
 800048a:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
  AUDIO_IO_Init();
 800048e:	f000 fd99 	bl	8000fc4 <AUDIO_IO_Init>
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8000492:	fa5f f489 	uxtb.w	r4, r9
 8000496:	2203      	movs	r2, #3
 8000498:	f44f 7181 	mov.w	r1, #258	; 0x102
 800049c:	4620      	mov	r0, r4
 800049e:	f7ff fecb 	bl	8000238 <CODEC_IO_Write>
 80004a2:	4607      	mov	r7, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f640 0117 	movw	r1, #2071	; 0x817
 80004aa:	4620      	mov	r0, r4
 80004ac:	f7ff fec4 	bl	8000238 <CODEC_IO_Write>
 80004b0:	4407      	add	r7, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80004b2:	2200      	movs	r2, #0
 80004b4:	f44f 7181 	mov.w	r1, #258	; 0x102
 80004b8:	4620      	mov	r0, r4
 80004ba:	f7ff febd 	bl	8000238 <CODEC_IO_Write>
 80004be:	4407      	add	r7, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80004c0:	226c      	movs	r2, #108	; 0x6c
 80004c2:	2139      	movs	r1, #57	; 0x39
 80004c4:	4620      	mov	r0, r4
 80004c6:	f7ff feb7 	bl	8000238 <CODEC_IO_Write>
 80004ca:	4407      	add	r7, r0
  if (input_device > 0)
 80004cc:	b3dd      	cbz	r5, 8000546 <wm8994_InitExt+0xca>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80004ce:	2213      	movs	r2, #19
 80004d0:	2101      	movs	r1, #1
 80004d2:	4620      	mov	r0, r4
 80004d4:	f7ff feb0 	bl	8000238 <CODEC_IO_Write>
 80004d8:	4407      	add	r7, r0
  AUDIO_IO_Delay(50);
 80004da:	2032      	movs	r0, #50	; 0x32
 80004dc:	f000 fdb0 	bl	8001040 <AUDIO_IO_Delay>
  if (output_device > 0)
 80004e0:	f1b8 0f00 	cmp.w	r8, #0
 80004e4:	f000 80c9 	beq.w	800067a <wm8994_InitExt+0x1fe>
    outputEnabled = 1;
 80004e8:	4be8      	ldr	r3, [pc, #928]	; (800088c <wm8994_InitExt+0x410>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	601a      	str	r2, [r3, #0]
    switch (output_device)
 80004ee:	f1b8 0f02 	cmp.w	r8, #2
 80004f2:	d053      	beq.n	800059c <wm8994_InitExt+0x120>
 80004f4:	f1b8 0f03 	cmp.w	r8, #3
 80004f8:	d074      	beq.n	80005e4 <wm8994_InitExt+0x168>
 80004fa:	4590      	cmp	r8, r2
 80004fc:	d02a      	beq.n	8000554 <wm8994_InitExt+0xd8>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80004fe:	f240 3203 	movw	r2, #771	; 0x303
 8000502:	2105      	movs	r1, #5
 8000504:	4620      	mov	r0, r4
 8000506:	f7ff fe97 	bl	8000238 <CODEC_IO_Write>
 800050a:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800050c:	2201      	movs	r2, #1
 800050e:	f240 6101 	movw	r1, #1537	; 0x601
 8000512:	4620      	mov	r0, r4
 8000514:	f7ff fe90 	bl	8000238 <CODEC_IO_Write>
 8000518:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800051a:	2201      	movs	r2, #1
 800051c:	f240 6102 	movw	r1, #1538	; 0x602
 8000520:	4620      	mov	r0, r4
 8000522:	f7ff fe89 	bl	8000238 <CODEC_IO_Write>
 8000526:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000528:	2200      	movs	r2, #0
 800052a:	f240 6104 	movw	r1, #1540	; 0x604
 800052e:	4620      	mov	r0, r4
 8000530:	f7ff fe82 	bl	8000238 <CODEC_IO_Write>
 8000534:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000536:	2200      	movs	r2, #0
 8000538:	f240 6105 	movw	r1, #1541	; 0x605
 800053c:	4620      	mov	r0, r4
 800053e:	f7ff fe7b 	bl	8000238 <CODEC_IO_Write>
 8000542:	4407      	add	r7, r0
      break;
 8000544:	e09c      	b.n	8000680 <wm8994_InitExt+0x204>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8000546:	2203      	movs	r2, #3
 8000548:	2101      	movs	r1, #1
 800054a:	4620      	mov	r0, r4
 800054c:	f7ff fe74 	bl	8000238 <CODEC_IO_Write>
 8000550:	4407      	add	r7, r0
 8000552:	e7c2      	b.n	80004da <wm8994_InitExt+0x5e>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8000554:	f640 420c 	movw	r2, #3084	; 0xc0c
 8000558:	2105      	movs	r1, #5
 800055a:	4620      	mov	r0, r4
 800055c:	f7ff fe6c 	bl	8000238 <CODEC_IO_Write>
 8000560:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8000562:	2200      	movs	r2, #0
 8000564:	f240 6101 	movw	r1, #1537	; 0x601
 8000568:	4620      	mov	r0, r4
 800056a:	f7ff fe65 	bl	8000238 <CODEC_IO_Write>
 800056e:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8000570:	2200      	movs	r2, #0
 8000572:	f240 6102 	movw	r1, #1538	; 0x602
 8000576:	4620      	mov	r0, r4
 8000578:	f7ff fe5e 	bl	8000238 <CODEC_IO_Write>
 800057c:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800057e:	2202      	movs	r2, #2
 8000580:	f240 6104 	movw	r1, #1540	; 0x604
 8000584:	4620      	mov	r0, r4
 8000586:	f7ff fe57 	bl	8000238 <CODEC_IO_Write>
 800058a:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800058c:	2202      	movs	r2, #2
 800058e:	f240 6105 	movw	r1, #1541	; 0x605
 8000592:	4620      	mov	r0, r4
 8000594:	f7ff fe50 	bl	8000238 <CODEC_IO_Write>
 8000598:	4407      	add	r7, r0
      break;
 800059a:	e071      	b.n	8000680 <wm8994_InitExt+0x204>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800059c:	f240 3203 	movw	r2, #771	; 0x303
 80005a0:	2105      	movs	r1, #5
 80005a2:	4620      	mov	r0, r4
 80005a4:	f7ff fe48 	bl	8000238 <CODEC_IO_Write>
 80005a8:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80005aa:	2201      	movs	r2, #1
 80005ac:	f240 6101 	movw	r1, #1537	; 0x601
 80005b0:	4620      	mov	r0, r4
 80005b2:	f7ff fe41 	bl	8000238 <CODEC_IO_Write>
 80005b6:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80005b8:	2201      	movs	r2, #1
 80005ba:	f240 6102 	movw	r1, #1538	; 0x602
 80005be:	4620      	mov	r0, r4
 80005c0:	f7ff fe3a 	bl	8000238 <CODEC_IO_Write>
 80005c4:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f240 6104 	movw	r1, #1540	; 0x604
 80005cc:	4620      	mov	r0, r4
 80005ce:	f7ff fe33 	bl	8000238 <CODEC_IO_Write>
 80005d2:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f240 6105 	movw	r1, #1541	; 0x605
 80005da:	4620      	mov	r0, r4
 80005dc:	f7ff fe2c 	bl	8000238 <CODEC_IO_Write>
 80005e0:	4407      	add	r7, r0
      break;
 80005e2:	e04d      	b.n	8000680 <wm8994_InitExt+0x204>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80005e4:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80005e8:	d023      	beq.n	8000632 <wm8994_InitExt+0x1b6>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80005ea:	f640 720f 	movw	r2, #3855	; 0xf0f
 80005ee:	2105      	movs	r1, #5
 80005f0:	4620      	mov	r0, r4
 80005f2:	f7ff fe21 	bl	8000238 <CODEC_IO_Write>
 80005f6:	4407      	add	r7, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f240 6101 	movw	r1, #1537	; 0x601
 80005fe:	4620      	mov	r0, r4
 8000600:	f7ff fe1a 	bl	8000238 <CODEC_IO_Write>
 8000604:	4407      	add	r7, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000606:	2201      	movs	r2, #1
 8000608:	f240 6102 	movw	r1, #1538	; 0x602
 800060c:	4620      	mov	r0, r4
 800060e:	f7ff fe13 	bl	8000238 <CODEC_IO_Write>
 8000612:	4407      	add	r7, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000614:	2202      	movs	r2, #2
 8000616:	f240 6104 	movw	r1, #1540	; 0x604
 800061a:	4620      	mov	r0, r4
 800061c:	f7ff fe0c 	bl	8000238 <CODEC_IO_Write>
 8000620:	4407      	add	r7, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8000622:	2202      	movs	r2, #2
 8000624:	f240 6105 	movw	r1, #1541	; 0x605
 8000628:	4620      	mov	r0, r4
 800062a:	f7ff fe05 	bl	8000238 <CODEC_IO_Write>
 800062e:	4407      	add	r7, r0
 8000630:	e026      	b.n	8000680 <wm8994_InitExt+0x204>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8000632:	f640 720f 	movw	r2, #3855	; 0xf0f
 8000636:	2105      	movs	r1, #5
 8000638:	4620      	mov	r0, r4
 800063a:	f7ff fdfd 	bl	8000238 <CODEC_IO_Write>
 800063e:	4407      	add	r7, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8000640:	2203      	movs	r2, #3
 8000642:	f240 6101 	movw	r1, #1537	; 0x601
 8000646:	4620      	mov	r0, r4
 8000648:	f7ff fdf6 	bl	8000238 <CODEC_IO_Write>
 800064c:	4407      	add	r7, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 800064e:	2203      	movs	r2, #3
 8000650:	f240 6102 	movw	r1, #1538	; 0x602
 8000654:	4620      	mov	r0, r4
 8000656:	f7ff fdef 	bl	8000238 <CODEC_IO_Write>
 800065a:	4407      	add	r7, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 800065c:	2203      	movs	r2, #3
 800065e:	f240 6104 	movw	r1, #1540	; 0x604
 8000662:	4620      	mov	r0, r4
 8000664:	f7ff fde8 	bl	8000238 <CODEC_IO_Write>
 8000668:	4407      	add	r7, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 800066a:	2203      	movs	r2, #3
 800066c:	f240 6105 	movw	r1, #1541	; 0x605
 8000670:	4620      	mov	r0, r4
 8000672:	f7ff fde1 	bl	8000238 <CODEC_IO_Write>
 8000676:	4407      	add	r7, r0
 8000678:	e002      	b.n	8000680 <wm8994_InitExt+0x204>
    outputEnabled = 0;
 800067a:	4b84      	ldr	r3, [pc, #528]	; (800088c <wm8994_InitExt+0x410>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
  if (input_device > 0)
 8000680:	2d00      	cmp	r5, #0
 8000682:	f000 80e8 	beq.w	8000856 <wm8994_InitExt+0x3da>
    inputEnabled = 1;
 8000686:	4b81      	ldr	r3, [pc, #516]	; (800088c <wm8994_InitExt+0x410>)
 8000688:	2201      	movs	r2, #1
 800068a:	605a      	str	r2, [r3, #4]
    switch (input_device)
 800068c:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8000690:	d077      	beq.n	8000782 <wm8994_InitExt+0x306>
 8000692:	d832      	bhi.n	80006fa <wm8994_InitExt+0x27e>
 8000694:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000698:	f000 80b0 	beq.w	80007fc <wm8994_InitExt+0x380>
 800069c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80006a0:	f040 80d7 	bne.w	8000852 <wm8994_InitExt+0x3d6>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80006a4:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80006a8:	2104      	movs	r1, #4
 80006aa:	4620      	mov	r0, r4
 80006ac:	f7ff fdc4 	bl	8000238 <CODEC_IO_Write>
 80006b0:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80006b2:	22db      	movs	r2, #219	; 0xdb
 80006b4:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80006b8:	4620      	mov	r0, r4
 80006ba:	f7ff fdbd 	bl	8000238 <CODEC_IO_Write>
 80006be:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80006c0:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80006c4:	2102      	movs	r1, #2
 80006c6:	4620      	mov	r0, r4
 80006c8:	f7ff fdb6 	bl	8000238 <CODEC_IO_Write>
 80006cc:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80006ce:	2202      	movs	r2, #2
 80006d0:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80006d4:	4620      	mov	r0, r4
 80006d6:	f7ff fdaf 	bl	8000238 <CODEC_IO_Write>
 80006da:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80006dc:	2202      	movs	r2, #2
 80006de:	f240 6109 	movw	r1, #1545	; 0x609
 80006e2:	4620      	mov	r0, r4
 80006e4:	f7ff fda8 	bl	8000238 <CODEC_IO_Write>
 80006e8:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80006ea:	220e      	movs	r2, #14
 80006ec:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80006f0:	4620      	mov	r0, r4
 80006f2:	f7ff fda1 	bl	8000238 <CODEC_IO_Write>
 80006f6:	4407      	add	r7, r0
      break;
 80006f8:	e0b0      	b.n	800085c <wm8994_InitExt+0x3e0>
    switch (input_device)
 80006fa:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80006fe:	f040 80a8 	bne.w	8000852 <wm8994_InitExt+0x3d6>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8000702:	f640 723c 	movw	r2, #3900	; 0xf3c
 8000706:	2104      	movs	r1, #4
 8000708:	4620      	mov	r0, r4
 800070a:	f7ff fd95 	bl	8000238 <CODEC_IO_Write>
 800070e:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8000710:	22db      	movs	r2, #219	; 0xdb
 8000712:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000716:	4620      	mov	r0, r4
 8000718:	f7ff fd8e 	bl	8000238 <CODEC_IO_Write>
 800071c:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800071e:	22db      	movs	r2, #219	; 0xdb
 8000720:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000724:	4620      	mov	r0, r4
 8000726:	f7ff fd87 	bl	8000238 <CODEC_IO_Write>
 800072a:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 800072c:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8000730:	2102      	movs	r1, #2
 8000732:	4620      	mov	r0, r4
 8000734:	f7ff fd80 	bl	8000238 <CODEC_IO_Write>
 8000738:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800073a:	2202      	movs	r2, #2
 800073c:	f240 6106 	movw	r1, #1542	; 0x606
 8000740:	4620      	mov	r0, r4
 8000742:	f7ff fd79 	bl	8000238 <CODEC_IO_Write>
 8000746:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8000748:	2202      	movs	r2, #2
 800074a:	f240 6107 	movw	r1, #1543	; 0x607
 800074e:	4620      	mov	r0, r4
 8000750:	f7ff fd72 	bl	8000238 <CODEC_IO_Write>
 8000754:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8000756:	2202      	movs	r2, #2
 8000758:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800075c:	4620      	mov	r0, r4
 800075e:	f7ff fd6b 	bl	8000238 <CODEC_IO_Write>
 8000762:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8000764:	2202      	movs	r2, #2
 8000766:	f240 6109 	movw	r1, #1545	; 0x609
 800076a:	4620      	mov	r0, r4
 800076c:	f7ff fd64 	bl	8000238 <CODEC_IO_Write>
 8000770:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8000772:	220d      	movs	r2, #13
 8000774:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000778:	4620      	mov	r0, r4
 800077a:	f7ff fd5d 	bl	8000238 <CODEC_IO_Write>
 800077e:	4407      	add	r7, r0
      break;    
 8000780:	e06c      	b.n	800085c <wm8994_InitExt+0x3e0>
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8000782:	2211      	movs	r2, #17
 8000784:	2128      	movs	r1, #40	; 0x28
 8000786:	4620      	mov	r0, r4
 8000788:	f7ff fd56 	bl	8000238 <CODEC_IO_Write>
 800078c:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 800078e:	2235      	movs	r2, #53	; 0x35
 8000790:	2129      	movs	r1, #41	; 0x29
 8000792:	4620      	mov	r0, r4
 8000794:	f7ff fd50 	bl	8000238 <CODEC_IO_Write>
 8000798:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 800079a:	2235      	movs	r2, #53	; 0x35
 800079c:	212a      	movs	r1, #42	; 0x2a
 800079e:	4620      	mov	r0, r4
 80007a0:	f7ff fd4a 	bl	8000238 <CODEC_IO_Write>
 80007a4:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80007a6:	f240 3203 	movw	r2, #771	; 0x303
 80007aa:	2104      	movs	r1, #4
 80007ac:	4620      	mov	r0, r4
 80007ae:	f7ff fd43 	bl	8000238 <CODEC_IO_Write>
 80007b2:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80007b4:	22db      	movs	r2, #219	; 0xdb
 80007b6:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80007ba:	4620      	mov	r0, r4
 80007bc:	f7ff fd3c 	bl	8000238 <CODEC_IO_Write>
 80007c0:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80007c2:	f246 3250 	movw	r2, #25424	; 0x6350
 80007c6:	2102      	movs	r1, #2
 80007c8:	4620      	mov	r0, r4
 80007ca:	f7ff fd35 	bl	8000238 <CODEC_IO_Write>
 80007ce:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80007d0:	2202      	movs	r2, #2
 80007d2:	f240 6106 	movw	r1, #1542	; 0x606
 80007d6:	4620      	mov	r0, r4
 80007d8:	f7ff fd2e 	bl	8000238 <CODEC_IO_Write>
 80007dc:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80007de:	2202      	movs	r2, #2
 80007e0:	f240 6107 	movw	r1, #1543	; 0x607
 80007e4:	4620      	mov	r0, r4
 80007e6:	f7ff fd27 	bl	8000238 <CODEC_IO_Write>
 80007ea:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80007ec:	220d      	movs	r2, #13
 80007ee:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80007f2:	4620      	mov	r0, r4
 80007f4:	f7ff fd20 	bl	8000238 <CODEC_IO_Write>
 80007f8:	4407      	add	r7, r0
      break;
 80007fa:	e02f      	b.n	800085c <wm8994_InitExt+0x3e0>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80007fc:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8000800:	2104      	movs	r1, #4
 8000802:	4620      	mov	r0, r4
 8000804:	f7ff fd18 	bl	8000238 <CODEC_IO_Write>
 8000808:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800080a:	22db      	movs	r2, #219	; 0xdb
 800080c:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000810:	4620      	mov	r0, r4
 8000812:	f7ff fd11 	bl	8000238 <CODEC_IO_Write>
 8000816:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8000818:	f246 3250 	movw	r2, #25424	; 0x6350
 800081c:	2102      	movs	r1, #2
 800081e:	4620      	mov	r0, r4
 8000820:	f7ff fd0a 	bl	8000238 <CODEC_IO_Write>
 8000824:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8000826:	2202      	movs	r2, #2
 8000828:	f240 6106 	movw	r1, #1542	; 0x606
 800082c:	4620      	mov	r0, r4
 800082e:	f7ff fd03 	bl	8000238 <CODEC_IO_Write>
 8000832:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8000834:	2202      	movs	r2, #2
 8000836:	f240 6107 	movw	r1, #1543	; 0x607
 800083a:	4620      	mov	r0, r4
 800083c:	f7ff fcfc 	bl	8000238 <CODEC_IO_Write>
 8000840:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8000842:	220d      	movs	r2, #13
 8000844:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000848:	4620      	mov	r0, r4
 800084a:	f7ff fcf5 	bl	8000238 <CODEC_IO_Write>
 800084e:	4407      	add	r7, r0
      break; 
 8000850:	e004      	b.n	800085c <wm8994_InitExt+0x3e0>
      counter++;
 8000852:	3701      	adds	r7, #1
      break;
 8000854:	e002      	b.n	800085c <wm8994_InitExt+0x3e0>
    inputEnabled = 0;
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <wm8994_InitExt+0x410>)
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
  switch (AudioFreq)
 800085c:	f5b6 4ffa 	cmp.w	r6, #32000	; 0x7d00
 8000860:	f000 8091 	beq.w	8000986 <wm8994_InitExt+0x50a>
 8000864:	d824      	bhi.n	80008b0 <wm8994_InitExt+0x434>
 8000866:	f5b6 5f7a 	cmp.w	r6, #16000	; 0x3e80
 800086a:	f000 8084 	beq.w	8000976 <wm8994_InitExt+0x4fa>
 800086e:	d90f      	bls.n	8000890 <wm8994_InitExt+0x414>
 8000870:	f245 6322 	movw	r3, #22050	; 0x5622
 8000874:	429e      	cmp	r6, r3
 8000876:	f040 8096 	bne.w	80009a6 <wm8994_InitExt+0x52a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800087a:	2243      	movs	r2, #67	; 0x43
 800087c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000880:	4620      	mov	r0, r4
 8000882:	f7ff fcd9 	bl	8000238 <CODEC_IO_Write>
 8000886:	19c6      	adds	r6, r0, r7
    break;
 8000888:	e034      	b.n	80008f4 <wm8994_InitExt+0x478>
 800088a:	bf00      	nop
 800088c:	2000028c 	.word	0x2000028c
  switch (AudioFreq)
 8000890:	f5b6 5ffa 	cmp.w	r6, #8000	; 0x1f40
 8000894:	d027      	beq.n	80008e6 <wm8994_InitExt+0x46a>
 8000896:	f642 3311 	movw	r3, #11025	; 0x2b11
 800089a:	429e      	cmp	r6, r3
 800089c:	f040 8083 	bne.w	80009a6 <wm8994_InitExt+0x52a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80008a0:	2213      	movs	r2, #19
 80008a2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80008a6:	4620      	mov	r0, r4
 80008a8:	f7ff fcc6 	bl	8000238 <CODEC_IO_Write>
 80008ac:	19c6      	adds	r6, r0, r7
    break;
 80008ae:	e021      	b.n	80008f4 <wm8994_InitExt+0x478>
  switch (AudioFreq)
 80008b0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80008b4:	429e      	cmp	r6, r3
 80008b6:	d06e      	beq.n	8000996 <wm8994_InitExt+0x51a>
 80008b8:	4bbb      	ldr	r3, [pc, #748]	; (8000ba8 <wm8994_InitExt+0x72c>)
 80008ba:	429e      	cmp	r6, r3
 80008bc:	d107      	bne.n	80008ce <wm8994_InitExt+0x452>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80008be:	22a3      	movs	r2, #163	; 0xa3
 80008c0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80008c4:	4620      	mov	r0, r4
 80008c6:	f7ff fcb7 	bl	8000238 <CODEC_IO_Write>
 80008ca:	19c6      	adds	r6, r0, r7
    break;
 80008cc:	e012      	b.n	80008f4 <wm8994_InitExt+0x478>
  switch (AudioFreq)
 80008ce:	f64a 4344 	movw	r3, #44100	; 0xac44
 80008d2:	429e      	cmp	r6, r3
 80008d4:	d167      	bne.n	80009a6 <wm8994_InitExt+0x52a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80008d6:	2273      	movs	r2, #115	; 0x73
 80008d8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80008dc:	4620      	mov	r0, r4
 80008de:	f7ff fcab 	bl	8000238 <CODEC_IO_Write>
 80008e2:	19c6      	adds	r6, r0, r7
    break; 
 80008e4:	e006      	b.n	80008f4 <wm8994_InitExt+0x478>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80008e6:	2203      	movs	r2, #3
 80008e8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80008ec:	4620      	mov	r0, r4
 80008ee:	f7ff fca3 	bl	8000238 <CODEC_IO_Write>
 80008f2:	19c6      	adds	r6, r0, r7
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80008f4:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80008f8:	d05d      	beq.n	80009b6 <wm8994_InitExt+0x53a>
  	if(AudioRes == 16 )
 80008fa:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80008fe:	2b10      	cmp	r3, #16
 8000900:	d062      	beq.n	80009c8 <wm8994_InitExt+0x54c>
		counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4070);
 8000902:	f244 0270 	movw	r2, #16496	; 0x4070
 8000906:	f44f 7140 	mov.w	r1, #768	; 0x300
 800090a:	4620      	mov	r0, r4
 800090c:	f7ff fc94 	bl	8000238 <CODEC_IO_Write>
 8000910:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8000912:	2200      	movs	r2, #0
 8000914:	f240 3102 	movw	r1, #770	; 0x302
 8000918:	4620      	mov	r0, r4
 800091a:	f7ff fc8d 	bl	8000238 <CODEC_IO_Write>
 800091e:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8000920:	220a      	movs	r2, #10
 8000922:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000926:	4620      	mov	r0, r4
 8000928:	f7ff fc86 	bl	8000238 <CODEC_IO_Write>
 800092c:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000934:	4620      	mov	r0, r4
 8000936:	f7ff fc7f 	bl	8000238 <CODEC_IO_Write>
 800093a:	4406      	add	r6, r0
  if (output_device > 0)  /* Audio output selected */
 800093c:	f1b8 0f00 	cmp.w	r8, #0
 8000940:	d14b      	bne.n	80009da <wm8994_InitExt+0x55e>
  if (input_device > 0) /* Audio input selected */
 8000942:	b1ad      	cbz	r5, 8000970 <wm8994_InitExt+0x4f4>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8000944:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8000948:	bf18      	it	ne
 800094a:	f5b5 7f80 	cmpne.w	r5, #256	; 0x100
 800094e:	f000 80e0 	beq.w	8000b12 <wm8994_InitExt+0x696>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000952:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000956:	f000 80f3 	beq.w	8000b40 <wm8994_InitExt+0x6c4>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 800095a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800095e:	bf18      	it	ne
 8000960:	f5b5 7f40 	cmpne.w	r5, #768	; 0x300
 8000964:	f000 810b 	beq.w	8000b7e <wm8994_InitExt+0x702>
    wm8994_SetVolume(DeviceAddr, Volume);
 8000968:	4651      	mov	r1, sl
 800096a:	4648      	mov	r0, r9
 800096c:	f7ff fcec 	bl	8000348 <wm8994_SetVolume>
}
 8000970:	4630      	mov	r0, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8000976:	2233      	movs	r2, #51	; 0x33
 8000978:	f44f 7104 	mov.w	r1, #528	; 0x210
 800097c:	4620      	mov	r0, r4
 800097e:	f7ff fc5b 	bl	8000238 <CODEC_IO_Write>
 8000982:	19c6      	adds	r6, r0, r7
    break;
 8000984:	e7b6      	b.n	80008f4 <wm8994_InitExt+0x478>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8000986:	2263      	movs	r2, #99	; 0x63
 8000988:	f44f 7104 	mov.w	r1, #528	; 0x210
 800098c:	4620      	mov	r0, r4
 800098e:	f7ff fc53 	bl	8000238 <CODEC_IO_Write>
 8000992:	19c6      	adds	r6, r0, r7
    break;
 8000994:	e7ae      	b.n	80008f4 <wm8994_InitExt+0x478>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000996:	2283      	movs	r2, #131	; 0x83
 8000998:	f44f 7104 	mov.w	r1, #528	; 0x210
 800099c:	4620      	mov	r0, r4
 800099e:	f7ff fc4b 	bl	8000238 <CODEC_IO_Write>
 80009a2:	19c6      	adds	r6, r0, r7
    break;
 80009a4:	e7a6      	b.n	80008f4 <wm8994_InitExt+0x478>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80009a6:	2283      	movs	r2, #131	; 0x83
 80009a8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80009ac:	4620      	mov	r0, r4
 80009ae:	f7ff fc43 	bl	8000238 <CODEC_IO_Write>
 80009b2:	19c6      	adds	r6, r0, r7
    break; 
 80009b4:	e79e      	b.n	80008f4 <wm8994_InitExt+0x478>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80009b6:	f244 0218 	movw	r2, #16408	; 0x4018
 80009ba:	f44f 7140 	mov.w	r1, #768	; 0x300
 80009be:	4620      	mov	r0, r4
 80009c0:	f7ff fc3a 	bl	8000238 <CODEC_IO_Write>
 80009c4:	4406      	add	r6, r0
 80009c6:	e7a4      	b.n	8000912 <wm8994_InitExt+0x496>
	  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80009c8:	f244 0210 	movw	r2, #16400	; 0x4010
 80009cc:	f44f 7140 	mov.w	r1, #768	; 0x300
 80009d0:	4620      	mov	r0, r4
 80009d2:	f7ff fc31 	bl	8000238 <CODEC_IO_Write>
 80009d6:	4406      	add	r6, r0
 80009d8:	e79b      	b.n	8000912 <wm8994_InitExt+0x496>
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80009da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009de:	2103      	movs	r1, #3
 80009e0:	4620      	mov	r0, r4
 80009e2:	f7ff fc29 	bl	8000238 <CODEC_IO_Write>
 80009e6:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2122      	movs	r1, #34	; 0x22
 80009ec:	4620      	mov	r0, r4
 80009ee:	f7ff fc23 	bl	8000238 <CODEC_IO_Write>
 80009f2:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2123      	movs	r1, #35	; 0x23
 80009f8:	4620      	mov	r0, r4
 80009fa:	f7ff fc1d 	bl	8000238 <CODEC_IO_Write>
 80009fe:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8000a00:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a04:	2136      	movs	r1, #54	; 0x36
 8000a06:	4620      	mov	r0, r4
 8000a08:	f7ff fc16 	bl	8000238 <CODEC_IO_Write>
 8000a0c:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8000a0e:	f243 0203 	movw	r2, #12291	; 0x3003
 8000a12:	2101      	movs	r1, #1
 8000a14:	4620      	mov	r0, r4
 8000a16:	f7ff fc0f 	bl	8000238 <CODEC_IO_Write>
 8000a1a:	4406      	add	r6, r0
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000a1c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000a20:	d06f      	beq.n	8000b02 <wm8994_InitExt+0x686>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8000a22:	2205      	movs	r2, #5
 8000a24:	2151      	movs	r1, #81	; 0x51
 8000a26:	4620      	mov	r0, r4
 8000a28:	f7ff fc06 	bl	8000238 <CODEC_IO_Write>
 8000a2c:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000a2e:	f243 3203 	movw	r2, #13059	; 0x3303
 8000a32:	2101      	movs	r1, #1
 8000a34:	4620      	mov	r0, r4
 8000a36:	f7ff fbff 	bl	8000238 <CODEC_IO_Write>
 8000a3a:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8000a3c:	2222      	movs	r2, #34	; 0x22
 8000a3e:	2160      	movs	r1, #96	; 0x60
 8000a40:	4620      	mov	r0, r4
 8000a42:	f7ff fbf9 	bl	8000238 <CODEC_IO_Write>
 8000a46:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8000a48:	f649 7225 	movw	r2, #40741	; 0x9f25
 8000a4c:	214c      	movs	r1, #76	; 0x4c
 8000a4e:	4620      	mov	r0, r4
 8000a50:	f7ff fbf2 	bl	8000238 <CODEC_IO_Write>
 8000a54:	4406      	add	r6, r0
    AUDIO_IO_Delay(15);
 8000a56:	200f      	movs	r0, #15
 8000a58:	f000 faf2 	bl	8001040 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	212d      	movs	r1, #45	; 0x2d
 8000a60:	4620      	mov	r0, r4
 8000a62:	f7ff fbe9 	bl	8000238 <CODEC_IO_Write>
 8000a66:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	212e      	movs	r1, #46	; 0x2e
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	f7ff fbe3 	bl	8000238 <CODEC_IO_Write>
 8000a72:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8000a74:	f44f 724c 	mov.w	r2, #816	; 0x330
 8000a78:	2103      	movs	r1, #3
 8000a7a:	4620      	mov	r0, r4
 8000a7c:	f7ff fbdc 	bl	8000238 <CODEC_IO_Write>
 8000a80:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8000a82:	2233      	movs	r2, #51	; 0x33
 8000a84:	2154      	movs	r1, #84	; 0x54
 8000a86:	4620      	mov	r0, r4
 8000a88:	f7ff fbd6 	bl	8000238 <CODEC_IO_Write>
 8000a8c:	4406      	add	r6, r0
    AUDIO_IO_Delay(250);
 8000a8e:	20fa      	movs	r0, #250	; 0xfa
 8000a90:	f000 fad6 	bl	8001040 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8000a94:	22ee      	movs	r2, #238	; 0xee
 8000a96:	2160      	movs	r1, #96	; 0x60
 8000a98:	4620      	mov	r0, r4
 8000a9a:	f7ff fbcd 	bl	8000238 <CODEC_IO_Write>
 8000a9e:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8000aa0:	22c0      	movs	r2, #192	; 0xc0
 8000aa2:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	f7ff fbc6 	bl	8000238 <CODEC_IO_Write>
 8000aac:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8000aae:	22c0      	movs	r2, #192	; 0xc0
 8000ab0:	f240 6111 	movw	r1, #1553	; 0x611
 8000ab4:	4620      	mov	r0, r4
 8000ab6:	f7ff fbbf 	bl	8000238 <CODEC_IO_Write>
 8000aba:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	f7ff fbb8 	bl	8000238 <CODEC_IO_Write>
 8000ac8:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8000aca:	22c0      	movs	r2, #192	; 0xc0
 8000acc:	f240 6112 	movw	r1, #1554	; 0x612
 8000ad0:	4620      	mov	r0, r4
 8000ad2:	f7ff fbb1 	bl	8000238 <CODEC_IO_Write>
 8000ad6:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8000ad8:	22c0      	movs	r2, #192	; 0xc0
 8000ada:	f240 6113 	movw	r1, #1555	; 0x613
 8000ade:	4620      	mov	r0, r4
 8000ae0:	f7ff fbaa 	bl	8000238 <CODEC_IO_Write>
 8000ae4:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f240 4122 	movw	r1, #1058	; 0x422
 8000aec:	4620      	mov	r0, r4
 8000aee:	f7ff fba3 	bl	8000238 <CODEC_IO_Write>
 8000af2:	4406      	add	r6, r0
    wm8994_SetVolume(DeviceAddr, Volume);
 8000af4:	4651      	mov	r1, sl
 8000af6:	4648      	mov	r0, r9
 8000af8:	f7ff fc26 	bl	8000348 <wm8994_SetVolume>
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8000afc:	f243 3803 	movw	r8, #13059	; 0x3303
 8000b00:	e71f      	b.n	8000942 <wm8994_InitExt+0x4c6>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8000b02:	f240 2205 	movw	r2, #517	; 0x205
 8000b06:	2151      	movs	r1, #81	; 0x51
 8000b08:	4620      	mov	r0, r4
 8000b0a:	f7ff fb95 	bl	8000238 <CODEC_IO_Write>
 8000b0e:	4406      	add	r6, r0
 8000b10:	e78d      	b.n	8000a2e <wm8994_InitExt+0x5b2>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000b12:	f048 0213 	orr.w	r2, r8, #19
 8000b16:	2101      	movs	r1, #1
 8000b18:	4620      	mov	r0, r4
 8000b1a:	f7ff fb8d 	bl	8000238 <CODEC_IO_Write>
 8000b1e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8000b20:	2202      	movs	r2, #2
 8000b22:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000b26:	4620      	mov	r0, r4
 8000b28:	f7ff fb86 	bl	8000238 <CODEC_IO_Write>
 8000b2c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8000b2e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b32:	f240 4111 	movw	r1, #1041	; 0x411
 8000b36:	4620      	mov	r0, r4
 8000b38:	f7ff fb7e 	bl	8000238 <CODEC_IO_Write>
 8000b3c:	4406      	add	r6, r0
 8000b3e:	e713      	b.n	8000968 <wm8994_InitExt+0x4ec>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000b40:	f048 0213 	orr.w	r2, r8, #19
 8000b44:	2101      	movs	r1, #1
 8000b46:	4620      	mov	r0, r4
 8000b48:	f7ff fb76 	bl	8000238 <CODEC_IO_Write>
 8000b4c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8000b4e:	2202      	movs	r2, #2
 8000b50:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000b54:	4620      	mov	r0, r4
 8000b56:	f7ff fb6f 	bl	8000238 <CODEC_IO_Write>
 8000b5a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8000b5c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000b60:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000b64:	4620      	mov	r0, r4
 8000b66:	f7ff fb67 	bl	8000238 <CODEC_IO_Write>
 8000b6a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8000b6c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000b70:	f240 4111 	movw	r1, #1041	; 0x411
 8000b74:	4620      	mov	r0, r4
 8000b76:	f7ff fb5f 	bl	8000238 <CODEC_IO_Write>
 8000b7a:	4406      	add	r6, r0
 8000b7c:	e6f4      	b.n	8000968 <wm8994_InitExt+0x4ec>
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8000b7e:	220b      	movs	r2, #11
 8000b80:	2118      	movs	r1, #24
 8000b82:	4620      	mov	r0, r4
 8000b84:	f7ff fb58 	bl	8000238 <CODEC_IO_Write>
 8000b88:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8000b8a:	220b      	movs	r2, #11
 8000b8c:	211a      	movs	r1, #26
 8000b8e:	4620      	mov	r0, r4
 8000b90:	f7ff fb52 	bl	8000238 <CODEC_IO_Write>
 8000b94:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8000b96:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000b9a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000b9e:	4620      	mov	r0, r4
 8000ba0:	f7ff fb4a 	bl	8000238 <CODEC_IO_Write>
 8000ba4:	4406      	add	r6, r0
 8000ba6:	e6df      	b.n	8000968 <wm8994_InitExt+0x4ec>
 8000ba8:	00017700 	.word	0x00017700

08000bac <wm8994_SetOutputMode>:
{
 8000bac:	b538      	push	{r3, r4, r5, lr}
  switch (Output) 
 8000bae:	2902      	cmp	r1, #2
 8000bb0:	d04d      	beq.n	8000c4e <wm8994_SetOutputMode+0xa2>
 8000bb2:	2903      	cmp	r1, #3
 8000bb4:	d070      	beq.n	8000c98 <wm8994_SetOutputMode+0xec>
 8000bb6:	2901      	cmp	r1, #1
 8000bb8:	d024      	beq.n	8000c04 <wm8994_SetOutputMode+0x58>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000bba:	b2c4      	uxtb	r4, r0
 8000bbc:	f240 3203 	movw	r2, #771	; 0x303
 8000bc0:	2105      	movs	r1, #5
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	f7ff fb38 	bl	8000238 <CODEC_IO_Write>
 8000bc8:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f240 6101 	movw	r1, #1537	; 0x601
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	f7ff fb31 	bl	8000238 <CODEC_IO_Write>
 8000bd6:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f240 6102 	movw	r1, #1538	; 0x602
 8000bde:	4620      	mov	r0, r4
 8000be0:	f7ff fb2a 	bl	8000238 <CODEC_IO_Write>
 8000be4:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f240 6104 	movw	r1, #1540	; 0x604
 8000bec:	4620      	mov	r0, r4
 8000bee:	f7ff fb23 	bl	8000238 <CODEC_IO_Write>
 8000bf2:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f240 6105 	movw	r1, #1541	; 0x605
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	f7ff fb1c 	bl	8000238 <CODEC_IO_Write>
 8000c00:	4428      	add	r0, r5
  return counter;
 8000c02:	e023      	b.n	8000c4c <wm8994_SetOutputMode+0xa0>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8000c04:	b2c4      	uxtb	r4, r0
 8000c06:	f640 420c 	movw	r2, #3084	; 0xc0c
 8000c0a:	2105      	movs	r1, #5
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f7ff fb13 	bl	8000238 <CODEC_IO_Write>
 8000c12:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f240 6101 	movw	r1, #1537	; 0x601
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f7ff fb0c 	bl	8000238 <CODEC_IO_Write>
 8000c20:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f240 6102 	movw	r1, #1538	; 0x602
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f7ff fb05 	bl	8000238 <CODEC_IO_Write>
 8000c2e:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000c30:	2202      	movs	r2, #2
 8000c32:	f240 6104 	movw	r1, #1540	; 0x604
 8000c36:	4620      	mov	r0, r4
 8000c38:	f7ff fafe 	bl	8000238 <CODEC_IO_Write>
 8000c3c:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000c3e:	2202      	movs	r2, #2
 8000c40:	f240 6105 	movw	r1, #1541	; 0x605
 8000c44:	4620      	mov	r0, r4
 8000c46:	f7ff faf7 	bl	8000238 <CODEC_IO_Write>
 8000c4a:	4428      	add	r0, r5
}
 8000c4c:	bd38      	pop	{r3, r4, r5, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000c4e:	b2c4      	uxtb	r4, r0
 8000c50:	f240 3203 	movw	r2, #771	; 0x303
 8000c54:	2105      	movs	r1, #5
 8000c56:	4620      	mov	r0, r4
 8000c58:	f7ff faee 	bl	8000238 <CODEC_IO_Write>
 8000c5c:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f240 6101 	movw	r1, #1537	; 0x601
 8000c64:	4620      	mov	r0, r4
 8000c66:	f7ff fae7 	bl	8000238 <CODEC_IO_Write>
 8000c6a:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f240 6102 	movw	r1, #1538	; 0x602
 8000c72:	4620      	mov	r0, r4
 8000c74:	f7ff fae0 	bl	8000238 <CODEC_IO_Write>
 8000c78:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f240 6104 	movw	r1, #1540	; 0x604
 8000c80:	4620      	mov	r0, r4
 8000c82:	f7ff fad9 	bl	8000238 <CODEC_IO_Write>
 8000c86:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f240 6105 	movw	r1, #1541	; 0x605
 8000c8e:	4620      	mov	r0, r4
 8000c90:	f7ff fad2 	bl	8000238 <CODEC_IO_Write>
 8000c94:	4428      	add	r0, r5
    break;
 8000c96:	e7d9      	b.n	8000c4c <wm8994_SetOutputMode+0xa0>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8000c98:	b2c4      	uxtb	r4, r0
 8000c9a:	f640 720f 	movw	r2, #3855	; 0xf0f
 8000c9e:	2105      	movs	r1, #5
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	f7ff fac9 	bl	8000238 <CODEC_IO_Write>
 8000ca6:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f240 6101 	movw	r1, #1537	; 0x601
 8000cae:	4620      	mov	r0, r4
 8000cb0:	f7ff fac2 	bl	8000238 <CODEC_IO_Write>
 8000cb4:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f240 6102 	movw	r1, #1538	; 0x602
 8000cbc:	4620      	mov	r0, r4
 8000cbe:	f7ff fabb 	bl	8000238 <CODEC_IO_Write>
 8000cc2:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	f240 6104 	movw	r1, #1540	; 0x604
 8000cca:	4620      	mov	r0, r4
 8000ccc:	f7ff fab4 	bl	8000238 <CODEC_IO_Write>
 8000cd0:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	f240 6105 	movw	r1, #1541	; 0x605
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f7ff faad 	bl	8000238 <CODEC_IO_Write>
 8000cde:	4428      	add	r0, r5
    break;
 8000ce0:	e7b4      	b.n	8000c4c <wm8994_SetOutputMode+0xa0>
	...

08000ce4 <wm8994_SetFrequency>:
{
 8000ce4:	b508      	push	{r3, lr}
  switch (AudioFreq)
 8000ce6:	f245 6322 	movw	r3, #22050	; 0x5622
 8000cea:	4299      	cmp	r1, r3
 8000cec:	d03f      	beq.n	8000d6e <wm8994_SetFrequency+0x8a>
 8000cee:	d817      	bhi.n	8000d20 <wm8994_SetFrequency+0x3c>
 8000cf0:	f642 3311 	movw	r3, #11025	; 0x2b11
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	d033      	beq.n	8000d60 <wm8994_SetFrequency+0x7c>
 8000cf8:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 8000cfc:	d106      	bne.n	8000d0c <wm8994_SetFrequency+0x28>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8000cfe:	2233      	movs	r2, #51	; 0x33
 8000d00:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d04:	b2c0      	uxtb	r0, r0
 8000d06:	f7ff fa97 	bl	8000238 <CODEC_IO_Write>
    break;
 8000d0a:	e008      	b.n	8000d1e <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 8000d0c:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 8000d10:	d134      	bne.n	8000d7c <wm8994_SetFrequency+0x98>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8000d12:	2203      	movs	r2, #3
 8000d14:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d18:	b2c0      	uxtb	r0, r0
 8000d1a:	f7ff fa8d 	bl	8000238 <CODEC_IO_Write>
}
 8000d1e:	bd08      	pop	{r3, pc}
  switch (AudioFreq)
 8000d20:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8000d24:	4299      	cmp	r1, r3
 8000d26:	d014      	beq.n	8000d52 <wm8994_SetFrequency+0x6e>
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <wm8994_SetFrequency+0xa8>)
 8000d2a:	4299      	cmp	r1, r3
 8000d2c:	d106      	bne.n	8000d3c <wm8994_SetFrequency+0x58>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8000d2e:	22a3      	movs	r2, #163	; 0xa3
 8000d30:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d34:	b2c0      	uxtb	r0, r0
 8000d36:	f7ff fa7f 	bl	8000238 <CODEC_IO_Write>
    break;
 8000d3a:	e7f0      	b.n	8000d1e <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 8000d3c:	f64a 4344 	movw	r3, #44100	; 0xac44
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d11b      	bne.n	8000d7c <wm8994_SetFrequency+0x98>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8000d44:	2273      	movs	r2, #115	; 0x73
 8000d46:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d4a:	b2c0      	uxtb	r0, r0
 8000d4c:	f7ff fa74 	bl	8000238 <CODEC_IO_Write>
    break; 
 8000d50:	e7e5      	b.n	8000d1e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000d52:	2283      	movs	r2, #131	; 0x83
 8000d54:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d58:	b2c0      	uxtb	r0, r0
 8000d5a:	f7ff fa6d 	bl	8000238 <CODEC_IO_Write>
    break;
 8000d5e:	e7de      	b.n	8000d1e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8000d60:	2213      	movs	r2, #19
 8000d62:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d66:	b2c0      	uxtb	r0, r0
 8000d68:	f7ff fa66 	bl	8000238 <CODEC_IO_Write>
    break;
 8000d6c:	e7d7      	b.n	8000d1e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8000d6e:	2243      	movs	r2, #67	; 0x43
 8000d70:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d74:	b2c0      	uxtb	r0, r0
 8000d76:	f7ff fa5f 	bl	8000238 <CODEC_IO_Write>
    break;
 8000d7a:	e7d0      	b.n	8000d1e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000d7c:	2283      	movs	r2, #131	; 0x83
 8000d7e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d82:	b2c0      	uxtb	r0, r0
 8000d84:	f7ff fa58 	bl	8000238 <CODEC_IO_Write>
  return counter;
 8000d88:	e7c9      	b.n	8000d1e <wm8994_SetFrequency+0x3a>
 8000d8a:	bf00      	nop
 8000d8c:	00017700 	.word	0x00017700

08000d90 <wm8994_Reset>:
{
 8000d90:	b508      	push	{r3, lr}
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8000d92:	2200      	movs	r2, #0
 8000d94:	4611      	mov	r1, r2
 8000d96:	b2c0      	uxtb	r0, r0
 8000d98:	f7ff fa4e 	bl	8000238 <CODEC_IO_Write>
  outputEnabled = 0;
 8000d9c:	4b02      	ldr	r3, [pc, #8]	; (8000da8 <wm8994_Reset+0x18>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8000da2:	605a      	str	r2, [r3, #4]
}
 8000da4:	bd08      	pop	{r3, pc}
 8000da6:	bf00      	nop
 8000da8:	2000028c 	.word	0x2000028c

08000dac <wm8994_DeInit>:
{
 8000dac:	b508      	push	{r3, lr}
  AUDIO_IO_DeInit();
 8000dae:	f000 f911 	bl	8000fd4 <AUDIO_IO_DeInit>
}
 8000db2:	bd08      	pop	{r3, pc}

08000db4 <wm8994_ReadID>:
{
 8000db4:	b510      	push	{r4, lr}
 8000db6:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 8000db8:	f000 f904 	bl	8000fc4 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	b2e0      	uxtb	r0, r4
 8000dc0:	f000 f922 	bl	8001008 <AUDIO_IO_Read>
}
 8000dc4:	bd10      	pop	{r4, pc}
	...

08000dc8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000dc8:	b570      	push	{r4, r5, r6, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000dcc:	4b49      	ldr	r3, [pc, #292]	; (8000ef4 <I2Cx_MspInit+0x12c>)
 8000dce:	4283      	cmp	r3, r0
 8000dd0:	d043      	beq.n	8000e5a <I2Cx_MspInit+0x92>
  }
  else
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000dd2:	4c49      	ldr	r4, [pc, #292]	; (8000ef8 <I2Cx_MspInit+0x130>)
 8000dd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	6323      	str	r3, [r4, #48]	; 0x30
 8000ddc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	9303      	str	r3, [sp, #12]
 8000de4:	9b03      	ldr	r3, [sp, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000de6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dea:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000dec:	2312      	movs	r3, #18
 8000dee:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000df0:	2500      	movs	r5, #0
 8000df2:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000df4:	2302      	movs	r3, #2
 8000df6:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000dfc:	4e3f      	ldr	r6, [pc, #252]	; (8000efc <I2Cx_MspInit+0x134>)
 8000dfe:	a905      	add	r1, sp, #20
 8000e00:	4630      	mov	r0, r6
 8000e02:	f005 f853 	bl	8005eac <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e0a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e0c:	a905      	add	r1, sp, #20
 8000e0e:	4630      	mov	r0, r6
 8000e10:	f005 f84c 	bl	8005eac <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000e14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e1a:	6423      	str	r3, [r4, #64]	; 0x40
 8000e1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e22:	9304      	str	r3, [sp, #16]
 8000e24:	9b04      	ldr	r3, [sp, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000e26:	6a23      	ldr	r3, [r4, #32]
 8000e28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e2c:	6223      	str	r3, [r4, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000e2e:	6a23      	ldr	r3, [r4, #32]
 8000e30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e34:	6223      	str	r3, [r4, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000e36:	462a      	mov	r2, r5
 8000e38:	210f      	movs	r1, #15
 8000e3a:	201f      	movs	r0, #31
 8000e3c:	f004 f8d6 	bl	8004fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000e40:	201f      	movs	r0, #31
 8000e42:	f004 f905 	bl	8005050 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000e46:	462a      	mov	r2, r5
 8000e48:	210f      	movs	r1, #15
 8000e4a:	2020      	movs	r0, #32
 8000e4c:	f004 f8ce 	bl	8004fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000e50:	2020      	movs	r0, #32
 8000e52:	f004 f8fd 	bl	8005050 <HAL_NVIC_EnableIRQ>
  }
}
 8000e56:	b00a      	add	sp, #40	; 0x28
 8000e58:	bd70      	pop	{r4, r5, r6, pc}
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000e5a:	4c27      	ldr	r4, [pc, #156]	; (8000ef8 <I2Cx_MspInit+0x130>)
 8000e5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e5e:	f043 0308 	orr.w	r3, r3, #8
 8000e62:	6323      	str	r3, [r4, #48]	; 0x30
 8000e64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	9b00      	ldr	r3, [sp, #0]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000e6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6323      	str	r3, [r4, #48]	; 0x30
 8000e76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e86:	2312      	movs	r3, #18
 8000e88:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000e8a:	2500      	movs	r5, #0
 8000e8c:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000e92:	2304      	movs	r3, #4
 8000e94:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000e96:	a905      	add	r1, sp, #20
 8000e98:	4819      	ldr	r0, [pc, #100]	; (8000f00 <I2Cx_MspInit+0x138>)
 8000e9a:	f005 f807 	bl	8005eac <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000ea2:	230b      	movs	r3, #11
 8000ea4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000ea6:	a905      	add	r1, sp, #20
 8000ea8:	4814      	ldr	r0, [pc, #80]	; (8000efc <I2Cx_MspInit+0x134>)
 8000eaa:	f004 ffff 	bl	8005eac <HAL_GPIO_Init>
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000eae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000eb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eb4:	6423      	str	r3, [r4, #64]	; 0x40
 8000eb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ebc:	9302      	str	r3, [sp, #8]
 8000ebe:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000ec0:	6a23      	ldr	r3, [r4, #32]
 8000ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ec6:	6223      	str	r3, [r4, #32]
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000ec8:	6a23      	ldr	r3, [r4, #32]
 8000eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ece:	6223      	str	r3, [r4, #32]
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000ed0:	462a      	mov	r2, r5
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	205f      	movs	r0, #95	; 0x5f
 8000ed6:	f004 f889 	bl	8004fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000eda:	205f      	movs	r0, #95	; 0x5f
 8000edc:	f004 f8b8 	bl	8005050 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000ee0:	462a      	mov	r2, r5
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	2060      	movs	r0, #96	; 0x60
 8000ee6:	f004 f881 	bl	8004fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000eea:	2060      	movs	r0, #96	; 0x60
 8000eec:	f004 f8b0 	bl	8005050 <HAL_NVIC_EnableIRQ>
 8000ef0:	e7b1      	b.n	8000e56 <I2Cx_MspInit+0x8e>
 8000ef2:	bf00      	nop
 8000ef4:	20000294 	.word	0x20000294
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020400 	.word	0x40020400
 8000f00:	40020c00 	.word	0x40020c00

08000f04 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000f04:	b510      	push	{r4, lr}
 8000f06:	4604      	mov	r4, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000f08:	f005 fd1e 	bl	8006948 <HAL_I2C_GetState>
 8000f0c:	b9a0      	cbnz	r0, 8000f38 <I2Cx_Init+0x34>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <I2Cx_Init+0x3c>)
 8000f10:	429c      	cmp	r4, r3
 8000f12:	d012      	beq.n	8000f3a <I2Cx_Init+0x36>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <I2Cx_Init+0x40>)
 8000f16:	6023      	str	r3, [r4, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <I2Cx_Init+0x44>)
 8000f1a:	6063      	str	r3, [r4, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60a3      	str	r3, [r4, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000f20:	2201      	movs	r2, #1
 8000f22:	60e2      	str	r2, [r4, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000f24:	6123      	str	r3, [r4, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000f26:	6163      	str	r3, [r4, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000f28:	61e3      	str	r3, [r4, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000f2a:	6223      	str	r3, [r4, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f7ff ff4b 	bl	8000dc8 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000f32:	4620      	mov	r0, r4
 8000f34:	f005 fabe 	bl	80064b4 <HAL_I2C_Init>
  }
}
 8000f38:	bd10      	pop	{r4, pc}
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <I2Cx_Init+0x48>)
 8000f3c:	6023      	str	r3, [r4, #0]
 8000f3e:	e7eb      	b.n	8000f18 <I2Cx_Init+0x14>
 8000f40:	20000294 	.word	0x20000294
 8000f44:	40005400 	.word	0x40005400
 8000f48:	40912732 	.word	0x40912732
 8000f4c:	40006000 	.word	0x40006000

08000f50 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000f50:	b510      	push	{r4, lr}
 8000f52:	4604      	mov	r4, r0
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000f54:	f005 fb0d 	bl	8006572 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000f58:	4620      	mov	r0, r4
 8000f5a:	f7ff ffd3 	bl	8000f04 <I2Cx_Init>
}
 8000f5e:	bd10      	pop	{r4, pc}

08000f60 <I2Cx_WriteMultiple>:
{
 8000f60:	b570      	push	{r4, r5, r6, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	4605      	mov	r5, r0
 8000f66:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f6c:	9102      	str	r1, [sp, #8]
 8000f6e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8000f72:	9101      	str	r1, [sp, #4]
 8000f74:	9908      	ldr	r1, [sp, #32]
 8000f76:	9100      	str	r1, [sp, #0]
 8000f78:	4621      	mov	r1, r4
 8000f7a:	f005 fb13 	bl	80065a4 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8000f7e:	4606      	mov	r6, r0
 8000f80:	b910      	cbnz	r0, 8000f88 <I2Cx_WriteMultiple+0x28>
}
 8000f82:	4630      	mov	r0, r6
 8000f84:	b004      	add	sp, #16
 8000f86:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 8000f88:	4621      	mov	r1, r4
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	f7ff ffe0 	bl	8000f50 <I2Cx_Error>
 8000f90:	e7f7      	b.n	8000f82 <I2Cx_WriteMultiple+0x22>

08000f92 <I2Cx_ReadMultiple>:
{
 8000f92:	b570      	push	{r4, r5, r6, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	4605      	mov	r5, r0
 8000f98:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f9e:	9102      	str	r1, [sp, #8]
 8000fa0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8000fa4:	9101      	str	r1, [sp, #4]
 8000fa6:	9908      	ldr	r1, [sp, #32]
 8000fa8:	9100      	str	r1, [sp, #0]
 8000faa:	4621      	mov	r1, r4
 8000fac:	f005 fbe4 	bl	8006778 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8000fb0:	4606      	mov	r6, r0
 8000fb2:	b910      	cbnz	r0, 8000fba <I2Cx_ReadMultiple+0x28>
}
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	b004      	add	sp, #16
 8000fb8:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 8000fba:	4621      	mov	r1, r4
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	f7ff ffc7 	bl	8000f50 <I2Cx_Error>
 8000fc2:	e7f7      	b.n	8000fb4 <I2Cx_ReadMultiple+0x22>

08000fc4 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 8000fc4:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cAudioHandler);
 8000fc6:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <AUDIO_IO_Init+0xc>)
 8000fc8:	f7ff ff9c 	bl	8000f04 <I2Cx_Init>
}
 8000fcc:	bd08      	pop	{r3, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000294 	.word	0x20000294

08000fd4 <AUDIO_IO_DeInit>:
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{

}
 8000fd4:	4770      	bx	lr
	...

08000fd8 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8000fd8:	b500      	push	{lr}
 8000fda:	b085      	sub	sp, #20
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8000fdc:	0213      	lsls	r3, r2, #8
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	ea43 2212 	orr.w	r2, r3, r2, lsr #8
 8000fe4:	f8ad 200e 	strh.w	r2, [sp, #14]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8000fe8:	2302      	movs	r3, #2
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	f10d 020e 	add.w	r2, sp, #14
 8000ff0:	9200      	str	r2, [sp, #0]
 8000ff2:	460a      	mov	r2, r1
 8000ff4:	4601      	mov	r1, r0
 8000ff6:	4803      	ldr	r0, [pc, #12]	; (8001004 <AUDIO_IO_Write+0x2c>)
 8000ff8:	f7ff ffb2 	bl	8000f60 <I2Cx_WriteMultiple>
}
 8000ffc:	b005      	add	sp, #20
 8000ffe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001002:	bf00      	nop
 8001004:	20000294 	.word	0x20000294

08001008 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8001008:	b500      	push	{lr}
 800100a:	b085      	sub	sp, #20
 800100c:	460a      	mov	r2, r1
  uint16_t read_value = 0, tmp = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	f8ad 300e 	strh.w	r3, [sp, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001014:	2302      	movs	r3, #2
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	f10d 010e 	add.w	r1, sp, #14
 800101c:	9100      	str	r1, [sp, #0]
 800101e:	4601      	mov	r1, r0
 8001020:	4806      	ldr	r0, [pc, #24]	; (800103c <AUDIO_IO_Read+0x34>)
 8001022:	f7ff ffb6 	bl	8000f92 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8001026:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 800102a:	0218      	lsls	r0, r3, #8
 800102c:	b200      	sxth	r0, r0
 800102e:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
  
  read_value = tmp;
  
  return read_value;
}
 8001032:	b280      	uxth	r0, r0
 8001034:	b005      	add	sp, #20
 8001036:	f85d fb04 	ldr.w	pc, [sp], #4
 800103a:	bf00      	nop
 800103c:	20000294 	.word	0x20000294

08001040 <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8001040:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8001042:	f003 ffb3 	bl	8004fac <HAL_Delay>
}
 8001046:	bd08      	pop	{r3, pc}

08001048 <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 8001048:	b508      	push	{r3, lr}
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <SAIx_Out_DeInit+0x18>)
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <SAIx_Out_DeInit+0x1c>)
 800104e:	6003      	str	r3, [r0, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001056:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 8001058:	f008 f953 	bl	8009302 <HAL_SAI_DeInit>
}
 800105c:	bd08      	pop	{r3, pc}
 800105e:	bf00      	nop
 8001060:	20001c94 	.word	0x20001c94
 8001064:	40015804 	.word	0x40015804

08001068 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8001068:	b510      	push	{r4, lr}
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800106a:	4808      	ldr	r0, [pc, #32]	; (800108c <SAIx_In_DeInit+0x24>)
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <SAIx_In_DeInit+0x28>)
 800106e:	6003      	str	r3, [r0, #0]
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001070:	4c08      	ldr	r4, [pc, #32]	; (8001094 <SAIx_In_DeInit+0x2c>)
 8001072:	4a09      	ldr	r2, [pc, #36]	; (8001098 <SAIx_In_DeInit+0x30>)
 8001074:	6022      	str	r2, [r4, #0]
  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800107c:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 800107e:	f008 f940 	bl	8009302 <HAL_SAI_DeInit>
  HAL_SAI_DeInit(&haudio_out_sai);
 8001082:	4620      	mov	r0, r4
 8001084:	f008 f93d 	bl	8009302 <HAL_SAI_DeInit>
}
 8001088:	bd10      	pop	{r4, pc}
 800108a:	bf00      	nop
 800108c:	20001bb0 	.word	0x20001bb0
 8001090:	40015824 	.word	0x40015824
 8001094:	20001c94 	.word	0x20001c94
 8001098:	40015804 	.word	0x40015804

0800109c <SAIx_Out_Init_Ext>:
{
 800109c:	b510      	push	{r4, lr}
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <SAIx_Out_Init_Ext+0x8c>)
 80010a0:	4a22      	ldr	r2, [pc, #136]	; (800112c <SAIx_Out_Init_Ext+0x90>)
 80010a2:	601a      	str	r2, [r3, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80010a4:	6814      	ldr	r4, [r2, #0]
 80010a6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80010aa:	6014      	str	r4, [r2, #0]
  haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80010b0:	61d8      	str	r0, [r3, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 80010b2:	605a      	str	r2, [r3, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80010b4:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80010b6:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = (AudioResolution  == 16)?SAI_DATASIZE_16:SAI_DATASIZE_32;
 80010b8:	2910      	cmp	r1, #16
 80010ba:	d02e      	beq.n	800111a <SAIx_Out_Init_Ext+0x7e>
 80010bc:	22e0      	movs	r2, #224	; 0xe0
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <SAIx_Out_Init_Ext+0x8c>)
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80010c2:	2200      	movs	r2, #0
 80010c4:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80010c6:	2001      	movs	r0, #1
 80010c8:	63d8      	str	r0, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80010ca:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80010cc:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 80010d0:	611c      	str	r4, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80010d2:	6198      	str	r0, [r3, #24]
  haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 80010d4:	60da      	str	r2, [r3, #12]
  haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
  haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 80010d8:	62da      	str	r2, [r3, #44]	; 0x2c
  haudio_out_sai.Init.Mckdiv         = 0;
 80010da:	621a      	str	r2, [r3, #32]
if (  AudioResolution == 24) /* please add here other supported resolution */
 80010dc:	2918      	cmp	r1, #24
 80010de:	d01e      	beq.n	800111e <SAIx_Out_Init_Ext+0x82>
    haudio_out_sai.FrameInit.FrameLength = 64; 
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <SAIx_Out_Init_Ext+0x8c>)
 80010e2:	2240      	movs	r2, #64	; 0x40
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40
    haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80010e6:	2220      	movs	r2, #32
 80010e8:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80010ea:	4c0f      	ldr	r4, [pc, #60]	; (8001128 <SAIx_Out_Init_Ext+0x8c>)
 80010ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f0:	64a3      	str	r3, [r4, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	64e3      	str	r3, [r4, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80010f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010fa:	6522      	str	r2, [r4, #80]	; 0x50
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80010fc:	6563      	str	r3, [r4, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80010fe:	65a3      	str	r3, [r4, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4; 
 8001100:	2304      	movs	r3, #4
 8001102:	65e3      	str	r3, [r4, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_2;
 8001104:	2305      	movs	r3, #5
 8001106:	6623      	str	r3, [r4, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 8001108:	4620      	mov	r0, r4
 800110a:	f007 fff5 	bl	80090f8 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800110e:	6822      	ldr	r2, [r4, #0]
 8001110:	6813      	ldr	r3, [r2, #0]
 8001112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bd10      	pop	{r4, pc}
  haudio_out_sai.Init.DataSize = (AudioResolution  == 16)?SAI_DATASIZE_16:SAI_DATASIZE_32;
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	e7cf      	b.n	80010be <SAIx_Out_Init_Ext+0x22>
    haudio_out_sai.FrameInit.FrameLength = 128; 
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	641a      	str	r2, [r3, #64]	; 0x40
    haudio_out_sai.FrameInit.ActiveFrameLength = 64;
 8001122:	2240      	movs	r2, #64	; 0x40
 8001124:	645a      	str	r2, [r3, #68]	; 0x44
 8001126:	e7e0      	b.n	80010ea <SAIx_Out_Init_Ext+0x4e>
 8001128:	20001c94 	.word	0x20001c94
 800112c:	40015804 	.word	0x40015804

08001130 <SAIx_In_Init>:
{
 8001130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001134:	b083      	sub	sp, #12
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001136:	4c38      	ldr	r4, [pc, #224]	; (8001218 <SAIx_In_Init+0xe8>)
 8001138:	4b38      	ldr	r3, [pc, #224]	; (800121c <SAIx_In_Init+0xec>)
 800113a:	6023      	str	r3, [r4, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001142:	601a      	str	r2, [r3, #0]
  haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8001144:	2600      	movs	r6, #0
 8001146:	6266      	str	r6, [r4, #36]	; 0x24
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001148:	9001      	str	r0, [sp, #4]
 800114a:	61e0      	str	r0, [r4, #28]
  haudio_out_sai.Init.AudioMode      = SAI_MODEMASTER_RX;
 800114c:	2701      	movs	r7, #1
 800114e:	6067      	str	r7, [r4, #4]
  haudio_out_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8001150:	6166      	str	r6, [r4, #20]
  haudio_out_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 8001152:	6326      	str	r6, [r4, #48]	; 0x30
  haudio_out_sai.Init.DataSize       = SAI_DATASIZE_16;
 8001154:	f04f 0b80 	mov.w	fp, #128	; 0x80
 8001158:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
  haudio_out_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 800115c:	63a6      	str	r6, [r4, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 800115e:	63e6      	str	r6, [r4, #60]	; 0x3c
  haudio_out_sai.Init.Synchro        = SAI_ASYNCHRONOUS;
 8001160:	60a6      	str	r6, [r4, #8]
  haudio_out_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 8001162:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001166:	6123      	str	r3, [r4, #16]
  haudio_out_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8001168:	61a7      	str	r7, [r4, #24]
  haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 800116a:	60e6      	str	r6, [r4, #12]
  haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 800116c:	62a6      	str	r6, [r4, #40]	; 0x28
  haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 800116e:	62e6      	str	r6, [r4, #44]	; 0x2c
  haudio_out_sai.Init.Mckdiv         = 0;  
 8001170:	6226      	str	r6, [r4, #32]
  haudio_out_sai.FrameInit.FrameLength       = 64;
 8001172:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8001176:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800117a:	f04f 0920 	mov.w	r9, #32
 800117e:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8001182:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8001186:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800118a:	64e6      	str	r6, [r4, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 800118c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001190:	6522      	str	r2, [r4, #80]	; 0x50
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8001192:	6566      	str	r6, [r4, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 8001194:	65a6      	str	r6, [r4, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber     = 4;
 8001196:	2204      	movs	r2, #4
 8001198:	65e2      	str	r2, [r4, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_02;
 800119a:	2205      	movs	r2, #5
 800119c:	6622      	str	r2, [r4, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 800119e:	4620      	mov	r0, r4
 80011a0:	f007 ffaa 	bl	80090f8 <HAL_SAI_Init>
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80011a4:	4d1e      	ldr	r5, [pc, #120]	; (8001220 <SAIx_In_Init+0xf0>)
 80011a6:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <SAIx_In_Init+0xf4>)
 80011a8:	602b      	str	r3, [r5, #0]
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011b0:	601a      	str	r2, [r3, #0]
  haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 80011b2:	626e      	str	r6, [r5, #36]	; 0x24
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80011b4:	9b01      	ldr	r3, [sp, #4]
 80011b6:	61eb      	str	r3, [r5, #28]
  haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 80011b8:	2303      	movs	r3, #3
 80011ba:	606b      	str	r3, [r5, #4]
  haudio_in_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 80011bc:	616e      	str	r6, [r5, #20]
  haudio_in_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 80011be:	632e      	str	r6, [r5, #48]	; 0x30
  haudio_in_sai.Init.DataSize       = SAI_DATASIZE_16;
 80011c0:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
  haudio_in_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 80011c4:	63ae      	str	r6, [r5, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_RISINGEDGE;
 80011c6:	63ef      	str	r7, [r5, #60]	; 0x3c
  haudio_in_sai.Init.Synchro        = SAI_SYNCHRONOUS;
 80011c8:	60af      	str	r7, [r5, #8]
  haudio_in_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_DISABLE;
 80011ca:	612e      	str	r6, [r5, #16]
  haudio_in_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 80011cc:	61af      	str	r7, [r5, #24]
  haudio_in_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 80011ce:	60ee      	str	r6, [r5, #12]
  haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 80011d0:	62ae      	str	r6, [r5, #40]	; 0x28
  haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 80011d2:	2310      	movs	r3, #16
 80011d4:	62eb      	str	r3, [r5, #44]	; 0x2c
  haudio_in_sai.Init.Mckdiv         = 0;
 80011d6:	622e      	str	r6, [r5, #32]
  haudio_in_sai.FrameInit.FrameLength       = 64;
 80011d8:	f8c5 a040 	str.w	sl, [r5, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 80011dc:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80011e0:	f8c5 8048 	str.w	r8, [r5, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80011e4:	64ee      	str	r6, [r5, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80011e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011ea:	652b      	str	r3, [r5, #80]	; 0x50
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 80011ec:	656e      	str	r6, [r5, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 80011ee:	65ae      	str	r6, [r5, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber     = 4;
 80011f0:	2304      	movs	r3, #4
 80011f2:	65eb      	str	r3, [r5, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_02;
 80011f4:	2305      	movs	r3, #5
 80011f6:	662b      	str	r3, [r5, #96]	; 0x60
  HAL_SAI_Init(&haudio_in_sai);
 80011f8:	4628      	mov	r0, r5
 80011fa:	f007 ff7d 	bl	80090f8 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_in_sai);
 80011fe:	682a      	ldr	r2, [r5, #0]
 8001200:	6813      	ldr	r3, [r2, #0]
 8001202:	ea43 0308 	orr.w	r3, r3, r8
 8001206:	6013      	str	r3, [r2, #0]
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001208:	6822      	ldr	r2, [r4, #0]
 800120a:	6813      	ldr	r3, [r2, #0]
 800120c:	ea43 0308 	orr.w	r3, r3, r8
 8001210:	6013      	str	r3, [r2, #0]
}
 8001212:	b003      	add	sp, #12
 8001214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001218:	20001c94 	.word	0x20001c94
 800121c:	40015804 	.word	0x40015804
 8001220:	20001bb0 	.word	0x20001bb0
 8001224:	40015824 	.word	0x40015824

08001228 <DFSDMx_ChannelMspInit>:
/**
  * @brief  Initialize the DFSDM channel MSP.
  * @retval None
  */
static void DFSDMx_ChannelMspInit(void)
{
 8001228:	b530      	push	{r4, r5, lr}
 800122a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;  
  
  /* Enable DFSDM clock */
  AUDIO_DFSDMx_CLK_ENABLE();
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <DFSDMx_ChannelMspInit+0x80>)
 800122e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001230:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001234:	645a      	str	r2, [r3, #68]	; 0x44
 8001236:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001238:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800123c:	9200      	str	r2, [sp, #0]
 800123e:	9a00      	ldr	r2, [sp, #0]
  
  /* Enable GPIO clock */
  AUDIO_DFSDMx_DMIC_DATIN_GPIO_CLK_ENABLE();
 8001240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001242:	f042 0204 	orr.w	r2, r2, #4
 8001246:	631a      	str	r2, [r3, #48]	; 0x30
 8001248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800124a:	f002 0204 	and.w	r2, r2, #4
 800124e:	9201      	str	r2, [sp, #4]
 8001250:	9a01      	ldr	r2, [sp, #4]
  AUDIO_DFSDMx_CKOUT_DMIC_GPIO_CLK_ENABLE();
 8001252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001254:	f042 0208 	orr.w	r2, r2, #8
 8001258:	631a      	str	r2, [r3, #48]	; 0x30
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	f003 0308 	and.w	r3, r3, #8
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	9b02      	ldr	r3, [sp, #8]
  
  /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN1 pins ------------------*/
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_CKOUT_PIN;
 8001264:	2508      	movs	r5, #8
 8001266:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2403      	movs	r4, #3
 8001272:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_CKOUT_AF;
 8001274:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(AUDIO_DFSDMx_CKOUT_DMIC_GPIO_PORT, &GPIO_InitStruct);
 8001276:	a903      	add	r1, sp, #12
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <DFSDMx_ChannelMspInit+0x84>)
 800127a:	f004 fe17 	bl	8005eac <HAL_GPIO_Init>
  
  /* DFSDM pin configuration: DMIC_DATIN1 pin --------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DMIC_DATIN1_PIN;
 800127e:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DMIC_DATIN_AF;
 8001280:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);
 8001282:	a903      	add	r1, sp, #12
 8001284:	480a      	ldr	r0, [pc, #40]	; (80012b0 <DFSDMx_ChannelMspInit+0x88>)
 8001286:	f004 fe11 	bl	8005eac <HAL_GPIO_Init>
  
  if(AudioIn_ChannelNumber > 2)
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <DFSDMx_ChannelMspInit+0x8c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d801      	bhi.n	8001296 <DFSDMx_ChannelMspInit+0x6e>
  /* DFSDM pin configuration: DMIC_DATIN5 pin --------------------------------*/  
    GPIO_InitStruct.Pin = AUDIO_DFSDMx_DMIC_DATIN5_PIN;
    GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DMIC_DATIN_AF;
    HAL_GPIO_Init(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);    
  }
}
 8001292:	b009      	add	sp, #36	; 0x24
 8001294:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = AUDIO_DFSDMx_DMIC_DATIN5_PIN;
 8001296:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800129a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DMIC_DATIN_AF;
 800129c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);    
 800129e:	a903      	add	r1, sp, #12
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <DFSDMx_ChannelMspInit+0x88>)
 80012a2:	f004 fe03 	bl	8005eac <HAL_GPIO_Init>
}
 80012a6:	e7f4      	b.n	8001292 <DFSDMx_ChannelMspInit+0x6a>
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020c00 	.word	0x40020c00
 80012b0:	40020800 	.word	0x40020800
 80012b4:	20000030 	.word	0x20000030

080012b8 <DFSDMx_FilterMspDeInit>:
/**
  * @brief  DeInitialize the DFSDM filter MSP.
  * @retval None
  */
static void DFSDMx_FilterMspDeInit(void)
{
 80012b8:	b508      	push	{r3, lr}
  /* Configure the DMA Channel */
  HAL_DMA_DeInit(&hDmaTopLeft);
 80012ba:	4809      	ldr	r0, [pc, #36]	; (80012e0 <DFSDMx_FilterMspDeInit+0x28>)
 80012bc:	f004 fa94 	bl	80057e8 <HAL_DMA_DeInit>
  HAL_DMA_DeInit(&hDmaTopRight);
 80012c0:	4808      	ldr	r0, [pc, #32]	; (80012e4 <DFSDMx_FilterMspDeInit+0x2c>)
 80012c2:	f004 fa91 	bl	80057e8 <HAL_DMA_DeInit>
  if(AudioIn_ChannelNumber > 2)
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <DFSDMx_FilterMspDeInit+0x30>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d800      	bhi.n	80012d0 <DFSDMx_FilterMspDeInit+0x18>
  {
    HAL_DMA_DeInit(&hDmaButtomLeft);
    HAL_DMA_DeInit(&hDmaButtomRight);
  }  
}
 80012ce:	bd08      	pop	{r3, pc}
    HAL_DMA_DeInit(&hDmaButtomLeft);
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <DFSDMx_FilterMspDeInit+0x34>)
 80012d2:	f004 fa89 	bl	80057e8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(&hDmaButtomRight);
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <DFSDMx_FilterMspDeInit+0x38>)
 80012d8:	f004 fa86 	bl	80057e8 <HAL_DMA_DeInit>
}
 80012dc:	e7f7      	b.n	80012ce <DFSDMx_FilterMspDeInit+0x16>
 80012de:	bf00      	nop
 80012e0:	20001dd0 	.word	0x20001dd0
 80012e4:	20001d6c 	.word	0x20001d6c
 80012e8:	20000030 	.word	0x20000030
 80012ec:	20001c34 	.word	0x20001c34
 80012f0:	20001fb8 	.word	0x20001fb8

080012f4 <DFSDMx_FilterMspInit>:
{  
 80012f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012f8:	b082      	sub	sp, #8
  AUDIO_DFSDMx_CLK_ENABLE();
 80012fa:	4b4e      	ldr	r3, [pc, #312]	; (8001434 <DFSDMx_FilterMspInit+0x140>)
 80012fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012fe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001302:	645a      	str	r2, [r3, #68]	; 0x44
 8001304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001306:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800130a:	9200      	str	r2, [sp, #0]
 800130c:	9a00      	ldr	r2, [sp, #0]
  AUDIO_DFSDMx_DMAx_CLK_ENABLE();
 800130e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001310:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001314:	631a      	str	r2, [r3, #48]	; 0x30
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	9b01      	ldr	r3, [sp, #4]
  hDmaTopLeft.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001320:	4845      	ldr	r0, [pc, #276]	; (8001438 <DFSDMx_FilterMspInit+0x144>)
 8001322:	2400      	movs	r4, #0
 8001324:	6084      	str	r4, [r0, #8]
  hDmaTopLeft.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001326:	60c4      	str	r4, [r0, #12]
  hDmaTopLeft.Init.MemInc              = DMA_MINC_ENABLE;
 8001328:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 800132c:	f8c0 a010 	str.w	sl, [r0, #16]
  hDmaTopLeft.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 8001330:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8001334:	f8c0 9014 	str.w	r9, [r0, #20]
  hDmaTopLeft.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 8001338:	f44f 4880 	mov.w	r8, #16384	; 0x4000
 800133c:	f8c0 8018 	str.w	r8, [r0, #24]
  hDmaTopLeft.Init.Mode                = DMA_CIRCULAR;
 8001340:	f44f 7780 	mov.w	r7, #256	; 0x100
 8001344:	61c7      	str	r7, [r0, #28]
  hDmaTopLeft.Init.Priority            = DMA_PRIORITY_HIGH;
 8001346:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800134a:	6206      	str	r6, [r0, #32]
  hDmaTopLeft.Instance                 = AUDIO_DFSDMx_DMAx_TOP_LEFT_STREAM;
 800134c:	4b3b      	ldr	r3, [pc, #236]	; (800143c <DFSDMx_FilterMspInit+0x148>)
 800134e:	6003      	str	r3, [r0, #0]
  hDmaTopLeft.Init.Channel             = AUDIO_DFSDMx_DMAx_CHANNEL; 
 8001350:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8001354:	6045      	str	r5, [r0, #4]
  __HAL_LINKDMA(&hAudioInTopLeftFilter, hdmaReg, hDmaTopLeft);
 8001356:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <DFSDMx_FilterMspInit+0x14c>)
 8001358:	6298      	str	r0, [r3, #40]	; 0x28
 800135a:	6383      	str	r3, [r0, #56]	; 0x38
  __HAL_DMA_RESET_HANDLE_STATE(&hDmaTopLeft);
 800135c:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  HAL_DMA_Init(&hDmaTopLeft);      
 8001360:	f004 f9dc 	bl	800571c <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_TOP_LEFT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001364:	4622      	mov	r2, r4
 8001366:	2104      	movs	r1, #4
 8001368:	2038      	movs	r0, #56	; 0x38
 800136a:	f003 fe3f 	bl	8004fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_TOP_LEFT_IRQ);
 800136e:	2038      	movs	r0, #56	; 0x38
 8001370:	f003 fe6e 	bl	8005050 <HAL_NVIC_EnableIRQ>
  hDmaTopRight.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001374:	4833      	ldr	r0, [pc, #204]	; (8001444 <DFSDMx_FilterMspInit+0x150>)
 8001376:	6084      	str	r4, [r0, #8]
  hDmaTopRight.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001378:	60c4      	str	r4, [r0, #12]
  hDmaTopRight.Init.MemInc              = DMA_MINC_ENABLE;
 800137a:	f8c0 a010 	str.w	sl, [r0, #16]
  hDmaTopRight.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 800137e:	f8c0 9014 	str.w	r9, [r0, #20]
  hDmaTopRight.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 8001382:	f8c0 8018 	str.w	r8, [r0, #24]
  hDmaTopRight.Init.Mode                = DMA_CIRCULAR;
 8001386:	61c7      	str	r7, [r0, #28]
  hDmaTopRight.Init.Priority            = DMA_PRIORITY_HIGH;  
 8001388:	6206      	str	r6, [r0, #32]
  hDmaTopRight.Instance                 = AUDIO_DFSDMx_DMAx_TOP_RIGHT_STREAM;
 800138a:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <DFSDMx_FilterMspInit+0x154>)
 800138c:	6003      	str	r3, [r0, #0]
  hDmaTopRight.Init.Channel             = AUDIO_DFSDMx_DMAx_CHANNEL;
 800138e:	6045      	str	r5, [r0, #4]
  __HAL_LINKDMA(&hAudioInTopRightFilter, hdmaReg, hDmaTopRight);
 8001390:	4b2e      	ldr	r3, [pc, #184]	; (800144c <DFSDMx_FilterMspInit+0x158>)
 8001392:	6298      	str	r0, [r3, #40]	; 0x28
 8001394:	6383      	str	r3, [r0, #56]	; 0x38
  __HAL_DMA_RESET_HANDLE_STATE(&hDmaTopRight);
 8001396:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  HAL_DMA_Init(&hDmaTopRight);      
 800139a:	f004 f9bf 	bl	800571c <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_TOP_RIGHT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800139e:	4622      	mov	r2, r4
 80013a0:	2104      	movs	r1, #4
 80013a2:	2044      	movs	r0, #68	; 0x44
 80013a4:	f003 fe22 	bl	8004fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_TOP_RIGHT_IRQ);
 80013a8:	2044      	movs	r0, #68	; 0x44
 80013aa:	f003 fe51 	bl	8005050 <HAL_NVIC_EnableIRQ>
  if(AudioIn_ChannelNumber > 2)
 80013ae:	4b28      	ldr	r3, [pc, #160]	; (8001450 <DFSDMx_FilterMspInit+0x15c>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d802      	bhi.n	80013bc <DFSDMx_FilterMspInit+0xc8>
}
 80013b6:	b002      	add	sp, #8
 80013b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hDmaButtomLeft.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80013bc:	4825      	ldr	r0, [pc, #148]	; (8001454 <DFSDMx_FilterMspInit+0x160>)
 80013be:	6084      	str	r4, [r0, #8]
    hDmaButtomLeft.Init.PeriphInc           = DMA_PINC_DISABLE;
 80013c0:	60c4      	str	r4, [r0, #12]
    hDmaButtomLeft.Init.MemInc              = DMA_MINC_ENABLE;
 80013c2:	f8c0 a010 	str.w	sl, [r0, #16]
    hDmaButtomLeft.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 80013c6:	f8c0 9014 	str.w	r9, [r0, #20]
    hDmaButtomLeft.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 80013ca:	f8c0 8018 	str.w	r8, [r0, #24]
    hDmaButtomLeft.Init.Mode                = DMA_CIRCULAR;
 80013ce:	61c7      	str	r7, [r0, #28]
    hDmaButtomLeft.Init.Priority            = DMA_PRIORITY_HIGH;
 80013d0:	6206      	str	r6, [r0, #32]
    hDmaButtomLeft.Instance                 = AUDIO_DFSDMx_DMAx_BUTTOM_LEFT_STREAM;
 80013d2:	4b21      	ldr	r3, [pc, #132]	; (8001458 <DFSDMx_FilterMspInit+0x164>)
 80013d4:	6003      	str	r3, [r0, #0]
    hDmaButtomLeft.Init.Channel             = AUDIO_DFSDMx_DMAx_CHANNEL; 
 80013d6:	6045      	str	r5, [r0, #4]
    __HAL_LINKDMA(&hAudioInButtomLeftFilter, hdmaReg, hDmaButtomLeft);
 80013d8:	4b20      	ldr	r3, [pc, #128]	; (800145c <DFSDMx_FilterMspInit+0x168>)
 80013da:	6298      	str	r0, [r3, #40]	; 0x28
 80013dc:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaButtomLeft);
 80013de:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    HAL_DMA_Init(&hDmaButtomLeft);      
 80013e2:	f004 f99b 	bl	800571c <HAL_DMA_Init>
    HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_BUTTOM_LEFT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80013e6:	4622      	mov	r2, r4
 80013e8:	2104      	movs	r1, #4
 80013ea:	2045      	movs	r0, #69	; 0x45
 80013ec:	f003 fdfe 	bl	8004fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_BUTTOM_LEFT_IRQ);
 80013f0:	2045      	movs	r0, #69	; 0x45
 80013f2:	f003 fe2d 	bl	8005050 <HAL_NVIC_EnableIRQ>
    hDmaButtomRight.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80013f6:	481a      	ldr	r0, [pc, #104]	; (8001460 <DFSDMx_FilterMspInit+0x16c>)
 80013f8:	6084      	str	r4, [r0, #8]
    hDmaButtomRight.Init.PeriphInc           = DMA_PINC_DISABLE;
 80013fa:	60c4      	str	r4, [r0, #12]
    hDmaButtomRight.Init.MemInc              = DMA_MINC_ENABLE;
 80013fc:	f8c0 a010 	str.w	sl, [r0, #16]
    hDmaButtomRight.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 8001400:	f8c0 9014 	str.w	r9, [r0, #20]
    hDmaButtomRight.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 8001404:	f8c0 8018 	str.w	r8, [r0, #24]
    hDmaButtomRight.Init.Mode                = DMA_CIRCULAR;
 8001408:	61c7      	str	r7, [r0, #28]
    hDmaButtomRight.Init.Priority            = DMA_PRIORITY_HIGH;  
 800140a:	6206      	str	r6, [r0, #32]
    hDmaButtomRight.Instance                 = AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_STREAM;
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <DFSDMx_FilterMspInit+0x170>)
 800140e:	6003      	str	r3, [r0, #0]
    hDmaButtomRight.Init.Channel             = AUDIO_DFSDMx_DMAx_CHANNEL;
 8001410:	6045      	str	r5, [r0, #4]
    __HAL_LINKDMA(&hAudioInButtomRightFilter, hdmaReg, hDmaButtomRight);
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <DFSDMx_FilterMspInit+0x174>)
 8001414:	6298      	str	r0, [r3, #40]	; 0x28
 8001416:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaButtomRight);
 8001418:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    HAL_DMA_Init(&hDmaButtomRight);      
 800141c:	f004 f97e 	bl	800571c <HAL_DMA_Init>
    HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001420:	4622      	mov	r2, r4
 8001422:	2104      	movs	r1, #4
 8001424:	2046      	movs	r0, #70	; 0x46
 8001426:	f003 fde1 	bl	8004fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_IRQ); 
 800142a:	2046      	movs	r0, #70	; 0x46
 800142c:	f003 fe10 	bl	8005050 <HAL_NVIC_EnableIRQ>
}
 8001430:	e7c1      	b.n	80013b6 <DFSDMx_FilterMspInit+0xc2>
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	20001dd0 	.word	0x20001dd0
 800143c:	40026410 	.word	0x40026410
 8001440:	20001d18 	.word	0x20001d18
 8001444:	20001d6c 	.word	0x20001d6c
 8001448:	40026488 	.word	0x40026488
 800144c:	20001f2c 	.word	0x20001f2c
 8001450:	20000030 	.word	0x20000030
 8001454:	20001c34 	.word	0x20001c34
 8001458:	400264a0 	.word	0x400264a0
 800145c:	20001ea0 	.word	0x20001ea0
 8001460:	20001fb8 	.word	0x20001fb8
 8001464:	400264b8 	.word	0x400264b8
 8001468:	20001b5c 	.word	0x20001b5c

0800146c <SAI_AUDIO_IN_MspInit>:
{
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	b08b      	sub	sp, #44	; 0x2c
 8001470:	4605      	mov	r5, r0
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001472:	4c3b      	ldr	r4, [pc, #236]	; (8001560 <SAI_AUDIO_IN_MspInit+0xf4>)
 8001474:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001476:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800147a:	6463      	str	r3, [r4, #68]	; 0x44
 800147c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800147e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	9b01      	ldr	r3, [sp, #4]
  AUDIO_IN_SAIx_SD_ENABLE();
 8001486:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001488:	f043 0310 	orr.w	r3, r3, #16
 800148c:	6323      	str	r3, [r4, #48]	; 0x30
 800148e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	9302      	str	r3, [sp, #8]
 8001496:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8001498:	2308      	movs	r3, #8
 800149a:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800149c:	2602      	movs	r6, #2
 800149e:	9606      	str	r6, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80014a0:	2700      	movs	r7, #0
 80014a2:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80014a4:	9608      	str	r6, [sp, #32]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 80014a6:	2306      	movs	r3, #6
 80014a8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80014aa:	a905      	add	r1, sp, #20
 80014ac:	482d      	ldr	r0, [pc, #180]	; (8001564 <SAI_AUDIO_IN_MspInit+0xf8>)
 80014ae:	f004 fcfd 	bl	8005eac <HAL_GPIO_Init>
  AUDIO_IN_INT_GPIO_ENABLE();
 80014b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b8:	6323      	str	r3, [r4, #48]	; 0x30
 80014ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014c0:	9303      	str	r3, [sp, #12]
 80014c2:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80014c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c8:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80014ca:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80014cc:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80014ce:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80014d0:	a905      	add	r1, sp, #20
 80014d2:	4825      	ldr	r0, [pc, #148]	; (8001568 <SAI_AUDIO_IN_MspInit+0xfc>)
 80014d4:	f004 fcea 	bl	8005eac <HAL_GPIO_Init>
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80014d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014de:	6323      	str	r3, [r4, #48]	; 0x30
 80014e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e6:	9304      	str	r3, [sp, #16]
 80014e8:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_IN_SAIx)
 80014ea:	682a      	ldr	r2, [r5, #0]
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <SAI_AUDIO_IN_MspInit+0x100>)
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d011      	beq.n	8001516 <SAI_AUDIO_IN_MspInit+0xaa>
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2104      	movs	r1, #4
 80014f6:	203c      	movs	r0, #60	; 0x3c
 80014f8:	f003 fd78 	bl	8004fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 80014fc:	203c      	movs	r0, #60	; 0x3c
 80014fe:	f003 fda7 	bl	8005050 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2104      	movs	r1, #4
 8001506:	2028      	movs	r0, #40	; 0x28
 8001508:	f003 fd70 	bl	8004fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 800150c:	2028      	movs	r0, #40	; 0x28
 800150e:	f003 fd9f 	bl	8005050 <HAL_NVIC_EnableIRQ>
}
 8001512:	b00b      	add	sp, #44	; 0x2c
 8001514:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8001516:	4c16      	ldr	r4, [pc, #88]	; (8001570 <SAI_AUDIO_IN_MspInit+0x104>)
 8001518:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800151c:	6063      	str	r3, [r4, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800151e:	60a7      	str	r7, [r4, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001520:	60e7      	str	r7, [r4, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8001522:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001526:	6122      	str	r2, [r4, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800152c:	6162      	str	r2, [r4, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 800152e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001532:	61a2      	str	r2, [r4, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8001534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001538:	61e2      	str	r2, [r4, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800153a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800153e:	6222      	str	r2, [r4, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001540:	6267      	str	r7, [r4, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001542:	2203      	movs	r2, #3
 8001544:	62a2      	str	r2, [r4, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001546:	62e7      	str	r7, [r4, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8001548:	6327      	str	r7, [r4, #48]	; 0x30
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <SAI_AUDIO_IN_MspInit+0x108>)
 800154c:	6023      	str	r3, [r4, #0]
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800154e:	672c      	str	r4, [r5, #112]	; 0x70
 8001550:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_DMA_DeInit(&hdma_sai_rx);
 8001552:	4620      	mov	r0, r4
 8001554:	f004 f948 	bl	80057e8 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
 8001558:	4620      	mov	r0, r4
 800155a:	f004 f8df 	bl	800571c <HAL_DMA_Init>
 800155e:	e7c8      	b.n	80014f2 <SAI_AUDIO_IN_MspInit+0x86>
 8001560:	40023800 	.word	0x40023800
 8001564:	40021000 	.word	0x40021000
 8001568:	40022400 	.word	0x40022400
 800156c:	40015824 	.word	0x40015824
 8001570:	2000032c 	.word	0x2000032c
 8001574:	40026470 	.word	0x40026470

08001578 <DFSDMx_ChannelMspDeInit>:
{
 8001578:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(AUDIO_DFSDMx_CKOUT_DMIC_GPIO_PORT, GPIO_InitStruct.Pin);
 800157a:	2108      	movs	r1, #8
 800157c:	480a      	ldr	r0, [pc, #40]	; (80015a8 <DFSDMx_ChannelMspDeInit+0x30>)
 800157e:	f004 fd85 	bl	800608c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, GPIO_InitStruct.Pin);
 8001582:	2108      	movs	r1, #8
 8001584:	4809      	ldr	r0, [pc, #36]	; (80015ac <DFSDMx_ChannelMspDeInit+0x34>)
 8001586:	f004 fd81 	bl	800608c <HAL_GPIO_DeInit>
  if(AudioIn_ChannelNumber > 2)
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <DFSDMx_ChannelMspDeInit+0x38>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d800      	bhi.n	8001594 <DFSDMx_ChannelMspDeInit+0x1c>
}
 8001592:	bd08      	pop	{r3, pc}
    HAL_GPIO_DeInit(AUDIO_DFSDMx_CKOUT_DMIC_GPIO_PORT, GPIO_InitStruct.Pin);
 8001594:	2108      	movs	r1, #8
 8001596:	4804      	ldr	r0, [pc, #16]	; (80015a8 <DFSDMx_ChannelMspDeInit+0x30>)
 8001598:	f004 fd78 	bl	800608c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, GPIO_InitStruct.Pin);    
 800159c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <DFSDMx_ChannelMspDeInit+0x34>)
 80015a2:	f004 fd73 	bl	800608c <HAL_GPIO_DeInit>
}
 80015a6:	e7f4      	b.n	8001592 <DFSDMx_ChannelMspDeInit+0x1a>
 80015a8:	40020c00 	.word	0x40020c00
 80015ac:	40020800 	.word	0x40020800
 80015b0:	20000030 	.word	0x20000030

080015b4 <SAI_AUDIO_IN_MspDeInit>:
{
 80015b4:	b510      	push	{r4, lr}
 80015b6:	4604      	mov	r4, r0
  HAL_NVIC_DisableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 80015b8:	203c      	movs	r0, #60	; 0x3c
 80015ba:	f003 fd55 	bl	8005068 <HAL_NVIC_DisableIRQ>
  if(hsai->Instance == AUDIO_IN_SAIx)
 80015be:	6822      	ldr	r2, [r4, #0]
 80015c0:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <SAI_AUDIO_IN_MspDeInit+0x44>)
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d013      	beq.n	80015ee <SAI_AUDIO_IN_MspDeInit+0x3a>
  __HAL_SAI_DISABLE(hsai);  
 80015c6:	6822      	ldr	r2, [r4, #0]
 80015c8:	6813      	ldr	r3, [r2, #0]
 80015ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
  HAL_GPIO_DeInit(AUDIO_IN_SAIx_SD_GPIO_PORT, gpio_init_structure.Pin);
 80015d0:	2108      	movs	r1, #8
 80015d2:	480a      	ldr	r0, [pc, #40]	; (80015fc <SAI_AUDIO_IN_MspDeInit+0x48>)
 80015d4:	f004 fd5a 	bl	800608c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(AUDIO_IN_INT_GPIO_PORT, gpio_init_structure.Pin);
 80015d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015dc:	4808      	ldr	r0, [pc, #32]	; (8001600 <SAI_AUDIO_IN_MspDeInit+0x4c>)
 80015de:	f004 fd55 	bl	800608c <HAL_GPIO_DeInit>
  AUDIO_IN_SAIx_CLK_DISABLE();  
 80015e2:	4a08      	ldr	r2, [pc, #32]	; (8001604 <SAI_AUDIO_IN_MspDeInit+0x50>)
 80015e4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80015e6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80015ea:	6453      	str	r3, [r2, #68]	; 0x44
}
 80015ec:	bd10      	pop	{r4, pc}
    HAL_DMA_DeInit(hsai->hdmatx);
 80015ee:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80015f0:	f004 f8fa 	bl	80057e8 <HAL_DMA_DeInit>
 80015f4:	e7e7      	b.n	80015c6 <SAI_AUDIO_IN_MspDeInit+0x12>
 80015f6:	bf00      	nop
 80015f8:	40015824 	.word	0x40015824
 80015fc:	40021000 	.word	0x40021000
 8001600:	40022400 	.word	0x40022400
 8001604:	40023800 	.word	0x40023800

08001608 <DFSDMx_Init>:
{
 8001608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInTopLeftChannel);  
 800160a:	4ba4      	ldr	r3, [pc, #656]	; (800189c <DFSDMx_Init+0x294>)
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hAudioInTopLeftChannel.Instance                      = DFSDM1_Channel1;  
 8001612:	4aa3      	ldr	r2, [pc, #652]	; (80018a0 <DFSDMx_Init+0x298>)
 8001614:	601a      	str	r2, [r3, #0]
  hAudioInTopLeftChannel.Init.OutputClock.Activation   = ENABLE;
 8001616:	2201      	movs	r2, #1
 8001618:	711a      	strb	r2, [r3, #4]
  hAudioInTopLeftChannel.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 800161a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800161e:	609a      	str	r2, [r3, #8]
  hAudioInTopLeftChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 8001620:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
 8001624:	d019      	beq.n	800165a <DFSDMx_Init+0x52>
 8001626:	f642 3311 	movw	r3, #11025	; 0x2b11
 800162a:	4298      	cmp	r0, r3
 800162c:	d03b      	beq.n	80016a6 <DFSDMx_Init+0x9e>
 800162e:	f5b0 5f7a 	cmp.w	r0, #16000	; 0x3e80
 8001632:	d03a      	beq.n	80016aa <DFSDMx_Init+0xa2>
 8001634:	f245 6322 	movw	r3, #22050	; 0x5622
 8001638:	4298      	cmp	r0, r3
 800163a:	d038      	beq.n	80016ae <DFSDMx_Init+0xa6>
 800163c:	f5b0 4ffa 	cmp.w	r0, #32000	; 0x7d00
 8001640:	d037      	beq.n	80016b2 <DFSDMx_Init+0xaa>
 8001642:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001646:	4298      	cmp	r0, r3
 8001648:	d035      	beq.n	80016b6 <DFSDMx_Init+0xae>
 800164a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800164e:	4298      	cmp	r0, r3
 8001650:	d001      	beq.n	8001656 <DFSDMx_Init+0x4e>
 8001652:	2419      	movs	r4, #25
 8001654:	e002      	b.n	800165c <DFSDMx_Init+0x54>
 8001656:	2410      	movs	r4, #16
 8001658:	e000      	b.n	800165c <DFSDMx_Init+0x54>
 800165a:	2418      	movs	r4, #24
 800165c:	4b8f      	ldr	r3, [pc, #572]	; (800189c <DFSDMx_Init+0x294>)
 800165e:	60dc      	str	r4, [r3, #12]
  hAudioInTopLeftChannel.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  hAudioInTopLeftChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 8001664:	615a      	str	r2, [r3, #20]
  hAudioInTopLeftChannel.Init.Input.Pins               = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001666:	619a      	str	r2, [r3, #24]
  hAudioInTopLeftChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_RISING;
 8001668:	61da      	str	r2, [r3, #28]
  hAudioInTopLeftChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800166a:	2204      	movs	r2, #4
 800166c:	621a      	str	r2, [r3, #32]
  hAudioInTopLeftChannel.Init.Awd.FilterOrder          = DFSDM_FILTER_ORDER(AudioFreq);
 800166e:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
 8001672:	d025      	beq.n	80016c0 <DFSDMx_Init+0xb8>
 8001674:	f642 3311 	movw	r3, #11025	; 0x2b11
 8001678:	4298      	cmp	r0, r3
 800167a:	d040      	beq.n	80016fe <DFSDMx_Init+0xf6>
 800167c:	f5b0 5f7a 	cmp.w	r0, #16000	; 0x3e80
 8001680:	d040      	beq.n	8001704 <DFSDMx_Init+0xfc>
 8001682:	f245 6322 	movw	r3, #22050	; 0x5622
 8001686:	4298      	cmp	r0, r3
 8001688:	d03f      	beq.n	800170a <DFSDMx_Init+0x102>
 800168a:	f5b0 4ffa 	cmp.w	r0, #32000	; 0x7d00
 800168e:	d03f      	beq.n	8001710 <DFSDMx_Init+0x108>
 8001690:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001694:	4298      	cmp	r0, r3
 8001696:	d03e      	beq.n	8001716 <DFSDMx_Init+0x10e>
 8001698:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800169c:	4298      	cmp	r0, r3
 800169e:	d00c      	beq.n	80016ba <DFSDMx_Init+0xb2>
 80016a0:	f04f 4620 	mov.w	r6, #2684354560	; 0xa0000000
 80016a4:	e00e      	b.n	80016c4 <DFSDMx_Init+0xbc>
  hAudioInTopLeftChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 80016a6:	2404      	movs	r4, #4
 80016a8:	e7d8      	b.n	800165c <DFSDMx_Init+0x54>
 80016aa:	2418      	movs	r4, #24
 80016ac:	e7d6      	b.n	800165c <DFSDMx_Init+0x54>
 80016ae:	2404      	movs	r4, #4
 80016b0:	e7d4      	b.n	800165c <DFSDMx_Init+0x54>
 80016b2:	2418      	movs	r4, #24
 80016b4:	e7d2      	b.n	800165c <DFSDMx_Init+0x54>
 80016b6:	2404      	movs	r4, #4
 80016b8:	e7d0      	b.n	800165c <DFSDMx_Init+0x54>
  hAudioInTopLeftChannel.Init.Awd.FilterOrder          = DFSDM_FILTER_ORDER(AudioFreq);
 80016ba:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
 80016be:	e001      	b.n	80016c4 <DFSDMx_Init+0xbc>
 80016c0:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
 80016c4:	4b75      	ldr	r3, [pc, #468]	; (800189c <DFSDMx_Init+0x294>)
 80016c6:	625e      	str	r6, [r3, #36]	; 0x24
  hAudioInTopLeftChannel.Init.Awd.Oversampling         = DFSDM_OVER_SAMPLING(AudioFreq);
 80016c8:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
 80016cc:	d028      	beq.n	8001720 <DFSDMx_Init+0x118>
 80016ce:	f642 3311 	movw	r3, #11025	; 0x2b11
 80016d2:	4298      	cmp	r0, r3
 80016d4:	d045      	beq.n	8001762 <DFSDMx_Init+0x15a>
 80016d6:	f5b0 5f7a 	cmp.w	r0, #16000	; 0x3e80
 80016da:	d045      	beq.n	8001768 <DFSDMx_Init+0x160>
 80016dc:	f245 6322 	movw	r3, #22050	; 0x5622
 80016e0:	4298      	cmp	r0, r3
 80016e2:	d043      	beq.n	800176c <DFSDMx_Init+0x164>
 80016e4:	f5b0 4ffa 	cmp.w	r0, #32000	; 0x7d00
 80016e8:	d042      	beq.n	8001770 <DFSDMx_Init+0x168>
 80016ea:	f64a 4344 	movw	r3, #44100	; 0xac44
 80016ee:	4298      	cmp	r0, r3
 80016f0:	d040      	beq.n	8001774 <DFSDMx_Init+0x16c>
 80016f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80016f6:	4298      	cmp	r0, r3
 80016f8:	d010      	beq.n	800171c <DFSDMx_Init+0x114>
 80016fa:	2514      	movs	r5, #20
 80016fc:	e012      	b.n	8001724 <DFSDMx_Init+0x11c>
  hAudioInTopLeftChannel.Init.Awd.FilterOrder          = DFSDM_FILTER_ORDER(AudioFreq);
 80016fe:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
 8001702:	e7df      	b.n	80016c4 <DFSDMx_Init+0xbc>
 8001704:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
 8001708:	e7dc      	b.n	80016c4 <DFSDMx_Init+0xbc>
 800170a:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
 800170e:	e7d9      	b.n	80016c4 <DFSDMx_Init+0xbc>
 8001710:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8001714:	e7d6      	b.n	80016c4 <DFSDMx_Init+0xbc>
 8001716:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
 800171a:	e7d3      	b.n	80016c4 <DFSDMx_Init+0xbc>
  hAudioInTopLeftChannel.Init.Awd.Oversampling         = DFSDM_OVER_SAMPLING(AudioFreq);
 800171c:	2540      	movs	r5, #64	; 0x40
 800171e:	e001      	b.n	8001724 <DFSDMx_Init+0x11c>
 8001720:	f44f 7580 	mov.w	r5, #256	; 0x100
 8001724:	4b5d      	ldr	r3, [pc, #372]	; (800189c <DFSDMx_Init+0x294>)
 8001726:	629d      	str	r5, [r3, #40]	; 0x28
  hAudioInTopLeftChannel.Init.Offset                   = 0;
 8001728:	2200      	movs	r2, #0
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c
  hAudioInTopLeftChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 800172c:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
 8001730:	d024      	beq.n	800177c <DFSDMx_Init+0x174>
 8001732:	f642 3311 	movw	r3, #11025	; 0x2b11
 8001736:	4298      	cmp	r0, r3
 8001738:	d028      	beq.n	800178c <DFSDMx_Init+0x184>
 800173a:	f5b0 5f7a 	cmp.w	r0, #16000	; 0x3e80
 800173e:	d027      	beq.n	8001790 <DFSDMx_Init+0x188>
 8001740:	f245 6322 	movw	r3, #22050	; 0x5622
 8001744:	4298      	cmp	r0, r3
 8001746:	d025      	beq.n	8001794 <DFSDMx_Init+0x18c>
 8001748:	f5b0 4ffa 	cmp.w	r0, #32000	; 0x7d00
 800174c:	d024      	beq.n	8001798 <DFSDMx_Init+0x190>
 800174e:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001752:	4298      	cmp	r0, r3
 8001754:	d022      	beq.n	800179c <DFSDMx_Init+0x194>
 8001756:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800175a:	4298      	cmp	r0, r3
 800175c:	d00c      	beq.n	8001778 <DFSDMx_Init+0x170>
 800175e:	2704      	movs	r7, #4
 8001760:	e00d      	b.n	800177e <DFSDMx_Init+0x176>
  hAudioInTopLeftChannel.Init.Awd.Oversampling         = DFSDM_OVER_SAMPLING(AudioFreq);
 8001762:	f44f 7580 	mov.w	r5, #256	; 0x100
 8001766:	e7dd      	b.n	8001724 <DFSDMx_Init+0x11c>
 8001768:	2580      	movs	r5, #128	; 0x80
 800176a:	e7db      	b.n	8001724 <DFSDMx_Init+0x11c>
 800176c:	2580      	movs	r5, #128	; 0x80
 800176e:	e7d9      	b.n	8001724 <DFSDMx_Init+0x11c>
 8001770:	2540      	movs	r5, #64	; 0x40
 8001772:	e7d7      	b.n	8001724 <DFSDMx_Init+0x11c>
 8001774:	2540      	movs	r5, #64	; 0x40
 8001776:	e7d5      	b.n	8001724 <DFSDMx_Init+0x11c>
  hAudioInTopLeftChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 8001778:	4617      	mov	r7, r2
 800177a:	e000      	b.n	800177e <DFSDMx_Init+0x176>
 800177c:	2708      	movs	r7, #8
 800177e:	4847      	ldr	r0, [pc, #284]	; (800189c <DFSDMx_Init+0x294>)
 8001780:	6307      	str	r7, [r0, #48]	; 0x30
  if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInTopLeftChannel))
 8001782:	f003 fd25 	bl	80051d0 <HAL_DFSDM_ChannelInit>
 8001786:	b158      	cbz	r0, 80017a0 <DFSDMx_Init+0x198>
    return AUDIO_ERROR;
 8001788:	2001      	movs	r0, #1
}
 800178a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hAudioInTopLeftChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 800178c:	2708      	movs	r7, #8
 800178e:	e7f6      	b.n	800177e <DFSDMx_Init+0x176>
 8001790:	2703      	movs	r7, #3
 8001792:	e7f4      	b.n	800177e <DFSDMx_Init+0x176>
 8001794:	2704      	movs	r7, #4
 8001796:	e7f2      	b.n	800177e <DFSDMx_Init+0x176>
 8001798:	2707      	movs	r7, #7
 800179a:	e7f0      	b.n	800177e <DFSDMx_Init+0x176>
 800179c:	2700      	movs	r7, #0
 800179e:	e7ee      	b.n	800177e <DFSDMx_Init+0x176>
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInTopRightChannel);  
 80017a0:	4840      	ldr	r0, [pc, #256]	; (80018a4 <DFSDMx_Init+0x29c>)
 80017a2:	2300      	movs	r3, #0
 80017a4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hAudioInTopRightChannel.Instance                      = DFSDM1_Channel0;  
 80017a8:	4a3f      	ldr	r2, [pc, #252]	; (80018a8 <DFSDMx_Init+0x2a0>)
 80017aa:	6002      	str	r2, [r0, #0]
  hAudioInTopRightChannel.Init.OutputClock.Activation   = ENABLE;
 80017ac:	2201      	movs	r2, #1
 80017ae:	7102      	strb	r2, [r0, #4]
  hAudioInTopRightChannel.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80017b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017b4:	6081      	str	r1, [r0, #8]
  hAudioInTopRightChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 80017b6:	60c4      	str	r4, [r0, #12]
  hAudioInTopRightChannel.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80017b8:	6103      	str	r3, [r0, #16]
  hAudioInTopRightChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 80017ba:	6143      	str	r3, [r0, #20]
  hAudioInTopRightChannel.Init.Input.Pins               = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80017bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c0:	6181      	str	r1, [r0, #24]
  hAudioInTopRightChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_FALLING;
 80017c2:	61c2      	str	r2, [r0, #28]
  hAudioInTopRightChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80017c4:	2204      	movs	r2, #4
 80017c6:	6202      	str	r2, [r0, #32]
  hAudioInTopRightChannel.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 80017c8:	6243      	str	r3, [r0, #36]	; 0x24
  hAudioInTopRightChannel.Init.Awd.Oversampling         = 10;
 80017ca:	220a      	movs	r2, #10
 80017cc:	6282      	str	r2, [r0, #40]	; 0x28
  hAudioInTopRightChannel.Init.Offset                   = 0;
 80017ce:	62c3      	str	r3, [r0, #44]	; 0x2c
  hAudioInTopRightChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 80017d0:	6307      	str	r7, [r0, #48]	; 0x30
  if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInTopRightChannel))
 80017d2:	f003 fcfd 	bl	80051d0 <HAL_DFSDM_ChannelInit>
 80017d6:	2800      	cmp	r0, #0
 80017d8:	f040 80e1 	bne.w	800199e <DFSDMx_Init+0x396>
  if(AudioIn_ChannelNumber > 2)
 80017dc:	4b33      	ldr	r3, [pc, #204]	; (80018ac <DFSDMx_Init+0x2a4>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d939      	bls.n	8001858 <DFSDMx_Init+0x250>
    __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInButtomLeftChannel);  
 80017e4:	4832      	ldr	r0, [pc, #200]	; (80018b0 <DFSDMx_Init+0x2a8>)
 80017e6:	2300      	movs	r3, #0
 80017e8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hAudioInButtomLeftChannel.Instance                      = DFSDM1_Channel5;  
 80017ec:	4a31      	ldr	r2, [pc, #196]	; (80018b4 <DFSDMx_Init+0x2ac>)
 80017ee:	6002      	str	r2, [r0, #0]
    hAudioInButtomLeftChannel.Init.OutputClock.Activation   = ENABLE;
 80017f0:	2201      	movs	r2, #1
 80017f2:	7102      	strb	r2, [r0, #4]
    hAudioInButtomLeftChannel.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80017f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017f8:	6082      	str	r2, [r0, #8]
    hAudioInButtomLeftChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 80017fa:	60c4      	str	r4, [r0, #12]
    hAudioInButtomLeftChannel.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80017fc:	6103      	str	r3, [r0, #16]
    hAudioInButtomLeftChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 80017fe:	6143      	str	r3, [r0, #20]
    hAudioInButtomLeftChannel.Init.Input.Pins               = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001800:	6183      	str	r3, [r0, #24]
    hAudioInButtomLeftChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_RISING;
 8001802:	61c3      	str	r3, [r0, #28]
    hAudioInButtomLeftChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001804:	2204      	movs	r2, #4
 8001806:	6202      	str	r2, [r0, #32]
    hAudioInButtomLeftChannel.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001808:	6243      	str	r3, [r0, #36]	; 0x24
    hAudioInButtomLeftChannel.Init.Awd.Oversampling         = 10;
 800180a:	220a      	movs	r2, #10
 800180c:	6282      	str	r2, [r0, #40]	; 0x28
    hAudioInButtomLeftChannel.Init.Offset                   = 0;
 800180e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hAudioInButtomLeftChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 8001810:	6307      	str	r7, [r0, #48]	; 0x30
    if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInButtomLeftChannel))
 8001812:	f003 fcdd 	bl	80051d0 <HAL_DFSDM_ChannelInit>
 8001816:	b108      	cbz	r0, 800181c <DFSDMx_Init+0x214>
      return AUDIO_ERROR;
 8001818:	2001      	movs	r0, #1
 800181a:	e7b6      	b.n	800178a <DFSDMx_Init+0x182>
    __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInButtomRightChannel);  
 800181c:	4826      	ldr	r0, [pc, #152]	; (80018b8 <DFSDMx_Init+0x2b0>)
 800181e:	2300      	movs	r3, #0
 8001820:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hAudioInButtomRightChannel.Instance                      = DFSDM1_Channel4;  
 8001824:	4a25      	ldr	r2, [pc, #148]	; (80018bc <DFSDMx_Init+0x2b4>)
 8001826:	6002      	str	r2, [r0, #0]
    hAudioInButtomRightChannel.Init.OutputClock.Activation   = ENABLE;
 8001828:	2201      	movs	r2, #1
 800182a:	7102      	strb	r2, [r0, #4]
    hAudioInButtomRightChannel.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 800182c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001830:	6081      	str	r1, [r0, #8]
    hAudioInButtomRightChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 8001832:	60c4      	str	r4, [r0, #12]
    hAudioInButtomRightChannel.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001834:	6103      	str	r3, [r0, #16]
    hAudioInButtomRightChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 8001836:	6143      	str	r3, [r0, #20]
    hAudioInButtomRightChannel.Init.Input.Pins               = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001838:	f44f 7180 	mov.w	r1, #256	; 0x100
 800183c:	6181      	str	r1, [r0, #24]
    hAudioInButtomRightChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_FALLING;
 800183e:	61c2      	str	r2, [r0, #28]
    hAudioInButtomRightChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001840:	2204      	movs	r2, #4
 8001842:	6202      	str	r2, [r0, #32]
    hAudioInButtomRightChannel.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001844:	6243      	str	r3, [r0, #36]	; 0x24
    hAudioInButtomRightChannel.Init.Awd.Oversampling         = 10;
 8001846:	220a      	movs	r2, #10
 8001848:	6282      	str	r2, [r0, #40]	; 0x28
    hAudioInButtomRightChannel.Init.Offset                   = 0;
 800184a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hAudioInButtomRightChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 800184c:	6307      	str	r7, [r0, #48]	; 0x30
    if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInButtomRightChannel))
 800184e:	f003 fcbf 	bl	80051d0 <HAL_DFSDM_ChannelInit>
 8001852:	2800      	cmp	r0, #0
 8001854:	f040 80a5 	bne.w	80019a2 <DFSDMx_Init+0x39a>
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInTopLeftFilter);
 8001858:	4819      	ldr	r0, [pc, #100]	; (80018c0 <DFSDMx_Init+0x2b8>)
 800185a:	2300      	movs	r3, #0
 800185c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  hAudioInTopLeftFilter.Instance                          = AUDIO_DFSDMx_TOP_LEFT_FILTER;  
 8001860:	4a18      	ldr	r2, [pc, #96]	; (80018c4 <DFSDMx_Init+0x2bc>)
 8001862:	6002      	str	r2, [r0, #0]
  hAudioInTopLeftFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SW_TRIGGER;
 8001864:	6043      	str	r3, [r0, #4]
  hAudioInTopLeftFilter.Init.RegularParam.FastMode        = ENABLE;
 8001866:	2201      	movs	r2, #1
 8001868:	7202      	strb	r2, [r0, #8]
  hAudioInTopLeftFilter.Init.RegularParam.DmaMode         = ENABLE;
 800186a:	7242      	strb	r2, [r0, #9]
  hAudioInTopLeftFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 800186c:	60c3      	str	r3, [r0, #12]
  hAudioInTopLeftFilter.Init.InjectedParam.ScanMode       = ENABLE;
 800186e:	7402      	strb	r2, [r0, #16]
  hAudioInTopLeftFilter.Init.InjectedParam.DmaMode        = DISABLE;
 8001870:	7443      	strb	r3, [r0, #17]
  hAudioInTopLeftFilter.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8001872:	6143      	str	r3, [r0, #20]
  hAudioInTopLeftFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8001874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001878:	6183      	str	r3, [r0, #24]
  hAudioInTopLeftFilter.Init.FilterParam.SincOrder        = DFSDM_FILTER_ORDER(AudioFreq);
 800187a:	61c6      	str	r6, [r0, #28]
  hAudioInTopLeftFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 800187c:	6205      	str	r5, [r0, #32]
  hAudioInTopLeftFilter.Init.FilterParam.IntOversampling  = 1;
 800187e:	6242      	str	r2, [r0, #36]	; 0x24
  if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInTopLeftFilter))
 8001880:	f003 fd74 	bl	800536c <HAL_DFSDM_FilterInit>
 8001884:	b108      	cbz	r0, 800188a <DFSDMx_Init+0x282>
    return AUDIO_ERROR;
 8001886:	2001      	movs	r0, #1
 8001888:	e77f      	b.n	800178a <DFSDMx_Init+0x182>
  if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInTopLeftFilter, AUDIO_DFSDMx_TOP_LEFT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 800188a:	2201      	movs	r2, #1
 800188c:	490e      	ldr	r1, [pc, #56]	; (80018c8 <DFSDMx_Init+0x2c0>)
 800188e:	480c      	ldr	r0, [pc, #48]	; (80018c0 <DFSDMx_Init+0x2b8>)
 8001890:	f003 fe18 	bl	80054c4 <HAL_DFSDM_FilterConfigRegChannel>
 8001894:	b1d0      	cbz	r0, 80018cc <DFSDMx_Init+0x2c4>
    return AUDIO_ERROR;
 8001896:	2001      	movs	r0, #1
 8001898:	e777      	b.n	800178a <DFSDMx_Init+0x182>
 800189a:	bf00      	nop
 800189c:	20001e30 	.word	0x20001e30
 80018a0:	40017420 	.word	0x40017420
 80018a4:	20001e68 	.word	0x20001e68
 80018a8:	40017400 	.word	0x40017400
 80018ac:	20000030 	.word	0x20000030
 80018b0:	20001f80 	.word	0x20001f80
 80018b4:	400174a0 	.word	0x400174a0
 80018b8:	20001ef4 	.word	0x20001ef4
 80018bc:	40017480 	.word	0x40017480
 80018c0:	20001d18 	.word	0x20001d18
 80018c4:	40017500 	.word	0x40017500
 80018c8:	00010002 	.word	0x00010002
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInTopRightFilter);
 80018cc:	4837      	ldr	r0, [pc, #220]	; (80019ac <DFSDMx_Init+0x3a4>)
 80018ce:	2300      	movs	r3, #0
 80018d0:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  hAudioInTopRightFilter.Instance                          = AUDIO_DFSDMx_TOP_RIGHT_FILTER;
 80018d4:	4a36      	ldr	r2, [pc, #216]	; (80019b0 <DFSDMx_Init+0x3a8>)
 80018d6:	6002      	str	r2, [r0, #0]
  hAudioInTopRightFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SYNC_TRIGGER;
 80018d8:	2201      	movs	r2, #1
 80018da:	6042      	str	r2, [r0, #4]
  hAudioInTopRightFilter.Init.RegularParam.FastMode        = ENABLE;
 80018dc:	7202      	strb	r2, [r0, #8]
  hAudioInTopRightFilter.Init.RegularParam.DmaMode         = ENABLE;
 80018de:	7242      	strb	r2, [r0, #9]
  hAudioInTopRightFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 80018e0:	60c3      	str	r3, [r0, #12]
  hAudioInTopRightFilter.Init.InjectedParam.ScanMode       = DISABLE;
 80018e2:	7403      	strb	r3, [r0, #16]
  hAudioInTopRightFilter.Init.InjectedParam.DmaMode        = DISABLE;
 80018e4:	7443      	strb	r3, [r0, #17]
  hAudioInTopRightFilter.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80018e6:	6143      	str	r3, [r0, #20]
  hAudioInTopRightFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80018e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ec:	6183      	str	r3, [r0, #24]
  hAudioInTopRightFilter.Init.FilterParam.SincOrder        = DFSDM_FILTER_ORDER(AudioFreq);
 80018ee:	61c6      	str	r6, [r0, #28]
  hAudioInTopRightFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 80018f0:	6205      	str	r5, [r0, #32]
  hAudioInTopRightFilter.Init.FilterParam.IntOversampling  = 1;
 80018f2:	6242      	str	r2, [r0, #36]	; 0x24
  if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInTopRightFilter))
 80018f4:	f003 fd3a 	bl	800536c <HAL_DFSDM_FilterInit>
 80018f8:	b108      	cbz	r0, 80018fe <DFSDMx_Init+0x2f6>
    return AUDIO_ERROR;
 80018fa:	2001      	movs	r0, #1
 80018fc:	e745      	b.n	800178a <DFSDMx_Init+0x182>
  if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInTopRightFilter, AUDIO_DFSDMx_TOP_RIGHT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 80018fe:	2201      	movs	r2, #1
 8001900:	4611      	mov	r1, r2
 8001902:	482a      	ldr	r0, [pc, #168]	; (80019ac <DFSDMx_Init+0x3a4>)
 8001904:	f003 fdde 	bl	80054c4 <HAL_DFSDM_FilterConfigRegChannel>
 8001908:	2800      	cmp	r0, #0
 800190a:	d14c      	bne.n	80019a6 <DFSDMx_Init+0x39e>
  if(AudioIn_ChannelNumber > 2)
 800190c:	4b29      	ldr	r3, [pc, #164]	; (80019b4 <DFSDMx_Init+0x3ac>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b02      	cmp	r3, #2
 8001912:	f67f af3a 	bls.w	800178a <DFSDMx_Init+0x182>
    __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInButtomLeftFilter);
 8001916:	4828      	ldr	r0, [pc, #160]	; (80019b8 <DFSDMx_Init+0x3b0>)
 8001918:	2200      	movs	r2, #0
 800191a:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    hAudioInButtomLeftFilter.Instance                          = AUDIO_DFSDMx_BUTTOM_LEFT_FILTER;  
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <DFSDMx_Init+0x3b4>)
 8001920:	6003      	str	r3, [r0, #0]
    hAudioInButtomLeftFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SYNC_TRIGGER;
 8001922:	2301      	movs	r3, #1
 8001924:	6043      	str	r3, [r0, #4]
    hAudioInButtomLeftFilter.Init.RegularParam.FastMode        = ENABLE;
 8001926:	7203      	strb	r3, [r0, #8]
    hAudioInButtomLeftFilter.Init.RegularParam.DmaMode         = ENABLE;
 8001928:	7243      	strb	r3, [r0, #9]
    hAudioInButtomLeftFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 800192a:	60c2      	str	r2, [r0, #12]
    hAudioInButtomLeftFilter.Init.InjectedParam.ScanMode       = ENABLE;
 800192c:	7403      	strb	r3, [r0, #16]
    hAudioInButtomLeftFilter.Init.InjectedParam.DmaMode        = DISABLE;
 800192e:	7442      	strb	r2, [r0, #17]
    hAudioInButtomLeftFilter.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8001930:	6142      	str	r2, [r0, #20]
    hAudioInButtomLeftFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8001932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001936:	6182      	str	r2, [r0, #24]
    hAudioInButtomLeftFilter.Init.FilterParam.SincOrder        = DFSDM_FILTER_ORDER(AudioFreq);
 8001938:	61c6      	str	r6, [r0, #28]
    hAudioInButtomLeftFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 800193a:	6205      	str	r5, [r0, #32]
    hAudioInButtomLeftFilter.Init.FilterParam.IntOversampling  = 1;
 800193c:	6243      	str	r3, [r0, #36]	; 0x24
    if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInButtomLeftFilter))
 800193e:	f003 fd15 	bl	800536c <HAL_DFSDM_FilterInit>
 8001942:	b108      	cbz	r0, 8001948 <DFSDMx_Init+0x340>
      return AUDIO_ERROR;
 8001944:	2001      	movs	r0, #1
 8001946:	e720      	b.n	800178a <DFSDMx_Init+0x182>
    if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInButtomLeftFilter, AUDIO_DFSDMx_BUTTOM_LEFT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 8001948:	2201      	movs	r2, #1
 800194a:	491d      	ldr	r1, [pc, #116]	; (80019c0 <DFSDMx_Init+0x3b8>)
 800194c:	481a      	ldr	r0, [pc, #104]	; (80019b8 <DFSDMx_Init+0x3b0>)
 800194e:	f003 fdb9 	bl	80054c4 <HAL_DFSDM_FilterConfigRegChannel>
 8001952:	b108      	cbz	r0, 8001958 <DFSDMx_Init+0x350>
      return AUDIO_ERROR;
 8001954:	2001      	movs	r0, #1
 8001956:	e718      	b.n	800178a <DFSDMx_Init+0x182>
    __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInButtomRightFilter);
 8001958:	481a      	ldr	r0, [pc, #104]	; (80019c4 <DFSDMx_Init+0x3bc>)
 800195a:	2300      	movs	r3, #0
 800195c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    hAudioInButtomRightFilter.Instance                          = AUDIO_DFSDMx_BUTTOM_RIGHT_FILTER;
 8001960:	4a19      	ldr	r2, [pc, #100]	; (80019c8 <DFSDMx_Init+0x3c0>)
 8001962:	6002      	str	r2, [r0, #0]
    hAudioInButtomRightFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SYNC_TRIGGER;
 8001964:	2201      	movs	r2, #1
 8001966:	6042      	str	r2, [r0, #4]
    hAudioInButtomRightFilter.Init.RegularParam.FastMode        = ENABLE;
 8001968:	7202      	strb	r2, [r0, #8]
    hAudioInButtomRightFilter.Init.RegularParam.DmaMode         = ENABLE;
 800196a:	7242      	strb	r2, [r0, #9]
    hAudioInButtomRightFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 800196c:	60c3      	str	r3, [r0, #12]
    hAudioInButtomRightFilter.Init.InjectedParam.ScanMode       = DISABLE;
 800196e:	7403      	strb	r3, [r0, #16]
    hAudioInButtomRightFilter.Init.InjectedParam.DmaMode        = DISABLE;
 8001970:	7443      	strb	r3, [r0, #17]
    hAudioInButtomRightFilter.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8001972:	6143      	str	r3, [r0, #20]
    hAudioInButtomRightFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8001974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001978:	6183      	str	r3, [r0, #24]
    hAudioInButtomRightFilter.Init.FilterParam.SincOrder        = DFSDM_FILTER_ORDER(AudioFreq);
 800197a:	61c6      	str	r6, [r0, #28]
    hAudioInButtomRightFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 800197c:	6205      	str	r5, [r0, #32]
    hAudioInButtomRightFilter.Init.FilterParam.IntOversampling  = 1;
 800197e:	6242      	str	r2, [r0, #36]	; 0x24
    if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInButtomRightFilter))
 8001980:	f003 fcf4 	bl	800536c <HAL_DFSDM_FilterInit>
 8001984:	b108      	cbz	r0, 800198a <DFSDMx_Init+0x382>
      return AUDIO_ERROR;
 8001986:	2001      	movs	r0, #1
 8001988:	e6ff      	b.n	800178a <DFSDMx_Init+0x182>
    if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInButtomRightFilter, AUDIO_DFSDMx_BUTTOM_RIGHT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 800198a:	2201      	movs	r2, #1
 800198c:	490f      	ldr	r1, [pc, #60]	; (80019cc <DFSDMx_Init+0x3c4>)
 800198e:	480d      	ldr	r0, [pc, #52]	; (80019c4 <DFSDMx_Init+0x3bc>)
 8001990:	f003 fd98 	bl	80054c4 <HAL_DFSDM_FilterConfigRegChannel>
 8001994:	2800      	cmp	r0, #0
 8001996:	f43f aef8 	beq.w	800178a <DFSDMx_Init+0x182>
      return AUDIO_ERROR;
 800199a:	2001      	movs	r0, #1
 800199c:	e6f5      	b.n	800178a <DFSDMx_Init+0x182>
    return AUDIO_ERROR;
 800199e:	2001      	movs	r0, #1
 80019a0:	e6f3      	b.n	800178a <DFSDMx_Init+0x182>
      return AUDIO_ERROR;
 80019a2:	2001      	movs	r0, #1
 80019a4:	e6f1      	b.n	800178a <DFSDMx_Init+0x182>
    return AUDIO_ERROR;
 80019a6:	2001      	movs	r0, #1
 80019a8:	e6ef      	b.n	800178a <DFSDMx_Init+0x182>
 80019aa:	bf00      	nop
 80019ac:	20001f2c 	.word	0x20001f2c
 80019b0:	40017580 	.word	0x40017580
 80019b4:	20000030 	.word	0x20000030
 80019b8:	20001ea0 	.word	0x20001ea0
 80019bc:	40017600 	.word	0x40017600
 80019c0:	00050020 	.word	0x00050020
 80019c4:	20001b5c 	.word	0x20001b5c
 80019c8:	40017680 	.word	0x40017680
 80019cc:	00040010 	.word	0x00040010

080019d0 <DFSDMx_DeInit>:
{  
 80019d0:	b508      	push	{r3, lr}
  if(HAL_OK != HAL_DFSDM_FilterDeInit(&hAudioInTopLeftFilter))
 80019d2:	481a      	ldr	r0, [pc, #104]	; (8001a3c <DFSDMx_DeInit+0x6c>)
 80019d4:	f003 fd65 	bl	80054a2 <HAL_DFSDM_FilterDeInit>
 80019d8:	b108      	cbz	r0, 80019de <DFSDMx_DeInit+0xe>
    return AUDIO_ERROR;
 80019da:	2001      	movs	r0, #1
}
 80019dc:	bd08      	pop	{r3, pc}
  if(HAL_OK != HAL_DFSDM_FilterDeInit(&hAudioInTopRightFilter))
 80019de:	4818      	ldr	r0, [pc, #96]	; (8001a40 <DFSDMx_DeInit+0x70>)
 80019e0:	f003 fd5f 	bl	80054a2 <HAL_DFSDM_FilterDeInit>
 80019e4:	b108      	cbz	r0, 80019ea <DFSDMx_DeInit+0x1a>
    return AUDIO_ERROR;
 80019e6:	2001      	movs	r0, #1
 80019e8:	e7f8      	b.n	80019dc <DFSDMx_DeInit+0xc>
  if(HAL_OK != HAL_DFSDM_ChannelDeInit(&hAudioInTopLeftChannel))
 80019ea:	4816      	ldr	r0, [pc, #88]	; (8001a44 <DFSDMx_DeInit+0x74>)
 80019ec:	f003 fc8c 	bl	8005308 <HAL_DFSDM_ChannelDeInit>
 80019f0:	b108      	cbz	r0, 80019f6 <DFSDMx_DeInit+0x26>
    return AUDIO_ERROR;
 80019f2:	2001      	movs	r0, #1
 80019f4:	e7f2      	b.n	80019dc <DFSDMx_DeInit+0xc>
  if(HAL_OK != HAL_DFSDM_ChannelDeInit(&hAudioInTopRightChannel))
 80019f6:	4814      	ldr	r0, [pc, #80]	; (8001a48 <DFSDMx_DeInit+0x78>)
 80019f8:	f003 fc86 	bl	8005308 <HAL_DFSDM_ChannelDeInit>
 80019fc:	b9e0      	cbnz	r0, 8001a38 <DFSDMx_DeInit+0x68>
  if(AudioIn_ChannelNumber > 2)
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <DFSDMx_DeInit+0x7c>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d9ea      	bls.n	80019dc <DFSDMx_DeInit+0xc>
    if(HAL_OK != HAL_DFSDM_FilterDeInit(&hAudioInButtomLeftFilter))
 8001a06:	4812      	ldr	r0, [pc, #72]	; (8001a50 <DFSDMx_DeInit+0x80>)
 8001a08:	f003 fd4b 	bl	80054a2 <HAL_DFSDM_FilterDeInit>
 8001a0c:	b108      	cbz	r0, 8001a12 <DFSDMx_DeInit+0x42>
      return AUDIO_ERROR;
 8001a0e:	2001      	movs	r0, #1
 8001a10:	e7e4      	b.n	80019dc <DFSDMx_DeInit+0xc>
    if(HAL_OK != HAL_DFSDM_FilterDeInit(&hAudioInButtomRightFilter))
 8001a12:	4810      	ldr	r0, [pc, #64]	; (8001a54 <DFSDMx_DeInit+0x84>)
 8001a14:	f003 fd45 	bl	80054a2 <HAL_DFSDM_FilterDeInit>
 8001a18:	b108      	cbz	r0, 8001a1e <DFSDMx_DeInit+0x4e>
      return AUDIO_ERROR;
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	e7de      	b.n	80019dc <DFSDMx_DeInit+0xc>
    if(HAL_OK != HAL_DFSDM_ChannelDeInit(&hAudioInButtomLeftChannel))
 8001a1e:	480e      	ldr	r0, [pc, #56]	; (8001a58 <DFSDMx_DeInit+0x88>)
 8001a20:	f003 fc72 	bl	8005308 <HAL_DFSDM_ChannelDeInit>
 8001a24:	b108      	cbz	r0, 8001a2a <DFSDMx_DeInit+0x5a>
      return AUDIO_ERROR;
 8001a26:	2001      	movs	r0, #1
 8001a28:	e7d8      	b.n	80019dc <DFSDMx_DeInit+0xc>
    if(HAL_OK != HAL_DFSDM_ChannelDeInit(&hAudioInButtomRightChannel))
 8001a2a:	480c      	ldr	r0, [pc, #48]	; (8001a5c <DFSDMx_DeInit+0x8c>)
 8001a2c:	f003 fc6c 	bl	8005308 <HAL_DFSDM_ChannelDeInit>
 8001a30:	2800      	cmp	r0, #0
 8001a32:	d0d3      	beq.n	80019dc <DFSDMx_DeInit+0xc>
      return AUDIO_ERROR;
 8001a34:	2001      	movs	r0, #1
 8001a36:	e7d1      	b.n	80019dc <DFSDMx_DeInit+0xc>
    return AUDIO_ERROR;
 8001a38:	2001      	movs	r0, #1
 8001a3a:	e7cf      	b.n	80019dc <DFSDMx_DeInit+0xc>
 8001a3c:	20001d18 	.word	0x20001d18
 8001a40:	20001f2c 	.word	0x20001f2c
 8001a44:	20001e30 	.word	0x20001e30
 8001a48:	20001e68 	.word	0x20001e68
 8001a4c:	20000030 	.word	0x20000030
 8001a50:	20001ea0 	.word	0x20001ea0
 8001a54:	20001b5c 	.word	0x20001b5c
 8001a58:	20001f80 	.word	0x20001f80
 8001a5c:	20001ef4 	.word	0x20001ef4

08001a60 <BSP_AUDIO_OUT_Play>:
{
 8001a60:	b538      	push	{r3, r4, r5, lr}
 8001a62:	4605      	mov	r5, r0
 8001a64:	460c      	mov	r4, r1
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *)pBuffer, Size) != 0)
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <BSP_AUDIO_OUT_Play+0x48>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	b28a      	uxth	r2, r1
 8001a6e:	4601      	mov	r1, r0
 8001a70:	2034      	movs	r0, #52	; 0x34
 8001a72:	4798      	blx	r3
 8001a74:	b9b0      	cbnz	r0, 8001aa4 <BSP_AUDIO_OUT_Play+0x44>
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AudioOutResByte));
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <BSP_AUDIO_OUT_Play+0x4c>)
 8001a78:	785b      	ldrb	r3, [r3, #1]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	fbb4 f3f3 	udiv	r3, r4, r3
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a84:	d206      	bcs.n	8001a94 <BSP_AUDIO_OUT_Play+0x34>
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <BSP_AUDIO_OUT_Play+0x4c>)
 8001a88:	785a      	ldrb	r2, [r3, #1]
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	fbb4 f2f2 	udiv	r2, r4, r2
 8001a90:	b292      	uxth	r2, r2
 8001a92:	e001      	b.n	8001a98 <BSP_AUDIO_OUT_Play+0x38>
 8001a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a98:	4629      	mov	r1, r5
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <BSP_AUDIO_OUT_Play+0x50>)
 8001a9c:	f007 fc7a 	bl	8009394 <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
 8001aa0:	2000      	movs	r0, #0
}
 8001aa2:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	e7fc      	b.n	8001aa2 <BSP_AUDIO_OUT_Play+0x42>
 8001aa8:	20001dcc 	.word	0x20001dcc
 8001aac:	20000030 	.word	0x20000030
 8001ab0:	20001c94 	.word	0x20001c94

08001ab4 <BSP_AUDIO_OUT_ChangeBuffer>:
{
 8001ab4:	b508      	push	{r3, lr}
   HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pData, DMA_MAX(Size / AudioOutResByte));
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <BSP_AUDIO_OUT_ChangeBuffer+0x1c>)
 8001ab8:	785b      	ldrb	r3, [r3, #1]
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <BSP_AUDIO_OUT_ChangeBuffer+0x1c>)
 8001abc:	785a      	ldrb	r2, [r3, #1]
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	fb91 f2f2 	sdiv	r2, r1, r2
 8001ac4:	4601      	mov	r1, r0
 8001ac6:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <BSP_AUDIO_OUT_ChangeBuffer+0x20>)
 8001ac8:	f007 fc64 	bl	8009394 <HAL_SAI_Transmit_DMA>
}
 8001acc:	bd08      	pop	{r3, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000030 	.word	0x20000030
 8001ad4:	20001c94 	.word	0x20001c94

08001ad8 <BSP_AUDIO_OUT_Stop>:
{
 8001ad8:	b510      	push	{r4, lr}
 8001ada:	4604      	mov	r4, r0
  HAL_SAI_DMAStop(&haudio_out_sai);
 8001adc:	4809      	ldr	r0, [pc, #36]	; (8001b04 <BSP_AUDIO_OUT_Stop+0x2c>)
 8001ade:	f007 fc31 	bl	8009344 <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <BSP_AUDIO_OUT_Stop+0x30>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4621      	mov	r1, r4
 8001aea:	2034      	movs	r0, #52	; 0x34
 8001aec:	4798      	blx	r3
 8001aee:	b938      	cbnz	r0, 8001b00 <BSP_AUDIO_OUT_Stop+0x28>
    if(Option == CODEC_PDWN_HW)
 8001af0:	2c01      	cmp	r4, #1
 8001af2:	d001      	beq.n	8001af8 <BSP_AUDIO_OUT_Stop+0x20>
    return AUDIO_OK;
 8001af4:	2000      	movs	r0, #0
}
 8001af6:	bd10      	pop	{r4, pc}
      HAL_Delay(1);
 8001af8:	2001      	movs	r0, #1
 8001afa:	f003 fa57 	bl	8004fac <HAL_Delay>
 8001afe:	e7f9      	b.n	8001af4 <BSP_AUDIO_OUT_Stop+0x1c>
    return AUDIO_ERROR;
 8001b00:	2001      	movs	r0, #1
 8001b02:	e7f8      	b.n	8001af6 <BSP_AUDIO_OUT_Stop+0x1e>
 8001b04:	20001c94 	.word	0x20001c94
 8001b08:	20001dcc 	.word	0x20001dcc

08001b0c <BSP_AUDIO_OUT_SetVolume>:
{
 8001b0c:	b508      	push	{r3, lr}
 8001b0e:	4601      	mov	r1, r0
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <BSP_AUDIO_OUT_SetVolume+0x18>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	2034      	movs	r0, #52	; 0x34
 8001b18:	4798      	blx	r3
 8001b1a:	b108      	cbz	r0, 8001b20 <BSP_AUDIO_OUT_SetVolume+0x14>
    return AUDIO_ERROR;
 8001b1c:	2001      	movs	r0, #1
}
 8001b1e:	bd08      	pop	{r3, pc}
    return AUDIO_OK;
 8001b20:	2000      	movs	r0, #0
 8001b22:	e7fc      	b.n	8001b1e <BSP_AUDIO_OUT_SetVolume+0x12>
 8001b24:	20001dcc 	.word	0x20001dcc

08001b28 <BSP_AUDIO_OUT_SetMute>:
{ 
 8001b28:	b508      	push	{r3, lr}
 8001b2a:	4601      	mov	r1, r0
  if(audio_drv->SetMute(AUDIO_I2C_ADDRESS, Cmd) != 0)
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <BSP_AUDIO_OUT_SetMute+0x18>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	2034      	movs	r0, #52	; 0x34
 8001b34:	4798      	blx	r3
 8001b36:	b108      	cbz	r0, 8001b3c <BSP_AUDIO_OUT_SetMute+0x14>
    return AUDIO_ERROR;
 8001b38:	2001      	movs	r0, #1
}
 8001b3a:	bd08      	pop	{r3, pc}
    return AUDIO_OK;
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	e7fc      	b.n	8001b3a <BSP_AUDIO_OUT_SetMute+0x12>
 8001b40:	20001dcc 	.word	0x20001dcc

08001b44 <HAL_SAI_TxCpltCallback>:
{
 8001b44:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8001b46:	f00c f8d9 	bl	800dcfc <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8001b4a:	bd08      	pop	{r3, pc}

08001b4c <HAL_SAI_TxHalfCpltCallback>:
{
 8001b4c:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8001b4e:	f00c f957 	bl	800de00 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8001b52:	bd08      	pop	{r3, pc}

08001b54 <BSP_AUDIO_OUT_MspInit>:
{ 
 8001b54:	b570      	push	{r4, r5, r6, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	4606      	mov	r6, r0
 8001b5a:	460d      	mov	r5, r1
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001b5c:	4c41      	ldr	r4, [pc, #260]	; (8001c64 <BSP_AUDIO_OUT_MspInit+0x110>)
 8001b5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b64:	6463      	str	r3, [r4, #68]	; 0x44
 8001b66:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6c:	9301      	str	r3, [sp, #4]
 8001b6e:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8001b70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b76:	6323      	str	r3, [r4, #48]	; 0x30
 8001b78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7e:	9302      	str	r3, [sp, #8]
 8001b80:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 8001b82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b84:	f043 0310 	orr.w	r3, r3, #16
 8001b88:	6323      	str	r3, [r4, #48]	; 0x30
 8001b8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	9303      	str	r3, [sp, #12]
 8001b92:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 8001b94:	2370      	movs	r3, #112	; 0x70
 8001b96:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 8001ba4:	2306      	movs	r3, #6
 8001ba6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8001ba8:	a905      	add	r1, sp, #20
 8001baa:	482f      	ldr	r0, [pc, #188]	; (8001c68 <BSP_AUDIO_OUT_MspInit+0x114>)
 8001bac:	f004 f97e 	bl	8005eac <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8001bb4:	a905      	add	r1, sp, #20
 8001bb6:	482d      	ldr	r0, [pc, #180]	; (8001c6c <BSP_AUDIO_OUT_MspInit+0x118>)
 8001bb8:	f004 f978 	bl	8005eac <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001bbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bc2:	6323      	str	r3, [r4, #48]	; 0x30
 8001bc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bca:	9304      	str	r3, [sp, #16]
 8001bcc:	9b04      	ldr	r3, [sp, #16]
  resolution= (Params != NULL)? *((uint8_t*)Params):16;
 8001bce:	b175      	cbz	r5, 8001bee <BSP_AUDIO_OUT_MspInit+0x9a>
 8001bd0:	7829      	ldrb	r1, [r5, #0]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001bd2:	6832      	ldr	r2, [r6, #0]
 8001bd4:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <BSP_AUDIO_OUT_MspInit+0x11c>)
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d00b      	beq.n	8001bf2 <BSP_AUDIO_OUT_MspInit+0x9e>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2102      	movs	r1, #2
 8001bde:	2039      	movs	r0, #57	; 0x39
 8001be0:	f003 fa04 	bl	8004fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8001be4:	2039      	movs	r0, #57	; 0x39
 8001be6:	f003 fa33 	bl	8005050 <HAL_NVIC_EnableIRQ>
}
 8001bea:	b00a      	add	sp, #40	; 0x28
 8001bec:	bd70      	pop	{r4, r5, r6, pc}
  resolution= (Params != NULL)? *((uint8_t*)Params):16;
 8001bee:	2110      	movs	r1, #16
 8001bf0:	e7ef      	b.n	8001bd2 <BSP_AUDIO_OUT_MspInit+0x7e>
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <BSP_AUDIO_OUT_MspInit+0x120>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	665a      	str	r2, [r3, #100]	; 0x64
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001bf8:	2040      	movs	r0, #64	; 0x40
 8001bfa:	6698      	str	r0, [r3, #104]	; 0x68
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001bfc:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001bfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c02:	671a      	str	r2, [r3, #112]	; 0x70
    if(resolution == 24)
 8001c04:	2918      	cmp	r1, #24
 8001c06:	d025      	beq.n	8001c54 <BSP_AUDIO_OUT_MspInit+0x100>
      hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE_16;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <BSP_AUDIO_OUT_MspInit+0x120>)
 8001c0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c0e:	675a      	str	r2, [r3, #116]	; 0x74
      hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE_16;
 8001c10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c14:	679a      	str	r2, [r3, #120]	; 0x78
    hdma_sai_tx.Init.Mode                = DMA_NORMAL;
 8001c16:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <BSP_AUDIO_OUT_MspInit+0x120>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001c1c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001c20:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001c24:	2104      	movs	r1, #4
 8001c26:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001c2a:	2103      	movs	r1, #3
 8001c2c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001c30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001c34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001c38:	461c      	mov	r4, r3
 8001c3a:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <BSP_AUDIO_OUT_MspInit+0x124>)
 8001c3c:	f844 2f60 	str.w	r2, [r4, #96]!
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001c40:	66f4      	str	r4, [r6, #108]	; 0x6c
 8001c42:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001c46:	4620      	mov	r0, r4
 8001c48:	f003 fdce 	bl	80057e8 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f003 fd65 	bl	800571c <HAL_DMA_Init>
 8001c52:	e7c2      	b.n	8001bda <BSP_AUDIO_OUT_MspInit+0x86>
      hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE_24;
 8001c54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c58:	675a      	str	r2, [r3, #116]	; 0x74
      hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE_24;
 8001c5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c5e:	679a      	str	r2, [r3, #120]	; 0x78
 8001c60:	e7d9      	b.n	8001c16 <BSP_AUDIO_OUT_MspInit+0xc2>
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40021800 	.word	0x40021800
 8001c70:	40015804 	.word	0x40015804
 8001c74:	2000032c 	.word	0x2000032c
 8001c78:	40026428 	.word	0x40026428

08001c7c <BSP_AUDIO_OUT_MspDeInit>:
{
 8001c7c:	b510      	push	{r4, lr}
 8001c7e:	4604      	mov	r4, r0
    HAL_NVIC_DisableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8001c80:	2039      	movs	r0, #57	; 0x39
 8001c82:	f003 f9f1 	bl	8005068 <HAL_NVIC_DisableIRQ>
    if(hsai->Instance == AUDIO_OUT_SAIx)
 8001c86:	6822      	ldr	r2, [r4, #0]
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <BSP_AUDIO_OUT_MspDeInit+0x40>)
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d012      	beq.n	8001cb4 <BSP_AUDIO_OUT_MspDeInit+0x38>
    __HAL_SAI_DISABLE(hsai);  
 8001c8e:	6822      	ldr	r2, [r4, #0]
 8001c90:	6813      	ldr	r3, [r2, #0]
 8001c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c96:	6013      	str	r3, [r2, #0]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, gpio_init_structure.Pin);
 8001c98:	2170      	movs	r1, #112	; 0x70
 8001c9a:	4809      	ldr	r0, [pc, #36]	; (8001cc0 <BSP_AUDIO_OUT_MspDeInit+0x44>)
 8001c9c:	f004 f9f6 	bl	800608c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, gpio_init_structure.Pin);
 8001ca0:	2180      	movs	r1, #128	; 0x80
 8001ca2:	4808      	ldr	r0, [pc, #32]	; (8001cc4 <BSP_AUDIO_OUT_MspDeInit+0x48>)
 8001ca4:	f004 f9f2 	bl	800608c <HAL_GPIO_DeInit>
    AUDIO_OUT_SAIx_CLK_DISABLE();
 8001ca8:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <BSP_AUDIO_OUT_MspDeInit+0x4c>)
 8001caa:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001cac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001cb0:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001cb2:	bd10      	pop	{r4, pc}
      HAL_DMA_DeInit(hsai->hdmatx);
 8001cb4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001cb6:	f003 fd97 	bl	80057e8 <HAL_DMA_DeInit>
 8001cba:	e7e8      	b.n	8001c8e <BSP_AUDIO_OUT_MspDeInit+0x12>
 8001cbc:	40015804 	.word	0x40015804
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40021800 	.word	0x40021800
 8001cc8:	40023800 	.word	0x40023800

08001ccc <BSP_AUDIO_OUT_DeInit>:
{
 8001ccc:	b508      	push	{r3, lr}
  SAIx_Out_DeInit();
 8001cce:	f7ff f9bb 	bl	8001048 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_MspDeInit(&haudio_out_sai, NULL);
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4801      	ldr	r0, [pc, #4]	; (8001cdc <BSP_AUDIO_OUT_DeInit+0x10>)
 8001cd6:	f7ff ffd1 	bl	8001c7c <BSP_AUDIO_OUT_MspDeInit>
}
 8001cda:	bd08      	pop	{r3, pc}
 8001cdc:	20001c94 	.word	0x20001c94

08001ce0 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8001ce0:	b510      	push	{r4, lr}
 8001ce2:	b0a4      	sub	sp, #144	; 0x90
 8001ce4:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001ce6:	4668      	mov	r0, sp
 8001ce8:	f006 ffce 	bl	8008c88 <HAL_RCCEx_GetPeriphCLKConfig>
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8001cec:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001cf0:	f245 6322 	movw	r3, #22050	; 0x5622
 8001cf4:	429c      	cmp	r4, r3
 8001cf6:	bf18      	it	ne
 8001cf8:	4294      	cmpne	r4, r2
 8001cfa:	d003      	beq.n	8001d04 <BSP_AUDIO_OUT_ClockConfig+0x24>
 8001cfc:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001d00:	429c      	cmp	r4, r3
 8001d02:	d111      	bne.n	8001d28 <BSP_AUDIO_OUT_ClockConfig+0x48>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001d04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001d08:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8001d0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d0e:	930f      	str	r3, [sp, #60]	; 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8001d10:	f240 13ad 	movw	r3, #429	; 0x1ad
 8001d14:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8001d16:	2302      	movs	r3, #2
 8001d18:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8001d1a:	2313      	movs	r3, #19
 8001d1c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001d1e:	4668      	mov	r0, sp
 8001d20:	f006 fbb0 	bl	8008484 <HAL_RCCEx_PeriphCLKConfig>
}
 8001d24:	b024      	add	sp, #144	; 0x90
 8001d26:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001d28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001d2c:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8001d2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d32:	930f      	str	r3, [sp, #60]	; 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344; 
 8001d34:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001d38:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
 8001d3e:	2301      	movs	r3, #1
 8001d40:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001d42:	4668      	mov	r0, sp
 8001d44:	f006 fb9e 	bl	8008484 <HAL_RCCEx_PeriphCLKConfig>
}
 8001d48:	e7ec      	b.n	8001d24 <BSP_AUDIO_OUT_ClockConfig+0x44>
	...

08001d4c <BSP_AUDIO_OUT_Init_Ext>:
{ 
 8001d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	4606      	mov	r6, r0
 8001d52:	460f      	mov	r7, r1
 8001d54:	4614      	mov	r4, r2
 8001d56:	f88d 300f 	strb.w	r3, [sp, #15]
  SAIx_Out_DeInit();
 8001d5a:	f7ff f975 	bl	8001048 <SAIx_Out_DeInit>
  AudioOutResBit = AudioResolution;
 8001d5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001d62:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <BSP_AUDIO_OUT_Init_Ext+0x94>)
 8001d64:	7093      	strb	r3, [r2, #2]
  if(AudioResolution == 16)
 8001d66:	2b10      	cmp	r3, #16
 8001d68:	d01e      	beq.n	8001da8 <BSP_AUDIO_OUT_Init_Ext+0x5c>
    AudioOutResByte = 4;
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <BSP_AUDIO_OUT_Init_Ext+0x94>)
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	705a      	strb	r2, [r3, #1]
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8001d70:	4d1c      	ldr	r5, [pc, #112]	; (8001de4 <BSP_AUDIO_OUT_Init_Ext+0x98>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	4621      	mov	r1, r4
 8001d76:	4628      	mov	r0, r5
 8001d78:	f7ff ffb2 	bl	8001ce0 <BSP_AUDIO_OUT_ClockConfig>
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <BSP_AUDIO_OUT_Init_Ext+0x9c>)
 8001d7e:	602b      	str	r3, [r5, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001d80:	4628      	mov	r0, r5
 8001d82:	f007 fc38 	bl	80095f6 <HAL_SAI_GetState>
 8001d86:	b198      	cbz	r0, 8001db0 <BSP_AUDIO_OUT_Init_Ext+0x64>
  SAIx_Out_Init_Ext(AudioFreq, AudioResolution);
 8001d88:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	f7ff f985 	bl	800109c <SAIx_Out_Init_Ext>
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001d92:	4b16      	ldr	r3, [pc, #88]	; (8001dec <BSP_AUDIO_OUT_Init_Ext+0xa0>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2034      	movs	r0, #52	; 0x34
 8001d98:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
 8001d9a:	f648 1394 	movw	r3, #35220	; 0x8994
 8001d9e:	4298      	cmp	r0, r3
 8001da0:	d00c      	beq.n	8001dbc <BSP_AUDIO_OUT_Init_Ext+0x70>
    ret = AUDIO_ERROR;
 8001da2:	2001      	movs	r0, #1
}
 8001da4:	b005      	add	sp, #20
 8001da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    AudioOutResByte = 2;
 8001da8:	4613      	mov	r3, r2
 8001daa:	2202      	movs	r2, #2
 8001dac:	705a      	strb	r2, [r3, #1]
 8001dae:	e7df      	b.n	8001d70 <BSP_AUDIO_OUT_Init_Ext+0x24>
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, (void*)(&AudioResolution));
 8001db0:	f10d 010f 	add.w	r1, sp, #15
 8001db4:	4628      	mov	r0, r5
 8001db6:	f7ff fecd 	bl	8001b54 <BSP_AUDIO_OUT_MspInit>
 8001dba:	e7e5      	b.n	8001d88 <BSP_AUDIO_OUT_Init_Ext+0x3c>
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8001dbc:	4d0b      	ldr	r5, [pc, #44]	; (8001dec <BSP_AUDIO_OUT_Init_Ext+0xa0>)
 8001dbe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001dc0:	2034      	movs	r0, #52	; 0x34
 8001dc2:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <BSP_AUDIO_OUT_Init_Ext+0xa4>)
 8001dc6:	601d      	str	r5, [r3, #0]
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq,AudioOutResBit);
 8001dc8:	682d      	ldr	r5, [r5, #0]
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <BSP_AUDIO_OUT_Init_Ext+0x94>)
 8001dcc:	789b      	ldrb	r3, [r3, #2]
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	4623      	mov	r3, r4
 8001dd2:	463a      	mov	r2, r7
 8001dd4:	4631      	mov	r1, r6
 8001dd6:	2034      	movs	r0, #52	; 0x34
 8001dd8:	47a8      	blx	r5
    ret = AUDIO_OK;
 8001dda:	2000      	movs	r0, #0
 8001ddc:	e7e2      	b.n	8001da4 <BSP_AUDIO_OUT_Init_Ext+0x58>
 8001dde:	bf00      	nop
 8001de0:	20000030 	.word	0x20000030
 8001de4:	20001c94 	.word	0x20001c94
 8001de8:	40015804 	.word	0x40015804
 8001dec:	20000000 	.word	0x20000000
 8001df0:	20001dcc 	.word	0x20001dcc

08001df4 <BSP_AUDIO_OUT_SetFrequency>:
{ 
 8001df4:	b538      	push	{r3, r4, r5, lr}
 8001df6:	4604      	mov	r4, r0
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8001df8:	4d0d      	ldr	r5, [pc, #52]	; (8001e30 <BSP_AUDIO_OUT_SetFrequency+0x3c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	4601      	mov	r1, r0
 8001dfe:	4628      	mov	r0, r5
 8001e00:	f7ff ff6e 	bl	8001ce0 <BSP_AUDIO_OUT_ClockConfig>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001e04:	682a      	ldr	r2, [r5, #0]
 8001e06:	6813      	ldr	r3, [r2, #0]
 8001e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0c:	6013      	str	r3, [r2, #0]
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001e0e:	61ec      	str	r4, [r5, #28]
  HAL_SAI_Init(&haudio_out_sai);
 8001e10:	4628      	mov	r0, r5
 8001e12:	f007 f971 	bl	80090f8 <HAL_SAI_Init>
  if(audio_drv->SetFrequency(AUDIO_I2C_ADDRESS, AudioFreq) != 0)
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <BSP_AUDIO_OUT_SetFrequency+0x40>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	4621      	mov	r1, r4
 8001e1e:	2034      	movs	r0, #52	; 0x34
 8001e20:	4798      	blx	r3
 8001e22:	b920      	cbnz	r0, 8001e2e <BSP_AUDIO_OUT_SetFrequency+0x3a>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001e24:	682a      	ldr	r2, [r5, #0]
 8001e26:	6813      	ldr	r3, [r2, #0]
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
}
 8001e2e:	bd38      	pop	{r3, r4, r5, pc}
 8001e30:	20001c94 	.word	0x20001c94
 8001e34:	20001dcc 	.word	0x20001dcc

08001e38 <BSP_AUDIO_IN_AllocScratch>:
{ 
 8001e38:	b410      	push	{r4}
  ScratchSize = (size / AudioIn_ChannelNumber);
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <BSP_AUDIO_IN_AllocScratch+0x38>)
 8001e3c:	781c      	ldrb	r4, [r3, #0]
 8001e3e:	fbb1 f1f4 	udiv	r1, r1, r4
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <BSP_AUDIO_IN_AllocScratch+0x3c>)
 8001e44:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  for (idx = 0; idx < AudioIn_ChannelNumber; idx++)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	e00b      	b.n	8001e64 <BSP_AUDIO_IN_AllocScratch+0x2c>
    pScratchBuff[idx] = (int32_t *)(pScratch + (idx * ScratchSize));
 8001e4c:	4909      	ldr	r1, [pc, #36]	; (8001e74 <BSP_AUDIO_IN_AllocScratch+0x3c>)
 8001e4e:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001e5a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8001e5e:	f8c1 30c4 	str.w	r3, [r1, #196]	; 0xc4
  for (idx = 0; idx < AudioIn_ChannelNumber; idx++)
 8001e62:	3201      	adds	r2, #1
 8001e64:	4294      	cmp	r4, r2
 8001e66:	d8f1      	bhi.n	8001e4c <BSP_AUDIO_IN_AllocScratch+0x14>
}
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	20000030 	.word	0x20000030
 8001e74:	2000032c 	.word	0x2000032c

08001e78 <BSP_AUDIO_IN_Record>:
{  
 8001e78:	b508      	push	{r3, lr}
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <BSP_AUDIO_IN_Record+0x80>)
 8001e7c:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 8001e80:	bb73      	cbnz	r3, 8001ee0 <BSP_AUDIO_IN_Record+0x68>
    if(AudioIn_ChannelNumber > 2)
 8001e82:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <BSP_AUDIO_IN_Record+0x84>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d913      	bls.n	8001eb2 <BSP_AUDIO_IN_Record+0x3a>
      if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInButtomRightFilter, pScratchBuff[2], ScratchSize))
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <BSP_AUDIO_IN_Record+0x80>)
 8001e8c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e90:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8001e94:	481a      	ldr	r0, [pc, #104]	; (8001f00 <BSP_AUDIO_IN_Record+0x88>)
 8001e96:	f003 fb3d 	bl	8005514 <HAL_DFSDM_FilterRegularStart_DMA>
 8001e9a:	b108      	cbz	r0, 8001ea0 <BSP_AUDIO_IN_Record+0x28>
        return AUDIO_ERROR;
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	e012      	b.n	8001ec6 <BSP_AUDIO_IN_Record+0x4e>
      if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInButtomLeftFilter, pScratchBuff[3], ScratchSize))
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <BSP_AUDIO_IN_Record+0x80>)
 8001ea2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001ea6:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 8001eaa:	4816      	ldr	r0, [pc, #88]	; (8001f04 <BSP_AUDIO_IN_Record+0x8c>)
 8001eac:	f003 fb32 	bl	8005514 <HAL_DFSDM_FilterRegularStart_DMA>
 8001eb0:	b9f8      	cbnz	r0, 8001ef2 <BSP_AUDIO_IN_Record+0x7a>
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInTopRightFilter, pScratchBuff[0], ScratchSize))
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <BSP_AUDIO_IN_Record+0x80>)
 8001eb4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001eb8:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8001ebc:	4812      	ldr	r0, [pc, #72]	; (8001f08 <BSP_AUDIO_IN_Record+0x90>)
 8001ebe:	f003 fb29 	bl	8005514 <HAL_DFSDM_FilterRegularStart_DMA>
 8001ec2:	b108      	cbz	r0, 8001ec8 <BSP_AUDIO_IN_Record+0x50>
      return AUDIO_ERROR;
 8001ec4:	2001      	movs	r0, #1
}
 8001ec6:	bd08      	pop	{r3, pc}
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInTopLeftFilter, pScratchBuff[1], ScratchSize))
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <BSP_AUDIO_IN_Record+0x80>)
 8001eca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001ece:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 8001ed2:	480e      	ldr	r0, [pc, #56]	; (8001f0c <BSP_AUDIO_IN_Record+0x94>)
 8001ed4:	f003 fb1e 	bl	8005514 <HAL_DFSDM_FilterRegularStart_DMA>
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	d0f4      	beq.n	8001ec6 <BSP_AUDIO_IN_Record+0x4e>
      return AUDIO_ERROR;
 8001edc:	2001      	movs	r0, #1
 8001ede:	e7f2      	b.n	8001ec6 <BSP_AUDIO_IN_Record+0x4e>
    if(HAL_OK !=HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size))
 8001ee0:	b28a      	uxth	r2, r1
 8001ee2:	4601      	mov	r1, r0
 8001ee4:	480a      	ldr	r0, [pc, #40]	; (8001f10 <BSP_AUDIO_IN_Record+0x98>)
 8001ee6:	f007 fab9 	bl	800945c <HAL_SAI_Receive_DMA>
 8001eea:	2800      	cmp	r0, #0
 8001eec:	d0eb      	beq.n	8001ec6 <BSP_AUDIO_IN_Record+0x4e>
      return AUDIO_ERROR;
 8001eee:	2001      	movs	r0, #1
 8001ef0:	e7e9      	b.n	8001ec6 <BSP_AUDIO_IN_Record+0x4e>
        return AUDIO_ERROR;
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	e7e7      	b.n	8001ec6 <BSP_AUDIO_IN_Record+0x4e>
 8001ef6:	bf00      	nop
 8001ef8:	2000032c 	.word	0x2000032c
 8001efc:	20000030 	.word	0x20000030
 8001f00:	20001b5c 	.word	0x20001b5c
 8001f04:	20001ea0 	.word	0x20001ea0
 8001f08:	20001f2c 	.word	0x20001f2c
 8001f0c:	20001d18 	.word	0x20001d18
 8001f10:	20001bb0 	.word	0x20001bb0

08001f14 <BSP_AUDIO_IN_Stop>:
{
 8001f14:	b508      	push	{r3, lr}
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 8001f16:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <BSP_AUDIO_IN_Stop+0x68>)
 8001f18:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 8001f1c:	b9d3      	cbnz	r3, 8001f54 <BSP_AUDIO_IN_Stop+0x40>
    if(AudioIn_ChannelNumber > 2)
 8001f1e:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <BSP_AUDIO_IN_Stop+0x6c>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d909      	bls.n	8001f3a <BSP_AUDIO_IN_Stop+0x26>
      if(HAL_OK != HAL_DFSDM_FilterRegularStop_DMA(&hAudioInButtomRightFilter))
 8001f26:	4817      	ldr	r0, [pc, #92]	; (8001f84 <BSP_AUDIO_IN_Stop+0x70>)
 8001f28:	f003 fb4e 	bl	80055c8 <HAL_DFSDM_FilterRegularStop_DMA>
 8001f2c:	b108      	cbz	r0, 8001f32 <BSP_AUDIO_IN_Stop+0x1e>
        return AUDIO_ERROR;
 8001f2e:	2001      	movs	r0, #1
 8001f30:	e008      	b.n	8001f44 <BSP_AUDIO_IN_Stop+0x30>
      if(HAL_OK != HAL_DFSDM_FilterRegularStop_DMA(&hAudioInButtomLeftFilter))
 8001f32:	4815      	ldr	r0, [pc, #84]	; (8001f88 <BSP_AUDIO_IN_Stop+0x74>)
 8001f34:	f003 fb48 	bl	80055c8 <HAL_DFSDM_FilterRegularStop_DMA>
 8001f38:	b9e8      	cbnz	r0, 8001f76 <BSP_AUDIO_IN_Stop+0x62>
    if(HAL_OK != HAL_DFSDM_FilterRegularStop_DMA(&hAudioInTopRightFilter))
 8001f3a:	4814      	ldr	r0, [pc, #80]	; (8001f8c <BSP_AUDIO_IN_Stop+0x78>)
 8001f3c:	f003 fb44 	bl	80055c8 <HAL_DFSDM_FilterRegularStop_DMA>
 8001f40:	b108      	cbz	r0, 8001f46 <BSP_AUDIO_IN_Stop+0x32>
      return AUDIO_ERROR;
 8001f42:	2001      	movs	r0, #1
}
 8001f44:	bd08      	pop	{r3, pc}
    if(HAL_OK != HAL_DFSDM_FilterRegularStop_DMA(&hAudioInTopLeftFilter))
 8001f46:	4812      	ldr	r0, [pc, #72]	; (8001f90 <BSP_AUDIO_IN_Stop+0x7c>)
 8001f48:	f003 fb3e 	bl	80055c8 <HAL_DFSDM_FilterRegularStop_DMA>
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	d0f9      	beq.n	8001f44 <BSP_AUDIO_IN_Stop+0x30>
      return AUDIO_ERROR;
 8001f50:	2001      	movs	r0, #1
 8001f52:	e7f7      	b.n	8001f44 <BSP_AUDIO_IN_Stop+0x30>
    HAL_SAI_DMAStop(&haudio_in_sai);
 8001f54:	480f      	ldr	r0, [pc, #60]	; (8001f94 <BSP_AUDIO_IN_Stop+0x80>)
 8001f56:	f007 f9f5 	bl	8009344 <HAL_SAI_DMAStop>
    if(audio_drv->Stop(AUDIO_I2C_ADDRESS, CODEC_PDWN_HW) != 0)
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <BSP_AUDIO_IN_Stop+0x84>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	2101      	movs	r1, #1
 8001f62:	2034      	movs	r0, #52	; 0x34
 8001f64:	4798      	blx	r3
 8001f66:	b108      	cbz	r0, 8001f6c <BSP_AUDIO_IN_Stop+0x58>
      return AUDIO_ERROR;
 8001f68:	2001      	movs	r0, #1
 8001f6a:	e7eb      	b.n	8001f44 <BSP_AUDIO_IN_Stop+0x30>
      HAL_Delay(1);
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f003 f81d 	bl	8004fac <HAL_Delay>
      return AUDIO_OK;
 8001f72:	2000      	movs	r0, #0
 8001f74:	e7e6      	b.n	8001f44 <BSP_AUDIO_IN_Stop+0x30>
        return AUDIO_ERROR;
 8001f76:	2001      	movs	r0, #1
 8001f78:	e7e4      	b.n	8001f44 <BSP_AUDIO_IN_Stop+0x30>
 8001f7a:	bf00      	nop
 8001f7c:	2000032c 	.word	0x2000032c
 8001f80:	20000030 	.word	0x20000030
 8001f84:	20001b5c 	.word	0x20001b5c
 8001f88:	20001ea0 	.word	0x20001ea0
 8001f8c:	20001f2c 	.word	0x20001f2c
 8001f90:	20001d18 	.word	0x20001d18
 8001f94:	20001bb0 	.word	0x20001bb0
 8001f98:	20001dcc 	.word	0x20001dcc

08001f9c <BSP_AUDIO_IN_Get_PcmBuffer>:
{
 8001f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if( res == 2)
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d002      	beq.n	8001fa8 <BSP_AUDIO_IN_Get_PcmBuffer+0xc>
    for(int i = 0, j = ScratchOffset; j < (ScratchOffset + sample_count); j++)
 8001fa2:	4616      	mov	r6, r2
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	e05f      	b.n	8002068 <BSP_AUDIO_IN_Get_PcmBuffer+0xcc>
    for(int i = 0, j = ScratchOffset; j < (ScratchOffset + sample_count); j++)
 8001fa8:	4617      	mov	r7, r2
 8001faa:	2300      	movs	r3, #0
 8001fac:	e01e      	b.n	8001fec <BSP_AUDIO_IN_Get_PcmBuffer+0x50>
      pbuf16[i++] = (uint16_t)(SaturaLH((pScratchBuff[1][j] >> 8), -32760, 32760));
 8001fae:	f248 0408 	movw	r4, #32776	; 0x8008
 8001fb2:	1c5e      	adds	r6, r3, #1
 8001fb4:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
      pbuf16[i++] = (uint16_t)(SaturaLH((pScratchBuff[0][j] >> 8), -32760, 32760));
 8001fb8:	4c35      	ldr	r4, [pc, #212]	; (8002090 <BSP_AUDIO_IN_Get_PcmBuffer+0xf4>)
 8001fba:	f8d4 40c4 	ldr.w	r4, [r4, #196]	; 0xc4
 8001fbe:	f854 500c 	ldr.w	r5, [r4, ip]
 8001fc2:	122c      	asrs	r4, r5, #8
 8001fc4:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8002094 <BSP_AUDIO_IN_Get_PcmBuffer+0xf8>
 8001fc8:	ebbc 2f25 	cmp.w	ip, r5, asr #8
 8001fcc:	dc08      	bgt.n	8001fe0 <BSP_AUDIO_IN_Get_PcmBuffer+0x44>
 8001fce:	f647 75f8 	movw	r5, #32760	; 0x7ff8
 8001fd2:	42ac      	cmp	r4, r5
 8001fd4:	dc1f      	bgt.n	8002016 <BSP_AUDIO_IN_Get_PcmBuffer+0x7a>
 8001fd6:	b2a4      	uxth	r4, r4
 8001fd8:	e004      	b.n	8001fe4 <BSP_AUDIO_IN_Get_PcmBuffer+0x48>
      pbuf16[i++] = (uint16_t)(SaturaLH((pScratchBuff[1][j] >> 8), -32760, 32760));
 8001fda:	f647 74f8 	movw	r4, #32760	; 0x7ff8
 8001fde:	e7e8      	b.n	8001fb2 <BSP_AUDIO_IN_Get_PcmBuffer+0x16>
      pbuf16[i++] = (uint16_t)(SaturaLH((pScratchBuff[0][j] >> 8), -32760, 32760));
 8001fe0:	f248 0408 	movw	r4, #32776	; 0x8008
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	f820 4016 	strh.w	r4, [r0, r6, lsl #1]
    for(int i = 0, j = ScratchOffset; j < (ScratchOffset + sample_count); j++)
 8001fea:	3201      	adds	r2, #1
 8001fec:	19cc      	adds	r4, r1, r7
 8001fee:	4294      	cmp	r4, r2
 8001ff0:	dd4c      	ble.n	800208c <BSP_AUDIO_IN_Get_PcmBuffer+0xf0>
      pbuf16[i++] = (uint16_t)(SaturaLH((pScratchBuff[1][j] >> 8), -32760, 32760));
 8001ff2:	4c27      	ldr	r4, [pc, #156]	; (8002090 <BSP_AUDIO_IN_Get_PcmBuffer+0xf4>)
 8001ff4:	f8d4 40c8 	ldr.w	r4, [r4, #200]	; 0xc8
 8001ff8:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8001ffc:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
 8002000:	122c      	asrs	r4, r5, #8
 8002002:	4e24      	ldr	r6, [pc, #144]	; (8002094 <BSP_AUDIO_IN_Get_PcmBuffer+0xf8>)
 8002004:	ebb6 2f25 	cmp.w	r6, r5, asr #8
 8002008:	dcd1      	bgt.n	8001fae <BSP_AUDIO_IN_Get_PcmBuffer+0x12>
 800200a:	f647 75f8 	movw	r5, #32760	; 0x7ff8
 800200e:	42ac      	cmp	r4, r5
 8002010:	dce3      	bgt.n	8001fda <BSP_AUDIO_IN_Get_PcmBuffer+0x3e>
 8002012:	b2a4      	uxth	r4, r4
 8002014:	e7cd      	b.n	8001fb2 <BSP_AUDIO_IN_Get_PcmBuffer+0x16>
      pbuf16[i++] = (uint16_t)(SaturaLH((pScratchBuff[0][j] >> 8), -32760, 32760));
 8002016:	f647 74f8 	movw	r4, #32760	; 0x7ff8
 800201a:	e7e3      	b.n	8001fe4 <BSP_AUDIO_IN_Get_PcmBuffer+0x48>
      sample = (uint32_t)(SaturaLH((pScratchBuff[1][j] ), -8388600, 8388600));
 800201c:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <BSP_AUDIO_IN_Get_PcmBuffer+0xfc>)
      pbuf[i++] =(sample)&0xFF;
 800201e:	1c67      	adds	r7, r4, #1
 8002020:	5503      	strb	r3, [r0, r4]
      pbuf[i++] =(sample>>8)&0xFF;
 8002022:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8002026:	1ca5      	adds	r5, r4, #2
 8002028:	f800 c007 	strb.w	ip, [r0, r7]
      pbuf[i++] =(sample>>16)&0xFF;
 800202c:	0c1b      	lsrs	r3, r3, #16
 800202e:	f104 0c03 	add.w	ip, r4, #3
 8002032:	5543      	strb	r3, [r0, r5]
      sample = (uint32_t)(SaturaLH((pScratchBuff[0][j] ), -8388600, 8388600));
 8002034:	4b16      	ldr	r3, [pc, #88]	; (8002090 <BSP_AUDIO_IN_Get_PcmBuffer+0xf4>)
 8002036:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800203a:	f853 300e 	ldr.w	r3, [r3, lr]
 800203e:	4d16      	ldr	r5, [pc, #88]	; (8002098 <BSP_AUDIO_IN_Get_PcmBuffer+0xfc>)
 8002040:	42ab      	cmp	r3, r5
 8002042:	db04      	blt.n	800204e <BSP_AUDIO_IN_Get_PcmBuffer+0xb2>
 8002044:	4d15      	ldr	r5, [pc, #84]	; (800209c <BSP_AUDIO_IN_Get_PcmBuffer+0x100>)
 8002046:	42ab      	cmp	r3, r5
 8002048:	bfa8      	it	ge
 800204a:	462b      	movge	r3, r5
 800204c:	e000      	b.n	8002050 <BSP_AUDIO_IN_Get_PcmBuffer+0xb4>
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <BSP_AUDIO_IN_Get_PcmBuffer+0xfc>)
      pbuf[i++] =(sample)&0xFF;
 8002050:	1d27      	adds	r7, r4, #4
 8002052:	f800 300c 	strb.w	r3, [r0, ip]
      pbuf[i++] =(sample>>8)&0xFF;
 8002056:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 800205a:	1d65      	adds	r5, r4, #5
 800205c:	f800 c007 	strb.w	ip, [r0, r7]
      pbuf[i++] =(sample>>16)&0xFF;   
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	5543      	strb	r3, [r0, r5]
 8002064:	3406      	adds	r4, #6
    for(int i = 0, j = ScratchOffset; j < (ScratchOffset + sample_count); j++)
 8002066:	3201      	adds	r2, #1
 8002068:	198b      	adds	r3, r1, r6
 800206a:	4293      	cmp	r3, r2
 800206c:	dd0e      	ble.n	800208c <BSP_AUDIO_IN_Get_PcmBuffer+0xf0>
      sample = (uint32_t)(SaturaLH((pScratchBuff[1][j] ), -8388600, 8388600));
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <BSP_AUDIO_IN_Get_PcmBuffer+0xf4>)
 8002070:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002074:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8002078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207c:	4d06      	ldr	r5, [pc, #24]	; (8002098 <BSP_AUDIO_IN_Get_PcmBuffer+0xfc>)
 800207e:	42ab      	cmp	r3, r5
 8002080:	dbcc      	blt.n	800201c <BSP_AUDIO_IN_Get_PcmBuffer+0x80>
 8002082:	4d06      	ldr	r5, [pc, #24]	; (800209c <BSP_AUDIO_IN_Get_PcmBuffer+0x100>)
 8002084:	42ab      	cmp	r3, r5
 8002086:	bfa8      	it	ge
 8002088:	462b      	movge	r3, r5
 800208a:	e7c8      	b.n	800201e <BSP_AUDIO_IN_Get_PcmBuffer+0x82>
}
 800208c:	2000      	movs	r0, #0
 800208e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002090:	2000032c 	.word	0x2000032c
 8002094:	ffff8008 	.word	0xffff8008
 8002098:	ff800008 	.word	0xff800008
 800209c:	007ffff8 	.word	0x007ffff8

080020a0 <HAL_DFSDM_FilterRegConvCpltCallback>:
{
 80020a0:	b508      	push	{r3, lr}
  if(hdfsdm_filter == &hAudioInTopLeftFilter)
 80020a2:	4b2a      	ldr	r3, [pc, #168]	; (800214c <HAL_DFSDM_FilterRegConvCpltCallback+0xac>)
 80020a4:	4298      	cmp	r0, r3
 80020a6:	d013      	beq.n	80020d0 <HAL_DFSDM_FilterRegConvCpltCallback+0x30>
  else if(hdfsdm_filter == &hAudioInTopRightFilter)
 80020a8:	4b29      	ldr	r3, [pc, #164]	; (8002150 <HAL_DFSDM_FilterRegConvCpltCallback+0xb0>)
 80020aa:	4298      	cmp	r0, r3
 80020ac:	d015      	beq.n	80020da <HAL_DFSDM_FilterRegConvCpltCallback+0x3a>
  else if(hdfsdm_filter == &hAudioInButtomLeftFilter)
 80020ae:	4b29      	ldr	r3, [pc, #164]	; (8002154 <HAL_DFSDM_FilterRegConvCpltCallback+0xb4>)
 80020b0:	4298      	cmp	r0, r3
 80020b2:	d017      	beq.n	80020e4 <HAL_DFSDM_FilterRegConvCpltCallback+0x44>
    DmaButtomRightRecCplt = 1;
 80020b4:	4b28      	ldr	r3, [pc, #160]	; (8002158 <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  if(AudioIn_ChannelNumber > 2)
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_DFSDM_FilterRegConvCpltCallback+0xbc>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d930      	bls.n	8002126 <HAL_DFSDM_FilterRegConvCpltCallback+0x86>
    if((DmaTopLeftRecCplt == 1) && (DmaTopRightRecCplt == 1) && (DmaButtomLeftRecCplt == 1) && (DmaButtomRightRecCplt == 1))
 80020c4:	4b24      	ldr	r3, [pc, #144]	; (8002158 <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>)
 80020c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d00f      	beq.n	80020ee <HAL_DFSDM_FilterRegConvCpltCallback+0x4e>
}
 80020ce:	bd08      	pop	{r3, pc}
    DmaTopLeftRecCplt = 1;
 80020d0:	4b21      	ldr	r3, [pc, #132]	; (8002158 <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80020d8:	e7f0      	b.n	80020bc <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>
    DmaTopRightRecCplt = 1;
 80020da:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>)
 80020dc:	2201      	movs	r2, #1
 80020de:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80020e2:	e7eb      	b.n	80020bc <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>
    DmaButtomLeftRecCplt = 1;
 80020e4:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80020ec:	e7e6      	b.n	80020bc <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>
    if((DmaTopLeftRecCplt == 1) && (DmaTopRightRecCplt == 1) && (DmaButtomLeftRecCplt == 1) && (DmaButtomRightRecCplt == 1))
 80020ee:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>)
 80020f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d1ea      	bne.n	80020ce <HAL_DFSDM_FilterRegConvCpltCallback+0x2e>
 80020f8:	4b17      	ldr	r3, [pc, #92]	; (8002158 <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>)
 80020fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d1e5      	bne.n	80020ce <HAL_DFSDM_FilterRegConvCpltCallback+0x2e>
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>)
 8002104:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002108:	2b01      	cmp	r3, #1
 800210a:	d1e0      	bne.n	80020ce <HAL_DFSDM_FilterRegConvCpltCallback+0x2e>
      DmaTopLeftRecCplt  = 0;
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>)
 800210e:	2200      	movs	r2, #0
 8002110:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      DmaTopRightRecCplt = 0;
 8002114:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
      DmaButtomLeftRecCplt  = 0;
 8002118:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
      DmaButtomRightRecCplt = 0;  
 800211c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
      BSP_AUDIO_IN_TransferComplete_CallBack();
 8002120:	f00b fcce 	bl	800dac0 <BSP_AUDIO_IN_TransferComplete_CallBack>
 8002124:	e7d3      	b.n	80020ce <HAL_DFSDM_FilterRegConvCpltCallback+0x2e>
    if((DmaTopLeftRecCplt == 1) && (DmaTopRightRecCplt == 1))
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>)
 8002128:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800212c:	2b01      	cmp	r3, #1
 800212e:	d1ce      	bne.n	80020ce <HAL_DFSDM_FilterRegConvCpltCallback+0x2e>
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>)
 8002132:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002136:	2b01      	cmp	r3, #1
 8002138:	d1c9      	bne.n	80020ce <HAL_DFSDM_FilterRegConvCpltCallback+0x2e>
      DmaTopLeftRecCplt  = 0;
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>)
 800213c:	2200      	movs	r2, #0
 800213e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      DmaTopRightRecCplt = 0;  
 8002142:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
      BSP_AUDIO_IN_TransferComplete_CallBack();
 8002146:	f00b fcbb 	bl	800dac0 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800214a:	e7c0      	b.n	80020ce <HAL_DFSDM_FilterRegConvCpltCallback+0x2e>
 800214c:	20001d18 	.word	0x20001d18
 8002150:	20001f2c 	.word	0x20001f2c
 8002154:	20001ea0 	.word	0x20001ea0
 8002158:	2000032c 	.word	0x2000032c
 800215c:	20000030 	.word	0x20000030

08002160 <HAL_SAI_RxCpltCallback>:
{
 8002160:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002162:	f00b fcad 	bl	800dac0 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002166:	bd08      	pop	{r3, pc}

08002168 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
{
 8002168:	b508      	push	{r3, lr}
  if(hdfsdm_filter == &hAudioInTopLeftFilter)
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xac>)
 800216c:	4298      	cmp	r0, r3
 800216e:	d013      	beq.n	8002198 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x30>
  else if(hdfsdm_filter == &hAudioInTopRightFilter)
 8002170:	4b29      	ldr	r3, [pc, #164]	; (8002218 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb0>)
 8002172:	4298      	cmp	r0, r3
 8002174:	d015      	beq.n	80021a2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x3a>
  else if(hdfsdm_filter == &hAudioInButtomLeftFilter)
 8002176:	4b29      	ldr	r3, [pc, #164]	; (800221c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb4>)
 8002178:	4298      	cmp	r0, r3
 800217a:	d017      	beq.n	80021ac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x44>
    DmaButtomRightRecHalfCplt = 1;
 800217c:	4b28      	ldr	r3, [pc, #160]	; (8002220 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>)
 800217e:	2201      	movs	r2, #1
 8002180:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  if(AudioIn_ChannelNumber > 2)
 8002184:	4b27      	ldr	r3, [pc, #156]	; (8002224 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xbc>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d930      	bls.n	80021ee <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x86>
    if((DmaTopLeftRecHalfCplt == 1) && (DmaTopRightRecHalfCplt == 1) && (DmaButtomLeftRecHalfCplt == 1) && (DmaButtomRightRecHalfCplt == 1))
 800218c:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>)
 800218e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002192:	2b01      	cmp	r3, #1
 8002194:	d00f      	beq.n	80021b6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4e>
}
 8002196:	bd08      	pop	{r3, pc}
    DmaTopLeftRecHalfCplt = 1;
 8002198:	4b21      	ldr	r3, [pc, #132]	; (8002220 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>)
 800219a:	2201      	movs	r2, #1
 800219c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80021a0:	e7f0      	b.n	8002184 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>
    DmaTopRightRecHalfCplt = 1;
 80021a2:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 80021aa:	e7eb      	b.n	8002184 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>
    DmaButtomLeftRecHalfCplt = 1;
 80021ac:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80021b4:	e7e6      	b.n	8002184 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>
    if((DmaTopLeftRecHalfCplt == 1) && (DmaTopRightRecHalfCplt == 1) && (DmaButtomLeftRecHalfCplt == 1) && (DmaButtomRightRecHalfCplt == 1))
 80021b6:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>)
 80021b8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d1ea      	bne.n	8002196 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2e>
 80021c0:	4b17      	ldr	r3, [pc, #92]	; (8002220 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>)
 80021c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d1e5      	bne.n	8002196 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2e>
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>)
 80021cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d1e0      	bne.n	8002196 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2e>
      DmaTopLeftRecHalfCplt  = 0;
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
      DmaTopRightRecHalfCplt = 0;
 80021dc:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
      DmaButtomLeftRecHalfCplt  = 0;
 80021e0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
      DmaButtomRightRecHalfCplt = 0;  
 80021e4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
      BSP_AUDIO_IN_HalfTransfer_CallBack();
 80021e8:	f00b fc5c 	bl	800daa4 <BSP_AUDIO_IN_HalfTransfer_CallBack>
 80021ec:	e7d3      	b.n	8002196 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2e>
    if((DmaTopLeftRecHalfCplt == 1) && (DmaTopRightRecHalfCplt == 1))
 80021ee:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>)
 80021f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d1ce      	bne.n	8002196 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2e>
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>)
 80021fa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d1c9      	bne.n	8002196 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2e>
      DmaTopLeftRecHalfCplt  = 0;
 8002202:	4b07      	ldr	r3, [pc, #28]	; (8002220 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>)
 8002204:	2200      	movs	r2, #0
 8002206:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
      DmaTopRightRecHalfCplt = 0;  
 800220a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
      BSP_AUDIO_IN_HalfTransfer_CallBack();
 800220e:	f00b fc49 	bl	800daa4 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8002212:	e7c0      	b.n	8002196 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2e>
 8002214:	20001d18 	.word	0x20001d18
 8002218:	20001f2c 	.word	0x20001f2c
 800221c:	20001ea0 	.word	0x20001ea0
 8002220:	2000032c 	.word	0x2000032c
 8002224:	20000030 	.word	0x20000030

08002228 <HAL_SAI_RxHalfCpltCallback>:
{
 8002228:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 800222a:	f00b fc3b 	bl	800daa4 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 800222e:	bd08      	pop	{r3, pc}

08002230 <BSP_AUDIO_IN_Error_CallBack>:
}
 8002230:	4770      	bx	lr
	...

08002234 <HAL_SAI_ErrorCallback>:
{
 8002234:	b508      	push	{r3, lr}
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8002236:	6802      	ldr	r2, [r0, #0]
 8002238:	4b04      	ldr	r3, [pc, #16]	; (800224c <HAL_SAI_ErrorCallback+0x18>)
 800223a:	429a      	cmp	r2, r3
 800223c:	d002      	beq.n	8002244 <HAL_SAI_ErrorCallback+0x10>
    BSP_AUDIO_IN_Error_CallBack();
 800223e:	f7ff fff7 	bl	8002230 <BSP_AUDIO_IN_Error_CallBack>
}
 8002242:	bd08      	pop	{r3, pc}
  BSP_AUDIO_OUT_Error_CallBack();
 8002244:	f00b fd56 	bl	800dcf4 <BSP_AUDIO_OUT_Error_CallBack>
 8002248:	e7fb      	b.n	8002242 <HAL_SAI_ErrorCallback+0xe>
 800224a:	bf00      	nop
 800224c:	40015804 	.word	0x40015804

08002250 <BSP_AUDIO_IN_MspInit>:
{ 
 8002250:	b508      	push	{r3, lr}
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <BSP_AUDIO_IN_MspInit+0x20>)
 8002254:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 8002258:	b923      	cbnz	r3, 8002264 <BSP_AUDIO_IN_MspInit+0x14>
  DFSDMx_ChannelMspInit();  
 800225a:	f7fe ffe5 	bl	8001228 <DFSDMx_ChannelMspInit>
  DFSDMx_FilterMspInit();
 800225e:	f7ff f849 	bl	80012f4 <DFSDMx_FilterMspInit>
}
 8002262:	bd08      	pop	{r3, pc}
   SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL); 
 8002264:	2100      	movs	r1, #0
 8002266:	4803      	ldr	r0, [pc, #12]	; (8002274 <BSP_AUDIO_IN_MspInit+0x24>)
 8002268:	f7ff f900 	bl	800146c <SAI_AUDIO_IN_MspInit>
}
 800226c:	e7f9      	b.n	8002262 <BSP_AUDIO_IN_MspInit+0x12>
 800226e:	bf00      	nop
 8002270:	2000032c 	.word	0x2000032c
 8002274:	20001bb0 	.word	0x20001bb0

08002278 <BSP_AUDIO_IN_MspDeInit>:
{
 8002278:	b508      	push	{r3, lr}
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <BSP_AUDIO_IN_MspDeInit+0x20>)
 800227c:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 8002280:	b923      	cbnz	r3, 800228c <BSP_AUDIO_IN_MspDeInit+0x14>
    DFSDMx_ChannelMspDeInit();  
 8002282:	f7ff f979 	bl	8001578 <DFSDMx_ChannelMspDeInit>
    DFSDMx_FilterMspDeInit();
 8002286:	f7ff f817 	bl	80012b8 <DFSDMx_FilterMspDeInit>
}
 800228a:	bd08      	pop	{r3, pc}
    SAI_AUDIO_IN_MspDeInit(&haudio_in_sai, NULL); 
 800228c:	2100      	movs	r1, #0
 800228e:	4803      	ldr	r0, [pc, #12]	; (800229c <BSP_AUDIO_IN_MspDeInit+0x24>)
 8002290:	f7ff f990 	bl	80015b4 <SAI_AUDIO_IN_MspDeInit>
}
 8002294:	e7f9      	b.n	800228a <BSP_AUDIO_IN_MspDeInit+0x12>
 8002296:	bf00      	nop
 8002298:	2000032c 	.word	0x2000032c
 800229c:	20001bb0 	.word	0x20001bb0

080022a0 <BSP_AUDIO_IN_DeInit>:
{
 80022a0:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_MspDeInit();
 80022a2:	f7ff ffe9 	bl	8002278 <BSP_AUDIO_IN_MspDeInit>
  if(AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <BSP_AUDIO_IN_DeInit+0x1c>)
 80022a8:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 80022ac:	b913      	cbnz	r3, 80022b4 <BSP_AUDIO_IN_DeInit+0x14>
    DFSDMx_DeInit();
 80022ae:	f7ff fb8f 	bl	80019d0 <DFSDMx_DeInit>
}
 80022b2:	bd08      	pop	{r3, pc}
    SAIx_In_DeInit();
 80022b4:	f7fe fed8 	bl	8001068 <SAIx_In_DeInit>
}
 80022b8:	e7fb      	b.n	80022b2 <BSP_AUDIO_IN_DeInit+0x12>
 80022ba:	bf00      	nop
 80022bc:	2000032c 	.word	0x2000032c

080022c0 <BSP_AUDIO_IN_ClockConfig>:
{ 
 80022c0:	b510      	push	{r4, lr}
 80022c2:	b0a4      	sub	sp, #144	; 0x90
 80022c4:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80022c6:	4668      	mov	r0, sp
 80022c8:	f006 fcde 	bl	8008c88 <HAL_RCCEx_GetPeriphCLKConfig>
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 80022cc:	f642 3211 	movw	r2, #11025	; 0x2b11
 80022d0:	f245 6322 	movw	r3, #22050	; 0x5622
 80022d4:	429c      	cmp	r4, r3
 80022d6:	bf18      	it	ne
 80022d8:	4294      	cmpne	r4, r2
 80022da:	d003      	beq.n	80022e4 <BSP_AUDIO_IN_ClockConfig+0x24>
 80022dc:	f64a 4344 	movw	r3, #44100	; 0xac44
 80022e0:	429c      	cmp	r4, r3
 80022e2:	d119      	bne.n	8002318 <BSP_AUDIO_IN_ClockConfig+0x58>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80022e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022e8:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80022ea:	2300      	movs	r3, #0
 80022ec:	9310      	str	r3, [sp, #64]	; 0x40
    rcc_ex_clk_init_struct.PLLSAI.PLLSAIN = 429;
 80022ee:	f240 13ad 	movw	r3, #429	; 0x1ad
 80022f2:	9305      	str	r3, [sp, #20]
    rcc_ex_clk_init_struct.PLLSAI.PLLSAIQ = 2;
 80022f4:	2302      	movs	r3, #2
 80022f6:	9306      	str	r3, [sp, #24]
    rcc_ex_clk_init_struct.PLLSAIDivQ = 19;
 80022f8:	2313      	movs	r3, #19
 80022fa:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80022fc:	4668      	mov	r0, sp
 80022fe:	f006 f8c1 	bl	8008484 <HAL_RCCEx_PeriphCLKConfig>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1_AUDIO;
 8002302:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002306:	9300      	str	r3, [sp, #0]
  rcc_ex_clk_init_struct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 8002308:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800230c:	9323      	str	r3, [sp, #140]	; 0x8c
  HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct); 
 800230e:	4668      	mov	r0, sp
 8002310:	f006 f8b8 	bl	8008484 <HAL_RCCEx_PeriphCLKConfig>
}
 8002314:	b024      	add	sp, #144	; 0x90
 8002316:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002318:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800231c:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800231e:	2300      	movs	r3, #0
 8002320:	9310      	str	r3, [sp, #64]	; 0x40
    rcc_ex_clk_init_struct.PLLSAI.PLLSAIN = 344; 
 8002322:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8002326:	9305      	str	r3, [sp, #20]
    rcc_ex_clk_init_struct.PLLSAI.PLLSAIQ = 7; 
 8002328:	2307      	movs	r3, #7
 800232a:	9306      	str	r3, [sp, #24]
    rcc_ex_clk_init_struct.PLLSAIDivQ = 1;      
 800232c:	2301      	movs	r3, #1
 800232e:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002330:	4668      	mov	r0, sp
 8002332:	f006 f8a7 	bl	8008484 <HAL_RCCEx_PeriphCLKConfig>
 8002336:	e7e4      	b.n	8002302 <BSP_AUDIO_IN_ClockConfig+0x42>

08002338 <BSP_AUDIO_IN_InitEx>:
{ 
 8002338:	b570      	push	{r4, r5, r6, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	460d      	mov	r5, r1
  AudioIn_Device = InputDevice;
 800233e:	4a22      	ldr	r2, [pc, #136]	; (80023c8 <BSP_AUDIO_IN_InitEx+0x90>)
 8002340:	f8a2 00d4 	strh.w	r0, [r2, #212]	; 0xd4
  if(InputDevice == INPUT_DEVICE_DIGITAL_MIC)
 8002344:	b968      	cbnz	r0, 8002362 <BSP_AUDIO_IN_InitEx+0x2a>
    AudioIn_ChannelNumber = ChnlNbr;
 8002346:	4a21      	ldr	r2, [pc, #132]	; (80023cc <BSP_AUDIO_IN_InitEx+0x94>)
 8002348:	7013      	strb	r3, [r2, #0]
    BSP_AUDIO_IN_ClockConfig(&hAudioInTopLeftFilter, AudioFreq, NULL);
 800234a:	2200      	movs	r2, #0
 800234c:	4820      	ldr	r0, [pc, #128]	; (80023d0 <BSP_AUDIO_IN_InitEx+0x98>)
 800234e:	f7ff ffb7 	bl	80022c0 <BSP_AUDIO_IN_ClockConfig>
    BSP_AUDIO_IN_MspInit();
 8002352:	f7ff ff7d 	bl	8002250 <BSP_AUDIO_IN_MspInit>
    DFSDMx_Init(AudioFreq);
 8002356:	4628      	mov	r0, r5
 8002358:	f7ff f956 	bl	8001608 <DFSDMx_Init>
    ret = AUDIO_OK;
 800235c:	2000      	movs	r0, #0
}
 800235e:	b002      	add	sp, #8
 8002360:	bd70      	pop	{r4, r5, r6, pc}
 8002362:	4604      	mov	r4, r0
    SAIx_In_DeInit();
 8002364:	f7fe fe80 	bl	8001068 <SAIx_In_DeInit>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL);
 8002368:	4e1a      	ldr	r6, [pc, #104]	; (80023d4 <BSP_AUDIO_IN_InitEx+0x9c>)
 800236a:	2200      	movs	r2, #0
 800236c:	4629      	mov	r1, r5
 800236e:	4630      	mov	r0, r6
 8002370:	f7ff fcb6 	bl	8001ce0 <BSP_AUDIO_OUT_ClockConfig>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002374:	4b18      	ldr	r3, [pc, #96]	; (80023d8 <BSP_AUDIO_IN_InitEx+0xa0>)
 8002376:	6033      	str	r3, [r6, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8002378:	4630      	mov	r0, r6
 800237a:	f007 f93c 	bl	80095f6 <HAL_SAI_GetState>
 800237e:	b160      	cbz	r0, 800239a <BSP_AUDIO_IN_InitEx+0x62>
    SAIx_In_Init(AudioFreq);
 8002380:	4628      	mov	r0, r5
 8002382:	f7fe fed5 	bl	8001130 <SAIx_In_Init>
    if((wm8994_drv.ReadID(AUDIO_I2C_ADDRESS)) == WM8994_ID)
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <BSP_AUDIO_IN_InitEx+0xa4>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2034      	movs	r0, #52	; 0x34
 800238c:	4798      	blx	r3
 800238e:	f648 1394 	movw	r3, #35220	; 0x8994
 8002392:	4298      	cmp	r0, r3
 8002394:	d008      	beq.n	80023a8 <BSP_AUDIO_IN_InitEx+0x70>
      ret = AUDIO_ERROR;
 8002396:	2001      	movs	r0, #1
 8002398:	e7e1      	b.n	800235e <BSP_AUDIO_IN_InitEx+0x26>
    BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);
 800239a:	2100      	movs	r1, #0
 800239c:	4630      	mov	r0, r6
 800239e:	f7ff fbd9 	bl	8001b54 <BSP_AUDIO_OUT_MspInit>
    BSP_AUDIO_IN_MspInit();
 80023a2:	f7ff ff55 	bl	8002250 <BSP_AUDIO_IN_MspInit>
 80023a6:	e7eb      	b.n	8002380 <BSP_AUDIO_IN_InitEx+0x48>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 80023a8:	4e0c      	ldr	r6, [pc, #48]	; (80023dc <BSP_AUDIO_IN_InitEx+0xa4>)
 80023aa:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80023ac:	2034      	movs	r0, #52	; 0x34
 80023ae:	4798      	blx	r3
      audio_drv = &wm8994_drv;
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <BSP_AUDIO_IN_InitEx+0xa8>)
 80023b2:	601e      	str	r6, [r3, #0]
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq,16);
 80023b4:	6836      	ldr	r6, [r6, #0]
 80023b6:	2310      	movs	r3, #16
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	462b      	mov	r3, r5
 80023bc:	2264      	movs	r2, #100	; 0x64
 80023be:	4621      	mov	r1, r4
 80023c0:	2034      	movs	r0, #52	; 0x34
 80023c2:	47b0      	blx	r6
      ret = AUDIO_OK;
 80023c4:	2000      	movs	r0, #0
 80023c6:	e7ca      	b.n	800235e <BSP_AUDIO_IN_InitEx+0x26>
 80023c8:	2000032c 	.word	0x2000032c
 80023cc:	20000030 	.word	0x20000030
 80023d0:	20001d18 	.word	0x20001d18
 80023d4:	20001bb0 	.word	0x20001bb0
 80023d8:	40015824 	.word	0x40015824
 80023dc:	20000000 	.word	0x20000000
 80023e0:	20001dcc 	.word	0x20001dcc

080023e4 <BSP_AUDIO_IN_Init>:
{ 
 80023e4:	b508      	push	{r3, lr}
 80023e6:	4613      	mov	r3, r2
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MIC, AudioFreq, BitRes, ChnlNbr);
 80023e8:	460a      	mov	r2, r1
 80023ea:	4601      	mov	r1, r0
 80023ec:	2000      	movs	r0, #0
 80023ee:	f7ff ffa3 	bl	8002338 <BSP_AUDIO_IN_InitEx>
}
 80023f2:	bd08      	pop	{r3, pc}

080023f4 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80023f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f6:	b083      	sub	sp, #12
 80023f8:	4604      	mov	r4, r0
 80023fa:	460d      	mov	r5, r1
 80023fc:	4616      	mov	r6, r2
 80023fe:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8002400:	4811      	ldr	r0, [pc, #68]	; (8002448 <LL_FillBuffer+0x54>)
 8002402:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002406:	6043      	str	r3, [r0, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8002408:	2300      	movs	r3, #0
 800240a:	6083      	str	r3, [r0, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 800240c:	9b08      	ldr	r3, [sp, #32]
 800240e:	60c3      	str	r3, [r0, #12]

  hdma2d_discovery.Instance = DMA2D;
 8002410:	4b0e      	ldr	r3, [pc, #56]	; (800244c <LL_FillBuffer+0x58>)
 8002412:	6003      	str	r3, [r0, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8002414:	f003 fbe4 	bl	8005be0 <HAL_DMA2D_Init>
 8002418:	b108      	cbz	r0, 800241e <LL_FillBuffer+0x2a>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
      }
    }
  }
}
 800241a:	b003      	add	sp, #12
 800241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 800241e:	4621      	mov	r1, r4
 8002420:	4809      	ldr	r0, [pc, #36]	; (8002448 <LL_FillBuffer+0x54>)
 8002422:	f003 fcd3 	bl	8005dcc <HAL_DMA2D_ConfigLayer>
 8002426:	2800      	cmp	r0, #0
 8002428:	d1f7      	bne.n	800241a <LL_FillBuffer+0x26>
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800242a:	9700      	str	r7, [sp, #0]
 800242c:	4633      	mov	r3, r6
 800242e:	462a      	mov	r2, r5
 8002430:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002432:	4805      	ldr	r0, [pc, #20]	; (8002448 <LL_FillBuffer+0x54>)
 8002434:	f003 fc0e 	bl	8005c54 <HAL_DMA2D_Start>
 8002438:	2800      	cmp	r0, #0
 800243a:	d1ee      	bne.n	800241a <LL_FillBuffer+0x26>
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 800243c:	210a      	movs	r1, #10
 800243e:	4802      	ldr	r0, [pc, #8]	; (8002448 <LL_FillBuffer+0x54>)
 8002440:	f003 fc24 	bl	8005c8c <HAL_DMA2D_PollForTransfer>
}
 8002444:	e7e9      	b.n	800241a <LL_FillBuffer+0x26>
 8002446:	bf00      	nop
 8002448:	20002018 	.word	0x20002018
 800244c:	4002b000 	.word	0x4002b000

08002450 <BSP_LCD_GetXSize>:
}
 8002450:	4b01      	ldr	r3, [pc, #4]	; (8002458 <BSP_LCD_GetXSize+0x8>)
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000034 	.word	0x20000034

0800245c <BSP_LCD_GetYSize>:
}
 800245c:	4b01      	ldr	r3, [pc, #4]	; (8002464 <BSP_LCD_GetYSize+0x8>)
 800245e:	6858      	ldr	r0, [r3, #4]
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000034 	.word	0x20000034

08002468 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <BSP_LCD_SetTextColor+0x10>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002470:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002474:	6058      	str	r0, [r3, #4]
}
 8002476:	4770      	bx	lr
 8002478:	20000424 	.word	0x20000424

0800247c <BSP_LCD_Clear>:
{
 800247c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800247e:	b083      	sub	sp, #12
 8002480:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <BSP_LCD_Clear+0x34>)
 8002484:	681e      	ldr	r6, [r3, #0]
 8002486:	4a0b      	ldr	r2, [pc, #44]	; (80024b4 <BSP_LCD_Clear+0x38>)
 8002488:	2334      	movs	r3, #52	; 0x34
 800248a:	fb03 2306 	mla	r3, r3, r6, r2
 800248e:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8002490:	f7ff ffde 	bl	8002450 <BSP_LCD_GetXSize>
 8002494:	4604      	mov	r4, r0
 8002496:	f7ff ffe1 	bl	800245c <BSP_LCD_GetYSize>
 800249a:	4603      	mov	r3, r0
 800249c:	9501      	str	r5, [sp, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	9200      	str	r2, [sp, #0]
 80024a2:	4622      	mov	r2, r4
 80024a4:	4639      	mov	r1, r7
 80024a6:	4630      	mov	r0, r6
 80024a8:	f7ff ffa4 	bl	80023f4 <LL_FillBuffer>
}
 80024ac:	b003      	add	sp, #12
 80024ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024b0:	20000424 	.word	0x20000424
 80024b4:	20002070 	.word	0x20002070

080024b8 <BSP_LCD_DrawHLine>:
{
 80024b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024bc:	b083      	sub	sp, #12
 80024be:	4680      	mov	r8, r0
 80024c0:	460c      	mov	r4, r1
 80024c2:	4617      	mov	r7, r2
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80024c4:	4e0e      	ldr	r6, [pc, #56]	; (8002500 <BSP_LCD_DrawHLine+0x48>)
 80024c6:	6835      	ldr	r5, [r6, #0]
 80024c8:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <BSP_LCD_DrawHLine+0x4c>)
 80024ca:	2334      	movs	r3, #52	; 0x34
 80024cc:	fb03 2305 	mla	r3, r3, r5, r2
 80024d0:	f8d3 905c 	ldr.w	r9, [r3, #92]	; 0x5c
 80024d4:	f7ff ffbc 	bl	8002450 <BSP_LCD_GetXSize>
 80024d8:	fb00 8104 	mla	r1, r0, r4, r8
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80024dc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80024e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	2300      	movs	r3, #0
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2301      	movs	r3, #1
 80024ee:	463a      	mov	r2, r7
 80024f0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80024f4:	4628      	mov	r0, r5
 80024f6:	f7ff ff7d 	bl	80023f4 <LL_FillBuffer>
}
 80024fa:	b003      	add	sp, #12
 80024fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002500:	20000424 	.word	0x20000424
 8002504:	20002070 	.word	0x20002070

08002508 <BSP_LCD_DrawVLine>:
{
 8002508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800250c:	b083      	sub	sp, #12
 800250e:	4681      	mov	r9, r0
 8002510:	460c      	mov	r4, r1
 8002512:	4616      	mov	r6, r2
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002514:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8002558 <BSP_LCD_DrawVLine+0x50>
 8002518:	f8d8 5000 	ldr.w	r5, [r8]
 800251c:	4a0d      	ldr	r2, [pc, #52]	; (8002554 <BSP_LCD_DrawVLine+0x4c>)
 800251e:	2334      	movs	r3, #52	; 0x34
 8002520:	fb03 2305 	mla	r3, r3, r5, r2
 8002524:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8002526:	f7ff ff93 	bl	8002450 <BSP_LCD_GetXSize>
 800252a:	fb00 9104 	mla	r1, r0, r4, r9
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800252e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8002532:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	3801      	subs	r0, #1
 800253c:	9000      	str	r0, [sp, #0]
 800253e:	4633      	mov	r3, r6
 8002540:	2201      	movs	r2, #1
 8002542:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8002546:	4628      	mov	r0, r5
 8002548:	f7ff ff54 	bl	80023f4 <LL_FillBuffer>
}
 800254c:	b003      	add	sp, #12
 800254e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002552:	bf00      	nop
 8002554:	20002070 	.word	0x20002070
 8002558:	20000424 	.word	0x20000424

0800255c <BSP_LCD_DrawRect>:
{
 800255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255e:	4604      	mov	r4, r0
 8002560:	460d      	mov	r5, r1
 8002562:	4617      	mov	r7, r2
 8002564:	461e      	mov	r6, r3
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8002566:	f7ff ffa7 	bl	80024b8 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 800256a:	19a9      	adds	r1, r5, r6
 800256c:	463a      	mov	r2, r7
 800256e:	b289      	uxth	r1, r1
 8002570:	4620      	mov	r0, r4
 8002572:	f7ff ffa1 	bl	80024b8 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8002576:	4632      	mov	r2, r6
 8002578:	4629      	mov	r1, r5
 800257a:	4620      	mov	r0, r4
 800257c:	f7ff ffc4 	bl	8002508 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8002580:	19e0      	adds	r0, r4, r7
 8002582:	4632      	mov	r2, r6
 8002584:	4629      	mov	r1, r5
 8002586:	b280      	uxth	r0, r0
 8002588:	f7ff ffbe 	bl	8002508 <BSP_LCD_DrawVLine>
}
 800258c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002590 <BSP_LCD_FillRect>:
{
 8002590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	4682      	mov	sl, r0
 8002598:	460d      	mov	r5, r1
 800259a:	4617      	mov	r7, r2
 800259c:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800259e:	4c13      	ldr	r4, [pc, #76]	; (80025ec <BSP_LCD_FillRect+0x5c>)
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80025a6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80025aa:	6858      	ldr	r0, [r3, #4]
 80025ac:	f7ff ff5c 	bl	8002468 <BSP_LCD_SetTextColor>
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80025b0:	6826      	ldr	r6, [r4, #0]
 80025b2:	4a0f      	ldr	r2, [pc, #60]	; (80025f0 <BSP_LCD_FillRect+0x60>)
 80025b4:	2334      	movs	r3, #52	; 0x34
 80025b6:	fb03 2306 	mla	r3, r3, r6, r2
 80025ba:	f8d3 905c 	ldr.w	r9, [r3, #92]	; 0x5c
 80025be:	f7ff ff47 	bl	8002450 <BSP_LCD_GetXSize>
 80025c2:	fb00 a105 	mla	r1, r0, r5, sl
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80025c6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80025ca:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80025ce:	6863      	ldr	r3, [r4, #4]
 80025d0:	9301      	str	r3, [sp, #4]
 80025d2:	1bc0      	subs	r0, r0, r7
 80025d4:	9000      	str	r0, [sp, #0]
 80025d6:	4643      	mov	r3, r8
 80025d8:	463a      	mov	r2, r7
 80025da:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80025de:	4630      	mov	r0, r6
 80025e0:	f7ff ff08 	bl	80023f4 <LL_FillBuffer>
}
 80025e4:	b002      	add	sp, #8
 80025e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025ea:	bf00      	nop
 80025ec:	20000424 	.word	0x20000424
 80025f0:	20002070 	.word	0x20002070

080025f4 <BSP_LCD_DrawPixel>:
{
 80025f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f6:	4606      	mov	r6, r0
 80025f8:	460c      	mov	r4, r1
 80025fa:	4615      	mov	r5, r2
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <BSP_LCD_DrawPixel+0x24>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a06      	ldr	r2, [pc, #24]	; (800261c <BSP_LCD_DrawPixel+0x28>)
 8002602:	2134      	movs	r1, #52	; 0x34
 8002604:	fb01 2303 	mla	r3, r1, r3, r2
 8002608:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 800260a:	f7ff ff21 	bl	8002450 <BSP_LCD_GetXSize>
 800260e:	fb00 6004 	mla	r0, r0, r4, r6
 8002612:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
}
 8002616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002618:	20000424 	.word	0x20000424
 800261c:	20002070 	.word	0x20002070

08002620 <DrawChar>:
{
 8002620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002624:	b083      	sub	sp, #12
 8002626:	4681      	mov	r9, r0
 8002628:	460e      	mov	r6, r1
 800262a:	9200      	str	r2, [sp, #0]
  height = DrawProp[ActiveLayer].pFont->Height;
 800262c:	4b33      	ldr	r3, [pc, #204]	; (80026fc <DrawChar+0xdc>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002634:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	88da      	ldrh	r2, [r3, #6]
 800263c:	9201      	str	r2, [sp, #4]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800263e:	889d      	ldrh	r5, [r3, #4]
  offset =  8 *((width + 7)/8) -  width ;
 8002640:	f105 0b07 	add.w	fp, r5, #7
 8002644:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8002648:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 800264c:	fa5f f888 	uxtb.w	r8, r8
 8002650:	b2eb      	uxtb	r3, r5
 8002652:	eba8 0803 	sub.w	r8, r8, r3
 8002656:	fa5f f888 	uxtb.w	r8, r8
  for(i = 0; i < height; i++)
 800265a:	f04f 0a00 	mov.w	sl, #0
 800265e:	e033      	b.n	80026c8 <DrawChar+0xa8>
      line =  pchar[0];
 8002660:	9a00      	ldr	r2, [sp, #0]
 8002662:	5cd7      	ldrb	r7, [r2, r3]
    for (j = 0; j < width; j++)
 8002664:	2400      	movs	r4, #0
 8002666:	e013      	b.n	8002690 <DrawChar+0x70>
      line =  (pchar[0]<< 8) | pchar[1];
 8002668:	9900      	ldr	r1, [sp, #0]
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	7857      	ldrb	r7, [r2, #1]
 800266e:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      break;
 8002672:	e7f7      	b.n	8002664 <DrawChar+0x44>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002674:	4b21      	ldr	r3, [pc, #132]	; (80026fc <DrawChar+0xdc>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800267c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002680:	eb09 0004 	add.w	r0, r9, r4
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	4631      	mov	r1, r6
 8002688:	b280      	uxth	r0, r0
 800268a:	f7ff ffb3 	bl	80025f4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800268e:	3401      	adds	r4, #1
 8002690:	42a5      	cmp	r5, r4
 8002692:	d915      	bls.n	80026c0 <DrawChar+0xa0>
      if(line & (1 << (width- j + offset- 1)))
 8002694:	1b2b      	subs	r3, r5, r4
 8002696:	4443      	add	r3, r8
 8002698:	3b01      	subs	r3, #1
 800269a:	2201      	movs	r2, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	423b      	tst	r3, r7
 80026a2:	d0e7      	beq.n	8002674 <DrawChar+0x54>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80026a4:	4b15      	ldr	r3, [pc, #84]	; (80026fc <DrawChar+0xdc>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80026ac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80026b0:	eb09 0004 	add.w	r0, r9, r4
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	4631      	mov	r1, r6
 80026b8:	b280      	uxth	r0, r0
 80026ba:	f7ff ff9b 	bl	80025f4 <BSP_LCD_DrawPixel>
 80026be:	e7e6      	b.n	800268e <DrawChar+0x6e>
    Ypos++;
 80026c0:	3601      	adds	r6, #1
 80026c2:	b2b6      	uxth	r6, r6
  for(i = 0; i < height; i++)
 80026c4:	f10a 0a01 	add.w	sl, sl, #1
 80026c8:	9b01      	ldr	r3, [sp, #4]
 80026ca:	4553      	cmp	r3, sl
 80026cc:	d912      	bls.n	80026f4 <DrawChar+0xd4>
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80026ce:	fb0a f30b 	mul.w	r3, sl, fp
 80026d2:	9a00      	ldr	r2, [sp, #0]
 80026d4:	441a      	add	r2, r3
    switch(((width + 7)/8))
 80026d6:	f1bb 0f01 	cmp.w	fp, #1
 80026da:	d0c1      	beq.n	8002660 <DrawChar+0x40>
 80026dc:	f1bb 0f02 	cmp.w	fp, #2
 80026e0:	d0c2      	beq.n	8002668 <DrawChar+0x48>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80026e2:	9900      	ldr	r1, [sp, #0]
 80026e4:	5ccb      	ldrb	r3, [r1, r3]
 80026e6:	7857      	ldrb	r7, [r2, #1]
 80026e8:	023f      	lsls	r7, r7, #8
 80026ea:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 80026ee:	7893      	ldrb	r3, [r2, #2]
 80026f0:	431f      	orrs	r7, r3
      break;
 80026f2:	e7b7      	b.n	8002664 <DrawChar+0x44>
}
 80026f4:	b003      	add	sp, #12
 80026f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026fa:	bf00      	nop
 80026fc:	20000424 	.word	0x20000424

08002700 <BSP_LCD_DisplayChar>:
{
 8002700:	b538      	push	{r3, r4, r5, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <BSP_LCD_DisplayChar+0x2c>)
 8002704:	681c      	ldr	r4, [r3, #0]
 8002706:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800270a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800270e:	68dc      	ldr	r4, [r3, #12]
 8002710:	6825      	ldr	r5, [r4, #0]
 8002712:	3a20      	subs	r2, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002714:	88e3      	ldrh	r3, [r4, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002716:	fb03 f202 	mul.w	r2, r3, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800271a:	88a3      	ldrh	r3, [r4, #4]
 800271c:	3307      	adds	r3, #7
 800271e:	10db      	asrs	r3, r3, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002720:	fb03 5202 	mla	r2, r3, r2, r5
 8002724:	f7ff ff7c 	bl	8002620 <DrawChar>
}
 8002728:	bd38      	pop	{r3, r4, r5, pc}
 800272a:	bf00      	nop
 800272c:	20000424 	.word	0x20000424

08002730 <BSP_LCD_DisplayStringAt>:
{
 8002730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002734:	4605      	mov	r5, r0
 8002736:	4688      	mov	r8, r1
 8002738:	4616      	mov	r6, r2
 800273a:	461f      	mov	r7, r3
  uint32_t size = 0, xsize = 0;
 800273c:	2400      	movs	r4, #0
  while (*ptr++) size ++ ;
 800273e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002742:	b109      	cbz	r1, 8002748 <BSP_LCD_DisplayStringAt+0x18>
 8002744:	3401      	adds	r4, #1
 8002746:	e7fa      	b.n	800273e <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002748:	f7ff fe82 	bl	8002450 <BSP_LCD_GetXSize>
 800274c:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <BSP_LCD_DisplayStringAt+0xb8>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002754:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	889b      	ldrh	r3, [r3, #4]
 800275c:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (Mode)
 8002760:	2f01      	cmp	r7, #1
 8002762:	d02e      	beq.n	80027c2 <BSP_LCD_DisplayStringAt+0x92>
 8002764:	2f02      	cmp	r7, #2
 8002766:	d034      	beq.n	80027d2 <BSP_LCD_DisplayStringAt+0xa2>
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8002768:	b22b      	sxth	r3, r5
 800276a:	2b00      	cmp	r3, #0
 800276c:	dd38      	ble.n	80027e0 <BSP_LCD_DisplayStringAt+0xb0>
    refcolumn = 1;
 800276e:	2400      	movs	r4, #0
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002770:	7837      	ldrb	r7, [r6, #0]
 8002772:	f7ff fe6d 	bl	8002450 <BSP_LCD_GetXSize>
 8002776:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <BSP_LCD_DisplayStringAt+0xb8>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800277e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	889a      	ldrh	r2, [r3, #4]
 8002786:	fb02 0314 	mls	r3, r2, r4, r0
 800278a:	b29b      	uxth	r3, r3
 800278c:	4293      	cmp	r3, r2
 800278e:	bf34      	ite	cc
 8002790:	2300      	movcc	r3, #0
 8002792:	2301      	movcs	r3, #1
 8002794:	2f00      	cmp	r7, #0
 8002796:	bf08      	it	eq
 8002798:	2300      	moveq	r3, #0
 800279a:	b31b      	cbz	r3, 80027e4 <BSP_LCD_DisplayStringAt+0xb4>
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800279c:	463a      	mov	r2, r7
 800279e:	4641      	mov	r1, r8
 80027a0:	4628      	mov	r0, r5
 80027a2:	f7ff ffad 	bl	8002700 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <BSP_LCD_DisplayStringAt+0xb8>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80027ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	8898      	ldrh	r0, [r3, #4]
 80027b6:	4405      	add	r5, r0
 80027b8:	b2ad      	uxth	r5, r5
    Text++;
 80027ba:	3601      	adds	r6, #1
    i++;
 80027bc:	3401      	adds	r4, #1
 80027be:	b2a4      	uxth	r4, r4
 80027c0:	e7d6      	b.n	8002770 <BSP_LCD_DisplayStringAt+0x40>
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80027c2:	1b00      	subs	r0, r0, r4
 80027c4:	fb00 f303 	mul.w	r3, r0, r3
 80027c8:	f3c3 034f 	ubfx	r3, r3, #1, #16
 80027cc:	441d      	add	r5, r3
 80027ce:	b2ad      	uxth	r5, r5
      break;
 80027d0:	e7ca      	b.n	8002768 <BSP_LCD_DisplayStringAt+0x38>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80027d2:	1b00      	subs	r0, r0, r4
 80027d4:	fb10 f303 	smulbb	r3, r0, r3
 80027d8:	b29b      	uxth	r3, r3
 80027da:	1b5d      	subs	r5, r3, r5
 80027dc:	b2ad      	uxth	r5, r5
      break;
 80027de:	e7c3      	b.n	8002768 <BSP_LCD_DisplayStringAt+0x38>
    refcolumn = 1;
 80027e0:	2501      	movs	r5, #1
 80027e2:	e7c4      	b.n	800276e <BSP_LCD_DisplayStringAt+0x3e>
}
 80027e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027e8:	20000424 	.word	0x20000424

080027ec <BSP_LCD_DrawLine>:
{
 80027ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027f0:	b085      	sub	sp, #20
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80027f2:	eba2 0a00 	sub.w	sl, r2, r0
 80027f6:	f1ba 0f00 	cmp.w	sl, #0
 80027fa:	bfb8      	it	lt
 80027fc:	f1ca 0a00 	rsblt	sl, sl, #0
 8002800:	fa0f fa8a 	sxth.w	sl, sl
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002804:	eba3 0b01 	sub.w	fp, r3, r1
 8002808:	f1bb 0f00 	cmp.w	fp, #0
 800280c:	bfb8      	it	lt
 800280e:	f1cb 0b00 	rsblt	fp, fp, #0
 8002812:	fa0f fb8b 	sxth.w	fp, fp
  x = x1;                       /* Start x off at the first pixel */
 8002816:	b204      	sxth	r4, r0
  y = y1;                       /* Start y off at the first pixel */
 8002818:	b20e      	sxth	r6, r1
  if (x2 >= x1)                 /* The x-values are increasing */
 800281a:	4282      	cmp	r2, r0
 800281c:	d315      	bcc.n	800284a <BSP_LCD_DrawLine+0x5e>
    xinc1 = 1;
 800281e:	2201      	movs	r2, #1
 8002820:	9202      	str	r2, [sp, #8]
  if (y2 >= y1)                 /* The y-values are increasing */
 8002822:	428b      	cmp	r3, r1
 8002824:	d315      	bcc.n	8002852 <BSP_LCD_DrawLine+0x66>
    yinc1 = 1;
 8002826:	2301      	movs	r3, #1
 8002828:	9303      	str	r3, [sp, #12]
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800282a:	45da      	cmp	sl, fp
 800282c:	db18      	blt.n	8002860 <BSP_LCD_DrawLine+0x74>
    num = deltax / 2;
 800282e:	46d0      	mov	r8, sl
 8002830:	f1ba 0f00 	cmp.w	sl, #0
 8002834:	db11      	blt.n	800285a <BSP_LCD_DrawLine+0x6e>
 8002836:	f348 084f 	sbfx	r8, r8, #1, #16
    numpixels = deltax;         /* There are more x-values than y-values */
 800283a:	9b02      	ldr	r3, [sp, #8]
 800283c:	9300      	str	r3, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800283e:	2300      	movs	r3, #0
 8002840:	9302      	str	r3, [sp, #8]
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002842:	9301      	str	r3, [sp, #4]
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002844:	f04f 0900 	mov.w	r9, #0
 8002848:	e026      	b.n	8002898 <BSP_LCD_DrawLine+0xac>
    xinc1 = -1;
 800284a:	f04f 32ff 	mov.w	r2, #4294967295
 800284e:	9202      	str	r2, [sp, #8]
 8002850:	e7e7      	b.n	8002822 <BSP_LCD_DrawLine+0x36>
    yinc1 = -1;
 8002852:	f04f 33ff 	mov.w	r3, #4294967295
 8002856:	9303      	str	r3, [sp, #12]
 8002858:	e7e7      	b.n	800282a <BSP_LCD_DrawLine+0x3e>
    num = deltax / 2;
 800285a:	f10a 0801 	add.w	r8, sl, #1
 800285e:	e7ea      	b.n	8002836 <BSP_LCD_DrawLine+0x4a>
    num = deltay / 2;
 8002860:	46d8      	mov	r8, fp
 8002862:	f1bb 0f00 	cmp.w	fp, #0
 8002866:	db0a      	blt.n	800287e <BSP_LCD_DrawLine+0x92>
 8002868:	f348 084f 	sbfx	r8, r8, #1, #16
 800286c:	4653      	mov	r3, sl
    den = deltay;
 800286e:	46da      	mov	sl, fp
    numadd = deltax;
 8002870:	469b      	mov	fp, r3
    num = deltay / 2;
 8002872:	9b03      	ldr	r3, [sp, #12]
 8002874:	9301      	str	r3, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002876:	2300      	movs	r3, #0
 8002878:	9303      	str	r3, [sp, #12]
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	e7e2      	b.n	8002844 <BSP_LCD_DrawLine+0x58>
    num = deltay / 2;
 800287e:	f10b 0801 	add.w	r8, fp, #1
 8002882:	e7f1      	b.n	8002868 <BSP_LCD_DrawLine+0x7c>
    x += xinc2;                               /* Change the x as appropriate */
 8002884:	9b00      	ldr	r3, [sp, #0]
 8002886:	441c      	add	r4, r3
 8002888:	b224      	sxth	r4, r4
    y += yinc2;                               /* Change the y as appropriate */
 800288a:	9b01      	ldr	r3, [sp, #4]
 800288c:	441e      	add	r6, r3
 800288e:	b236      	sxth	r6, r6
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002890:	f109 0901 	add.w	r9, r9, #1
 8002894:	fa0f f989 	sxth.w	r9, r9
 8002898:	45ca      	cmp	sl, r9
 800289a:	db1e      	blt.n	80028da <BSP_LCD_DrawLine+0xee>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800289c:	b2a7      	uxth	r7, r4
 800289e:	b2b5      	uxth	r5, r6
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <BSP_LCD_DrawLine+0xf4>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80028a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	4629      	mov	r1, r5
 80028b0:	4638      	mov	r0, r7
 80028b2:	f7ff fe9f 	bl	80025f4 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 80028b6:	44d8      	add	r8, fp
 80028b8:	fa1f f388 	uxth.w	r3, r8
 80028bc:	fa0f f888 	sxth.w	r8, r8
    if (num >= den)                           /* Check if numerator >= denominator */
 80028c0:	45c2      	cmp	sl, r8
 80028c2:	dcdf      	bgt.n	8002884 <BSP_LCD_DrawLine+0x98>
      num -= den;                             /* Calculate the new numerator value */
 80028c4:	eba3 080a 	sub.w	r8, r3, sl
 80028c8:	fa0f f888 	sxth.w	r8, r8
      x += xinc1;                             /* Change the x as appropriate */
 80028cc:	9b02      	ldr	r3, [sp, #8]
 80028ce:	18fc      	adds	r4, r7, r3
 80028d0:	b224      	sxth	r4, r4
      y += yinc1;                             /* Change the y as appropriate */
 80028d2:	9b03      	ldr	r3, [sp, #12]
 80028d4:	18ee      	adds	r6, r5, r3
 80028d6:	b236      	sxth	r6, r6
 80028d8:	e7d4      	b.n	8002884 <BSP_LCD_DrawLine+0x98>
}
 80028da:	b005      	add	sp, #20
 80028dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028e0:	20000424 	.word	0x20000424

080028e4 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80028e4:	b570      	push	{r4, r5, r6, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	4605      	mov	r5, r0
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 80028ea:	4b3d      	ldr	r3, [pc, #244]	; (80029e0 <BSP_TS_GetState+0xfc>)
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	6912      	ldr	r2, [r2, #16]
 80028f0:	7818      	ldrb	r0, [r3, #0]
 80028f2:	4790      	blx	r2
 80028f4:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
 80028f6:	2800      	cmp	r0, #0
 80028f8:	d16f      	bne.n	80029da <BSP_TS_GetState+0xf6>
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
}
 80028fa:	2000      	movs	r0, #0
 80028fc:	b002      	add	sp, #8
 80028fe:	bd70      	pop	{r4, r5, r6, pc}
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8002900:	b29b      	uxth	r3, r3
 8002902:	1a5b      	subs	r3, r3, r1
 8002904:	b29b      	uxth	r3, r3
 8002906:	e051      	b.n	80029ac <BSP_TS_GetState+0xc8>
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8002908:	b292      	uxth	r2, r2
 800290a:	1a12      	subs	r2, r2, r0
 800290c:	b292      	uxth	r2, r2
 800290e:	e05b      	b.n	80029c8 <BSP_TS_GetState+0xe4>
      TS_State->touchX[index] = _x[index];
 8002910:	4b33      	ldr	r3, [pc, #204]	; (80029e0 <BSP_TS_GetState+0xfc>)
 8002912:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002916:	68d9      	ldr	r1, [r3, #12]
 8002918:	eb05 0244 	add.w	r2, r5, r4, lsl #1
 800291c:	8051      	strh	r1, [r2, #2]
      TS_State->touchY[index] = _y[index];
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	80d3      	strh	r3, [r2, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 8002922:	3401      	adds	r4, #1
 8002924:	782b      	ldrb	r3, [r5, #0]
 8002926:	42a3      	cmp	r3, r4
 8002928:	d9e7      	bls.n	80028fa <BSP_TS_GetState+0x16>
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 800292a:	4e2d      	ldr	r6, [pc, #180]	; (80029e0 <BSP_TS_GetState+0xfc>)
 800292c:	6873      	ldr	r3, [r6, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	eb0d 0244 	add.w	r2, sp, r4, lsl #1
 8002934:	a901      	add	r1, sp, #4
 8002936:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 800293a:	7830      	ldrb	r0, [r6, #0]
 800293c:	4798      	blx	r3
      if(ts_orientation & TS_SWAP_XY)
 800293e:	7a33      	ldrb	r3, [r6, #8]
 8002940:	f013 0f08 	tst.w	r3, #8
 8002944:	d00a      	beq.n	800295c <BSP_TS_GetState+0x78>
        tmp = Raw_x[index];
 8002946:	aa02      	add	r2, sp, #8
 8002948:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 800294c:	f832 1c04 	ldrh.w	r1, [r2, #-4]
        Raw_x[index] = Raw_y[index]; 
 8002950:	f832 0c08 	ldrh.w	r0, [r2, #-8]
 8002954:	f822 0c04 	strh.w	r0, [r2, #-4]
        Raw_y[index] = tmp;
 8002958:	f822 1c08 	strh.w	r1, [r2, #-8]
      if(ts_orientation & TS_SWAP_X)
 800295c:	f013 0f02 	tst.w	r3, #2
 8002960:	d009      	beq.n	8002976 <BSP_TS_GetState+0x92>
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8002962:	aa02      	add	r2, sp, #8
 8002964:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 8002968:	f831 0c04 	ldrh.w	r0, [r1, #-4]
 800296c:	f240 321f 	movw	r2, #799	; 0x31f
 8002970:	1a12      	subs	r2, r2, r0
 8002972:	f821 2c04 	strh.w	r2, [r1, #-4]
      if(ts_orientation & TS_SWAP_Y)
 8002976:	f013 0f04 	tst.w	r3, #4
 800297a:	d009      	beq.n	8002990 <BSP_TS_GetState+0xac>
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 800297c:	ab02      	add	r3, sp, #8
 800297e:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8002982:	f832 1c08 	ldrh.w	r1, [r2, #-8]
 8002986:	f240 13df 	movw	r3, #479	; 0x1df
 800298a:	1a5b      	subs	r3, r3, r1
 800298c:	f822 3c08 	strh.w	r3, [r2, #-8]
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8002990:	ab02      	add	r3, sp, #8
 8002992:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8002996:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <BSP_TS_GetState+0xfc>)
 800299c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	4299      	cmp	r1, r3
 80029a4:	d9ac      	bls.n	8002900 <BSP_TS_GetState+0x1c>
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	1acb      	subs	r3, r1, r3
 80029aa:	b29b      	uxth	r3, r3
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 80029ac:	aa02      	add	r2, sp, #8
 80029ae:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 80029b2:	f832 0c08 	ldrh.w	r0, [r2, #-8]
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <BSP_TS_GetState+0xfc>)
 80029b8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80029bc:	6952      	ldr	r2, [r2, #20]
 80029be:	4290      	cmp	r0, r2
 80029c0:	d9a2      	bls.n	8002908 <BSP_TS_GetState+0x24>
 80029c2:	b292      	uxth	r2, r2
 80029c4:	1a82      	subs	r2, r0, r2
 80029c6:	b292      	uxth	r2, r2
      if ((xDiff + yDiff) > 5)
 80029c8:	4413      	add	r3, r2
 80029ca:	2b05      	cmp	r3, #5
 80029cc:	dda0      	ble.n	8002910 <BSP_TS_GetState+0x2c>
        _x[index] = Raw_x[index];
 80029ce:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <BSP_TS_GetState+0xfc>)
 80029d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80029d4:	60d9      	str	r1, [r3, #12]
        _y[index] = Raw_y[index];
 80029d6:	6158      	str	r0, [r3, #20]
 80029d8:	e79a      	b.n	8002910 <BSP_TS_GetState+0x2c>
    for(index=0; index < TS_State->touchDetected; index++)
 80029da:	2400      	movs	r4, #0
 80029dc:	e7a2      	b.n	8002924 <BSP_TS_GetState+0x40>
 80029de:	bf00      	nop
 80029e0:	2000053c 	.word	0x2000053c

080029e4 <USB_AudioStreamingInputOutputDeInit>:
  *         De-Initializes the AUDIO usb input node
  * @param  node_handle(IN): the node handle, node must be allocated
  * @retval  0 for no error
  */
 static int8_t  USB_AudioStreamingInputOutputDeInit(uint32_t node_handle)
{
 80029e4:	4603      	mov	r3, r0
  ((AUDIO_USBInputOutputNode_t *)node_handle)->node.state = AUDIO_NODE_OFF;
 80029e6:	2000      	movs	r0, #0
 80029e8:	7018      	strb	r0, [r3, #0]
  return 0;
}
 80029ea:	4770      	bx	lr

080029ec <USB_AudioStreamingInputOutputStart>:
static int8_t  USB_AudioStreamingInputOutputStart( AUDIO_CircularBuffer_t* buffer, uint16_t threshold ,uint32_t node_handle)
{
  AUDIO_USBInputOutputNode_t * io_node;

  io_node = (AUDIO_USBInputOutputNode_t *)node_handle;
  if((io_node->node.state == AUDIO_NODE_INITIALIZED ) ||(io_node->node.state == AUDIO_NODE_STOPPED))
 80029ec:	7813      	ldrb	r3, [r2, #0]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	bf18      	it	ne
 80029f2:	2b01      	cmpne	r3, #1
 80029f4:	d10a      	bne.n	8002a0c <USB_AudioStreamingInputOutputStart+0x20>
  {
     io_node->node.state = AUDIO_NODE_STARTED;
 80029f6:	2302      	movs	r3, #2
 80029f8:	7013      	strb	r3, [r2, #0]
     io_node->buf = buffer;
 80029fa:	6190      	str	r0, [r2, #24]
     io_node->buf->rd_ptr = io_node->buf->wr_ptr=0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	80c3      	strh	r3, [r0, #6]
 8002a00:	6990      	ldr	r0, [r2, #24]
 8002a02:	8083      	strh	r3, [r0, #4]
     io_node->flags = 0;
 8002a04:	7513      	strb	r3, [r2, #20]
     if(io_node->node.type == AUDIO_INPUT)
 8002a06:	7a13      	ldrb	r3, [r2, #8]
 8002a08:	b903      	cbnz	r3, 8002a0c <USB_AudioStreamingInputOutputStart+0x20>
     {
       io_node->specific.input.threshold = threshold;
 8002a0a:	8611      	strh	r1, [r2, #48]	; 0x30
       }
#endif /* USB_AUDIO_CONFIG_RECORD_USE_FREQ_44_1_K */
     }
  }
  return 0;
}
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	4770      	bx	lr

08002a10 <USB_AudioStreamingInputOutputStop>:
  */
static int8_t  USB_AudioStreamingInputOutputStop( uint32_t node_handle)
{
  AUDIO_USBInputOutputNode_t * io_node;
  io_node = (AUDIO_USBInputOutputNode_t *)node_handle;
  io_node->node.state = AUDIO_NODE_STOPPED;
 8002a10:	2303      	movs	r3, #3
 8002a12:	7003      	strb	r3, [r0, #0]
  return 0;
}
 8002a14:	2000      	movs	r0, #0
 8002a16:	4770      	bx	lr

08002a18 <USB_AudioStreamingInputOutputRestart>:
  */
static int8_t  USB_AudioStreamingInputOutputRestart( uint32_t node_handle)
{
  AUDIO_USBInputOutputNode_t * io_node;
  io_node = (AUDIO_USBInputOutputNode_t *)node_handle;
  if(io_node->node.state == AUDIO_NODE_STARTED)
 8002a18:	7803      	ldrb	r3, [r0, #0]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d001      	beq.n	8002a22 <USB_AudioStreamingInputOutputRestart+0xa>
  {
    io_node->flags = AUDIO_IO_RESTART_REQUIRED;   /* this flag to stop node when next time USB Audio class calls the node via callback*/
    return 0;
  }
  return 0;
}
 8002a1e:	2000      	movs	r0, #0
 8002a20:	4770      	bx	lr
    io_node->flags = AUDIO_IO_RESTART_REQUIRED;   /* this flag to stop node when next time USB Audio class calls the node via callback*/
 8002a22:	2340      	movs	r3, #64	; 0x40
 8002a24:	7503      	strb	r3, [r0, #20]
    return 0;
 8002a26:	e7fa      	b.n	8002a1e <USB_AudioStreamingInputOutputRestart+0x6>

08002a28 <USB_AudioStreamingInputOutputGetMaxPacketLength>:
*/
static uint16_t  USB_AudioStreamingInputOutputGetMaxPacketLength(uint32_t node_handle)
{
  
  return ((AUDIO_USBInputOutputNode_t *)node_handle)->max_packet_length;
}
 8002a28:	8b80      	ldrh	r0, [r0, #28]
 8002a2a:	4770      	bx	lr

08002a2c <USB_AudioStreamingInputOutputGetState>:
  * @retval  0
*/
static int8_t  USB_AudioStreamingInputOutputGetState(uint32_t node_handle)
{
  return 0;
}
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	4770      	bx	lr

08002a30 <USB_AudioStreamingFeatureUnitDInit>:
  *         De-Initialize control feature unit node
  * @param  node_handle: the node handle, node must be Initialized
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitDInit(uint32_t node_handle)
{
 8002a30:	4603      	mov	r3, r0
  ((AUDIO_USB_CF_NodeTypeDef*)node_handle)->node.state = AUDIO_NODE_OFF;
 8002a32:	2000      	movs	r0, #0
 8002a34:	7018      	strb	r0, [r3, #0]
  return 0;
}
 8002a36:	4770      	bx	lr

08002a38 <USB_AudioStreamingFeatureUnitStart>:
  * @param  commands(IN): list of callback to execute controls like setvolume and mute. this function depends on codec and microphone.
  * @param  node_handle(IN): the node handle, node must be allocated
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitStart(AUDIO_USBFeatureUnitCommands_t* commands, uint32_t node_handle)
{
 8002a38:	b510      	push	{r4, lr}
 8002a3a:	460b      	mov	r3, r1
  AUDIO_USB_CF_NodeTypeDef *cf;
  
  cf = (AUDIO_USB_CF_NodeTypeDef*)node_handle;
  cf->control_cbks = *commands;
 8002a3c:	f101 0434 	add.w	r4, r1, #52	; 0x34
 8002a40:	c807      	ldmia	r0, {r0, r1, r2}
 8002a42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cf->node.state = AUDIO_NODE_STARTED;
 8002a46:	2202      	movs	r2, #2
 8002a48:	701a      	strb	r2, [r3, #0]
  
  if(cf->control_cbks.SetCurrentVolume)
 8002a4a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002a4c:	b124      	cbz	r4, 8002a58 <USB_AudioStreamingFeatureUnitStart+0x20>
  {
    cf->control_cbks.SetCurrentVolume(0, 
                                      cf->node.audio_description->audio_volume_db_256,
 8002a4e:	6859      	ldr	r1, [r3, #4]
    cf->control_cbks.SetCurrentVolume(0, 
 8002a50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a52:	68c9      	ldr	r1, [r1, #12]
 8002a54:	2000      	movs	r0, #0
 8002a56:	47a0      	blx	r4
                                      cf->control_cbks.private_data);
  }
  return 0;
}
 8002a58:	2000      	movs	r0, #0
 8002a5a:	bd10      	pop	{r4, pc}

08002a5c <USB_AudioStreamingFeatureUnitStop>:
{
  /* @TODO develop feature */
  AUDIO_USB_CF_NodeTypeDef * cf;
  
  cf = (AUDIO_USB_CF_NodeTypeDef*)node_handle;
  cf->node.state = AUDIO_NODE_STOPPED;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	7003      	strb	r3, [r0, #0]
  return 0;
}
 8002a60:	2000      	movs	r0, #0
 8002a62:	4770      	bx	lr

08002a64 <USB_AudioStreamingFeatureUnitGetMute>:
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitGetMute(uint16_t channel, uint8_t* mute, uint32_t node_handle)
{
  /**@TODO add channel management  */
  *mute = ((AUDIO_USB_CF_NodeTypeDef*)node_handle)->node.audio_description->audio_mute; 
 8002a64:	6853      	ldr	r3, [r2, #4]
 8002a66:	7c1b      	ldrb	r3, [r3, #16]
 8002a68:	700b      	strb	r3, [r1, #0]
  return 0; 
}
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	4770      	bx	lr

08002a6e <USB_AudioStreamingFeatureUnitSetMute>:
  * @param  mute:  mute value
  * @param  node_handle: the Feature node handle, node must be initialized
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitSetMute(uint16_t channel, uint8_t mute, uint32_t node_handle)
{
 8002a6e:	b508      	push	{r3, lr}
  AUDIO_USB_CF_NodeTypeDef * cf;
  
  cf = (AUDIO_USB_CF_NodeTypeDef*)node_handle;
  /**@TODO add channel management  */
  
  cf->node.audio_description->audio_mute = mute;
 8002a70:	6853      	ldr	r3, [r2, #4]
 8002a72:	7419      	strb	r1, [r3, #16]
  if((cf->node.state == AUDIO_NODE_STARTED)&&(cf->control_cbks.SetMute))
 8002a74:	7813      	ldrb	r3, [r2, #0]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d001      	beq.n	8002a7e <USB_AudioStreamingFeatureUnitSetMute+0x10>
  {
      cf->control_cbks.SetMute(channel, mute, cf->control_cbks.private_data);
  }
  return 0;
}
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	bd08      	pop	{r3, pc}
  if((cf->node.state == AUDIO_NODE_STARTED)&&(cf->control_cbks.SetMute))
 8002a7e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0fa      	beq.n	8002a7a <USB_AudioStreamingFeatureUnitSetMute+0xc>
      cf->control_cbks.SetMute(channel, mute, cf->control_cbks.private_data);
 8002a84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a86:	4798      	blx	r3
 8002a88:	e7f7      	b.n	8002a7a <USB_AudioStreamingFeatureUnitSetMute+0xc>

08002a8a <USB_AudioStreamingFeatureUnitGetCurVolume>:
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitGetCurVolume(uint16_t channel, uint16_t* volume, uint32_t node_handle)
{
  /**@TODO add channel management  */
  VOLUME_DB_256_TO_USB(*volume, ((AUDIO_Node_t*)node_handle)->audio_description->audio_volume_db_256);
 8002a8a:	6853      	ldr	r3, [r2, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	800b      	strh	r3, [r1, #0]
  return 0; 
}
 8002a90:	2000      	movs	r0, #0
 8002a92:	4770      	bx	lr

08002a94 <USB_AudioStreamingFeatureUnitSetCurVolume>:
  * @param  volume:             volume value
  * @param  node_handle:        the Feature node handle, node must be initialized
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitSetCurVolume(uint16_t channel, uint16_t volume, uint32_t node_handle)
{
 8002a94:	b508      	push	{r3, lr}
  AUDIO_USB_CF_NodeTypeDef* cf;
  
  cf = (AUDIO_USB_CF_NodeTypeDef*)node_handle;
  /**@TODO add channel management  */
  
  VOLUME_USB_TO_DB_256(cf->node.audio_description->audio_volume_db_256, volume);
 8002a96:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8002a9a:	d106      	bne.n	8002aaa <USB_AudioStreamingFeatureUnitSetCurVolume+0x16>
 8002a9c:	6853      	ldr	r3, [r2, #4]
 8002a9e:	60d9      	str	r1, [r3, #12]
  if((cf->node.state == AUDIO_NODE_STARTED)&&(cf->control_cbks.SetCurrentVolume))
 8002aa0:	7813      	ldrb	r3, [r2, #0]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d004      	beq.n	8002ab0 <USB_AudioStreamingFeatureUnitSetCurVolume+0x1c>
    cf->control_cbks.SetCurrentVolume(channel, 
                                      cf->node.audio_description->audio_volume_db_256,
                                      cf->control_cbks.private_data);
  }
  return 0;
}
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	bd08      	pop	{r3, pc}
  VOLUME_USB_TO_DB_256(cf->node.audio_description->audio_volume_db_256, volume);
 8002aaa:	f5a1 3180 	sub.w	r1, r1, #65536	; 0x10000
 8002aae:	e7f5      	b.n	8002a9c <USB_AudioStreamingFeatureUnitSetCurVolume+0x8>
  if((cf->node.state == AUDIO_NODE_STARTED)&&(cf->control_cbks.SetCurrentVolume))
 8002ab0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f7      	beq.n	8002aa6 <USB_AudioStreamingFeatureUnitSetCurVolume+0x12>
                                      cf->node.audio_description->audio_volume_db_256,
 8002ab6:	6851      	ldr	r1, [r2, #4]
    cf->control_cbks.SetCurrentVolume(channel, 
 8002ab8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002aba:	68c9      	ldr	r1, [r1, #12]
 8002abc:	4798      	blx	r3
 8002abe:	e7f2      	b.n	8002aa6 <USB_AudioStreamingFeatureUnitSetCurVolume+0x12>

08002ac0 <USB_AudioStreamingFeatureUnitGetStatus>:
  * @retval 0 for no error
  */
static int8_t  USB_AudioStreamingFeatureUnitGetStatus( uint32_t node_handle )
{
  return 0;
}
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	4770      	bx	lr

08002ac4 <USB_AudioStreamingInputGetBuffer>:
{
 8002ac4:	b510      	push	{r4, lr}
  *max_packet_length = input_node->max_packet_length;
 8002ac6:	8b82      	ldrh	r2, [r0, #28]
 8002ac8:	800a      	strh	r2, [r1, #0]
  if( input_node->node.state == AUDIO_NODE_STARTED)
 8002aca:	7803      	ldrb	r3, [r0, #0]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d123      	bne.n	8002b18 <USB_AudioStreamingInputGetBuffer+0x54>
 8002ad0:	4604      	mov	r4, r0
    buffer_free_size  = AUDIO_BUFFER_FREE_SIZE(input_node->buf);
 8002ad2:	6981      	ldr	r1, [r0, #24]
 8002ad4:	88c8      	ldrh	r0, [r1, #6]
 8002ad6:	888b      	ldrh	r3, [r1, #4]
 8002ad8:	4298      	cmp	r0, r3
 8002ada:	d31a      	bcc.n	8002b12 <USB_AudioStreamingInputGetBuffer+0x4e>
 8002adc:	8909      	ldrh	r1, [r1, #8]
 8002ade:	440b      	add	r3, r1
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	1a1b      	subs	r3, r3, r0
 8002ae4:	b29b      	uxth	r3, r3
    if(buffer_free_size < input_node->max_packet_length)
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d904      	bls.n	8002af4 <USB_AudioStreamingInputGetBuffer+0x30>
      input_node->node.session_handle->SessionCallback(AUDIO_OVERRUN, (AUDIO_Node_t*)input_node,
 8002aea:	68e2      	ldr	r2, [r4, #12]
 8002aec:	6893      	ldr	r3, [r2, #8]
 8002aee:	4621      	mov	r1, r4
 8002af0:	2004      	movs	r0, #4
 8002af2:	4798      	blx	r3
    if(input_node->flags&AUDIO_IO_RESTART_REQUIRED)
 8002af4:	7d23      	ldrb	r3, [r4, #20]
 8002af6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002afa:	d005      	beq.n	8002b08 <USB_AudioStreamingInputGetBuffer+0x44>
     input_node->flags = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	7523      	strb	r3, [r4, #20]
     input_node->buf->rd_ptr = input_node->buf->wr_ptr = 0;
 8002b00:	69a2      	ldr	r2, [r4, #24]
 8002b02:	80d3      	strh	r3, [r2, #6]
 8002b04:	69a2      	ldr	r2, [r4, #24]
 8002b06:	8093      	strh	r3, [r2, #4]
    return input_node->buf->data+input_node->buf->wr_ptr;
 8002b08:	69a3      	ldr	r3, [r4, #24]
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	88db      	ldrh	r3, [r3, #6]
 8002b0e:	4418      	add	r0, r3
}
 8002b10:	bd10      	pop	{r4, pc}
    buffer_free_size  = AUDIO_BUFFER_FREE_SIZE(input_node->buf);
 8002b12:	1a1b      	subs	r3, r3, r0
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	e7e6      	b.n	8002ae6 <USB_AudioStreamingInputGetBuffer+0x22>
    Error_Handler();
 8002b18:	f00a fe54 	bl	800d7c4 <Error_Handler>
    return 0; /* return statement non reachable */
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	e7f7      	b.n	8002b10 <USB_AudioStreamingInputGetBuffer+0x4c>

08002b20 <USB_AudioStreamingInputDataReceived>:
 {
 8002b20:	b538      	push	{r3, r4, r5, lr}
   if(input_node->node.state == AUDIO_NODE_STARTED)
 8002b22:	780b      	ldrb	r3, [r1, #0]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d151      	bne.n	8002bcc <USB_AudioStreamingInputDataReceived+0xac>
 8002b28:	460c      	mov	r4, r1
     if(input_node->flags&AUDIO_IO_RESTART_REQUIRED)
 8002b2a:	7d0b      	ldrb	r3, [r1, #20]
 8002b2c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002b30:	d111      	bne.n	8002b56 <USB_AudioStreamingInputDataReceived+0x36>
     buf=input_node->buf;
 8002b32:	698d      	ldr	r5, [r1, #24]
     buf->wr_ptr += data_len;/* increment buffer */
 8002b34:	88eb      	ldrh	r3, [r5, #6]
 8002b36:	4418      	add	r0, r3
 8002b38:	b280      	uxth	r0, r0
 8002b3a:	80e8      	strh	r0, [r5, #6]
     if((input_node->flags&AUDIO_IO_BEGIN_OF_STREAM) == 0)
 8002b3c:	7d0b      	ldrb	r3, [r1, #20]
 8002b3e:	f013 0f01 	tst.w	r3, #1
 8002b42:	d10f      	bne.n	8002b64 <USB_AudioStreamingInputDataReceived+0x44>
       input_node->node.session_handle->SessionCallback(AUDIO_BEGIN_OF_STREAM,(AUDIO_Node_t*)input_node,
 8002b44:	68ca      	ldr	r2, [r1, #12]
 8002b46:	6893      	ldr	r3, [r2, #8]
 8002b48:	2001      	movs	r0, #1
 8002b4a:	4798      	blx	r3
       input_node->flags |= AUDIO_IO_BEGIN_OF_STREAM;
 8002b4c:	7d23      	ldrb	r3, [r4, #20]
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	7523      	strb	r3, [r4, #20]
 8002b54:	e03c      	b.n	8002bd0 <USB_AudioStreamingInputDataReceived+0xb0>
       input_node->flags = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	750b      	strb	r3, [r1, #20]
       input_node->buf->rd_ptr=input_node->buf->wr_ptr = 0;
 8002b5a:	698a      	ldr	r2, [r1, #24]
 8002b5c:	80d3      	strh	r3, [r2, #6]
 8002b5e:	698a      	ldr	r2, [r1, #24]
 8002b60:	8093      	strh	r3, [r2, #4]
       return 0;
 8002b62:	e035      	b.n	8002bd0 <USB_AudioStreamingInputDataReceived+0xb0>
        if(buf->wr_ptr > buf->size)
 8002b64:	8929      	ldrh	r1, [r5, #8]
 8002b66:	4288      	cmp	r0, r1
 8002b68:	d819      	bhi.n	8002b9e <USB_AudioStreamingInputDataReceived+0x7e>
      buffer_data_count = AUDIO_BUFFER_FILLED_SIZE(buf); 
 8002b6a:	88ea      	ldrh	r2, [r5, #6]
 8002b6c:	88a9      	ldrh	r1, [r5, #4]
 8002b6e:	428a      	cmp	r2, r1
 8002b70:	d31d      	bcc.n	8002bae <USB_AudioStreamingInputDataReceived+0x8e>
 8002b72:	1a53      	subs	r3, r2, r1
 8002b74:	b29b      	uxth	r3, r3
      if(buf->wr_ptr == buf->size)
 8002b76:	8929      	ldrh	r1, [r5, #8]
 8002b78:	428a      	cmp	r2, r1
 8002b7a:	d01e      	beq.n	8002bba <USB_AudioStreamingInputDataReceived+0x9a>
      if(((input_node->flags&AUDIO_IO_THRESHOLD_REACHED) == 0)&&
 8002b7c:	7d22      	ldrb	r2, [r4, #20]
 8002b7e:	f012 0f08 	tst.w	r2, #8
 8002b82:	d11d      	bne.n	8002bc0 <USB_AudioStreamingInputDataReceived+0xa0>
          (buffer_data_count >= input_node->specific.input.threshold))
 8002b84:	8e22      	ldrh	r2, [r4, #48]	; 0x30
      if(((input_node->flags&AUDIO_IO_THRESHOLD_REACHED) == 0)&&
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d81a      	bhi.n	8002bc0 <USB_AudioStreamingInputDataReceived+0xa0>
         input_node->node.session_handle->SessionCallback(AUDIO_THRESHOLD_REACHED, (AUDIO_Node_t*)input_node,
 8002b8a:	68e2      	ldr	r2, [r4, #12]
 8002b8c:	6893      	ldr	r3, [r2, #8]
 8002b8e:	4621      	mov	r1, r4
 8002b90:	2000      	movs	r0, #0
 8002b92:	4798      	blx	r3
          input_node->flags |= AUDIO_IO_THRESHOLD_REACHED ;
 8002b94:	7d23      	ldrb	r3, [r4, #20]
 8002b96:	f043 0308 	orr.w	r3, r3, #8
 8002b9a:	7523      	strb	r3, [r4, #20]
 8002b9c:	e018      	b.n	8002bd0 <USB_AudioStreamingInputDataReceived+0xb0>
          buf->wr_ptr -= buf->size;
 8002b9e:	1a40      	subs	r0, r0, r1
 8002ba0:	b282      	uxth	r2, r0
 8002ba2:	80ea      	strh	r2, [r5, #6]
          memcpy(buf->data, buf->data+buf->size, buf->wr_ptr);
 8002ba4:	6828      	ldr	r0, [r5, #0]
 8002ba6:	4401      	add	r1, r0
 8002ba8:	f00b fe26 	bl	800e7f8 <memcpy>
 8002bac:	e7dd      	b.n	8002b6a <USB_AudioStreamingInputDataReceived+0x4a>
      buffer_data_count = AUDIO_BUFFER_FILLED_SIZE(buf); 
 8002bae:	892b      	ldrh	r3, [r5, #8]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	1a5b      	subs	r3, r3, r1
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	e7dd      	b.n	8002b76 <USB_AudioStreamingInputDataReceived+0x56>
        buf->wr_ptr = 0;
 8002bba:	2200      	movs	r2, #0
 8002bbc:	80ea      	strh	r2, [r5, #6]
 8002bbe:	e7dd      	b.n	8002b7c <USB_AudioStreamingInputDataReceived+0x5c>
        input_node->node.session_handle->SessionCallback(AUDIO_PACKET_RECEIVED, (AUDIO_Node_t*)input_node,
 8002bc0:	68e2      	ldr	r2, [r4, #12]
 8002bc2:	6893      	ldr	r3, [r2, #8]
 8002bc4:	4621      	mov	r1, r4
 8002bc6:	2002      	movs	r0, #2
 8002bc8:	4798      	blx	r3
 8002bca:	e001      	b.n	8002bd0 <USB_AudioStreamingInputDataReceived+0xb0>
     Error_Handler();
 8002bcc:	f00a fdfa 	bl	800d7c4 <Error_Handler>
 }
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	bd38      	pop	{r3, r4, r5, pc}

08002bd4 <USB_AudioStreamingFeatureUnitInit>:
{
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	4605      	mov	r5, r0
 8002bd8:	460e      	mov	r6, r1
 8002bda:	4617      	mov	r7, r2
 8002bdc:	461c      	mov	r4, r3
  memset(cf,0,sizeof(AUDIO_USB_CF_NodeTypeDef));
 8002bde:	2254      	movs	r2, #84	; 0x54
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f00b fe16 	bl	800e814 <memset>
  cf->node.state = AUDIO_NODE_INITIALIZED;
 8002be8:	2301      	movs	r3, #1
 8002bea:	7023      	strb	r3, [r4, #0]
  cf->node.type = AUDIO_CONTROL;
 8002bec:	2302      	movs	r3, #2
 8002bee:	7223      	strb	r3, [r4, #8]
  cf->unit_id = unit_id;
 8002bf0:	7527      	strb	r7, [r4, #20]
  cf->CFInit = USB_AudioStreamingFeatureUnitInit;
 8002bf2:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <USB_AudioStreamingFeatureUnitInit+0x6c>)
 8002bf4:	6423      	str	r3, [r4, #64]	; 0x40
  cf->CFDeInit = USB_AudioStreamingFeatureUnitDInit;
 8002bf6:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <USB_AudioStreamingFeatureUnitInit+0x70>)
 8002bf8:	6463      	str	r3, [r4, #68]	; 0x44
  cf->CFStart = USB_AudioStreamingFeatureUnitStart;
 8002bfa:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <USB_AudioStreamingFeatureUnitInit+0x74>)
 8002bfc:	64a3      	str	r3, [r4, #72]	; 0x48
  cf->CFStop = USB_AudioStreamingFeatureUnitStop;
 8002bfe:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <USB_AudioStreamingFeatureUnitInit+0x78>)
 8002c00:	64e3      	str	r3, [r4, #76]	; 0x4c
  cf->CFSetMute = USB_AudioStreamingFeatureUnitSetMute;
 8002c02:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <USB_AudioStreamingFeatureUnitInit+0x7c>)
 8002c04:	6523      	str	r3, [r4, #80]	; 0x50
  cf->usb_control_callbacks.GetStatus = USB_AudioStreamingFeatureUnitGetStatus;
 8002c06:	4a13      	ldr	r2, [pc, #76]	; (8002c54 <USB_AudioStreamingFeatureUnitInit+0x80>)
 8002c08:	6322      	str	r2, [r4, #48]	; 0x30
  cf->usb_control_callbacks.GetMute = USB_AudioStreamingFeatureUnitGetMute;
 8002c0a:	4a13      	ldr	r2, [pc, #76]	; (8002c58 <USB_AudioStreamingFeatureUnitInit+0x84>)
 8002c0c:	61a2      	str	r2, [r4, #24]
  cf->usb_control_callbacks.SetMute = USB_AudioStreamingFeatureUnitSetMute;
 8002c0e:	61e3      	str	r3, [r4, #28]
  cf->usb_control_callbacks.GetCurVolume = USB_AudioStreamingFeatureUnitGetCurVolume;
 8002c10:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <USB_AudioStreamingFeatureUnitInit+0x88>)
 8002c12:	6263      	str	r3, [r4, #36]	; 0x24
  cf->usb_control_callbacks.SetCurVolume = USB_AudioStreamingFeatureUnitSetCurVolume;
 8002c14:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <USB_AudioStreamingFeatureUnitInit+0x8c>)
 8002c16:	6223      	str	r3, [r4, #32]
  VOLUME_DB_256_TO_USB(cf->usb_control_callbacks.MaxVolume, audio_defaults->max_volume);
 8002c18:	6833      	ldr	r3, [r6, #0]
 8002c1a:	8523      	strh	r3, [r4, #40]	; 0x28
  VOLUME_DB_256_TO_USB(cf->usb_control_callbacks.MinVolume, audio_defaults->min_volume);
 8002c1c:	6873      	ldr	r3, [r6, #4]
 8002c1e:	8563      	strh	r3, [r4, #42]	; 0x2a
  cf->usb_control_callbacks.ResVolume = audio_defaults->res_volume;
 8002c20:	68b3      	ldr	r3, [r6, #8]
 8002c22:	85a3      	strh	r3, [r4, #44]	; 0x2c
  cf->node.audio_description=audio_defaults->audio_description;
 8002c24:	68f3      	ldr	r3, [r6, #12]
 8002c26:	6063      	str	r3, [r4, #4]
  usb_control_feature->id = unit_id;
 8002c28:	702f      	strb	r7, [r5, #0]
  usb_control_feature->control_req_map = 0;  
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	8068      	strh	r0, [r5, #2]
  usb_control_feature->control_selector_map = USBD_AUDIO_FU_MUTE_CONTROL|USBD_AUDIO_FU_VOLUME_CONTROL;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	80ab      	strh	r3, [r5, #4]
  usb_control_feature->type = USBD_AUDIO_CS_AC_SUBTYPE_FEATURE_UNIT;
 8002c32:	2306      	movs	r3, #6
 8002c34:	706b      	strb	r3, [r5, #1]
  usb_control_feature->Callbacks.feature_control = &cf->usb_control_callbacks;
 8002c36:	f104 0318 	add.w	r3, r4, #24
 8002c3a:	60ab      	str	r3, [r5, #8]
  usb_control_feature->private_data = node_handle;
 8002c3c:	60ec      	str	r4, [r5, #12]
}
 8002c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c40:	08002bd5 	.word	0x08002bd5
 8002c44:	08002a31 	.word	0x08002a31
 8002c48:	08002a39 	.word	0x08002a39
 8002c4c:	08002a5d 	.word	0x08002a5d
 8002c50:	08002a6f 	.word	0x08002a6f
 8002c54:	08002ac1 	.word	0x08002ac1
 8002c58:	08002a65 	.word	0x08002a65
 8002c5c:	08002a8b 	.word	0x08002a8b
 8002c60:	08002a95 	.word	0x08002a95

08002c64 <USB_AudioStreamingOutputGetBuffer>:
{
 8002c64:	b570      	push	{r4, r5, r6, lr}
   if(output_node->node.state == AUDIO_NODE_STARTED)
 8002c66:	7803      	ldrb	r3, [r0, #0]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d16d      	bne.n	8002d48 <USB_AudioStreamingOutputGetBuffer+0xe4>
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	460d      	mov	r5, r1
     if(output_node->flags&AUDIO_IO_RESTART_REQUIRED)
 8002c70:	7d03      	ldrb	r3, [r0, #20]
 8002c72:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002c76:	d12a      	bne.n	8002cce <USB_AudioStreamingOutputGetBuffer+0x6a>
      output_node->node.session_handle->SessionCallback(AUDIO_PACKET_PLAYED, (AUDIO_Node_t*)output_node,
 8002c78:	68c2      	ldr	r2, [r0, #12]
 8002c7a:	6893      	ldr	r3, [r2, #8]
 8002c7c:	4601      	mov	r1, r0
 8002c7e:	2003      	movs	r0, #3
 8002c80:	4798      	blx	r3
    *packet_length = output_node->packet_length;
 8002c82:	8be3      	ldrh	r3, [r4, #30]
 8002c84:	802b      	strh	r3, [r5, #0]
     buf = output_node->buf;
 8002c86:	69a6      	ldr	r6, [r4, #24]
     if(!(output_node->flags&AUDIO_IO_BEGIN_OF_STREAM))
 8002c88:	7d23      	ldrb	r3, [r4, #20]
 8002c8a:	f013 0f01 	tst.w	r3, #1
 8002c8e:	d10d      	bne.n	8002cac <USB_AudioStreamingOutputGetBuffer+0x48>
     if(buf->wr_ptr < (buf->size>>1)) /* first threshold is a half of buffer */
 8002c90:	88f3      	ldrh	r3, [r6, #6]
 8002c92:	8932      	ldrh	r2, [r6, #8]
 8002c94:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8002c98:	d31f      	bcc.n	8002cda <USB_AudioStreamingOutputGetBuffer+0x76>
       output_node->node.session_handle->SessionCallback(AUDIO_BEGIN_OF_STREAM, (AUDIO_Node_t*)output_node,
 8002c9a:	68e2      	ldr	r2, [r4, #12]
 8002c9c:	6893      	ldr	r3, [r2, #8]
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	4798      	blx	r3
       output_node->flags |= AUDIO_IO_BEGIN_OF_STREAM;
 8002ca4:	7d23      	ldrb	r3, [r4, #20]
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	7523      	strb	r3, [r4, #20]
      buffer_data_count = AUDIO_BUFFER_FILLED_SIZE(buf);       
 8002cac:	88f3      	ldrh	r3, [r6, #6]
 8002cae:	88b2      	ldrh	r2, [r6, #4]
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d314      	bcc.n	8002cde <USB_AudioStreamingOutputGetBuffer+0x7a>
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	b29b      	uxth	r3, r3
      if(buffer_data_count < *packet_length)
 8002cb8:	882a      	ldrh	r2, [r5, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d915      	bls.n	8002cea <USB_AudioStreamingOutputGetBuffer+0x86>
       output_node->node.session_handle->SessionCallback(AUDIO_UNDERRUN, (AUDIO_Node_t*)output_node,
 8002cbe:	68e2      	ldr	r2, [r4, #12]
 8002cc0:	6893      	ldr	r3, [r2, #8]
 8002cc2:	4621      	mov	r1, r4
 8002cc4:	2005      	movs	r0, #5
 8002cc6:	4798      	blx	r3
        return output_node->specific.output.alt_buff;
 8002cc8:	6b24      	ldr	r4, [r4, #48]	; 0x30
}
 8002cca:	4620      	mov	r0, r4
 8002ccc:	bd70      	pop	{r4, r5, r6, pc}
       output_node->flags = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	7503      	strb	r3, [r0, #20]
       output_node->buf->rd_ptr = 0;
 8002cd2:	6982      	ldr	r2, [r0, #24]
 8002cd4:	8093      	strh	r3, [r2, #4]
       return output_node->specific.output.alt_buff;
 8002cd6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002cd8:	e7f7      	b.n	8002cca <USB_AudioStreamingOutputGetBuffer+0x66>
        return output_node->specific.output.alt_buff;
 8002cda:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8002cdc:	e7f5      	b.n	8002cca <USB_AudioStreamingOutputGetBuffer+0x66>
      buffer_data_count = AUDIO_BUFFER_FILLED_SIZE(buf);       
 8002cde:	8931      	ldrh	r1, [r6, #8]
 8002ce0:	440b      	add	r3, r1
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	e7e6      	b.n	8002cb8 <USB_AudioStreamingOutputGetBuffer+0x54>
      sample_add_remove = USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt(output_node->node.session_handle);
 8002cea:	68e0      	ldr	r0, [r4, #12]
 8002cec:	f000 fe52 	bl	8003994 <USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt>
      *packet_length += sample_add_remove;
 8002cf0:	882b      	ldrh	r3, [r5, #0]
 8002cf2:	4418      	add	r0, r3
 8002cf4:	b280      	uxth	r0, r0
 8002cf6:	8028      	strh	r0, [r5, #0]
      if(*packet_length > output_node->max_packet_length)
 8002cf8:	8ba3      	ldrh	r3, [r4, #28]
 8002cfa:	4298      	cmp	r0, r3
 8002cfc:	d900      	bls.n	8002d00 <USB_AudioStreamingOutputGetBuffer+0x9c>
        *packet_length = output_node->max_packet_length;
 8002cfe:	802b      	strh	r3, [r5, #0]
      USB_AudioRecordingSynchronizationNotificationSamplesRead(output_node->node.session_handle, *packet_length);
 8002d00:	8829      	ldrh	r1, [r5, #0]
 8002d02:	68e0      	ldr	r0, [r4, #12]
 8002d04:	f000 fe54 	bl	80039b0 <USB_AudioRecordingSynchronizationNotificationSamplesRead>
        packet_data = buf->data + buf->rd_ptr;
 8002d08:	6831      	ldr	r1, [r6, #0]
 8002d0a:	88b3      	ldrh	r3, [r6, #4]
 8002d0c:	18cc      	adds	r4, r1, r3
        buf->rd_ptr += *packet_length;
 8002d0e:	882a      	ldrh	r2, [r5, #0]
 8002d10:	4413      	add	r3, r2
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	80b3      	strh	r3, [r6, #4]
        if(buf->rd_ptr > buf->size)
 8002d16:	8930      	ldrh	r0, [r6, #8]
 8002d18:	4283      	cmp	r3, r0
 8002d1a:	d806      	bhi.n	8002d2a <USB_AudioStreamingOutputGetBuffer+0xc6>
        if(buf->rd_ptr == buf->size)
 8002d1c:	88b2      	ldrh	r2, [r6, #4]
 8002d1e:	8933      	ldrh	r3, [r6, #8]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d1d2      	bne.n	8002cca <USB_AudioStreamingOutputGetBuffer+0x66>
          buf->rd_ptr = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	80b3      	strh	r3, [r6, #4]
     return (packet_data);
 8002d28:	e7cf      	b.n	8002cca <USB_AudioStreamingOutputGetBuffer+0x66>
          buf->rd_ptr -= buf->size;
 8002d2a:	1a1b      	subs	r3, r3, r0
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	80b2      	strh	r2, [r6, #4]
          memcpy(buf->data+buf->size, buf->data, buf->rd_ptr);
 8002d30:	4408      	add	r0, r1
 8002d32:	f00b fd61 	bl	800e7f8 <memcpy>
          if(buf->rd_ptr+buf->size >=USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE)
 8002d36:	88b3      	ldrh	r3, [r6, #4]
 8002d38:	8932      	ldrh	r2, [r6, #8]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d40:	dbec      	blt.n	8002d1c <USB_AudioStreamingOutputGetBuffer+0xb8>
            Error_Handler();
 8002d42:	f00a fd3f 	bl	800d7c4 <Error_Handler>
 8002d46:	e7e9      	b.n	8002d1c <USB_AudioStreamingOutputGetBuffer+0xb8>
     Error_Handler();
 8002d48:	f00a fd3c 	bl	800d7c4 <Error_Handler>
     return 0; /* return statement not reachable */
 8002d4c:	2400      	movs	r4, #0
 8002d4e:	e7bc      	b.n	8002cca <USB_AudioStreamingOutputGetBuffer+0x66>

08002d50 <USB_AudioStreamingInputInit>:
{
 8002d50:	b4f0      	push	{r4, r5, r6, r7}
 8002d52:	4604      	mov	r4, r0
  input_node->node.audio_description = audio_desc;
 8002d54:	6059      	str	r1, [r3, #4]
  input_node->node.session_handle = session_handle;
 8002d56:	60da      	str	r2, [r3, #12]
  input_node->flags = 0;
 8002d58:	2000      	movs	r0, #0
 8002d5a:	7518      	strb	r0, [r3, #20]
  input_node->node.state = AUDIO_NODE_INITIALIZED;
 8002d5c:	2601      	movs	r6, #1
 8002d5e:	701e      	strb	r6, [r3, #0]
  input_node->node.type = AUDIO_INPUT;
 8002d60:	7218      	strb	r0, [r3, #8]
  input_node->IODeInit = USB_AudioStreamingInputOutputDeInit;
 8002d62:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <USB_AudioStreamingInputInit+0x74>)
 8002d64:	621a      	str	r2, [r3, #32]
  input_node->IOStart = USB_AudioStreamingInputOutputStart;
 8002d66:	4a18      	ldr	r2, [pc, #96]	; (8002dc8 <USB_AudioStreamingInputInit+0x78>)
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24
  input_node->IORestart = USB_AudioStreamingInputOutputRestart;
 8002d6a:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <USB_AudioStreamingInputInit+0x7c>)
 8002d6c:	629a      	str	r2, [r3, #40]	; 0x28
  input_node->IOStop = USB_AudioStreamingInputOutputStop;
 8002d6e:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <USB_AudioStreamingInputInit+0x80>)
 8002d70:	62da      	str	r2, [r3, #44]	; 0x2c
  input_node->packet_length = AUDIO_USB_PACKET_SIZE_FROM_AUD_DESC(audio_desc);
 8002d72:	680d      	ldr	r5, [r1, #0]
 8002d74:	4f17      	ldr	r7, [pc, #92]	; (8002dd4 <USB_AudioStreamingInputInit+0x84>)
 8002d76:	fba7 2505 	umull	r2, r5, r7, r5
 8002d7a:	09ad      	lsrs	r5, r5, #6
 8002d7c:	f891 c004 	ldrb.w	ip, [r1, #4]
 8002d80:	7c4a      	ldrb	r2, [r1, #17]
 8002d82:	fb15 f50c 	smulbb	r5, r5, ip
 8002d86:	fb15 f502 	smulbb	r5, r5, r2
 8002d8a:	83dd      	strh	r5, [r3, #30]
  input_node->max_packet_length = AUDIO_MAX_PACKET_WITH_FEEDBACK_LENGTH(audio_desc);
 8002d8c:	680a      	ldr	r2, [r1, #0]
 8002d8e:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8002d92:	fba7 5202 	umull	r5, r2, r7, r2
 8002d96:	0992      	lsrs	r2, r2, #6
 8002d98:	790d      	ldrb	r5, [r1, #4]
 8002d9a:	7c49      	ldrb	r1, [r1, #17]
 8002d9c:	fb12 f205 	smulbb	r2, r2, r5
 8002da0:	fb12 f201 	smulbb	r2, r2, r1
 8002da4:	839a      	strh	r2, [r3, #28]
  data_ep->ep_num = USBD_AUDIO_CONFIG_PLAY_EP_OUT;
 8002da6:	7026      	strb	r6, [r4, #0]
  data_ep->control_name_map = 0;
 8002da8:	8060      	strh	r0, [r4, #2]
  data_ep->control_selector_map = 0;
 8002daa:	80a0      	strh	r0, [r4, #4]
  data_ep->private_data = node_handle;
 8002dac:	6223      	str	r3, [r4, #32]
  data_ep->DataReceived = USB_AudioStreamingInputDataReceived;
 8002dae:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <USB_AudioStreamingInputInit+0x88>)
 8002db0:	6123      	str	r3, [r4, #16]
  data_ep->GetBuffer = USB_AudioStreamingInputGetBuffer;
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <USB_AudioStreamingInputInit+0x8c>)
 8002db4:	6163      	str	r3, [r4, #20]
  data_ep->GetMaxPacketLength = USB_AudioStreamingInputOutputGetMaxPacketLength;
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <USB_AudioStreamingInputInit+0x90>)
 8002db8:	61a3      	str	r3, [r4, #24]
  data_ep->GetState = USB_AudioStreamingInputOutputGetState;
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <USB_AudioStreamingInputInit+0x94>)
 8002dbc:	61e3      	str	r3, [r4, #28]
}
 8002dbe:	bcf0      	pop	{r4, r5, r6, r7}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	080029e5 	.word	0x080029e5
 8002dc8:	080029ed 	.word	0x080029ed
 8002dcc:	08002a19 	.word	0x08002a19
 8002dd0:	08002a11 	.word	0x08002a11
 8002dd4:	10624dd3 	.word	0x10624dd3
 8002dd8:	08002b21 	.word	0x08002b21
 8002ddc:	08002ac5 	.word	0x08002ac5
 8002de0:	08002a29 	.word	0x08002a29
 8002de4:	08002a2d 	.word	0x08002a2d

08002de8 <USB_AudioStreamingOutputInit>:
{
 8002de8:	b570      	push	{r4, r5, r6, lr}
 8002dea:	4606      	mov	r6, r0
 8002dec:	461d      	mov	r5, r3
  output_node->node.audio_description = audio_desc;
 8002dee:	6059      	str	r1, [r3, #4]
  output_node->node.session_handle = session_handle;
 8002df0:	60da      	str	r2, [r3, #12]
  output_node->node.state = AUDIO_NODE_INITIALIZED;
 8002df2:	2301      	movs	r3, #1
 8002df4:	702b      	strb	r3, [r5, #0]
  output_node->node.type = AUDIO_OUTPUT;
 8002df6:	722b      	strb	r3, [r5, #8]
  output_node->max_packet_length = AUDIO_MAX_PACKET_WITH_FEEDBACK_LENGTH(audio_desc);
 8002df8:	680a      	ldr	r2, [r1, #0]
 8002dfa:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8002dfe:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <USB_AudioStreamingOutputInit+0x88>)
 8002e00:	fba2 3404 	umull	r3, r4, r2, r4
 8002e04:	09a4      	lsrs	r4, r4, #6
 8002e06:	7908      	ldrb	r0, [r1, #4]
 8002e08:	7c4b      	ldrb	r3, [r1, #17]
 8002e0a:	fb14 f400 	smulbb	r4, r4, r0
 8002e0e:	fb14 f403 	smulbb	r4, r4, r3
 8002e12:	b2a4      	uxth	r4, r4
 8002e14:	83ac      	strh	r4, [r5, #28]
  output_node->packet_length = AUDIO_USB_PACKET_SIZE_FROM_AUD_DESC(audio_desc);
 8002e16:	680b      	ldr	r3, [r1, #0]
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	099b      	lsrs	r3, r3, #6
 8002e1e:	7908      	ldrb	r0, [r1, #4]
 8002e20:	7c4a      	ldrb	r2, [r1, #17]
 8002e22:	fb13 f300 	smulbb	r3, r3, r0
 8002e26:	fb13 f302 	smulbb	r3, r3, r2
 8002e2a:	83eb      	strh	r3, [r5, #30]
  output_node->specific.output.alt_buff = (uint8_t *) malloc(output_node->max_packet_length);
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	f00b fcd3 	bl	800e7d8 <malloc>
 8002e32:	6328      	str	r0, [r5, #48]	; 0x30
  if(output_node->specific.output.alt_buff)
 8002e34:	b1c8      	cbz	r0, 8002e6a <USB_AudioStreamingOutputInit+0x82>
    memset(output_node->specific.output.alt_buff, 0, output_node->max_packet_length);
 8002e36:	4622      	mov	r2, r4
 8002e38:	2100      	movs	r1, #0
 8002e3a:	f00b fceb 	bl	800e814 <memset>
  output_node->IODeInit = USB_AudioStreamingInputOutputDeInit;
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <USB_AudioStreamingOutputInit+0x8c>)
 8002e40:	622b      	str	r3, [r5, #32]
  output_node->IOStart = USB_AudioStreamingInputOutputStart;
 8002e42:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <USB_AudioStreamingOutputInit+0x90>)
 8002e44:	626b      	str	r3, [r5, #36]	; 0x24
  output_node->IOStop = USB_AudioStreamingInputOutputStop;
 8002e46:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <USB_AudioStreamingOutputInit+0x94>)
 8002e48:	62eb      	str	r3, [r5, #44]	; 0x2c
  output_node->IORestart = USB_AudioStreamingInputOutputRestart;
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <USB_AudioStreamingOutputInit+0x98>)
 8002e4c:	62ab      	str	r3, [r5, #40]	; 0x28
  data_ep->ep_num = USB_AUDIO_CONFIG_RECORD_EP_IN;
 8002e4e:	2382      	movs	r3, #130	; 0x82
 8002e50:	7033      	strb	r3, [r6, #0]
  data_ep->control_name_map = 0;
 8002e52:	2000      	movs	r0, #0
 8002e54:	8070      	strh	r0, [r6, #2]
  data_ep->control_selector_map = 0;
 8002e56:	80b0      	strh	r0, [r6, #4]
  data_ep->private_data = node_handle;
 8002e58:	6235      	str	r5, [r6, #32]
  data_ep->DataReceived = 0;
 8002e5a:	6130      	str	r0, [r6, #16]
  data_ep->GetBuffer = USB_AudioStreamingOutputGetBuffer;
 8002e5c:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <USB_AudioStreamingOutputInit+0x9c>)
 8002e5e:	6173      	str	r3, [r6, #20]
  data_ep->GetMaxPacketLength = USB_AudioStreamingInputOutputGetMaxPacketLength;
 8002e60:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <USB_AudioStreamingOutputInit+0xa0>)
 8002e62:	61b3      	str	r3, [r6, #24]
  data_ep->GetState = USB_AudioStreamingInputOutputGetState;
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <USB_AudioStreamingOutputInit+0xa4>)
 8002e66:	61f3      	str	r3, [r6, #28]
}
 8002e68:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8002e6a:	f00a fcab 	bl	800d7c4 <Error_Handler>
 8002e6e:	e7e6      	b.n	8002e3e <USB_AudioStreamingOutputInit+0x56>
 8002e70:	10624dd3 	.word	0x10624dd3
 8002e74:	080029e5 	.word	0x080029e5
 8002e78:	080029ed 	.word	0x080029ed
 8002e7c:	08002a11 	.word	0x08002a11
 8002e80:	08002a19 	.word	0x08002a19
 8002e84:	08002c65 	.word	0x08002c65
 8002e88:	08002a29 	.word	0x08002a29
 8002e8c:	08002a2d 	.word	0x08002a2d

08002e90 <USB_AudioStreamingInitializeDataBuffer>:
  */
  void USB_AudioStreamingInitializeDataBuffer(AUDIO_CircularBuffer_t* buf, 
                                       uint32_t buffer_size, 
                                       uint16_t packet_size, uint16_t margin)
 {
    buf->size = ((int)((buffer_size - margin )
 8002e90:	1ac9      	subs	r1, r1, r3
                       / packet_size)) * packet_size; 
 8002e92:	fbb1 f1f2 	udiv	r1, r1, r2
    buf->size = ((int)((buffer_size - margin )
 8002e96:	fb11 f202 	smulbb	r2, r1, r2
 8002e9a:	8102      	strh	r2, [r0, #8]
    buf->rd_ptr = buf->wr_ptr = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	80c3      	strh	r3, [r0, #6]
 8002ea0:	8083      	strh	r3, [r0, #4]
 }
 8002ea2:	4770      	bx	lr

08002ea4 <USB_AudioPlaybackSessionStart>:
  * @param  play_session(IN):session handler
  * @retval  : 0 if no error
  */
static int8_t  USB_AudioPlaybackSessionStart(AUDIO_USBSession_t*  play_session)
{
  if(( play_session->session.state == AUDIO_SESSION_INITIALIZED)
 8002ea4:	7903      	ldrb	r3, [r0, #4]
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	bf18      	it	ne
 8002eaa:	2b01      	cmpne	r3, #1
 8002eac:	d11b      	bne.n	8002ee6 <USB_AudioPlaybackSessionStart+0x42>
{
 8002eae:	b530      	push	{r4, r5, lr}
 8002eb0:	b085      	sub	sp, #20
 8002eb2:	4604      	mov	r4, r0
     ||(play_session->session.state == AUDIO_SESSION_STOPPED))
  {
        AUDIO_USBFeatureUnitCommands_t commands;
    /* start input node */
    PlaybackUSBInputNode.IOStart(& play_session->buffer,   play_session->buffer.size/2,  (uint32_t)&PlaybackUSBInputNode);
 8002eb4:	4d0d      	ldr	r5, [pc, #52]	; (8002eec <USB_AudioPlaybackSessionStart+0x48>)
 8002eb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002eb8:	8b81      	ldrh	r1, [r0, #28]
 8002eba:	462a      	mov	r2, r5
 8002ebc:	0849      	lsrs	r1, r1, #1
 8002ebe:	3014      	adds	r0, #20
 8002ec0:	4798      	blx	r3
    commands.private_data = (uint32_t)&PlaybackSpeakerOutputNode;
 8002ec2:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8002ec6:	9303      	str	r3, [sp, #12]
    commands.SetMute = PlaybackSpeakerOutputNode.SpeakerMute;
 8002ec8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002eca:	9301      	str	r3, [sp, #4]
    commands.SetCurrentVolume = PlaybackSpeakerOutputNode.SpeakerSetVolume;
 8002ecc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ece:	9302      	str	r3, [sp, #8]
    PlaybackFeatureUnitNode.CFStart(&commands,(uint32_t)&PlaybackFeatureUnitNode);
 8002ed0:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
 8002ed4:	f105 0188 	add.w	r1, r5, #136	; 0x88
 8002ed8:	a801      	add	r0, sp, #4
 8002eda:	4798      	blx	r3
    play_session->session.state = AUDIO_SESSION_STARTED;
 8002edc:	2302      	movs	r3, #2
 8002ede:	7123      	strb	r3, [r4, #4]
  }
  
  return 0;
}
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	b005      	add	sp, #20
 8002ee4:	bd30      	pop	{r4, r5, pc}
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000558 	.word	0x20000558

08002ef0 <USB_AudioPlaybackSessionStop>:
  *         Stop the playback session
  * @param  play_session:               
  * @retval 0 if no error
  */
static int8_t  USB_AudioPlaybackSessionStop(AUDIO_USBSession_t*  play_session)
{
 8002ef0:	b538      	push	{r3, r4, r5, lr}
  
  if( play_session->session.state == AUDIO_SESSION_STARTED)
 8002ef2:	7903      	ldrb	r3, [r0, #4]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d001      	beq.n	8002efc <USB_AudioPlaybackSessionStop+0xc>
    PlaybackSpeakerOutputNode.SpeakerStop((uint32_t)&PlaybackSpeakerOutputNode);
    play_session->session.state = AUDIO_SESSION_STOPPED;
  }
  
  return 0;
}
 8002ef8:	2000      	movs	r0, #0
 8002efa:	bd38      	pop	{r3, r4, r5, pc}
 8002efc:	4604      	mov	r4, r0
    PlaybackUSBInputNode.IOStop((uint32_t)&PlaybackUSBInputNode);
 8002efe:	4d08      	ldr	r5, [pc, #32]	; (8002f20 <USB_AudioPlaybackSessionStop+0x30>)
 8002f00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002f02:	4628      	mov	r0, r5
 8002f04:	4798      	blx	r3
    PlaybackFeatureUnitNode.CFStop((uint32_t)&PlaybackFeatureUnitNode);
 8002f06:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
 8002f0a:	f105 0088 	add.w	r0, r5, #136	; 0x88
 8002f0e:	4798      	blx	r3
    PlaybackSpeakerOutputNode.SpeakerStop((uint32_t)&PlaybackSpeakerOutputNode);
 8002f10:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002f12:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8002f16:	4798      	blx	r3
    play_session->session.state = AUDIO_SESSION_STOPPED;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	7123      	strb	r3, [r4, #4]
 8002f1c:	e7ec      	b.n	8002ef8 <USB_AudioPlaybackSessionStop+0x8>
 8002f1e:	bf00      	nop
 8002f20:	20000558 	.word	0x20000558

08002f24 <USB_AudioPlaybackSetAudioStreamingInterfaceAlternateSetting>:
  * @param  alternate(IN):                      
  * @param  session_handle(IN): session handle
  * @retval  : 0 if no error
  */
static int8_t  USB_AudioPlaybackSetAudioStreamingInterfaceAlternateSetting( uint8_t alternate , uint32_t session_handle)
{
 8002f24:	b538      	push	{r3, r4, r5, lr}
 8002f26:	460c      	mov	r4, r1
  AUDIO_USBSession_t * play_session;
  
   play_session = (AUDIO_USBSession_t*)session_handle;
  if(alternate  ==  0)
 8002f28:	b948      	cbnz	r0, 8002f3e <USB_AudioPlaybackSetAudioStreamingInterfaceAlternateSetting+0x1a>
  {
    if( play_session->alternate != 0)
 8002f2a:	7c4b      	ldrb	r3, [r1, #17]
 8002f2c:	b90b      	cbnz	r3, 8002f32 <USB_AudioPlaybackSetAudioStreamingInterfaceAlternateSetting+0xe>
      USB_AudioPlaybackSessionStart(play_session);
      play_session->alternate = alternate;
    }
  }
  return 0;
}
 8002f2e:	2000      	movs	r0, #0
 8002f30:	bd38      	pop	{r3, r4, r5, pc}
       USB_AudioPlaybackSessionStop(play_session);
 8002f32:	4608      	mov	r0, r1
 8002f34:	f7ff ffdc 	bl	8002ef0 <USB_AudioPlaybackSessionStop>
       play_session->alternate = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	7463      	strb	r3, [r4, #17]
 8002f3c:	e7f7      	b.n	8002f2e <USB_AudioPlaybackSetAudioStreamingInterfaceAlternateSetting+0xa>
 8002f3e:	4605      	mov	r5, r0
    if( play_session->alternate  ==  0)
 8002f40:	7c4b      	ldrb	r3, [r1, #17]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f3      	bne.n	8002f2e <USB_AudioPlaybackSetAudioStreamingInterfaceAlternateSetting+0xa>
      USB_AudioPlaybackSessionStart(play_session);
 8002f46:	4608      	mov	r0, r1
 8002f48:	f7ff ffac 	bl	8002ea4 <USB_AudioPlaybackSessionStart>
      play_session->alternate = alternate;
 8002f4c:	7465      	strb	r5, [r4, #17]
 8002f4e:	e7ee      	b.n	8002f2e <USB_AudioPlaybackSetAudioStreamingInterfaceAlternateSetting+0xa>

08002f50 <USB_AudioPlaybackGetState>:
  */
static int8_t  USB_AudioPlaybackGetState(uint32_t session_handle)
{  

  return 0;
}
 8002f50:	2000      	movs	r0, #0
 8002f52:	4770      	bx	lr

08002f54 <USB_AudioPlaybackGetFeedback>:
  *         get played sample counter
  * @param  session_handle: session
  * @retval  : 0 if buffer ok , 1 if overrun soon , -1 if underrun soon
  */
static uint32_t   USB_AudioPlaybackGetFeedback( uint32_t session_handle )
{
 8002f54:	4603      	mov	r3, r0
 if((PlaybackSpeakerOutputNode.node.state == AUDIO_NODE_STARTED))
 8002f56:	4a15      	ldr	r2, [pc, #84]	; (8002fac <USB_AudioPlaybackGetFeedback+0x58>)
 8002f58:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002f5c:	2a02      	cmp	r2, #2
 8002f5e:	d003      	beq.n	8002f68 <USB_AudioPlaybackGetFeedback+0x14>
     {
       return PlaybackAudioDescription.frequency + 1000;
     }
    }
  }
 return PlaybackAudioDescription.frequency;
 8002f60:	4b12      	ldr	r3, [pc, #72]	; (8002fac <USB_AudioPlaybackGetFeedback+0x58>)
 8002f62:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
}
 8002f66:	4770      	bx	lr
    if(PlaybackSynchroEstimatedCodecFrequency)
 8002f68:	4a10      	ldr	r2, [pc, #64]	; (8002fac <USB_AudioPlaybackGetFeedback+0x58>)
 8002f6a:	f8d2 00dc 	ldr.w	r0, [r2, #220]	; 0xdc
 8002f6e:	2800      	cmp	r0, #0
 8002f70:	d1f9      	bne.n	8002f66 <USB_AudioPlaybackGetFeedback+0x12>
     wr_distance=AUDIO_BUFFER_FREE_SIZE(buffer);
 8002f72:	8b5a      	ldrh	r2, [r3, #26]
 8002f74:	8b19      	ldrh	r1, [r3, #24]
 8002f76:	428a      	cmp	r2, r1
 8002f78:	d310      	bcc.n	8002f9c <USB_AudioPlaybackGetFeedback+0x48>
 8002f7a:	8b98      	ldrh	r0, [r3, #28]
 8002f7c:	4401      	add	r1, r0
 8002f7e:	1a8a      	subs	r2, r1, r2
     if(wr_distance <= (buffer->size>>2))
 8002f80:	8b9b      	ldrh	r3, [r3, #28]
 8002f82:	0899      	lsrs	r1, r3, #2
 8002f84:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
 8002f88:	d90a      	bls.n	8002fa0 <USB_AudioPlaybackGetFeedback+0x4c>
     if( wr_distance >= (buffer->size - (buffer->size>>2)))
 8002f8a:	1a5b      	subs	r3, r3, r1
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d8e7      	bhi.n	8002f60 <USB_AudioPlaybackGetFeedback+0xc>
       return PlaybackAudioDescription.frequency + 1000;
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <USB_AudioPlaybackGetFeedback+0x58>)
 8002f92:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8002f96:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8002f9a:	4770      	bx	lr
     wr_distance=AUDIO_BUFFER_FREE_SIZE(buffer);
 8002f9c:	1a8a      	subs	r2, r1, r2
 8002f9e:	e7ef      	b.n	8002f80 <USB_AudioPlaybackGetFeedback+0x2c>
       return PlaybackAudioDescription.frequency - 1000;
 8002fa0:	4b02      	ldr	r3, [pc, #8]	; (8002fac <USB_AudioPlaybackGetFeedback+0x58>)
 8002fa2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8002fa6:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
 8002faa:	4770      	bx	lr
 8002fac:	20000558 	.word	0x20000558

08002fb0 <AUDIO_USB_Session_Sof_Received>:
   static uint32_t total_received_sub_samples = 0;
    AUDIO_USBSession_t *session;
    uint16_t read_samples_per_channel ;
    
  session = (AUDIO_USBSession_t*)session_handle;
  if( session->session.state == AUDIO_SESSION_STARTED) 
 8002fb0:	7903      	ldrb	r3, [r0, #4]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d004      	beq.n	8002fc0 <AUDIO_USB_Session_Sof_Received+0x10>
       PlaybackSynchroFirstSofReceived = 1;
    }
  }
  else
  {
    PlaybackSynchroFirstSofReceived = 0;
 8002fb6:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <AUDIO_USB_Session_Sof_Received+0x70>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 8002fbe:	4770      	bx	lr
 {
 8002fc0:	b510      	push	{r4, lr}
   if(PlaybackSynchroFirstSofReceived)
 8002fc2:	4b17      	ldr	r3, [pc, #92]	; (8003020 <AUDIO_USB_Session_Sof_Received+0x70>)
 8002fc4:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8002fc8:	b1db      	cbz	r3, 8003002 <AUDIO_USB_Session_Sof_Received+0x52>
        read_samples_per_channel = PlaybackSpeakerOutputNode.SpeakerGetReadCount((uint32_t)&PlaybackSpeakerOutputNode);
 8002fca:	4c15      	ldr	r4, [pc, #84]	; (8003020 <AUDIO_USB_Session_Sof_Received+0x70>)
 8002fcc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002fce:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8002fd2:	4798      	blx	r3
        total_received_sub_samples += read_samples_per_channel;
 8002fd4:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 8002fd8:	4418      	add	r0, r3
 8002fda:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
        if(++sof_counter == 1000)
 8002fde:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 8002fea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fee:	d115      	bne.n	800301c <AUDIO_USB_Session_Sof_Received+0x6c>
          PlaybackSynchroEstimatedCodecFrequency =((total_received_sub_samples)>>1); 
 8002ff0:	0840      	lsrs	r0, r0, #1
 8002ff2:	f8c4 00dc 	str.w	r0, [r4, #220]	; 0xdc
          sof_counter =0;
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8a4 20fc 	strh.w	r2, [r4, #252]	; 0xfc
          total_received_sub_samples = 0;
 8002ffc:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
 8003000:	e00c      	b.n	800301c <AUDIO_USB_Session_Sof_Received+0x6c>
       PlaybackSpeakerOutputNode.SpeakerStartReadCount((uint32_t)&PlaybackSpeakerOutputNode);
 8003002:	4c07      	ldr	r4, [pc, #28]	; (8003020 <AUDIO_USB_Session_Sof_Received+0x70>)
 8003004:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003006:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800300a:	4798      	blx	r3
       sof_counter = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
       total_received_sub_samples = 0;
 8003012:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
       PlaybackSynchroFirstSofReceived = 1;
 8003016:	2301      	movs	r3, #1
 8003018:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
  }
 }
 800301c:	bd10      	pop	{r4, pc}
 800301e:	bf00      	nop
 8003020:	20000558 	.word	0x20000558

08003024 <USB_AudioPlaybackSessionCallback>:
{
 8003024:	b538      	push	{r3, r4, r5, lr}
 8003026:	4614      	mov	r4, r2
  switch(event)
 8003028:	2805      	cmp	r0, #5
 800302a:	d80f      	bhi.n	800304c <USB_AudioPlaybackSessionCallback+0x28>
 800302c:	2804      	cmp	r0, #4
 800302e:	d236      	bcs.n	800309e <USB_AudioPlaybackSessionCallback+0x7a>
 8003030:	bb98      	cbnz	r0, 800309a <USB_AudioPlaybackSessionCallback+0x76>
    if(node->type  ==  AUDIO_INPUT)
 8003032:	7a0b      	ldrb	r3, [r1, #8]
 8003034:	bb8b      	cbnz	r3, 800309a <USB_AudioPlaybackSessionCallback+0x76>
      PlaybackSpeakerOutputNode.SpeakerStart(& play_session->buffer, (uint32_t)&PlaybackSpeakerOutputNode);
 8003036:	4d22      	ldr	r5, [pc, #136]	; (80030c0 <USB_AudioPlaybackSessionCallback+0x9c>)
 8003038:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800303a:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800303e:	f102 0014 	add.w	r0, r2, #20
 8003042:	4798      	blx	r3
	  PlaybackSynchroFirstSofReceived =0;   /* restart synchronization*/
 8003044:	2300      	movs	r3, #0
 8003046:	f885 30f4 	strb.w	r3, [r5, #244]	; 0xf4
 800304a:	e026      	b.n	800309a <USB_AudioPlaybackSessionCallback+0x76>
  switch(event)
 800304c:	2808      	cmp	r0, #8
 800304e:	d124      	bne.n	800309a <USB_AudioPlaybackSessionCallback+0x76>
     PlaybackSpeakerOutputNode.SpeakerChangeFrequency((uint32_t)&PlaybackSpeakerOutputNode);
 8003050:	4d1b      	ldr	r5, [pc, #108]	; (80030c0 <USB_AudioPlaybackSessionCallback+0x9c>)
 8003052:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8003054:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8003058:	4798      	blx	r3
     uint16_t buffer_margin = (PlaybackUSBInputNode.max_packet_length > PlaybackUSBInputNode.packet_length)? PlaybackUSBInputNode.max_packet_length:0;
 800305a:	8bab      	ldrh	r3, [r5, #28]
 800305c:	8bea      	ldrh	r2, [r5, #30]
 800305e:	4293      	cmp	r3, r2
 8003060:	d800      	bhi.n	8003064 <USB_AudioPlaybackSessionCallback+0x40>
 8003062:	2300      	movs	r3, #0
                                  AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&PlaybackAudioDescription) , buffer_margin);
 8003064:	4d16      	ldr	r5, [pc, #88]	; (80030c0 <USB_AudioPlaybackSessionCallback+0x9c>)
 8003066:	f8d5 10e0 	ldr.w	r1, [r5, #224]	; 0xe0
 800306a:	4a16      	ldr	r2, [pc, #88]	; (80030c4 <USB_AudioPlaybackSessionCallback+0xa0>)
 800306c:	fba2 2101 	umull	r2, r1, r2, r1
 8003070:	0989      	lsrs	r1, r1, #6
 8003072:	f895 00e4 	ldrb.w	r0, [r5, #228]	; 0xe4
 8003076:	f895 20f1 	ldrb.w	r2, [r5, #241]	; 0xf1
  USB_AudioStreamingInitializeDataBuffer(&play_session->buffer, USB_AUDIO_CONFIG_PLAY_BUFFER_SIZE,
 800307a:	fb11 f100 	smulbb	r1, r1, r0
 800307e:	fb11 f202 	smulbb	r2, r1, r2
 8003082:	b292      	uxth	r2, r2
 8003084:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8003088:	f104 0014 	add.w	r0, r4, #20
 800308c:	f7ff ff00 	bl	8002e90 <USB_AudioStreamingInitializeDataBuffer>
     PlaybackSynchroFirstSofReceived =0;
 8003090:	2300      	movs	r3, #0
 8003092:	f885 30f4 	strb.w	r3, [r5, #244]	; 0xf4
     PlaybackSynchroEstimatedCodecFrequency = 0;
 8003096:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
}
 800309a:	2000      	movs	r0, #0
 800309c:	bd38      	pop	{r3, r4, r5, pc}
     PlaybackSpeakerOutputNode.SpeakerStop((uint32_t)&PlaybackSpeakerOutputNode);
 800309e:	4d08      	ldr	r5, [pc, #32]	; (80030c0 <USB_AudioPlaybackSessionCallback+0x9c>)
 80030a0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80030a2:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80030a6:	4798      	blx	r3
     PlaybackSynchroFirstSofReceived =0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	f885 30f4 	strb.w	r3, [r5, #244]	; 0xf4
     PlaybackSynchroEstimatedCodecFrequency = 0;
 80030ae:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
     if( play_session->session.state == AUDIO_SESSION_STARTED)
 80030b2:	7923      	ldrb	r3, [r4, #4]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d1f0      	bne.n	800309a <USB_AudioPlaybackSessionCallback+0x76>
       PlaybackUSBInputNode.IORestart((uint32_t)&PlaybackUSBInputNode);
 80030b8:	4628      	mov	r0, r5
 80030ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80030bc:	4798      	blx	r3
 80030be:	e7ec      	b.n	800309a <USB_AudioPlaybackSessionCallback+0x76>
 80030c0:	20000558 	.word	0x20000558
 80030c4:	10624dd3 	.word	0x10624dd3

080030c8 <USB_AudioPlaybackSessionDeInit>:
{
 80030c8:	b538      	push	{r3, r4, r5, lr}
  if( play_session->session.state != AUDIO_SESSION_OFF)
 80030ca:	7903      	ldrb	r3, [r0, #4]
 80030cc:	b1ab      	cbz	r3, 80030fa <USB_AudioPlaybackSessionDeInit+0x32>
 80030ce:	4604      	mov	r4, r0
    if( play_session->session.state == AUDIO_SESSION_STARTED)
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d014      	beq.n	80030fe <USB_AudioPlaybackSessionDeInit+0x36>
    PlaybackSpeakerOutputNode.SpeakerDeInit((uint32_t)&PlaybackSpeakerOutputNode);
 80030d4:	4d0b      	ldr	r5, [pc, #44]	; (8003104 <USB_AudioPlaybackSessionDeInit+0x3c>)
 80030d6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80030d8:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80030dc:	4798      	blx	r3
    PlaybackFeatureUnitNode.CFDeInit((uint32_t)&PlaybackFeatureUnitNode);
 80030de:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
 80030e2:	f105 0088 	add.w	r0, r5, #136	; 0x88
 80030e6:	4798      	blx	r3
    PlaybackUSBInputNode.IODeInit((uint32_t)&PlaybackUSBInputNode);
 80030e8:	6a2b      	ldr	r3, [r5, #32]
 80030ea:	4628      	mov	r0, r5
 80030ec:	4798      	blx	r3
    if( play_session->buffer.data)
 80030ee:	6960      	ldr	r0, [r4, #20]
 80030f0:	b108      	cbz	r0, 80030f6 <USB_AudioPlaybackSessionDeInit+0x2e>
      free( play_session->buffer.data);
 80030f2:	f00b fb79 	bl	800e7e8 <free>
     play_session->session.state = AUDIO_SESSION_OFF;
 80030f6:	2300      	movs	r3, #0
 80030f8:	7123      	strb	r3, [r4, #4]
}
 80030fa:	2000      	movs	r0, #0
 80030fc:	bd38      	pop	{r3, r4, r5, pc}
      USB_AudioPlaybackSessionStop( play_session);
 80030fe:	f7ff fef7 	bl	8002ef0 <USB_AudioPlaybackSessionStop>
 8003102:	e7e7      	b.n	80030d4 <USB_AudioPlaybackSessionDeInit+0xc>
 8003104:	20000558 	.word	0x20000558

08003108 <AUDIO_PlaybackSessionInit>:
{
 8003108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800310c:	b087      	sub	sp, #28
 800310e:	4606      	mov	r6, r0
 8003110:	9101      	str	r1, [sp, #4]
 8003112:	4617      	mov	r7, r2
 8003114:	461c      	mov	r4, r3
   memset( play_session, 0, sizeof(AUDIO_USBSession_t));
 8003116:	2220      	movs	r2, #32
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f00b fb7a 	bl	800e814 <memset>
   play_session->interface_num = USBD_AUDIO_CONFIG_PLAY_SA_INTERFACE;
 8003120:	2301      	movs	r3, #1
 8003122:	7423      	strb	r3, [r4, #16]
   play_session->alternate = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	7463      	strb	r3, [r4, #17]
   play_session->SessionDeInit = USB_AudioPlaybackSessionDeInit;
 8003128:	4b43      	ldr	r3, [pc, #268]	; (8003238 <AUDIO_PlaybackSessionInit+0x130>)
 800312a:	60e3      	str	r3, [r4, #12]
   play_session->session.SessionCallback = USB_AudioPlaybackSessionCallback;
 800312c:	4b43      	ldr	r3, [pc, #268]	; (800323c <AUDIO_PlaybackSessionInit+0x134>)
 800312e:	60a3      	str	r3, [r4, #8]
   play_session->buffer.size = USB_AUDIO_CONFIG_PLAY_BUFFER_SIZE;
 8003130:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8003134:	83a0      	strh	r0, [r4, #28]
   play_session->buffer.data = malloc( USB_AUDIO_CONFIG_PLAY_BUFFER_SIZE); 
 8003136:	f00b fb4f 	bl	800e7d8 <malloc>
 800313a:	6160      	str	r0, [r4, #20]
   if(! play_session->buffer.data)
 800313c:	2800      	cmp	r0, #0
 800313e:	d077      	beq.n	8003230 <AUDIO_PlaybackSessionInit+0x128>
  PlaybackAudioDescription.resolution = USB_AUDIO_CONFIG_PLAY_RES_BYTE;
 8003140:	4d3f      	ldr	r5, [pc, #252]	; (8003240 <AUDIO_PlaybackSessionInit+0x138>)
 8003142:	2302      	movs	r3, #2
 8003144:	f885 30f1 	strb.w	r3, [r5, #241]	; 0xf1
  PlaybackAudioDescription.audio_type = USBD_AUDIO_FORMAT_TYPE_PCM; /* PCM*/
 8003148:	f04f 0901 	mov.w	r9, #1
 800314c:	f8a5 90e8 	strh.w	r9, [r5, #232]	; 0xe8
  PlaybackAudioDescription.channels_count = USB_AUDIO_CONFIG_PLAY_CHANNEL_COUNT;
 8003150:	f885 30e4 	strb.w	r3, [r5, #228]	; 0xe4
  PlaybackAudioDescription.channels_map = USB_AUDIO_CONFIG_PLAY_CHANNEL_MAP; /* Left and Right */
 8003154:	2303      	movs	r3, #3
 8003156:	f8a5 30e6 	strh.w	r3, [r5, #230]	; 0xe6
  PlaybackAudioDescription.frequency = USB_AUDIO_CONFIG_PLAY_DEF_FREQ;
 800315a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800315e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
  PlaybackAudioDescription.audio_volume_db_256 = VOLUME_SPEAKER_DEFAULT_DB_256;
 8003162:	f04f 0800 	mov.w	r8, #0
 8003166:	f8c5 80ec 	str.w	r8, [r5, #236]	; 0xec
  PlaybackAudioDescription.audio_mute = 0;
 800316a:	f885 80f0 	strb.w	r8, [r5, #240]	; 0xf0
  *control_count = 0;
 800316e:	f887 8000 	strb.w	r8, [r7]
  USB_AudioStreamingInputInit(&as_desc->data_ep,  &PlaybackAudioDescription,  &play_session->session,  (uint32_t)&PlaybackUSBInputNode);
 8003172:	f105 0ae0 	add.w	sl, r5, #224	; 0xe0
 8003176:	462b      	mov	r3, r5
 8003178:	4622      	mov	r2, r4
 800317a:	4651      	mov	r1, sl
 800317c:	1d30      	adds	r0, r6, #4
 800317e:	f7ff fde7 	bl	8002d50 <USB_AudioStreamingInputInit>
   play_session->session.node_list = (AUDIO_Node_t*)&PlaybackUSBInputNode;
 8003182:	6025      	str	r5, [r4, #0]
  controller_defaults.audio_description = &PlaybackAudioDescription;
 8003184:	f8cd a014 	str.w	sl, [sp, #20]
  controller_defaults.max_volume = VOLUME_SPEAKER_MAX_DB_256;
 8003188:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800318c:	9302      	str	r3, [sp, #8]
  controller_defaults.min_volume = VOLUME_SPEAKER_MIN_DB_256;
 800318e:	f5a3 53f8 	sub.w	r3, r3, #7936	; 0x1f00
 8003192:	9303      	str	r3, [sp, #12]
  controller_defaults.res_volume = VOLUME_SPEAKER_RES_DB_256;
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	9304      	str	r3, [sp, #16]
  USB_AudioStreamingFeatureUnitInit( controls_desc,  &controller_defaults,  USB_AUDIO_CONFIG_PLAY_UNIT_FEATURE_ID, (uint32_t)&PlaybackFeatureUnitNode);
 8003198:	f105 0b88 	add.w	fp, r5, #136	; 0x88
 800319c:	465b      	mov	r3, fp
 800319e:	2216      	movs	r2, #22
 80031a0:	a902      	add	r1, sp, #8
 80031a2:	9801      	ldr	r0, [sp, #4]
 80031a4:	f7ff fd16 	bl	8002bd4 <USB_AudioStreamingFeatureUnitInit>
  (*control_count)++;
 80031a8:	783b      	ldrb	r3, [r7, #0]
 80031aa:	444b      	add	r3, r9
 80031ac:	703b      	strb	r3, [r7, #0]
  PlaybackUSBInputNode.node.next = (AUDIO_Node_t*)&PlaybackFeatureUnitNode;
 80031ae:	f8c5 b010 	str.w	fp, [r5, #16]
  AUDIO_SpeakerInit(&PlaybackAudioDescription, &play_session->session, (uint32_t)&PlaybackSpeakerOutputNode);
 80031b2:	f105 0734 	add.w	r7, r5, #52	; 0x34
 80031b6:	463a      	mov	r2, r7
 80031b8:	4621      	mov	r1, r4
 80031ba:	4650      	mov	r0, sl
 80031bc:	f00a fd4a 	bl	800dc54 <AUDIO_SPEAKER_USER_Init>
  PlaybackFeatureUnitNode.node.next = (AUDIO_Node_t*)&PlaybackSpeakerOutputNode;
 80031c0:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
     as_desc->synch_enabled = 1;
 80031c4:	f886 9028 	strb.w	r9, [r6, #40]	; 0x28
     as_desc->synch_ep.ep_num = USB_AUDIO_CONFIG_PLAY_EP_SYNC;
 80031c8:	2381      	movs	r3, #129	; 0x81
 80031ca:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
     as_desc->synch_ep.GetFeedback = USB_AudioPlaybackGetFeedback;
 80031ce:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <AUDIO_PlaybackSessionInit+0x13c>)
 80031d0:	6333      	str	r3, [r6, #48]	; 0x30
     as_desc->synch_ep.private_data = (uint32_t) play_session;
 80031d2:	6374      	str	r4, [r6, #52]	; 0x34
     as_desc->SofReceived = AUDIO_USB_Session_Sof_Received;
 80031d4:	4b1c      	ldr	r3, [pc, #112]	; (8003248 <AUDIO_PlaybackSessionInit+0x140>)
 80031d6:	63b3      	str	r3, [r6, #56]	; 0x38
  as_desc->interface_num =  play_session->interface_num;
 80031d8:	7c23      	ldrb	r3, [r4, #16]
 80031da:	7033      	strb	r3, [r6, #0]
  as_desc->alternate = 0;
 80031dc:	f886 8002 	strb.w	r8, [r6, #2]
  as_desc->max_alternate = AUDIO_USB_PLAYBACK_ALTERNATE;
 80031e0:	f886 9001 	strb.w	r9, [r6, #1]
  as_desc->private_data = session_handle;
 80031e4:	6474      	str	r4, [r6, #68]	; 0x44
  as_desc->SetAS_Alternate = USB_AudioPlaybackSetAudioStreamingInterfaceAlternateSetting;
 80031e6:	4b19      	ldr	r3, [pc, #100]	; (800324c <AUDIO_PlaybackSessionInit+0x144>)
 80031e8:	63f3      	str	r3, [r6, #60]	; 0x3c
  as_desc->GetState = USB_AudioPlaybackGetState;
 80031ea:	4b19      	ldr	r3, [pc, #100]	; (8003250 <AUDIO_PlaybackSessionInit+0x148>)
 80031ec:	6433      	str	r3, [r6, #64]	; 0x40
  uint16_t buffer_margin = (PlaybackUSBInputNode.max_packet_length > PlaybackUSBInputNode.packet_length)?PlaybackUSBInputNode.max_packet_length:0;
 80031ee:	8bab      	ldrh	r3, [r5, #28]
 80031f0:	8bea      	ldrh	r2, [r5, #30]
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d800      	bhi.n	80031f8 <AUDIO_PlaybackSessionInit+0xf0>
 80031f6:	4643      	mov	r3, r8
                                  AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&PlaybackAudioDescription) , buffer_margin);
 80031f8:	4911      	ldr	r1, [pc, #68]	; (8003240 <AUDIO_PlaybackSessionInit+0x138>)
 80031fa:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
 80031fe:	4815      	ldr	r0, [pc, #84]	; (8003254 <AUDIO_PlaybackSessionInit+0x14c>)
 8003200:	fba0 0202 	umull	r0, r2, r0, r2
 8003204:	0992      	lsrs	r2, r2, #6
 8003206:	f891 00e4 	ldrb.w	r0, [r1, #228]	; 0xe4
 800320a:	f891 10f1 	ldrb.w	r1, [r1, #241]	; 0xf1
  USB_AudioStreamingInitializeDataBuffer(&play_session->buffer, USB_AUDIO_CONFIG_PLAY_BUFFER_SIZE,
 800320e:	fb12 f200 	smulbb	r2, r2, r0
 8003212:	fb12 f201 	smulbb	r2, r2, r1
 8003216:	b292      	uxth	r2, r2
 8003218:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800321c:	f104 0014 	add.w	r0, r4, #20
 8003220:	f7ff fe36 	bl	8002e90 <USB_AudioStreamingInitializeDataBuffer>
  play_session->session.state = AUDIO_SESSION_INITIALIZED;
 8003224:	2301      	movs	r3, #1
 8003226:	7123      	strb	r3, [r4, #4]
}
 8003228:	2000      	movs	r0, #0
 800322a:	b007      	add	sp, #28
 800322c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Error_Handler();
 8003230:	f00a fac8 	bl	800d7c4 <Error_Handler>
 8003234:	e784      	b.n	8003140 <AUDIO_PlaybackSessionInit+0x38>
 8003236:	bf00      	nop
 8003238:	080030c9 	.word	0x080030c9
 800323c:	08003025 	.word	0x08003025
 8003240:	20000558 	.word	0x20000558
 8003244:	08002f55 	.word	0x08002f55
 8003248:	08002fb1 	.word	0x08002fb1
 800324c:	08002f25 	.word	0x08002f25
 8003250:	08002f51 	.word	0x08002f51
 8003254:	10624dd3 	.word	0x10624dd3

08003258 <USB_AudioRecordingSessionStart>:
  * @param  rec_session: recording session should be already initialized and not in error state
  * @retval 0 if no error
  */
static  int8_t  USB_AudioRecordingSessionStart( AUDIO_USBSession_t* rec_session)
{
  if(( rec_session->session.state == AUDIO_SESSION_INITIALIZED)
 8003258:	7903      	ldrb	r3, [r0, #4]
 800325a:	2b03      	cmp	r3, #3
 800325c:	bf18      	it	ne
 800325e:	2b01      	cmpne	r3, #1
 8003260:	d125      	bne.n	80032ae <USB_AudioRecordingSessionStart+0x56>
{
 8003262:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003264:	b085      	sub	sp, #20
 8003266:	4604      	mov	r4, r0
       ||(rec_session->session.state == AUDIO_SESSION_STOPPED))
  {
    AUDIO_USBFeatureUnitCommands_t commands;
    /* start feature control node */
    commands.private_data = (uint32_t)&RecordingMicrophoneNode;
 8003268:	4d12      	ldr	r5, [pc, #72]	; (80032b4 <USB_AudioRecordingSessionStart+0x5c>)
 800326a:	9503      	str	r5, [sp, #12]
    commands.SetCurrentVolume = RecordingMicrophoneNode.MicSetVolume;
 800326c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800326e:	9302      	str	r3, [sp, #8]
    commands.SetMute = RecordingMicrophoneNode.MicMute;
 8003270:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003272:	9301      	str	r3, [sp, #4]
    rec_session->buffer.rd_ptr = rec_session->buffer.wr_ptr = 0;
 8003274:	2600      	movs	r6, #0
 8003276:	8346      	strh	r6, [r0, #26]
 8003278:	8306      	strh	r6, [r0, #24]
#if USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO
    RecordingSynchronizationParams.status = 0;
 800327a:	f885 637a 	strb.w	r6, [r5, #890]	; 0x37a
#endif /* USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO */

    /* start the mic */
    RecordingMicrophoneNode.MicStart(&rec_session->buffer, (uint32_t)&RecordingMicrophoneNode);
 800327e:	6a2b      	ldr	r3, [r5, #32]
 8003280:	f100 0714 	add.w	r7, r0, #20
 8003284:	4629      	mov	r1, r5
 8003286:	4638      	mov	r0, r7
 8003288:	4798      	blx	r3
    /* start the feature */
    RecordingFeatureUnitNode.CFStart(&commands, (uint32_t)&RecordingFeatureUnitNode);
 800328a:	f8d5 33c4 	ldr.w	r3, [r5, #964]	; 0x3c4
 800328e:	f505 715f 	add.w	r1, r5, #892	; 0x37c
 8003292:	a801      	add	r0, sp, #4
 8003294:	4798      	blx	r3
    /* start output node */
    RecordingUSBOutputNode.IOStart(&rec_session->buffer, 0, (uint32_t)&RecordingUSBOutputNode);
 8003296:	f8d5 33f4 	ldr.w	r3, [r5, #1012]	; 0x3f4
 800329a:	f505 7274 	add.w	r2, r5, #976	; 0x3d0
 800329e:	4631      	mov	r1, r6
 80032a0:	4638      	mov	r0, r7
 80032a2:	4798      	blx	r3
    rec_session->session.state = AUDIO_SESSION_STARTED; 
 80032a4:	2302      	movs	r3, #2
 80032a6:	7123      	strb	r3, [r4, #4]
  }
  return 0;
}
 80032a8:	2000      	movs	r0, #0
 80032aa:	b005      	add	sp, #20
 80032ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032ae:	2000      	movs	r0, #0
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000658 	.word	0x20000658

080032b8 <USB_AudioRecordingSessionStop>:
  *         stop the recording session
  * @param  rec_session: recording session
  * @retval  : 0 if no error
  */
static int8_t  USB_AudioRecordingSessionStop(AUDIO_USBSession_t *rec_session)
{
 80032b8:	b538      	push	{r3, r4, r5, lr}
  
  if( rec_session->session.state == AUDIO_SESSION_STARTED)
 80032ba:	7903      	ldrb	r3, [r0, #4]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d001      	beq.n	80032c4 <USB_AudioRecordingSessionStop+0xc>
    RecordingMicrophoneNode.MicStop((uint32_t)&RecordingMicrophoneNode);
    rec_session->session.state = AUDIO_SESSION_STOPPED;
  }

  return 0;
}
 80032c0:	2000      	movs	r0, #0
 80032c2:	bd38      	pop	{r3, r4, r5, pc}
 80032c4:	4604      	mov	r4, r0
    RecordingUSBOutputNode.IOStop((uint32_t)&RecordingUSBOutputNode);
 80032c6:	4d08      	ldr	r5, [pc, #32]	; (80032e8 <USB_AudioRecordingSessionStop+0x30>)
 80032c8:	f8d5 33fc 	ldr.w	r3, [r5, #1020]	; 0x3fc
 80032cc:	f505 7074 	add.w	r0, r5, #976	; 0x3d0
 80032d0:	4798      	blx	r3
    RecordingFeatureUnitNode.CFStop((uint32_t)&RecordingFeatureUnitNode);
 80032d2:	f8d5 33c8 	ldr.w	r3, [r5, #968]	; 0x3c8
 80032d6:	f505 705f 	add.w	r0, r5, #892	; 0x37c
 80032da:	4798      	blx	r3
    RecordingMicrophoneNode.MicStop((uint32_t)&RecordingMicrophoneNode);
 80032dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80032de:	4628      	mov	r0, r5
 80032e0:	4798      	blx	r3
    rec_session->session.state = AUDIO_SESSION_STOPPED;
 80032e2:	2303      	movs	r3, #3
 80032e4:	7123      	strb	r3, [r4, #4]
 80032e6:	e7eb      	b.n	80032c0 <USB_AudioRecordingSessionStop+0x8>
 80032e8:	20000658 	.word	0x20000658

080032ec <USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting>:
  * @param  alternate:                  
  * @param  session_handle: session
  * @retval  : 0 if no error
  */
static int8_t  USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting( uint8_t alternate, uint32_t session_handle )
{
 80032ec:	b538      	push	{r3, r4, r5, lr}
 80032ee:	460c      	mov	r4, r1
  AUDIO_USBSession_t *rec_session;
  
  rec_session = (AUDIO_USBSession_t*)session_handle;
  if(alternate  ==  0)
 80032f0:	b948      	cbnz	r0, 8003306 <USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting+0x1a>
  {
    if(rec_session->alternate != 0)
 80032f2:	7c4b      	ldrb	r3, [r1, #17]
 80032f4:	b90b      	cbnz	r3, 80032fa <USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting+0xe>
      USB_AudioRecordingSessionStart(rec_session);
      rec_session->alternate = alternate;
    }
  }
  return 0;
}
 80032f6:	2000      	movs	r0, #0
 80032f8:	bd38      	pop	{r3, r4, r5, pc}
      USB_AudioRecordingSessionStop(rec_session);
 80032fa:	4608      	mov	r0, r1
 80032fc:	f7ff ffdc 	bl	80032b8 <USB_AudioRecordingSessionStop>
      rec_session->alternate = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	7463      	strb	r3, [r4, #17]
 8003304:	e7f7      	b.n	80032f6 <USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting+0xa>
 8003306:	4605      	mov	r5, r0
    if(rec_session->alternate  ==  0)
 8003308:	7c4b      	ldrb	r3, [r1, #17]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f3      	bne.n	80032f6 <USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting+0xa>
      USB_AudioRecordingSessionStart(rec_session);
 800330e:	4608      	mov	r0, r1
 8003310:	f7ff ffa2 	bl	8003258 <USB_AudioRecordingSessionStart>
      rec_session->alternate = alternate;
 8003314:	7465      	strb	r5, [r4, #17]
 8003316:	e7ee      	b.n	80032f6 <USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting+0xa>

08003318 <USB_AudioRecordingGetState>:
  * @retval 0 if no error
  */
static int8_t  USB_AudioRecordingGetState(uint32_t session_handle)
{
  return 0;
}
 8003318:	2000      	movs	r0, #0
 800331a:	4770      	bx	lr

0800331c <USB_AudioRecordingSynchroInit>:
  * @param  buf(IN): data buffer
  * @param  packet_length(IN): packet length
  * @retval None
  */
static void USB_AudioRecordingSynchroInit(AUDIO_CircularBuffer_t *buf, uint32_t packet_length)
{
 800331c:	b410      	push	{r4}
  RecordingSynchronizationParams.packet_size = packet_length;
 800331e:	4b18      	ldr	r3, [pc, #96]	; (8003380 <USB_AudioRecordingSynchroInit+0x64>)
 8003320:	f8a3 136e 	strh.w	r1, [r3, #878]	; 0x36e
  RecordingSynchronizationParams.sample_size = AUDIO_SAMPLE_LENGTH(&RecordingAudioDescription);
 8003324:	f893 2408 	ldrb.w	r2, [r3, #1032]	; 0x408
 8003328:	f893 4415 	ldrb.w	r4, [r3, #1045]	; 0x415
 800332c:	fb12 f204 	smulbb	r2, r2, r4
 8003330:	f883 237b 	strb.w	r2, [r3, #891]	; 0x37b
  RecordingSynchronizationParams.buffer_fill_max_th = buf->size*3/4;
 8003334:	8902      	ldrh	r2, [r0, #8]
 8003336:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800333a:	1080      	asrs	r0, r0, #2
 800333c:	f8a3 0374 	strh.w	r0, [r3, #884]	; 0x374
  RecordingSynchronizationParams.buffer_fill_min_th = buf->size/4;
 8003340:	0890      	lsrs	r0, r2, #2
 8003342:	f8a3 0376 	strh.w	r0, [r3, #886]	; 0x376
  RecordingSynchronizationParams.buffer_fill_moy = buf->size>>1;
 8003346:	0852      	lsrs	r2, r2, #1
 8003348:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
#ifdef USE_USB_HS
  RecordingSynchronizationParams.sample_per_s_th = packet_length<<2;
#else 
  RecordingSynchronizationParams.sample_per_s_th = packet_length>>1;
 800334c:	0849      	lsrs	r1, r1, #1
 800334e:	f8c3 1370 	str.w	r1, [r3, #880]	; 0x370
#endif /* USE_USB_HS */
  RecordingSynchronizationParams.current_frequency = RecordingAudioDescription.frequency;
 8003352:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003356:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
  RecordingSynchronizationParams.mic_estimated_freq = 0;
 800335a:	2200      	movs	r2, #0
 800335c:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
  RecordingSynchronizationParams.write_count_without_read = 0;
 8003360:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
  RecordingSynchronizationParams.mic_usb_diff = 0;
 8003364:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
  RecordingSynchronizationParams.samples = 0;
 8003368:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
  RecordingSynchronizationParams.sof_counter = 0;
 800336c:	f8a3 2364 	strh.w	r2, [r3, #868]	; 0x364
  RecordingSynchronizationParams.written_in_current_second = 0;
 8003370:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
  RecordingSynchronizationParams.status|= AUDIO_SYNC_NEEDED;
  RecordingSynchronizationParams.status = AUDIO_SYNC_STARTED;
 8003374:	2201      	movs	r2, #1
 8003376:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
}
 800337a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	20000658 	.word	0x20000658

08003384 <USB_AudioRecordingSynchroUpdate>:
  *         update synchronization parameters, when needed. This call is done within a SOF interrupt handler.
  * @param  audio_buffer_filled_size: buffer filled size
  * @retval None
  */
static void  USB_AudioRecordingSynchroUpdate(int audio_buffer_filled_size)
{
 8003384:	b410      	push	{r4}
    uint8_t update_synchro = 0;
 
   if((RecordingSynchronizationParams.status&AUDIO_SYNCHRO_OVERRUN_UNDERR_SOON)== 0)
 8003386:	4bb0      	ldr	r3, [pc, #704]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 8003388:	f893 337a 	ldrb.w	r3, [r3, #890]	; 0x37a
 800338c:	f013 0210 	ands.w	r2, r3, #16
 8003390:	f040 8122 	bne.w	80035d8 <USB_AudioRecordingSynchroUpdate+0x254>
   {
     /* NO SOON OVERRUN OR UNDERRUN DETECTED*/
     if((audio_buffer_filled_size<RecordingSynchronizationParams.buffer_fill_max_th) && (audio_buffer_filled_size>RecordingSynchronizationParams.buffer_fill_min_th))
 8003394:	49ac      	ldr	r1, [pc, #688]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 8003396:	f8b1 1374 	ldrh.w	r1, [r1, #884]	; 0x374
 800339a:	4281      	cmp	r1, r0
 800339c:	f340 80b0 	ble.w	8003500 <USB_AudioRecordingSynchroUpdate+0x17c>
 80033a0:	4ca9      	ldr	r4, [pc, #676]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 80033a2:	f8b4 4376 	ldrh.w	r4, [r4, #886]	; 0x376
 80033a6:	4284      	cmp	r4, r0
 80033a8:	f280 80aa 	bge.w	8003500 <USB_AudioRecordingSynchroUpdate+0x17c>
     {
       /* In this block no risk of buffer overflow or underflow*/
       if((RecordingSynchronizationParams.mic_usb_diff < RecordingSynchronizationParams.sample_per_s_th)
 80033ac:	48a6      	ldr	r0, [pc, #664]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 80033ae:	f8d0 1368 	ldr.w	r1, [r0, #872]	; 0x368
 80033b2:	f8d0 0370 	ldr.w	r0, [r0, #880]	; 0x370
 80033b6:	4281      	cmp	r1, r0
 80033b8:	da28      	bge.n	800340c <USB_AudioRecordingSynchroUpdate+0x88>
          &&(RecordingSynchronizationParams.mic_usb_diff > (-RecordingSynchronizationParams.sample_per_s_th)))
 80033ba:	4240      	negs	r0, r0
 80033bc:	4281      	cmp	r1, r0
 80033be:	dd25      	ble.n	800340c <USB_AudioRecordingSynchroUpdate+0x88>
       {
         /* the sample rate drift is less than limits */
          if((RecordingSynchronizationParams.status&AUDIO_SYNCHRO_DRIFT_DETECTED) == 0)
 80033c0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80033c4:	d10a      	bne.n	80033dc <USB_AudioRecordingSynchroUpdate+0x58>
          {
           if( RecordingSynchronizationParams.mic_estimated_freq != RecordingSynchronizationParams.current_frequency)
 80033c6:	4aa0      	ldr	r2, [pc, #640]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 80033c8:	f8d2 135c 	ldr.w	r1, [r2, #860]	; 0x35c
 80033cc:	f8d2 234c 	ldr.w	r2, [r2, #844]	; 0x34c
 80033d0:	4291      	cmp	r1, r2
 80033d2:	d001      	beq.n	80033d8 <USB_AudioRecordingSynchroUpdate+0x54>
           {
             update_synchro = 1;/* frequency value is changed than compute the new frequency */
 80033d4:	2201      	movs	r2, #1
 80033d6:	e09f      	b.n	8003518 <USB_AudioRecordingSynchroUpdate+0x194>
    uint8_t update_synchro = 0;
 80033d8:	461a      	mov	r2, r3
 80033da:	e09d      	b.n	8003518 <USB_AudioRecordingSynchroUpdate+0x194>
           }
          }
          else
          {
            /* in last ms a drift was detected then check if this drift is eliminated */
            if(((RecordingSynchronizationParams.mic_usb_diff<=0 )
 80033dc:	2900      	cmp	r1, #0
 80033de:	dd0c      	ble.n	80033fa <USB_AudioRecordingSynchroUpdate+0x76>
                 &&( RecordingSynchronizationParams.mic_estimated_freq < RecordingSynchronizationParams.current_frequency))||
 80033e0:	2900      	cmp	r1, #0
 80033e2:	f2c0 8099 	blt.w	8003518 <USB_AudioRecordingSynchroUpdate+0x194>
               ( (RecordingSynchronizationParams.mic_usb_diff>=0 )
                  &&( RecordingSynchronizationParams.mic_estimated_freq > RecordingSynchronizationParams.current_frequency)))
 80033e6:	4b98      	ldr	r3, [pc, #608]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 80033e8:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
 80033ec:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 80033f0:	4299      	cmp	r1, r3
 80033f2:	f240 8091 	bls.w	8003518 <USB_AudioRecordingSynchroUpdate+0x194>
            {
               update_synchro = 1;
 80033f6:	2201      	movs	r2, #1
 80033f8:	e08e      	b.n	8003518 <USB_AudioRecordingSynchroUpdate+0x194>
                 &&( RecordingSynchronizationParams.mic_estimated_freq < RecordingSynchronizationParams.current_frequency))||
 80033fa:	4b93      	ldr	r3, [pc, #588]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 80033fc:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
 8003400:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8003404:	4298      	cmp	r0, r3
 8003406:	d2eb      	bcs.n	80033e0 <USB_AudioRecordingSynchroUpdate+0x5c>
               update_synchro = 1;
 8003408:	2201      	movs	r2, #1
 800340a:	e085      	b.n	8003518 <USB_AudioRecordingSynchroUpdate+0x194>
            }
          }
       }
       else
       {
        if(((RecordingSynchronizationParams.mic_usb_diff>0) && ( RecordingSynchronizationParams.mic_estimated_freq > RecordingSynchronizationParams.current_frequency))||
 800340c:	2900      	cmp	r1, #0
 800340e:	dd07      	ble.n	8003420 <USB_AudioRecordingSynchroUpdate+0x9c>
 8003410:	488d      	ldr	r0, [pc, #564]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 8003412:	f8d0 435c 	ldr.w	r4, [r0, #860]	; 0x35c
 8003416:	f8d0 034c 	ldr.w	r0, [r0, #844]	; 0x34c
 800341a:	4284      	cmp	r4, r0
 800341c:	f200 80f6 	bhi.w	800360c <USB_AudioRecordingSynchroUpdate+0x288>
 8003420:	2900      	cmp	r1, #0
 8003422:	db2d      	blt.n	8003480 <USB_AudioRecordingSynchroUpdate+0xfc>
        {
           update_synchro = 1;
        }
        else
        {
          if(RecordingSynchronizationParams.mic_usb_diff > 0)
 8003424:	2900      	cmp	r1, #0
 8003426:	dd1b      	ble.n	8003460 <USB_AudioRecordingSynchroUpdate+0xdc>
          {
            RecordingSynchronizationParams.current_frequency++;
 8003428:	4c87      	ldr	r4, [pc, #540]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 800342a:	f8d4 034c 	ldr.w	r0, [r4, #844]	; 0x34c
 800342e:	3001      	adds	r0, #1
 8003430:	f8c4 034c 	str.w	r0, [r4, #844]	; 0x34c
            RecordingSynchronizationParams.sample_step += (RecordingAudioDescription.frequency < RecordingSynchronizationParams.current_frequency)? (float)RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND:(float)-RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 8003434:	edd4 7ad4 	vldr	s15, [r4, #848]	; 0x350
 8003438:	f8d4 4404 	ldr.w	r4, [r4, #1028]	; 0x404
 800343c:	42a0      	cmp	r0, r4
 800343e:	d928      	bls.n	8003492 <USB_AudioRecordingSynchroUpdate+0x10e>
 8003440:	4881      	ldr	r0, [pc, #516]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 8003442:	f990 037b 	ldrsb.w	r0, [r0, #891]	; 0x37b
 8003446:	ee07 0a10 	vmov	s14, r0
 800344a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800344e:	ed9f 6a7f 	vldr	s12, [pc, #508]	; 800364c <USB_AudioRecordingSynchroUpdate+0x2c8>
 8003452:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8003456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800345a:	487b      	ldr	r0, [pc, #492]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 800345c:	edc0 7ad4 	vstr	s15, [r0, #848]	; 0x350
          }
           if(RecordingSynchronizationParams.mic_usb_diff < 0)
 8003460:	2900      	cmp	r1, #0
 8003462:	db23      	blt.n	80034ac <USB_AudioRecordingSynchroUpdate+0x128>
          {
            RecordingSynchronizationParams.current_frequency--;
            RecordingSynchronizationParams.sample_step += (RecordingAudioDescription.frequency < RecordingSynchronizationParams.current_frequency)? (float)-RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND:(float)RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
          }
          RecordingSynchronizationParams.sample_frac_sum = RecordingSynchronizationParams.sample_size;
 8003464:	4978      	ldr	r1, [pc, #480]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 8003466:	f991 037b 	ldrsb.w	r0, [r1, #891]	; 0x37b
 800346a:	ee07 0a90 	vmov	s15, r0
 800346e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003472:	edc1 7ad5 	vstr	s15, [r1, #852]	; 0x354
          RecordingSynchronizationParams.status|= AUDIO_SYNCHRO_DRIFT_DETECTED;
 8003476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800347a:	f881 337a 	strb.w	r3, [r1, #890]	; 0x37a
 800347e:	e04b      	b.n	8003518 <USB_AudioRecordingSynchroUpdate+0x194>
           ((RecordingSynchronizationParams.mic_usb_diff<0) && ( RecordingSynchronizationParams.mic_estimated_freq < RecordingSynchronizationParams.current_frequency)))
 8003480:	4871      	ldr	r0, [pc, #452]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 8003482:	f8d0 435c 	ldr.w	r4, [r0, #860]	; 0x35c
 8003486:	f8d0 034c 	ldr.w	r0, [r0, #844]	; 0x34c
 800348a:	4284      	cmp	r4, r0
 800348c:	d2ca      	bcs.n	8003424 <USB_AudioRecordingSynchroUpdate+0xa0>
           update_synchro = 1;
 800348e:	2201      	movs	r2, #1
 8003490:	e042      	b.n	8003518 <USB_AudioRecordingSynchroUpdate+0x194>
            RecordingSynchronizationParams.sample_step += (RecordingAudioDescription.frequency < RecordingSynchronizationParams.current_frequency)? (float)RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND:(float)-RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 8003492:	486d      	ldr	r0, [pc, #436]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 8003494:	f990 037b 	ldrsb.w	r0, [r0, #891]	; 0x37b
 8003498:	4240      	negs	r0, r0
 800349a:	ee07 0a10 	vmov	s14, r0
 800349e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80034a2:	ed9f 6a6a 	vldr	s12, [pc, #424]	; 800364c <USB_AudioRecordingSynchroUpdate+0x2c8>
 80034a6:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80034aa:	e7d4      	b.n	8003456 <USB_AudioRecordingSynchroUpdate+0xd2>
            RecordingSynchronizationParams.current_frequency--;
 80034ac:	4866      	ldr	r0, [pc, #408]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 80034ae:	f8d0 134c 	ldr.w	r1, [r0, #844]	; 0x34c
 80034b2:	3901      	subs	r1, #1
 80034b4:	f8c0 134c 	str.w	r1, [r0, #844]	; 0x34c
            RecordingSynchronizationParams.sample_step += (RecordingAudioDescription.frequency < RecordingSynchronizationParams.current_frequency)? (float)-RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND:(float)RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 80034b8:	edd0 7ad4 	vldr	s15, [r0, #848]	; 0x350
 80034bc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80034c0:	4281      	cmp	r1, r0
 80034c2:	d911      	bls.n	80034e8 <USB_AudioRecordingSynchroUpdate+0x164>
 80034c4:	4960      	ldr	r1, [pc, #384]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 80034c6:	f991 137b 	ldrsb.w	r1, [r1, #891]	; 0x37b
 80034ca:	4249      	negs	r1, r1
 80034cc:	ee07 1a10 	vmov	s14, r1
 80034d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80034d4:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 800364c <USB_AudioRecordingSynchroUpdate+0x2c8>
 80034d8:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80034dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034e0:	4959      	ldr	r1, [pc, #356]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 80034e2:	edc1 7ad4 	vstr	s15, [r1, #848]	; 0x350
 80034e6:	e7bd      	b.n	8003464 <USB_AudioRecordingSynchroUpdate+0xe0>
 80034e8:	4957      	ldr	r1, [pc, #348]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 80034ea:	f991 137b 	ldrsb.w	r1, [r1, #891]	; 0x37b
 80034ee:	ee07 1a10 	vmov	s14, r1
 80034f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80034f6:	ed9f 6a55 	vldr	s12, [pc, #340]	; 800364c <USB_AudioRecordingSynchroUpdate+0x2c8>
 80034fa:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80034fe:	e7ed      	b.n	80034dc <USB_AudioRecordingSynchroUpdate+0x158>
        }
       }
     }
     else
     {
       RecordingSynchronizationParams.samples = (audio_buffer_filled_size>=RecordingSynchronizationParams.buffer_fill_max_th)? RecordingSynchronizationParams.sample_size:-RecordingSynchronizationParams.sample_size;
 8003500:	4281      	cmp	r1, r0
 8003502:	dc64      	bgt.n	80035ce <USB_AudioRecordingSynchroUpdate+0x24a>
 8003504:	4950      	ldr	r1, [pc, #320]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 8003506:	f991 037b 	ldrsb.w	r0, [r1, #891]	; 0x37b
 800350a:	494f      	ldr	r1, [pc, #316]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 800350c:	f8c1 0358 	str.w	r0, [r1, #856]	; 0x358
       RecordingSynchronizationParams.status|= AUDIO_SYNCHRO_OVERRUN_UNDERR_SOON;
 8003510:	f043 0310 	orr.w	r3, r3, #16
 8003514:	f881 337a 	strb.w	r3, [r1, #890]	; 0x37a
       update_synchro = 1;
       RecordingSynchronizationParams.status &= ~AUDIO_SYNCHRO_OVERRUN_UNDERR_SOON;
     }
   }
   
   if((RecordingSynchronizationParams.status&AUDIO_SYNCHRO_OVERRUN_UNDERR_SOON) == 0)
 8003518:	4b4b      	ldr	r3, [pc, #300]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 800351a:	f893 337a 	ldrb.w	r3, [r3, #890]	; 0x37a
 800351e:	f013 0f10 	tst.w	r3, #16
 8003522:	d151      	bne.n	80035c8 <USB_AudioRecordingSynchroUpdate+0x244>
   {
     if(update_synchro)
 8003524:	b342      	cbz	r2, 8003578 <USB_AudioRecordingSynchroUpdate+0x1f4>
     {
       RecordingSynchronizationParams.current_frequency = RecordingSynchronizationParams.mic_estimated_freq;
 8003526:	4a48      	ldr	r2, [pc, #288]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 8003528:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
 800352c:	f8c2 334c 	str.w	r3, [r2, #844]	; 0x34c
       if(RecordingAudioDescription.frequency > RecordingSynchronizationParams.current_frequency)
 8003530:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8003534:	4293      	cmp	r3, r2
 8003536:	d26d      	bcs.n	8003614 <USB_AudioRecordingSynchroUpdate+0x290>
       {
         RecordingSynchronizationParams.sample_step = (float)((RecordingAudioDescription.frequency - RecordingSynchronizationParams.current_frequency))*RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003542:	4b41      	ldr	r3, [pc, #260]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 8003544:	f993 237b 	ldrsb.w	r2, [r3, #891]	; 0x37b
 8003548:	ee07 2a10 	vmov	s14, r2
 800354c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003554:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800364c <USB_AudioRecordingSynchroUpdate+0x2c8>
 8003558:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800355c:	ed83 7ad4 	vstr	s14, [r3, #848]	; 0x350
       }
       else
       {
         RecordingSynchronizationParams.sample_step = (float)((RecordingSynchronizationParams.current_frequency- RecordingAudioDescription.frequency))*RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
       }
       RecordingSynchronizationParams.status = (AUDIO_SYNC_NEEDED|AUDIO_SYNC_STARTED|AUDIO_SYNCHRO_MIC_COUNTER_STARTED);
 8003560:	4b39      	ldr	r3, [pc, #228]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 8003562:	220b      	movs	r2, #11
 8003564:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
       RecordingSynchronizationParams.sample_frac_sum = 0;
 8003568:	2200      	movs	r2, #0
 800356a:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
       RecordingSynchronizationParams.samples = 0;
 800356e:	2200      	movs	r2, #0
 8003570:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
       RecordingSynchronizationParams.mic_usb_diff = 0;
 8003574:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
    }
    
    if(RecordingSynchronizationParams.sample_step)
 8003578:	4b33      	ldr	r3, [pc, #204]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 800357a:	edd3 7ad4 	vldr	s15, [r3, #848]	; 0x350
 800357e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003586:	d01f      	beq.n	80035c8 <USB_AudioRecordingSynchroUpdate+0x244>
    {
       RecordingSynchronizationParams.sample_frac_sum+=RecordingSynchronizationParams.sample_step;
 8003588:	ed93 7ad5 	vldr	s14, [r3, #852]	; 0x354
 800358c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003590:	edc3 7ad5 	vstr	s15, [r3, #852]	; 0x354
       if(RecordingSynchronizationParams.sample_frac_sum>RecordingSynchronizationParams.sample_size)
 8003594:	f993 337b 	ldrsb.w	r3, [r3, #891]	; 0x37b
 8003598:	ee07 3a10 	vmov	s14, r3
 800359c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80035a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a8:	dd49      	ble.n	800363e <USB_AudioRecordingSynchroUpdate+0x2ba>
       {
         RecordingSynchronizationParams.samples = (RecordingAudioDescription.frequency < RecordingSynchronizationParams.current_frequency)?RecordingSynchronizationParams.sample_size:-RecordingSynchronizationParams.sample_size;
 80035aa:	4a27      	ldr	r2, [pc, #156]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 80035ac:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 80035b0:	f8d2 234c 	ldr.w	r2, [r2, #844]	; 0x34c
 80035b4:	4291      	cmp	r1, r2
 80035b6:	d300      	bcc.n	80035ba <USB_AudioRecordingSynchroUpdate+0x236>
 80035b8:	425b      	negs	r3, r3
 80035ba:	4a23      	ldr	r2, [pc, #140]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 80035bc:	f8c2 3358 	str.w	r3, [r2, #856]	; 0x358
         RecordingSynchronizationParams.sample_frac_sum -= RecordingSynchronizationParams.sample_size;
 80035c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035c4:	edc2 7ad5 	vstr	s15, [r2, #852]	; 0x354
       {
         RecordingSynchronizationParams.samples = 0;
       }
     }
   }
}
 80035c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035cc:	4770      	bx	lr
       RecordingSynchronizationParams.samples = (audio_buffer_filled_size>=RecordingSynchronizationParams.buffer_fill_max_th)? RecordingSynchronizationParams.sample_size:-RecordingSynchronizationParams.sample_size;
 80035ce:	491e      	ldr	r1, [pc, #120]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 80035d0:	f991 037b 	ldrsb.w	r0, [r1, #891]	; 0x37b
 80035d4:	4240      	negs	r0, r0
 80035d6:	e798      	b.n	800350a <USB_AudioRecordingSynchroUpdate+0x186>
     if(((RecordingSynchronizationParams.samples>0)&&(audio_buffer_filled_size>=RecordingSynchronizationParams.buffer_fill_moy))||
 80035d8:	4a1b      	ldr	r2, [pc, #108]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 80035da:	f8d2 2358 	ldr.w	r2, [r2, #856]	; 0x358
 80035de:	2a00      	cmp	r2, #0
 80035e0:	dd04      	ble.n	80035ec <USB_AudioRecordingSynchroUpdate+0x268>
 80035e2:	4919      	ldr	r1, [pc, #100]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 80035e4:	f8b1 1378 	ldrh.w	r1, [r1, #888]	; 0x378
 80035e8:	4281      	cmp	r1, r0
 80035ea:	dd08      	ble.n	80035fe <USB_AudioRecordingSynchroUpdate+0x27a>
 80035ec:	2a00      	cmp	r2, #0
 80035ee:	db01      	blt.n	80035f4 <USB_AudioRecordingSynchroUpdate+0x270>
    uint8_t update_synchro = 0;
 80035f0:	2200      	movs	r2, #0
 80035f2:	e791      	b.n	8003518 <USB_AudioRecordingSynchroUpdate+0x194>
        ((RecordingSynchronizationParams.samples<0)&&(audio_buffer_filled_size<=RecordingSynchronizationParams.buffer_fill_moy)))
 80035f4:	4a14      	ldr	r2, [pc, #80]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 80035f6:	f8b2 2378 	ldrh.w	r2, [r2, #888]	; 0x378
 80035fa:	4282      	cmp	r2, r0
 80035fc:	db08      	blt.n	8003610 <USB_AudioRecordingSynchroUpdate+0x28c>
       RecordingSynchronizationParams.status &= ~AUDIO_SYNCHRO_OVERRUN_UNDERR_SOON;
 80035fe:	f023 0310 	bic.w	r3, r3, #16
 8003602:	4a11      	ldr	r2, [pc, #68]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 8003604:	f882 337a 	strb.w	r3, [r2, #890]	; 0x37a
       update_synchro = 1;
 8003608:	2201      	movs	r2, #1
 800360a:	e785      	b.n	8003518 <USB_AudioRecordingSynchroUpdate+0x194>
           update_synchro = 1;
 800360c:	2201      	movs	r2, #1
 800360e:	e783      	b.n	8003518 <USB_AudioRecordingSynchroUpdate+0x194>
    uint8_t update_synchro = 0;
 8003610:	2200      	movs	r2, #0
 8003612:	e781      	b.n	8003518 <USB_AudioRecordingSynchroUpdate+0x194>
         RecordingSynchronizationParams.sample_step = (float)((RecordingSynchronizationParams.current_frequency- RecordingAudioDescription.frequency))*RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	ee07 3a90 	vmov	s15, r3
 800361a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361e:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 8003620:	f993 237b 	ldrsb.w	r2, [r3, #891]	; 0x37b
 8003624:	ee07 2a10 	vmov	s14, r2
 8003628:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800362c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003630:	eddf 6a06 	vldr	s13, [pc, #24]	; 800364c <USB_AudioRecordingSynchroUpdate+0x2c8>
 8003634:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003638:	ed83 7ad4 	vstr	s14, [r3, #848]	; 0x350
 800363c:	e790      	b.n	8003560 <USB_AudioRecordingSynchroUpdate+0x1dc>
         RecordingSynchronizationParams.samples = 0;
 800363e:	4b02      	ldr	r3, [pc, #8]	; (8003648 <USB_AudioRecordingSynchroUpdate+0x2c4>)
 8003640:	2200      	movs	r2, #0
 8003642:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
}
 8003646:	e7bf      	b.n	80035c8 <USB_AudioRecordingSynchroUpdate+0x244>
 8003648:	20000658 	.word	0x20000658
 800364c:	447a0000 	.word	0x447a0000

08003650 <USB_AudioRecordingSofReceived>:
 {
 8003650:	b538      	push	{r3, r4, r5, lr}
  if(( rec_session->session.state == AUDIO_SESSION_STARTED)&&(  RecordingSynchronizationParams.status & AUDIO_SYNC_STARTED))
 8003652:	7903      	ldrb	r3, [r0, #4]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d000      	beq.n	800365a <USB_AudioRecordingSofReceived+0xa>
 }
 8003658:	bd38      	pop	{r3, r4, r5, pc}
 800365a:	4604      	mov	r4, r0
  if(( rec_session->session.state == AUDIO_SESSION_STARTED)&&(  RecordingSynchronizationParams.status & AUDIO_SYNC_STARTED))
 800365c:	4b34      	ldr	r3, [pc, #208]	; (8003730 <USB_AudioRecordingSofReceived+0xe0>)
 800365e:	f893 337a 	ldrb.w	r3, [r3, #890]	; 0x37a
 8003662:	f013 0f01 	tst.w	r3, #1
 8003666:	d0f7      	beq.n	8003658 <USB_AudioRecordingSofReceived+0x8>
   if(RecordingSynchronizationParams.status&AUDIO_SYNCHRO_MIC_COUNTER_STARTED)
 8003668:	f013 0f08 	tst.w	r3, #8
 800366c:	d055      	beq.n	800371a <USB_AudioRecordingSofReceived+0xca>
      read_bytes = RecordingMicrophoneNode.MicGetReadCount((uint32_t)&RecordingMicrophoneNode);
 800366e:	4d30      	ldr	r5, [pc, #192]	; (8003730 <USB_AudioRecordingSofReceived+0xe0>)
 8003670:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003672:	4628      	mov	r0, r5
 8003674:	4798      	blx	r3
      RecordingSynchronizationParams.written_in_current_second += read_bytes;
 8003676:	f8d5 2360 	ldr.w	r2, [r5, #864]	; 0x360
 800367a:	4402      	add	r2, r0
 800367c:	f8c5 2360 	str.w	r2, [r5, #864]	; 0x360
       if(++RecordingSynchronizationParams.sof_counter == USB_SOF_COUNT_PER_SECOND)
 8003680:	f8b5 3364 	ldrh.w	r3, [r5, #868]	; 0x364
 8003684:	3301      	adds	r3, #1
 8003686:	b29b      	uxth	r3, r3
 8003688:	f8a5 3364 	strh.w	r3, [r5, #868]	; 0x364
 800368c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003690:	d011      	beq.n	80036b6 <USB_AudioRecordingSofReceived+0x66>
      RecordingSynchronizationParams.mic_usb_diff += read_bytes;
 8003692:	4b27      	ldr	r3, [pc, #156]	; (8003730 <USB_AudioRecordingSofReceived+0xe0>)
 8003694:	f8d3 2368 	ldr.w	r2, [r3, #872]	; 0x368
 8003698:	4410      	add	r0, r2
 800369a:	f8c3 0368 	str.w	r0, [r3, #872]	; 0x368
      if(RecordingSynchronizationParams.mic_estimated_freq)
 800369e:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
 80036a2:	b1d3      	cbz	r3, 80036da <USB_AudioRecordingSofReceived+0x8a>
        audio_buffer_filled_size = AUDIO_BUFFER_FILLED_SIZE(&rec_session->buffer);
 80036a4:	8b63      	ldrh	r3, [r4, #26]
 80036a6:	8b22      	ldrh	r2, [r4, #24]
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d310      	bcc.n	80036ce <USB_AudioRecordingSofReceived+0x7e>
 80036ac:	1a98      	subs	r0, r3, r2
 80036ae:	b280      	uxth	r0, r0
        USB_AudioRecordingSynchroUpdate(audio_buffer_filled_size);
 80036b0:	f7ff fe68 	bl	8003384 <USB_AudioRecordingSynchroUpdate>
 80036b4:	e7d0      	b.n	8003658 <USB_AudioRecordingSofReceived+0x8>
        RecordingSynchronizationParams.mic_estimated_freq = RecordingSynchronizationParams.written_in_current_second/RecordingSynchronizationParams.sample_size;/* the new estimated frequency */
 80036b6:	f995 137b 	ldrsb.w	r1, [r5, #891]	; 0x37b
 80036ba:	fbb2 f2f1 	udiv	r2, r2, r1
 80036be:	f8c5 235c 	str.w	r2, [r5, #860]	; 0x35c
        RecordingSynchronizationParams.sof_counter = 0;
 80036c2:	2200      	movs	r2, #0
 80036c4:	f8a5 2364 	strh.w	r2, [r5, #868]	; 0x364
        RecordingSynchronizationParams.written_in_current_second = 0;
 80036c8:	f8c5 2360 	str.w	r2, [r5, #864]	; 0x360
 80036cc:	e7e1      	b.n	8003692 <USB_AudioRecordingSofReceived+0x42>
        audio_buffer_filled_size = AUDIO_BUFFER_FILLED_SIZE(&rec_session->buffer);
 80036ce:	8ba0      	ldrh	r0, [r4, #28]
 80036d0:	4418      	add	r0, r3
 80036d2:	b280      	uxth	r0, r0
 80036d4:	1a80      	subs	r0, r0, r2
 80036d6:	b280      	uxth	r0, r0
 80036d8:	e7ea      	b.n	80036b0 <USB_AudioRecordingSofReceived+0x60>
        if(RecordingSynchronizationParams.mic_usb_diff >= RecordingSynchronizationParams.packet_size*2)
 80036da:	4b15      	ldr	r3, [pc, #84]	; (8003730 <USB_AudioRecordingSofReceived+0xe0>)
 80036dc:	f8b3 336e 	ldrh.w	r3, [r3, #878]	; 0x36e
 80036e0:	005a      	lsls	r2, r3, #1
 80036e2:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 80036e6:	db05      	blt.n	80036f4 <USB_AudioRecordingSofReceived+0xa4>
          RecordingSynchronizationParams.samples = RecordingSynchronizationParams.sample_size;
 80036e8:	4b11      	ldr	r3, [pc, #68]	; (8003730 <USB_AudioRecordingSofReceived+0xe0>)
 80036ea:	f993 237b 	ldrsb.w	r2, [r3, #891]	; 0x37b
 80036ee:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
 80036f2:	e7b1      	b.n	8003658 <USB_AudioRecordingSofReceived+0x8>
          if(RecordingSynchronizationParams.mic_usb_diff + 2*RecordingSynchronizationParams.packet_size <= 0)
 80036f4:	4402      	add	r2, r0
 80036f6:	2a00      	cmp	r2, #0
 80036f8:	dd08      	ble.n	800370c <USB_AudioRecordingSofReceived+0xbc>
          if((RecordingSynchronizationParams.mic_usb_diff <= RecordingSynchronizationParams.packet_size)&&
 80036fa:	4298      	cmp	r0, r3
 80036fc:	dcac      	bgt.n	8003658 <USB_AudioRecordingSofReceived+0x8>
 80036fe:	42d8      	cmn	r0, r3
 8003700:	d4aa      	bmi.n	8003658 <USB_AudioRecordingSofReceived+0x8>
            RecordingSynchronizationParams.samples = 0;
 8003702:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <USB_AudioRecordingSofReceived+0xe0>)
 8003704:	2200      	movs	r2, #0
 8003706:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
 800370a:	e7a5      	b.n	8003658 <USB_AudioRecordingSofReceived+0x8>
            RecordingSynchronizationParams.samples = -RecordingSynchronizationParams.sample_size;
 800370c:	4a08      	ldr	r2, [pc, #32]	; (8003730 <USB_AudioRecordingSofReceived+0xe0>)
 800370e:	f992 337b 	ldrsb.w	r3, [r2, #891]	; 0x37b
 8003712:	425b      	negs	r3, r3
 8003714:	f8c2 3358 	str.w	r3, [r2, #856]	; 0x358
 8003718:	e79e      	b.n	8003658 <USB_AudioRecordingSofReceived+0x8>
      RecordingMicrophoneNode.MicStartReadCount((uint32_t)&RecordingMicrophoneNode);
 800371a:	4c05      	ldr	r4, [pc, #20]	; (8003730 <USB_AudioRecordingSofReceived+0xe0>)
 800371c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800371e:	4620      	mov	r0, r4
 8003720:	4798      	blx	r3
      RecordingSynchronizationParams.status |= AUDIO_SYNCHRO_MIC_COUNTER_STARTED;
 8003722:	f894 337a 	ldrb.w	r3, [r4, #890]	; 0x37a
 8003726:	f043 0308 	orr.w	r3, r3, #8
 800372a:	f884 337a 	strb.w	r3, [r4, #890]	; 0x37a
 }
 800372e:	e793      	b.n	8003658 <USB_AudioRecordingSofReceived+0x8>
 8003730:	20000658 	.word	0x20000658

08003734 <USB_AudioRecordingSessionCallback>:
{
 8003734:	b570      	push	{r4, r5, r6, lr}
 8003736:	4614      	mov	r4, r2
  switch(event)
 8003738:	1e43      	subs	r3, r0, #1
 800373a:	2b07      	cmp	r3, #7
 800373c:	d82d      	bhi.n	800379a <USB_AudioRecordingSessionCallback+0x66>
 800373e:	e8df f003 	tbb	[pc, r3]
 8003742:	4d69      	.short	0x4d69
 8003744:	2c2e2e64 	.word	0x2c2e2e64
 8003748:	042c      	.short	0x042c
      RecordingMicrophoneNode.MicChangeFrequency((uint32_t)&RecordingMicrophoneNode);
 800374a:	4d36      	ldr	r5, [pc, #216]	; (8003824 <USB_AudioRecordingSessionCallback+0xf0>)
 800374c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800374e:	4628      	mov	r0, r5
 8003750:	4798      	blx	r3
       USB_AudioRecordingSynchroInit(&rec_session->buffer, RecordingUSBOutputNode.packet_length);
 8003752:	3414      	adds	r4, #20
 8003754:	f8b5 13ee 	ldrh.w	r1, [r5, #1006]	; 0x3ee
 8003758:	4620      	mov	r0, r4
 800375a:	f7ff fddf 	bl	800331c <USB_AudioRecordingSynchroInit>
                                AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription) ,
 800375e:	f8d5 3404 	ldr.w	r3, [r5, #1028]	; 0x404
 8003762:	4e31      	ldr	r6, [pc, #196]	; (8003828 <USB_AudioRecordingSessionCallback+0xf4>)
 8003764:	fba6 1203 	umull	r1, r2, r6, r3
 8003768:	0992      	lsrs	r2, r2, #6
USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 800376a:	f895 0408 	ldrb.w	r0, [r5, #1032]	; 0x408
 800376e:	f895 1415 	ldrb.w	r1, [r5, #1045]	; 0x415
                                AUDIO_MS_MAX_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription));
 8003772:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8003776:	fba6 5303 	umull	r5, r3, r6, r3
 800377a:	099b      	lsrs	r3, r3, #6
USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 800377c:	fb13 f300 	smulbb	r3, r3, r0
 8003780:	fb13 f301 	smulbb	r3, r3, r1
 8003784:	fb12 f200 	smulbb	r2, r2, r0
 8003788:	fb12 f201 	smulbb	r2, r2, r1
 800378c:	b29b      	uxth	r3, r3
 800378e:	b292      	uxth	r2, r2
 8003790:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003794:	4620      	mov	r0, r4
 8003796:	f7ff fb7b 	bl	8002e90 <USB_AudioStreamingInitializeDataBuffer>
}
 800379a:	2000      	movs	r0, #0
 800379c:	bd70      	pop	{r4, r5, r6, pc}
      if(event == AUDIO_OVERRUN)
 800379e:	2804      	cmp	r0, #4
 80037a0:	d015      	beq.n	80037ce <USB_AudioRecordingSessionCallback+0x9a>
        underrun_count++;
 80037a2:	4a20      	ldr	r2, [pc, #128]	; (8003824 <USB_AudioRecordingSessionCallback+0xf0>)
 80037a4:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 80037a8:	3301      	adds	r3, #1
 80037aa:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
          rec_session->buffer.rd_ptr = rec_session->buffer.wr_ptr = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	8363      	strh	r3, [r4, #26]
 80037b2:	8323      	strh	r3, [r4, #24]
      USB_AudioRecordingSynchroInit(&rec_session->buffer, RecordingUSBOutputNode.packet_length);
 80037b4:	4d1b      	ldr	r5, [pc, #108]	; (8003824 <USB_AudioRecordingSessionCallback+0xf0>)
 80037b6:	f8b5 13ee 	ldrh.w	r1, [r5, #1006]	; 0x3ee
 80037ba:	f104 0014 	add.w	r0, r4, #20
 80037be:	f7ff fdad 	bl	800331c <USB_AudioRecordingSynchroInit>
      RecordingUSBOutputNode.IORestart((uint32_t)&RecordingUSBOutputNode);
 80037c2:	f8d5 33f8 	ldr.w	r3, [r5, #1016]	; 0x3f8
 80037c6:	f505 7074 	add.w	r0, r5, #976	; 0x3d0
 80037ca:	4798      	blx	r3
    break;
 80037cc:	e7e5      	b.n	800379a <USB_AudioRecordingSessionCallback+0x66>
        overrun_count++;
 80037ce:	4a15      	ldr	r2, [pc, #84]	; (8003824 <USB_AudioRecordingSessionCallback+0xf0>)
 80037d0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
 80037d4:	3301      	adds	r3, #1
 80037d6:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
 80037da:	e7e8      	b.n	80037ae <USB_AudioRecordingSessionCallback+0x7a>
    if(++RecordingSynchronizationParams.write_count_without_read == 4)
 80037dc:	4a11      	ldr	r2, [pc, #68]	; (8003824 <USB_AudioRecordingSessionCallback+0xf0>)
 80037de:	f992 336c 	ldrsb.w	r3, [r2, #876]	; 0x36c
 80037e2:	3301      	adds	r3, #1
 80037e4:	b25b      	sxtb	r3, r3
 80037e6:	f882 336c 	strb.w	r3, [r2, #876]	; 0x36c
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d1d5      	bne.n	800379a <USB_AudioRecordingSessionCallback+0x66>
        rec_session->buffer.rd_ptr = rec_session->buffer.wr_ptr = 0;
 80037ee:	2500      	movs	r5, #0
 80037f0:	8365      	strh	r5, [r4, #26]
 80037f2:	8325      	strh	r5, [r4, #24]
        RecordingSynchronizationParams.status = 0;
 80037f4:	4614      	mov	r4, r2
 80037f6:	f882 537a 	strb.w	r5, [r2, #890]	; 0x37a
        RecordingUSBOutputNode.IORestart((uint32_t)&RecordingUSBOutputNode);
 80037fa:	f8d2 33f8 	ldr.w	r3, [r2, #1016]	; 0x3f8
 80037fe:	f502 7074 	add.w	r0, r2, #976	; 0x3d0
 8003802:	4798      	blx	r3
        RecordingSynchronizationParams.write_count_without_read = 0;
 8003804:	f884 536c 	strb.w	r5, [r4, #876]	; 0x36c
 8003808:	e7c7      	b.n	800379a <USB_AudioRecordingSessionCallback+0x66>
    RecordingSynchronizationParams.write_count_without_read = 0;
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <USB_AudioRecordingSessionCallback+0xf0>)
 800380c:	2200      	movs	r2, #0
 800380e:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
    break;
 8003812:	e7c2      	b.n	800379a <USB_AudioRecordingSessionCallback+0x66>
    USB_AudioRecordingSynchroInit(&rec_session->buffer, RecordingUSBOutputNode.packet_length);
 8003814:	4b03      	ldr	r3, [pc, #12]	; (8003824 <USB_AudioRecordingSessionCallback+0xf0>)
 8003816:	f8b3 13ee 	ldrh.w	r1, [r3, #1006]	; 0x3ee
 800381a:	f104 0014 	add.w	r0, r4, #20
 800381e:	f7ff fd7d 	bl	800331c <USB_AudioRecordingSynchroInit>
    break;
 8003822:	e7ba      	b.n	800379a <USB_AudioRecordingSessionCallback+0x66>
 8003824:	20000658 	.word	0x20000658
 8003828:	10624dd3 	.word	0x10624dd3

0800382c <USB_AudioRecordingSessionDeInit>:
{
 800382c:	b538      	push	{r3, r4, r5, lr}
  if( rec_session->session.state != AUDIO_SESSION_OFF)
 800382e:	7903      	ldrb	r3, [r0, #4]
 8003830:	b1b3      	cbz	r3, 8003860 <USB_AudioRecordingSessionDeInit+0x34>
 8003832:	4604      	mov	r4, r0
    if( rec_session->session.state == AUDIO_SESSION_STARTED)
 8003834:	2b02      	cmp	r3, #2
 8003836:	d015      	beq.n	8003864 <USB_AudioRecordingSessionDeInit+0x38>
    RecordingMicrophoneNode.MicDeInit((uint32_t)&RecordingMicrophoneNode);
 8003838:	4d0c      	ldr	r5, [pc, #48]	; (800386c <USB_AudioRecordingSessionDeInit+0x40>)
 800383a:	69eb      	ldr	r3, [r5, #28]
 800383c:	4628      	mov	r0, r5
 800383e:	4798      	blx	r3
    RecordingUSBOutputNode.IODeInit((uint32_t)&RecordingUSBOutputNode);
 8003840:	f8d5 33f0 	ldr.w	r3, [r5, #1008]	; 0x3f0
 8003844:	f505 7074 	add.w	r0, r5, #976	; 0x3d0
 8003848:	4798      	blx	r3
    RecordingFeatureUnitNode.CFDeInit((uint32_t)&RecordingFeatureUnitNode);
 800384a:	f8d5 33c0 	ldr.w	r3, [r5, #960]	; 0x3c0
 800384e:	f505 705f 	add.w	r0, r5, #892	; 0x37c
 8003852:	4798      	blx	r3
    if( rec_session->buffer.data)
 8003854:	6960      	ldr	r0, [r4, #20]
 8003856:	b108      	cbz	r0, 800385c <USB_AudioRecordingSessionDeInit+0x30>
      free( rec_session->buffer.data);
 8003858:	f00a ffc6 	bl	800e7e8 <free>
    rec_session->session.state = AUDIO_SESSION_OFF;
 800385c:	2300      	movs	r3, #0
 800385e:	7123      	strb	r3, [r4, #4]
}
 8003860:	2000      	movs	r0, #0
 8003862:	bd38      	pop	{r3, r4, r5, pc}
      USB_AudioRecordingSessionStop( rec_session);
 8003864:	f7ff fd28 	bl	80032b8 <USB_AudioRecordingSessionStop>
 8003868:	e7e6      	b.n	8003838 <USB_AudioRecordingSessionDeInit+0xc>
 800386a:	bf00      	nop
 800386c:	20000658 	.word	0x20000658

08003870 <AUDIO_RecordingSessionInit>:
{
 8003870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	4606      	mov	r6, r0
 8003878:	4689      	mov	r9, r1
 800387a:	4690      	mov	r8, r2
 800387c:	461d      	mov	r5, r3
  memset(rec_session, 0, sizeof(AUDIO_USBSession_t));
 800387e:	2220      	movs	r2, #32
 8003880:	2100      	movs	r1, #0
 8003882:	4618      	mov	r0, r3
 8003884:	f00a ffc6 	bl	800e814 <memset>
  rec_session->interface_num = USBD_AUDIO_CONFIG_RECORD_SA_INTERFACE;
 8003888:	2202      	movs	r2, #2
 800388a:	742a      	strb	r2, [r5, #16]
  rec_session->alternate = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	746b      	strb	r3, [r5, #17]
  rec_session->SessionDeInit = USB_AudioRecordingSessionDeInit;
 8003890:	4939      	ldr	r1, [pc, #228]	; (8003978 <AUDIO_RecordingSessionInit+0x108>)
 8003892:	60e9      	str	r1, [r5, #12]
  rec_session->session.SessionCallback = USB_AudioRecordingSessionCallback;
 8003894:	4939      	ldr	r1, [pc, #228]	; (800397c <AUDIO_RecordingSessionInit+0x10c>)
 8003896:	60a9      	str	r1, [r5, #8]
  RecordingAudioDescription.resolution = USB_AUDIO_CONFIG_RECORD_RES_BYTE;
 8003898:	4c39      	ldr	r4, [pc, #228]	; (8003980 <AUDIO_RecordingSessionInit+0x110>)
 800389a:	f884 2415 	strb.w	r2, [r4, #1045]	; 0x415
  RecordingAudioDescription.audio_type = USBD_AUDIO_FORMAT_TYPE_PCM;
 800389e:	2101      	movs	r1, #1
 80038a0:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
  RecordingAudioDescription.channels_count = USB_AUDIO_CONFIG_RECORD_CHANNEL_COUNT;
 80038a4:	f884 2408 	strb.w	r2, [r4, #1032]	; 0x408
  RecordingAudioDescription.channels_map = USB_AUDIO_CONFIG_RECORD_CHANNEL_MAP; 
 80038a8:	2203      	movs	r2, #3
 80038aa:	f8a4 240a 	strh.w	r2, [r4, #1034]	; 0x40a
  RecordingAudioDescription.frequency = USB_AUDIO_CONFIG_RECORD_DEF_FREQ;
 80038ae:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80038b2:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
  RecordingAudioDescription.audio_mute = 0;
 80038b6:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
  RecordingAudioDescription.audio_volume_db_256 = DEFAULT_VOLUME_DB_256;
 80038ba:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
  *control_count = 0;
 80038be:	f888 3000 	strb.w	r3, [r8]
  AUDIO_MicInit(&RecordingAudioDescription, &rec_session->session, (uint32_t)&RecordingMicrophoneNode);
 80038c2:	f204 4704 	addw	r7, r4, #1028	; 0x404
 80038c6:	4622      	mov	r2, r4
 80038c8:	4629      	mov	r1, r5
 80038ca:	4638      	mov	r0, r7
 80038cc:	f00a f878 	bl	800d9c0 <AUDIO_DFSDM_MEMS_MicInit>
  rec_session->session.node_list = (AUDIO_Node_t*)&RecordingMicrophoneNode;
 80038d0:	602c      	str	r4, [r5, #0]
  USB_AudioStreamingOutputInit(&as_desc->data_ep,  
 80038d2:	f504 7a74 	add.w	sl, r4, #976	; 0x3d0
 80038d6:	4653      	mov	r3, sl
 80038d8:	462a      	mov	r2, r5
 80038da:	4639      	mov	r1, r7
 80038dc:	1d30      	adds	r0, r6, #4
 80038de:	f7ff fa83 	bl	8002de8 <USB_AudioStreamingOutputInit>
  controller_defaults.audio_description = &RecordingAudioDescription;
 80038e2:	9703      	str	r7, [sp, #12]
  RecordingMicrophoneNode.MicGetVolumeDefaultsValues(&controller_defaults.max_volume,
 80038e4:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80038e6:	4623      	mov	r3, r4
 80038e8:	aa02      	add	r2, sp, #8
 80038ea:	a901      	add	r1, sp, #4
 80038ec:	4668      	mov	r0, sp
 80038ee:	47b8      	blx	r7
  USB_AudioStreamingFeatureUnitInit(controls_desc,  &controller_defaults,
 80038f0:	f504 775f 	add.w	r7, r4, #892	; 0x37c
 80038f4:	463b      	mov	r3, r7
 80038f6:	2215      	movs	r2, #21
 80038f8:	4669      	mov	r1, sp
 80038fa:	4648      	mov	r0, r9
 80038fc:	f7ff f96a 	bl	8002bd4 <USB_AudioStreamingFeatureUnitInit>
 (*control_count)++;
 8003900:	f898 3000 	ldrb.w	r3, [r8]
 8003904:	3301      	adds	r3, #1
 8003906:	f888 3000 	strb.w	r3, [r8]
  RecordingMicrophoneNode.node.next = (AUDIO_Node_t*)&RecordingFeatureUnitNode;
 800390a:	6127      	str	r7, [r4, #16]
  RecordingFeatureUnitNode.node.next = (AUDIO_Node_t*)&RecordingUSBOutputNode;
 800390c:	f8c4 a38c 	str.w	sl, [r4, #908]	; 0x38c
  rec_session->buffer.data = malloc(USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE);
 8003910:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003914:	f00a ff60 	bl	800e7d8 <malloc>
 8003918:	6168      	str	r0, [r5, #20]
  if(!rec_session->buffer.data)
 800391a:	b348      	cbz	r0, 8003970 <AUDIO_RecordingSessionInit+0x100>
                                   AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription) , AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription));
 800391c:	4918      	ldr	r1, [pc, #96]	; (8003980 <AUDIO_RecordingSessionInit+0x110>)
 800391e:	f8d1 3404 	ldr.w	r3, [r1, #1028]	; 0x404
 8003922:	4a18      	ldr	r2, [pc, #96]	; (8003984 <AUDIO_RecordingSessionInit+0x114>)
 8003924:	fba2 3203 	umull	r3, r2, r2, r3
 8003928:	0992      	lsrs	r2, r2, #6
 800392a:	f891 0408 	ldrb.w	r0, [r1, #1032]	; 0x408
 800392e:	f891 3415 	ldrb.w	r3, [r1, #1045]	; 0x415
  USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 8003932:	fb12 f200 	smulbb	r2, r2, r0
 8003936:	fb12 f203 	smulbb	r2, r2, r3
 800393a:	b292      	uxth	r2, r2
 800393c:	4613      	mov	r3, r2
 800393e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003942:	f105 0014 	add.w	r0, r5, #20
 8003946:	f7ff faa3 	bl	8002e90 <USB_AudioStreamingInitializeDataBuffer>
  as_desc->interface_num = rec_session->interface_num;
 800394a:	7c2b      	ldrb	r3, [r5, #16]
 800394c:	7033      	strb	r3, [r6, #0]
  as_desc->alternate = 0;
 800394e:	2000      	movs	r0, #0
 8003950:	70b0      	strb	r0, [r6, #2]
  as_desc->max_alternate = AUDIO_USB_RECORDING_ALTERNATE;
 8003952:	2301      	movs	r3, #1
 8003954:	7073      	strb	r3, [r6, #1]
  as_desc->synch_enabled = 0;
 8003956:	f886 0028 	strb.w	r0, [r6, #40]	; 0x28
  as_desc->private_data = session_handle;
 800395a:	6475      	str	r5, [r6, #68]	; 0x44
  as_desc->SetAS_Alternate = USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting;
 800395c:	4a0a      	ldr	r2, [pc, #40]	; (8003988 <AUDIO_RecordingSessionInit+0x118>)
 800395e:	63f2      	str	r2, [r6, #60]	; 0x3c
  as_desc->GetState = USB_AudioRecordingGetState;
 8003960:	4a0a      	ldr	r2, [pc, #40]	; (800398c <AUDIO_RecordingSessionInit+0x11c>)
 8003962:	6432      	str	r2, [r6, #64]	; 0x40
  as_desc->SofReceived = USB_AudioRecordingSofReceived;
 8003964:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <AUDIO_RecordingSessionInit+0x120>)
 8003966:	63b2      	str	r2, [r6, #56]	; 0x38
  rec_session->session.state = AUDIO_SESSION_INITIALIZED;
 8003968:	712b      	strb	r3, [r5, #4]
}
 800396a:	b004      	add	sp, #16
 800396c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    Error_Handler();
 8003970:	f009 ff28 	bl	800d7c4 <Error_Handler>
 8003974:	e7d2      	b.n	800391c <AUDIO_RecordingSessionInit+0xac>
 8003976:	bf00      	nop
 8003978:	0800382d 	.word	0x0800382d
 800397c:	08003735 	.word	0x08003735
 8003980:	20000658 	.word	0x20000658
 8003984:	10624dd3 	.word	0x10624dd3
 8003988:	080032ed 	.word	0x080032ed
 800398c:	08003319 	.word	0x08003319
 8003990:	08003651 	.word	0x08003651

08003994 <USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt>:
  * @param  session_handle(IN): session handler
  * @retval sample to add(positive value) or remove (negative value)
  */
int8_t  USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt(struct  AUDIO_Session* session_handle)
{
   if(RecordingSynchronizationParams.status&AUDIO_SYNC_STARTED)
 8003994:	4b05      	ldr	r3, [pc, #20]	; (80039ac <USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt+0x18>)
 8003996:	f893 337a 	ldrb.w	r3, [r3, #890]	; 0x37a
 800399a:	f013 0f01 	tst.w	r3, #1
 800399e:	d101      	bne.n	80039a4 <USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt+0x10>
   {
     return RecordingSynchronizationParams.samples;
   }
   return 0;
 80039a0:	2000      	movs	r0, #0
}
 80039a2:	4770      	bx	lr
     return RecordingSynchronizationParams.samples;
 80039a4:	4b01      	ldr	r3, [pc, #4]	; (80039ac <USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt+0x18>)
 80039a6:	f993 0358 	ldrsb.w	r0, [r3, #856]	; 0x358
 80039aa:	4770      	bx	lr
 80039ac:	20000658 	.word	0x20000658

080039b0 <USB_AudioRecordingSynchronizationNotificationSamplesRead>:
  * @param  session_handle: session handles
  * @retval bytes : written or read
  */
 int8_t  USB_AudioRecordingSynchronizationNotificationSamplesRead(struct AUDIO_Session* session_handle, uint16_t bytes)
{
   if(RecordingSynchronizationParams.status&AUDIO_SYNC_STARTED)
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <USB_AudioRecordingSynchronizationNotificationSamplesRead+0x1c>)
 80039b2:	f893 337a 	ldrb.w	r3, [r3, #890]	; 0x37a
 80039b6:	f013 0f01 	tst.w	r3, #1
 80039ba:	d005      	beq.n	80039c8 <USB_AudioRecordingSynchronizationNotificationSamplesRead+0x18>
   {
     RecordingSynchronizationParams.mic_usb_diff -= bytes;
 80039bc:	4a03      	ldr	r2, [pc, #12]	; (80039cc <USB_AudioRecordingSynchronizationNotificationSamplesRead+0x1c>)
 80039be:	f8d2 3368 	ldr.w	r3, [r2, #872]	; 0x368
 80039c2:	1a59      	subs	r1, r3, r1
 80039c4:	f8c2 1368 	str.w	r1, [r2, #872]	; 0x368
   }
   return 0;
}
 80039c8:	2000      	movs	r0, #0
 80039ca:	4770      	bx	lr
 80039cc:	20000658 	.word	0x20000658

080039d0 <USB_AUDIO_GetConfigDescriptor>:
  * @param  desc                             
  * @retval the configuration descriptor size
  */
uint16_t USB_AUDIO_GetConfigDescriptor(uint8_t **desc)
{ 
  if(desc)
 80039d0:	b108      	cbz	r0, 80039d6 <USB_AUDIO_GetConfigDescriptor+0x6>
  {
    *desc = USBD_AUDIO_ConfigDescriptor;
 80039d2:	4a02      	ldr	r2, [pc, #8]	; (80039dc <USB_AUDIO_GetConfigDescriptor+0xc>)
 80039d4:	6002      	str	r2, [r0, #0]
  }
  return (CONFIG_DESCRIPTOR_SIZE);
}
 80039d6:	20cb      	movs	r0, #203	; 0xcb
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000064 	.word	0x20000064

080039e0 <AUDIO_USB_DeInit>:
  * @param  private_data:  for future usage
  * @retval status 0 if no error
  */

static int8_t  AUDIO_USB_DeInit(USBD_AUDIO_FunctionDescriptionfTypeDef* audio_function, uint32_t private_data)
{
 80039e0:	b538      	push	{r3, r4, r5, lr}
 80039e2:	4604      	mov	r4, r0
  int i=0;
  
#if USE_USB_AUDIO_PLAYBACK
  USB_AudioPlabackSession.SessionDeInit( (uint32_t) &USB_AudioPlabackSession);
 80039e4:	4806      	ldr	r0, [pc, #24]	; (8003a00 <AUDIO_USB_DeInit+0x20>)
 80039e6:	68c3      	ldr	r3, [r0, #12]
 80039e8:	4798      	blx	r3
  audio_function->as_interfaces[0].alternate = 0;
 80039ea:	2500      	movs	r5, #0
 80039ec:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
  i++;
#endif /* USE_USB_AUDIO_PLAYBACK*/
#if  USE_USB_AUDIO_RECORDING
  USB_AudioRecordingSession.SessionDeInit((uint32_t) &USB_AudioRecordingSession);
 80039f0:	4804      	ldr	r0, [pc, #16]	; (8003a04 <AUDIO_USB_DeInit+0x24>)
 80039f2:	68c3      	ldr	r3, [r0, #12]
 80039f4:	4798      	blx	r3
  audio_function->as_interfaces[i].alternate = 0;
 80039f6:	f884 506e 	strb.w	r5, [r4, #110]	; 0x6e
#endif /* USE_USB_AUDIO_RECORDING*/
  
  return 0;
}
 80039fa:	4628      	mov	r0, r5
 80039fc:	bd38      	pop	{r3, r4, r5, pc}
 80039fe:	bf00      	nop
 8003a00:	20002134 	.word	0x20002134
 8003a04:	20002154 	.word	0x20002154

08003a08 <AUDIO_USB_GetState>:
  * @retval status
  */
static int8_t  AUDIO_USB_GetState(uint32_t private_data)
{
  return 0;
}
 8003a08:	2000      	movs	r0, #0
 8003a0a:	4770      	bx	lr

08003a0c <AUDIO_USB_GetConfigDesc>:
  * @param  psize:  configuration descriptor length
  * @param  private_data:  for future usage
  * @retval status
  */
static int8_t  AUDIO_USB_GetConfigDesc (uint8_t ** pdata, uint16_t * psize, uint32_t private_data)
{
 8003a0c:	b510      	push	{r4, lr}
 8003a0e:	460c      	mov	r4, r1
   *psize =  USB_AUDIO_GetConfigDescriptor(pdata);
 8003a10:	f7ff ffde 	bl	80039d0 <USB_AUDIO_GetConfigDescriptor>
 8003a14:	8020      	strh	r0, [r4, #0]
    return 0;
}
 8003a16:	2000      	movs	r0, #0
 8003a18:	bd10      	pop	{r4, pc}
	...

08003a1c <AUDIO_USB_Init>:
{
 8003a1c:	b570      	push	{r4, r5, r6, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	4604      	mov	r4, r0
  uint8_t control_count = 0;
 8003a22:	2600      	movs	r6, #0
 8003a24:	f88d 6007 	strb.w	r6, [sp, #7]
  AUDIO_PlaybackSessionInit(&usb_audio_class_function->as_interfaces[interface_offset], &(usb_audio_class_function->controls[interface_offset]), &control_count, (uint32_t) &USB_AudioPlabackSession);
 8003a28:	4b0d      	ldr	r3, [pc, #52]	; (8003a60 <AUDIO_USB_Init+0x44>)
 8003a2a:	f10d 0207 	add.w	r2, sp, #7
 8003a2e:	1d01      	adds	r1, r0, #4
 8003a30:	3024      	adds	r0, #36	; 0x24
 8003a32:	f7ff fb69 	bl	8003108 <AUDIO_PlaybackSessionInit>
  total_control_count += control_count;
 8003a36:	f89d 5007 	ldrb.w	r5, [sp, #7]
  AUDIO_RecordingSessionInit(&usb_audio_class_function->as_interfaces[interface_offset], &(usb_audio_class_function->controls[total_control_count]), &control_count, (uint32_t) &USB_AudioRecordingSession);
 8003a3a:	eb04 1105 	add.w	r1, r4, r5, lsl #4
 8003a3e:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <AUDIO_USB_Init+0x48>)
 8003a40:	f10d 0207 	add.w	r2, sp, #7
 8003a44:	3104      	adds	r1, #4
 8003a46:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8003a4a:	f7ff ff11 	bl	8003870 <AUDIO_RecordingSessionInit>
  total_control_count += control_count;
 8003a4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  usb_audio_class_function->as_interfaces_count = interface_offset;
 8003a52:	2202      	movs	r2, #2
 8003a54:	7062      	strb	r2, [r4, #1]
  usb_audio_class_function->control_count = total_control_count;
 8003a56:	441d      	add	r5, r3
 8003a58:	7025      	strb	r5, [r4, #0]
}
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	b002      	add	sp, #8
 8003a5e:	bd70      	pop	{r4, r5, r6, pc}
 8003a60:	20002134 	.word	0x20002134
 8003a64:	20002154 	.word	0x20002154

08003a68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003a68:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003a6a:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <disk_status+0x14>)
 8003a6c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8003a70:	6852      	ldr	r2, [r2, #4]
 8003a72:	6852      	ldr	r2, [r2, #4]
 8003a74:	4403      	add	r3, r0
 8003a76:	7b18      	ldrb	r0, [r3, #12]
 8003a78:	4790      	blx	r2
  return stat;
}
 8003a7a:	bd08      	pop	{r3, pc}
 8003a7c:	20000aa4 	.word	0x20000aa4

08003a80 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003a80:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <disk_initialize+0x24>)
 8003a84:	5c1b      	ldrb	r3, [r3, r0]
 8003a86:	b953      	cbnz	r3, 8003a9e <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8003a88:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <disk_initialize+0x24>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003a8e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8003a92:	6852      	ldr	r2, [r2, #4]
 8003a94:	6812      	ldr	r2, [r2, #0]
 8003a96:	4418      	add	r0, r3
 8003a98:	7b00      	ldrb	r0, [r0, #12]
 8003a9a:	4790      	blx	r2
  }
  return stat;
}
 8003a9c:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	e7fc      	b.n	8003a9c <disk_initialize+0x1c>
 8003aa2:	bf00      	nop
 8003aa4:	20000aa4 	.word	0x20000aa4

08003aa8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003aa8:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003aaa:	4c04      	ldr	r4, [pc, #16]	; (8003abc <disk_read+0x14>)
 8003aac:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8003ab0:	686d      	ldr	r5, [r5, #4]
 8003ab2:	68ad      	ldr	r5, [r5, #8]
 8003ab4:	4404      	add	r4, r0
 8003ab6:	7b20      	ldrb	r0, [r4, #12]
 8003ab8:	47a8      	blx	r5
  return res;
}
 8003aba:	bd38      	pop	{r3, r4, r5, pc}
 8003abc:	20000aa4 	.word	0x20000aa4

08003ac0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003ac0:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003ac2:	4c04      	ldr	r4, [pc, #16]	; (8003ad4 <disk_write+0x14>)
 8003ac4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8003ac8:	686d      	ldr	r5, [r5, #4]
 8003aca:	68ed      	ldr	r5, [r5, #12]
 8003acc:	4404      	add	r4, r0
 8003ace:	7b20      	ldrb	r0, [r4, #12]
 8003ad0:	47a8      	blx	r5
  return res;
}
 8003ad2:	bd38      	pop	{r3, r4, r5, pc}
 8003ad4:	20000aa4 	.word	0x20000aa4

08003ad8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003ad8:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003ada:	4b04      	ldr	r3, [pc, #16]	; (8003aec <disk_ioctl+0x14>)
 8003adc:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8003ae0:	6864      	ldr	r4, [r4, #4]
 8003ae2:	6924      	ldr	r4, [r4, #16]
 8003ae4:	4403      	add	r3, r0
 8003ae6:	7b18      	ldrb	r0, [r3, #12]
 8003ae8:	47a0      	blx	r4
  return res;
}
 8003aea:	bd10      	pop	{r4, pc}
 8003aec:	20000aa4 	.word	0x20000aa4

08003af0 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 8003af0:	2000      	movs	r0, #0
 8003af2:	4770      	bx	lr

08003af4 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 8003af4:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 8003af6:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8003af8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8003afc:	4770      	bx	lr

08003afe <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8003afe:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 8003b00:	7883      	ldrb	r3, [r0, #2]
 8003b02:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 8003b06:	7843      	ldrb	r3, [r0, #1]
 8003b08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8003b0c:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8003b0e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8003b12:	4770      	bx	lr

08003b14 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8003b14:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 8003b16:	0a09      	lsrs	r1, r1, #8
 8003b18:	7041      	strb	r1, [r0, #1]
}
 8003b1a:	4770      	bx	lr

08003b1c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8003b1c:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b1e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8003b22:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b24:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8003b28:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8003b2a:	0e09      	lsrs	r1, r1, #24
 8003b2c:	70c1      	strb	r1, [r0, #3]
}
 8003b2e:	4770      	bx	lr

08003b30 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003b30:	b410      	push	{r4}
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8003b32:	4614      	mov	r4, r2
 8003b34:	b12a      	cbz	r2, 8003b42 <mem_cpy+0x12>
		do {
			*d++ = *s++;
 8003b36:	780a      	ldrb	r2, [r1, #0]
 8003b38:	3101      	adds	r1, #1
 8003b3a:	7002      	strb	r2, [r0, #0]
 8003b3c:	3001      	adds	r0, #1
		} while (--cnt);
 8003b3e:	3c01      	subs	r4, #1
 8003b40:	d1f9      	bne.n	8003b36 <mem_cpy+0x6>
	}
}
 8003b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8003b48:	7001      	strb	r1, [r0, #0]
 8003b4a:	3001      	adds	r0, #1
	} while (--cnt);
 8003b4c:	3a01      	subs	r2, #1
 8003b4e:	d1fb      	bne.n	8003b48 <mem_set>
}
 8003b50:	4770      	bx	lr

08003b52 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003b52:	b410      	push	{r4}
 8003b54:	4604      	mov	r4, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8003b56:	7820      	ldrb	r0, [r4, #0]
 8003b58:	3401      	adds	r4, #1
 8003b5a:	780b      	ldrb	r3, [r1, #0]
 8003b5c:	3101      	adds	r1, #1
 8003b5e:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 8003b60:	3a01      	subs	r2, #1
 8003b62:	d001      	beq.n	8003b68 <mem_cmp+0x16>
 8003b64:	2800      	cmp	r0, #0
 8003b66:	d0f6      	beq.n	8003b56 <mem_cmp+0x4>

	return r;
}
 8003b68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003b6e:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 8003b70:	7818      	ldrb	r0, [r3, #0]
 8003b72:	b118      	cbz	r0, 8003b7c <chk_chr+0xe>
 8003b74:	4288      	cmp	r0, r1
 8003b76:	d001      	beq.n	8003b7c <chk_chr+0xe>
 8003b78:	3301      	adds	r3, #1
 8003b7a:	e7f9      	b.n	8003b70 <chk_chr+0x2>
	return *str;
}
 8003b7c:	4770      	bx	lr
	...

08003b80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003b80:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003b82:	2500      	movs	r5, #0
 8003b84:	462b      	mov	r3, r5
 8003b86:	e001      	b.n	8003b8c <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8003b88:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d815      	bhi.n	8003bbc <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 8003b90:	011a      	lsls	r2, r3, #4
 8003b92:	4c18      	ldr	r4, [pc, #96]	; (8003bf4 <chk_lock+0x74>)
 8003b94:	58a2      	ldr	r2, [r4, r2]
 8003b96:	2a00      	cmp	r2, #0
 8003b98:	d0f6      	beq.n	8003b88 <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003b9a:	6804      	ldr	r4, [r0, #0]
 8003b9c:	42a2      	cmp	r2, r4
 8003b9e:	d1f4      	bne.n	8003b8a <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 8003ba0:	4a14      	ldr	r2, [pc, #80]	; (8003bf4 <chk_lock+0x74>)
 8003ba2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8003ba6:	6854      	ldr	r4, [r2, #4]
 8003ba8:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003baa:	4294      	cmp	r4, r2
 8003bac:	d1ed      	bne.n	8003b8a <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 8003bae:	4a11      	ldr	r2, [pc, #68]	; (8003bf4 <chk_lock+0x74>)
 8003bb0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8003bb4:	6894      	ldr	r4, [r2, #8]
 8003bb6:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 8003bb8:	4294      	cmp	r4, r2
 8003bba:	d1e6      	bne.n	8003b8a <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d00a      	beq.n	8003bd6 <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003bc0:	b9a9      	cbnz	r1, 8003bee <chk_lock+0x6e>
 8003bc2:	4a0c      	ldr	r2, [pc, #48]	; (8003bf4 <chk_lock+0x74>)
 8003bc4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8003bc8:	899b      	ldrh	r3, [r3, #12]
 8003bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bce:	d00c      	beq.n	8003bea <chk_lock+0x6a>
 8003bd0:	2000      	movs	r0, #0
}
 8003bd2:	bc30      	pop	{r4, r5}
 8003bd4:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003bd6:	2902      	cmp	r1, #2
 8003bd8:	bf14      	ite	ne
 8003bda:	4629      	movne	r1, r5
 8003bdc:	f045 0101 	orreq.w	r1, r5, #1
 8003be0:	b109      	cbz	r1, 8003be6 <chk_lock+0x66>
 8003be2:	2000      	movs	r0, #0
 8003be4:	e7f5      	b.n	8003bd2 <chk_lock+0x52>
 8003be6:	2012      	movs	r0, #18
 8003be8:	e7f3      	b.n	8003bd2 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003bea:	2010      	movs	r0, #16
 8003bec:	e7f1      	b.n	8003bd2 <chk_lock+0x52>
 8003bee:	2010      	movs	r0, #16
 8003bf0:	e7ef      	b.n	8003bd2 <chk_lock+0x52>
 8003bf2:	bf00      	nop
 8003bf4:	20000a78 	.word	0x20000a78

08003bf8 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	e000      	b.n	8003bfe <enq_lock+0x6>
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	2801      	cmp	r0, #1
 8003c00:	d804      	bhi.n	8003c0c <enq_lock+0x14>
 8003c02:	0103      	lsls	r3, r0, #4
 8003c04:	4a03      	ldr	r2, [pc, #12]	; (8003c14 <enq_lock+0x1c>)
 8003c06:	58d3      	ldr	r3, [r2, r3]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1f7      	bne.n	8003bfc <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 8003c0c:	3802      	subs	r0, #2
 8003c0e:	bf18      	it	ne
 8003c10:	2001      	movne	r0, #1
 8003c12:	4770      	bx	lr
 8003c14:	20000a78 	.word	0x20000a78

08003c18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003c18:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e000      	b.n	8003c20 <inc_lock+0x8>
 8003c1e:	3301      	adds	r3, #1
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d813      	bhi.n	8003c4c <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 8003c24:	011a      	lsls	r2, r3, #4
 8003c26:	4c24      	ldr	r4, [pc, #144]	; (8003cb8 <inc_lock+0xa0>)
 8003c28:	58a4      	ldr	r4, [r4, r2]
 8003c2a:	6802      	ldr	r2, [r0, #0]
 8003c2c:	4294      	cmp	r4, r2
 8003c2e:	d1f6      	bne.n	8003c1e <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 8003c30:	4a21      	ldr	r2, [pc, #132]	; (8003cb8 <inc_lock+0xa0>)
 8003c32:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8003c36:	6854      	ldr	r4, [r2, #4]
 8003c38:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003c3a:	4294      	cmp	r4, r2
 8003c3c:	d1ef      	bne.n	8003c1e <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 8003c3e:	4a1e      	ldr	r2, [pc, #120]	; (8003cb8 <inc_lock+0xa0>)
 8003c40:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8003c44:	6894      	ldr	r4, [r2, #8]
 8003c46:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 8003c48:	4294      	cmp	r4, r2
 8003c4a:	d1e8      	bne.n	8003c1e <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d013      	beq.n	8003c78 <inc_lock+0x60>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003c50:	b121      	cbz	r1, 8003c5c <inc_lock+0x44>
 8003c52:	4a19      	ldr	r2, [pc, #100]	; (8003cb8 <inc_lock+0xa0>)
 8003c54:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8003c58:	8992      	ldrh	r2, [r2, #12]
 8003c5a:	bb52      	cbnz	r2, 8003cb2 <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003c5c:	bb21      	cbnz	r1, 8003ca8 <inc_lock+0x90>
 8003c5e:	4a16      	ldr	r2, [pc, #88]	; (8003cb8 <inc_lock+0xa0>)
 8003c60:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8003c64:	8991      	ldrh	r1, [r2, #12]
 8003c66:	3101      	adds	r1, #1
 8003c68:	b289      	uxth	r1, r1
 8003c6a:	4a13      	ldr	r2, [pc, #76]	; (8003cb8 <inc_lock+0xa0>)
 8003c6c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8003c70:	8191      	strh	r1, [r2, #12]

	return i + 1;
 8003c72:	1c58      	adds	r0, r3, #1
}
 8003c74:	bc70      	pop	{r4, r5, r6}
 8003c76:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d805      	bhi.n	8003c8a <inc_lock+0x72>
 8003c7e:	011a      	lsls	r2, r3, #4
 8003c80:	4c0d      	ldr	r4, [pc, #52]	; (8003cb8 <inc_lock+0xa0>)
 8003c82:	58a2      	ldr	r2, [r4, r2]
 8003c84:	b10a      	cbz	r2, 8003c8a <inc_lock+0x72>
 8003c86:	3301      	adds	r3, #1
 8003c88:	e7f7      	b.n	8003c7a <inc_lock+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d00f      	beq.n	8003cae <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 8003c8e:	6806      	ldr	r6, [r0, #0]
 8003c90:	4d09      	ldr	r5, [pc, #36]	; (8003cb8 <inc_lock+0xa0>)
 8003c92:	011c      	lsls	r4, r3, #4
 8003c94:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 8003c98:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 8003c9a:	6884      	ldr	r4, [r0, #8]
 8003c9c:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 8003c9e:	6940      	ldr	r0, [r0, #20]
 8003ca0:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	8190      	strh	r0, [r2, #12]
 8003ca6:	e7d3      	b.n	8003c50 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003ca8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cac:	e7dd      	b.n	8003c6a <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003cae:	2000      	movs	r0, #0
 8003cb0:	e7e0      	b.n	8003c74 <inc_lock+0x5c>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	e7de      	b.n	8003c74 <inc_lock+0x5c>
 8003cb6:	bf00      	nop
 8003cb8:	20000a78 	.word	0x20000a78

08003cbc <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003cbc:	3801      	subs	r0, #1
 8003cbe:	2801      	cmp	r0, #1
 8003cc0:	d815      	bhi.n	8003cee <dec_lock+0x32>
		n = Files[i].ctr;
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <dec_lock+0x3c>)
 8003cc4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8003cc8:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cce:	d003      	beq.n	8003cd8 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 8003cd0:	b11b      	cbz	r3, 8003cda <dec_lock+0x1e>
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	e000      	b.n	8003cda <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003cd8:	2300      	movs	r3, #0
		Files[i].ctr = n;
 8003cda:	4a07      	ldr	r2, [pc, #28]	; (8003cf8 <dec_lock+0x3c>)
 8003cdc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8003ce0:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003ce2:	b933      	cbnz	r3, 8003cf2 <dec_lock+0x36>
 8003ce4:	0103      	lsls	r3, r0, #4
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	4a03      	ldr	r2, [pc, #12]	; (8003cf8 <dec_lock+0x3c>)
 8003cea:	50d0      	str	r0, [r2, r3]
 8003cec:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003cee:	2002      	movs	r0, #2
 8003cf0:	4770      	bx	lr
		res = FR_OK;
 8003cf2:	2000      	movs	r0, #0
	}
	return res;
}
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	20000a78 	.word	0x20000a78

08003cfc <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e003      	b.n	8003d08 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 8003d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d04:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 8003d06:	3301      	adds	r3, #1
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d811      	bhi.n	8003d30 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003d0c:	011a      	lsls	r2, r3, #4
 8003d0e:	4909      	ldr	r1, [pc, #36]	; (8003d34 <clear_lock+0x38>)
 8003d10:	588a      	ldr	r2, [r1, r2]
 8003d12:	4282      	cmp	r2, r0
 8003d14:	d1f7      	bne.n	8003d06 <clear_lock+0xa>
{
 8003d16:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003d18:	011a      	lsls	r2, r3, #4
 8003d1a:	2400      	movs	r4, #0
 8003d1c:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 8003d1e:	3301      	adds	r3, #1
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d8ed      	bhi.n	8003d00 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003d24:	011a      	lsls	r2, r3, #4
 8003d26:	4903      	ldr	r1, [pc, #12]	; (8003d34 <clear_lock+0x38>)
 8003d28:	588a      	ldr	r2, [r1, r2]
 8003d2a:	4282      	cmp	r2, r0
 8003d2c:	d1f7      	bne.n	8003d1e <clear_lock+0x22>
 8003d2e:	e7f3      	b.n	8003d18 <clear_lock+0x1c>
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20000a78 	.word	0x20000a78

08003d38 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8003d38:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003d3a:	6943      	ldr	r3, [r0, #20]
 8003d3c:	3b02      	subs	r3, #2
 8003d3e:	428b      	cmp	r3, r1
 8003d40:	d904      	bls.n	8003d4c <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8003d42:	8943      	ldrh	r3, [r0, #10]
 8003d44:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003d46:	fb01 0003 	mla	r0, r1, r3, r0
 8003d4a:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003d4c:	2000      	movs	r0, #0
}
 8003d4e:	4770      	bx	lr

08003d50 <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003d50:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003d52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003d54:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003d56:	0a49      	lsrs	r1, r1, #9
 8003d58:	8952      	ldrh	r2, [r2, #10]
 8003d5a:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003d5e:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003d60:	b130      	cbz	r0, 8003d70 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8003d62:	4281      	cmp	r1, r0
 8003d64:	d302      	bcc.n	8003d6c <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8003d66:	1a09      	subs	r1, r1, r0
 8003d68:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003d6a:	e7f8      	b.n	8003d5e <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8003d6c:	6858      	ldr	r0, [r3, #4]
 8003d6e:	4408      	add	r0, r1
}
 8003d70:	4770      	bx	lr

08003d72 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003d72:	b570      	push	{r4, r5, r6, lr}
 8003d74:	4606      	mov	r6, r0
 8003d76:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003d78:	f101 001a 	add.w	r0, r1, #26
 8003d7c:	f7ff feba 	bl	8003af4 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8003d80:	7833      	ldrb	r3, [r6, #0]
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d000      	beq.n	8003d88 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 8003d86:	bd70      	pop	{r4, r5, r6, pc}
 8003d88:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003d8a:	f105 0014 	add.w	r0, r5, #20
 8003d8e:	f7ff feb1 	bl	8003af4 <ld_word>
 8003d92:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 8003d96:	e7f6      	b.n	8003d86 <ld_clust+0x14>

08003d98 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003d98:	b570      	push	{r4, r5, r6, lr}
 8003d9a:	4606      	mov	r6, r0
 8003d9c:	460c      	mov	r4, r1
 8003d9e:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003da0:	b291      	uxth	r1, r2
 8003da2:	f104 001a 	add.w	r0, r4, #26
 8003da6:	f7ff feb5 	bl	8003b14 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003daa:	7833      	ldrb	r3, [r6, #0]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d000      	beq.n	8003db2 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8003db0:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003db2:	0c29      	lsrs	r1, r5, #16
 8003db4:	f104 0014 	add.w	r0, r4, #20
 8003db8:	f7ff feac 	bl	8003b14 <st_word>
}
 8003dbc:	e7f8      	b.n	8003db0 <st_clust+0x18>
	...

08003dc0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc4:	4681      	mov	r9, r0
 8003dc6:	468a      	mov	sl, r1
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8003dc8:	f8d1 8000 	ldr.w	r8, [r1]
 8003dcc:	f100 0b24 	add.w	fp, r0, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8003dd0:	220b      	movs	r2, #11
 8003dd2:	2120      	movs	r1, #32
 8003dd4:	4658      	mov	r0, fp
 8003dd6:	f7ff feb7 	bl	8003b48 <mem_set>
	si = i = 0; ni = 8;
 8003dda:	2500      	movs	r5, #0
 8003ddc:	462b      	mov	r3, r5
 8003dde:	2708      	movs	r7, #8
 8003de0:	e029      	b.n	8003e36 <create_name+0x76>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003de2:	3601      	adds	r6, #1
 8003de4:	f818 3006 	ldrb.w	r3, [r8, r6]
 8003de8:	2b5c      	cmp	r3, #92	; 0x5c
 8003dea:	bf18      	it	ne
 8003dec:	2b2f      	cmpne	r3, #47	; 0x2f
 8003dee:	d0f8      	beq.n	8003de2 <create_name+0x22>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8003df0:	4446      	add	r6, r8
 8003df2:	f8ca 6000 	str.w	r6, [sl]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003df6:	2d00      	cmp	r5, #0
 8003df8:	d045      	beq.n	8003e86 <create_name+0xc6>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003dfa:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
 8003dfe:	2be5      	cmp	r3, #229	; 0xe5
 8003e00:	d036      	beq.n	8003e70 <create_name+0xb0>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003e02:	2c20      	cmp	r4, #32
 8003e04:	d838      	bhi.n	8003e78 <create_name+0xb8>
 8003e06:	2304      	movs	r3, #4
 8003e08:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f

	return FR_OK;
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	e036      	b.n	8003e7e <create_name+0xbe>
		if (c >= 0x80) {				/* Extended character? */
 8003e10:	f014 0f80 	tst.w	r4, #128	; 0x80
 8003e14:	d128      	bne.n	8003e68 <create_name+0xa8>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8003e16:	4621      	mov	r1, r4
 8003e18:	481c      	ldr	r0, [pc, #112]	; (8003e8c <create_name+0xcc>)
 8003e1a:	f7ff fea8 	bl	8003b6e <chk_chr>
 8003e1e:	bb80      	cbnz	r0, 8003e82 <create_name+0xc2>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8003e20:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b19      	cmp	r3, #25
 8003e28:	d801      	bhi.n	8003e2e <create_name+0x6e>
 8003e2a:	3c20      	subs	r4, #32
 8003e2c:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
 8003e2e:	f80b 4005 	strb.w	r4, [fp, r5]
 8003e32:	3501      	adds	r5, #1
			i = 8; ni = 11;				/* Goto extension */
 8003e34:	4633      	mov	r3, r6
		c = (BYTE)p[si++];
 8003e36:	1c5e      	adds	r6, r3, #1
 8003e38:	f818 4003 	ldrb.w	r4, [r8, r3]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003e3c:	2c20      	cmp	r4, #32
 8003e3e:	d9d7      	bls.n	8003df0 <create_name+0x30>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003e40:	2c5c      	cmp	r4, #92	; 0x5c
 8003e42:	bf18      	it	ne
 8003e44:	2c2f      	cmpne	r4, #47	; 0x2f
 8003e46:	d0cd      	beq.n	8003de4 <create_name+0x24>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8003e48:	2c2e      	cmp	r4, #46	; 0x2e
 8003e4a:	bf18      	it	ne
 8003e4c:	42af      	cmpne	r7, r5
 8003e4e:	d8df      	bhi.n	8003e10 <create_name+0x50>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003e50:	3c2e      	subs	r4, #46	; 0x2e
 8003e52:	bf18      	it	ne
 8003e54:	2401      	movne	r4, #1
 8003e56:	2f0b      	cmp	r7, #11
 8003e58:	bf14      	ite	ne
 8003e5a:	4627      	movne	r7, r4
 8003e5c:	f044 0701 	orreq.w	r7, r4, #1
 8003e60:	b967      	cbnz	r7, 8003e7c <create_name+0xbc>
			i = 8; ni = 11;				/* Goto extension */
 8003e62:	2508      	movs	r5, #8
 8003e64:	270b      	movs	r7, #11
 8003e66:	e7e5      	b.n	8003e34 <create_name+0x74>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003e68:	3c80      	subs	r4, #128	; 0x80
 8003e6a:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <create_name+0xd0>)
 8003e6c:	5d1c      	ldrb	r4, [r3, r4]
 8003e6e:	e7d2      	b.n	8003e16 <create_name+0x56>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003e70:	2305      	movs	r3, #5
 8003e72:	f889 3024 	strb.w	r3, [r9, #36]	; 0x24
 8003e76:	e7c4      	b.n	8003e02 <create_name+0x42>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e7c5      	b.n	8003e08 <create_name+0x48>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003e7c:	2006      	movs	r0, #6
#endif /* _USE_LFN != 0 */
}
 8003e7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8003e82:	2006      	movs	r0, #6
 8003e84:	e7fb      	b.n	8003e7e <create_name+0xbe>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003e86:	2006      	movs	r0, #6
 8003e88:	e7f9      	b.n	8003e7e <create_name+0xbe>
 8003e8a:	bf00      	nop
 8003e8c:	08013218 	.word	0x08013218
 8003e90:	08012bf8 	.word	0x08012bf8

08003e94 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8003e94:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003e96:	6800      	ldr	r0, [r0, #0]
 8003e98:	b108      	cbz	r0, 8003e9e <get_ldnumber+0xa>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	e003      	b.n	8003ea6 <get_ldnumber+0x12>
	int vol = -1;
 8003e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea2:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003ea4:	3201      	adds	r2, #1
 8003ea6:	7813      	ldrb	r3, [r2, #0]
 8003ea8:	2b3a      	cmp	r3, #58	; 0x3a
 8003eaa:	bf18      	it	ne
 8003eac:	2b20      	cmpne	r3, #32
 8003eae:	d8f9      	bhi.n	8003ea4 <get_ldnumber+0x10>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8003eb0:	2b3a      	cmp	r3, #58	; 0x3a
 8003eb2:	d001      	beq.n	8003eb8 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8003eb4:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8003eb6:	4770      	bx	lr
			i = *tp++ - '0';
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003ebe:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003ec0:	2809      	cmp	r0, #9
 8003ec2:	bf98      	it	ls
 8003ec4:	429a      	cmpls	r2, r3
 8003ec6:	d107      	bne.n	8003ed8 <get_ldnumber+0x44>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003ec8:	2801      	cmp	r0, #1
 8003eca:	d902      	bls.n	8003ed2 <get_ldnumber+0x3e>
	int vol = -1;
 8003ecc:	f04f 30ff 	mov.w	r0, #4294967295
			return vol;
 8003ed0:	4770      	bx	lr
					*path = ++tt;
 8003ed2:	3201      	adds	r2, #1
 8003ed4:	600a      	str	r2, [r1, #0]
 8003ed6:	4770      	bx	lr
	int vol = -1;
 8003ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8003edc:	4770      	bx	lr

08003ede <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8003ede:	b538      	push	{r3, r4, r5, lr}
 8003ee0:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	b198      	cbz	r0, 8003f0e <validate+0x30>
 8003ee6:	6803      	ldr	r3, [r0, #0]
 8003ee8:	b19b      	cbz	r3, 8003f12 <validate+0x34>
 8003eea:	781a      	ldrb	r2, [r3, #0]
 8003eec:	b1a2      	cbz	r2, 8003f18 <validate+0x3a>
 8003eee:	8881      	ldrh	r1, [r0, #4]
 8003ef0:	88da      	ldrh	r2, [r3, #6]
 8003ef2:	4291      	cmp	r1, r2
 8003ef4:	d003      	beq.n	8003efe <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8003ef6:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003ef8:	2400      	movs	r4, #0
 8003efa:	602c      	str	r4, [r5, #0]
	return res;
}
 8003efc:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8003efe:	7858      	ldrb	r0, [r3, #1]
 8003f00:	f7ff fdb2 	bl	8003a68 <disk_status>
 8003f04:	f010 0001 	ands.w	r0, r0, #1
 8003f08:	d109      	bne.n	8003f1e <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003f0a:	6824      	ldr	r4, [r4, #0]
 8003f0c:	e7f5      	b.n	8003efa <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8003f0e:	2009      	movs	r0, #9
 8003f10:	e7f3      	b.n	8003efa <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003f12:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 8003f14:	2009      	movs	r0, #9
 8003f16:	e7f0      	b.n	8003efa <validate+0x1c>
 8003f18:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003f1a:	2400      	movs	r4, #0
 8003f1c:	e7ed      	b.n	8003efa <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8003f1e:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003f20:	2400      	movs	r4, #0
 8003f22:	e7ea      	b.n	8003efa <validate+0x1c>

08003f24 <sync_window>:
{
 8003f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003f28:	78c5      	ldrb	r5, [r0, #3]
 8003f2a:	b915      	cbnz	r5, 8003f32 <sync_window+0xe>
}
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f32:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8003f34:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003f36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	463a      	mov	r2, r7
 8003f3e:	4641      	mov	r1, r8
 8003f40:	7840      	ldrb	r0, [r0, #1]
 8003f42:	f7ff fdbd 	bl	8003ac0 <disk_write>
 8003f46:	4605      	mov	r5, r0
 8003f48:	b998      	cbnz	r0, 8003f72 <sync_window+0x4e>
			fs->wflag = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003f4e:	6a23      	ldr	r3, [r4, #32]
 8003f50:	1afb      	subs	r3, r7, r3
 8003f52:	69a2      	ldr	r2, [r4, #24]
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d2e9      	bcs.n	8003f2c <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003f58:	78a6      	ldrb	r6, [r4, #2]
 8003f5a:	2e01      	cmp	r6, #1
 8003f5c:	d9e6      	bls.n	8003f2c <sync_window+0x8>
					wsect += fs->fsize;
 8003f5e:	69a3      	ldr	r3, [r4, #24]
 8003f60:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8003f62:	2301      	movs	r3, #1
 8003f64:	463a      	mov	r2, r7
 8003f66:	4641      	mov	r1, r8
 8003f68:	7860      	ldrb	r0, [r4, #1]
 8003f6a:	f7ff fda9 	bl	8003ac0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003f6e:	3e01      	subs	r6, #1
 8003f70:	e7f3      	b.n	8003f5a <sync_window+0x36>
			res = FR_DISK_ERR;
 8003f72:	2501      	movs	r5, #1
 8003f74:	e7da      	b.n	8003f2c <sync_window+0x8>

08003f76 <move_window>:
{
 8003f76:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003f78:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003f7a:	428b      	cmp	r3, r1
 8003f7c:	d102      	bne.n	8003f84 <move_window+0xe>
	FRESULT res = FR_OK;
 8003f7e:	2600      	movs	r6, #0
}
 8003f80:	4630      	mov	r0, r6
 8003f82:	bd70      	pop	{r4, r5, r6, pc}
 8003f84:	4604      	mov	r4, r0
 8003f86:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8003f88:	f7ff ffcc 	bl	8003f24 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003f8c:	4606      	mov	r6, r0
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	d1f6      	bne.n	8003f80 <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003f92:	2301      	movs	r3, #1
 8003f94:	462a      	mov	r2, r5
 8003f96:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8003f9a:	7860      	ldrb	r0, [r4, #1]
 8003f9c:	f7ff fd84 	bl	8003aa8 <disk_read>
 8003fa0:	b110      	cbz	r0, 8003fa8 <move_window+0x32>
				res = FR_DISK_ERR;
 8003fa2:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003fa4:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 8003fa8:	62e5      	str	r5, [r4, #44]	; 0x2c
 8003faa:	e7e9      	b.n	8003f80 <move_window+0xa>

08003fac <check_fs>:
{
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	70c3      	strb	r3, [r0, #3]
 8003fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb8:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003fba:	f7ff ffdc 	bl	8003f76 <move_window>
 8003fbe:	bb30      	cbnz	r0, 800400e <check_fs+0x62>
 8003fc0:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8003fc2:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8003fc6:	f7ff fd95 	bl	8003af4 <ld_word>
 8003fca:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003fce:	4298      	cmp	r0, r3
 8003fd0:	d11f      	bne.n	8004012 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8003fd2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8003fd6:	2be9      	cmp	r3, #233	; 0xe9
 8003fd8:	d007      	beq.n	8003fea <check_fs+0x3e>
 8003fda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003fdc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8003fe0:	4a0d      	ldr	r2, [pc, #52]	; (8004018 <check_fs+0x6c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d001      	beq.n	8003fea <check_fs+0x3e>
	return 2;
 8003fe6:	2502      	movs	r5, #2
 8003fe8:	e014      	b.n	8004014 <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003fea:	f104 0066 	add.w	r0, r4, #102	; 0x66
 8003fee:	f7ff fd86 	bl	8003afe <ld_dword>
 8003ff2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8003ff6:	4b09      	ldr	r3, [pc, #36]	; (800401c <check_fs+0x70>)
 8003ff8:	4298      	cmp	r0, r3
 8003ffa:	d00b      	beq.n	8004014 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8003ffc:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8004000:	f7ff fd7d 	bl	8003afe <ld_dword>
 8004004:	4b06      	ldr	r3, [pc, #24]	; (8004020 <check_fs+0x74>)
 8004006:	4298      	cmp	r0, r3
 8004008:	d004      	beq.n	8004014 <check_fs+0x68>
	return 2;
 800400a:	2502      	movs	r5, #2
 800400c:	e002      	b.n	8004014 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800400e:	2504      	movs	r5, #4
 8004010:	e000      	b.n	8004014 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004012:	2503      	movs	r5, #3
}
 8004014:	4628      	mov	r0, r5
 8004016:	bd38      	pop	{r3, r4, r5, pc}
 8004018:	009000eb 	.word	0x009000eb
 800401c:	00544146 	.word	0x00544146
 8004020:	33544146 	.word	0x33544146

08004024 <find_volume>:
{
 8004024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004028:	b085      	sub	sp, #20
 800402a:	460e      	mov	r6, r1
 800402c:	4615      	mov	r5, r2
	*rfs = 0;
 800402e:	2300      	movs	r3, #0
 8004030:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8004032:	f7ff ff2f 	bl	8003e94 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004036:	1e07      	subs	r7, r0, #0
 8004038:	f2c0 8145 	blt.w	80042c6 <find_volume+0x2a2>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800403c:	4bb5      	ldr	r3, [pc, #724]	; (8004314 <find_volume+0x2f0>)
 800403e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8004042:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004044:	2c00      	cmp	r4, #0
 8004046:	f000 8143 	beq.w	80042d0 <find_volume+0x2ac>
	*rfs = fs;							/* Return pointer to the file system object */
 800404a:	6034      	str	r4, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800404c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004050:	7823      	ldrb	r3, [r4, #0]
 8004052:	b173      	cbz	r3, 8004072 <find_volume+0x4e>
		stat = disk_status(fs->drv);
 8004054:	7860      	ldrb	r0, [r4, #1]
 8004056:	f7ff fd07 	bl	8003a68 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800405a:	f010 0601 	ands.w	r6, r0, #1
 800405e:	d108      	bne.n	8004072 <find_volume+0x4e>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004060:	2d00      	cmp	r5, #0
 8004062:	f000 8131 	beq.w	80042c8 <find_volume+0x2a4>
 8004066:	f010 0f04 	tst.w	r0, #4
 800406a:	f000 812d 	beq.w	80042c8 <find_volume+0x2a4>
				return FR_WRITE_PROTECTED;
 800406e:	260a      	movs	r6, #10
 8004070:	e12a      	b.n	80042c8 <find_volume+0x2a4>
	fs->fs_type = 0;					/* Clear the file system object */
 8004072:	2300      	movs	r3, #0
 8004074:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004076:	b2f8      	uxtb	r0, r7
 8004078:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800407a:	f7ff fd01 	bl	8003a80 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800407e:	f010 0601 	ands.w	r6, r0, #1
 8004082:	f040 8127 	bne.w	80042d4 <find_volume+0x2b0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004086:	b11d      	cbz	r5, 8004090 <find_volume+0x6c>
 8004088:	f010 0f04 	tst.w	r0, #4
 800408c:	f040 8124 	bne.w	80042d8 <find_volume+0x2b4>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004090:	2100      	movs	r1, #0
 8004092:	4620      	mov	r0, r4
 8004094:	f7ff ff8a 	bl	8003fac <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004098:	2802      	cmp	r0, #2
 800409a:	f000 80b6 	beq.w	800420a <find_volume+0x1e6>
	bsect = 0;
 800409e:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80040a0:	2804      	cmp	r0, #4
 80040a2:	f000 811b 	beq.w	80042dc <find_volume+0x2b8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80040a6:	2801      	cmp	r0, #1
 80040a8:	f200 811a 	bhi.w	80042e0 <find_volume+0x2bc>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80040ac:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 80040b0:	f7ff fd20 	bl	8003af4 <ld_word>
 80040b4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80040b8:	f040 8114 	bne.w	80042e4 <find_volume+0x2c0>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80040bc:	f104 0046 	add.w	r0, r4, #70	; 0x46
 80040c0:	f7ff fd18 	bl	8003af4 <ld_word>
 80040c4:	4605      	mov	r5, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80040c6:	b920      	cbnz	r0, 80040d2 <find_volume+0xae>
 80040c8:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80040cc:	f7ff fd17 	bl	8003afe <ld_dword>
 80040d0:	4605      	mov	r5, r0
		fs->fsize = fasize;
 80040d2:	61a5      	str	r5, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80040d4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80040d8:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80040da:	1e53      	subs	r3, r2, #1
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b01      	cmp	r3, #1
 80040e0:	f200 8102 	bhi.w	80042e8 <find_volume+0x2c4>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80040e4:	fb05 f802 	mul.w	r8, r5, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80040e8:	f894 903d 	ldrb.w	r9, [r4, #61]	; 0x3d
 80040ec:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80040f0:	f1b9 0f00 	cmp.w	r9, #0
 80040f4:	f000 80fa 	beq.w	80042ec <find_volume+0x2c8>
 80040f8:	f109 33ff 	add.w	r3, r9, #4294967295
 80040fc:	ea19 0f03 	tst.w	r9, r3
 8004100:	f040 80f6 	bne.w	80042f0 <find_volume+0x2cc>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004104:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8004108:	f7ff fcf4 	bl	8003af4 <ld_word>
 800410c:	4682      	mov	sl, r0
 800410e:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004110:	f010 0f0f 	tst.w	r0, #15
 8004114:	f040 80ee 	bne.w	80042f4 <find_volume+0x2d0>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004118:	f104 0043 	add.w	r0, r4, #67	; 0x43
 800411c:	f7ff fcea 	bl	8003af4 <ld_word>
 8004120:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004122:	b920      	cbnz	r0, 800412e <find_volume+0x10a>
 8004124:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004128:	f7ff fce9 	bl	8003afe <ld_dword>
 800412c:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800412e:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8004132:	f7ff fcdf 	bl	8003af4 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004136:	4602      	mov	r2, r0
 8004138:	2800      	cmp	r0, #0
 800413a:	f000 80dd 	beq.w	80042f8 <find_volume+0x2d4>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800413e:	eb00 0308 	add.w	r3, r0, r8
 8004142:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004146:	459b      	cmp	fp, r3
 8004148:	f0c0 80d8 	bcc.w	80042fc <find_volume+0x2d8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800414c:	ebab 0b03 	sub.w	fp, fp, r3
 8004150:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004154:	45cb      	cmp	fp, r9
 8004156:	f0c0 80d3 	bcc.w	8004300 <find_volume+0x2dc>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800415a:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800415e:	4281      	cmp	r1, r0
 8004160:	d96b      	bls.n	800423a <find_volume+0x216>
		fmt = FS_FAT32;
 8004162:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004166:	f640 70f5 	movw	r0, #4085	; 0xff5
 800416a:	4281      	cmp	r1, r0
 800416c:	d801      	bhi.n	8004172 <find_volume+0x14e>
 800416e:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004172:	f101 0902 	add.w	r9, r1, #2
 8004176:	f8c4 9014 	str.w	r9, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800417a:	61e7      	str	r7, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800417c:	443a      	add	r2, r7
 800417e:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004180:	443b      	add	r3, r7
 8004182:	62a3      	str	r3, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8004184:	f1bb 0f03 	cmp.w	fp, #3
 8004188:	d05a      	beq.n	8004240 <find_volume+0x21c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800418a:	f1ba 0f00 	cmp.w	sl, #0
 800418e:	f000 80bd 	beq.w	800430c <find_volume+0x2e8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004192:	4442      	add	r2, r8
 8004194:	6262      	str	r2, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004196:	f1bb 0f02 	cmp.w	fp, #2
 800419a:	d062      	beq.n	8004262 <find_volume+0x23e>
 800419c:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 80041a0:	f009 0901 	and.w	r9, r9, #1
 80041a4:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80041a8:	f209 19ff 	addw	r9, r9, #511	; 0x1ff
 80041ac:	ebb5 2f59 	cmp.w	r5, r9, lsr #9
 80041b0:	f0c0 80ae 	bcc.w	8004310 <find_volume+0x2ec>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80041b4:	f04f 33ff 	mov.w	r3, #4294967295
 80041b8:	6123      	str	r3, [r4, #16]
 80041ba:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 80041bc:	2380      	movs	r3, #128	; 0x80
 80041be:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80041c0:	f1bb 0f03 	cmp.w	fp, #3
 80041c4:	d050      	beq.n	8004268 <find_volume+0x244>
	fs->fs_type = fmt;		/* FAT sub-type */
 80041c6:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 80041ca:	4a52      	ldr	r2, [pc, #328]	; (8004314 <find_volume+0x2f0>)
 80041cc:	8d13      	ldrh	r3, [r2, #40]	; 0x28
 80041ce:	3301      	adds	r3, #1
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	8513      	strh	r3, [r2, #40]	; 0x28
 80041d4:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 80041d6:	4620      	mov	r0, r4
 80041d8:	f7ff fd90 	bl	8003cfc <clear_lock>
	return FR_OK;
 80041dc:	e074      	b.n	80042c8 <find_volume+0x2a4>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80041de:	2000      	movs	r0, #0
 80041e0:	ab04      	add	r3, sp, #16
 80041e2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80041e6:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80041ea:	3501      	adds	r5, #1
 80041ec:	2d03      	cmp	r5, #3
 80041ee:	d80e      	bhi.n	800420e <find_volume+0x1ea>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80041f0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80041f4:	012b      	lsls	r3, r5, #4
 80041f6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80041fa:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80041fc:	7903      	ldrb	r3, [r0, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0ed      	beq.n	80041de <find_volume+0x1ba>
 8004202:	3008      	adds	r0, #8
 8004204:	f7ff fc7b 	bl	8003afe <ld_dword>
 8004208:	e7ea      	b.n	80041e0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800420a:	2500      	movs	r5, #0
 800420c:	e7ee      	b.n	80041ec <find_volume+0x1c8>
 800420e:	2500      	movs	r5, #0
 8004210:	e00a      	b.n	8004228 <find_volume+0x204>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004212:	4639      	mov	r1, r7
 8004214:	4620      	mov	r0, r4
 8004216:	f7ff fec9 	bl	8003fac <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800421a:	2801      	cmp	r0, #1
 800421c:	f67f af40 	bls.w	80040a0 <find_volume+0x7c>
 8004220:	3501      	adds	r5, #1
 8004222:	2d03      	cmp	r5, #3
 8004224:	f63f af3c 	bhi.w	80040a0 <find_volume+0x7c>
			bsect = br[i];
 8004228:	ab04      	add	r3, sp, #16
 800422a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800422e:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004232:	2f00      	cmp	r7, #0
 8004234:	d1ed      	bne.n	8004212 <find_volume+0x1ee>
 8004236:	2003      	movs	r0, #3
 8004238:	e7f2      	b.n	8004220 <find_volume+0x1fc>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800423a:	f04f 0b02 	mov.w	fp, #2
 800423e:	e792      	b.n	8004166 <find_volume+0x142>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004240:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8004244:	f7ff fc56 	bl	8003af4 <ld_word>
 8004248:	2800      	cmp	r0, #0
 800424a:	d15b      	bne.n	8004304 <find_volume+0x2e0>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800424c:	f1ba 0f00 	cmp.w	sl, #0
 8004250:	d15a      	bne.n	8004308 <find_volume+0x2e4>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004252:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004256:	f7ff fc52 	bl	8003afe <ld_dword>
 800425a:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800425c:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8004260:	e7a2      	b.n	80041a8 <find_volume+0x184>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004262:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8004266:	e79f      	b.n	80041a8 <find_volume+0x184>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004268:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800426c:	f7ff fc42 	bl	8003af4 <ld_word>
 8004270:	2801      	cmp	r0, #1
 8004272:	d1a8      	bne.n	80041c6 <find_volume+0x1a2>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004274:	1c79      	adds	r1, r7, #1
 8004276:	4620      	mov	r0, r4
 8004278:	f7ff fe7d 	bl	8003f76 <move_window>
 800427c:	2800      	cmp	r0, #0
 800427e:	d1a2      	bne.n	80041c6 <find_volume+0x1a2>
			fs->fsi_flag = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004284:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8004288:	f7ff fc34 	bl	8003af4 <ld_word>
 800428c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004290:	4298      	cmp	r0, r3
 8004292:	d198      	bne.n	80041c6 <find_volume+0x1a2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004294:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8004298:	f7ff fc31 	bl	8003afe <ld_dword>
 800429c:	4b1e      	ldr	r3, [pc, #120]	; (8004318 <find_volume+0x2f4>)
 800429e:	4298      	cmp	r0, r3
 80042a0:	d191      	bne.n	80041c6 <find_volume+0x1a2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80042a2:	f504 7005 	add.w	r0, r4, #532	; 0x214
 80042a6:	f7ff fc2a 	bl	8003afe <ld_dword>
 80042aa:	4b1c      	ldr	r3, [pc, #112]	; (800431c <find_volume+0x2f8>)
 80042ac:	4298      	cmp	r0, r3
 80042ae:	d18a      	bne.n	80041c6 <find_volume+0x1a2>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80042b0:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80042b4:	f7ff fc23 	bl	8003afe <ld_dword>
 80042b8:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80042ba:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80042be:	f7ff fc1e 	bl	8003afe <ld_dword>
 80042c2:	60e0      	str	r0, [r4, #12]
 80042c4:	e77f      	b.n	80041c6 <find_volume+0x1a2>
	if (vol < 0) return FR_INVALID_DRIVE;
 80042c6:	260b      	movs	r6, #11
}
 80042c8:	4630      	mov	r0, r6
 80042ca:	b005      	add	sp, #20
 80042cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80042d0:	260c      	movs	r6, #12
 80042d2:	e7f9      	b.n	80042c8 <find_volume+0x2a4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80042d4:	2603      	movs	r6, #3
 80042d6:	e7f7      	b.n	80042c8 <find_volume+0x2a4>
		return FR_WRITE_PROTECTED;
 80042d8:	260a      	movs	r6, #10
 80042da:	e7f5      	b.n	80042c8 <find_volume+0x2a4>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80042dc:	2601      	movs	r6, #1
 80042de:	e7f3      	b.n	80042c8 <find_volume+0x2a4>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80042e0:	260d      	movs	r6, #13
 80042e2:	e7f1      	b.n	80042c8 <find_volume+0x2a4>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80042e4:	260d      	movs	r6, #13
 80042e6:	e7ef      	b.n	80042c8 <find_volume+0x2a4>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80042e8:	260d      	movs	r6, #13
 80042ea:	e7ed      	b.n	80042c8 <find_volume+0x2a4>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80042ec:	260d      	movs	r6, #13
 80042ee:	e7eb      	b.n	80042c8 <find_volume+0x2a4>
 80042f0:	260d      	movs	r6, #13
 80042f2:	e7e9      	b.n	80042c8 <find_volume+0x2a4>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80042f4:	260d      	movs	r6, #13
 80042f6:	e7e7      	b.n	80042c8 <find_volume+0x2a4>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80042f8:	260d      	movs	r6, #13
 80042fa:	e7e5      	b.n	80042c8 <find_volume+0x2a4>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80042fc:	260d      	movs	r6, #13
 80042fe:	e7e3      	b.n	80042c8 <find_volume+0x2a4>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004300:	260d      	movs	r6, #13
 8004302:	e7e1      	b.n	80042c8 <find_volume+0x2a4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004304:	260d      	movs	r6, #13
 8004306:	e7df      	b.n	80042c8 <find_volume+0x2a4>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004308:	260d      	movs	r6, #13
 800430a:	e7dd      	b.n	80042c8 <find_volume+0x2a4>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800430c:	260d      	movs	r6, #13
 800430e:	e7db      	b.n	80042c8 <find_volume+0x2a4>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004310:	260d      	movs	r6, #13
 8004312:	e7d9      	b.n	80042c8 <find_volume+0x2a4>
 8004314:	20000a78 	.word	0x20000a78
 8004318:	41615252 	.word	0x41615252
 800431c:	61417272 	.word	0x61417272

08004320 <put_fat>:
{
 8004320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004324:	2901      	cmp	r1, #1
 8004326:	d97e      	bls.n	8004426 <put_fat+0x106>
 8004328:	4607      	mov	r7, r0
 800432a:	460c      	mov	r4, r1
 800432c:	4616      	mov	r6, r2
 800432e:	6943      	ldr	r3, [r0, #20]
 8004330:	428b      	cmp	r3, r1
 8004332:	d97a      	bls.n	800442a <put_fat+0x10a>
		switch (fs->fs_type) {
 8004334:	7803      	ldrb	r3, [r0, #0]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d045      	beq.n	80043c6 <put_fat+0xa6>
 800433a:	2b03      	cmp	r3, #3
 800433c:	d057      	beq.n	80043ee <put_fat+0xce>
 800433e:	2b01      	cmp	r3, #1
 8004340:	d003      	beq.n	800434a <put_fat+0x2a>
 8004342:	2502      	movs	r5, #2
}
 8004344:	4628      	mov	r0, r5
 8004346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 800434a:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800434e:	6a01      	ldr	r1, [r0, #32]
 8004350:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8004354:	f7ff fe0f 	bl	8003f76 <move_window>
			if (res != FR_OK) break;
 8004358:	4605      	mov	r5, r0
 800435a:	2800      	cmp	r0, #0
 800435c:	d1f2      	bne.n	8004344 <put_fat+0x24>
			p = fs->win + bc++ % SS(fs);
 800435e:	f107 0a30 	add.w	sl, r7, #48	; 0x30
 8004362:	f108 0901 	add.w	r9, r8, #1
 8004366:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800436a:	f014 0401 	ands.w	r4, r4, #1
 800436e:	d01f      	beq.n	80043b0 <put_fat+0x90>
 8004370:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	0132      	lsls	r2, r6, #4
 800437a:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800437e:	4313      	orrs	r3, r2
 8004380:	b2db      	uxtb	r3, r3
 8004382:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 8004386:	2301      	movs	r3, #1
 8004388:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800438a:	6a39      	ldr	r1, [r7, #32]
 800438c:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8004390:	4638      	mov	r0, r7
 8004392:	f7ff fdf0 	bl	8003f76 <move_window>
			if (res != FR_OK) break;
 8004396:	4605      	mov	r5, r0
 8004398:	2800      	cmp	r0, #0
 800439a:	d1d3      	bne.n	8004344 <put_fat+0x24>
			p = fs->win + bc % SS(fs);
 800439c:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80043a0:	b144      	cbz	r4, 80043b4 <put_fat+0x94>
 80043a2:	f3c6 1207 	ubfx	r2, r6, #4, #8
 80043a6:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 80043aa:	2301      	movs	r3, #1
 80043ac:	70fb      	strb	r3, [r7, #3]
			break;
 80043ae:	e7c9      	b.n	8004344 <put_fat+0x24>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80043b0:	b2f3      	uxtb	r3, r6
 80043b2:	e7e6      	b.n	8004382 <put_fat+0x62>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80043b4:	f91a 2009 	ldrsb.w	r2, [sl, r9]
 80043b8:	f022 020f 	bic.w	r2, r2, #15
 80043bc:	f3c6 2603 	ubfx	r6, r6, #8, #4
 80043c0:	4332      	orrs	r2, r6
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	e7ef      	b.n	80043a6 <put_fat+0x86>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80043c6:	6a01      	ldr	r1, [r0, #32]
 80043c8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80043cc:	f7ff fdd3 	bl	8003f76 <move_window>
			if (res != FR_OK) break;
 80043d0:	4605      	mov	r5, r0
 80043d2:	2800      	cmp	r0, #0
 80043d4:	d1b6      	bne.n	8004344 <put_fat+0x24>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80043d6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80043da:	0064      	lsls	r4, r4, #1
 80043dc:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80043e0:	b2b1      	uxth	r1, r6
 80043e2:	4420      	add	r0, r4
 80043e4:	f7ff fb96 	bl	8003b14 <st_word>
			fs->wflag = 1;
 80043e8:	2301      	movs	r3, #1
 80043ea:	70fb      	strb	r3, [r7, #3]
			break;
 80043ec:	e7aa      	b.n	8004344 <put_fat+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80043ee:	6a01      	ldr	r1, [r0, #32]
 80043f0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80043f4:	f7ff fdbf 	bl	8003f76 <move_window>
			if (res != FR_OK) break;
 80043f8:	4605      	mov	r5, r0
 80043fa:	2800      	cmp	r0, #0
 80043fc:	d1a2      	bne.n	8004344 <put_fat+0x24>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80043fe:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 8004402:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004406:	00a4      	lsls	r4, r4, #2
 8004408:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800440c:	441c      	add	r4, r3
 800440e:	4620      	mov	r0, r4
 8004410:	f7ff fb75 	bl	8003afe <ld_dword>
 8004414:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004418:	4331      	orrs	r1, r6
 800441a:	4620      	mov	r0, r4
 800441c:	f7ff fb7e 	bl	8003b1c <st_dword>
			fs->wflag = 1;
 8004420:	2301      	movs	r3, #1
 8004422:	70fb      	strb	r3, [r7, #3]
			break;
 8004424:	e78e      	b.n	8004344 <put_fat+0x24>
	FRESULT res = FR_INT_ERR;
 8004426:	2502      	movs	r5, #2
 8004428:	e78c      	b.n	8004344 <put_fat+0x24>
 800442a:	2502      	movs	r5, #2
 800442c:	e78a      	b.n	8004344 <put_fat+0x24>

0800442e <get_fat>:
{
 800442e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8004430:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004432:	2901      	cmp	r1, #1
 8004434:	d956      	bls.n	80044e4 <get_fat+0xb6>
 8004436:	460c      	mov	r4, r1
 8004438:	696b      	ldr	r3, [r5, #20]
 800443a:	428b      	cmp	r3, r1
 800443c:	d954      	bls.n	80044e8 <get_fat+0xba>
		switch (fs->fs_type) {
 800443e:	782b      	ldrb	r3, [r5, #0]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d02d      	beq.n	80044a0 <get_fat+0x72>
 8004444:	2b03      	cmp	r3, #3
 8004446:	d03b      	beq.n	80044c0 <get_fat+0x92>
 8004448:	2b01      	cmp	r3, #1
 800444a:	d001      	beq.n	8004450 <get_fat+0x22>
 800444c:	2001      	movs	r0, #1
 800444e:	e04a      	b.n	80044e6 <get_fat+0xb8>
			bc = (UINT)clst; bc += bc / 2;
 8004450:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004454:	6a29      	ldr	r1, [r5, #32]
 8004456:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800445a:	4628      	mov	r0, r5
 800445c:	f7ff fd8b 	bl	8003f76 <move_window>
 8004460:	b110      	cbz	r0, 8004468 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004462:	f04f 30ff 	mov.w	r0, #4294967295
 8004466:	e03e      	b.n	80044e6 <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
 8004468:	1c77      	adds	r7, r6, #1
 800446a:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800446e:	442e      	add	r6, r5
 8004470:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004474:	6a29      	ldr	r1, [r5, #32]
 8004476:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800447a:	4628      	mov	r0, r5
 800447c:	f7ff fd7b 	bl	8003f76 <move_window>
 8004480:	bba0      	cbnz	r0, 80044ec <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004482:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8004486:	443d      	add	r5, r7
 8004488:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 800448c:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004490:	f014 0f01 	tst.w	r4, #1
 8004494:	d001      	beq.n	800449a <get_fat+0x6c>
 8004496:	0900      	lsrs	r0, r0, #4
 8004498:	e025      	b.n	80044e6 <get_fat+0xb8>
 800449a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800449e:	e022      	b.n	80044e6 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80044a0:	6a29      	ldr	r1, [r5, #32]
 80044a2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80044a6:	4628      	mov	r0, r5
 80044a8:	f7ff fd65 	bl	8003f76 <move_window>
 80044ac:	bb08      	cbnz	r0, 80044f2 <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80044ae:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80044b2:	0064      	lsls	r4, r4, #1
 80044b4:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80044b8:	4420      	add	r0, r4
 80044ba:	f7ff fb1b 	bl	8003af4 <ld_word>
			break;
 80044be:	e012      	b.n	80044e6 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80044c0:	6a29      	ldr	r1, [r5, #32]
 80044c2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80044c6:	4628      	mov	r0, r5
 80044c8:	f7ff fd55 	bl	8003f76 <move_window>
 80044cc:	b9a0      	cbnz	r0, 80044f8 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80044ce:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80044d2:	00a4      	lsls	r4, r4, #2
 80044d4:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80044d8:	4420      	add	r0, r4
 80044da:	f7ff fb10 	bl	8003afe <ld_dword>
 80044de:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 80044e2:	e000      	b.n	80044e6 <get_fat+0xb8>
		val = 1;	/* Internal error */
 80044e4:	2001      	movs	r0, #1
}
 80044e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 80044e8:	2001      	movs	r0, #1
 80044ea:	e7fc      	b.n	80044e6 <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80044ec:	f04f 30ff 	mov.w	r0, #4294967295
 80044f0:	e7f9      	b.n	80044e6 <get_fat+0xb8>
 80044f2:	f04f 30ff 	mov.w	r0, #4294967295
 80044f6:	e7f6      	b.n	80044e6 <get_fat+0xb8>
 80044f8:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 80044fc:	e7f3      	b.n	80044e6 <get_fat+0xb8>

080044fe <dir_sdi>:
{
 80044fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8004502:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004506:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800450a:	d242      	bcs.n	8004592 <dir_sdi+0x94>
 800450c:	4606      	mov	r6, r0
 800450e:	460f      	mov	r7, r1
 8004510:	f011 0f1f 	tst.w	r1, #31
 8004514:	d13f      	bne.n	8004596 <dir_sdi+0x98>
	dp->dptr = ofs;				/* Set current offset */
 8004516:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004518:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800451a:	b92c      	cbnz	r4, 8004528 <dir_sdi+0x2a>
 800451c:	f898 3000 	ldrb.w	r3, [r8]
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <dir_sdi+0x2a>
		clst = fs->dirbase;
 8004524:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004528:	b9b4      	cbnz	r4, 8004558 <dir_sdi+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800452a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800452e:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8004532:	d932      	bls.n	800459a <dir_sdi+0x9c>
		dp->sect = fs->dirbase;
 8004534:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8004538:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 800453a:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800453c:	69f3      	ldr	r3, [r6, #28]
 800453e:	b393      	cbz	r3, 80045a6 <dir_sdi+0xa8>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004540:	eb03 2357 	add.w	r3, r3, r7, lsr #9
 8004544:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004546:	f108 0330 	add.w	r3, r8, #48	; 0x30
 800454a:	f3c7 0108 	ubfx	r1, r7, #0, #9
 800454e:	4419      	add	r1, r3
 8004550:	6231      	str	r1, [r6, #32]
	return FR_OK;
 8004552:	2000      	movs	r0, #0
}
 8004554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004558:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 800455c:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800455e:	e000      	b.n	8004562 <dir_sdi+0x64>
			ofs -= csz;
 8004560:	1b7f      	subs	r7, r7, r5
		while (ofs >= csz) {				/* Follow cluster chain */
 8004562:	42af      	cmp	r7, r5
 8004564:	d30f      	bcc.n	8004586 <dir_sdi+0x88>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004566:	4621      	mov	r1, r4
 8004568:	4630      	mov	r0, r6
 800456a:	f7ff ff60 	bl	800442e <get_fat>
 800456e:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004570:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004574:	d013      	beq.n	800459e <dir_sdi+0xa0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004576:	2801      	cmp	r0, #1
 8004578:	d913      	bls.n	80045a2 <dir_sdi+0xa4>
 800457a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800457e:	4283      	cmp	r3, r0
 8004580:	d8ee      	bhi.n	8004560 <dir_sdi+0x62>
 8004582:	2002      	movs	r0, #2
 8004584:	e7e6      	b.n	8004554 <dir_sdi+0x56>
		dp->sect = clust2sect(fs, clst);
 8004586:	4621      	mov	r1, r4
 8004588:	4640      	mov	r0, r8
 800458a:	f7ff fbd5 	bl	8003d38 <clust2sect>
 800458e:	61f0      	str	r0, [r6, #28]
 8004590:	e7d3      	b.n	800453a <dir_sdi+0x3c>
		return FR_INT_ERR;
 8004592:	2002      	movs	r0, #2
 8004594:	e7de      	b.n	8004554 <dir_sdi+0x56>
 8004596:	2002      	movs	r0, #2
 8004598:	e7dc      	b.n	8004554 <dir_sdi+0x56>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800459a:	2002      	movs	r0, #2
 800459c:	e7da      	b.n	8004554 <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800459e:	2001      	movs	r0, #1
 80045a0:	e7d8      	b.n	8004554 <dir_sdi+0x56>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80045a2:	2002      	movs	r0, #2
 80045a4:	e7d6      	b.n	8004554 <dir_sdi+0x56>
	if (!dp->sect) return FR_INT_ERR;
 80045a6:	2002      	movs	r0, #2
 80045a8:	e7d4      	b.n	8004554 <dir_sdi+0x56>

080045aa <create_chain>:
{
 80045aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ae:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 80045b0:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 80045b2:	460f      	mov	r7, r1
 80045b4:	b951      	cbnz	r1, 80045cc <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80045b6:	f8d6 800c 	ldr.w	r8, [r6, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80045ba:	f1b8 0f00 	cmp.w	r8, #0
 80045be:	d012      	beq.n	80045e6 <create_chain+0x3c>
 80045c0:	6973      	ldr	r3, [r6, #20]
 80045c2:	4543      	cmp	r3, r8
 80045c4:	d811      	bhi.n	80045ea <create_chain+0x40>
 80045c6:	f04f 0801 	mov.w	r8, #1
 80045ca:	e00e      	b.n	80045ea <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80045cc:	f7ff ff2f 	bl	800442e <get_fat>
 80045d0:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80045d2:	2801      	cmp	r0, #1
 80045d4:	d94c      	bls.n	8004670 <create_chain+0xc6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80045d6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80045da:	d04e      	beq.n	800467a <create_chain+0xd0>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80045dc:	6972      	ldr	r2, [r6, #20]
 80045de:	4282      	cmp	r2, r0
 80045e0:	d84b      	bhi.n	800467a <create_chain+0xd0>
		scl = clst;
 80045e2:	46b8      	mov	r8, r7
 80045e4:	e001      	b.n	80045ea <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80045e6:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 80045ea:	4644      	mov	r4, r8
 80045ec:	e00c      	b.n	8004608 <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80045ee:	4621      	mov	r1, r4
 80045f0:	4628      	mov	r0, r5
 80045f2:	f7ff ff1c 	bl	800442e <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 80045f6:	4603      	mov	r3, r0
 80045f8:	b178      	cbz	r0, 800461a <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80045fa:	f1b0 3fff 	cmp.w	r0, #4294967295
 80045fe:	bf18      	it	ne
 8004600:	2801      	cmpne	r0, #1
 8004602:	d03a      	beq.n	800467a <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
 8004604:	4544      	cmp	r4, r8
 8004606:	d037      	beq.n	8004678 <create_chain+0xce>
			ncl++;							/* Next cluster */
 8004608:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800460a:	6973      	ldr	r3, [r6, #20]
 800460c:	42a3      	cmp	r3, r4
 800460e:	d8ee      	bhi.n	80045ee <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 8004610:	f1b8 0f01 	cmp.w	r8, #1
 8004614:	d92e      	bls.n	8004674 <create_chain+0xca>
				ncl = 2;
 8004616:	2402      	movs	r4, #2
 8004618:	e7e9      	b.n	80045ee <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800461a:	f04f 32ff 	mov.w	r2, #4294967295
 800461e:	4621      	mov	r1, r4
 8004620:	4630      	mov	r0, r6
 8004622:	f7ff fe7d 	bl	8004320 <put_fat>
		if (res == FR_OK && clst != 0) {
 8004626:	4602      	mov	r2, r0
 8004628:	1e3b      	subs	r3, r7, #0
 800462a:	bf18      	it	ne
 800462c:	2301      	movne	r3, #1
 800462e:	2800      	cmp	r0, #0
 8004630:	bf18      	it	ne
 8004632:	2300      	movne	r3, #0
 8004634:	b973      	cbnz	r3, 8004654 <create_chain+0xaa>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004636:	b9a2      	cbnz	r2, 8004662 <create_chain+0xb8>
		fs->last_clst = ncl;
 8004638:	60f4      	str	r4, [r6, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800463a:	6932      	ldr	r2, [r6, #16]
 800463c:	6973      	ldr	r3, [r6, #20]
 800463e:	3b02      	subs	r3, #2
 8004640:	429a      	cmp	r2, r3
 8004642:	d801      	bhi.n	8004648 <create_chain+0x9e>
 8004644:	3a01      	subs	r2, #1
 8004646:	6132      	str	r2, [r6, #16]
		fs->fsi_flag |= 1;
 8004648:	7933      	ldrb	r3, [r6, #4]
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	7133      	strb	r3, [r6, #4]
 8004650:	4623      	mov	r3, r4
 8004652:	e012      	b.n	800467a <create_chain+0xd0>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004654:	4622      	mov	r2, r4
 8004656:	4639      	mov	r1, r7
 8004658:	4630      	mov	r0, r6
 800465a:	f7ff fe61 	bl	8004320 <put_fat>
 800465e:	4602      	mov	r2, r0
 8004660:	e7e9      	b.n	8004636 <create_chain+0x8c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004662:	2a01      	cmp	r2, #1
 8004664:	d001      	beq.n	800466a <create_chain+0xc0>
 8004666:	2301      	movs	r3, #1
 8004668:	e007      	b.n	800467a <create_chain+0xd0>
 800466a:	f04f 33ff 	mov.w	r3, #4294967295
 800466e:	e004      	b.n	800467a <create_chain+0xd0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004670:	2301      	movs	r3, #1
 8004672:	e002      	b.n	800467a <create_chain+0xd0>
				if (ncl > scl) return 0;	/* No free cluster */
 8004674:	2300      	movs	r3, #0
 8004676:	e000      	b.n	800467a <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004680 <remove_chain>:
{
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 8004684:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004686:	2901      	cmp	r1, #1
 8004688:	d92e      	bls.n	80046e8 <remove_chain+0x68>
 800468a:	4606      	mov	r6, r0
 800468c:	4611      	mov	r1, r2
 800468e:	696b      	ldr	r3, [r5, #20]
 8004690:	42a3      	cmp	r3, r4
 8004692:	d92b      	bls.n	80046ec <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004694:	b14a      	cbz	r2, 80046aa <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004696:	f04f 32ff 	mov.w	r2, #4294967295
 800469a:	4628      	mov	r0, r5
 800469c:	f7ff fe40 	bl	8004320 <put_fat>
		if (res != FR_OK) return res;
 80046a0:	4607      	mov	r7, r0
 80046a2:	b110      	cbz	r0, 80046aa <remove_chain+0x2a>
 80046a4:	e023      	b.n	80046ee <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80046a6:	42a2      	cmp	r2, r4
 80046a8:	d921      	bls.n	80046ee <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80046aa:	4627      	mov	r7, r4
 80046ac:	4621      	mov	r1, r4
 80046ae:	4630      	mov	r0, r6
 80046b0:	f7ff febd 	bl	800442e <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 80046b4:	4604      	mov	r4, r0
 80046b6:	b1e0      	cbz	r0, 80046f2 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80046b8:	2801      	cmp	r0, #1
 80046ba:	d01c      	beq.n	80046f6 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80046bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80046c0:	d01b      	beq.n	80046fa <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80046c2:	2200      	movs	r2, #0
 80046c4:	4639      	mov	r1, r7
 80046c6:	4628      	mov	r0, r5
 80046c8:	f7ff fe2a 	bl	8004320 <put_fat>
			if (res != FR_OK) return res;
 80046cc:	4607      	mov	r7, r0
 80046ce:	b970      	cbnz	r0, 80046ee <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80046d0:	692b      	ldr	r3, [r5, #16]
 80046d2:	696a      	ldr	r2, [r5, #20]
 80046d4:	1e91      	subs	r1, r2, #2
 80046d6:	428b      	cmp	r3, r1
 80046d8:	d2e5      	bcs.n	80046a6 <remove_chain+0x26>
			fs->free_clst++;
 80046da:	3301      	adds	r3, #1
 80046dc:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 80046de:	792b      	ldrb	r3, [r5, #4]
 80046e0:	f043 0301 	orr.w	r3, r3, #1
 80046e4:	712b      	strb	r3, [r5, #4]
 80046e6:	e7de      	b.n	80046a6 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80046e8:	2702      	movs	r7, #2
 80046ea:	e000      	b.n	80046ee <remove_chain+0x6e>
 80046ec:	2702      	movs	r7, #2
}
 80046ee:	4638      	mov	r0, r7
 80046f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 80046f2:	2700      	movs	r7, #0
 80046f4:	e7fb      	b.n	80046ee <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80046f6:	2702      	movs	r7, #2
 80046f8:	e7f9      	b.n	80046ee <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80046fa:	2701      	movs	r7, #1
 80046fc:	e7f7      	b.n	80046ee <remove_chain+0x6e>

080046fe <dir_next>:
{
 80046fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
 8004702:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004704:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004706:	69c3      	ldr	r3, [r0, #28]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d06c      	beq.n	80047e6 <dir_next+0xe8>
 800470c:	4604      	mov	r4, r0
 800470e:	4688      	mov	r8, r1
 8004710:	3520      	adds	r5, #32
 8004712:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8004716:	d268      	bcs.n	80047ea <dir_next+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004718:	f3c5 0708 	ubfx	r7, r5, #0, #9
 800471c:	b93f      	cbnz	r7, 800472e <dir_next+0x30>
		dp->sect++;				/* Next sector */
 800471e:	3301      	adds	r3, #1
 8004720:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8004722:	6981      	ldr	r1, [r0, #24]
 8004724:	b979      	cbnz	r1, 8004746 <dir_next+0x48>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004726:	8933      	ldrh	r3, [r6, #8]
 8004728:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800472c:	d907      	bls.n	800473e <dir_next+0x40>
	dp->dptr = ofs;						/* Current entry */
 800472e:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004730:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8004734:	443b      	add	r3, r7
 8004736:	6223      	str	r3, [r4, #32]
	return FR_OK;
 8004738:	2000      	movs	r0, #0
}
 800473a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 800473e:	2300      	movs	r3, #0
 8004740:	61c3      	str	r3, [r0, #28]
 8004742:	2004      	movs	r0, #4
 8004744:	e7f9      	b.n	800473a <dir_next+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004746:	8973      	ldrh	r3, [r6, #10]
 8004748:	3b01      	subs	r3, #1
 800474a:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 800474e:	d1ee      	bne.n	800472e <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004750:	f7ff fe6d 	bl	800442e <get_fat>
 8004754:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004756:	2801      	cmp	r0, #1
 8004758:	d949      	bls.n	80047ee <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800475a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800475e:	d048      	beq.n	80047f2 <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004760:	6973      	ldr	r3, [r6, #20]
 8004762:	4283      	cmp	r3, r0
 8004764:	d837      	bhi.n	80047d6 <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 8004766:	f1b8 0f00 	cmp.w	r8, #0
 800476a:	d011      	beq.n	8004790 <dir_next+0x92>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800476c:	69a1      	ldr	r1, [r4, #24]
 800476e:	4620      	mov	r0, r4
 8004770:	f7ff ff1b 	bl	80045aa <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004774:	4682      	mov	sl, r0
 8004776:	2800      	cmp	r0, #0
 8004778:	d03d      	beq.n	80047f6 <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800477a:	2801      	cmp	r0, #1
 800477c:	d03d      	beq.n	80047fa <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800477e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004782:	d03c      	beq.n	80047fe <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004784:	4630      	mov	r0, r6
 8004786:	f7ff fbcd 	bl	8003f24 <sync_window>
 800478a:	b128      	cbz	r0, 8004798 <dir_next+0x9a>
 800478c:	2001      	movs	r0, #1
 800478e:	e7d4      	b.n	800473a <dir_next+0x3c>
						dp->sect = 0; return FR_NO_FILE;
 8004790:	2300      	movs	r3, #0
 8004792:	61e3      	str	r3, [r4, #28]
 8004794:	2004      	movs	r0, #4
 8004796:	e7d0      	b.n	800473a <dir_next+0x3c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800479c:	2100      	movs	r1, #0
 800479e:	f106 0030 	add.w	r0, r6, #48	; 0x30
 80047a2:	f7ff f9d1 	bl	8003b48 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80047a6:	4651      	mov	r1, sl
 80047a8:	4630      	mov	r0, r6
 80047aa:	f7ff fac5 	bl	8003d38 <clust2sect>
 80047ae:	62f0      	str	r0, [r6, #44]	; 0x2c
 80047b0:	8973      	ldrh	r3, [r6, #10]
 80047b2:	4599      	cmp	r9, r3
 80047b4:	d20b      	bcs.n	80047ce <dir_next+0xd0>
						fs->wflag = 1;
 80047b6:	2301      	movs	r3, #1
 80047b8:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80047ba:	4630      	mov	r0, r6
 80047bc:	f7ff fbb2 	bl	8003f24 <sync_window>
 80047c0:	b9f8      	cbnz	r0, 8004802 <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80047c2:	f109 0901 	add.w	r9, r9, #1
 80047c6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80047c8:	3301      	adds	r3, #1
 80047ca:	62f3      	str	r3, [r6, #44]	; 0x2c
 80047cc:	e7f0      	b.n	80047b0 <dir_next+0xb2>
					fs->winsect -= n;							/* Restore window offset */
 80047ce:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80047d0:	eba3 0309 	sub.w	r3, r3, r9
 80047d4:	62f3      	str	r3, [r6, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 80047d6:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 80047da:	4651      	mov	r1, sl
 80047dc:	4630      	mov	r0, r6
 80047de:	f7ff faab 	bl	8003d38 <clust2sect>
 80047e2:	61e0      	str	r0, [r4, #28]
 80047e4:	e7a3      	b.n	800472e <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80047e6:	2004      	movs	r0, #4
 80047e8:	e7a7      	b.n	800473a <dir_next+0x3c>
 80047ea:	2004      	movs	r0, #4
 80047ec:	e7a5      	b.n	800473a <dir_next+0x3c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80047ee:	2002      	movs	r0, #2
 80047f0:	e7a3      	b.n	800473a <dir_next+0x3c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80047f2:	2001      	movs	r0, #1
 80047f4:	e7a1      	b.n	800473a <dir_next+0x3c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80047f6:	2007      	movs	r0, #7
 80047f8:	e79f      	b.n	800473a <dir_next+0x3c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80047fa:	2002      	movs	r0, #2
 80047fc:	e79d      	b.n	800473a <dir_next+0x3c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80047fe:	2001      	movs	r0, #1
 8004800:	e79b      	b.n	800473a <dir_next+0x3c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004802:	2001      	movs	r0, #1
 8004804:	e799      	b.n	800473a <dir_next+0x3c>

08004806 <dir_find>:
{
 8004806:	b570      	push	{r4, r5, r6, lr}
 8004808:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800480a:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800480c:	2100      	movs	r1, #0
 800480e:	f7ff fe76 	bl	80044fe <dir_sdi>
	if (res != FR_OK) return res;
 8004812:	4605      	mov	r5, r0
 8004814:	b140      	cbz	r0, 8004828 <dir_find+0x22>
}
 8004816:	4628      	mov	r0, r5
 8004818:	bd70      	pop	{r4, r5, r6, pc}
		res = dir_next(dp, 0);	/* Next entry */
 800481a:	2100      	movs	r1, #0
 800481c:	4620      	mov	r0, r4
 800481e:	f7ff ff6e 	bl	80046fe <dir_next>
	} while (res == FR_OK);
 8004822:	4605      	mov	r5, r0
 8004824:	2800      	cmp	r0, #0
 8004826:	d1f6      	bne.n	8004816 <dir_find+0x10>
		res = move_window(fs, dp->sect);
 8004828:	69e1      	ldr	r1, [r4, #28]
 800482a:	4630      	mov	r0, r6
 800482c:	f7ff fba3 	bl	8003f76 <move_window>
		if (res != FR_OK) break;
 8004830:	4605      	mov	r5, r0
 8004832:	2800      	cmp	r0, #0
 8004834:	d1ef      	bne.n	8004816 <dir_find+0x10>
		c = dp->dir[DIR_Name];
 8004836:	6a20      	ldr	r0, [r4, #32]
 8004838:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800483a:	b17b      	cbz	r3, 800485c <dir_find+0x56>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800483c:	7ac3      	ldrb	r3, [r0, #11]
 800483e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004842:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004844:	7ac3      	ldrb	r3, [r0, #11]
 8004846:	f013 0f08 	tst.w	r3, #8
 800484a:	d1e6      	bne.n	800481a <dir_find+0x14>
 800484c:	220b      	movs	r2, #11
 800484e:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8004852:	f7ff f97e 	bl	8003b52 <mem_cmp>
 8004856:	2800      	cmp	r0, #0
 8004858:	d1df      	bne.n	800481a <dir_find+0x14>
 800485a:	e7dc      	b.n	8004816 <dir_find+0x10>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800485c:	2504      	movs	r5, #4
 800485e:	e7da      	b.n	8004816 <dir_find+0x10>

08004860 <follow_path>:
{
 8004860:	b530      	push	{r4, r5, lr}
 8004862:	b083      	sub	sp, #12
 8004864:	4604      	mov	r4, r0
 8004866:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8004868:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800486a:	9b01      	ldr	r3, [sp, #4]
 800486c:	781a      	ldrb	r2, [r3, #0]
 800486e:	2a5c      	cmp	r2, #92	; 0x5c
 8004870:	bf18      	it	ne
 8004872:	2a2f      	cmpne	r2, #47	; 0x2f
 8004874:	d102      	bne.n	800487c <follow_path+0x1c>
 8004876:	3301      	adds	r3, #1
 8004878:	9301      	str	r3, [sp, #4]
 800487a:	e7f6      	b.n	800486a <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
 800487c:	2200      	movs	r2, #0
 800487e:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b1f      	cmp	r3, #31
 8004884:	d81b      	bhi.n	80048be <follow_path+0x5e>
		dp->fn[NSFLAG] = NS_NONAME;
 8004886:	2380      	movs	r3, #128	; 0x80
 8004888:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800488c:	4611      	mov	r1, r2
 800488e:	4620      	mov	r0, r4
 8004890:	f7ff fe35 	bl	80044fe <dir_sdi>
 8004894:	4603      	mov	r3, r0
}
 8004896:	4618      	mov	r0, r3
 8004898:	b003      	add	sp, #12
 800489a:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 800489c:	2804      	cmp	r0, #4
 800489e:	d1fa      	bne.n	8004896 <follow_path+0x36>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80048a0:	f012 0f04 	tst.w	r2, #4
 80048a4:	d1f7      	bne.n	8004896 <follow_path+0x36>
 80048a6:	2305      	movs	r3, #5
 80048a8:	e7f5      	b.n	8004896 <follow_path+0x36>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80048aa:	f105 0130 	add.w	r1, r5, #48	; 0x30
 80048ae:	6963      	ldr	r3, [r4, #20]
 80048b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b4:	4419      	add	r1, r3
 80048b6:	4628      	mov	r0, r5
 80048b8:	f7ff fa5b 	bl	8003d72 <ld_clust>
 80048bc:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80048be:	a901      	add	r1, sp, #4
 80048c0:	4620      	mov	r0, r4
 80048c2:	f7ff fa7d 	bl	8003dc0 <create_name>
			if (res != FR_OK) break;
 80048c6:	4603      	mov	r3, r0
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d1e4      	bne.n	8004896 <follow_path+0x36>
			res = dir_find(dp);				/* Find an object with the segment name */
 80048cc:	4620      	mov	r0, r4
 80048ce:	f7ff ff9a 	bl	8004806 <dir_find>
			ns = dp->fn[NSFLAG];
 80048d2:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80048d6:	4603      	mov	r3, r0
 80048d8:	2800      	cmp	r0, #0
 80048da:	d1df      	bne.n	800489c <follow_path+0x3c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80048dc:	f012 0f04 	tst.w	r2, #4
 80048e0:	d1d9      	bne.n	8004896 <follow_path+0x36>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80048e2:	79a3      	ldrb	r3, [r4, #6]
 80048e4:	f013 0f10 	tst.w	r3, #16
 80048e8:	d1df      	bne.n	80048aa <follow_path+0x4a>
				res = FR_NO_PATH; break;
 80048ea:	2305      	movs	r3, #5
 80048ec:	e7d3      	b.n	8004896 <follow_path+0x36>

080048ee <dir_alloc>:
{
 80048ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f0:	4604      	mov	r4, r0
 80048f2:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 80048f4:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 80048f6:	2100      	movs	r1, #0
 80048f8:	f7ff fe01 	bl	80044fe <dir_sdi>
	if (res == FR_OK) {
 80048fc:	4602      	mov	r2, r0
 80048fe:	b9b8      	cbnz	r0, 8004930 <dir_alloc+0x42>
		n = 0;
 8004900:	2500      	movs	r5, #0
 8004902:	e006      	b.n	8004912 <dir_alloc+0x24>
				n = 0;					/* Not a blank entry. Restart to search */
 8004904:	2500      	movs	r5, #0
			res = dir_next(dp, 1);
 8004906:	2101      	movs	r1, #1
 8004908:	4620      	mov	r0, r4
 800490a:	f7ff fef8 	bl	80046fe <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800490e:	4602      	mov	r2, r0
 8004910:	b970      	cbnz	r0, 8004930 <dir_alloc+0x42>
			res = move_window(fs, dp->sect);
 8004912:	69e1      	ldr	r1, [r4, #28]
 8004914:	4638      	mov	r0, r7
 8004916:	f7ff fb2e 	bl	8003f76 <move_window>
			if (res != FR_OK) break;
 800491a:	4602      	mov	r2, r0
 800491c:	b940      	cbnz	r0, 8004930 <dir_alloc+0x42>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800491e:	6a23      	ldr	r3, [r4, #32]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	bf18      	it	ne
 8004926:	2be5      	cmpne	r3, #229	; 0xe5
 8004928:	d1ec      	bne.n	8004904 <dir_alloc+0x16>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800492a:	3501      	adds	r5, #1
 800492c:	42b5      	cmp	r5, r6
 800492e:	d1ea      	bne.n	8004906 <dir_alloc+0x18>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004930:	2a04      	cmp	r2, #4
 8004932:	d001      	beq.n	8004938 <dir_alloc+0x4a>
}
 8004934:	4610      	mov	r0, r2
 8004936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004938:	2207      	movs	r2, #7
 800493a:	e7fb      	b.n	8004934 <dir_alloc+0x46>

0800493c <dir_register>:
{
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8004940:	6806      	ldr	r6, [r0, #0]
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004942:	2101      	movs	r1, #1
 8004944:	f7ff ffd3 	bl	80048ee <dir_alloc>
	if (res == FR_OK) {
 8004948:	4605      	mov	r5, r0
 800494a:	b108      	cbz	r0, 8004950 <dir_register+0x14>
}
 800494c:	4628      	mov	r0, r5
 800494e:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(fs, dp->sect);
 8004950:	69e1      	ldr	r1, [r4, #28]
 8004952:	4630      	mov	r0, r6
 8004954:	f7ff fb0f 	bl	8003f76 <move_window>
		if (res == FR_OK) {
 8004958:	4605      	mov	r5, r0
 800495a:	2800      	cmp	r0, #0
 800495c:	d1f6      	bne.n	800494c <dir_register+0x10>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800495e:	2220      	movs	r2, #32
 8004960:	2100      	movs	r1, #0
 8004962:	6a20      	ldr	r0, [r4, #32]
 8004964:	f7ff f8f0 	bl	8003b48 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004968:	220b      	movs	r2, #11
 800496a:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800496e:	6a20      	ldr	r0, [r4, #32]
 8004970:	f7ff f8de 	bl	8003b30 <mem_cpy>
			fs->wflag = 1;
 8004974:	2301      	movs	r3, #1
 8004976:	70f3      	strb	r3, [r6, #3]
 8004978:	e7e8      	b.n	800494c <dir_register+0x10>
	...

0800497c <sync_fs>:
{
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	4604      	mov	r4, r0
	res = sync_window(fs);
 8004980:	f7ff fad0 	bl	8003f24 <sync_window>
	if (res == FR_OK) {
 8004984:	4605      	mov	r5, r0
 8004986:	b948      	cbnz	r0, 800499c <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004988:	7823      	ldrb	r3, [r4, #0]
 800498a:	2b03      	cmp	r3, #3
 800498c:	d008      	beq.n	80049a0 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800498e:	2200      	movs	r2, #0
 8004990:	4611      	mov	r1, r2
 8004992:	7860      	ldrb	r0, [r4, #1]
 8004994:	f7ff f8a0 	bl	8003ad8 <disk_ioctl>
 8004998:	b100      	cbz	r0, 800499c <sync_fs+0x20>
 800499a:	2501      	movs	r5, #1
}
 800499c:	4628      	mov	r0, r5
 800499e:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80049a0:	7923      	ldrb	r3, [r4, #4]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d1f3      	bne.n	800498e <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 80049a6:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80049aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ae:	2100      	movs	r1, #0
 80049b0:	4630      	mov	r0, r6
 80049b2:	f7ff f8c9 	bl	8003b48 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80049b6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80049ba:	f204 202e 	addw	r0, r4, #558	; 0x22e
 80049be:	f7ff f8a9 	bl	8003b14 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80049c2:	490f      	ldr	r1, [pc, #60]	; (8004a00 <sync_fs+0x84>)
 80049c4:	4630      	mov	r0, r6
 80049c6:	f7ff f8a9 	bl	8003b1c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80049ca:	490e      	ldr	r1, [pc, #56]	; (8004a04 <sync_fs+0x88>)
 80049cc:	f504 7005 	add.w	r0, r4, #532	; 0x214
 80049d0:	f7ff f8a4 	bl	8003b1c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80049d4:	6921      	ldr	r1, [r4, #16]
 80049d6:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80049da:	f7ff f89f 	bl	8003b1c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80049de:	68e1      	ldr	r1, [r4, #12]
 80049e0:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80049e4:	f7ff f89a 	bl	8003b1c <st_dword>
			fs->winsect = fs->volbase + 1;
 80049e8:	69e2      	ldr	r2, [r4, #28]
 80049ea:	3201      	adds	r2, #1
 80049ec:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80049ee:	2301      	movs	r3, #1
 80049f0:	4631      	mov	r1, r6
 80049f2:	7860      	ldrb	r0, [r4, #1]
 80049f4:	f7ff f864 	bl	8003ac0 <disk_write>
			fs->fsi_flag = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	7123      	strb	r3, [r4, #4]
 80049fc:	e7c7      	b.n	800498e <sync_fs+0x12>
 80049fe:	bf00      	nop
 8004a00:	41615252 	.word	0x41615252
 8004a04:	61417272 	.word	0x61417272

08004a08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a0c:	b091      	sub	sp, #68	; 0x44
 8004a0e:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004a10:	2800      	cmp	r0, #0
 8004a12:	f000 810f 	beq.w	8004c34 <f_open+0x22c>
 8004a16:	4615      	mov	r5, r2
 8004a18:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004a1a:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8004a1e:	463a      	mov	r2, r7
 8004a20:	a903      	add	r1, sp, #12
 8004a22:	a801      	add	r0, sp, #4
 8004a24:	f7ff fafe 	bl	8004024 <find_volume>
	if (res == FR_OK) {
 8004a28:	4604      	mov	r4, r0
 8004a2a:	b130      	cbz	r0, 8004a3a <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004a2c:	b10c      	cbz	r4, 8004a32 <f_open+0x2a>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 8004a32:	4620      	mov	r0, r4
 8004a34:	b011      	add	sp, #68	; 0x44
 8004a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 8004a3a:	9b03      	ldr	r3, [sp, #12]
 8004a3c:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8004a3e:	9901      	ldr	r1, [sp, #4]
 8004a40:	a804      	add	r0, sp, #16
 8004a42:	f7ff ff0d 	bl	8004860 <follow_path>
		if (res == FR_OK) {
 8004a46:	4604      	mov	r4, r0
 8004a48:	b960      	cbnz	r0, 8004a64 <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004a4a:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	db50      	blt.n	8004af4 <f_open+0xec>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004a52:	f037 0301 	bics.w	r3, r7, #1
 8004a56:	bf14      	ite	ne
 8004a58:	2101      	movne	r1, #1
 8004a5a:	2100      	moveq	r1, #0
 8004a5c:	a804      	add	r0, sp, #16
 8004a5e:	f7ff f88f 	bl	8003b80 <chk_lock>
 8004a62:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004a64:	f015 0f1c 	tst.w	r5, #28
 8004a68:	d05a      	beq.n	8004b20 <f_open+0x118>
			if (res != FR_OK) {					/* No file, create new */
 8004a6a:	2c00      	cmp	r4, #0
 8004a6c:	d04e      	beq.n	8004b0c <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004a6e:	2c04      	cmp	r4, #4
 8004a70:	d042      	beq.n	8004af8 <f_open+0xf0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004a72:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004a76:	2c00      	cmp	r4, #0
 8004a78:	d161      	bne.n	8004b3e <f_open+0x136>
 8004a7a:	f017 0f08 	tst.w	r7, #8
 8004a7e:	d05e      	beq.n	8004b3e <f_open+0x136>
				dw = GET_FATTIME();
 8004a80:	f7ff f836 	bl	8003af0 <get_fattime>
 8004a84:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004a86:	4601      	mov	r1, r0
 8004a88:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004a8a:	300e      	adds	r0, #14
 8004a8c:	f7ff f846 	bl	8003b1c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004a90:	4629      	mov	r1, r5
 8004a92:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004a94:	3016      	adds	r0, #22
 8004a96:	f7ff f841 	bl	8003b1c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004aa0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004aa4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8004aa8:	4649      	mov	r1, r9
 8004aaa:	4640      	mov	r0, r8
 8004aac:	f7ff f961 	bl	8003d72 <ld_clust>
 8004ab0:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	4649      	mov	r1, r9
 8004ab6:	4640      	mov	r0, r8
 8004ab8:	f7ff f96e 	bl	8003d98 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004abc:	2100      	movs	r1, #0
 8004abe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004ac0:	301c      	adds	r0, #28
 8004ac2:	f7ff f82b 	bl	8003b1c <st_dword>
					fs->wflag = 1;
 8004ac6:	9b03      	ldr	r3, [sp, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8004acc:	b3bd      	cbz	r5, 8004b3e <f_open+0x136>
						dw = fs->winsect;
 8004ace:	9b03      	ldr	r3, [sp, #12]
 8004ad0:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	a804      	add	r0, sp, #16
 8004ada:	f7ff fdd1 	bl	8004680 <remove_chain>
						if (res == FR_OK) {
 8004ade:	4604      	mov	r4, r0
 8004ae0:	bb68      	cbnz	r0, 8004b3e <f_open+0x136>
							res = move_window(fs, dw);
 8004ae2:	4641      	mov	r1, r8
 8004ae4:	9803      	ldr	r0, [sp, #12]
 8004ae6:	f7ff fa46 	bl	8003f76 <move_window>
 8004aea:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004aec:	3d01      	subs	r5, #1
 8004aee:	9b03      	ldr	r3, [sp, #12]
 8004af0:	60dd      	str	r5, [r3, #12]
 8004af2:	e024      	b.n	8004b3e <f_open+0x136>
				res = FR_INVALID_NAME;
 8004af4:	2406      	movs	r4, #6
 8004af6:	e7b5      	b.n	8004a64 <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004af8:	f7ff f87e 	bl	8003bf8 <enq_lock>
 8004afc:	b908      	cbnz	r0, 8004b02 <f_open+0xfa>
 8004afe:	2412      	movs	r4, #18
 8004b00:	e7b7      	b.n	8004a72 <f_open+0x6a>
 8004b02:	a804      	add	r0, sp, #16
 8004b04:	f7ff ff1a 	bl	800493c <dir_register>
 8004b08:	4604      	mov	r4, r0
 8004b0a:	e7b2      	b.n	8004a72 <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004b0c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004b10:	f013 0f11 	tst.w	r3, #17
 8004b14:	d112      	bne.n	8004b3c <f_open+0x134>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004b16:	f015 0f04 	tst.w	r5, #4
 8004b1a:	d0ac      	beq.n	8004a76 <f_open+0x6e>
 8004b1c:	2408      	movs	r4, #8
 8004b1e:	e00e      	b.n	8004b3e <f_open+0x136>
			if (res == FR_OK) {					/* Following succeeded */
 8004b20:	b96c      	cbnz	r4, 8004b3e <f_open+0x136>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004b22:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004b26:	f013 0f10 	tst.w	r3, #16
 8004b2a:	d14c      	bne.n	8004bc6 <f_open+0x1be>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004b2c:	f015 0f02 	tst.w	r5, #2
 8004b30:	d005      	beq.n	8004b3e <f_open+0x136>
 8004b32:	f013 0f01 	tst.w	r3, #1
 8004b36:	d002      	beq.n	8004b3e <f_open+0x136>
						res = FR_DENIED;
 8004b38:	2407      	movs	r4, #7
 8004b3a:	e016      	b.n	8004b6a <f_open+0x162>
					res = FR_DENIED;
 8004b3c:	2407      	movs	r4, #7
		if (res == FR_OK) {
 8004b3e:	b9a4      	cbnz	r4, 8004b6a <f_open+0x162>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004b40:	f017 0f08 	tst.w	r7, #8
 8004b44:	d001      	beq.n	8004b4a <f_open+0x142>
				mode |= FA_MODIFIED;
 8004b46:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004b4a:	9b03      	ldr	r3, [sp, #12]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8004b50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b52:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004b54:	f037 0301 	bics.w	r3, r7, #1
 8004b58:	bf14      	ite	ne
 8004b5a:	2101      	movne	r1, #1
 8004b5c:	2100      	moveq	r1, #0
 8004b5e:	a804      	add	r0, sp, #16
 8004b60:	f7ff f85a 	bl	8003c18 <inc_lock>
 8004b64:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004b66:	2800      	cmp	r0, #0
 8004b68:	d062      	beq.n	8004c30 <f_open+0x228>
		if (res == FR_OK) {
 8004b6a:	2c00      	cmp	r4, #0
 8004b6c:	f47f af5e 	bne.w	8004a2c <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004b70:	9d03      	ldr	r5, [sp, #12]
 8004b72:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004b76:	4641      	mov	r1, r8
 8004b78:	4628      	mov	r0, r5
 8004b7a:	f7ff f8fa 	bl	8003d72 <ld_clust>
 8004b7e:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004b80:	f108 001c 	add.w	r0, r8, #28
 8004b84:	f7fe ffbb 	bl	8003afe <ld_dword>
 8004b88:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004b8e:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
 8004b90:	88eb      	ldrh	r3, [r5, #6]
 8004b92:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 8004b94:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 8004b96:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004b98:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004b9a:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004b9c:	f106 0830 	add.w	r8, r6, #48	; 0x30
 8004ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ba4:	4640      	mov	r0, r8
 8004ba6:	f7fe ffcf 	bl	8003b48 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004baa:	f017 0f20 	tst.w	r7, #32
 8004bae:	f43f af3d 	beq.w	8004a2c <f_open+0x24>
 8004bb2:	68f5      	ldr	r5, [r6, #12]
 8004bb4:	2d00      	cmp	r5, #0
 8004bb6:	f43f af39 	beq.w	8004a2c <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004bba:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004bbc:	9b03      	ldr	r3, [sp, #12]
 8004bbe:	895f      	ldrh	r7, [r3, #10]
 8004bc0:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004bc2:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004bc4:	e005      	b.n	8004bd2 <f_open+0x1ca>
					res = FR_NO_FILE;
 8004bc6:	2404      	movs	r4, #4
 8004bc8:	e7cf      	b.n	8004b6a <f_open+0x162>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004bca:	f1b1 3fff 	cmp.w	r1, #4294967295
 8004bce:	d010      	beq.n	8004bf2 <f_open+0x1ea>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004bd0:	1bed      	subs	r5, r5, r7
 8004bd2:	42bd      	cmp	r5, r7
 8004bd4:	bf94      	ite	ls
 8004bd6:	2300      	movls	r3, #0
 8004bd8:	2301      	movhi	r3, #1
 8004bda:	2c00      	cmp	r4, #0
 8004bdc:	bf18      	it	ne
 8004bde:	2300      	movne	r3, #0
 8004be0:	b14b      	cbz	r3, 8004bf6 <f_open+0x1ee>
					clst = get_fat(&fp->obj, clst);
 8004be2:	4630      	mov	r0, r6
 8004be4:	f7ff fc23 	bl	800442e <get_fat>
 8004be8:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8004bea:	2801      	cmp	r0, #1
 8004bec:	d8ed      	bhi.n	8004bca <f_open+0x1c2>
 8004bee:	2402      	movs	r4, #2
 8004bf0:	e7eb      	b.n	8004bca <f_open+0x1c2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004bf2:	2401      	movs	r4, #1
 8004bf4:	e7ec      	b.n	8004bd0 <f_open+0x1c8>
				fp->clust = clst;
 8004bf6:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004bf8:	2c00      	cmp	r4, #0
 8004bfa:	f47f af17 	bne.w	8004a2c <f_open+0x24>
 8004bfe:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f43f af12 	beq.w	8004a2c <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004c08:	9f03      	ldr	r7, [sp, #12]
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	f7ff f894 	bl	8003d38 <clust2sect>
 8004c10:	b908      	cbnz	r0, 8004c16 <f_open+0x20e>
						res = FR_INT_ERR;
 8004c12:	2402      	movs	r4, #2
 8004c14:	e70b      	b.n	8004a2e <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004c16:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 8004c1a:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	4641      	mov	r1, r8
 8004c20:	7878      	ldrb	r0, [r7, #1]
 8004c22:	f7fe ff41 	bl	8003aa8 <disk_read>
 8004c26:	2800      	cmp	r0, #0
 8004c28:	f43f af00 	beq.w	8004a2c <f_open+0x24>
 8004c2c:	2401      	movs	r4, #1
 8004c2e:	e6fe      	b.n	8004a2e <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004c30:	2402      	movs	r4, #2
 8004c32:	e6fb      	b.n	8004a2c <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8004c34:	2409      	movs	r4, #9
 8004c36:	e6fc      	b.n	8004a32 <f_open+0x2a>

08004c38 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8004c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3c:	b085      	sub	sp, #20
 8004c3e:	4604      	mov	r4, r0
 8004c40:	460e      	mov	r6, r1
 8004c42:	4617      	mov	r7, r2
 8004c44:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8004c46:	2300      	movs	r3, #0
 8004c48:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8004c4c:	9001      	str	r0, [sp, #4]
 8004c4e:	a903      	add	r1, sp, #12
 8004c50:	f7ff f945 	bl	8003ede <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004c54:	9000      	str	r0, [sp, #0]
 8004c56:	2800      	cmp	r0, #0
 8004c58:	f040 80ae 	bne.w	8004db8 <f_read+0x180>
 8004c5c:	7d63      	ldrb	r3, [r4, #21]
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f040 80a9 	bne.w	8004db8 <f_read+0x180>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8004c66:	7d23      	ldrb	r3, [r4, #20]
 8004c68:	f013 0f01 	tst.w	r3, #1
 8004c6c:	f000 80c3 	beq.w	8004df6 <f_read+0x1be>
	remain = fp->obj.objsize - fp->fptr;
 8004c70:	68e5      	ldr	r5, [r4, #12]
 8004c72:	69a3      	ldr	r3, [r4, #24]
 8004c74:	1aed      	subs	r5, r5, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8004c76:	42bd      	cmp	r5, r7
 8004c78:	d362      	bcc.n	8004d40 <f_read+0x108>
 8004c7a:	463d      	mov	r5, r7
 8004c7c:	e060      	b.n	8004d40 <f_read+0x108>
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004c7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c80:	b11b      	cbz	r3, 8004c8a <f_read+0x52>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004c82:	4620      	mov	r0, r4
 8004c84:	f7ff f864 	bl	8003d50 <clmt_clust>
 8004c88:	e06a      	b.n	8004d60 <f_read+0x128>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8004c8a:	69e1      	ldr	r1, [r4, #28]
 8004c8c:	9801      	ldr	r0, [sp, #4]
 8004c8e:	f7ff fbce 	bl	800442e <get_fat>
 8004c92:	e065      	b.n	8004d60 <f_read+0x128>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004c94:	f04f 0a02 	mov.w	sl, #2
 8004c98:	f884 a015 	strb.w	sl, [r4, #21]
 8004c9c:	f8cd a000 	str.w	sl, [sp]
 8004ca0:	e08a      	b.n	8004db8 <f_read+0x180>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004ca2:	f04f 0a01 	mov.w	sl, #1
 8004ca6:	f884 a015 	strb.w	sl, [r4, #21]
 8004caa:	f8cd a000 	str.w	sl, [sp]
 8004cae:	e083      	b.n	8004db8 <f_read+0x180>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004cb0:	f04f 0a02 	mov.w	sl, #2
 8004cb4:	f884 a015 	strb.w	sl, [r4, #21]
 8004cb8:	f8cd a000 	str.w	sl, [sp]
 8004cbc:	e07c      	b.n	8004db8 <f_read+0x180>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8004cbe:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	db02      	blt.n	8004ccc <f_read+0x94>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8004cc6:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 8004cca:	e02f      	b.n	8004d2c <f_read+0xf4>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8004ccc:	6a20      	ldr	r0, [r4, #32]
 8004cce:	eba0 0009 	sub.w	r0, r0, r9
 8004cd2:	4550      	cmp	r0, sl
 8004cd4:	d2f7      	bcs.n	8004cc6 <f_read+0x8e>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8004cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cda:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8004cde:	eb06 2040 	add.w	r0, r6, r0, lsl #9
 8004ce2:	f7fe ff25 	bl	8003b30 <mem_cpy>
 8004ce6:	e7ee      	b.n	8004cc6 <f_read+0x8e>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8004ce8:	6a22      	ldr	r2, [r4, #32]
 8004cea:	454a      	cmp	r2, r9
 8004cec:	d00d      	beq.n	8004d0a <f_read+0xd2>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004cee:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	db64      	blt.n	8004dc0 <f_read+0x188>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	464a      	mov	r2, r9
 8004cfa:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8004cfe:	9803      	ldr	r0, [sp, #12]
 8004d00:	7840      	ldrb	r0, [r0, #1]
 8004d02:	f7fe fed1 	bl	8003aa8 <disk_read>
 8004d06:	2800      	cmp	r0, #0
 8004d08:	d16e      	bne.n	8004de8 <f_read+0x1b0>
			}
#endif
			fp->sect = sect;
 8004d0a:	f8c4 9020 	str.w	r9, [r4, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004d0e:	69a3      	ldr	r3, [r4, #24]
 8004d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d14:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8004d18:	42bd      	cmp	r5, r7
 8004d1a:	d200      	bcs.n	8004d1e <f_read+0xe6>
 8004d1c:	462f      	mov	r7, r5
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8004d1e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8004d22:	463a      	mov	r2, r7
 8004d24:	4419      	add	r1, r3
 8004d26:	4630      	mov	r0, r6
 8004d28:	f7fe ff02 	bl	8003b30 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004d2c:	443e      	add	r6, r7
 8004d2e:	69a3      	ldr	r3, [r4, #24]
 8004d30:	443b      	add	r3, r7
 8004d32:	61a3      	str	r3, [r4, #24]
 8004d34:	f8d8 3000 	ldr.w	r3, [r8]
 8004d38:	443b      	add	r3, r7
 8004d3a:	f8c8 3000 	str.w	r3, [r8]
 8004d3e:	1bed      	subs	r5, r5, r7
	for ( ;  btr;								/* Repeat until all data read */
 8004d40:	2d00      	cmp	r5, #0
 8004d42:	d039      	beq.n	8004db8 <f_read+0x180>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8004d44:	69a1      	ldr	r1, [r4, #24]
 8004d46:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1df      	bne.n	8004d0e <f_read+0xd6>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8004d4e:	9b03      	ldr	r3, [sp, #12]
 8004d50:	895f      	ldrh	r7, [r3, #10]
 8004d52:	3f01      	subs	r7, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8004d54:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 8004d58:	d108      	bne.n	8004d6c <f_read+0x134>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004d5a:	2900      	cmp	r1, #0
 8004d5c:	d18f      	bne.n	8004c7e <f_read+0x46>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8004d5e:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004d60:	2801      	cmp	r0, #1
 8004d62:	d997      	bls.n	8004c94 <f_read+0x5c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004d64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004d68:	d09b      	beq.n	8004ca2 <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
 8004d6a:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004d6c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004d70:	69e1      	ldr	r1, [r4, #28]
 8004d72:	4658      	mov	r0, fp
 8004d74:	f7fe ffe0 	bl	8003d38 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004d78:	4681      	mov	r9, r0
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	d098      	beq.n	8004cb0 <f_read+0x78>
			sect += csect;
 8004d7e:	44b9      	add	r9, r7
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8004d80:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004d84:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8004d88:	d3ae      	bcc.n	8004ce8 <f_read+0xb0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004d8a:	eb07 030a 	add.w	r3, r7, sl
 8004d8e:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <f_read+0x162>
					cc = fs->csize - csect;
 8004d96:	eba2 0a07 	sub.w	sl, r2, r7
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004d9a:	4653      	mov	r3, sl
 8004d9c:	464a      	mov	r2, r9
 8004d9e:	4631      	mov	r1, r6
 8004da0:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8004da4:	f7fe fe80 	bl	8003aa8 <disk_read>
 8004da8:	2800      	cmp	r0, #0
 8004daa:	d088      	beq.n	8004cbe <f_read+0x86>
 8004dac:	f04f 0a01 	mov.w	sl, #1
 8004db0:	f884 a015 	strb.w	sl, [r4, #21]
 8004db4:	f8cd a000 	str.w	sl, [sp]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8004db8:	9800      	ldr	r0, [sp, #0]
 8004dba:	b005      	add	sp, #20
 8004dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8004dc6:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8004dca:	f7fe fe79 	bl	8003ac0 <disk_write>
 8004dce:	b920      	cbnz	r0, 8004dda <f_read+0x1a2>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004dd0:	7d23      	ldrb	r3, [r4, #20]
 8004dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dd6:	7523      	strb	r3, [r4, #20]
 8004dd8:	e78d      	b.n	8004cf6 <f_read+0xbe>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004dda:	f04f 0a01 	mov.w	sl, #1
 8004dde:	f884 a015 	strb.w	sl, [r4, #21]
 8004de2:	f8cd a000 	str.w	sl, [sp]
 8004de6:	e7e7      	b.n	8004db8 <f_read+0x180>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004de8:	f04f 0a01 	mov.w	sl, #1
 8004dec:	f884 a015 	strb.w	sl, [r4, #21]
 8004df0:	f8cd a000 	str.w	sl, [sp]
 8004df4:	e7e0      	b.n	8004db8 <f_read+0x180>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8004df6:	2307      	movs	r3, #7
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	e7dd      	b.n	8004db8 <f_read+0x180>

08004dfc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004e02:	a901      	add	r1, sp, #4
 8004e04:	f7ff f86b 	bl	8003ede <validate>
	if (res == FR_OK) {
 8004e08:	b970      	cbnz	r0, 8004e28 <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8004e0a:	7d23      	ldrb	r3, [r4, #20]
 8004e0c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004e10:	d00a      	beq.n	8004e28 <f_sync+0x2c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004e12:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004e16:	d109      	bne.n	8004e2c <f_sync+0x30>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8004e18:	f7fe fe6a 	bl	8003af0 <get_fattime>
 8004e1c:	4605      	mov	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8004e1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004e20:	9801      	ldr	r0, [sp, #4]
 8004e22:	f7ff f8a8 	bl	8003f76 <move_window>
				if (res == FR_OK) {
 8004e26:	b178      	cbz	r0, 8004e48 <f_sync+0x4c>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8004e28:	b002      	add	sp, #8
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	6a22      	ldr	r2, [r4, #32]
 8004e30:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8004e34:	9801      	ldr	r0, [sp, #4]
 8004e36:	7840      	ldrb	r0, [r0, #1]
 8004e38:	f7fe fe42 	bl	8003ac0 <disk_write>
 8004e3c:	bb40      	cbnz	r0, 8004e90 <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004e3e:	7d23      	ldrb	r3, [r4, #20]
 8004e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e44:	7523      	strb	r3, [r4, #20]
 8004e46:	e7e7      	b.n	8004e18 <f_sync+0x1c>
					dir = fp->dir_ptr;
 8004e48:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8004e4a:	7af3      	ldrb	r3, [r6, #11]
 8004e4c:	f043 0320 	orr.w	r3, r3, #32
 8004e50:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8004e52:	68a2      	ldr	r2, [r4, #8]
 8004e54:	4631      	mov	r1, r6
 8004e56:	6820      	ldr	r0, [r4, #0]
 8004e58:	f7fe ff9e 	bl	8003d98 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8004e5c:	68e1      	ldr	r1, [r4, #12]
 8004e5e:	f106 001c 	add.w	r0, r6, #28
 8004e62:	f7fe fe5b 	bl	8003b1c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8004e66:	4629      	mov	r1, r5
 8004e68:	f106 0016 	add.w	r0, r6, #22
 8004e6c:	f7fe fe56 	bl	8003b1c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8004e70:	2100      	movs	r1, #0
 8004e72:	f106 0012 	add.w	r0, r6, #18
 8004e76:	f7fe fe4d 	bl	8003b14 <st_word>
					fs->wflag = 1;
 8004e7a:	9b01      	ldr	r3, [sp, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004e80:	9801      	ldr	r0, [sp, #4]
 8004e82:	f7ff fd7b 	bl	800497c <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8004e86:	7d23      	ldrb	r3, [r4, #20]
 8004e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e8c:	7523      	strb	r3, [r4, #20]
 8004e8e:	e7cb      	b.n	8004e28 <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004e90:	2001      	movs	r0, #1
 8004e92:	e7c9      	b.n	8004e28 <f_sync+0x2c>

08004e94 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8004e94:	b510      	push	{r4, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8004e9a:	f7ff ffaf 	bl	8004dfc <f_sync>
	if (res == FR_OK)
 8004e9e:	b108      	cbz	r0, 8004ea4 <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8004ea0:	b002      	add	sp, #8
 8004ea2:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8004ea4:	a901      	add	r1, sp, #4
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f7ff f819 	bl	8003ede <validate>
		if (res == FR_OK) {
 8004eac:	2800      	cmp	r0, #0
 8004eae:	d1f7      	bne.n	8004ea0 <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8004eb0:	6920      	ldr	r0, [r4, #16]
 8004eb2:	f7fe ff03 	bl	8003cbc <dec_lock>
			if (res == FR_OK)
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d1f2      	bne.n	8004ea0 <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 8004eba:	6020      	str	r0, [r4, #0]
 8004ebc:	e7f0      	b.n	8004ea0 <f_close+0xc>

08004ebe <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8004ebe:	b530      	push	{r4, r5, lr}
 8004ec0:	b085      	sub	sp, #20
 8004ec2:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d03d      	beq.n	8004f44 <f_opendir+0x86>
 8004ec8:	4605      	mov	r5, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 8004eca:	2200      	movs	r2, #0
 8004ecc:	a903      	add	r1, sp, #12
 8004ece:	a801      	add	r0, sp, #4
 8004ed0:	f7ff f8a8 	bl	8004024 <find_volume>
	if (res == FR_OK) {
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	b128      	cbz	r0, 8004ee4 <f_opendir+0x26>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8004ed8:	b10c      	cbz	r4, 8004ede <f_opendir+0x20>
 8004eda:	2300      	movs	r3, #0
 8004edc:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 8004ede:	4620      	mov	r0, r4
 8004ee0:	b005      	add	sp, #20
 8004ee2:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 8004ee4:	9b03      	ldr	r3, [sp, #12]
 8004ee6:	602b      	str	r3, [r5, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8004ee8:	9901      	ldr	r1, [sp, #4]
 8004eea:	4628      	mov	r0, r5
 8004eec:	f7ff fcb8 	bl	8004860 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	bb18      	cbnz	r0, 8004f3c <f_opendir+0x7e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8004ef4:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	db08      	blt.n	8004f0e <f_opendir+0x50>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8004efc:	79ab      	ldrb	r3, [r5, #6]
 8004efe:	f013 0f10 	tst.w	r3, #16
 8004f02:	d01a      	beq.n	8004f3a <f_opendir+0x7c>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8004f04:	6a29      	ldr	r1, [r5, #32]
 8004f06:	9803      	ldr	r0, [sp, #12]
 8004f08:	f7fe ff33 	bl	8003d72 <ld_clust>
 8004f0c:	60a8      	str	r0, [r5, #8]
				obj->id = fs->id;
 8004f0e:	9b03      	ldr	r3, [sp, #12]
 8004f10:	88db      	ldrh	r3, [r3, #6]
 8004f12:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8004f14:	2100      	movs	r1, #0
 8004f16:	4628      	mov	r0, r5
 8004f18:	f7ff faf1 	bl	80044fe <dir_sdi>
				if (res == FR_OK) {
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	b968      	cbnz	r0, 8004f3c <f_opendir+0x7e>
					if (obj->sclust) {
 8004f20:	68ab      	ldr	r3, [r5, #8]
 8004f22:	b913      	cbnz	r3, 8004f2a <f_opendir+0x6c>
						obj->lockid = 0;	/* Root directory need not to be locked */
 8004f24:	2300      	movs	r3, #0
 8004f26:	612b      	str	r3, [r5, #16]
 8004f28:	e008      	b.n	8004f3c <f_opendir+0x7e>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	f7fe fe73 	bl	8003c18 <inc_lock>
 8004f32:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8004f34:	b910      	cbnz	r0, 8004f3c <f_opendir+0x7e>
 8004f36:	2412      	movs	r4, #18
 8004f38:	e7ce      	b.n	8004ed8 <f_opendir+0x1a>
					res = FR_NO_PATH;
 8004f3a:	2405      	movs	r4, #5
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8004f3c:	2c04      	cmp	r4, #4
 8004f3e:	d1cb      	bne.n	8004ed8 <f_opendir+0x1a>
 8004f40:	2405      	movs	r4, #5
 8004f42:	e7ca      	b.n	8004eda <f_opendir+0x1c>
	if (!dp) return FR_INVALID_OBJECT;
 8004f44:	2409      	movs	r4, #9
 8004f46:	e7ca      	b.n	8004ede <f_opendir+0x20>

08004f48 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8004f48:	4770      	bx	lr
	...

08004f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f4c:	b510      	push	{r4, lr}
 8004f4e:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8004f50:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <HAL_InitTick+0x24>)
 8004f52:	6818      	ldr	r0, [r3, #0]
 8004f54:	4b07      	ldr	r3, [pc, #28]	; (8004f74 <HAL_InitTick+0x28>)
 8004f56:	fba3 3000 	umull	r3, r0, r3, r0
 8004f5a:	0980      	lsrs	r0, r0, #6
 8004f5c:	f000 f890 	bl	8005080 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8004f60:	2200      	movs	r2, #0
 8004f62:	4621      	mov	r1, r4
 8004f64:	f04f 30ff 	mov.w	r0, #4294967295
 8004f68:	f000 f840 	bl	8004fec <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	bd10      	pop	{r4, pc}
 8004f70:	20000190 	.word	0x20000190
 8004f74:	10624dd3 	.word	0x10624dd3

08004f78 <HAL_Init>:
{
 8004f78:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f7a:	2003      	movs	r0, #3
 8004f7c:	f000 f824 	bl	8004fc8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f80:	2000      	movs	r0, #0
 8004f82:	f7ff ffe3 	bl	8004f4c <HAL_InitTick>
  HAL_MspInit();
 8004f86:	f7ff ffdf 	bl	8004f48 <HAL_MspInit>
}
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	bd08      	pop	{r3, pc}
	...

08004f90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8004f90:	4a02      	ldr	r2, [pc, #8]	; (8004f9c <HAL_IncTick+0xc>)
 8004f92:	6813      	ldr	r3, [r2, #0]
 8004f94:	3301      	adds	r3, #1
 8004f96:	6013      	str	r3, [r2, #0]
}
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	20002174 	.word	0x20002174

08004fa0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004fa0:	4b01      	ldr	r3, [pc, #4]	; (8004fa8 <HAL_GetTick+0x8>)
 8004fa2:	6818      	ldr	r0, [r3, #0]
}
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	20002174 	.word	0x20002174

08004fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8004fac:	b510      	push	{r4, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8004fb2:	f7ff fff5 	bl	8004fa0 <HAL_GetTick>
 8004fb6:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8004fb8:	f7ff fff2 	bl	8004fa0 <HAL_GetTick>
 8004fbc:	1b00      	subs	r0, r0, r4
 8004fbe:	9b01      	ldr	r3, [sp, #4]
 8004fc0:	4298      	cmp	r0, r3
 8004fc2:	d3f9      	bcc.n	8004fb8 <HAL_Delay+0xc>
  {
  }
}
 8004fc4:	b002      	add	sp, #8
 8004fc6:	bd10      	pop	{r4, pc}

08004fc8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fc8:	4906      	ldr	r1, [pc, #24]	; (8004fe4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8004fca:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fcc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004fd0:	041b      	lsls	r3, r3, #16
 8004fd2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8004fd4:	0200      	lsls	r0, r0, #8
 8004fd6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fda:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004fdc:	4a02      	ldr	r2, [pc, #8]	; (8004fe8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004fde:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8004fe0:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004fe2:	4770      	bx	lr
 8004fe4:	e000ed00 	.word	0xe000ed00
 8004fe8:	05fa0000 	.word	0x05fa0000

08004fec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fec:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fee:	4b15      	ldr	r3, [pc, #84]	; (8005044 <HAL_NVIC_SetPriority+0x58>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ff6:	f1c3 0407 	rsb	r4, r3, #7
 8004ffa:	2c04      	cmp	r4, #4
 8004ffc:	bf28      	it	cs
 8004ffe:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005000:	1d1d      	adds	r5, r3, #4
 8005002:	2d06      	cmp	r5, #6
 8005004:	d914      	bls.n	8005030 <HAL_NVIC_SetPriority+0x44>
 8005006:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005008:	f04f 35ff 	mov.w	r5, #4294967295
 800500c:	fa05 f404 	lsl.w	r4, r5, r4
 8005010:	ea21 0104 	bic.w	r1, r1, r4
 8005014:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005016:	fa05 f303 	lsl.w	r3, r5, r3
 800501a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800501e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8005020:	2800      	cmp	r0, #0
 8005022:	db07      	blt.n	8005034 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005024:	0109      	lsls	r1, r1, #4
 8005026:	b2c9      	uxtb	r1, r1
 8005028:	4b07      	ldr	r3, [pc, #28]	; (8005048 <HAL_NVIC_SetPriority+0x5c>)
 800502a:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800502c:	bc30      	pop	{r4, r5}
 800502e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005030:	2300      	movs	r3, #0
 8005032:	e7e9      	b.n	8005008 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005034:	f000 000f 	and.w	r0, r0, #15
 8005038:	0109      	lsls	r1, r1, #4
 800503a:	b2c9      	uxtb	r1, r1
 800503c:	4b03      	ldr	r3, [pc, #12]	; (800504c <HAL_NVIC_SetPriority+0x60>)
 800503e:	5419      	strb	r1, [r3, r0]
 8005040:	e7f4      	b.n	800502c <HAL_NVIC_SetPriority+0x40>
 8005042:	bf00      	nop
 8005044:	e000ed00 	.word	0xe000ed00
 8005048:	e000e400 	.word	0xe000e400
 800504c:	e000ed14 	.word	0xe000ed14

08005050 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005050:	f000 021f 	and.w	r2, r0, #31
 8005054:	0940      	lsrs	r0, r0, #5
 8005056:	2301      	movs	r3, #1
 8005058:	4093      	lsls	r3, r2
 800505a:	4a02      	ldr	r2, [pc, #8]	; (8005064 <HAL_NVIC_EnableIRQ+0x14>)
 800505c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	e000e100 	.word	0xe000e100

08005068 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005068:	f000 021f 	and.w	r2, r0, #31
 800506c:	0940      	lsrs	r0, r0, #5
 800506e:	2301      	movs	r3, #1
 8005070:	4093      	lsls	r3, r2
 8005072:	3020      	adds	r0, #32
 8005074:	4a01      	ldr	r2, [pc, #4]	; (800507c <HAL_NVIC_DisableIRQ+0x14>)
 8005076:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800507a:	4770      	bx	lr
 800507c:	e000e100 	.word	0xe000e100

08005080 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005080:	3801      	subs	r0, #1
 8005082:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005086:	d20a      	bcs.n	800509e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005088:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <HAL_SYSTICK_Config+0x24>)
 800508a:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800508c:	4a06      	ldr	r2, [pc, #24]	; (80050a8 <HAL_SYSTICK_Config+0x28>)
 800508e:	21f0      	movs	r1, #240	; 0xf0
 8005090:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005094:	2000      	movs	r0, #0
 8005096:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005098:	2207      	movs	r2, #7
 800509a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800509c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800509e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	e000e010 	.word	0xe000e010
 80050a8:	e000ed00 	.word	0xe000ed00

080050ac <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
  uint32_t channel = 0xFF;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 80050ac:	4b14      	ldr	r3, [pc, #80]	; (8005100 <DFSDM_GetChannelFromInstance+0x54>)
 80050ae:	4298      	cmp	r0, r3
 80050b0:	d016      	beq.n	80050e0 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 0;
  }
  else if(Instance == DFSDM1_Channel1)
 80050b2:	3320      	adds	r3, #32
 80050b4:	4298      	cmp	r0, r3
 80050b6:	d015      	beq.n	80050e4 <DFSDM_GetChannelFromInstance+0x38>
  {
    channel = 1;
  }
  else if(Instance == DFSDM1_Channel2)
 80050b8:	3320      	adds	r3, #32
 80050ba:	4298      	cmp	r0, r3
 80050bc:	d014      	beq.n	80050e8 <DFSDM_GetChannelFromInstance+0x3c>
  {
    channel = 2;
  }
  else if(Instance == DFSDM1_Channel3)
 80050be:	3320      	adds	r3, #32
 80050c0:	4298      	cmp	r0, r3
 80050c2:	d013      	beq.n	80050ec <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
  }
  else if(Instance == DFSDM1_Channel4)
 80050c4:	3320      	adds	r3, #32
 80050c6:	4298      	cmp	r0, r3
 80050c8:	d012      	beq.n	80050f0 <DFSDM_GetChannelFromInstance+0x44>
  {
    channel = 4;
  }
  else if(Instance == DFSDM1_Channel5)
 80050ca:	3320      	adds	r3, #32
 80050cc:	4298      	cmp	r0, r3
 80050ce:	d011      	beq.n	80050f4 <DFSDM_GetChannelFromInstance+0x48>
  {
    channel = 5;
  }
  else if(Instance == DFSDM1_Channel6)
 80050d0:	3320      	adds	r3, #32
 80050d2:	4298      	cmp	r0, r3
 80050d4:	d010      	beq.n	80050f8 <DFSDM_GetChannelFromInstance+0x4c>
  {
    channel = 6;
  }
  else if(Instance == DFSDM1_Channel7)
 80050d6:	3320      	adds	r3, #32
 80050d8:	4298      	cmp	r0, r3
 80050da:	d00f      	beq.n	80050fc <DFSDM_GetChannelFromInstance+0x50>
  uint32_t channel = 0xFF;
 80050dc:	20ff      	movs	r0, #255	; 0xff
 80050de:	4770      	bx	lr
    channel = 0;
 80050e0:	2000      	movs	r0, #0
 80050e2:	4770      	bx	lr
    channel = 1;
 80050e4:	2001      	movs	r0, #1
 80050e6:	4770      	bx	lr
    channel = 2;
 80050e8:	2002      	movs	r0, #2
 80050ea:	4770      	bx	lr
    channel = 3;
 80050ec:	2003      	movs	r0, #3
 80050ee:	4770      	bx	lr
    channel = 4;
 80050f0:	2004      	movs	r0, #4
 80050f2:	4770      	bx	lr
    channel = 5;
 80050f4:	2005      	movs	r0, #5
 80050f6:	4770      	bx	lr
    channel = 6;
 80050f8:	2006      	movs	r0, #6
 80050fa:	4770      	bx	lr
  {
    channel = 7;
 80050fc:	2007      	movs	r0, #7
  }

  return channel;
}
 80050fe:	4770      	bx	lr
 8005100:	40017400 	.word	0x40017400

08005104 <DFSDM_RegConvStart>:
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8005104:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005106:	b963      	cbnz	r3, 8005122 <DFSDM_RegConvStart+0x1e>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8005108:	6802      	ldr	r2, [r0, #0]
 800510a:	6813      	ldr	r3, [r2, #0]
 800510c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005110:	6013      	str	r3, [r2, #0]
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8005112:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8005116:	2b01      	cmp	r3, #1
 8005118:	d026      	beq.n	8005168 <DFSDM_RegConvStart+0x64>
 800511a:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800511c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
}
 8005120:	4770      	bx	lr
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8005122:	6802      	ldr	r2, [r0, #0]
 8005124:	6813      	ldr	r3, [r2, #0]
 8005126:	f023 0301 	bic.w	r3, r3, #1
 800512a:	6013      	str	r3, [r2, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800512c:	6802      	ldr	r2, [r0, #0]
 800512e:	6813      	ldr	r3, [r2, #0]
 8005130:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005134:	6013      	str	r3, [r2, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8005136:	6802      	ldr	r2, [r0, #0]
 8005138:	6813      	ldr	r3, [r2, #0]
 800513a:	f043 0301 	orr.w	r3, r3, #1
 800513e:	6013      	str	r3, [r2, #0]
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8005140:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8005144:	2b03      	cmp	r3, #3
 8005146:	d1e4      	bne.n	8005112 <DFSDM_RegConvStart+0xe>
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8005148:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800514a:	b923      	cbnz	r3, 8005156 <DFSDM_RegConvStart+0x52>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800514c:	6802      	ldr	r2, [r0, #0]
 800514e:	6813      	ldr	r3, [r2, #0]
 8005150:	f043 0302 	orr.w	r3, r3, #2
 8005154:	6013      	str	r3, [r2, #0]
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8005156:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 800515a:	2b01      	cmp	r3, #1
 800515c:	d002      	beq.n	8005164 <DFSDM_RegConvStart+0x60>
 800515e:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8005160:	6483      	str	r3, [r0, #72]	; 0x48
 8005162:	e7d6      	b.n	8005112 <DFSDM_RegConvStart+0xe>
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8005164:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005166:	e7fb      	b.n	8005160 <DFSDM_RegConvStart+0x5c>
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8005168:	2302      	movs	r3, #2
 800516a:	e7d7      	b.n	800511c <DFSDM_RegConvStart+0x18>

0800516c <DFSDM_RegConvStop>:
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800516c:	6802      	ldr	r2, [r0, #0]
 800516e:	6813      	ldr	r3, [r2, #0]
 8005170:	f023 0301 	bic.w	r3, r3, #1
 8005174:	6013      	str	r3, [r2, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8005176:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005178:	2b01      	cmp	r3, #1
 800517a:	d010      	beq.n	800519e <DFSDM_RegConvStop+0x32>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800517c:	6802      	ldr	r2, [r0, #0]
 800517e:	6813      	ldr	r3, [r2, #0]
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	6013      	str	r3, [r2, #0]
  
  /* If injected conversion was in progress, restart it */
  if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8005186:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 800518a:	2b04      	cmp	r3, #4
 800518c:	d00d      	beq.n	80051aa <DFSDM_RegConvStop+0x3e>
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
                                       hdfsdm_filter->InjectedChannelsNbr : 1;
  }
  
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800518e:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8005192:	2b02      	cmp	r3, #2
 8005194:	d019      	beq.n	80051ca <DFSDM_RegConvStop+0x5e>
 8005196:	2303      	movs	r3, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8005198:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
}
 800519c:	4770      	bx	lr
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800519e:	6802      	ldr	r2, [r0, #0]
 80051a0:	6813      	ldr	r3, [r2, #0]
 80051a2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80051a6:	6013      	str	r3, [r2, #0]
 80051a8:	e7e8      	b.n	800517c <DFSDM_RegConvStop+0x10>
    if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80051aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80051ac:	b923      	cbnz	r3, 80051b8 <DFSDM_RegConvStop+0x4c>
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80051ae:	6802      	ldr	r2, [r0, #0]
 80051b0:	6813      	ldr	r3, [r2, #0]
 80051b2:	f043 0302 	orr.w	r3, r3, #2
 80051b6:	6013      	str	r3, [r2, #0]
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80051b8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
                                       hdfsdm_filter->InjectedChannelsNbr : 1;
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d002      	beq.n	80051c6 <DFSDM_RegConvStop+0x5a>
 80051c0:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80051c2:	6483      	str	r3, [r0, #72]	; 0x48
 80051c4:	e7e3      	b.n	800518e <DFSDM_RegConvStop+0x22>
                                       hdfsdm_filter->InjectedChannelsNbr : 1;
 80051c6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80051c8:	e7fb      	b.n	80051c2 <DFSDM_RegConvStop+0x56>
                          HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e7e4      	b.n	8005198 <DFSDM_RegConvStop+0x2c>

080051ce <HAL_DFSDM_ChannelMspInit>:
}
 80051ce:	4770      	bx	lr

080051d0 <HAL_DFSDM_ChannelInit>:
  if(hdfsdm_channel == NULL)
 80051d0:	2800      	cmp	r0, #0
 80051d2:	f000 8091 	beq.w	80052f8 <HAL_DFSDM_ChannelInit+0x128>
{
 80051d6:	b510      	push	{r4, lr}
 80051d8:	4604      	mov	r4, r0
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80051da:	6800      	ldr	r0, [r0, #0]
 80051dc:	f7ff ff66 	bl	80050ac <DFSDM_GetChannelFromInstance>
 80051e0:	4b46      	ldr	r3, [pc, #280]	; (80052fc <HAL_DFSDM_ChannelInit+0x12c>)
 80051e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80051e6:	b10b      	cbz	r3, 80051ec <HAL_DFSDM_ChannelInit+0x1c>
    return HAL_ERROR;
 80051e8:	2001      	movs	r0, #1
}
 80051ea:	bd10      	pop	{r4, pc}
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80051ec:	4620      	mov	r0, r4
 80051ee:	f7ff ffee 	bl	80051ce <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 80051f2:	4b42      	ldr	r3, [pc, #264]	; (80052fc <HAL_DFSDM_ChannelInit+0x12c>)
 80051f4:	6a1a      	ldr	r2, [r3, #32]
 80051f6:	3201      	adds	r2, #1
 80051f8:	621a      	str	r2, [r3, #32]
  if(v_dfsdm1ChannelCounter == 1)
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d057      	beq.n	80052b0 <HAL_DFSDM_ChannelInit+0xe0>
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8005200:	6822      	ldr	r2, [r4, #0]
 8005202:	6813      	ldr	r3, [r2, #0]
 8005204:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 8005208:	6013      	str	r3, [r2, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800520a:	6821      	ldr	r1, [r4, #0]
 800520c:	680a      	ldr	r2, [r1, #0]
 800520e:	6923      	ldr	r3, [r4, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8005210:	6960      	ldr	r0, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8005212:	4303      	orrs	r3, r0
                                        hdfsdm_channel->Init.Input.Pins);
 8005214:	69a0      	ldr	r0, [r4, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8005216:	4303      	orrs	r3, r0
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8005218:	4313      	orrs	r3, r2
 800521a:	600b      	str	r3, [r1, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800521c:	6822      	ldr	r2, [r4, #0]
 800521e:	6813      	ldr	r3, [r2, #0]
 8005220:	f023 030f 	bic.w	r3, r3, #15
 8005224:	6013      	str	r3, [r2, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8005226:	6821      	ldr	r1, [r4, #0]
 8005228:	680b      	ldr	r3, [r1, #0]
 800522a:	69e2      	ldr	r2, [r4, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800522c:	6a20      	ldr	r0, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800522e:	4302      	orrs	r2, r0
 8005230:	4313      	orrs	r3, r2
 8005232:	600b      	str	r3, [r1, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8005234:	6822      	ldr	r2, [r4, #0]
 8005236:	6893      	ldr	r3, [r2, #8]
 8005238:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 800523c:	6093      	str	r3, [r2, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800523e:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_FOSR_OFFSET));
 8005240:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005242:	3b01      	subs	r3, #1
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005244:	f44f 12f8 	mov.w	r2, #2031616	; 0x1f0000
 8005248:	fa92 f2a2 	rbit	r2, r2
 800524c:	fab2 f282 	clz	r2, r2
 8005250:	4093      	lsls	r3, r2
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8005252:	4319      	orrs	r1, r3
 8005254:	6822      	ldr	r2, [r4, #0]
 8005256:	6893      	ldr	r3, [r2, #8]
 8005258:	430b      	orrs	r3, r1
 800525a:	6093      	str	r3, [r2, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800525c:	6822      	ldr	r2, [r4, #0]
 800525e:	6853      	ldr	r3, [r2, #4]
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	6053      	str	r3, [r2, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_OFFSET) | 
 8005266:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005268:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 800526c:	fa92 f2a2 	rbit	r2, r2
 8005270:	fab2 f282 	clz	r2, r2
 8005274:	4093      	lsls	r3, r2
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_OFFSET));
 8005276:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005278:	22f8      	movs	r2, #248	; 0xf8
 800527a:	fa92 f2a2 	rbit	r2, r2
 800527e:	fab2 f282 	clz	r2, r2
 8005282:	fa01 f202 	lsl.w	r2, r1, r2
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_OFFSET) | 
 8005286:	4313      	orrs	r3, r2
 8005288:	6821      	ldr	r1, [r4, #0]
 800528a:	684a      	ldr	r2, [r1, #4]
 800528c:	4313      	orrs	r3, r2
 800528e:	604b      	str	r3, [r1, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8005290:	6822      	ldr	r2, [r4, #0]
 8005292:	6813      	ldr	r3, [r2, #0]
 8005294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005298:	6013      	str	r3, [r2, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800529a:	2301      	movs	r3, #1
 800529c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80052a0:	6820      	ldr	r0, [r4, #0]
 80052a2:	f7ff ff03 	bl	80050ac <DFSDM_GetChannelFromInstance>
 80052a6:	4b15      	ldr	r3, [pc, #84]	; (80052fc <HAL_DFSDM_ChannelInit+0x12c>)
 80052a8:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  return HAL_OK;
 80052ac:	2000      	movs	r0, #0
 80052ae:	e79c      	b.n	80051ea <HAL_DFSDM_ChannelInit+0x1a>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80052b0:	4b13      	ldr	r3, [pc, #76]	; (8005300 <HAL_DFSDM_ChannelInit+0x130>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80052b8:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68a1      	ldr	r1, [r4, #8]
 80052be:	430a      	orrs	r2, r1
 80052c0:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80052c8:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80052ca:	7923      	ldrb	r3, [r4, #4]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d005      	beq.n	80052dc <HAL_DFSDM_ChannelInit+0x10c>
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80052d0:	4a0b      	ldr	r2, [pc, #44]	; (8005300 <HAL_DFSDM_ChannelInit+0x130>)
 80052d2:	6813      	ldr	r3, [r2, #0]
 80052d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	e791      	b.n	8005200 <HAL_DFSDM_ChannelInit+0x30>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 80052dc:	68e3      	ldr	r3, [r4, #12]
 80052de:	3b01      	subs	r3, #1
 80052e0:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80052e4:	fa92 f2a2 	rbit	r2, r2
 80052e8:	fab2 f282 	clz	r2, r2
 80052ec:	4093      	lsls	r3, r2
 80052ee:	4904      	ldr	r1, [pc, #16]	; (8005300 <HAL_DFSDM_ChannelInit+0x130>)
 80052f0:	680a      	ldr	r2, [r1, #0]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	600b      	str	r3, [r1, #0]
 80052f6:	e7eb      	b.n	80052d0 <HAL_DFSDM_ChannelInit+0x100>
    return HAL_ERROR;
 80052f8:	2001      	movs	r0, #1
}
 80052fa:	4770      	bx	lr
 80052fc:	20000ab4 	.word	0x20000ab4
 8005300:	40017400 	.word	0x40017400

08005304 <HAL_DFSDM_ChannelMspDeInit>:
}
 8005304:	4770      	bx	lr
	...

08005308 <HAL_DFSDM_ChannelDeInit>:
  if(hdfsdm_channel == NULL)
 8005308:	b330      	cbz	r0, 8005358 <HAL_DFSDM_ChannelDeInit+0x50>
{
 800530a:	b538      	push	{r3, r4, r5, lr}
 800530c:	4605      	mov	r5, r0
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] == NULL)
 800530e:	6804      	ldr	r4, [r0, #0]
 8005310:	4620      	mov	r0, r4
 8005312:	f7ff fecb 	bl	80050ac <DFSDM_GetChannelFromInstance>
 8005316:	4b12      	ldr	r3, [pc, #72]	; (8005360 <HAL_DFSDM_ChannelDeInit+0x58>)
 8005318:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800531c:	b1f3      	cbz	r3, 800535c <HAL_DFSDM_ChannelDeInit+0x54>
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CHEN);
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005324:	6023      	str	r3, [r4, #0]
  v_dfsdm1ChannelCounter--;
 8005326:	4b0e      	ldr	r3, [pc, #56]	; (8005360 <HAL_DFSDM_ChannelDeInit+0x58>)
 8005328:	6a1a      	ldr	r2, [r3, #32]
 800532a:	3a01      	subs	r2, #1
 800532c:	621a      	str	r2, [r3, #32]
  if(v_dfsdm1ChannelCounter == 0)
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	b923      	cbnz	r3, 800533c <HAL_DFSDM_ChannelDeInit+0x34>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_DFSDMEN);
 8005332:	4a0c      	ldr	r2, [pc, #48]	; (8005364 <HAL_DFSDM_ChannelDeInit+0x5c>)
 8005334:	6813      	ldr	r3, [r2, #0]
 8005336:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800533a:	6013      	str	r3, [r2, #0]
  HAL_DFSDM_ChannelMspDeInit(hdfsdm_channel);
 800533c:	4628      	mov	r0, r5
 800533e:	f7ff ffe1 	bl	8005304 <HAL_DFSDM_ChannelMspDeInit>
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_RESET;
 8005342:	2400      	movs	r4, #0
 8005344:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = (DFSDM_Channel_HandleTypeDef *) NULL;
 8005348:	6828      	ldr	r0, [r5, #0]
 800534a:	f7ff feaf 	bl	80050ac <DFSDM_GetChannelFromInstance>
 800534e:	4b04      	ldr	r3, [pc, #16]	; (8005360 <HAL_DFSDM_ChannelDeInit+0x58>)
 8005350:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  return HAL_OK;
 8005354:	4620      	mov	r0, r4
}
 8005356:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005358:	2001      	movs	r0, #1
}
 800535a:	4770      	bx	lr
    return HAL_ERROR;
 800535c:	2001      	movs	r0, #1
 800535e:	e7fa      	b.n	8005356 <HAL_DFSDM_ChannelDeInit+0x4e>
 8005360:	20000ab4 	.word	0x20000ab4
 8005364:	40017400 	.word	0x40017400

08005368 <HAL_DFSDM_FilterMspInit>:
}
 8005368:	4770      	bx	lr
	...

0800536c <HAL_DFSDM_FilterInit>:
  if(hdfsdm_filter == NULL)
 800536c:	2800      	cmp	r0, #0
 800536e:	f000 808b 	beq.w	8005488 <HAL_DFSDM_FilterInit+0x11c>
{
 8005372:	b510      	push	{r4, lr}
 8005374:	4604      	mov	r4, r0
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8005376:	6802      	ldr	r2, [r0, #0]
 8005378:	4b45      	ldr	r3, [pc, #276]	; (8005490 <HAL_DFSDM_FilterInit+0x124>)
 800537a:	429a      	cmp	r2, r3
 800537c:	d05e      	beq.n	800543c <HAL_DFSDM_FilterInit+0xd0>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800537e:	2300      	movs	r3, #0
 8005380:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8005382:	2201      	movs	r2, #1
 8005384:	6462      	str	r2, [r4, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8005386:	64a2      	str	r2, [r4, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8005388:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800538a:	4620      	mov	r0, r4
 800538c:	f7ff ffec 	bl	8005368 <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8005390:	6822      	ldr	r2, [r4, #0]
 8005392:	6813      	ldr	r3, [r2, #0]
 8005394:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005398:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800539a:	7a23      	ldrb	r3, [r4, #8]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d055      	beq.n	800544c <HAL_DFSDM_FilterInit+0xe0>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80053a0:	6822      	ldr	r2, [r4, #0]
 80053a2:	6813      	ldr	r3, [r2, #0]
 80053a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80053a8:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80053aa:	7a63      	ldrb	r3, [r4, #9]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d053      	beq.n	8005458 <HAL_DFSDM_FilterInit+0xec>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80053b0:	6822      	ldr	r2, [r4, #0]
 80053b2:	6813      	ldr	r3, [r2, #0]
 80053b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053b8:	6013      	str	r3, [r2, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80053ba:	6822      	ldr	r2, [r4, #0]
 80053bc:	6811      	ldr	r1, [r2, #0]
 80053be:	4b35      	ldr	r3, [pc, #212]	; (8005494 <HAL_DFSDM_FilterInit+0x128>)
 80053c0:	400b      	ands	r3, r1
 80053c2:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80053c4:	68e3      	ldr	r3, [r4, #12]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d04c      	beq.n	8005464 <HAL_DFSDM_FilterInit+0xf8>
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80053ca:	7c23      	ldrb	r3, [r4, #16]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d04f      	beq.n	8005470 <HAL_DFSDM_FilterInit+0x104>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80053d0:	6822      	ldr	r2, [r4, #0]
 80053d2:	6813      	ldr	r3, [r2, #0]
 80053d4:	f023 0310 	bic.w	r3, r3, #16
 80053d8:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80053da:	7c63      	ldrb	r3, [r4, #17]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d04d      	beq.n	800547c <HAL_DFSDM_FilterInit+0x110>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80053e0:	6822      	ldr	r2, [r4, #0]
 80053e2:	6813      	ldr	r3, [r2, #0]
 80053e4:	f023 0320 	bic.w	r3, r3, #32
 80053e8:	6013      	str	r3, [r2, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80053ea:	6822      	ldr	r2, [r4, #0]
 80053ec:	6951      	ldr	r1, [r2, #20]
 80053ee:	4b2a      	ldr	r3, [pc, #168]	; (8005498 <HAL_DFSDM_FilterInit+0x12c>)
 80053f0:	400b      	ands	r3, r1
 80053f2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80053f4:	69e3      	ldr	r3, [r4, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_OFFSET) |
 80053f6:	6a22      	ldr	r2, [r4, #32]
 80053f8:	3a01      	subs	r2, #1
 80053fa:	4928      	ldr	r1, [pc, #160]	; (800549c <HAL_DFSDM_FilterInit+0x130>)
 80053fc:	fa91 f1a1 	rbit	r1, r1
 8005400:	fab1 f181 	clz	r1, r1
 8005404:	408a      	lsls	r2, r1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8005406:	4313      	orrs	r3, r2
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8005408:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800540a:	3a01      	subs	r2, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_OFFSET) |
 800540c:	4313      	orrs	r3, r2
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800540e:	6821      	ldr	r1, [r4, #0]
 8005410:	694a      	ldr	r2, [r1, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	614b      	str	r3, [r1, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8005416:	6863      	ldr	r3, [r4, #4]
 8005418:	6363      	str	r3, [r4, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800541a:	68e3      	ldr	r3, [r4, #12]
 800541c:	63a3      	str	r3, [r4, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 800541e:	69a3      	ldr	r3, [r4, #24]
 8005420:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8005422:	7c23      	ldrb	r3, [r4, #16]
 8005424:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8005428:	6822      	ldr	r2, [r4, #0]
 800542a:	6813      	ldr	r3, [r2, #0]
 800542c:	f043 0301 	orr.w	r3, r3, #1
 8005430:	6013      	str	r3, [r2, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8005432:	2301      	movs	r3, #1
 8005434:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 8005438:	2000      	movs	r0, #0
}
 800543a:	bd10      	pop	{r4, pc}
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 800543c:	6843      	ldr	r3, [r0, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800543e:	2b01      	cmp	r3, #1
 8005440:	d024      	beq.n	800548c <HAL_DFSDM_FilterInit+0x120>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8005442:	68c3      	ldr	r3, [r0, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8005444:	2b01      	cmp	r3, #1
 8005446:	d19a      	bne.n	800537e <HAL_DFSDM_FilterInit+0x12>
    return HAL_ERROR;
 8005448:	2001      	movs	r0, #1
 800544a:	e7f6      	b.n	800543a <HAL_DFSDM_FilterInit+0xce>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800544c:	6822      	ldr	r2, [r4, #0]
 800544e:	6813      	ldr	r3, [r2, #0]
 8005450:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	e7a8      	b.n	80053aa <HAL_DFSDM_FilterInit+0x3e>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8005458:	6822      	ldr	r2, [r4, #0]
 800545a:	6813      	ldr	r3, [r2, #0]
 800545c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e7aa      	b.n	80053ba <HAL_DFSDM_FilterInit+0x4e>
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8005464:	6822      	ldr	r2, [r4, #0]
 8005466:	6813      	ldr	r3, [r2, #0]
 8005468:	6961      	ldr	r1, [r4, #20]
 800546a:	430b      	orrs	r3, r1
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	e7ac      	b.n	80053ca <HAL_DFSDM_FilterInit+0x5e>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8005470:	6822      	ldr	r2, [r4, #0]
 8005472:	6813      	ldr	r3, [r2, #0]
 8005474:	f043 0310 	orr.w	r3, r3, #16
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	e7ae      	b.n	80053da <HAL_DFSDM_FilterInit+0x6e>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800547c:	6822      	ldr	r2, [r4, #0]
 800547e:	6813      	ldr	r3, [r2, #0]
 8005480:	f043 0320 	orr.w	r3, r3, #32
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	e7b0      	b.n	80053ea <HAL_DFSDM_FilterInit+0x7e>
    return HAL_ERROR;
 8005488:	2001      	movs	r0, #1
}
 800548a:	4770      	bx	lr
    return HAL_ERROR;
 800548c:	2001      	movs	r0, #1
 800548e:	e7d4      	b.n	800543a <HAL_DFSDM_FilterInit+0xce>
 8005490:	40017500 	.word	0x40017500
 8005494:	ffff80f7 	.word	0xffff80f7
 8005498:	1c00ff00 	.word	0x1c00ff00
 800549c:	03ff0000 	.word	0x03ff0000

080054a0 <HAL_DFSDM_FilterMspDeInit>:
}
 80054a0:	4770      	bx	lr

080054a2 <HAL_DFSDM_FilterDeInit>:
  if(hdfsdm_filter == NULL)
 80054a2:	b160      	cbz	r0, 80054be <HAL_DFSDM_FilterDeInit+0x1c>
{
 80054a4:	b510      	push	{r4, lr}
 80054a6:	4604      	mov	r4, r0
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80054a8:	6802      	ldr	r2, [r0, #0]
 80054aa:	6813      	ldr	r3, [r2, #0]
 80054ac:	f023 0301 	bic.w	r3, r3, #1
 80054b0:	6013      	str	r3, [r2, #0]
  HAL_DFSDM_FilterMspDeInit(hdfsdm_filter);
 80054b2:	f7ff fff5 	bl	80054a0 <HAL_DFSDM_FilterMspDeInit>
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_RESET;
 80054b6:	2000      	movs	r0, #0
 80054b8:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
}
 80054bc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80054be:	2001      	movs	r0, #1
}
 80054c0:	4770      	bx	lr
	...

080054c4 <HAL_DFSDM_FilterConfigRegChannel>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 80054c4:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2bfd      	cmp	r3, #253	; 0xfd
 80054ce:	d81c      	bhi.n	800550a <HAL_DFSDM_FilterConfigRegChannel+0x46>
{
 80054d0:	b430      	push	{r4, r5}
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80054d2:	6804      	ldr	r4, [r0, #0]
 80054d4:	6825      	ldr	r5, [r4, #0]
 80054d6:	4b0e      	ldr	r3, [pc, #56]	; (8005510 <HAL_DFSDM_FilterConfigRegChannel+0x4c>)
 80054d8:	402b      	ands	r3, r5
 80054da:	6023      	str	r3, [r4, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80054dc:	2a01      	cmp	r2, #1
 80054de:	d00a      	beq.n	80054f6 <HAL_DFSDM_FilterConfigRegChannel+0x32>
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80054e0:	6804      	ldr	r4, [r0, #0]
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	0209      	lsls	r1, r1, #8
 80054e6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 80054ea:	4319      	orrs	r1, r3
 80054ec:	6021      	str	r1, [r4, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80054ee:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 80054f0:	2000      	movs	r0, #0
}
 80054f2:	bc30      	pop	{r4, r5}
 80054f4:	4770      	bx	lr
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80054f6:	6804      	ldr	r4, [r0, #0]
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	0209      	lsls	r1, r1, #8
 80054fc:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8005500:	430b      	orrs	r3, r1
 8005502:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005506:	6023      	str	r3, [r4, #0]
 8005508:	e7f1      	b.n	80054ee <HAL_DFSDM_FilterConfigRegChannel+0x2a>
    status = HAL_ERROR;
 800550a:	2001      	movs	r0, #1
}
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	f8fbffff 	.word	0xf8fbffff

08005514 <HAL_DFSDM_FilterRegularStart_DMA>:
{
 8005514:	b538      	push	{r3, r4, r5, lr}
  if((pData == NULL) || (Length == 0))
 8005516:	fab2 f482 	clz	r4, r2
 800551a:	0964      	lsrs	r4, r4, #5
 800551c:	2900      	cmp	r1, #0
 800551e:	bf08      	it	eq
 8005520:	2401      	moveq	r4, #1
 8005522:	2c00      	cmp	r4, #0
 8005524:	d140      	bne.n	80055a8 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
 8005526:	4605      	mov	r5, r0
 8005528:	4608      	mov	r0, r1
 800552a:	4613      	mov	r3, r2
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800552c:	682a      	ldr	r2, [r5, #0]
 800552e:	6812      	ldr	r2, [r2, #0]
 8005530:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8005534:	d03b      	beq.n	80055ae <HAL_DFSDM_FilterRegularStart_DMA+0x9a>
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8005536:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005538:	b942      	cbnz	r2, 800554c <HAL_DFSDM_FilterRegularStart_DMA+0x38>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800553a:	6b29      	ldr	r1, [r5, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800553c:	b931      	cbnz	r1, 800554c <HAL_DFSDM_FilterRegularStart_DMA+0x38>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800553e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8005540:	69c9      	ldr	r1, [r1, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8005542:	b919      	cbnz	r1, 800554c <HAL_DFSDM_FilterRegularStart_DMA+0x38>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8005544:	2b01      	cmp	r3, #1
 8005546:	d001      	beq.n	800554c <HAL_DFSDM_FilterRegularStart_DMA+0x38>
    status = HAL_ERROR;
 8005548:	2401      	movs	r4, #1
 800554a:	e02e      	b.n	80055aa <HAL_DFSDM_FilterRegularStart_DMA+0x96>
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800554c:	b932      	cbnz	r2, 800555c <HAL_DFSDM_FilterRegularStart_DMA+0x48>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800554e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8005550:	b922      	cbnz	r2, 800555c <HAL_DFSDM_FilterRegularStart_DMA+0x48>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8005552:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005554:	69d2      	ldr	r2, [r2, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8005556:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800555a:	d02a      	beq.n	80055b2 <HAL_DFSDM_FilterRegularStart_DMA+0x9e>
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800555c:	f895 204c 	ldrb.w	r2, [r5, #76]	; 0x4c
 8005560:	2a03      	cmp	r2, #3
 8005562:	bf18      	it	ne
 8005564:	2a01      	cmpne	r2, #1
 8005566:	d126      	bne.n	80055b6 <HAL_DFSDM_FilterRegularStart_DMA+0xa2>
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8005568:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800556a:	4914      	ldr	r1, [pc, #80]	; (80055bc <HAL_DFSDM_FilterRegularStart_DMA+0xa8>)
 800556c:	63d1      	str	r1, [r2, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800556e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005570:	4913      	ldr	r1, [pc, #76]	; (80055c0 <HAL_DFSDM_FilterRegularStart_DMA+0xac>)
 8005572:	64d1      	str	r1, [r2, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8005574:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005576:	69d1      	ldr	r1, [r2, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8005578:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800557c:	d00e      	beq.n	800559c <HAL_DFSDM_FilterRegularStart_DMA+0x88>
 800557e:	2100      	movs	r1, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8005580:	6411      	str	r1, [r2, #64]	; 0x40
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8005582:	6829      	ldr	r1, [r5, #0]
 8005584:	4602      	mov	r2, r0
 8005586:	311c      	adds	r1, #28
 8005588:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800558a:	f000 f958 	bl	800583e <HAL_DMA_Start_IT>
 800558e:	4604      	mov	r4, r0
 8005590:	b130      	cbz	r0, 80055a0 <HAL_DFSDM_FilterRegularStart_DMA+0x8c>
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8005592:	23ff      	movs	r3, #255	; 0xff
 8005594:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
      status = HAL_ERROR;
 8005598:	2401      	movs	r4, #1
 800559a:	e006      	b.n	80055aa <HAL_DFSDM_FilterRegularStart_DMA+0x96>
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 800559c:	4909      	ldr	r1, [pc, #36]	; (80055c4 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>)
 800559e:	e7ef      	b.n	8005580 <HAL_DFSDM_FilterRegularStart_DMA+0x6c>
      DFSDM_RegConvStart(hdfsdm_filter);
 80055a0:	4628      	mov	r0, r5
 80055a2:	f7ff fdaf 	bl	8005104 <DFSDM_RegConvStart>
 80055a6:	e000      	b.n	80055aa <HAL_DFSDM_FilterRegularStart_DMA+0x96>
    status = HAL_ERROR;
 80055a8:	2401      	movs	r4, #1
}
 80055aa:	4620      	mov	r0, r4
 80055ac:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80055ae:	2401      	movs	r4, #1
 80055b0:	e7fb      	b.n	80055aa <HAL_DFSDM_FilterRegularStart_DMA+0x96>
    status = HAL_ERROR;
 80055b2:	2401      	movs	r4, #1
 80055b4:	e7f9      	b.n	80055aa <HAL_DFSDM_FilterRegularStart_DMA+0x96>
    status = HAL_ERROR;
 80055b6:	2401      	movs	r4, #1
 80055b8:	e7f7      	b.n	80055aa <HAL_DFSDM_FilterRegularStart_DMA+0x96>
 80055ba:	bf00      	nop
 80055bc:	080055fb 	.word	0x080055fb
 80055c0:	08005611 	.word	0x08005611
 80055c4:	08005605 	.word	0x08005605

080055c8 <HAL_DFSDM_FilterRegularStop_DMA>:
{
 80055c8:	b538      	push	{r3, r4, r5, lr}
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80055ca:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	bf18      	it	ne
 80055d2:	2b04      	cmpne	r3, #4
 80055d4:	d002      	beq.n	80055dc <HAL_DFSDM_FilterRegularStop_DMA+0x14>
    status = HAL_ERROR;
 80055d6:	2501      	movs	r5, #1
}
 80055d8:	4628      	mov	r0, r5
 80055da:	bd38      	pop	{r3, r4, r5, pc}
 80055dc:	4604      	mov	r4, r0
    if(HAL_DMA_Abort(hdfsdm_filter->hdmaReg) != HAL_OK)
 80055de:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80055e0:	f000 f967 	bl	80058b2 <HAL_DMA_Abort>
 80055e4:	4605      	mov	r5, r0
 80055e6:	b120      	cbz	r0, 80055f2 <HAL_DFSDM_FilterRegularStop_DMA+0x2a>
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80055e8:	23ff      	movs	r3, #255	; 0xff
 80055ea:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
      status = HAL_ERROR;
 80055ee:	2501      	movs	r5, #1
 80055f0:	e7f2      	b.n	80055d8 <HAL_DFSDM_FilterRegularStop_DMA+0x10>
      DFSDM_RegConvStop(hdfsdm_filter);
 80055f2:	4620      	mov	r0, r4
 80055f4:	f7ff fdba 	bl	800516c <DFSDM_RegConvStop>
 80055f8:	e7ee      	b.n	80055d8 <HAL_DFSDM_FilterRegularStop_DMA+0x10>

080055fa <DFSDM_DMARegularConvCplt>:
{
 80055fa:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80055fc:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80055fe:	f7fc fd4f 	bl	80020a0 <HAL_DFSDM_FilterRegConvCpltCallback>
}
 8005602:	bd08      	pop	{r3, pc}

08005604 <DFSDM_DMARegularHalfConvCplt>:
{
 8005604:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8005606:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005608:	f7fc fdae 	bl	8002168 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
}
 800560c:	bd08      	pop	{r3, pc}

0800560e <HAL_DFSDM_FilterErrorCallback>:
}
 800560e:	4770      	bx	lr

08005610 <DFSDM_DMAError>:
{
 8005610:	b508      	push	{r3, lr}
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8005612:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8005614:	2303      	movs	r3, #3
 8005616:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8005618:	f7ff fff9 	bl	800560e <HAL_DFSDM_FilterErrorCallback>
}
 800561c:	bd08      	pop	{r3, pc}

0800561e <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800561e:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005620:	6805      	ldr	r5, [r0, #0]
 8005622:	682c      	ldr	r4, [r5, #0]
 8005624:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8005628:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800562a:	6804      	ldr	r4, [r0, #0]
 800562c:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800562e:	6883      	ldr	r3, [r0, #8]
 8005630:	2b40      	cmp	r3, #64	; 0x40
 8005632:	d005      	beq.n	8005640 <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8005634:	6803      	ldr	r3, [r0, #0]
 8005636:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8005638:	6803      	ldr	r3, [r0, #0]
 800563a:	60da      	str	r2, [r3, #12]
  }
}
 800563c:	bc30      	pop	{r4, r5}
 800563e:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8005640:	6803      	ldr	r3, [r0, #0]
 8005642:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8005644:	6803      	ldr	r3, [r0, #0]
 8005646:	60d9      	str	r1, [r3, #12]
 8005648:	e7f8      	b.n	800563c <DMA_SetConfig+0x1e>
	...

0800564c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800564c:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800564e:	6801      	ldr	r1, [r0, #0]
 8005650:	b2ca      	uxtb	r2, r1
 8005652:	3a10      	subs	r2, #16
 8005654:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <DMA_CalcBaseAndBitshift+0x34>)
 8005656:	fba3 4302 	umull	r4, r3, r3, r2
 800565a:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800565c:	4c09      	ldr	r4, [pc, #36]	; (8005684 <DMA_CalcBaseAndBitshift+0x38>)
 800565e:	5ce3      	ldrb	r3, [r4, r3]
 8005660:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005662:	2a5f      	cmp	r2, #95	; 0x5f
 8005664:	d907      	bls.n	8005676 <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005666:	4b08      	ldr	r3, [pc, #32]	; (8005688 <DMA_CalcBaseAndBitshift+0x3c>)
 8005668:	400b      	ands	r3, r1
 800566a:	3304      	adds	r3, #4
 800566c:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800566e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8005670:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005674:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005676:	4b04      	ldr	r3, [pc, #16]	; (8005688 <DMA_CalcBaseAndBitshift+0x3c>)
 8005678:	400b      	ands	r3, r1
 800567a:	6583      	str	r3, [r0, #88]	; 0x58
 800567c:	e7f7      	b.n	800566e <DMA_CalcBaseAndBitshift+0x22>
 800567e:	bf00      	nop
 8005680:	aaaaaaab 	.word	0xaaaaaaab
 8005684:	08012c98 	.word	0x08012c98
 8005688:	fffffc00 	.word	0xfffffc00

0800568c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800568c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800568e:	6982      	ldr	r2, [r0, #24]
 8005690:	b992      	cbnz	r2, 80056b8 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8005692:	2b01      	cmp	r3, #1
 8005694:	d00a      	beq.n	80056ac <DMA_CheckFifoParam+0x20>
 8005696:	2b02      	cmp	r3, #2
 8005698:	d002      	beq.n	80056a0 <DMA_CheckFifoParam+0x14>
 800569a:	b10b      	cbz	r3, 80056a0 <DMA_CheckFifoParam+0x14>
 800569c:	2000      	movs	r0, #0
 800569e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056a0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80056a2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80056a6:	d128      	bne.n	80056fa <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80056a8:	2000      	movs	r0, #0
 80056aa:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80056ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056b2:	d024      	beq.n	80056fe <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80056b4:	2000      	movs	r0, #0
 80056b6:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056b8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80056bc:	d009      	beq.n	80056d2 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d925      	bls.n	800570e <DMA_CheckFifoParam+0x82>
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d125      	bne.n	8005712 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80056c8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80056cc:	d123      	bne.n	8005716 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80056ce:	2000      	movs	r0, #0
 80056d0:	4770      	bx	lr
    switch (tmp)
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	d803      	bhi.n	80056de <DMA_CheckFifoParam+0x52>
 80056d6:	e8df f003 	tbb	[pc, r3]
 80056da:	0414      	.short	0x0414
 80056dc:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056de:	2000      	movs	r0, #0
 80056e0:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80056e4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80056e8:	d10d      	bne.n	8005706 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80056ea:	2000      	movs	r0, #0
 80056ec:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80056f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056f4:	d009      	beq.n	800570a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80056f6:	2000      	movs	r0, #0
 80056f8:	4770      	bx	lr
        status = HAL_ERROR;
 80056fa:	2001      	movs	r0, #1
 80056fc:	4770      	bx	lr
        status = HAL_ERROR;
 80056fe:	2001      	movs	r0, #1
 8005700:	4770      	bx	lr
      status = HAL_ERROR;
 8005702:	2001      	movs	r0, #1
 8005704:	4770      	bx	lr
        status = HAL_ERROR;
 8005706:	2001      	movs	r0, #1
 8005708:	4770      	bx	lr
        status = HAL_ERROR;
 800570a:	2001      	movs	r0, #1
 800570c:	4770      	bx	lr
      status = HAL_ERROR;
 800570e:	2001      	movs	r0, #1
 8005710:	4770      	bx	lr
    switch (tmp)
 8005712:	2000      	movs	r0, #0
 8005714:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8005716:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8005718:	4770      	bx	lr
	...

0800571c <HAL_DMA_Init>:
{
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005720:	f7ff fc3e 	bl	8004fa0 <HAL_GetTick>
  if(hdma == NULL)
 8005724:	2c00      	cmp	r4, #0
 8005726:	d05b      	beq.n	80057e0 <HAL_DMA_Init+0xc4>
 8005728:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 800572a:	2300      	movs	r3, #0
 800572c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8005730:	2302      	movs	r3, #2
 8005732:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8005736:	6822      	ldr	r2, [r4, #0]
 8005738:	6813      	ldr	r3, [r2, #0]
 800573a:	f023 0301 	bic.w	r3, r3, #1
 800573e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	f012 0f01 	tst.w	r2, #1
 8005748:	d00a      	beq.n	8005760 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800574a:	f7ff fc29 	bl	8004fa0 <HAL_GetTick>
 800574e:	1b43      	subs	r3, r0, r5
 8005750:	2b05      	cmp	r3, #5
 8005752:	d9f5      	bls.n	8005740 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005754:	2320      	movs	r3, #32
 8005756:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005758:	2003      	movs	r0, #3
 800575a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800575e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8005760:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005762:	4820      	ldr	r0, [pc, #128]	; (80057e4 <HAL_DMA_Init+0xc8>)
 8005764:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005766:	6861      	ldr	r1, [r4, #4]
 8005768:	68a2      	ldr	r2, [r4, #8]
 800576a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800576c:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800576e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005770:	6921      	ldr	r1, [r4, #16]
 8005772:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005774:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005776:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005778:	69a1      	ldr	r1, [r4, #24]
 800577a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800577c:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800577e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8005780:	6a21      	ldr	r1, [r4, #32]
 8005782:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005784:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005786:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005788:	2904      	cmp	r1, #4
 800578a:	d01e      	beq.n	80057ca <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 800578c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800578e:	6826      	ldr	r6, [r4, #0]
 8005790:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005792:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8005796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005798:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800579a:	2b04      	cmp	r3, #4
 800579c:	d107      	bne.n	80057ae <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800579e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80057a0:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80057a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80057a4:	b11b      	cbz	r3, 80057ae <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80057a6:	4620      	mov	r0, r4
 80057a8:	f7ff ff70 	bl	800568c <DMA_CheckFifoParam>
 80057ac:	b990      	cbnz	r0, 80057d4 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80057ae:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057b0:	4620      	mov	r0, r4
 80057b2:	f7ff ff4b 	bl	800564c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057b6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80057b8:	233f      	movs	r3, #63	; 0x3f
 80057ba:	4093      	lsls	r3, r2
 80057bc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057be:	2000      	movs	r0, #0
 80057c0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80057c8:	e7c9      	b.n	800575e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80057ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80057cc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80057ce:	4301      	orrs	r1, r0
 80057d0:	430a      	orrs	r2, r1
 80057d2:	e7db      	b.n	800578c <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057d4:	2340      	movs	r3, #64	; 0x40
 80057d6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80057d8:	2001      	movs	r0, #1
 80057da:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80057de:	e7be      	b.n	800575e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80057e0:	2001      	movs	r0, #1
 80057e2:	e7bc      	b.n	800575e <HAL_DMA_Init+0x42>
 80057e4:	e010803f 	.word	0xe010803f

080057e8 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 80057e8:	b338      	cbz	r0, 800583a <HAL_DMA_DeInit+0x52>
{
 80057ea:	b538      	push	{r3, r4, r5, lr}
 80057ec:	4605      	mov	r5, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80057ee:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 80057f2:	b2c0      	uxtb	r0, r0
 80057f4:	2802      	cmp	r0, #2
 80057f6:	d01f      	beq.n	8005838 <HAL_DMA_DeInit+0x50>
  __HAL_DMA_DISABLE(hdma);
 80057f8:	682a      	ldr	r2, [r5, #0]
 80057fa:	6813      	ldr	r3, [r2, #0]
 80057fc:	f023 0301 	bic.w	r3, r3, #1
 8005800:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8005802:	682b      	ldr	r3, [r5, #0]
 8005804:	2400      	movs	r4, #0
 8005806:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8005808:	682b      	ldr	r3, [r5, #0]
 800580a:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800580c:	682b      	ldr	r3, [r5, #0]
 800580e:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8005810:	682b      	ldr	r3, [r5, #0]
 8005812:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	2221      	movs	r2, #33	; 0x21
 800581c:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800581e:	4628      	mov	r0, r5
 8005820:	f7ff ff14 	bl	800564c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005824:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8005826:	233f      	movs	r3, #63	; 0x3f
 8005828:	4093      	lsls	r3, r2
 800582a:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800582c:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 800582e:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8005832:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  return HAL_OK;
 8005836:	4620      	mov	r0, r4
}
 8005838:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800583a:	2001      	movs	r0, #1
}
 800583c:	4770      	bx	lr

0800583e <HAL_DMA_Start_IT>:
{
 800583e:	b538      	push	{r3, r4, r5, lr}
 8005840:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005842:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8005844:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8005848:	2801      	cmp	r0, #1
 800584a:	d030      	beq.n	80058ae <HAL_DMA_Start_IT+0x70>
 800584c:	2001      	movs	r0, #1
 800584e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005852:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8005856:	b2c0      	uxtb	r0, r0
 8005858:	2801      	cmp	r0, #1
 800585a:	d004      	beq.n	8005866 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800585c:	2300      	movs	r3, #0
 800585e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8005862:	2002      	movs	r0, #2
}
 8005864:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8005866:	2002      	movs	r0, #2
 8005868:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800586c:	2000      	movs	r0, #0
 800586e:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005870:	4620      	mov	r0, r4
 8005872:	f7ff fed4 	bl	800561e <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005876:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005878:	233f      	movs	r3, #63	; 0x3f
 800587a:	4093      	lsls	r3, r2
 800587c:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800587e:	6822      	ldr	r2, [r4, #0]
 8005880:	6813      	ldr	r3, [r2, #0]
 8005882:	f043 0316 	orr.w	r3, r3, #22
 8005886:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005888:	6822      	ldr	r2, [r4, #0]
 800588a:	6953      	ldr	r3, [r2, #20]
 800588c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005890:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8005892:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005894:	b123      	cbz	r3, 80058a0 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005896:	6822      	ldr	r2, [r4, #0]
 8005898:	6813      	ldr	r3, [r2, #0]
 800589a:	f043 0308 	orr.w	r3, r3, #8
 800589e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80058a0:	6822      	ldr	r2, [r4, #0]
 80058a2:	6813      	ldr	r3, [r2, #0]
 80058a4:	f043 0301 	orr.w	r3, r3, #1
 80058a8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058aa:	2000      	movs	r0, #0
 80058ac:	e7da      	b.n	8005864 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 80058ae:	2002      	movs	r0, #2
 80058b0:	e7d8      	b.n	8005864 <HAL_DMA_Start_IT+0x26>

080058b2 <HAL_DMA_Abort>:
{
 80058b2:	b570      	push	{r4, r5, r6, lr}
 80058b4:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058b6:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80058b8:	f7ff fb72 	bl	8004fa0 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058bc:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d006      	beq.n	80058d4 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058c6:	2380      	movs	r3, #128	; 0x80
 80058c8:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80058ca:	2300      	movs	r3, #0
 80058cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80058d0:	2001      	movs	r0, #1
}
 80058d2:	bd70      	pop	{r4, r5, r6, pc}
 80058d4:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058d6:	6822      	ldr	r2, [r4, #0]
 80058d8:	6813      	ldr	r3, [r2, #0]
 80058da:	f023 0316 	bic.w	r3, r3, #22
 80058de:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058e0:	6822      	ldr	r2, [r4, #0]
 80058e2:	6953      	ldr	r3, [r2, #20]
 80058e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058e8:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058ec:	b1e3      	cbz	r3, 8005928 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058ee:	6822      	ldr	r2, [r4, #0]
 80058f0:	6813      	ldr	r3, [r2, #0]
 80058f2:	f023 0308 	bic.w	r3, r3, #8
 80058f6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80058f8:	6822      	ldr	r2, [r4, #0]
 80058fa:	6813      	ldr	r3, [r2, #0]
 80058fc:	f023 0301 	bic.w	r3, r3, #1
 8005900:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f013 0f01 	tst.w	r3, #1
 800590a:	d011      	beq.n	8005930 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800590c:	f7ff fb48 	bl	8004fa0 <HAL_GetTick>
 8005910:	1b43      	subs	r3, r0, r5
 8005912:	2b05      	cmp	r3, #5
 8005914:	d9f5      	bls.n	8005902 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005916:	2320      	movs	r3, #32
 8005918:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800591a:	2300      	movs	r3, #0
 800591c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005920:	2003      	movs	r0, #3
 8005922:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8005926:	e7d4      	b.n	80058d2 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005928:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1df      	bne.n	80058ee <HAL_DMA_Abort+0x3c>
 800592e:	e7e3      	b.n	80058f8 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005930:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005932:	233f      	movs	r3, #63	; 0x3f
 8005934:	4093      	lsls	r3, r2
 8005936:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8005938:	2000      	movs	r0, #0
 800593a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800593e:	2301      	movs	r3, #1
 8005940:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8005944:	e7c5      	b.n	80058d2 <HAL_DMA_Abort+0x20>

08005946 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005946:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d003      	beq.n	8005958 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005950:	2380      	movs	r3, #128	; 0x80
 8005952:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8005954:	2001      	movs	r0, #1
 8005956:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8005958:	2305      	movs	r3, #5
 800595a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800595e:	6802      	ldr	r2, [r0, #0]
 8005960:	6813      	ldr	r3, [r2, #0]
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005968:	2000      	movs	r0, #0
}
 800596a:	4770      	bx	lr

0800596c <HAL_DMA_IRQHandler>:
{
 800596c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800596e:	b083      	sub	sp, #12
 8005970:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8005972:	2300      	movs	r3, #0
 8005974:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8005976:	4b72      	ldr	r3, [pc, #456]	; (8005b40 <HAL_DMA_IRQHandler+0x1d4>)
 8005978:	681d      	ldr	r5, [r3, #0]
 800597a:	4b72      	ldr	r3, [pc, #456]	; (8005b44 <HAL_DMA_IRQHandler+0x1d8>)
 800597c:	fba3 3505 	umull	r3, r5, r3, r5
 8005980:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005982:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8005984:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005986:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005988:	2308      	movs	r3, #8
 800598a:	4093      	lsls	r3, r2
 800598c:	4233      	tst	r3, r6
 800598e:	d010      	beq.n	80059b2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005990:	6803      	ldr	r3, [r0, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	f012 0f04 	tst.w	r2, #4
 8005998:	d00b      	beq.n	80059b2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	f022 0204 	bic.w	r2, r2, #4
 80059a0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80059a2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80059a4:	2308      	movs	r3, #8
 80059a6:	4093      	lsls	r3, r2
 80059a8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059aa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80059ac:	f043 0301 	orr.w	r3, r3, #1
 80059b0:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80059b2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80059b4:	4b64      	ldr	r3, [pc, #400]	; (8005b48 <HAL_DMA_IRQHandler+0x1dc>)
 80059b6:	4093      	lsls	r3, r2
 80059b8:	4233      	tst	r3, r6
 80059ba:	d009      	beq.n	80059d0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80059bc:	6822      	ldr	r2, [r4, #0]
 80059be:	6952      	ldr	r2, [r2, #20]
 80059c0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80059c4:	d004      	beq.n	80059d0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80059c6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80059ca:	f043 0302 	orr.w	r3, r3, #2
 80059ce:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80059d0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80059d2:	4b5e      	ldr	r3, [pc, #376]	; (8005b4c <HAL_DMA_IRQHandler+0x1e0>)
 80059d4:	4093      	lsls	r3, r2
 80059d6:	4233      	tst	r3, r6
 80059d8:	d009      	beq.n	80059ee <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80059da:	6822      	ldr	r2, [r4, #0]
 80059dc:	6812      	ldr	r2, [r2, #0]
 80059de:	f012 0f02 	tst.w	r2, #2
 80059e2:	d004      	beq.n	80059ee <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80059e4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80059e8:	f043 0304 	orr.w	r3, r3, #4
 80059ec:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80059ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80059f0:	2310      	movs	r3, #16
 80059f2:	4093      	lsls	r3, r2
 80059f4:	4233      	tst	r3, r6
 80059f6:	d024      	beq.n	8005a42 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80059f8:	6822      	ldr	r2, [r4, #0]
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	f012 0f08 	tst.w	r2, #8
 8005a00:	d01f      	beq.n	8005a42 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a02:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005a0c:	d00d      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005a14:	d104      	bne.n	8005a20 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8005a16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a18:	b19b      	cbz	r3, 8005a42 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	4798      	blx	r3
 8005a1e:	e010      	b.n	8005a42 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a20:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005a22:	b173      	cbz	r3, 8005a42 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8005a24:	4620      	mov	r0, r4
 8005a26:	4798      	blx	r3
 8005a28:	e00b      	b.n	8005a42 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005a30:	d103      	bne.n	8005a3a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	f022 0208 	bic.w	r2, r2, #8
 8005a38:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8005a3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a3c:	b10b      	cbz	r3, 8005a42 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8005a3e:	4620      	mov	r0, r4
 8005a40:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a42:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005a44:	2320      	movs	r3, #32
 8005a46:	4093      	lsls	r3, r2
 8005a48:	4233      	tst	r3, r6
 8005a4a:	d055      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a4c:	6822      	ldr	r2, [r4, #0]
 8005a4e:	6812      	ldr	r2, [r2, #0]
 8005a50:	f012 0f10 	tst.w	r2, #16
 8005a54:	d050      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a56:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a58:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b05      	cmp	r3, #5
 8005a60:	d00e      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005a6a:	d033      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005a72:	d12a      	bne.n	8005aca <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8005a74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d03e      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	4798      	blx	r3
 8005a7e:	e03b      	b.n	8005af8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a80:	6822      	ldr	r2, [r4, #0]
 8005a82:	6813      	ldr	r3, [r2, #0]
 8005a84:	f023 0316 	bic.w	r3, r3, #22
 8005a88:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a8a:	6822      	ldr	r2, [r4, #0]
 8005a8c:	6953      	ldr	r3, [r2, #20]
 8005a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a92:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a96:	b1a3      	cbz	r3, 8005ac2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a98:	6822      	ldr	r2, [r4, #0]
 8005a9a:	6813      	ldr	r3, [r2, #0]
 8005a9c:	f023 0308 	bic.w	r3, r3, #8
 8005aa0:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005aa2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005aa4:	233f      	movs	r3, #63	; 0x3f
 8005aa6:	4093      	lsls	r3, r2
 8005aa8:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8005ab6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d03f      	beq.n	8005b3c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8005abc:	4620      	mov	r0, r4
 8005abe:	4798      	blx	r3
        return;
 8005ac0:	e03c      	b.n	8005b3c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ac2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e7      	bne.n	8005a98 <HAL_DMA_IRQHandler+0x12c>
 8005ac8:	e7eb      	b.n	8005aa2 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8005aca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005acc:	b1a3      	cbz	r3, 8005af8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8005ace:	4620      	mov	r0, r4
 8005ad0:	4798      	blx	r3
 8005ad2:	e011      	b.n	8005af8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005ada:	d109      	bne.n	8005af0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	f022 0210 	bic.w	r2, r2, #16
 8005ae2:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8005af0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005af2:	b10b      	cbz	r3, 8005af8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8005af4:	4620      	mov	r0, r4
 8005af6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005af8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005afa:	b1fb      	cbz	r3, 8005b3c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005afc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005afe:	f013 0f01 	tst.w	r3, #1
 8005b02:	d017      	beq.n	8005b34 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b04:	2305      	movs	r3, #5
 8005b06:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005b0a:	6822      	ldr	r2, [r4, #0]
 8005b0c:	6813      	ldr	r3, [r2, #0]
 8005b0e:	f023 0301 	bic.w	r3, r3, #1
 8005b12:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8005b14:	9b01      	ldr	r3, [sp, #4]
 8005b16:	3301      	adds	r3, #1
 8005b18:	9301      	str	r3, [sp, #4]
 8005b1a:	42ab      	cmp	r3, r5
 8005b1c:	d804      	bhi.n	8005b28 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f013 0f01 	tst.w	r3, #1
 8005b26:	d1f5      	bne.n	8005b14 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8005b34:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005b36:	b10b      	cbz	r3, 8005b3c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8005b38:	4620      	mov	r0, r4
 8005b3a:	4798      	blx	r3
}
 8005b3c:	b003      	add	sp, #12
 8005b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b40:	20000190 	.word	0x20000190
 8005b44:	1b4e81b5 	.word	0x1b4e81b5
 8005b48:	00800001 	.word	0x00800001
 8005b4c:	00800004 	.word	0x00800004

08005b50 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005b50:	b470      	push	{r4, r5, r6}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005b52:	6806      	ldr	r6, [r0, #0]
 8005b54:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8005b56:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8005b5a:	9d03      	ldr	r5, [sp, #12]
 8005b5c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8005b60:	432c      	orrs	r4, r5
 8005b62:	6474      	str	r4, [r6, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005b64:	6803      	ldr	r3, [r0, #0]
 8005b66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005b68:	6843      	ldr	r3, [r0, #4]
 8005b6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b6e:	d003      	beq.n	8005b78 <DMA2D_SetConfig+0x28>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005b70:	6803      	ldr	r3, [r0, #0]
 8005b72:	60d9      	str	r1, [r3, #12]
  }
}
 8005b74:	bc70      	pop	{r4, r5, r6}
 8005b76:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005b78:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005b7c:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005b80:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005b84:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005b86:	6884      	ldr	r4, [r0, #8]
 8005b88:	b194      	cbz	r4, 8005bb0 <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005b8a:	2c01      	cmp	r4, #1
 8005b8c:	d00e      	beq.n	8005bac <DMA2D_SetConfig+0x5c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005b8e:	2c02      	cmp	r4, #2
 8005b90:	d011      	beq.n	8005bb6 <DMA2D_SetConfig+0x66>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005b92:	2c03      	cmp	r4, #3
 8005b94:	d017      	beq.n	8005bc6 <DMA2D_SetConfig+0x76>
      tmp1 = (tmp1 >> 28U);
 8005b96:	0f36      	lsrs	r6, r6, #28
      tmp2 = (tmp2 >> 20U);
 8005b98:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 8005b9a:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005b9c:	0219      	lsls	r1, r3, #8
 8005b9e:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8005ba2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
 8005ba6:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8005baa:	e001      	b.n	8005bb0 <DMA2D_SetConfig+0x60>
      tmp = (tmp3 | tmp2 | tmp4);
 8005bac:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005bb0:	6803      	ldr	r3, [r0, #0]
 8005bb2:	6399      	str	r1, [r3, #56]	; 0x38
 8005bb4:	e7de      	b.n	8005b74 <DMA2D_SetConfig+0x24>
      tmp2 = (tmp2 >> 19U);
 8005bb6:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8005bb8:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005bba:	02d9      	lsls	r1, r3, #11
 8005bbc:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8005bc0:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8005bc4:	e7f4      	b.n	8005bb0 <DMA2D_SetConfig+0x60>
      tmp1 = (tmp1 >> 31U);
 8005bc6:	0ff6      	lsrs	r6, r6, #31
      tmp2 = (tmp2 >> 19U);
 8005bc8:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8005bca:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005bcc:	0299      	lsls	r1, r3, #10
 8005bce:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8005bd2:	ea41 31c6 	orr.w	r1, r1, r6, lsl #15
 8005bd6:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8005bda:	e7e9      	b.n	8005bb0 <DMA2D_SetConfig+0x60>

08005bdc <HAL_DMA2D_MspInit>:
}
 8005bdc:	4770      	bx	lr
	...

08005be0 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d032      	beq.n	8005c4a <HAL_DMA2D_Init+0x6a>
{
 8005be4:	b510      	push	{r4, lr}
 8005be6:	4604      	mov	r4, r0
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005be8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8005bec:	b343      	cbz	r3, 8005c40 <HAL_DMA2D_Init+0x60>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005bee:	2302      	movs	r3, #2
 8005bf0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005bf4:	6822      	ldr	r2, [r4, #0]
 8005bf6:	6813      	ldr	r3, [r2, #0]
 8005bf8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005bfc:	6861      	ldr	r1, [r4, #4]
 8005bfe:	430b      	orrs	r3, r1
 8005c00:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005c02:	6822      	ldr	r2, [r4, #0]
 8005c04:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005c06:	f023 0307 	bic.w	r3, r3, #7
 8005c0a:	68a1      	ldr	r1, [r4, #8]
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005c10:	6822      	ldr	r2, [r4, #0]
 8005c12:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8005c14:	4b0e      	ldr	r3, [pc, #56]	; (8005c50 <HAL_DMA2D_Init+0x70>)
 8005c16:	400b      	ands	r3, r1
 8005c18:	68e1      	ldr	r1, [r4, #12]
 8005c1a:	430b      	orrs	r3, r1
 8005c1c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8005c1e:	6821      	ldr	r1, [r4, #0]
 8005c20:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005c22:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005c26:	6920      	ldr	r0, [r4, #16]
 8005c28:	6962      	ldr	r2, [r4, #20]
 8005c2a:	0552      	lsls	r2, r2, #21
 8005c2c:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8005c30:	4313      	orrs	r3, r2
 8005c32:	634b      	str	r3, [r1, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005c34:	2000      	movs	r0, #0
 8005c36:	6560      	str	r0, [r4, #84]	; 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8005c3e:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8005c40:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_DMA2D_MspInit(hdma2d);
 8005c44:	f7ff ffca 	bl	8005bdc <HAL_DMA2D_MspInit>
 8005c48:	e7d1      	b.n	8005bee <HAL_DMA2D_Init+0xe>
     return HAL_ERROR;
 8005c4a:	2001      	movs	r0, #1
}
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	ffffc000 	.word	0xffffc000

08005c54 <HAL_DMA2D_Start>:
{
 8005c54:	b510      	push	{r4, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 8005c5a:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8005c5e:	2801      	cmp	r0, #1
 8005c60:	d012      	beq.n	8005c88 <HAL_DMA2D_Start+0x34>
 8005c62:	2001      	movs	r0, #1
 8005c64:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005c68:	2002      	movs	r0, #2
 8005c6a:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005c6e:	9804      	ldr	r0, [sp, #16]
 8005c70:	9000      	str	r0, [sp, #0]
 8005c72:	4620      	mov	r0, r4
 8005c74:	f7ff ff6c 	bl	8005b50 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8005c78:	6822      	ldr	r2, [r4, #0]
 8005c7a:	6813      	ldr	r3, [r2, #0]
 8005c7c:	f043 0301 	orr.w	r3, r3, #1
 8005c80:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005c82:	2000      	movs	r0, #0
}
 8005c84:	b002      	add	sp, #8
 8005c86:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 8005c88:	2002      	movs	r0, #2
 8005c8a:	e7fb      	b.n	8005c84 <HAL_DMA2D_Start+0x30>

08005c8c <HAL_DMA2D_PollForTransfer>:
{
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	4604      	mov	r4, r0
 8005c92:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005c98:	6803      	ldr	r3, [r0, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f013 0f01 	tst.w	r3, #1
 8005ca0:	d111      	bne.n	8005cc6 <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005ca2:	6822      	ldr	r2, [r4, #0]
 8005ca4:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005ca6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ca8:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8005caa:	f013 0f20 	tst.w	r3, #32
 8005cae:	d147      	bne.n	8005d40 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	2212      	movs	r2, #18
 8005cb4:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hdma2d);
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
}
 8005cc2:	b002      	add	sp, #8
 8005cc4:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8005cc6:	f7ff f96b 	bl	8004fa0 <HAL_GetTick>
 8005cca:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	f012 0f02 	tst.w	r2, #2
 8005cd4:	d1e5      	bne.n	8005ca2 <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005cda:	9a01      	ldr	r2, [sp, #4]
 8005cdc:	f012 0f21 	tst.w	r2, #33	; 0x21
 8005ce0:	d114      	bne.n	8005d0c <HAL_DMA2D_PollForTransfer+0x80>
      if(Timeout != HAL_MAX_DELAY)
 8005ce2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005ce6:	d0f1      	beq.n	8005ccc <HAL_DMA2D_PollForTransfer+0x40>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005ce8:	f7ff f95a 	bl	8004fa0 <HAL_GetTick>
 8005cec:	1b80      	subs	r0, r0, r6
 8005cee:	42a8      	cmp	r0, r5
 8005cf0:	d801      	bhi.n	8005cf6 <HAL_DMA2D_PollForTransfer+0x6a>
 8005cf2:	2d00      	cmp	r5, #0
 8005cf4:	d1ea      	bne.n	8005ccc <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005cf6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005cf8:	f043 0320 	orr.w	r3, r3, #32
 8005cfc:	6563      	str	r3, [r4, #84]	; 0x54
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005cfe:	2003      	movs	r0, #3
 8005d00:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hdma2d);
 8005d04:	2300      	movs	r3, #0
 8005d06:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 8005d0a:	e7da      	b.n	8005cc2 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005d0c:	9a01      	ldr	r2, [sp, #4]
 8005d0e:	f012 0f20 	tst.w	r2, #32
 8005d12:	d003      	beq.n	8005d1c <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005d14:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005d16:	f042 0202 	orr.w	r2, r2, #2
 8005d1a:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005d1c:	9a01      	ldr	r2, [sp, #4]
 8005d1e:	f012 0f01 	tst.w	r2, #1
 8005d22:	d003      	beq.n	8005d2c <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005d24:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005d26:	f042 0201 	orr.w	r2, r2, #1
 8005d2a:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005d2c:	2221      	movs	r2, #33	; 0x21
 8005d2e:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d30:	2304      	movs	r3, #4
 8005d32:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hdma2d);
 8005d36:	2300      	movs	r3, #0
 8005d38:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 8005d3c:	2001      	movs	r0, #1
 8005d3e:	e7c0      	b.n	8005cc2 <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 8005d40:	f7ff f92e 	bl	8004fa0 <HAL_GetTick>
 8005d44:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	f012 0f10 	tst.w	r2, #16
 8005d4e:	d1af      	bne.n	8005cb0 <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005d54:	9a01      	ldr	r2, [sp, #4]
 8005d56:	f012 0f29 	tst.w	r2, #41	; 0x29
 8005d5a:	d114      	bne.n	8005d86 <HAL_DMA2D_PollForTransfer+0xfa>
      if(Timeout != HAL_MAX_DELAY)
 8005d5c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005d60:	d0f1      	beq.n	8005d46 <HAL_DMA2D_PollForTransfer+0xba>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005d62:	f7ff f91d 	bl	8004fa0 <HAL_GetTick>
 8005d66:	1b80      	subs	r0, r0, r6
 8005d68:	42a8      	cmp	r0, r5
 8005d6a:	d801      	bhi.n	8005d70 <HAL_DMA2D_PollForTransfer+0xe4>
 8005d6c:	2d00      	cmp	r5, #0
 8005d6e:	d1ea      	bne.n	8005d46 <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005d70:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d72:	f043 0320 	orr.w	r3, r3, #32
 8005d76:	6563      	str	r3, [r4, #84]	; 0x54
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005d78:	2003      	movs	r0, #3
 8005d7a:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hdma2d);
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 8005d84:	e79d      	b.n	8005cc2 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005d86:	9a01      	ldr	r2, [sp, #4]
 8005d88:	f012 0f08 	tst.w	r2, #8
 8005d8c:	d003      	beq.n	8005d96 <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005d8e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005d90:	f042 0204 	orr.w	r2, r2, #4
 8005d94:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005d96:	9a01      	ldr	r2, [sp, #4]
 8005d98:	f012 0f20 	tst.w	r2, #32
 8005d9c:	d003      	beq.n	8005da6 <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005d9e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005da0:	f042 0202 	orr.w	r2, r2, #2
 8005da4:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005da6:	9a01      	ldr	r2, [sp, #4]
 8005da8:	f012 0f01 	tst.w	r2, #1
 8005dac:	d003      	beq.n	8005db6 <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005dae:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005db0:	f042 0201 	orr.w	r2, r2, #1
 8005db4:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005db6:	2229      	movs	r2, #41	; 0x29
 8005db8:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005dba:	2304      	movs	r3, #4
 8005dbc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hdma2d);
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 8005dc6:	2001      	movs	r0, #1
 8005dc8:	e77b      	b.n	8005cc2 <HAL_DMA2D_PollForTransfer+0x36>
	...

08005dcc <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8005dcc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d067      	beq.n	8005ea4 <HAL_DMA2D_ConfigLayer+0xd8>
{
 8005dd4:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005ddc:	2302      	movs	r3, #2
 8005dde:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8005de2:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005de6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8005dea:	6a54      	ldr	r4, [r2, #36]	; 0x24
 8005dec:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005dee:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005df2:	6b15      	ldr	r5, [r2, #48]	; 0x30
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8005df4:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005df8:	6b52      	ldr	r2, [r2, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8005dfa:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005dfe:	3c09      	subs	r4, #9
 8005e00:	2c01      	cmp	r4, #1
 8005e02:	d921      	bls.n	8005e48 <HAL_DMA2D_ConfigLayer+0x7c>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005e04:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005e08:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8005e0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005e12:	bb61      	cbnz	r1, 8005e6e <HAL_DMA2D_ConfigLayer+0xa2>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005e14:	6804      	ldr	r4, [r0, #0]
 8005e16:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005e18:	4a23      	ldr	r2, [pc, #140]	; (8005ea8 <HAL_DMA2D_ConfigLayer+0xdc>)
 8005e1a:	402a      	ands	r2, r5
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	6263      	str	r3, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005e20:	6802      	ldr	r2, [r0, #0]
 8005e22:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8005e26:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005e2a:	6a1c      	ldr	r4, [r3, #32]
 8005e2c:	6194      	str	r4, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	3b09      	subs	r3, #9
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d911      	bls.n	8005e5a <HAL_DMA2D_ConfigLayer+0x8e>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e36:	2301      	movs	r3, #1
 8005e38:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_UNLOCK(hdma2d);
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  return HAL_OK;
 8005e42:	4618      	mov	r0, r3
}
 8005e44:	bc30      	pop	{r4, r5}
 8005e46:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005e48:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005e4c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8005e50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e52:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005e56:	4313      	orrs	r3, r2
 8005e58:	e7db      	b.n	8005e12 <HAL_DMA2D_ConfigLayer+0x46>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005e5a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005e5e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8005e62:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005e64:	6802      	ldr	r2, [r0, #0]
 8005e66:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e6a:	6293      	str	r3, [r2, #40]	; 0x28
 8005e6c:	e7e3      	b.n	8005e36 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005e6e:	6804      	ldr	r4, [r0, #0]
 8005e70:	69e5      	ldr	r5, [r4, #28]
 8005e72:	4a0d      	ldr	r2, [pc, #52]	; (8005ea8 <HAL_DMA2D_ConfigLayer+0xdc>)
 8005e74:	402a      	ands	r2, r5
 8005e76:	4313      	orrs	r3, r2
 8005e78:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005e7a:	6802      	ldr	r2, [r0, #0]
 8005e7c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8005e80:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005e84:	6a1c      	ldr	r4, [r3, #32]
 8005e86:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	3b09      	subs	r3, #9
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d8d2      	bhi.n	8005e36 <HAL_DMA2D_ConfigLayer+0x6a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005e90:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005e94:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8005e98:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005e9a:	6802      	ldr	r2, [r0, #0]
 8005e9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ea0:	6213      	str	r3, [r2, #32]
 8005ea2:	e7c8      	b.n	8005e36 <HAL_DMA2D_ConfigLayer+0x6a>
  __HAL_LOCK(hdma2d);
 8005ea4:	2002      	movs	r0, #2
}
 8005ea6:	4770      	bx	lr
 8005ea8:	00ccfff0 	.word	0x00ccfff0

08005eac <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005eac:	2300      	movs	r3, #0
 8005eae:	2b0f      	cmp	r3, #15
 8005eb0:	f200 80e3 	bhi.w	800607a <HAL_GPIO_Init+0x1ce>
{
 8005eb4:	b4f0      	push	{r4, r5, r6, r7}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	e039      	b.n	8005f2e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005eba:	2209      	movs	r2, #9
 8005ebc:	e000      	b.n	8005ec0 <HAL_GPIO_Init+0x14>
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	40b2      	lsls	r2, r6
 8005ec2:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8005ec4:	3402      	adds	r4, #2
 8005ec6:	4e6d      	ldr	r6, [pc, #436]	; (800607c <HAL_GPIO_Init+0x1d0>)
 8005ec8:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ecc:	4a6c      	ldr	r2, [pc, #432]	; (8006080 <HAL_GPIO_Init+0x1d4>)
 8005ece:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8005ed0:	43ea      	mvns	r2, r5
 8005ed2:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ed6:	684f      	ldr	r7, [r1, #4]
 8005ed8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8005edc:	d001      	beq.n	8005ee2 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8005ede:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8005ee2:	4c67      	ldr	r4, [pc, #412]	; (8006080 <HAL_GPIO_Init+0x1d4>)
 8005ee4:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8005ee6:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8005ee8:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005eec:	684f      	ldr	r7, [r1, #4]
 8005eee:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8005ef2:	d001      	beq.n	8005ef8 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8005ef4:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8005ef8:	4c61      	ldr	r4, [pc, #388]	; (8006080 <HAL_GPIO_Init+0x1d4>)
 8005efa:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005efc:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8005efe:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f02:	684f      	ldr	r7, [r1, #4]
 8005f04:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8005f08:	d001      	beq.n	8005f0e <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8005f0a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8005f0e:	4c5c      	ldr	r4, [pc, #368]	; (8006080 <HAL_GPIO_Init+0x1d4>)
 8005f10:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8005f12:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8005f14:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f16:	684e      	ldr	r6, [r1, #4]
 8005f18:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8005f1c:	d001      	beq.n	8005f22 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8005f1e:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8005f22:	4c57      	ldr	r4, [pc, #348]	; (8006080 <HAL_GPIO_Init+0x1d4>)
 8005f24:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005f26:	3301      	adds	r3, #1
 8005f28:	2b0f      	cmp	r3, #15
 8005f2a:	f200 80a3 	bhi.w	8006074 <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
 8005f2e:	2201      	movs	r2, #1
 8005f30:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f32:	680c      	ldr	r4, [r1, #0]
 8005f34:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8005f38:	ea32 0404 	bics.w	r4, r2, r4
 8005f3c:	d1f3      	bne.n	8005f26 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f3e:	684c      	ldr	r4, [r1, #4]
 8005f40:	2c12      	cmp	r4, #18
 8005f42:	bf18      	it	ne
 8005f44:	2c02      	cmpne	r4, #2
 8005f46:	d110      	bne.n	8005f6a <HAL_GPIO_Init+0xbe>
        temp = GPIOx->AFR[position >> 3];
 8005f48:	08de      	lsrs	r6, r3, #3
 8005f4a:	3608      	adds	r6, #8
 8005f4c:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005f50:	f003 0407 	and.w	r4, r3, #7
 8005f54:	00a7      	lsls	r7, r4, #2
 8005f56:	240f      	movs	r4, #15
 8005f58:	40bc      	lsls	r4, r7
 8005f5a:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005f5e:	690c      	ldr	r4, [r1, #16]
 8005f60:	40bc      	lsls	r4, r7
 8005f62:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8005f66:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8005f6a:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005f6e:	005e      	lsls	r6, r3, #1
 8005f70:	2403      	movs	r4, #3
 8005f72:	40b4      	lsls	r4, r6
 8005f74:	43e7      	mvns	r7, r4
 8005f76:	ea2c 0c04 	bic.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005f7a:	684c      	ldr	r4, [r1, #4]
 8005f7c:	f004 0403 	and.w	r4, r4, #3
 8005f80:	40b4      	lsls	r4, r6
 8005f82:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8005f86:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005f88:	684c      	ldr	r4, [r1, #4]
 8005f8a:	f104 3cff 	add.w	ip, r4, #4294967295
 8005f8e:	2c11      	cmp	r4, #17
 8005f90:	bf18      	it	ne
 8005f92:	f1bc 0f01 	cmpne.w	ip, #1
 8005f96:	d901      	bls.n	8005f9c <HAL_GPIO_Init+0xf0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f98:	2c12      	cmp	r4, #18
 8005f9a:	d110      	bne.n	8005fbe <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8005f9c:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005f9e:	ea07 0c04 	and.w	ip, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8005fa2:	68cc      	ldr	r4, [r1, #12]
 8005fa4:	40b4      	lsls	r4, r6
 8005fa6:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8005faa:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8005fac:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fae:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005fb2:	684c      	ldr	r4, [r1, #4]
 8005fb4:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8005fb8:	409c      	lsls	r4, r3
 8005fba:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8005fbc:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8005fbe:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005fc0:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005fc2:	688a      	ldr	r2, [r1, #8]
 8005fc4:	40b2      	lsls	r2, r6
 8005fc6:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8005fc8:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005fca:	684a      	ldr	r2, [r1, #4]
 8005fcc:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8005fd0:	d0a9      	beq.n	8005f26 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fd2:	4a2c      	ldr	r2, [pc, #176]	; (8006084 <HAL_GPIO_Init+0x1d8>)
 8005fd4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8005fd6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8005fda:	6454      	str	r4, [r2, #68]	; 0x44
 8005fdc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005fde:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005fe2:	9201      	str	r2, [sp, #4]
 8005fe4:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8005fe6:	089c      	lsrs	r4, r3, #2
 8005fe8:	1ca6      	adds	r6, r4, #2
 8005fea:	4a24      	ldr	r2, [pc, #144]	; (800607c <HAL_GPIO_Init+0x1d0>)
 8005fec:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005ff0:	f003 0203 	and.w	r2, r3, #3
 8005ff4:	0096      	lsls	r6, r2, #2
 8005ff6:	220f      	movs	r2, #15
 8005ff8:	40b2      	lsls	r2, r6
 8005ffa:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005ffe:	4a22      	ldr	r2, [pc, #136]	; (8006088 <HAL_GPIO_Init+0x1dc>)
 8006000:	4290      	cmp	r0, r2
 8006002:	f43f af5c 	beq.w	8005ebe <HAL_GPIO_Init+0x12>
 8006006:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800600a:	4290      	cmp	r0, r2
 800600c:	d022      	beq.n	8006054 <HAL_GPIO_Init+0x1a8>
 800600e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006012:	4290      	cmp	r0, r2
 8006014:	d020      	beq.n	8006058 <HAL_GPIO_Init+0x1ac>
 8006016:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800601a:	4290      	cmp	r0, r2
 800601c:	d01e      	beq.n	800605c <HAL_GPIO_Init+0x1b0>
 800601e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006022:	4290      	cmp	r0, r2
 8006024:	d01c      	beq.n	8006060 <HAL_GPIO_Init+0x1b4>
 8006026:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800602a:	4290      	cmp	r0, r2
 800602c:	d01a      	beq.n	8006064 <HAL_GPIO_Init+0x1b8>
 800602e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006032:	4290      	cmp	r0, r2
 8006034:	d018      	beq.n	8006068 <HAL_GPIO_Init+0x1bc>
 8006036:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800603a:	4290      	cmp	r0, r2
 800603c:	d016      	beq.n	800606c <HAL_GPIO_Init+0x1c0>
 800603e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006042:	4290      	cmp	r0, r2
 8006044:	d014      	beq.n	8006070 <HAL_GPIO_Init+0x1c4>
 8006046:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800604a:	4290      	cmp	r0, r2
 800604c:	f43f af35 	beq.w	8005eba <HAL_GPIO_Init+0xe>
 8006050:	220a      	movs	r2, #10
 8006052:	e735      	b.n	8005ec0 <HAL_GPIO_Init+0x14>
 8006054:	2201      	movs	r2, #1
 8006056:	e733      	b.n	8005ec0 <HAL_GPIO_Init+0x14>
 8006058:	2202      	movs	r2, #2
 800605a:	e731      	b.n	8005ec0 <HAL_GPIO_Init+0x14>
 800605c:	2203      	movs	r2, #3
 800605e:	e72f      	b.n	8005ec0 <HAL_GPIO_Init+0x14>
 8006060:	2204      	movs	r2, #4
 8006062:	e72d      	b.n	8005ec0 <HAL_GPIO_Init+0x14>
 8006064:	2205      	movs	r2, #5
 8006066:	e72b      	b.n	8005ec0 <HAL_GPIO_Init+0x14>
 8006068:	2206      	movs	r2, #6
 800606a:	e729      	b.n	8005ec0 <HAL_GPIO_Init+0x14>
 800606c:	2207      	movs	r2, #7
 800606e:	e727      	b.n	8005ec0 <HAL_GPIO_Init+0x14>
 8006070:	2208      	movs	r2, #8
 8006072:	e725      	b.n	8005ec0 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8006074:	b002      	add	sp, #8
 8006076:	bcf0      	pop	{r4, r5, r6, r7}
 8006078:	4770      	bx	lr
 800607a:	4770      	bx	lr
 800607c:	40013800 	.word	0x40013800
 8006080:	40013c00 	.word	0x40013c00
 8006084:	40023800 	.word	0x40023800
 8006088:	40020000 	.word	0x40020000

0800608c <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800608c:	2300      	movs	r3, #0
 800608e:	2b0f      	cmp	r3, #15
 8006090:	f200 8095 	bhi.w	80061be <HAL_GPIO_DeInit+0x132>
{
 8006094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006096:	e00a      	b.n	80060ae <HAL_GPIO_DeInit+0x22>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006098:	2509      	movs	r5, #9
 800609a:	e000      	b.n	800609e <HAL_GPIO_DeInit+0x12>
 800609c:	2500      	movs	r5, #0
 800609e:	fa05 f202 	lsl.w	r2, r5, r2
 80060a2:	42a2      	cmp	r2, r4
 80060a4:	d070      	beq.n	8006188 <HAL_GPIO_DeInit+0xfc>
  for(position = 0; position < GPIO_NUMBER; position++)
 80060a6:	3301      	adds	r3, #1
 80060a8:	2b0f      	cmp	r3, #15
 80060aa:	f200 8087 	bhi.w	80061bc <HAL_GPIO_DeInit+0x130>
    ioposition = ((uint32_t)0x01) << position;
 80060ae:	2201      	movs	r2, #1
 80060b0:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 80060b2:	ea02 0c01 	and.w	ip, r2, r1
    if(iocurrent == ioposition)
 80060b6:	ea32 0401 	bics.w	r4, r2, r1
 80060ba:	d1f4      	bne.n	80060a6 <HAL_GPIO_DeInit+0x1a>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80060bc:	6804      	ldr	r4, [r0, #0]
 80060be:	005d      	lsls	r5, r3, #1
 80060c0:	2603      	movs	r6, #3
 80060c2:	fa06 f505 	lsl.w	r5, r6, r5
 80060c6:	ea24 0405 	bic.w	r4, r4, r5
 80060ca:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80060cc:	fa23 f706 	lsr.w	r7, r3, r6
 80060d0:	3708      	adds	r7, #8
 80060d2:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
 80060d6:	f003 0407 	and.w	r4, r3, #7
 80060da:	00a4      	lsls	r4, r4, #2
 80060dc:	260f      	movs	r6, #15
 80060de:	fa06 f404 	lsl.w	r4, r6, r4
 80060e2:	ea2e 0404 	bic.w	r4, lr, r4
 80060e6:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80060ea:	6884      	ldr	r4, [r0, #8]
 80060ec:	ea24 0405 	bic.w	r4, r4, r5
 80060f0:	6084      	str	r4, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060f2:	6844      	ldr	r4, [r0, #4]
 80060f4:	ea24 0202 	bic.w	r2, r4, r2
 80060f8:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80060fa:	68c2      	ldr	r2, [r0, #12]
 80060fc:	ea22 0505 	bic.w	r5, r2, r5
 8006100:	60c5      	str	r5, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8006102:	089f      	lsrs	r7, r3, #2
 8006104:	1cbc      	adds	r4, r7, #2
 8006106:	4a2e      	ldr	r2, [pc, #184]	; (80061c0 <HAL_GPIO_DeInit+0x134>)
 8006108:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800610c:	f003 0203 	and.w	r2, r3, #3
 8006110:	0092      	lsls	r2, r2, #2
 8006112:	4096      	lsls	r6, r2
 8006114:	4034      	ands	r4, r6
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006116:	4d2b      	ldr	r5, [pc, #172]	; (80061c4 <HAL_GPIO_DeInit+0x138>)
 8006118:	42a8      	cmp	r0, r5
 800611a:	d0bf      	beq.n	800609c <HAL_GPIO_DeInit+0x10>
 800611c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006120:	42a8      	cmp	r0, r5
 8006122:	d021      	beq.n	8006168 <HAL_GPIO_DeInit+0xdc>
 8006124:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006128:	42a8      	cmp	r0, r5
 800612a:	d01f      	beq.n	800616c <HAL_GPIO_DeInit+0xe0>
 800612c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006130:	42a8      	cmp	r0, r5
 8006132:	d01d      	beq.n	8006170 <HAL_GPIO_DeInit+0xe4>
 8006134:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006138:	42a8      	cmp	r0, r5
 800613a:	d01b      	beq.n	8006174 <HAL_GPIO_DeInit+0xe8>
 800613c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006140:	42a8      	cmp	r0, r5
 8006142:	d019      	beq.n	8006178 <HAL_GPIO_DeInit+0xec>
 8006144:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006148:	42a8      	cmp	r0, r5
 800614a:	d017      	beq.n	800617c <HAL_GPIO_DeInit+0xf0>
 800614c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006150:	42a8      	cmp	r0, r5
 8006152:	d015      	beq.n	8006180 <HAL_GPIO_DeInit+0xf4>
 8006154:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006158:	42a8      	cmp	r0, r5
 800615a:	d013      	beq.n	8006184 <HAL_GPIO_DeInit+0xf8>
 800615c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006160:	42a8      	cmp	r0, r5
 8006162:	d099      	beq.n	8006098 <HAL_GPIO_DeInit+0xc>
 8006164:	250a      	movs	r5, #10
 8006166:	e79a      	b.n	800609e <HAL_GPIO_DeInit+0x12>
 8006168:	2501      	movs	r5, #1
 800616a:	e798      	b.n	800609e <HAL_GPIO_DeInit+0x12>
 800616c:	2502      	movs	r5, #2
 800616e:	e796      	b.n	800609e <HAL_GPIO_DeInit+0x12>
 8006170:	2503      	movs	r5, #3
 8006172:	e794      	b.n	800609e <HAL_GPIO_DeInit+0x12>
 8006174:	2504      	movs	r5, #4
 8006176:	e792      	b.n	800609e <HAL_GPIO_DeInit+0x12>
 8006178:	2505      	movs	r5, #5
 800617a:	e790      	b.n	800609e <HAL_GPIO_DeInit+0x12>
 800617c:	2506      	movs	r5, #6
 800617e:	e78e      	b.n	800609e <HAL_GPIO_DeInit+0x12>
 8006180:	2507      	movs	r5, #7
 8006182:	e78c      	b.n	800609e <HAL_GPIO_DeInit+0x12>
 8006184:	2508      	movs	r5, #8
 8006186:	e78a      	b.n	800609e <HAL_GPIO_DeInit+0x12>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006188:	4d0d      	ldr	r5, [pc, #52]	; (80061c0 <HAL_GPIO_DeInit+0x134>)
 800618a:	1cba      	adds	r2, r7, #2
 800618c:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
 8006190:	ea24 0606 	bic.w	r6, r4, r6
 8006194:	f845 6022 	str.w	r6, [r5, r2, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006198:	4a0b      	ldr	r2, [pc, #44]	; (80061c8 <HAL_GPIO_DeInit+0x13c>)
 800619a:	6814      	ldr	r4, [r2, #0]
 800619c:	ea24 040c 	bic.w	r4, r4, ip
 80061a0:	6014      	str	r4, [r2, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80061a2:	6854      	ldr	r4, [r2, #4]
 80061a4:	ea24 040c 	bic.w	r4, r4, ip
 80061a8:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80061aa:	6894      	ldr	r4, [r2, #8]
 80061ac:	ea24 040c 	bic.w	r4, r4, ip
 80061b0:	6094      	str	r4, [r2, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80061b2:	68d4      	ldr	r4, [r2, #12]
 80061b4:	ea24 040c 	bic.w	r4, r4, ip
 80061b8:	60d4      	str	r4, [r2, #12]
 80061ba:	e774      	b.n	80060a6 <HAL_GPIO_DeInit+0x1a>
	  }
    }
  }
}
 80061bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061be:	4770      	bx	lr
 80061c0:	40013800 	.word	0x40013800
 80061c4:	40020000 	.word	0x40020000
 80061c8:	40013c00 	.word	0x40013c00

080061cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80061cc:	6903      	ldr	r3, [r0, #16]
 80061ce:	4219      	tst	r1, r3
 80061d0:	d001      	beq.n	80061d6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80061d2:	2001      	movs	r0, #1
 80061d4:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061d6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80061d8:	4770      	bx	lr

080061da <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80061da:	6803      	ldr	r3, [r0, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	f012 0f02 	tst.w	r2, #2
 80061e2:	d001      	beq.n	80061e8 <I2C_Flush_TXDR+0xe>
  {
     hi2c->Instance->TXDR = 0x00U;
 80061e4:	2200      	movs	r2, #0
 80061e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061e8:	6803      	ldr	r3, [r0, #0]
 80061ea:	699a      	ldr	r2, [r3, #24]
 80061ec:	f012 0f01 	tst.w	r2, #1
 80061f0:	d103      	bne.n	80061fa <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80061f2:	699a      	ldr	r2, [r3, #24]
 80061f4:	f042 0201 	orr.w	r2, r2, #1
 80061f8:	619a      	str	r2, [r3, #24]
  }
}
 80061fa:	4770      	bx	lr

080061fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80061fc:	b410      	push	{r4}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80061fe:	6804      	ldr	r4, [r0, #0]
 8006200:	6860      	ldr	r0, [r4, #4]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8006202:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 8006206:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
 800620a:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 800620e:	f020 0003 	bic.w	r0, r0, #3

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8006212:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006216:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800621a:	4319      	orrs	r1, r3
 800621c:	9b01      	ldr	r3, [sp, #4]
 800621e:	4319      	orrs	r1, r3
 8006220:	4301      	orrs	r1, r0
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8006222:	6061      	str	r1, [r4, #4]
}
 8006224:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006228:	4770      	bx	lr

0800622a <I2C_IsAcknowledgeFailed>:
{
 800622a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622c:	4605      	mov	r5, r0
 800622e:	460e      	mov	r6, r1
 8006230:	4617      	mov	r7, r2
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006232:	6803      	ldr	r3, [r0, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	f013 0f10 	tst.w	r3, #16
 800623a:	d101      	bne.n	8006240 <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 800623c:	2000      	movs	r0, #0
}
 800623e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	699c      	ldr	r4, [r3, #24]
 8006244:	f014 0f20 	tst.w	r4, #32
 8006248:	d112      	bne.n	8006270 <I2C_IsAcknowledgeFailed+0x46>
      if(Timeout != HAL_MAX_DELAY)
 800624a:	f1b6 3fff 	cmp.w	r6, #4294967295
 800624e:	d0f7      	beq.n	8006240 <I2C_IsAcknowledgeFailed+0x16>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8006250:	b126      	cbz	r6, 800625c <I2C_IsAcknowledgeFailed+0x32>
 8006252:	f7fe fea5 	bl	8004fa0 <HAL_GetTick>
 8006256:	1bc0      	subs	r0, r0, r7
 8006258:	42b0      	cmp	r0, r6
 800625a:	d9f1      	bls.n	8006240 <I2C_IsAcknowledgeFailed+0x16>
          hi2c->State= HAL_I2C_STATE_READY;
 800625c:	2320      	movs	r3, #32
 800625e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006262:	2300      	movs	r3, #0
 8006264:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8006268:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_TIMEOUT;
 800626c:	2003      	movs	r0, #3
 800626e:	e7e6      	b.n	800623e <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006270:	2210      	movs	r2, #16
 8006272:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	2420      	movs	r4, #32
 8006278:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800627a:	4628      	mov	r0, r5
 800627c:	f7ff ffad 	bl	80061da <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8006280:	682a      	ldr	r2, [r5, #0]
 8006282:	6853      	ldr	r3, [r2, #4]
 8006284:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8006288:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800628c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006290:	f023 0301 	bic.w	r3, r3, #1
 8006294:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006296:	2304      	movs	r3, #4
 8006298:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 800629a:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800629e:	2300      	movs	r3, #0
 80062a0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80062a4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 80062a8:	2001      	movs	r0, #1
 80062aa:	e7c8      	b.n	800623e <I2C_IsAcknowledgeFailed+0x14>

080062ac <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80062ac:	b570      	push	{r4, r5, r6, lr}
 80062ae:	4604      	mov	r4, r0
 80062b0:	460d      	mov	r5, r1
 80062b2:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	f013 0f02 	tst.w	r3, #2
 80062bc:	d11c      	bne.n	80062f8 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80062be:	4632      	mov	r2, r6
 80062c0:	4629      	mov	r1, r5
 80062c2:	4620      	mov	r0, r4
 80062c4:	f7ff ffb1 	bl	800622a <I2C_IsAcknowledgeFailed>
 80062c8:	b9c0      	cbnz	r0, 80062fc <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 80062ca:	f1b5 3fff 	cmp.w	r5, #4294967295
 80062ce:	d0f1      	beq.n	80062b4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80062d0:	b125      	cbz	r5, 80062dc <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 80062d2:	f7fe fe65 	bl	8004fa0 <HAL_GetTick>
 80062d6:	1b80      	subs	r0, r0, r6
 80062d8:	42a8      	cmp	r0, r5
 80062da:	d9eb      	bls.n	80062b4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80062de:	f043 0320 	orr.w	r3, r3, #32
 80062e2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 80062e4:	2320      	movs	r3, #32
 80062e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ea:	2300      	movs	r3, #0
 80062ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80062f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 80062f4:	2003      	movs	r0, #3
 80062f6:	e000      	b.n	80062fa <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;
 80062f8:	2000      	movs	r0, #0
}
 80062fa:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80062fc:	2001      	movs	r0, #1
 80062fe:	e7fc      	b.n	80062fa <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

08006300 <I2C_WaitOnFlagUntilTimeout>:
{
 8006300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006304:	4606      	mov	r6, r0
 8006306:	4688      	mov	r8, r1
 8006308:	4617      	mov	r7, r2
 800630a:	461d      	mov	r5, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800630c:	6834      	ldr	r4, [r6, #0]
 800630e:	69a4      	ldr	r4, [r4, #24]
 8006310:	ea38 0304 	bics.w	r3, r8, r4
 8006314:	bf0c      	ite	eq
 8006316:	2401      	moveq	r4, #1
 8006318:	2400      	movne	r4, #0
 800631a:	42bc      	cmp	r4, r7
 800631c:	d113      	bne.n	8006346 <I2C_WaitOnFlagUntilTimeout+0x46>
    if(Timeout != HAL_MAX_DELAY)
 800631e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006322:	d0f3      	beq.n	800630c <I2C_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8006324:	b12d      	cbz	r5, 8006332 <I2C_WaitOnFlagUntilTimeout+0x32>
 8006326:	f7fe fe3b 	bl	8004fa0 <HAL_GetTick>
 800632a:	9b06      	ldr	r3, [sp, #24]
 800632c:	1ac0      	subs	r0, r0, r3
 800632e:	42a8      	cmp	r0, r5
 8006330:	d9ec      	bls.n	800630c <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->State= HAL_I2C_STATE_READY;
 8006332:	2320      	movs	r3, #32
 8006334:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006338:	2300      	movs	r3, #0
 800633a:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800633e:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_TIMEOUT;
 8006342:	2003      	movs	r0, #3
 8006344:	e000      	b.n	8006348 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8006346:	2000      	movs	r0, #0
}
 8006348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800634c <I2C_RequestMemoryWrite>:
{
 800634c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006350:	b082      	sub	sp, #8
 8006352:	4604      	mov	r4, r0
 8006354:	4690      	mov	r8, r2
 8006356:	461d      	mov	r5, r3
 8006358:	9e08      	ldr	r6, [sp, #32]
 800635a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800635c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006366:	b2ea      	uxtb	r2, r5
 8006368:	f7ff ff48 	bl	80061fc <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800636c:	463a      	mov	r2, r7
 800636e:	4631      	mov	r1, r6
 8006370:	4620      	mov	r0, r4
 8006372:	f7ff ff9b 	bl	80062ac <I2C_WaitOnTXISFlagUntilTimeout>
 8006376:	b130      	cbz	r0, 8006386 <I2C_RequestMemoryWrite+0x3a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006378:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800637a:	2b04      	cmp	r3, #4
 800637c:	d001      	beq.n	8006382 <I2C_RequestMemoryWrite+0x36>
      return HAL_TIMEOUT;
 800637e:	2003      	movs	r0, #3
 8006380:	e00f      	b.n	80063a2 <I2C_RequestMemoryWrite+0x56>
      return HAL_ERROR;
 8006382:	2001      	movs	r0, #1
 8006384:	e00d      	b.n	80063a2 <I2C_RequestMemoryWrite+0x56>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006386:	2d01      	cmp	r5, #1
 8006388:	d10e      	bne.n	80063a8 <I2C_RequestMemoryWrite+0x5c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	fa5f f288 	uxtb.w	r2, r8
 8006390:	629a      	str	r2, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006392:	9700      	str	r7, [sp, #0]
 8006394:	4633      	mov	r3, r6
 8006396:	2200      	movs	r2, #0
 8006398:	2180      	movs	r1, #128	; 0x80
 800639a:	4620      	mov	r0, r4
 800639c:	f7ff ffb0 	bl	8006300 <I2C_WaitOnFlagUntilTimeout>
 80063a0:	b9c0      	cbnz	r0, 80063d4 <I2C_RequestMemoryWrite+0x88>
}
 80063a2:	b002      	add	sp, #8
 80063a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80063ae:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b0:	463a      	mov	r2, r7
 80063b2:	4631      	mov	r1, r6
 80063b4:	4620      	mov	r0, r4
 80063b6:	f7ff ff79 	bl	80062ac <I2C_WaitOnTXISFlagUntilTimeout>
 80063ba:	b130      	cbz	r0, 80063ca <I2C_RequestMemoryWrite+0x7e>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80063be:	2b04      	cmp	r3, #4
 80063c0:	d001      	beq.n	80063c6 <I2C_RequestMemoryWrite+0x7a>
        return HAL_TIMEOUT;
 80063c2:	2003      	movs	r0, #3
 80063c4:	e7ed      	b.n	80063a2 <I2C_RequestMemoryWrite+0x56>
        return HAL_ERROR;
 80063c6:	2001      	movs	r0, #1
 80063c8:	e7eb      	b.n	80063a2 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	fa5f f288 	uxtb.w	r2, r8
 80063d0:	629a      	str	r2, [r3, #40]	; 0x28
 80063d2:	e7de      	b.n	8006392 <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 80063d4:	2003      	movs	r0, #3
 80063d6:	e7e4      	b.n	80063a2 <I2C_RequestMemoryWrite+0x56>

080063d8 <I2C_RequestMemoryRead>:
{
 80063d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	4604      	mov	r4, r0
 80063e0:	4690      	mov	r8, r2
 80063e2:	461d      	mov	r5, r3
 80063e4:	9e08      	ldr	r6, [sp, #32]
 80063e6:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80063e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	2300      	movs	r3, #0
 80063f0:	b2ea      	uxtb	r2, r5
 80063f2:	f7ff ff03 	bl	80061fc <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063f6:	463a      	mov	r2, r7
 80063f8:	4631      	mov	r1, r6
 80063fa:	4620      	mov	r0, r4
 80063fc:	f7ff ff56 	bl	80062ac <I2C_WaitOnTXISFlagUntilTimeout>
 8006400:	b130      	cbz	r0, 8006410 <I2C_RequestMemoryRead+0x38>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006402:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006404:	2b04      	cmp	r3, #4
 8006406:	d001      	beq.n	800640c <I2C_RequestMemoryRead+0x34>
      return HAL_TIMEOUT;
 8006408:	2003      	movs	r0, #3
 800640a:	e00f      	b.n	800642c <I2C_RequestMemoryRead+0x54>
      return HAL_ERROR;
 800640c:	2001      	movs	r0, #1
 800640e:	e00d      	b.n	800642c <I2C_RequestMemoryRead+0x54>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006410:	2d01      	cmp	r5, #1
 8006412:	d10e      	bne.n	8006432 <I2C_RequestMemoryRead+0x5a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	fa5f f288 	uxtb.w	r2, r8
 800641a:	629a      	str	r2, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800641c:	9700      	str	r7, [sp, #0]
 800641e:	4633      	mov	r3, r6
 8006420:	2200      	movs	r2, #0
 8006422:	2140      	movs	r1, #64	; 0x40
 8006424:	4620      	mov	r0, r4
 8006426:	f7ff ff6b 	bl	8006300 <I2C_WaitOnFlagUntilTimeout>
 800642a:	b9c0      	cbnz	r0, 800645e <I2C_RequestMemoryRead+0x86>
}
 800642c:	b002      	add	sp, #8
 800642e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8006438:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800643a:	463a      	mov	r2, r7
 800643c:	4631      	mov	r1, r6
 800643e:	4620      	mov	r0, r4
 8006440:	f7ff ff34 	bl	80062ac <I2C_WaitOnTXISFlagUntilTimeout>
 8006444:	b130      	cbz	r0, 8006454 <I2C_RequestMemoryRead+0x7c>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006446:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006448:	2b04      	cmp	r3, #4
 800644a:	d001      	beq.n	8006450 <I2C_RequestMemoryRead+0x78>
        return HAL_TIMEOUT;
 800644c:	2003      	movs	r0, #3
 800644e:	e7ed      	b.n	800642c <I2C_RequestMemoryRead+0x54>
        return HAL_ERROR;
 8006450:	2001      	movs	r0, #1
 8006452:	e7eb      	b.n	800642c <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	fa5f f288 	uxtb.w	r2, r8
 800645a:	629a      	str	r2, [r3, #40]	; 0x28
 800645c:	e7de      	b.n	800641c <I2C_RequestMemoryRead+0x44>
    return HAL_TIMEOUT;
 800645e:	2003      	movs	r0, #3
 8006460:	e7e4      	b.n	800642c <I2C_RequestMemoryRead+0x54>

08006462 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006462:	b570      	push	{r4, r5, r6, lr}
 8006464:	4605      	mov	r5, r0
 8006466:	460c      	mov	r4, r1
 8006468:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800646a:	682b      	ldr	r3, [r5, #0]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	f013 0f20 	tst.w	r3, #32
 8006472:	d119      	bne.n	80064a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006474:	4632      	mov	r2, r6
 8006476:	4621      	mov	r1, r4
 8006478:	4628      	mov	r0, r5
 800647a:	f7ff fed6 	bl	800622a <I2C_IsAcknowledgeFailed>
 800647e:	b9a8      	cbnz	r0, 80064ac <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8006480:	b124      	cbz	r4, 800648c <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
 8006482:	f7fe fd8d 	bl	8004fa0 <HAL_GetTick>
 8006486:	1b80      	subs	r0, r0, r6
 8006488:	42a0      	cmp	r0, r4
 800648a:	d9ee      	bls.n	800646a <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800648c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800648e:	f043 0320 	orr.w	r3, r3, #32
 8006492:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8006494:	2320      	movs	r3, #32
 8006496:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800649a:	2300      	movs	r3, #0
 800649c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80064a0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_TIMEOUT;
 80064a4:	2003      	movs	r0, #3
}
 80064a6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80064a8:	2000      	movs	r0, #0
 80064aa:	e7fc      	b.n	80064a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
      return HAL_ERROR;
 80064ac:	2001      	movs	r0, #1
 80064ae:	e7fa      	b.n	80064a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

080064b0 <HAL_I2C_MspInit>:
}
 80064b0:	4770      	bx	lr
	...

080064b4 <HAL_I2C_Init>:
  if(hi2c == NULL)
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d057      	beq.n	8006568 <HAL_I2C_Init+0xb4>
{
 80064b8:	b510      	push	{r4, lr}
 80064ba:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80064bc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d041      	beq.n	8006548 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80064c4:	2324      	movs	r3, #36	; 0x24
 80064c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80064ca:	6822      	ldr	r2, [r4, #0]
 80064cc:	6813      	ldr	r3, [r2, #0]
 80064ce:	f023 0301 	bic.w	r3, r3, #1
 80064d2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80064d4:	6863      	ldr	r3, [r4, #4]
 80064d6:	6822      	ldr	r2, [r4, #0]
 80064d8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80064dc:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80064de:	6822      	ldr	r2, [r4, #0]
 80064e0:	6893      	ldr	r3, [r2, #8]
 80064e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064e6:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064e8:	68e3      	ldr	r3, [r4, #12]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d031      	beq.n	8006552 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80064ee:	68a3      	ldr	r3, [r4, #8]
 80064f0:	6822      	ldr	r2, [r4, #0]
 80064f2:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80064f6:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064f8:	68e3      	ldr	r3, [r4, #12]
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d02f      	beq.n	800655e <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80064fe:	6822      	ldr	r2, [r4, #0]
 8006500:	6851      	ldr	r1, [r2, #4]
 8006502:	4b1a      	ldr	r3, [pc, #104]	; (800656c <HAL_I2C_Init+0xb8>)
 8006504:	430b      	orrs	r3, r1
 8006506:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006508:	6822      	ldr	r2, [r4, #0]
 800650a:	68d3      	ldr	r3, [r2, #12]
 800650c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006510:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006512:	6923      	ldr	r3, [r4, #16]
 8006514:	6962      	ldr	r2, [r4, #20]
 8006516:	4313      	orrs	r3, r2
 8006518:	69a1      	ldr	r1, [r4, #24]
 800651a:	6822      	ldr	r2, [r4, #0]
 800651c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006520:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006522:	69e3      	ldr	r3, [r4, #28]
 8006524:	6a21      	ldr	r1, [r4, #32]
 8006526:	6822      	ldr	r2, [r4, #0]
 8006528:	430b      	orrs	r3, r1
 800652a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800652c:	6822      	ldr	r2, [r4, #0]
 800652e:	6813      	ldr	r3, [r2, #0]
 8006530:	f043 0301 	orr.w	r3, r3, #1
 8006534:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006536:	2000      	movs	r0, #0
 8006538:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800653a:	2320      	movs	r3, #32
 800653c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006540:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006542:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8006546:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006548:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800654c:	f7ff ffb0 	bl	80064b0 <HAL_I2C_MspInit>
 8006550:	e7b8      	b.n	80064c4 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006552:	68a3      	ldr	r3, [r4, #8]
 8006554:	6822      	ldr	r2, [r4, #0]
 8006556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800655a:	6093      	str	r3, [r2, #8]
 800655c:	e7cc      	b.n	80064f8 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006564:	605a      	str	r2, [r3, #4]
 8006566:	e7ca      	b.n	80064fe <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8006568:	2001      	movs	r0, #1
}
 800656a:	4770      	bx	lr
 800656c:	02008000 	.word	0x02008000

08006570 <HAL_I2C_MspDeInit>:
}
 8006570:	4770      	bx	lr

08006572 <HAL_I2C_DeInit>:
  if(hi2c == NULL)
 8006572:	b1a8      	cbz	r0, 80065a0 <HAL_I2C_DeInit+0x2e>
{
 8006574:	b510      	push	{r4, lr}
 8006576:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006578:	2324      	movs	r3, #36	; 0x24
 800657a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800657e:	6802      	ldr	r2, [r0, #0]
 8006580:	6813      	ldr	r3, [r2, #0]
 8006582:	f023 0301 	bic.w	r3, r3, #1
 8006586:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8006588:	f7ff fff2 	bl	8006570 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800658c:	2000      	movs	r0, #0
 800658e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006590:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006594:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006596:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 800659a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800659e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80065a0:	2001      	movs	r0, #1
}
 80065a2:	4770      	bx	lr

080065a4 <HAL_I2C_Mem_Write>:
{
 80065a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	b083      	sub	sp, #12
 80065aa:	460d      	mov	r5, r1
 80065ac:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80065b0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if(hi2c->State == HAL_I2C_STATE_READY)
 80065b2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80065b6:	b2c9      	uxtb	r1, r1
 80065b8:	2920      	cmp	r1, #32
 80065ba:	f040 80d1 	bne.w	8006760 <HAL_I2C_Mem_Write+0x1bc>
 80065be:	4604      	mov	r4, r0
 80065c0:	4690      	mov	r8, r2
 80065c2:	4699      	mov	r9, r3
    if((pData == NULL) || (Size == 0U))
 80065c4:	faba f38a 	clz	r3, sl
 80065c8:	095b      	lsrs	r3, r3, #5
 80065ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065cc:	2a00      	cmp	r2, #0
 80065ce:	bf08      	it	eq
 80065d0:	2301      	moveq	r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f040 80c8 	bne.w	8006768 <HAL_I2C_Mem_Write+0x1c4>
    __HAL_LOCK(hi2c);
 80065d8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80065dc:	2b01      	cmp	r3, #1
 80065de:	f000 80c5 	beq.w	800676c <HAL_I2C_Mem_Write+0x1c8>
 80065e2:	f04f 0b01 	mov.w	fp, #1
 80065e6:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80065ea:	f7fe fcd9 	bl	8004fa0 <HAL_GetTick>
 80065ee:	4606      	mov	r6, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80065f0:	9000      	str	r0, [sp, #0]
 80065f2:	2319      	movs	r3, #25
 80065f4:	465a      	mov	r2, fp
 80065f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065fa:	4620      	mov	r0, r4
 80065fc:	f7ff fe80 	bl	8006300 <I2C_WaitOnFlagUntilTimeout>
 8006600:	2800      	cmp	r0, #0
 8006602:	f040 80b5 	bne.w	8006770 <HAL_I2C_Mem_Write+0x1cc>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006606:	2321      	movs	r3, #33	; 0x21
 8006608:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800660c:	2340      	movs	r3, #64	; 0x40
 800660e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006612:	2300      	movs	r3, #0
 8006614:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8006616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006618:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800661a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800661e:	6363      	str	r3, [r4, #52]	; 0x34
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006620:	9601      	str	r6, [sp, #4]
 8006622:	9700      	str	r7, [sp, #0]
 8006624:	464b      	mov	r3, r9
 8006626:	4642      	mov	r2, r8
 8006628:	4629      	mov	r1, r5
 800662a:	4620      	mov	r0, r4
 800662c:	f7ff fe8e 	bl	800634c <I2C_RequestMemoryWrite>
 8006630:	b160      	cbz	r0, 800664c <HAL_I2C_Mem_Write+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006632:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006634:	2b04      	cmp	r3, #4
 8006636:	d004      	beq.n	8006642 <HAL_I2C_Mem_Write+0x9e>
        __HAL_UNLOCK(hi2c);
 8006638:	2300      	movs	r3, #0
 800663a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800663e:	2003      	movs	r0, #3
 8006640:	e08f      	b.n	8006762 <HAL_I2C_Mem_Write+0x1be>
        __HAL_UNLOCK(hi2c);
 8006642:	2300      	movs	r3, #0
 8006644:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8006648:	4658      	mov	r0, fp
 800664a:	e08a      	b.n	8006762 <HAL_I2C_Mem_Write+0x1be>
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800664c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800664e:	b29b      	uxth	r3, r3
 8006650:	2bff      	cmp	r3, #255	; 0xff
 8006652:	d90a      	bls.n	800666a <HAL_I2C_Mem_Write+0xc6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006654:	22ff      	movs	r2, #255	; 0xff
 8006656:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006658:	2300      	movs	r3, #0
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006660:	4629      	mov	r1, r5
 8006662:	4620      	mov	r0, r4
 8006664:	f7ff fdca 	bl	80061fc <I2C_TransferConfig>
 8006668:	e023      	b.n	80066b2 <HAL_I2C_Mem_Write+0x10e>
      hi2c->XferSize = hi2c->XferCount;
 800666a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800666c:	b292      	uxth	r2, r2
 800666e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006670:	2300      	movs	r3, #0
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	4629      	mov	r1, r5
 800667c:	4620      	mov	r0, r4
 800667e:	f7ff fdbd 	bl	80061fc <I2C_TransferConfig>
 8006682:	e016      	b.n	80066b2 <HAL_I2C_Mem_Write+0x10e>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006684:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006686:	2b04      	cmp	r3, #4
 8006688:	d001      	beq.n	800668e <HAL_I2C_Mem_Write+0xea>
          return HAL_TIMEOUT;
 800668a:	2003      	movs	r0, #3
 800668c:	e069      	b.n	8006762 <HAL_I2C_Mem_Write+0x1be>
          return HAL_ERROR;
 800668e:	2001      	movs	r0, #1
 8006690:	e067      	b.n	8006762 <HAL_I2C_Mem_Write+0x1be>
          hi2c->XferSize = hi2c->XferCount;
 8006692:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006694:	b292      	uxth	r2, r2
 8006696:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006698:	2300      	movs	r3, #0
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	4629      	mov	r1, r5
 80066a4:	4620      	mov	r0, r4
 80066a6:	f7ff fda9 	bl	80061fc <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 80066aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d033      	beq.n	800671a <HAL_I2C_Mem_Write+0x176>
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066b2:	4632      	mov	r2, r6
 80066b4:	4639      	mov	r1, r7
 80066b6:	4620      	mov	r0, r4
 80066b8:	f7ff fdf8 	bl	80062ac <I2C_WaitOnTXISFlagUntilTimeout>
 80066bc:	2800      	cmp	r0, #0
 80066be:	d1e1      	bne.n	8006684 <HAL_I2C_Mem_Write+0xe0>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80066c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	6262      	str	r2, [r4, #36]	; 0x24
 80066c6:	6822      	ldr	r2, [r4, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80066cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80066d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80066d8:	3b01      	subs	r3, #1
 80066da:	b29b      	uxth	r3, r3
 80066dc:	8523      	strh	r3, [r4, #40]	; 0x28
      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e3      	bne.n	80066aa <HAL_I2C_Mem_Write+0x106>
 80066e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0df      	beq.n	80066aa <HAL_I2C_Mem_Write+0x106>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066ea:	9600      	str	r6, [sp, #0]
 80066ec:	463b      	mov	r3, r7
 80066ee:	2200      	movs	r2, #0
 80066f0:	2180      	movs	r1, #128	; 0x80
 80066f2:	4620      	mov	r0, r4
 80066f4:	f7ff fe04 	bl	8006300 <I2C_WaitOnFlagUntilTimeout>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d13b      	bne.n	8006774 <HAL_I2C_Mem_Write+0x1d0>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80066fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066fe:	b29b      	uxth	r3, r3
 8006700:	2bff      	cmp	r3, #255	; 0xff
 8006702:	d9c6      	bls.n	8006692 <HAL_I2C_Mem_Write+0xee>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006704:	22ff      	movs	r2, #255	; 0xff
 8006706:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006708:	2300      	movs	r3, #0
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006710:	4629      	mov	r1, r5
 8006712:	4620      	mov	r0, r4
 8006714:	f7ff fd72 	bl	80061fc <I2C_TransferConfig>
 8006718:	e7c7      	b.n	80066aa <HAL_I2C_Mem_Write+0x106>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800671a:	4632      	mov	r2, r6
 800671c:	4639      	mov	r1, r7
 800671e:	4620      	mov	r0, r4
 8006720:	f7ff fe9f 	bl	8006462 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006724:	b130      	cbz	r0, 8006734 <HAL_I2C_Mem_Write+0x190>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006726:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006728:	2b04      	cmp	r3, #4
 800672a:	d001      	beq.n	8006730 <HAL_I2C_Mem_Write+0x18c>
        return HAL_TIMEOUT;
 800672c:	2003      	movs	r0, #3
 800672e:	e018      	b.n	8006762 <HAL_I2C_Mem_Write+0x1be>
        return HAL_ERROR;
 8006730:	2001      	movs	r0, #1
 8006732:	e016      	b.n	8006762 <HAL_I2C_Mem_Write+0x1be>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	2220      	movs	r2, #32
 8006738:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800673a:	6821      	ldr	r1, [r4, #0]
 800673c:	684b      	ldr	r3, [r1, #4]
 800673e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8006742:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8006746:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800674a:	f023 0301 	bic.w	r3, r3, #1
 800674e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006750:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006754:	2300      	movs	r3, #0
 8006756:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800675a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800675e:	e000      	b.n	8006762 <HAL_I2C_Mem_Write+0x1be>
    return HAL_BUSY;
 8006760:	2002      	movs	r0, #2
}
 8006762:	b003      	add	sp, #12
 8006764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 8006768:	2001      	movs	r0, #1
 800676a:	e7fa      	b.n	8006762 <HAL_I2C_Mem_Write+0x1be>
    __HAL_LOCK(hi2c);
 800676c:	2002      	movs	r0, #2
 800676e:	e7f8      	b.n	8006762 <HAL_I2C_Mem_Write+0x1be>
      return HAL_TIMEOUT;
 8006770:	2003      	movs	r0, #3
 8006772:	e7f6      	b.n	8006762 <HAL_I2C_Mem_Write+0x1be>
          return HAL_TIMEOUT;
 8006774:	2003      	movs	r0, #3
 8006776:	e7f4      	b.n	8006762 <HAL_I2C_Mem_Write+0x1be>

08006778 <HAL_I2C_Mem_Read>:
{
 8006778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677c:	b083      	sub	sp, #12
 800677e:	460d      	mov	r5, r1
 8006780:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8006784:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if(hi2c->State == HAL_I2C_STATE_READY)
 8006786:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800678a:	b2c9      	uxtb	r1, r1
 800678c:	2920      	cmp	r1, #32
 800678e:	f040 80cd 	bne.w	800692c <HAL_I2C_Mem_Read+0x1b4>
 8006792:	4604      	mov	r4, r0
 8006794:	4690      	mov	r8, r2
 8006796:	4699      	mov	r9, r3
    if((pData == NULL) || (Size == 0U))
 8006798:	faba f38a 	clz	r3, sl
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067a0:	2a00      	cmp	r2, #0
 80067a2:	bf08      	it	eq
 80067a4:	2301      	moveq	r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f040 80c4 	bne.w	8006934 <HAL_I2C_Mem_Read+0x1bc>
    __HAL_LOCK(hi2c);
 80067ac:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	f000 80c1 	beq.w	8006938 <HAL_I2C_Mem_Read+0x1c0>
 80067b6:	f04f 0b01 	mov.w	fp, #1
 80067ba:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80067be:	f7fe fbef 	bl	8004fa0 <HAL_GetTick>
 80067c2:	4606      	mov	r6, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067c4:	9000      	str	r0, [sp, #0]
 80067c6:	2319      	movs	r3, #25
 80067c8:	465a      	mov	r2, fp
 80067ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067ce:	4620      	mov	r0, r4
 80067d0:	f7ff fd96 	bl	8006300 <I2C_WaitOnFlagUntilTimeout>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	f040 80b1 	bne.w	800693c <HAL_I2C_Mem_Read+0x1c4>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80067da:	2322      	movs	r3, #34	; 0x22
 80067dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067e0:	2340      	movs	r3, #64	; 0x40
 80067e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067e6:	2300      	movs	r3, #0
 80067e8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80067ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067ec:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80067ee:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80067f2:	6363      	str	r3, [r4, #52]	; 0x34
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067f4:	9601      	str	r6, [sp, #4]
 80067f6:	9700      	str	r7, [sp, #0]
 80067f8:	464b      	mov	r3, r9
 80067fa:	4642      	mov	r2, r8
 80067fc:	4629      	mov	r1, r5
 80067fe:	4620      	mov	r0, r4
 8006800:	f7ff fdea 	bl	80063d8 <I2C_RequestMemoryRead>
 8006804:	b160      	cbz	r0, 8006820 <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006806:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006808:	2b04      	cmp	r3, #4
 800680a:	d004      	beq.n	8006816 <HAL_I2C_Mem_Read+0x9e>
        __HAL_UNLOCK(hi2c);
 800680c:	2300      	movs	r3, #0
 800680e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8006812:	2003      	movs	r0, #3
 8006814:	e08b      	b.n	800692e <HAL_I2C_Mem_Read+0x1b6>
        __HAL_UNLOCK(hi2c);
 8006816:	2300      	movs	r3, #0
 8006818:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800681c:	4658      	mov	r0, fp
 800681e:	e086      	b.n	800692e <HAL_I2C_Mem_Read+0x1b6>
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8006820:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006822:	b29b      	uxth	r3, r3
 8006824:	2bff      	cmp	r3, #255	; 0xff
 8006826:	d90b      	bls.n	8006840 <HAL_I2C_Mem_Read+0xc8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006828:	22ff      	movs	r2, #255	; 0xff
 800682a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800682c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006836:	4629      	mov	r1, r5
 8006838:	4620      	mov	r0, r4
 800683a:	f7ff fcdf 	bl	80061fc <I2C_TransferConfig>
 800683e:	e01d      	b.n	800687c <HAL_I2C_Mem_Read+0x104>
      hi2c->XferSize = hi2c->XferCount;
 8006840:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006842:	b292      	uxth	r2, r2
 8006844:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006846:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006850:	b2d2      	uxtb	r2, r2
 8006852:	4629      	mov	r1, r5
 8006854:	4620      	mov	r0, r4
 8006856:	f7ff fcd1 	bl	80061fc <I2C_TransferConfig>
 800685a:	e00f      	b.n	800687c <HAL_I2C_Mem_Read+0x104>
          hi2c->XferSize = hi2c->XferCount;
 800685c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800685e:	b292      	uxth	r2, r2
 8006860:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006862:	2300      	movs	r3, #0
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800686a:	b2d2      	uxtb	r2, r2
 800686c:	4629      	mov	r1, r5
 800686e:	4620      	mov	r0, r4
 8006870:	f7ff fcc4 	bl	80061fc <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 8006874:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006876:	b29b      	uxth	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d034      	beq.n	80068e6 <HAL_I2C_Mem_Read+0x16e>
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800687c:	9600      	str	r6, [sp, #0]
 800687e:	463b      	mov	r3, r7
 8006880:	2200      	movs	r2, #0
 8006882:	2104      	movs	r1, #4
 8006884:	4620      	mov	r0, r4
 8006886:	f7ff fd3b 	bl	8006300 <I2C_WaitOnFlagUntilTimeout>
 800688a:	2800      	cmp	r0, #0
 800688c:	d158      	bne.n	8006940 <HAL_I2C_Mem_Read+0x1c8>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800688e:	6823      	ldr	r3, [r4, #0]
 8006890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006894:	1c59      	adds	r1, r3, #1
 8006896:	6261      	str	r1, [r4, #36]	; 0x24
 8006898:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 800689a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800689c:	3a01      	subs	r2, #1
 800689e:	b292      	uxth	r2, r2
 80068a0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80068a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	3b01      	subs	r3, #1
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80068ac:	2a00      	cmp	r2, #0
 80068ae:	d1e1      	bne.n	8006874 <HAL_I2C_Mem_Read+0xfc>
 80068b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0dd      	beq.n	8006874 <HAL_I2C_Mem_Read+0xfc>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068b8:	9600      	str	r6, [sp, #0]
 80068ba:	463b      	mov	r3, r7
 80068bc:	2180      	movs	r1, #128	; 0x80
 80068be:	4620      	mov	r0, r4
 80068c0:	f7ff fd1e 	bl	8006300 <I2C_WaitOnFlagUntilTimeout>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d13d      	bne.n	8006944 <HAL_I2C_Mem_Read+0x1cc>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80068c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2bff      	cmp	r3, #255	; 0xff
 80068ce:	d9c5      	bls.n	800685c <HAL_I2C_Mem_Read+0xe4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068d0:	22ff      	movs	r2, #255	; 0xff
 80068d2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80068d4:	2300      	movs	r3, #0
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068dc:	4629      	mov	r1, r5
 80068de:	4620      	mov	r0, r4
 80068e0:	f7ff fc8c 	bl	80061fc <I2C_TransferConfig>
 80068e4:	e7c6      	b.n	8006874 <HAL_I2C_Mem_Read+0xfc>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068e6:	4632      	mov	r2, r6
 80068e8:	4639      	mov	r1, r7
 80068ea:	4620      	mov	r0, r4
 80068ec:	f7ff fdb9 	bl	8006462 <I2C_WaitOnSTOPFlagUntilTimeout>
 80068f0:	b130      	cbz	r0, 8006900 <HAL_I2C_Mem_Read+0x188>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d001      	beq.n	80068fc <HAL_I2C_Mem_Read+0x184>
        return HAL_TIMEOUT;
 80068f8:	2003      	movs	r0, #3
 80068fa:	e018      	b.n	800692e <HAL_I2C_Mem_Read+0x1b6>
        return HAL_ERROR;
 80068fc:	2001      	movs	r0, #1
 80068fe:	e016      	b.n	800692e <HAL_I2C_Mem_Read+0x1b6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	2220      	movs	r2, #32
 8006904:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006906:	6821      	ldr	r1, [r4, #0]
 8006908:	684b      	ldr	r3, [r1, #4]
 800690a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800690e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8006912:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006916:	f023 0301 	bic.w	r3, r3, #1
 800691a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800691c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006920:	2300      	movs	r3, #0
 8006922:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006926:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800692a:	e000      	b.n	800692e <HAL_I2C_Mem_Read+0x1b6>
    return HAL_BUSY;
 800692c:	2002      	movs	r0, #2
}
 800692e:	b003      	add	sp, #12
 8006930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 8006934:	2001      	movs	r0, #1
 8006936:	e7fa      	b.n	800692e <HAL_I2C_Mem_Read+0x1b6>
    __HAL_LOCK(hi2c);
 8006938:	2002      	movs	r0, #2
 800693a:	e7f8      	b.n	800692e <HAL_I2C_Mem_Read+0x1b6>
      return HAL_TIMEOUT;
 800693c:	2003      	movs	r0, #3
 800693e:	e7f6      	b.n	800692e <HAL_I2C_Mem_Read+0x1b6>
        return HAL_TIMEOUT;
 8006940:	2003      	movs	r0, #3
 8006942:	e7f4      	b.n	800692e <HAL_I2C_Mem_Read+0x1b6>
          return HAL_TIMEOUT;
 8006944:	2003      	movs	r0, #3
 8006946:	e7f2      	b.n	800692e <HAL_I2C_Mem_Read+0x1b6>

08006948 <HAL_I2C_GetState>:
  return hi2c->State;
 8006948:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800694c:	4770      	bx	lr

0800694e <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800694e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006950:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006954:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006956:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006958:	f003 0303 	and.w	r3, r3, #3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d032      	beq.n	80069c6 <JPEG_Init_Process+0x78>
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8006960:	6802      	ldr	r2, [r0, #0]
 8006962:	6853      	ldr	r3, [r2, #4]
 8006964:	f023 0308 	bic.w	r3, r3, #8
 8006968:	6053      	str	r3, [r2, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800696a:	6802      	ldr	r2, [r0, #0]
 800696c:	6813      	ldr	r3, [r2, #0]
 800696e:	f023 0301 	bic.w	r3, r3, #1
 8006972:	6013      	str	r3, [r2, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8006974:	6802      	ldr	r2, [r0, #0]
 8006976:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006978:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 800697c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 800697e:	6802      	ldr	r2, [r0, #0]
 8006980:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006982:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8006986:	6313      	str	r3, [r2, #48]	; 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8006988:	6802      	ldr	r2, [r0, #0]
 800698a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800698c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006990:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8006992:	6802      	ldr	r2, [r0, #0]
 8006994:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800699a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800699c:	6802      	ldr	r2, [r0, #0]
 800699e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80069a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80069a4:	6393      	str	r3, [r2, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 80069a6:	6802      	ldr	r2, [r0, #0]
 80069a8:	6813      	ldr	r3, [r2, #0]
 80069aa:	f043 0301 	orr.w	r3, r3, #1
 80069ae:	6013      	str	r3, [r2, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80069b0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80069b2:	f003 030c 	and.w	r3, r3, #12
 80069b6:	2b08      	cmp	r3, #8
 80069b8:	d00b      	beq.n	80069d2 <JPEG_Init_Process+0x84>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80069ba:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80069bc:	f003 030c 	and.w	r3, r3, #12
 80069c0:	2b0c      	cmp	r3, #12
 80069c2:	d00c      	beq.n	80069de <JPEG_Init_Process+0x90>
  }
  else
  {
    /* Nothing to do */
  }
}
 80069c4:	4770      	bx	lr
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80069c6:	6802      	ldr	r2, [r0, #0]
 80069c8:	6853      	ldr	r3, [r2, #4]
 80069ca:	f043 0308 	orr.w	r3, r3, #8
 80069ce:	6053      	str	r3, [r2, #4]
 80069d0:	e7cb      	b.n	800696a <JPEG_Init_Process+0x1c>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 80069d2:	6802      	ldr	r2, [r0, #0]
 80069d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80069d6:	f043 036e 	orr.w	r3, r3, #110	; 0x6e
 80069da:	6313      	str	r3, [r2, #48]	; 0x30
 80069dc:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80069de:	6802      	ldr	r2, [r0, #0]
 80069e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80069e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80069e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80069e8:	e7ec      	b.n	80069c4 <JPEG_Init_Process+0x76>
	...

080069ec <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 80069ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 80069ee:	6807      	ldr	r7, [r0, #0]
 80069f0:	3750      	adds	r7, #80	; 0x50

  i = 0;
 80069f2:	2500      	movs	r5, #0
  uint32_t quality = 0;
 80069f4:	462c      	mov	r4, r5
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80069f6:	e027      	b.n	8006a48 <JPEG_GetQuality+0x5c>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
      if (quantVal == 1UL)
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 80069f8:	3464      	adds	r4, #100	; 0x64
    for (j = 0; j < 4UL; j++)
 80069fa:	3101      	adds	r1, #1
 80069fc:	2903      	cmp	r1, #3
 80069fe:	d821      	bhi.n	8006a44 <JPEG_GetQuality+0x58>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8006a00:	00cb      	lsls	r3, r1, #3
 8006a02:	fa26 f303 	lsr.w	r3, r6, r3
 8006a06:	b2db      	uxtb	r3, r3
      if (quantVal == 1UL)
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d0f5      	beq.n	80069f8 <JPEG_GetQuality+0xc>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8006a0c:	2264      	movs	r2, #100	; 0x64
 8006a0e:	fb02 f303 	mul.w	r3, r2, r3
 8006a12:	eb05 0e01 	add.w	lr, r5, r1
 8006a16:	4a10      	ldr	r2, [pc, #64]	; (8006a58 <JPEG_GetQuality+0x6c>)
 8006a18:	eb02 0c0e 	add.w	ip, r2, lr
 8006a1c:	f89c c1a0 	ldrb.w	ip, [ip, #416]	; 0x1a0
 8006a20:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006a22:	f812 200c 	ldrb.w	r2, [r2, ip]
 8006a26:	fbb3 f3f2 	udiv	r3, r3, r2

        if (scale <= 100UL)
 8006a2a:	2b64      	cmp	r3, #100	; 0x64
 8006a2c:	d804      	bhi.n	8006a38 <JPEG_GetQuality+0x4c>
        {
          quality += (200UL - scale) / 2UL;
 8006a2e:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8006a32:	eb04 0453 	add.w	r4, r4, r3, lsr #1
 8006a36:	e7e0      	b.n	80069fa <JPEG_GetQuality+0xe>
        }
        else
        {
          quality += 5000UL / scale;
 8006a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a40:	441c      	add	r4, r3
 8006a42:	e7da      	b.n	80069fa <JPEG_GetQuality+0xe>
        }
      }
    }

    i += 4UL;
 8006a44:	3504      	adds	r5, #4
    tableAddress ++;
 8006a46:	3704      	adds	r7, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8006a48:	2d3c      	cmp	r5, #60	; 0x3c
 8006a4a:	d802      	bhi.n	8006a52 <JPEG_GetQuality+0x66>
    quantRow = *tableAddress;
 8006a4c:	683e      	ldr	r6, [r7, #0]
    for (j = 0; j < 4UL; j++)
 8006a4e:	2100      	movs	r1, #0
 8006a50:	e7d4      	b.n	80069fc <JPEG_GetQuality+0x10>
  }

  return (quality / 64UL);
}
 8006a52:	09a0      	lsrs	r0, r4, #6
 8006a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a56:	bf00      	nop
 8006a58:	08012ca0 	.word	0x08012ca0

08006a5c <HAL_JPEG_GetInfo>:
{
 8006a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8006a5e:	460c      	mov	r4, r1
 8006a60:	fab1 f181 	clz	r1, r1
 8006a64:	0949      	lsrs	r1, r1, #5
 8006a66:	2800      	cmp	r0, #0
 8006a68:	bf08      	it	eq
 8006a6a:	2101      	moveq	r1, #1
 8006a6c:	2900      	cmp	r1, #0
 8006a6e:	d15a      	bne.n	8006b26 <HAL_JPEG_GetInfo+0xca>
 8006a70:	4603      	mov	r3, r0
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8006a72:	6801      	ldr	r1, [r0, #0]
 8006a74:	684a      	ldr	r2, [r1, #4]
 8006a76:	f002 0203 	and.w	r2, r2, #3
 8006a7a:	2a02      	cmp	r2, #2
 8006a7c:	d006      	beq.n	8006a8c <HAL_JPEG_GetInfo+0x30>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8006a7e:	684a      	ldr	r2, [r1, #4]
 8006a80:	f012 0f03 	tst.w	r2, #3
 8006a84:	d12a      	bne.n	8006adc <HAL_JPEG_GetInfo+0x80>
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8006a86:	2200      	movs	r2, #0
 8006a88:	6022      	str	r2, [r4, #0]
 8006a8a:	e001      	b.n	8006a90 <HAL_JPEG_GetInfo+0x34>
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8006a8c:	2210      	movs	r2, #16
 8006a8e:	6022      	str	r2, [r4, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	6852      	ldr	r2, [r2, #4]
 8006a94:	0c12      	lsrs	r2, r2, #16
 8006a96:	60a2      	str	r2, [r4, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68d2      	ldr	r2, [r2, #12]
 8006a9c:	0c12      	lsrs	r2, r2, #16
 8006a9e:	60e2      	str	r2, [r4, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8006aa0:	6822      	ldr	r2, [r4, #0]
 8006aa2:	2a30      	cmp	r2, #48	; 0x30
 8006aa4:	bf18      	it	ne
 8006aa6:	2a10      	cmpne	r2, #16
 8006aa8:	d135      	bne.n	8006b16 <HAL_JPEG_GetInfo+0xba>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8006aaa:	6819      	ldr	r1, [r3, #0]
 8006aac:	690a      	ldr	r2, [r1, #16]
 8006aae:	0915      	lsrs	r5, r2, #4
 8006ab0:	f3c2 1203 	ubfx	r2, r2, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8006ab4:	6948      	ldr	r0, [r1, #20]
 8006ab6:	0907      	lsrs	r7, r0, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8006ab8:	6989      	ldr	r1, [r1, #24]
 8006aba:	f3c1 1103 	ubfx	r1, r1, #4, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8006abe:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 8006ac2:	bf0c      	ite	eq
 8006ac4:	2001      	moveq	r0, #1
 8006ac6:	2000      	movne	r0, #0
 8006ac8:	2a01      	cmp	r2, #1
 8006aca:	bf14      	ite	ne
 8006acc:	2600      	movne	r6, #0
 8006ace:	f000 0601 	andeq.w	r6, r0, #1
 8006ad2:	b15e      	cbz	r6, 8006aec <HAL_JPEG_GetInfo+0x90>
 8006ad4:	b951      	cbnz	r1, 8006aec <HAL_JPEG_GetInfo+0x90>
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	6062      	str	r2, [r4, #4]
 8006ada:	e01e      	b.n	8006b1a <HAL_JPEG_GetInfo+0xbe>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8006adc:	684a      	ldr	r2, [r1, #4]
 8006ade:	f002 0203 	and.w	r2, r2, #3
 8006ae2:	2a03      	cmp	r2, #3
 8006ae4:	d121      	bne.n	8006b2a <HAL_JPEG_GetInfo+0xce>
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8006ae6:	2230      	movs	r2, #48	; 0x30
 8006ae8:	6022      	str	r2, [r4, #0]
 8006aea:	e7d1      	b.n	8006a90 <HAL_JPEG_GetInfo+0x34>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8006aec:	433d      	orrs	r5, r7
 8006aee:	f015 0f0f 	tst.w	r5, #15
 8006af2:	d103      	bne.n	8006afc <HAL_JPEG_GetInfo+0xa0>
 8006af4:	b911      	cbnz	r1, 8006afc <HAL_JPEG_GetInfo+0xa0>
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8006af6:	2200      	movs	r2, #0
 8006af8:	6062      	str	r2, [r4, #4]
 8006afa:	e00e      	b.n	8006b1a <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8006afc:	2a03      	cmp	r2, #3
 8006afe:	bf14      	ite	ne
 8006b00:	2200      	movne	r2, #0
 8006b02:	f000 0201 	andeq.w	r2, r0, #1
 8006b06:	b11a      	cbz	r2, 8006b10 <HAL_JPEG_GetInfo+0xb4>
 8006b08:	b911      	cbnz	r1, 8006b10 <HAL_JPEG_GetInfo+0xb4>
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	6062      	str	r2, [r4, #4]
 8006b0e:	e004      	b.n	8006b1a <HAL_JPEG_GetInfo+0xbe>
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8006b10:	2200      	movs	r2, #0
 8006b12:	6062      	str	r2, [r4, #4]
 8006b14:	e001      	b.n	8006b1a <HAL_JPEG_GetInfo+0xbe>
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8006b16:	2200      	movs	r2, #0
 8006b18:	6062      	str	r2, [r4, #4]
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff ff66 	bl	80069ec <JPEG_GetQuality>
 8006b20:	6120      	str	r0, [r4, #16]
  return HAL_OK;
 8006b22:	2000      	movs	r0, #0
}
 8006b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8006b26:	2001      	movs	r0, #1
 8006b28:	e7fc      	b.n	8006b24 <HAL_JPEG_GetInfo+0xc8>
    return HAL_ERROR;
 8006b2a:	2001      	movs	r0, #1
 8006b2c:	e7fa      	b.n	8006b24 <HAL_JPEG_GetInfo+0xc8>

08006b2e <HAL_JPEG_Decode_IT>:
{
 8006b2e:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8006b30:	460d      	mov	r5, r1
 8006b32:	fab1 f181 	clz	r1, r1
 8006b36:	0949      	lsrs	r1, r1, #5
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	bf08      	it	eq
 8006b3c:	2101      	moveq	r1, #1
 8006b3e:	bb61      	cbnz	r1, 8006b9a <HAL_JPEG_Decode_IT+0x6c>
 8006b40:	b36b      	cbz	r3, 8006b9e <HAL_JPEG_Decode_IT+0x70>
  __HAL_LOCK(hjpeg);
 8006b42:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 8006b46:	2901      	cmp	r1, #1
 8006b48:	d02b      	beq.n	8006ba2 <HAL_JPEG_Decode_IT+0x74>
 8006b4a:	2101      	movs	r1, #1
 8006b4c:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8006b50:	f890 104d 	ldrb.w	r1, [r0, #77]	; 0x4d
 8006b54:	b2c9      	uxtb	r1, r1
 8006b56:	2901      	cmp	r1, #1
 8006b58:	d004      	beq.n	8006b64 <HAL_JPEG_Decode_IT+0x36>
    __HAL_UNLOCK(hjpeg);
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    return HAL_BUSY;
 8006b60:	2002      	movs	r0, #2
 8006b62:	e01b      	b.n	8006b9c <HAL_JPEG_Decode_IT+0x6e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8006b64:	2104      	movs	r1, #4
 8006b66:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8006b6a:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8006b6c:	f021 010f 	bic.w	r1, r1, #15
 8006b70:	6541      	str	r1, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_IT);
 8006b72:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8006b74:	f041 010a 	orr.w	r1, r1, #10
 8006b78:	6541      	str	r1, [r0, #84]	; 0x54
    hjpeg->pJpegInBuffPtr = pDataIn;
 8006b7a:	6185      	str	r5, [r0, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8006b7c:	61c3      	str	r3, [r0, #28]
    hjpeg->InDataLength = InDataLength - (InDataLength % 4UL);    /*In Data length must be multiple of 4 Bytes (1 word)*/
 8006b7e:	f022 0203 	bic.w	r2, r2, #3
 8006b82:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength - (OutDataLength % 4UL); /*Out Data length must be multiple of 4 Bytes (1 word)*/
 8006b84:	9b04      	ldr	r3, [sp, #16]
 8006b86:	f023 0303 	bic.w	r3, r3, #3
 8006b8a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->JpegInCount = 0;
 8006b8c:	2500      	movs	r5, #0
 8006b8e:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
 8006b90:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
 8006b92:	f7ff fedc 	bl	800694e <JPEG_Init_Process>
  return HAL_OK;
 8006b96:	4628      	mov	r0, r5
 8006b98:	e000      	b.n	8006b9c <HAL_JPEG_Decode_IT+0x6e>
    return HAL_ERROR;
 8006b9a:	2001      	movs	r0, #1
}
 8006b9c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006b9e:	2001      	movs	r0, #1
 8006ba0:	e7fc      	b.n	8006b9c <HAL_JPEG_Decode_IT+0x6e>
  __HAL_LOCK(hjpeg);
 8006ba2:	2002      	movs	r0, #2
 8006ba4:	e7fa      	b.n	8006b9c <HAL_JPEG_Decode_IT+0x6e>

08006ba6 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8006ba6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006ba8:	f003 030c 	and.w	r3, r3, #12
 8006bac:	2b0c      	cmp	r3, #12
 8006bae:	d006      	beq.n	8006bbe <HAL_JPEG_Pause+0x18>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8006bb0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006bb2:	f003 030c 	and.w	r3, r3, #12
 8006bb6:	2b08      	cmp	r3, #8
 8006bb8:	d01b      	beq.n	8006bf2 <HAL_JPEG_Pause+0x4c>
}
 8006bba:	2000      	movs	r0, #0
 8006bbc:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8006bbe:	f011 0301 	ands.w	r3, r1, #1
 8006bc2:	d005      	beq.n	8006bd0 <HAL_JPEG_Pause+0x2a>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8006bc4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006bc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bca:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 8006bcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8006bd0:	f011 0f02 	tst.w	r1, #2
 8006bd4:	d005      	beq.n	8006be2 <HAL_JPEG_Pause+0x3c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8006bd6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8006bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bdc:	6542      	str	r2, [r0, #84]	; 0x54
      mask |= JPEG_DMA_ODMA;
 8006bde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    JPEG_DISABLE_DMA(hjpeg, mask);
 8006be2:	6801      	ldr	r1, [r0, #0]
 8006be4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8006be6:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8006bea:	ea22 0303 	bic.w	r3, r2, r3
 8006bee:	630b      	str	r3, [r1, #48]	; 0x30
 8006bf0:	e7e3      	b.n	8006bba <HAL_JPEG_Pause+0x14>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8006bf2:	f011 0201 	ands.w	r2, r1, #1
 8006bf6:	d004      	beq.n	8006c02 <HAL_JPEG_Pause+0x5c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8006bf8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006bfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bfe:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8006c00:	2206      	movs	r2, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8006c02:	f011 0f02 	tst.w	r1, #2
 8006c06:	d005      	beq.n	8006c14 <HAL_JPEG_Pause+0x6e>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8006c08:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006c0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c0e:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8006c10:	f042 0228 	orr.w	r2, r2, #40	; 0x28
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8006c14:	6801      	ldr	r1, [r0, #0]
 8006c16:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8006c18:	ea23 0302 	bic.w	r3, r3, r2
 8006c1c:	630b      	str	r3, [r1, #48]	; 0x30
 8006c1e:	e7cc      	b.n	8006bba <HAL_JPEG_Pause+0x14>

08006c20 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8006c20:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8006c22:	6282      	str	r2, [r0, #40]	; 0x28
}
 8006c24:	4770      	bx	lr

08006c26 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8006c26:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8006c28:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 8006c2a:	4770      	bx	lr

08006c2c <HAL_JPEG_EncodeCpltCallback>:
}
 8006c2c:	4770      	bx	lr

08006c2e <JPEG_ReadInputData>:
{
 8006c2e:	b570      	push	{r4, r5, r6, lr}
 8006c30:	4604      	mov	r4, r0
 8006c32:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8006c34:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006c36:	b103      	cbz	r3, 8006c3a <JPEG_ReadInputData+0xc>
 8006c38:	b991      	cbnz	r1, 8006c60 <JPEG_ReadInputData+0x32>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f7ff ffb2 	bl	8006ba6 <HAL_JPEG_Pause>
  uint32_t nbBytes = 0, nBwords, index, Dataword, inputCount;
 8006c42:	2200      	movs	r2, #0
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nbBytes > 0UL))
 8006c44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c46:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8006c4a:	d15d      	bne.n	8006d08 <JPEG_ReadInputData+0xda>
 8006c4c:	2a00      	cmp	r2, #0
 8006c4e:	d05b      	beq.n	8006d08 <JPEG_ReadInputData+0xda>
    nBwords = nbBytes / 4UL;
 8006c50:	0896      	lsrs	r6, r2, #2
    if (nBwords >= nbRequestWords)
 8006c52:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 8006c56:	d91b      	bls.n	8006c90 <JPEG_ReadInputData+0x62>
      if (nBwords > 0UL)
 8006c58:	2a03      	cmp	r2, #3
 8006c5a:	d82f      	bhi.n	8006cbc <JPEG_ReadInputData+0x8e>
        Dataword = 0;
 8006c5c:	461d      	mov	r5, r3
 8006c5e:	e04f      	b.n	8006d00 <JPEG_ReadInputData+0xd2>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8006c60:	6a02      	ldr	r2, [r0, #32]
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d902      	bls.n	8006c6c <JPEG_ReadInputData+0x3e>
    nbBytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8006c66:	6a02      	ldr	r2, [r0, #32]
 8006c68:	1a9a      	subs	r2, r3, r2
 8006c6a:	e7eb      	b.n	8006c44 <JPEG_ReadInputData+0x16>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8006c6c:	6a02      	ldr	r2, [r0, #32]
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d001      	beq.n	8006c76 <JPEG_ReadInputData+0x48>
  uint32_t nbBytes = 0, nBwords, index, Dataword, inputCount;
 8006c72:	2200      	movs	r2, #0
 8006c74:	e7e6      	b.n	8006c44 <JPEG_ReadInputData+0x16>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8006c76:	6a01      	ldr	r1, [r0, #32]
 8006c78:	f006 fd10 	bl	800d69c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8006c7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d902      	bls.n	8006c88 <JPEG_ReadInputData+0x5a>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8006c82:	f023 0303 	bic.w	r3, r3, #3
 8006c86:	62a3      	str	r3, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	6223      	str	r3, [r4, #32]
    nbBytes = hjpeg->InDataLength;
 8006c8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006c8e:	e7d9      	b.n	8006c44 <JPEG_ReadInputData+0x16>
      for (index = 0; index < nbRequestWords; index++)
 8006c90:	42ab      	cmp	r3, r5
 8006c92:	d239      	bcs.n	8006d08 <JPEG_ReadInputData+0xda>
        inputCount = hjpeg->JpegInCount;
 8006c94:	6a21      	ldr	r1, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8006c96:	69a0      	ldr	r0, [r4, #24]
 8006c98:	5c42      	ldrb	r2, [r0, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8006c9a:	4408      	add	r0, r1
 8006c9c:	7841      	ldrb	r1, [r0, #1]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8006c9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 8006ca2:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8006ca4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 3UL])) << 24));
 8006ca8:	78c0      	ldrb	r0, [r0, #3]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8006caa:	6821      	ldr	r1, [r4, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 8006cac:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8006cb0:	640a      	str	r2, [r1, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
 8006cb2:	6a22      	ldr	r2, [r4, #32]
 8006cb4:	3204      	adds	r2, #4
 8006cb6:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8006cb8:	3301      	adds	r3, #1
 8006cba:	e7e9      	b.n	8006c90 <JPEG_ReadInputData+0x62>
        for (index = 0; index < nBwords; index++)
 8006cbc:	42b3      	cmp	r3, r6
 8006cbe:	d223      	bcs.n	8006d08 <JPEG_ReadInputData+0xda>
          inputCount = hjpeg->JpegInCount;
 8006cc0:	6a20      	ldr	r0, [r4, #32]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8006cc2:	69a1      	ldr	r1, [r4, #24]
 8006cc4:	5c0a      	ldrb	r2, [r1, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8006cc6:	4401      	add	r1, r0
 8006cc8:	7848      	ldrb	r0, [r1, #1]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8006cca:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 8006cce:	7888      	ldrb	r0, [r1, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8006cd0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 3UL])) << 24));
 8006cd4:	78c8      	ldrb	r0, [r1, #3]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8006cd6:	6821      	ldr	r1, [r4, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 8006cd8:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8006cdc:	640a      	str	r2, [r1, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 8006cde:	6a22      	ldr	r2, [r4, #32]
 8006ce0:	3204      	adds	r2, #4
 8006ce2:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nBwords; index++)
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	e7e9      	b.n	8006cbc <JPEG_ReadInputData+0x8e>
          Dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8006ce8:	69a0      	ldr	r0, [r4, #24]
 8006cea:	6a21      	ldr	r1, [r4, #32]
 8006cec:	5c41      	ldrb	r1, [r0, r1]
 8006cee:	f003 0003 	and.w	r0, r3, #3
 8006cf2:	00c0      	lsls	r0, r0, #3
 8006cf4:	4081      	lsls	r1, r0
 8006cf6:	430d      	orrs	r5, r1
          hjpeg->JpegInCount++;
 8006cf8:	6a21      	ldr	r1, [r4, #32]
 8006cfa:	3101      	adds	r1, #1
 8006cfc:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nbBytes; index++)
 8006cfe:	3301      	adds	r3, #1
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d8f1      	bhi.n	8006ce8 <JPEG_ReadInputData+0xba>
        hjpeg->Instance->DIR = Dataword;
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	641d      	str	r5, [r3, #64]	; 0x40
}
 8006d08:	bd70      	pop	{r4, r5, r6, pc}

08006d0a <JPEG_StoreOutputData>:
{
 8006d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0c:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8006d0e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8006d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d12:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006d16:	4298      	cmp	r0, r3
 8006d18:	d223      	bcs.n	8006d62 <JPEG_StoreOutputData+0x58>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8006d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d1c:	4298      	cmp	r0, r3
 8006d1e:	d942      	bls.n	8006da6 <JPEG_StoreOutputData+0x9c>
    nBwords = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8006d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d22:	1ac0      	subs	r0, r0, r3
 8006d24:	0880      	lsrs	r0, r0, #2
    for (index = 0; index < nBwords; index++)
 8006d26:	2100      	movs	r1, #0
 8006d28:	4281      	cmp	r1, r0
 8006d2a:	d245      	bcs.n	8006db8 <JPEG_StoreOutputData+0xae>
      dataword = hjpeg->Instance->DOR;
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006d30:	69e5      	ldr	r5, [r4, #28]
 8006d32:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d34:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8006d36:	69e5      	ldr	r5, [r4, #28]
 8006d38:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d3a:	3201      	adds	r2, #1
 8006d3c:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8006d40:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006d42:	69e5      	ldr	r5, [r4, #28]
 8006d44:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d46:	3202      	adds	r2, #2
 8006d48:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8006d4c:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006d4e:	69e5      	ldr	r5, [r4, #28]
 8006d50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d52:	3203      	adds	r2, #3
 8006d54:	0e1b      	lsrs	r3, r3, #24
 8006d56:	54ab      	strb	r3, [r5, r2]
      hjpeg->JpegOutCount += 4UL;
 8006d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nBwords; index++)
 8006d5e:	3101      	adds	r1, #1
 8006d60:	e7e2      	b.n	8006d28 <JPEG_StoreOutputData+0x1e>
    for (index = 0; index < nbOutputWords; index++)
 8006d62:	2000      	movs	r0, #0
 8006d64:	4288      	cmp	r0, r1
 8006d66:	d21a      	bcs.n	8006d9e <JPEG_StoreOutputData+0x94>
      dataword = hjpeg->Instance->DOR;
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006d6c:	69e5      	ldr	r5, [r4, #28]
 8006d6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d70:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8006d72:	69e5      	ldr	r5, [r4, #28]
 8006d74:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d76:	3201      	adds	r2, #1
 8006d78:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8006d7c:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006d7e:	69e5      	ldr	r5, [r4, #28]
 8006d80:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d82:	3202      	adds	r2, #2
 8006d84:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8006d88:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006d8a:	69e5      	ldr	r5, [r4, #28]
 8006d8c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d8e:	3203      	adds	r2, #3
 8006d90:	0e1b      	lsrs	r3, r3, #24
 8006d92:	54ab      	strb	r3, [r5, r2]
      hjpeg->JpegOutCount += 4UL;
 8006d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d96:	3304      	adds	r3, #4
 8006d98:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 8006d9a:	3001      	adds	r0, #1
 8006d9c:	e7e2      	b.n	8006d64 <JPEG_StoreOutputData+0x5a>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8006d9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d000      	beq.n	8006da8 <JPEG_StoreOutputData+0x9e>
}
 8006da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006da8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006daa:	69e1      	ldr	r1, [r4, #28]
 8006dac:	4620      	mov	r0, r4
 8006dae:	f006 fc87 	bl	800d6c0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8006db2:	2300      	movs	r3, #0
 8006db4:	6263      	str	r3, [r4, #36]	; 0x24
 8006db6:	e7f6      	b.n	8006da6 <JPEG_StoreOutputData+0x9c>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8006db8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006dba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dbc:	429f      	cmp	r7, r3
 8006dbe:	d006      	beq.n	8006dce <JPEG_StoreOutputData+0xc4>
      nbBytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8006dc0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006dc2:	eba7 0c05 	sub.w	ip, r7, r5
      dataword = hjpeg->Instance->DOR;
 8006dc6:	6823      	ldr	r3, [r4, #0]
 8006dc8:	6c5e      	ldr	r6, [r3, #68]	; 0x44
      for (index = 0; index < nbBytes; index++)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	e013      	b.n	8006df6 <JPEG_StoreOutputData+0xec>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006dce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006dd0:	69e1      	ldr	r1, [r4, #28]
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f006 fc74 	bl	800d6c0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	6263      	str	r3, [r4, #36]	; 0x24
 8006ddc:	e7e3      	b.n	8006da6 <JPEG_StoreOutputData+0x9c>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8006dde:	f002 0303 	and.w	r3, r2, #3
 8006de2:	00db      	lsls	r3, r3, #3
 8006de4:	fa26 f303 	lsr.w	r3, r6, r3
 8006de8:	69e0      	ldr	r0, [r4, #28]
 8006dea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006dec:	5443      	strb	r3, [r0, r1]
        hjpeg->JpegOutCount++;
 8006dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006df0:	3301      	adds	r3, #1
 8006df2:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nbBytes; index++)
 8006df4:	3201      	adds	r2, #1
 8006df6:	4562      	cmp	r2, ip
 8006df8:	d3f1      	bcc.n	8006dde <JPEG_StoreOutputData+0xd4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006dfa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006dfc:	69e1      	ldr	r1, [r4, #28]
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f006 fc5e 	bl	800d6c0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	6263      	str	r3, [r4, #36]	; 0x24
      nbBytes = 4UL - nbBytes;
 8006e08:	1bed      	subs	r5, r5, r7
 8006e0a:	3504      	adds	r5, #4
      for (index = nbBytes; index < 4UL; index++)
 8006e0c:	e009      	b.n	8006e22 <JPEG_StoreOutputData+0x118>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8006e0e:	00eb      	lsls	r3, r5, #3
 8006e10:	fa26 f303 	lsr.w	r3, r6, r3
 8006e14:	69e1      	ldr	r1, [r4, #28]
 8006e16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006e18:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
 8006e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nbBytes; index < 4UL; index++)
 8006e20:	3501      	adds	r5, #1
 8006e22:	2d03      	cmp	r5, #3
 8006e24:	d9f3      	bls.n	8006e0e <JPEG_StoreOutputData+0x104>
 8006e26:	e7be      	b.n	8006da6 <JPEG_StoreOutputData+0x9c>

08006e28 <JPEG_Process>:
{
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006e2c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006e2e:	f003 0303 	and.w	r3, r3, #3
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d021      	beq.n	8006e7a <JPEG_Process+0x52>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8006e36:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006e38:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006e3c:	d108      	bne.n	8006e50 <JPEG_Process+0x28>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e42:	f012 0f02 	tst.w	r2, #2
 8006e46:	d132      	bne.n	8006eae <JPEG_Process+0x86>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8006e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4a:	f013 0f04 	tst.w	r3, #4
 8006e4e:	d133      	bne.n	8006eb8 <JPEG_Process+0x90>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8006e50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006e52:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006e56:	d108      	bne.n	8006e6a <JPEG_Process+0x42>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e5c:	f012 0f08 	tst.w	r2, #8
 8006e60:	d12f      	bne.n	8006ec2 <JPEG_Process+0x9a>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8006e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e64:	f013 0f10 	tst.w	r3, #16
 8006e68:	d130      	bne.n	8006ecc <JPEG_Process+0xa4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8006e6a:	6822      	ldr	r2, [r4, #0]
 8006e6c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8006e6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e72:	2b20      	cmp	r3, #32
 8006e74:	d02f      	beq.n	8006ed6 <JPEG_Process+0xae>
  return JPEG_PROCESS_ONGOING;
 8006e76:	2000      	movs	r0, #0
}
 8006e78:	bd38      	pop	{r3, r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8006e7a:	6803      	ldr	r3, [r0, #0]
 8006e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006e82:	d0d8      	beq.n	8006e36 <JPEG_Process+0xe>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8006e84:	1d05      	adds	r5, r0, #4
 8006e86:	4629      	mov	r1, r5
 8006e88:	f7ff fde8 	bl	8006a5c <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8006e90:	4629      	mov	r1, r5
 8006e92:	4620      	mov	r0, r4
 8006e94:	f006 fc26 	bl	800d6e4 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8006e98:	6822      	ldr	r2, [r4, #0]
 8006e9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea0:	6313      	str	r3, [r2, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8006ea2:	6822      	ldr	r2, [r4, #0]
 8006ea4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eaa:	6393      	str	r3, [r2, #56]	; 0x38
 8006eac:	e7c3      	b.n	8006e36 <JPEG_Process+0xe>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8006eae:	2104      	movs	r1, #4
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f7ff febc 	bl	8006c2e <JPEG_ReadInputData>
 8006eb6:	e7cb      	b.n	8006e50 <JPEG_Process+0x28>
      JPEG_ReadInputData(hjpeg, 1);
 8006eb8:	2101      	movs	r1, #1
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f7ff feb7 	bl	8006c2e <JPEG_ReadInputData>
 8006ec0:	e7c6      	b.n	8006e50 <JPEG_Process+0x28>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8006ec2:	2104      	movs	r1, #4
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f7ff ff20 	bl	8006d0a <JPEG_StoreOutputData>
 8006eca:	e7ce      	b.n	8006e6a <JPEG_Process+0x42>
      JPEG_StoreOutputData(hjpeg, 1);
 8006ecc:	2101      	movs	r1, #1
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f7ff ff1b 	bl	8006d0a <JPEG_StoreOutputData>
 8006ed4:	e7c9      	b.n	8006e6a <JPEG_Process+0x42>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006ed6:	6813      	ldr	r3, [r2, #0]
 8006ed8:	f023 0301 	bic.w	r3, r3, #1
 8006edc:	6013      	str	r3, [r2, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8006ede:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006ee0:	f003 030c 	and.w	r3, r3, #12
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d01a      	beq.n	8006f1e <JPEG_Process+0xf6>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8006ee8:	6822      	ldr	r2, [r4, #0]
 8006eea:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006eec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006ef0:	6393      	str	r3, [r2, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8006ef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ef4:	b9cb      	cbnz	r3, 8006f2a <JPEG_Process+0x102>
    tmpContext = hjpeg->Context;
 8006ef6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8006ef8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006efa:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
 8006efe:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 8006f00:	2200      	movs	r2, #0
 8006f02:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8006f06:	2201      	movs	r2, #1
 8006f08:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006f0c:	f003 0303 	and.w	r3, r3, #3
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d012      	beq.n	8006f3a <JPEG_Process+0x112>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8006f14:	4620      	mov	r0, r4
 8006f16:	f7ff fe89 	bl	8006c2c <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
 8006f1a:	2001      	movs	r0, #1
 8006f1c:	e7ac      	b.n	8006e78 <JPEG_Process+0x50>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8006f1e:	6822      	ldr	r2, [r4, #0]
 8006f20:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006f22:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8006f26:	6313      	str	r3, [r2, #48]	; 0x30
 8006f28:	e7de      	b.n	8006ee8 <JPEG_Process+0xc0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006f2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006f2c:	69e1      	ldr	r1, [r4, #28]
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f006 fbc6 	bl	800d6c0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8006f34:	2300      	movs	r3, #0
 8006f36:	6263      	str	r3, [r4, #36]	; 0x24
 8006f38:	e7dd      	b.n	8006ef6 <JPEG_Process+0xce>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f006 fbcc 	bl	800d6d8 <HAL_JPEG_DecodeCpltCallback>
 8006f40:	e7eb      	b.n	8006f1a <JPEG_Process+0xf2>

08006f42 <JPEG_DMA_PollResidualData>:
{
 8006f42:	b538      	push	{r3, r4, r5, lr}
 8006f44:	4604      	mov	r4, r0
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8006f46:	2510      	movs	r5, #16
 8006f48:	e007      	b.n	8006f5a <JPEG_DMA_PollResidualData+0x18>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006f4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006f4c:	69e1      	ldr	r1, [r4, #28]
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f006 fbb6 	bl	800d6c0 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 8006f54:	2300      	movs	r3, #0
 8006f56:	6263      	str	r3, [r4, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8006f58:	3d01      	subs	r5, #1
 8006f5a:	b32d      	cbz	r5, 8006fa8 <JPEG_DMA_PollResidualData+0x66>
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8006f5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006f5e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006f62:	d1f9      	bne.n	8006f58 <JPEG_DMA_PollResidualData+0x16>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f68:	f012 0f10 	tst.w	r2, #16
 8006f6c:	d0f4      	beq.n	8006f58 <JPEG_DMA_PollResidualData+0x16>
        dataOut = hjpeg->Instance->DOR;
 8006f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8006f70:	69e1      	ldr	r1, [r4, #28]
 8006f72:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006f74:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8006f76:	69e1      	ldr	r1, [r4, #28]
 8006f78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006f7a:	3201      	adds	r2, #1
 8006f7c:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8006f80:	5488      	strb	r0, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8006f82:	69e1      	ldr	r1, [r4, #28]
 8006f84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006f86:	3202      	adds	r2, #2
 8006f88:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8006f8c:	5488      	strb	r0, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8006f8e:	69e1      	ldr	r1, [r4, #28]
 8006f90:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006f92:	3203      	adds	r2, #3
 8006f94:	0e1b      	lsrs	r3, r3, #24
 8006f96:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount += 4UL;
 8006f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8006f9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006fa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d1d8      	bne.n	8006f58 <JPEG_DMA_PollResidualData+0x16>
 8006fa6:	e7d0      	b.n	8006f4a <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
 8006fa8:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fae:	f012 0f10 	tst.w	r2, #16
 8006fb2:	d002      	beq.n	8006fba <JPEG_DMA_PollResidualData+0x78>
 8006fb4:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8006fb8:	d117      	bne.n	8006fea <JPEG_DMA_PollResidualData+0xa8>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	f022 0201 	bic.w	r2, r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8006fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fc4:	b993      	cbnz	r3, 8006fec <JPEG_DMA_PollResidualData+0xaa>
    tmpContext = hjpeg->Context;
 8006fc6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8006fc8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006fca:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
 8006fce:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006fdc:	f003 0303 	and.w	r3, r3, #3
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d00b      	beq.n	8006ffc <JPEG_DMA_PollResidualData+0xba>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f7ff fe21 	bl	8006c2c <HAL_JPEG_EncodeCpltCallback>
}
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006fec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006fee:	69e1      	ldr	r1, [r4, #28]
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f006 fb65 	bl	800d6c0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	6263      	str	r3, [r4, #36]	; 0x24
 8006ffa:	e7e4      	b.n	8006fc6 <JPEG_DMA_PollResidualData+0x84>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f006 fb6b 	bl	800d6d8 <HAL_JPEG_DecodeCpltCallback>
 8007002:	e7f2      	b.n	8006fea <JPEG_DMA_PollResidualData+0xa8>

08007004 <JPEG_DMA_EndProcess>:
{
 8007004:	b510      	push	{r4, lr}
 8007006:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 8007008:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800700a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6859      	ldr	r1, [r3, #4]
 8007010:	4b21      	ldr	r3, [pc, #132]	; (8007098 <JPEG_DMA_EndProcess+0x94>)
 8007012:	ea03 0381 	and.w	r3, r3, r1, lsl #2
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	6243      	str	r3, [r0, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800701a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800701c:	429a      	cmp	r2, r3
 800701e:	d01e      	beq.n	800705e <JPEG_DMA_EndProcess+0x5a>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007024:	f013 0f10 	tst.w	r3, #16
 8007028:	d12c      	bne.n	8007084 <JPEG_DMA_EndProcess+0x80>
    if (hjpeg->JpegOutCount > 0UL)
 800702a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800702c:	b9f3      	cbnz	r3, 800706c <JPEG_DMA_EndProcess+0x68>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	6813      	ldr	r3, [r2, #0]
 8007032:	f023 0301 	bic.w	r3, r3, #1
 8007036:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8007038:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800703a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800703c:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
 8007040:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 8007042:	2200      	movs	r2, #0
 8007044:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007048:	2201      	movs	r2, #1
 800704a:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800704e:	f003 0303 	and.w	r3, r3, #3
 8007052:	2b02      	cmp	r3, #2
 8007054:	d012      	beq.n	800707c <JPEG_DMA_EndProcess+0x78>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8007056:	4620      	mov	r0, r4
 8007058:	f7ff fde8 	bl	8006c2c <HAL_JPEG_EncodeCpltCallback>
 800705c:	e016      	b.n	800708c <JPEG_DMA_EndProcess+0x88>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800705e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007060:	69c1      	ldr	r1, [r0, #28]
 8007062:	f006 fb2d 	bl	800d6c0 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8007066:	2300      	movs	r3, #0
 8007068:	6263      	str	r3, [r4, #36]	; 0x24
 800706a:	e7d9      	b.n	8007020 <JPEG_DMA_EndProcess+0x1c>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800706c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800706e:	69e1      	ldr	r1, [r4, #28]
 8007070:	4620      	mov	r0, r4
 8007072:	f006 fb25 	bl	800d6c0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	6263      	str	r3, [r4, #36]	; 0x24
 800707a:	e7d8      	b.n	800702e <JPEG_DMA_EndProcess+0x2a>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800707c:	4620      	mov	r0, r4
 800707e:	f006 fb2b 	bl	800d6d8 <HAL_JPEG_DecodeCpltCallback>
 8007082:	e003      	b.n	800708c <JPEG_DMA_EndProcess+0x88>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8007084:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007086:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800708a:	d000      	beq.n	800708e <JPEG_DMA_EndProcess+0x8a>
}
 800708c:	bd10      	pop	{r4, pc}
    JPEG_DMA_PollResidualData(hjpeg);
 800708e:	4620      	mov	r0, r4
 8007090:	f7ff ff57 	bl	8006f42 <JPEG_DMA_PollResidualData>
}
 8007094:	e7fa      	b.n	800708c <JPEG_DMA_EndProcess+0x88>
 8007096:	bf00      	nop
 8007098:	0003fffc 	.word	0x0003fffc

0800709c <JPEG_DMA_ContinueProcess>:
{
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80070a0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d02b      	beq.n	8007102 <JPEG_DMA_ContinueProcess+0x66>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070ae:	f012 0f20 	tst.w	r2, #32
 80070b2:	d025      	beq.n	8007100 <JPEG_DMA_ContinueProcess+0x64>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 80070b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070b6:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80070ba:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80070bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80070be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c2:	6563      	str	r3, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80070c4:	6822      	ldr	r2, [r4, #0]
 80070c6:	6813      	ldr	r3, [r2, #0]
 80070c8:	f023 0301 	bic.w	r3, r3, #1
 80070cc:	6013      	str	r3, [r2, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80070ce:	6822      	ldr	r2, [r4, #0]
 80070d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070d2:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 80070d6:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80070d8:	6822      	ldr	r2, [r4, #0]
 80070da:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80070dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80070e0:	6393      	str	r3, [r2, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 80070e2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80070e4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d023      	beq.n	8007136 <JPEG_DMA_ContinueProcess+0x9a>
    if (hjpeg->hdmaout->State == HAL_DMA_STATE_BUSY)
 80070ee:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80070f0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d020      	beq.n	800713c <JPEG_DMA_ContinueProcess+0xa0>
      JPEG_DMA_EndProcess(hjpeg);
 80070fa:	4620      	mov	r0, r4
 80070fc:	f7ff ff82 	bl	8007004 <JPEG_DMA_EndProcess>
}
 8007100:	bd38      	pop	{r3, r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8007102:	6803      	ldr	r3, [r0, #0]
 8007104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007106:	f013 0f40 	tst.w	r3, #64	; 0x40
 800710a:	d0ce      	beq.n	80070aa <JPEG_DMA_ContinueProcess+0xe>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800710c:	1d05      	adds	r5, r0, #4
 800710e:	4629      	mov	r1, r5
 8007110:	f7ff fca4 	bl	8006a5c <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8007118:	4629      	mov	r1, r5
 800711a:	4620      	mov	r0, r4
 800711c:	f006 fae2 	bl	800d6e4 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8007120:	6822      	ldr	r2, [r4, #0]
 8007122:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007128:	6313      	str	r3, [r2, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800712a:	6822      	ldr	r2, [r4, #0]
 800712c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800712e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007132:	6393      	str	r3, [r2, #56]	; 0x38
 8007134:	e7b9      	b.n	80070aa <JPEG_DMA_ContinueProcess+0xe>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmain);
 8007136:	f7fe fc06 	bl	8005946 <HAL_DMA_Abort_IT>
 800713a:	e7d8      	b.n	80070ee <JPEG_DMA_ContinueProcess+0x52>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmaout);
 800713c:	f7fe fc03 	bl	8005946 <HAL_DMA_Abort_IT>
 8007140:	e7de      	b.n	8007100 <JPEG_DMA_ContinueProcess+0x64>

08007142 <HAL_JPEG_IRQHandler>:
{
 8007142:	b508      	push	{r3, lr}
  switch (hjpeg->State)
 8007144:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 8007148:	3b03      	subs	r3, #3
 800714a:	2b01      	cmp	r3, #1
 800714c:	d900      	bls.n	8007150 <HAL_JPEG_IRQHandler+0xe>
}
 800714e:	bd08      	pop	{r3, pc}
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8007150:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007152:	f003 030c 	and.w	r3, r3, #12
 8007156:	2b08      	cmp	r3, #8
 8007158:	d007      	beq.n	800716a <HAL_JPEG_IRQHandler+0x28>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800715a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800715c:	f003 030c 	and.w	r3, r3, #12
 8007160:	2b0c      	cmp	r3, #12
 8007162:	d1f4      	bne.n	800714e <HAL_JPEG_IRQHandler+0xc>
        JPEG_DMA_ContinueProcess(hjpeg);
 8007164:	f7ff ff9a 	bl	800709c <JPEG_DMA_ContinueProcess>
}
 8007168:	e7f1      	b.n	800714e <HAL_JPEG_IRQHandler+0xc>
        (void) JPEG_Process(hjpeg);
 800716a:	f7ff fe5d 	bl	8006e28 <JPEG_Process>
 800716e:	e7ee      	b.n	800714e <HAL_JPEG_IRQHandler+0xc>

08007170 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007174:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007176:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800717a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800717e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007182:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007186:	429a      	cmp	r2, r3
 8007188:	d855      	bhi.n	8007236 <PCD_WriteEmptyTxFifo+0xc6>
 800718a:	4607      	mov	r7, r0
 800718c:	460c      	mov	r4, r1
 800718e:	46c1      	mov	r9, r8
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8007190:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8007192:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8007196:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800719a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800719c:	429a      	cmp	r2, r3
 800719e:	d300      	bcc.n	80071a2 <PCD_WriteEmptyTxFifo+0x32>
  len = ep->xfer_len - ep->xfer_count;
 80071a0:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 80071a2:	f102 0a03 	add.w	sl, r2, #3
 80071a6:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071aa:	e015      	b.n	80071d8 <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 80071ac:	f106 0a03 	add.w	sl, r6, #3
 80071b0:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80071b4:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80071b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80071bc:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80071be:	7c3b      	ldrb	r3, [r7, #16]
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	b2b3      	uxth	r3, r6
 80071c4:	b2e2      	uxtb	r2, r4
 80071c6:	4640      	mov	r0, r8
 80071c8:	f003 f9dc 	bl	800a584 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 80071cc:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80071ce:	4433      	add	r3, r6
 80071d0:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 80071d2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80071d4:	441e      	add	r6, r3
 80071d6:	656e      	str	r6, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071d8:	eb09 1344 	add.w	r3, r9, r4, lsl #5
 80071dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	4553      	cmp	r3, sl
 80071e6:	d312      	bcc.n	800720e <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80071e8:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 80071ec:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80071f0:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80071f2:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071f4:	4299      	cmp	r1, r3
 80071f6:	d20a      	bcs.n	800720e <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80071f8:	b14b      	cbz	r3, 800720e <PCD_WriteEmptyTxFifo+0x9e>
    len = ep->xfer_len - ep->xfer_count;
 80071fa:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 80071fc:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8007200:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8007204:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8007206:	429e      	cmp	r6, r3
 8007208:	d3d0      	bcc.n	80071ac <PCD_WriteEmptyTxFifo+0x3c>
    len = ep->xfer_len - ep->xfer_count;
 800720a:	461e      	mov	r6, r3
 800720c:	e7ce      	b.n	80071ac <PCD_WriteEmptyTxFifo+0x3c>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800720e:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 8007212:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8007216:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800721a:	429a      	cmp	r2, r3
 800721c:	d80f      	bhi.n	800723e <PCD_WriteEmptyTxFifo+0xce>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800721e:	f004 040f 	and.w	r4, r4, #15
 8007222:	2301      	movs	r3, #1
 8007224:	40a3      	lsls	r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007226:	f8d8 4834 	ldr.w	r4, [r8, #2100]	; 0x834
 800722a:	ea24 0403 	bic.w	r4, r4, r3
 800722e:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 8007232:	2000      	movs	r0, #0
 8007234:	e000      	b.n	8007238 <PCD_WriteEmptyTxFifo+0xc8>
    return HAL_ERROR;
 8007236:	2001      	movs	r0, #1
}
 8007238:	b002      	add	sp, #8
 800723a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 800723e:	2000      	movs	r0, #0
 8007240:	e7fa      	b.n	8007238 <PCD_WriteEmptyTxFifo+0xc8>

08007242 <HAL_PCD_Init>:
{
 8007242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007244:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8007246:	2800      	cmp	r0, #0
 8007248:	f000 8093 	beq.w	8007372 <HAL_PCD_Init+0x130>
 800724c:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 800724e:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007250:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8007254:	b32b      	cbz	r3, 80072a2 <HAL_PCD_Init+0x60>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8007256:	2303      	movs	r3, #3
 8007258:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800725c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800725e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007262:	d101      	bne.n	8007268 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	612b      	str	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8007268:	6828      	ldr	r0, [r5, #0]
 800726a:	f002 ff17 	bl	800a09c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800726e:	462c      	mov	r4, r5
 8007270:	f854 7b10 	ldr.w	r7, [r4], #16
 8007274:	466e      	mov	r6, sp
 8007276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007278:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800727a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800727c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800727e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007282:	e886 0003 	stmia.w	r6, {r0, r1}
 8007286:	1d2b      	adds	r3, r5, #4
 8007288:	cb0e      	ldmia	r3, {r1, r2, r3}
 800728a:	4638      	mov	r0, r7
 800728c:	f002 fe50 	bl	8009f30 <USB_CoreInit>
 8007290:	4604      	mov	r4, r0
 8007292:	b158      	cbz	r0, 80072ac <HAL_PCD_Init+0x6a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007294:	2302      	movs	r3, #2
 8007296:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 800729a:	2401      	movs	r4, #1
}
 800729c:	4620      	mov	r0, r4
 800729e:	b00b      	add	sp, #44	; 0x2c
 80072a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80072a2:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 80072a6:	f006 fe03 	bl	800deb0 <HAL_PCD_MspInit>
 80072aa:	e7d4      	b.n	8007256 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80072ac:	2100      	movs	r1, #0
 80072ae:	6828      	ldr	r0, [r5, #0]
 80072b0:	f002 fefa 	bl	800a0a8 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072b4:	4623      	mov	r3, r4
 80072b6:	e016      	b.n	80072e6 <HAL_PCD_Init+0xa4>
    hpcd->IN_ep[i].is_in = 1U;
 80072b8:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80072bc:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80072c0:	2101      	movs	r1, #1
 80072c2:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 80072c6:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80072ca:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80072ce:	2100      	movs	r1, #0
 80072d0:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80072d4:	6451      	str	r1, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80072d6:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80072d8:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80072dc:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80072e0:	6511      	str	r1, [r2, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072e2:	3301      	adds	r3, #1
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	6869      	ldr	r1, [r5, #4]
 80072e8:	428b      	cmp	r3, r1
 80072ea:	d3e5      	bcc.n	80072b8 <HAL_PCD_Init+0x76>
 80072ec:	e016      	b.n	800731c <HAL_PCD_Init+0xda>
    hpcd->OUT_ep[i].is_in = 0U;
 80072ee:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80072f2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80072fc:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007300:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007304:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007308:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 800730c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8007310:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007314:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007318:	3401      	adds	r4, #1
 800731a:	b2e4      	uxtb	r4, r4
 800731c:	42a1      	cmp	r1, r4
 800731e:	d8e6      	bhi.n	80072ee <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007320:	462c      	mov	r4, r5
 8007322:	f854 7b10 	ldr.w	r7, [r4], #16
 8007326:	466e      	mov	r6, sp
 8007328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800732a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800732c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800732e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007330:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007334:	e886 0003 	stmia.w	r6, {r0, r1}
 8007338:	1d2b      	adds	r3, r5, #4
 800733a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800733c:	4638      	mov	r0, r7
 800733e:	f002 fef9 	bl	800a134 <USB_DevInit>
 8007342:	4604      	mov	r4, r0
 8007344:	b960      	cbnz	r0, 8007360 <HAL_PCD_Init+0x11e>
  hpcd->USB_Address = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800734c:	2301      	movs	r3, #1
 800734e:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8007352:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007354:	2b01      	cmp	r3, #1
 8007356:	d008      	beq.n	800736a <HAL_PCD_Init+0x128>
  (void)USB_DevDisconnect(hpcd->Instance);
 8007358:	6828      	ldr	r0, [r5, #0]
 800735a:	f003 fab9 	bl	800a8d0 <USB_DevDisconnect>
  return HAL_OK;
 800735e:	e79d      	b.n	800729c <HAL_PCD_Init+0x5a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007360:	2302      	movs	r3, #2
 8007362:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8007366:	2401      	movs	r4, #1
 8007368:	e798      	b.n	800729c <HAL_PCD_Init+0x5a>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800736a:	4628      	mov	r0, r5
 800736c:	f000 fce8 	bl	8007d40 <HAL_PCDEx_ActivateLPM>
 8007370:	e7f2      	b.n	8007358 <HAL_PCD_Init+0x116>
    return HAL_ERROR;
 8007372:	2401      	movs	r4, #1
 8007374:	e792      	b.n	800729c <HAL_PCD_Init+0x5a>

08007376 <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 8007376:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800737a:	2b01      	cmp	r3, #1
 800737c:	d00e      	beq.n	800739c <HAL_PCD_Start+0x26>
{
 800737e:	b510      	push	{r4, lr}
 8007380:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8007382:	2301      	movs	r3, #1
 8007384:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8007388:	6800      	ldr	r0, [r0, #0]
 800738a:	f003 fa95 	bl	800a8b8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800738e:	6820      	ldr	r0, [r4, #0]
 8007390:	f002 fe7e 	bl	800a090 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8007394:	2000      	movs	r0, #0
 8007396:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800739a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800739c:	2002      	movs	r0, #2
}
 800739e:	4770      	bx	lr

080073a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80073a0:	b570      	push	{r4, r5, r6, lr}
 80073a2:	4604      	mov	r4, r0
 80073a4:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073a6:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80073a8:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80073aa:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80073ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b2:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 80073b4:	6921      	ldr	r1, [r4, #16]
 80073b6:	2901      	cmp	r1, #1
 80073b8:	d011      	beq.n	80073de <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80073ba:	4935      	ldr	r1, [pc, #212]	; (8007490 <PCD_EP_OutXfrComplete_int+0xf0>)
 80073bc:	428e      	cmp	r6, r1
 80073be:	d050      	beq.n	8007462 <PCD_EP_OutXfrComplete_int+0xc2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80073c0:	b93d      	cbnz	r5, 80073d2 <PCD_EP_OutXfrComplete_int+0x32>
 80073c2:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80073c6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80073ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d058      	beq.n	8007484 <PCD_EP_OutXfrComplete_int+0xe4>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80073d2:	b2e9      	uxtb	r1, r5
 80073d4:	4620      	mov	r0, r4
 80073d6:	f006 fe67 	bl	800e0a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 80073da:	2000      	movs	r0, #0
 80073dc:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80073de:	f012 0f08 	tst.w	r2, #8
 80073e2:	d009      	beq.n	80073f8 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073e4:	492b      	ldr	r1, [pc, #172]	; (8007494 <PCD_EP_OutXfrComplete_int+0xf4>)
 80073e6:	428e      	cmp	r6, r1
 80073e8:	d9f7      	bls.n	80073da <PCD_EP_OutXfrComplete_int+0x3a>
 80073ea:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80073ee:	d0f4      	beq.n	80073da <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80073f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80073f4:	609a      	str	r2, [r3, #8]
 80073f6:	e7f0      	b.n	80073da <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80073f8:	f012 0f20 	tst.w	r2, #32
 80073fc:	d002      	beq.n	8007404 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80073fe:	2220      	movs	r2, #32
 8007400:	609a      	str	r2, [r3, #8]
 8007402:	e7ea      	b.n	80073da <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007404:	f012 0f28 	tst.w	r2, #40	; 0x28
 8007408:	d1e7      	bne.n	80073da <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800740a:	4922      	ldr	r1, [pc, #136]	; (8007494 <PCD_EP_OutXfrComplete_int+0xf4>)
 800740c:	428e      	cmp	r6, r1
 800740e:	d906      	bls.n	800741e <PCD_EP_OutXfrComplete_int+0x7e>
 8007410:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8007414:	d003      	beq.n	800741e <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007416:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800741a:	609a      	str	r2, [r3, #8]
 800741c:	e7dd      	b.n	80073da <PCD_EP_OutXfrComplete_int+0x3a>
          hpcd->OUT_ep[epnum].maxpacket -
 800741e:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8007422:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007426:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007430:	1ac9      	subs	r1, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007432:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007436:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 800743a:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800743e:	440b      	add	r3, r1
 8007440:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007444:	b915      	cbnz	r5, 800744c <PCD_EP_OutXfrComplete_int+0xac>
 8007446:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800744a:	b123      	cbz	r3, 8007456 <PCD_EP_OutXfrComplete_int+0xb6>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800744c:	b2e9      	uxtb	r1, r5
 800744e:	4620      	mov	r0, r4
 8007450:	f006 fe2a 	bl	800e0a8 <HAL_PCD_DataOutStageCallback>
 8007454:	e7c1      	b.n	80073da <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007456:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800745a:	2101      	movs	r1, #1
 800745c:	f003 fa8a 	bl	800a974 <USB_EP0_OutStart>
 8007460:	e7f4      	b.n	800744c <PCD_EP_OutXfrComplete_int+0xac>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007462:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8007466:	d003      	beq.n	8007470 <PCD_EP_OutXfrComplete_int+0xd0>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007468:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800746c:	609a      	str	r2, [r3, #8]
 800746e:	e7b4      	b.n	80073da <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007470:	f012 0f20 	tst.w	r2, #32
 8007474:	d001      	beq.n	800747a <PCD_EP_OutXfrComplete_int+0xda>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007476:	2220      	movs	r2, #32
 8007478:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800747a:	b2e9      	uxtb	r1, r5
 800747c:	4620      	mov	r0, r4
 800747e:	f006 fe13 	bl	800e0a8 <HAL_PCD_DataOutStageCallback>
 8007482:	e7aa      	b.n	80073da <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007484:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007488:	2100      	movs	r1, #0
 800748a:	f003 fa73 	bl	800a974 <USB_EP0_OutStart>
 800748e:	e7a0      	b.n	80073d2 <PCD_EP_OutXfrComplete_int+0x32>
 8007490:	4f54310a 	.word	0x4f54310a
 8007494:	4f54300a 	.word	0x4f54300a

08007498 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007498:	b538      	push	{r3, r4, r5, lr}
 800749a:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800749c:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800749e:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80074a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80074a4:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074a8:	4a0e      	ldr	r2, [pc, #56]	; (80074e4 <PCD_EP_OutSetupPacket_int+0x4c>)
 80074aa:	4295      	cmp	r5, r2
 80074ac:	d907      	bls.n	80074be <PCD_EP_OutSetupPacket_int+0x26>
 80074ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b2:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80074b6:	d002      	beq.n	80074be <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80074b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80074bc:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80074be:	4620      	mov	r0, r4
 80074c0:	f006 fdea 	bl	800e098 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80074c4:	4b07      	ldr	r3, [pc, #28]	; (80074e4 <PCD_EP_OutSetupPacket_int+0x4c>)
 80074c6:	429d      	cmp	r5, r3
 80074c8:	d902      	bls.n	80074d0 <PCD_EP_OutSetupPacket_int+0x38>
 80074ca:	6923      	ldr	r3, [r4, #16]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d001      	beq.n	80074d4 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 80074d0:	2000      	movs	r0, #0
 80074d2:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80074d4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80074d8:	2101      	movs	r1, #1
 80074da:	6820      	ldr	r0, [r4, #0]
 80074dc:	f003 fa4a 	bl	800a974 <USB_EP0_OutStart>
 80074e0:	e7f6      	b.n	80074d0 <PCD_EP_OutSetupPacket_int+0x38>
 80074e2:	bf00      	nop
 80074e4:	4f54300a 	.word	0x4f54300a

080074e8 <HAL_PCD_IRQHandler>:
{
 80074e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ec:	b083      	sub	sp, #12
 80074ee:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074f0:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80074f2:	4628      	mov	r0, r5
 80074f4:	f003 fa29 	bl	800a94a <USB_GetMode>
 80074f8:	b110      	cbz	r0, 8007500 <HAL_PCD_IRQHandler+0x18>
}
 80074fa:	b003      	add	sp, #12
 80074fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007500:	462f      	mov	r7, r5
 8007502:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007504:	6820      	ldr	r0, [r4, #0]
 8007506:	f003 f9ef 	bl	800a8e8 <USB_ReadInterrupts>
 800750a:	2800      	cmp	r0, #0
 800750c:	d0f5      	beq.n	80074fa <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800750e:	6820      	ldr	r0, [r4, #0]
 8007510:	f003 f9ea 	bl	800a8e8 <USB_ReadInterrupts>
 8007514:	f010 0f02 	tst.w	r0, #2
 8007518:	d004      	beq.n	8007524 <HAL_PCD_IRQHandler+0x3c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800751a:	6822      	ldr	r2, [r4, #0]
 800751c:	6953      	ldr	r3, [r2, #20]
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007524:	6820      	ldr	r0, [r4, #0]
 8007526:	f003 f9df 	bl	800a8e8 <USB_ReadInterrupts>
 800752a:	f010 0f10 	tst.w	r0, #16
 800752e:	d015      	beq.n	800755c <HAL_PCD_IRQHandler+0x74>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007530:	6822      	ldr	r2, [r4, #0]
 8007532:	6993      	ldr	r3, [r2, #24]
 8007534:	f023 0310 	bic.w	r3, r3, #16
 8007538:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 800753a:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800753e:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007542:	f3c8 4343 	ubfx	r3, r8, #17, #4
 8007546:	2b02      	cmp	r3, #2
 8007548:	f000 8085 	beq.w	8007656 <HAL_PCD_IRQHandler+0x16e>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800754c:	2b06      	cmp	r3, #6
 800754e:	f000 80aa 	beq.w	80076a6 <HAL_PCD_IRQHandler+0x1be>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007552:	6822      	ldr	r2, [r4, #0]
 8007554:	6993      	ldr	r3, [r2, #24]
 8007556:	f043 0310 	orr.w	r3, r3, #16
 800755a:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800755c:	6820      	ldr	r0, [r4, #0]
 800755e:	f003 f9c3 	bl	800a8e8 <USB_ReadInterrupts>
 8007562:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8007566:	f040 80b0 	bne.w	80076ca <HAL_PCD_IRQHandler+0x1e2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800756a:	6820      	ldr	r0, [r4, #0]
 800756c:	f003 f9bc 	bl	800a8e8 <USB_ReadInterrupts>
 8007570:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8007574:	f040 80f4 	bne.w	8007760 <HAL_PCD_IRQHandler+0x278>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007578:	6820      	ldr	r0, [r4, #0]
 800757a:	f003 f9b5 	bl	800a8e8 <USB_ReadInterrupts>
 800757e:	2800      	cmp	r0, #0
 8007580:	f2c0 8160 	blt.w	8007844 <HAL_PCD_IRQHandler+0x35c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007584:	6820      	ldr	r0, [r4, #0]
 8007586:	f003 f9af 	bl	800a8e8 <USB_ReadInterrupts>
 800758a:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800758e:	d00a      	beq.n	80075a6 <HAL_PCD_IRQHandler+0xbe>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007590:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8007594:	f013 0f01 	tst.w	r3, #1
 8007598:	f040 816e 	bne.w	8007878 <HAL_PCD_IRQHandler+0x390>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800759c:	6822      	ldr	r2, [r4, #0]
 800759e:	6953      	ldr	r3, [r2, #20]
 80075a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075a4:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80075a6:	6820      	ldr	r0, [r4, #0]
 80075a8:	f003 f99e 	bl	800a8e8 <USB_ReadInterrupts>
 80075ac:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 80075b0:	d015      	beq.n	80075de <HAL_PCD_IRQHandler+0xf6>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80075b2:	6822      	ldr	r2, [r4, #0]
 80075b4:	6953      	ldr	r3, [r2, #20]
 80075b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075ba:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 80075bc:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f040 815d 	bne.w	8007880 <HAL_PCD_IRQHandler+0x398>
        hpcd->LPM_State = LPM_L1;
 80075c6:	2101      	movs	r1, #1
 80075c8:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d0:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80075d4:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80075d8:	4620      	mov	r0, r4
 80075da:	f000 fbc5 	bl	8007d68 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80075de:	6820      	ldr	r0, [r4, #0]
 80075e0:	f003 f982 	bl	800a8e8 <USB_ReadInterrupts>
 80075e4:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80075e8:	f040 814e 	bne.w	8007888 <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80075ec:	6820      	ldr	r0, [r4, #0]
 80075ee:	f003 f97b 	bl	800a8e8 <USB_ReadInterrupts>
 80075f2:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80075f6:	f040 81ac 	bne.w	8007952 <HAL_PCD_IRQHandler+0x46a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80075fa:	6820      	ldr	r0, [r4, #0]
 80075fc:	f003 f974 	bl	800a8e8 <USB_ReadInterrupts>
 8007600:	f010 0f08 	tst.w	r0, #8
 8007604:	f040 81bd 	bne.w	8007982 <HAL_PCD_IRQHandler+0x49a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007608:	6820      	ldr	r0, [r4, #0]
 800760a:	f003 f96d 	bl	800a8e8 <USB_ReadInterrupts>
 800760e:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8007612:	f040 81bf 	bne.w	8007994 <HAL_PCD_IRQHandler+0x4ac>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007616:	6820      	ldr	r0, [r4, #0]
 8007618:	f003 f966 	bl	800a8e8 <USB_ReadInterrupts>
 800761c:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8007620:	f040 81c2 	bne.w	80079a8 <HAL_PCD_IRQHandler+0x4c0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007624:	6820      	ldr	r0, [r4, #0]
 8007626:	f003 f95f 	bl	800a8e8 <USB_ReadInterrupts>
 800762a:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800762e:	f040 81c5 	bne.w	80079bc <HAL_PCD_IRQHandler+0x4d4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007632:	6820      	ldr	r0, [r4, #0]
 8007634:	f003 f958 	bl	800a8e8 <USB_ReadInterrupts>
 8007638:	f010 0f04 	tst.w	r0, #4
 800763c:	f43f af5d 	beq.w	80074fa <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8007640:	6823      	ldr	r3, [r4, #0]
 8007642:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007644:	f015 0f04 	tst.w	r5, #4
 8007648:	f040 81c1 	bne.w	80079ce <HAL_PCD_IRQHandler+0x4e6>
      hpcd->Instance->GOTGINT |= temp;
 800764c:	6822      	ldr	r2, [r4, #0]
 800764e:	6853      	ldr	r3, [r2, #4]
 8007650:	432b      	orrs	r3, r5
 8007652:	6053      	str	r3, [r2, #4]
 8007654:	e751      	b.n	80074fa <HAL_PCD_IRQHandler+0x12>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007656:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800765a:	ea18 0f03 	tst.w	r8, r3
 800765e:	f43f af78 	beq.w	8007552 <HAL_PCD_IRQHandler+0x6a>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007662:	ea4f 1b18 	mov.w	fp, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
 8007670:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8007674:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8007678:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 800767c:	4628      	mov	r0, r5
 800767e:	f003 f89f 	bl	800a7c0 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007682:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 8007686:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 800768a:	445b      	add	r3, fp
 800768c:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007690:	9b01      	ldr	r3, [sp, #4]
 8007692:	eba3 0309 	sub.w	r3, r3, r9
 8007696:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800769a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800769e:	445b      	add	r3, fp
 80076a0:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 80076a4:	e755      	b.n	8007552 <HAL_PCD_IRQHandler+0x6a>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80076a6:	2208      	movs	r2, #8
 80076a8:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80076ac:	4628      	mov	r0, r5
 80076ae:	f003 f887 	bl	800a7c0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80076b2:	f3c8 180a 	ubfx	r8, r8, #4, #11
 80076b6:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 80076ba:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80076be:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80076c2:	4443      	add	r3, r8
 80076c4:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80076c8:	e743      	b.n	8007552 <HAL_PCD_IRQHandler+0x6a>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80076ca:	6820      	ldr	r0, [r4, #0]
 80076cc:	f003 f910 	bl	800a8f0 <USB_ReadDevAllOutEpInterrupt>
 80076d0:	4680      	mov	r8, r0
      epnum = 0U;
 80076d2:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80076d4:	e017      	b.n	8007706 <HAL_PCD_IRQHandler+0x21e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80076d6:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80076da:	2201      	movs	r2, #1
 80076dc:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80076e0:	4649      	mov	r1, r9
 80076e2:	4620      	mov	r0, r4
 80076e4:	f7ff fe5c 	bl	80073a0 <PCD_EP_OutXfrComplete_int>
 80076e8:	e01d      	b.n	8007726 <HAL_PCD_IRQHandler+0x23e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80076ea:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80076ee:	2208      	movs	r2, #8
 80076f0:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80076f4:	4649      	mov	r1, r9
 80076f6:	4620      	mov	r0, r4
 80076f8:	f7ff fece 	bl	8007498 <PCD_EP_OutSetupPacket_int>
 80076fc:	e016      	b.n	800772c <HAL_PCD_IRQHandler+0x244>
        epnum++;
 80076fe:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8007702:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8007706:	f1b8 0f00 	cmp.w	r8, #0
 800770a:	f43f af2e 	beq.w	800756a <HAL_PCD_IRQHandler+0x82>
        if ((ep_intr & 0x1U) != 0U)
 800770e:	f018 0f01 	tst.w	r8, #1
 8007712:	d0f4      	beq.n	80076fe <HAL_PCD_IRQHandler+0x216>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007714:	fa5f f189 	uxtb.w	r1, r9
 8007718:	6820      	ldr	r0, [r4, #0]
 800771a:	f003 f8f9 	bl	800a910 <USB_ReadDevOutEPInterrupt>
 800771e:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007720:	f010 0f01 	tst.w	r0, #1
 8007724:	d1d7      	bne.n	80076d6 <HAL_PCD_IRQHandler+0x1ee>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007726:	f01a 0f08 	tst.w	sl, #8
 800772a:	d1de      	bne.n	80076ea <HAL_PCD_IRQHandler+0x202>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800772c:	f01a 0f10 	tst.w	sl, #16
 8007730:	d004      	beq.n	800773c <HAL_PCD_IRQHandler+0x254>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007732:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8007736:	2210      	movs	r2, #16
 8007738:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800773c:	f01a 0f20 	tst.w	sl, #32
 8007740:	d004      	beq.n	800774c <HAL_PCD_IRQHandler+0x264>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007742:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8007746:	2220      	movs	r2, #32
 8007748:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800774c:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8007750:	d0d5      	beq.n	80076fe <HAL_PCD_IRQHandler+0x216>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007752:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8007756:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800775a:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 800775e:	e7ce      	b.n	80076fe <HAL_PCD_IRQHandler+0x216>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007760:	6820      	ldr	r0, [r4, #0]
 8007762:	f003 f8cd 	bl	800a900 <USB_ReadDevAllInEpInterrupt>
 8007766:	4680      	mov	r8, r0
      epnum = 0U;
 8007768:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 800776a:	e02a      	b.n	80077c2 <HAL_PCD_IRQHandler+0x2da>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800776c:	4659      	mov	r1, fp
 800776e:	4620      	mov	r0, r4
 8007770:	f006 fca6 	bl	800e0c0 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007774:	f01a 0f08 	tst.w	sl, #8
 8007778:	d004      	beq.n	8007784 <HAL_PCD_IRQHandler+0x29c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800777a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800777e:	2208      	movs	r2, #8
 8007780:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007784:	f01a 0f10 	tst.w	sl, #16
 8007788:	d004      	beq.n	8007794 <HAL_PCD_IRQHandler+0x2ac>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800778a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800778e:	2210      	movs	r2, #16
 8007790:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007794:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007798:	d004      	beq.n	80077a4 <HAL_PCD_IRQHandler+0x2bc>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800779a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800779e:	2240      	movs	r2, #64	; 0x40
 80077a0:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80077a4:	f01a 0f02 	tst.w	sl, #2
 80077a8:	d004      	beq.n	80077b4 <HAL_PCD_IRQHandler+0x2cc>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80077aa:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80077ae:	2202      	movs	r2, #2
 80077b0:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80077b4:	f01a 0f80 	tst.w	sl, #128	; 0x80
 80077b8:	d13f      	bne.n	800783a <HAL_PCD_IRQHandler+0x352>
        epnum++;
 80077ba:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 80077be:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 80077c2:	f1b8 0f00 	cmp.w	r8, #0
 80077c6:	f43f aed7 	beq.w	8007578 <HAL_PCD_IRQHandler+0x90>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80077ca:	f018 0f01 	tst.w	r8, #1
 80077ce:	d0f4      	beq.n	80077ba <HAL_PCD_IRQHandler+0x2d2>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80077d0:	fa5f fb89 	uxtb.w	fp, r9
 80077d4:	4659      	mov	r1, fp
 80077d6:	6820      	ldr	r0, [r4, #0]
 80077d8:	f003 f8a3 	bl	800a922 <USB_ReadDevInEPInterrupt>
 80077dc:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80077de:	f010 0f01 	tst.w	r0, #1
 80077e2:	d0c7      	beq.n	8007774 <HAL_PCD_IRQHandler+0x28c>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80077e4:	f009 030f 	and.w	r3, r9, #15
 80077e8:	2101      	movs	r1, #1
 80077ea:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80077ee:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 80077f2:	ea23 0302 	bic.w	r3, r3, r2
 80077f6:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80077fa:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80077fe:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 8007802:	6923      	ldr	r3, [r4, #16]
 8007804:	428b      	cmp	r3, r1
 8007806:	d1b1      	bne.n	800776c <HAL_PCD_IRQHandler+0x284>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007808:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 800780c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007810:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007812:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007814:	440a      	add	r2, r1
 8007816:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007818:	f1b9 0f00 	cmp.w	r9, #0
 800781c:	d1a6      	bne.n	800776c <HAL_PCD_IRQHandler+0x284>
 800781e:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8007822:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007828:	2b00      	cmp	r3, #0
 800782a:	d19f      	bne.n	800776c <HAL_PCD_IRQHandler+0x284>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800782c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007830:	2101      	movs	r1, #1
 8007832:	6820      	ldr	r0, [r4, #0]
 8007834:	f003 f89e 	bl	800a974 <USB_EP0_OutStart>
 8007838:	e798      	b.n	800776c <HAL_PCD_IRQHandler+0x284>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800783a:	4649      	mov	r1, r9
 800783c:	4620      	mov	r0, r4
 800783e:	f7ff fc97 	bl	8007170 <PCD_WriteEmptyTxFifo>
 8007842:	e7ba      	b.n	80077ba <HAL_PCD_IRQHandler+0x2d2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007844:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8007848:	f023 0301 	bic.w	r3, r3, #1
 800784c:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8007850:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8007854:	2b01      	cmp	r3, #1
 8007856:	d008      	beq.n	800786a <HAL_PCD_IRQHandler+0x382>
        HAL_PCD_ResumeCallback(hpcd);
 8007858:	4620      	mov	r0, r4
 800785a:	f006 fc59 	bl	800e110 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800785e:	6822      	ldr	r2, [r4, #0]
 8007860:	6953      	ldr	r3, [r2, #20]
 8007862:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007866:	6153      	str	r3, [r2, #20]
 8007868:	e68c      	b.n	8007584 <HAL_PCD_IRQHandler+0x9c>
        hpcd->LPM_State = LPM_L0;
 800786a:	2100      	movs	r1, #0
 800786c:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007870:	4620      	mov	r0, r4
 8007872:	f000 fa79 	bl	8007d68 <HAL_PCDEx_LPM_Callback>
 8007876:	e7f2      	b.n	800785e <HAL_PCD_IRQHandler+0x376>
        HAL_PCD_SuspendCallback(hpcd);
 8007878:	4620      	mov	r0, r4
 800787a:	f006 fc43 	bl	800e104 <HAL_PCD_SuspendCallback>
 800787e:	e68d      	b.n	800759c <HAL_PCD_IRQHandler+0xb4>
        HAL_PCD_SuspendCallback(hpcd);
 8007880:	4620      	mov	r0, r4
 8007882:	f006 fc3f 	bl	800e104 <HAL_PCD_SuspendCallback>
 8007886:	e6aa      	b.n	80075de <HAL_PCD_IRQHandler+0xf6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007888:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 800788c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007890:	f023 0301 	bic.w	r3, r3, #1
 8007894:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007898:	2110      	movs	r1, #16
 800789a:	6820      	ldr	r0, [r4, #0]
 800789c:	f002 fc1c 	bl	800a0d8 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078a0:	e020      	b.n	80078e4 <HAL_PCD_IRQHandler+0x3fc>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80078a2:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 80078a6:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 80078aa:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80078ae:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80078b2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80078b6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80078ba:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80078be:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80078c2:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80078c6:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80078ca:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80078ce:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80078d2:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078d6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80078da:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80078de:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078e2:	3601      	adds	r6, #1
 80078e4:	6863      	ldr	r3, [r4, #4]
 80078e6:	42b3      	cmp	r3, r6
 80078e8:	d8db      	bhi.n	80078a2 <HAL_PCD_IRQHandler+0x3ba>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80078ea:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80078ee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80078f2:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80078f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80078f8:	b1eb      	cbz	r3, 8007936 <HAL_PCD_IRQHandler+0x44e>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80078fa:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 80078fe:	f043 030b 	orr.w	r3, r3, #11
 8007902:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007906:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800790a:	f043 030b 	orr.w	r3, r3, #11
 800790e:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007912:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8007916:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800791a:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800791e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007922:	7c21      	ldrb	r1, [r4, #16]
 8007924:	6820      	ldr	r0, [r4, #0]
 8007926:	f003 f825 	bl	800a974 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800792a:	6822      	ldr	r2, [r4, #0]
 800792c:	6953      	ldr	r3, [r2, #20]
 800792e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007932:	6153      	str	r3, [r2, #20]
 8007934:	e65a      	b.n	80075ec <HAL_PCD_IRQHandler+0x104>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007936:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800793a:	f242 032b 	movw	r3, #8235	; 0x202b
 800793e:	4313      	orrs	r3, r2
 8007940:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007944:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007948:	f043 030b 	orr.w	r3, r3, #11
 800794c:	f8c8 3010 	str.w	r3, [r8, #16]
 8007950:	e7df      	b.n	8007912 <HAL_PCD_IRQHandler+0x42a>
      (void)USB_ActivateSetup(hpcd->Instance);
 8007952:	6820      	ldr	r0, [r4, #0]
 8007954:	f002 fffe 	bl	800a954 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007958:	6820      	ldr	r0, [r4, #0]
 800795a:	f002 fcc1 	bl	800a2e0 <USB_GetDevSpeed>
 800795e:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007960:	6825      	ldr	r5, [r4, #0]
 8007962:	f000 fd5d 	bl	8008420 <HAL_RCC_GetHCLKFreq>
 8007966:	4601      	mov	r1, r0
 8007968:	7b22      	ldrb	r2, [r4, #12]
 800796a:	4628      	mov	r0, r5
 800796c:	f002 fb1e 	bl	8009fac <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8007970:	4620      	mov	r0, r4
 8007972:	f006 fbb6 	bl	800e0e2 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007976:	6822      	ldr	r2, [r4, #0]
 8007978:	6953      	ldr	r3, [r2, #20]
 800797a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800797e:	6153      	str	r3, [r2, #20]
 8007980:	e63b      	b.n	80075fa <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SOFCallback(hpcd);
 8007982:	4620      	mov	r0, r4
 8007984:	f006 fba7 	bl	800e0d6 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007988:	6822      	ldr	r2, [r4, #0]
 800798a:	6953      	ldr	r3, [r2, #20]
 800798c:	f003 0308 	and.w	r3, r3, #8
 8007990:	6153      	str	r3, [r2, #20]
 8007992:	e639      	b.n	8007608 <HAL_PCD_IRQHandler+0x120>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007994:	2100      	movs	r1, #0
 8007996:	4620      	mov	r0, r4
 8007998:	f006 fbc6 	bl	800e128 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800799c:	6822      	ldr	r2, [r4, #0]
 800799e:	6953      	ldr	r3, [r2, #20]
 80079a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079a4:	6153      	str	r3, [r2, #20]
 80079a6:	e636      	b.n	8007616 <HAL_PCD_IRQHandler+0x12e>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80079a8:	2100      	movs	r1, #0
 80079aa:	4620      	mov	r0, r4
 80079ac:	f006 fbb6 	bl	800e11c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80079b0:	6822      	ldr	r2, [r4, #0]
 80079b2:	6953      	ldr	r3, [r2, #20]
 80079b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079b8:	6153      	str	r3, [r2, #20]
 80079ba:	e633      	b.n	8007624 <HAL_PCD_IRQHandler+0x13c>
      HAL_PCD_ConnectCallback(hpcd);
 80079bc:	4620      	mov	r0, r4
 80079be:	f006 fbb9 	bl	800e134 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80079c2:	6822      	ldr	r2, [r4, #0]
 80079c4:	6953      	ldr	r3, [r2, #20]
 80079c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079ca:	6153      	str	r3, [r2, #20]
 80079cc:	e631      	b.n	8007632 <HAL_PCD_IRQHandler+0x14a>
        HAL_PCD_DisconnectCallback(hpcd);
 80079ce:	4620      	mov	r0, r4
 80079d0:	f006 fbb6 	bl	800e140 <HAL_PCD_DisconnectCallback>
 80079d4:	e63a      	b.n	800764c <HAL_PCD_IRQHandler+0x164>

080079d6 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80079d6:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d00d      	beq.n	80079fa <HAL_PCD_SetAddress+0x24>
{
 80079de:	b510      	push	{r4, lr}
 80079e0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80079e2:	2301      	movs	r3, #1
 80079e4:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80079e8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80079ec:	6800      	ldr	r0, [r0, #0]
 80079ee:	f002 ff53 	bl	800a898 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80079f2:	2000      	movs	r0, #0
 80079f4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80079f8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80079fa:	2002      	movs	r0, #2
}
 80079fc:	4770      	bx	lr

080079fe <HAL_PCD_EP_Open>:
{
 80079fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a00:	4607      	mov	r7, r0
 8007a02:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8007a04:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007a08:	d127      	bne.n	8007a5a <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a0a:	f001 050f 	and.w	r5, r1, #15
 8007a0e:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8007a12:	00b6      	lsls	r6, r6, #2
 8007a14:	f506 76fc 	add.w	r6, r6, #504	; 0x1f8
 8007a18:	4406      	add	r6, r0
 8007a1a:	1d31      	adds	r1, r6, #4
    ep->is_in = 0U;
 8007a1c:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8007a20:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007a24:	2000      	movs	r0, #0
 8007a26:	f885 01fd 	strb.w	r0, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a2a:	f004 040f 	and.w	r4, r4, #15
 8007a2e:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8007a30:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8007a32:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8007a34:	784a      	ldrb	r2, [r1, #1]
 8007a36:	b102      	cbz	r2, 8007a3a <HAL_PCD_EP_Open+0x3c>
    ep->tx_fifo_num = ep->num;
 8007a38:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d01d      	beq.n	8007a7a <HAL_PCD_EP_Open+0x7c>
  __HAL_LOCK(hpcd);
 8007a3e:	f897 33bc 	ldrb.w	r3, [r7, #956]	; 0x3bc
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d01c      	beq.n	8007a80 <HAL_PCD_EP_Open+0x82>
 8007a46:	2301      	movs	r3, #1
 8007a48:	f887 33bc 	strb.w	r3, [r7, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007a4c:	6838      	ldr	r0, [r7, #0]
 8007a4e:	f002 fc57 	bl	800a300 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007a52:	2000      	movs	r0, #0
 8007a54:	f887 03bc 	strb.w	r0, [r7, #956]	; 0x3bc
}
 8007a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a5a:	f001 000f 	and.w	r0, r1, #15
 8007a5e:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 8007a62:	0089      	lsls	r1, r1, #2
 8007a64:	3138      	adds	r1, #56	; 0x38
 8007a66:	4439      	add	r1, r7
 8007a68:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8007a6a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8007a6e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8007a72:	2501      	movs	r5, #1
 8007a74:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
 8007a78:	e7d7      	b.n	8007a2a <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	710b      	strb	r3, [r1, #4]
 8007a7e:	e7de      	b.n	8007a3e <HAL_PCD_EP_Open+0x40>
  __HAL_LOCK(hpcd);
 8007a80:	2002      	movs	r0, #2
 8007a82:	e7e9      	b.n	8007a58 <HAL_PCD_EP_Open+0x5a>

08007a84 <HAL_PCD_EP_Close>:
{
 8007a84:	b510      	push	{r4, lr}
 8007a86:	4604      	mov	r4, r0
 8007a88:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8007a8a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007a8e:	d120      	bne.n	8007ad2 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a90:	f001 000f 	and.w	r0, r1, #15
 8007a94:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007a9e:	4423      	add	r3, r4
 8007aa0:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8007aa2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8007aa6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007ab0:	f002 020f 	and.w	r2, r2, #15
 8007ab4:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8007ab6:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d019      	beq.n	8007af2 <HAL_PCD_EP_Close+0x6e>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007ac4:	6820      	ldr	r0, [r4, #0]
 8007ac6:	f002 fc63 	bl	800a390 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007aca:	2000      	movs	r0, #0
 8007acc:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007ad0:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ad2:	f001 000f 	and.w	r0, r1, #15
 8007ad6:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	3338      	adds	r3, #56	; 0x38
 8007ade:	4423      	add	r3, r4
 8007ae0:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8007ae2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8007ae6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007aea:	2301      	movs	r3, #1
 8007aec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8007af0:	e7de      	b.n	8007ab0 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8007af2:	2002      	movs	r0, #2
 8007af4:	e7ec      	b.n	8007ad0 <HAL_PCD_EP_Close+0x4c>

08007af6 <HAL_PCD_EP_Receive>:
{
 8007af6:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007af8:	f001 040f 	and.w	r4, r1, #15
 8007afc:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8007b00:	0089      	lsls	r1, r1, #2
 8007b02:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8007b06:	4401      	add	r1, r0
 8007b08:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8007b0a:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8007b0e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007b12:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
  ep->xfer_len = len;
 8007b16:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
  ep->xfer_count = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  ep->is_in = 0U;
 8007b20:	f885 31fd 	strb.w	r3, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b24:	f885 41fc 	strb.w	r4, [r5, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8007b28:	6903      	ldr	r3, [r0, #16]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d006      	beq.n	8007b3c <HAL_PCD_EP_Receive+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007b2e:	b964      	cbnz	r4, 8007b4a <HAL_PCD_EP_Receive+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	6800      	ldr	r0, [r0, #0]
 8007b34:	f002 fc9a 	bl	800a46c <USB_EP0StartXfer>
}
 8007b38:	2000      	movs	r0, #0
 8007b3a:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8007b3c:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8007b40:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007b44:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
 8007b48:	e7f1      	b.n	8007b2e <HAL_PCD_EP_Receive+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	6800      	ldr	r0, [r0, #0]
 8007b4e:	f002 fd2d 	bl	800a5ac <USB_EPStartXfer>
 8007b52:	e7f1      	b.n	8007b38 <HAL_PCD_EP_Receive+0x42>

08007b54 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007b54:	f001 010f 	and.w	r1, r1, #15
 8007b58:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007b5c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8007b60:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8007b64:	4770      	bx	lr

08007b66 <HAL_PCD_EP_Transmit>:
{
 8007b66:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b68:	f001 040f 	and.w	r4, r1, #15
 8007b6c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8007b70:	0089      	lsls	r1, r1, #2
 8007b72:	3138      	adds	r1, #56	; 0x38
 8007b74:	4401      	add	r1, r0
 8007b76:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8007b78:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8007b7c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007b80:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 8007b82:	652b      	str	r3, [r5, #80]	; 0x50
  ep->xfer_count = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1U;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b8e:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8007b92:	6903      	ldr	r3, [r0, #16]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d006      	beq.n	8007ba6 <HAL_PCD_EP_Transmit+0x40>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007b98:	b95c      	cbnz	r4, 8007bb2 <HAL_PCD_EP_Transmit+0x4c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	6800      	ldr	r0, [r0, #0]
 8007b9e:	f002 fc65 	bl	800a46c <USB_EP0StartXfer>
}
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8007ba6:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8007baa:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007bae:	64ea      	str	r2, [r5, #76]	; 0x4c
 8007bb0:	e7f2      	b.n	8007b98 <HAL_PCD_EP_Transmit+0x32>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	6800      	ldr	r0, [r0, #0]
 8007bb6:	f002 fcf9 	bl	800a5ac <USB_EPStartXfer>
 8007bba:	e7f2      	b.n	8007ba2 <HAL_PCD_EP_Transmit+0x3c>

08007bbc <HAL_PCD_EP_SetStall>:
{
 8007bbc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007bbe:	f001 050f 	and.w	r5, r1, #15
 8007bc2:	6842      	ldr	r2, [r0, #4]
 8007bc4:	4295      	cmp	r5, r2
 8007bc6:	d839      	bhi.n	8007c3c <HAL_PCD_EP_SetStall+0x80>
 8007bc8:	4604      	mov	r4, r0
 8007bca:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8007bcc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007bd0:	d11f      	bne.n	8007c12 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8007bd2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007bd6:	0089      	lsls	r1, r1, #2
 8007bd8:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8007bdc:	4401      	add	r1, r0
 8007bde:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8007be0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007be4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007bf2:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8007bf4:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d021      	beq.n	8007c40 <HAL_PCD_EP_SetStall+0x84>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007c02:	6820      	ldr	r0, [r4, #0]
 8007c04:	f002 fded 	bl	800a7e2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007c08:	b18d      	cbz	r5, 8007c2e <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007c10:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c12:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 8007c16:	0089      	lsls	r1, r1, #2
 8007c18:	3138      	adds	r1, #56	; 0x38
 8007c1a:	4401      	add	r1, r0
 8007c1c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8007c1e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8007c22:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007c2c:	e7df      	b.n	8007bee <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007c2e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007c32:	7c21      	ldrb	r1, [r4, #16]
 8007c34:	6820      	ldr	r0, [r4, #0]
 8007c36:	f002 fe9d 	bl	800a974 <USB_EP0_OutStart>
 8007c3a:	e7e6      	b.n	8007c0a <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8007c3c:	2001      	movs	r0, #1
 8007c3e:	e7e7      	b.n	8007c10 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8007c40:	2002      	movs	r0, #2
 8007c42:	e7e5      	b.n	8007c10 <HAL_PCD_EP_SetStall+0x54>

08007c44 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007c44:	f001 030f 	and.w	r3, r1, #15
 8007c48:	6842      	ldr	r2, [r0, #4]
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d831      	bhi.n	8007cb2 <HAL_PCD_EP_ClrStall+0x6e>
{
 8007c4e:	b510      	push	{r4, lr}
 8007c50:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8007c52:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007c56:	d11e      	bne.n	8007c96 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c58:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8007c5c:	0089      	lsls	r1, r1, #2
 8007c5e:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8007c62:	4401      	add	r1, r0
 8007c64:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8007c66:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007c6a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007c6e:	2000      	movs	r0, #0
 8007c70:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 8007c74:	2200      	movs	r2, #0
 8007c76:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c78:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8007c7a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d019      	beq.n	8007cb6 <HAL_PCD_EP_ClrStall+0x72>
 8007c82:	2301      	movs	r3, #1
 8007c84:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007c88:	6820      	ldr	r0, [r4, #0]
 8007c8a:	f002 fdd7 	bl	800a83c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007c8e:	2000      	movs	r0, #0
 8007c90:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007c94:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c96:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8007c9a:	0089      	lsls	r1, r1, #2
 8007c9c:	3138      	adds	r1, #56	; 0x38
 8007c9e:	4401      	add	r1, r0
 8007ca0:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8007ca2:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007ca6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007caa:	2001      	movs	r0, #1
 8007cac:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 8007cb0:	e7e0      	b.n	8007c74 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8007cb2:	2001      	movs	r0, #1
}
 8007cb4:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8007cb6:	2002      	movs	r0, #2
 8007cb8:	e7ec      	b.n	8007c94 <HAL_PCD_EP_ClrStall+0x50>

08007cba <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 8007cba:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d014      	beq.n	8007cec <HAL_PCD_EP_Flush+0x32>
{
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((ep_addr & 0x80U) == 0x80U)
 8007ccc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007cd0:	d106      	bne.n	8007ce0 <HAL_PCD_EP_Flush+0x26>
    (void)USB_FlushRxFifo(hpcd->Instance);
 8007cd2:	6800      	ldr	r0, [r0, #0]
 8007cd4:	f002 fa14 	bl	800a100 <USB_FlushRxFifo>
  __HAL_UNLOCK(hpcd);
 8007cd8:	2000      	movs	r0, #0
 8007cda:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007cde:	bd10      	pop	{r4, pc}
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8007ce0:	f001 010f 	and.w	r1, r1, #15
 8007ce4:	6800      	ldr	r0, [r0, #0]
 8007ce6:	f002 f9f7 	bl	800a0d8 <USB_FlushTxFifo>
 8007cea:	e7f5      	b.n	8007cd8 <HAL_PCD_EP_Flush+0x1e>
  __HAL_LOCK(hpcd);
 8007cec:	2002      	movs	r0, #2
}
 8007cee:	4770      	bx	lr

08007cf0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007cf0:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007cf2:	6804      	ldr	r4, [r0, #0]
 8007cf4:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8007cf6:	b919      	cbnz	r1, 8007d00 <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007cf8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8007cfc:	62a0      	str	r0, [r4, #40]	; 0x28
 8007cfe:	e018      	b.n	8007d32 <HAL_PCDEx_SetTxFiFo+0x42>
 8007d00:	460d      	mov	r5, r1
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007d02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d04:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007d08:	2300      	movs	r3, #0
 8007d0a:	1e69      	subs	r1, r5, #1
 8007d0c:	428b      	cmp	r3, r1
 8007d0e:	d209      	bcs.n	8007d24 <HAL_PCDEx_SetTxFiFo+0x34>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007d10:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8007d14:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007d18:	6849      	ldr	r1, [r1, #4]
 8007d1a:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007d1e:	3301      	adds	r3, #1
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	e7f2      	b.n	8007d0a <HAL_PCDEx_SetTxFiFo+0x1a>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007d24:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8007d28:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 8007d2c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007d30:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 8007d32:	2000      	movs	r0, #0
 8007d34:	bc30      	pop	{r4, r5}
 8007d36:	4770      	bx	lr

08007d38 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8007d38:	6803      	ldr	r3, [r0, #0]
 8007d3a:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	4770      	bx	lr

08007d40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007d40:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d42:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
 8007d44:	2101      	movs	r1, #1
 8007d46:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007d4a:	2000      	movs	r0, #0
 8007d4c:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007d50:	6993      	ldr	r3, [r2, #24]
 8007d52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d56:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007d58:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8007d5a:	4b02      	ldr	r3, [pc, #8]	; (8007d64 <HAL_PCDEx_ActivateLPM+0x24>)
 8007d5c:	430b      	orrs	r3, r1
 8007d5e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	10000003 	.word	0x10000003

08007d68 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007d68:	4770      	bx	lr
	...

08007d6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007d6c:	b510      	push	{r4, lr}
 8007d6e:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8007d70:	4b1b      	ldr	r3, [pc, #108]	; (8007de0 <HAL_PWREx_EnableOverDrive+0x74>)
 8007d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007d78:	641a      	str	r2, [r3, #64]	; 0x40
 8007d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007d84:	4a17      	ldr	r2, [pc, #92]	; (8007de4 <HAL_PWREx_EnableOverDrive+0x78>)
 8007d86:	6813      	ldr	r3, [r2, #0]
 8007d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d8c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d8e:	f7fd f907 	bl	8004fa0 <HAL_GetTick>
 8007d92:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007d94:	4b13      	ldr	r3, [pc, #76]	; (8007de4 <HAL_PWREx_EnableOverDrive+0x78>)
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007d9c:	d108      	bne.n	8007db0 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007d9e:	f7fd f8ff 	bl	8004fa0 <HAL_GetTick>
 8007da2:	1b00      	subs	r0, r0, r4
 8007da4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007da8:	d9f4      	bls.n	8007d94 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8007daa:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8007dac:	b002      	add	sp, #8
 8007dae:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007db0:	4a0c      	ldr	r2, [pc, #48]	; (8007de4 <HAL_PWREx_EnableOverDrive+0x78>)
 8007db2:	6813      	ldr	r3, [r2, #0]
 8007db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007db8:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8007dba:	f7fd f8f1 	bl	8004fa0 <HAL_GetTick>
 8007dbe:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007dc0:	4b08      	ldr	r3, [pc, #32]	; (8007de4 <HAL_PWREx_EnableOverDrive+0x78>)
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007dc8:	d107      	bne.n	8007dda <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007dca:	f7fd f8e9 	bl	8004fa0 <HAL_GetTick>
 8007dce:	1b00      	subs	r0, r0, r4
 8007dd0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007dd4:	d9f4      	bls.n	8007dc0 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8007dd6:	2003      	movs	r0, #3
 8007dd8:	e7e8      	b.n	8007dac <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8007dda:	2000      	movs	r0, #0
 8007ddc:	e7e6      	b.n	8007dac <HAL_PWREx_EnableOverDrive+0x40>
 8007dde:	bf00      	nop
 8007de0:	40023800 	.word	0x40023800
 8007de4:	40007000 	.word	0x40007000

08007de8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007de8:	b570      	push	{r4, r5, r6, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007dee:	6803      	ldr	r3, [r0, #0]
 8007df0:	f013 0f01 	tst.w	r3, #1
 8007df4:	d029      	beq.n	8007e4a <HAL_RCC_OscConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007df6:	4ba8      	ldr	r3, [pc, #672]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f003 030c 	and.w	r3, r3, #12
 8007dfe:	2b04      	cmp	r3, #4
 8007e00:	d01a      	beq.n	8007e38 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e02:	4ba5      	ldr	r3, [pc, #660]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f003 030c 	and.w	r3, r3, #12
 8007e0a:	2b08      	cmp	r3, #8
 8007e0c:	d00f      	beq.n	8007e2e <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e0e:	6863      	ldr	r3, [r4, #4]
 8007e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e14:	d040      	beq.n	8007e98 <HAL_RCC_OscConfig+0xb0>
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d154      	bne.n	8007ec4 <HAL_RCC_OscConfig+0xdc>
 8007e1a:	4b9f      	ldr	r3, [pc, #636]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	e039      	b.n	8007ea2 <HAL_RCC_OscConfig+0xba>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e2e:	4b9a      	ldr	r3, [pc, #616]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007e36:	d0ea      	beq.n	8007e0e <HAL_RCC_OscConfig+0x26>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e38:	4b97      	ldr	r3, [pc, #604]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007e40:	d003      	beq.n	8007e4a <HAL_RCC_OscConfig+0x62>
 8007e42:	6863      	ldr	r3, [r4, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 81d1 	beq.w	80081ec <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	f013 0f02 	tst.w	r3, #2
 8007e50:	d07a      	beq.n	8007f48 <HAL_RCC_OscConfig+0x160>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007e52:	4b91      	ldr	r3, [pc, #580]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f013 0f0c 	tst.w	r3, #12
 8007e5a:	d05e      	beq.n	8007f1a <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e5c:	4b8e      	ldr	r3, [pc, #568]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f003 030c 	and.w	r3, r3, #12
 8007e64:	2b08      	cmp	r3, #8
 8007e66:	d053      	beq.n	8007f10 <HAL_RCC_OscConfig+0x128>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e68:	68e3      	ldr	r3, [r4, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f000 8096 	beq.w	8007f9c <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e70:	4a89      	ldr	r2, [pc, #548]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007e72:	6813      	ldr	r3, [r2, #0]
 8007e74:	f043 0301 	orr.w	r3, r3, #1
 8007e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e7a:	f7fd f891 	bl	8004fa0 <HAL_GetTick>
 8007e7e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e80:	4b85      	ldr	r3, [pc, #532]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f013 0f02 	tst.w	r3, #2
 8007e88:	d179      	bne.n	8007f7e <HAL_RCC_OscConfig+0x196>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e8a:	f7fd f889 	bl	8004fa0 <HAL_GetTick>
 8007e8e:	1b40      	subs	r0, r0, r5
 8007e90:	2802      	cmp	r0, #2
 8007e92:	d9f5      	bls.n	8007e80 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8007e94:	2003      	movs	r0, #3
 8007e96:	e1ae      	b.n	80081f6 <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e98:	4a7f      	ldr	r2, [pc, #508]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007e9a:	6813      	ldr	r3, [r2, #0]
 8007e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ea0:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ea2:	6863      	ldr	r3, [r4, #4]
 8007ea4:	b32b      	cbz	r3, 8007ef2 <HAL_RCC_OscConfig+0x10a>
        tickstart = HAL_GetTick();
 8007ea6:	f7fd f87b 	bl	8004fa0 <HAL_GetTick>
 8007eaa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eac:	4b7a      	ldr	r3, [pc, #488]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007eb4:	d1c9      	bne.n	8007e4a <HAL_RCC_OscConfig+0x62>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007eb6:	f7fd f873 	bl	8004fa0 <HAL_GetTick>
 8007eba:	1b40      	subs	r0, r0, r5
 8007ebc:	2864      	cmp	r0, #100	; 0x64
 8007ebe:	d9f5      	bls.n	8007eac <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 8007ec0:	2003      	movs	r0, #3
 8007ec2:	e198      	b.n	80081f6 <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ec8:	d009      	beq.n	8007ede <HAL_RCC_OscConfig+0xf6>
 8007eca:	4b73      	ldr	r3, [pc, #460]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	e7e1      	b.n	8007ea2 <HAL_RCC_OscConfig+0xba>
 8007ede:	4b6e      	ldr	r3, [pc, #440]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007ee6:	601a      	str	r2, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007eee:	601a      	str	r2, [r3, #0]
 8007ef0:	e7d7      	b.n	8007ea2 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8007ef2:	f7fd f855 	bl	8004fa0 <HAL_GetTick>
 8007ef6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ef8:	4b67      	ldr	r3, [pc, #412]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007f00:	d0a3      	beq.n	8007e4a <HAL_RCC_OscConfig+0x62>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f02:	f7fd f84d 	bl	8004fa0 <HAL_GetTick>
 8007f06:	1b40      	subs	r0, r0, r5
 8007f08:	2864      	cmp	r0, #100	; 0x64
 8007f0a:	d9f5      	bls.n	8007ef8 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8007f0c:	2003      	movs	r0, #3
 8007f0e:	e172      	b.n	80081f6 <HAL_RCC_OscConfig+0x40e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f10:	4b61      	ldr	r3, [pc, #388]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007f18:	d1a6      	bne.n	8007e68 <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f1a:	4b5f      	ldr	r3, [pc, #380]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f013 0f02 	tst.w	r3, #2
 8007f22:	d003      	beq.n	8007f2c <HAL_RCC_OscConfig+0x144>
 8007f24:	68e3      	ldr	r3, [r4, #12]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	f040 8162 	bne.w	80081f0 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f2c:	485a      	ldr	r0, [pc, #360]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007f2e:	6803      	ldr	r3, [r0, #0]
 8007f30:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007f34:	6921      	ldr	r1, [r4, #16]
 8007f36:	22f8      	movs	r2, #248	; 0xf8
 8007f38:	fa92 f2a2 	rbit	r2, r2
 8007f3c:	fab2 f282 	clz	r2, r2
 8007f40:	fa01 f202 	lsl.w	r2, r1, r2
 8007f44:	4313      	orrs	r3, r2
 8007f46:	6003      	str	r3, [r0, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	f013 0f08 	tst.w	r3, #8
 8007f4e:	d04d      	beq.n	8007fec <HAL_RCC_OscConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f50:	6963      	ldr	r3, [r4, #20]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d036      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x1dc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f56:	4a50      	ldr	r2, [pc, #320]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007f58:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8007f5a:	f043 0301 	orr.w	r3, r3, #1
 8007f5e:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f60:	f7fd f81e 	bl	8004fa0 <HAL_GetTick>
 8007f64:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f66:	4b4c      	ldr	r3, [pc, #304]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f6a:	f013 0f02 	tst.w	r3, #2
 8007f6e:	d13d      	bne.n	8007fec <HAL_RCC_OscConfig+0x204>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f70:	f7fd f816 	bl	8004fa0 <HAL_GetTick>
 8007f74:	1b40      	subs	r0, r0, r5
 8007f76:	2802      	cmp	r0, #2
 8007f78:	d9f5      	bls.n	8007f66 <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 8007f7a:	2003      	movs	r0, #3
 8007f7c:	e13b      	b.n	80081f6 <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f7e:	4846      	ldr	r0, [pc, #280]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007f80:	6803      	ldr	r3, [r0, #0]
 8007f82:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007f86:	6921      	ldr	r1, [r4, #16]
 8007f88:	22f8      	movs	r2, #248	; 0xf8
 8007f8a:	fa92 f2a2 	rbit	r2, r2
 8007f8e:	fab2 f282 	clz	r2, r2
 8007f92:	fa01 f202 	lsl.w	r2, r1, r2
 8007f96:	4313      	orrs	r3, r2
 8007f98:	6003      	str	r3, [r0, #0]
 8007f9a:	e7d5      	b.n	8007f48 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_DISABLE();
 8007f9c:	4a3e      	ldr	r2, [pc, #248]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007f9e:	6813      	ldr	r3, [r2, #0]
 8007fa0:	f023 0301 	bic.w	r3, r3, #1
 8007fa4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007fa6:	f7fc fffb 	bl	8004fa0 <HAL_GetTick>
 8007faa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007fac:	4b3a      	ldr	r3, [pc, #232]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f013 0f02 	tst.w	r3, #2
 8007fb4:	d0c8      	beq.n	8007f48 <HAL_RCC_OscConfig+0x160>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fb6:	f7fc fff3 	bl	8004fa0 <HAL_GetTick>
 8007fba:	1b40      	subs	r0, r0, r5
 8007fbc:	2802      	cmp	r0, #2
 8007fbe:	d9f5      	bls.n	8007fac <HAL_RCC_OscConfig+0x1c4>
            return HAL_TIMEOUT;
 8007fc0:	2003      	movs	r0, #3
 8007fc2:	e118      	b.n	80081f6 <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fc4:	4a34      	ldr	r2, [pc, #208]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007fc6:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8007fc8:	f023 0301 	bic.w	r3, r3, #1
 8007fcc:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fce:	f7fc ffe7 	bl	8004fa0 <HAL_GetTick>
 8007fd2:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fd4:	4b30      	ldr	r3, [pc, #192]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fd8:	f013 0f02 	tst.w	r3, #2
 8007fdc:	d006      	beq.n	8007fec <HAL_RCC_OscConfig+0x204>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fde:	f7fc ffdf 	bl	8004fa0 <HAL_GetTick>
 8007fe2:	1b40      	subs	r0, r0, r5
 8007fe4:	2802      	cmp	r0, #2
 8007fe6:	d9f5      	bls.n	8007fd4 <HAL_RCC_OscConfig+0x1ec>
        {
          return HAL_TIMEOUT;
 8007fe8:	2003      	movs	r0, #3
 8007fea:	e104      	b.n	80081f6 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	f013 0f04 	tst.w	r3, #4
 8007ff2:	d07d      	beq.n	80080f0 <HAL_RCC_OscConfig+0x308>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ff4:	4b28      	ldr	r3, [pc, #160]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8007ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007ffc:	d10b      	bne.n	8008016 <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ffe:	4b26      	ldr	r3, [pc, #152]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 8008000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008002:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008006:	641a      	str	r2, [r3, #64]	; 0x40
 8008008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800800e:	9301      	str	r3, [sp, #4]
 8008010:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008012:	2501      	movs	r5, #1
 8008014:	e000      	b.n	8008018 <HAL_RCC_OscConfig+0x230>
  FlagStatus pwrclkchanged = RESET;
 8008016:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008018:	4b20      	ldr	r3, [pc, #128]	; (800809c <HAL_RCC_OscConfig+0x2b4>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008020:	d00e      	beq.n	8008040 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008022:	68a3      	ldr	r3, [r4, #8]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d01f      	beq.n	8008068 <HAL_RCC_OscConfig+0x280>
 8008028:	2b00      	cmp	r3, #0
 800802a:	d139      	bne.n	80080a0 <HAL_RCC_OscConfig+0x2b8>
 800802c:	4b1a      	ldr	r3, [pc, #104]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 800802e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008030:	f022 0201 	bic.w	r2, r2, #1
 8008034:	671a      	str	r2, [r3, #112]	; 0x70
 8008036:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008038:	f022 0204 	bic.w	r2, r2, #4
 800803c:	671a      	str	r2, [r3, #112]	; 0x70
 800803e:	e018      	b.n	8008072 <HAL_RCC_OscConfig+0x28a>
      PWR->CR1 |= PWR_CR1_DBP;
 8008040:	4a16      	ldr	r2, [pc, #88]	; (800809c <HAL_RCC_OscConfig+0x2b4>)
 8008042:	6813      	ldr	r3, [r2, #0]
 8008044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008048:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800804a:	f7fc ffa9 	bl	8004fa0 <HAL_GetTick>
 800804e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008050:	4b12      	ldr	r3, [pc, #72]	; (800809c <HAL_RCC_OscConfig+0x2b4>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008058:	d1e3      	bne.n	8008022 <HAL_RCC_OscConfig+0x23a>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800805a:	f7fc ffa1 	bl	8004fa0 <HAL_GetTick>
 800805e:	1b80      	subs	r0, r0, r6
 8008060:	2864      	cmp	r0, #100	; 0x64
 8008062:	d9f5      	bls.n	8008050 <HAL_RCC_OscConfig+0x268>
          return HAL_TIMEOUT;
 8008064:	2003      	movs	r0, #3
 8008066:	e0c6      	b.n	80081f6 <HAL_RCC_OscConfig+0x40e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008068:	4a0b      	ldr	r2, [pc, #44]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 800806a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800806c:	f043 0301 	orr.w	r3, r3, #1
 8008070:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008072:	68a3      	ldr	r3, [r4, #8]
 8008074:	b353      	cbz	r3, 80080cc <HAL_RCC_OscConfig+0x2e4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008076:	f7fc ff93 	bl	8004fa0 <HAL_GetTick>
 800807a:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800807c:	4b06      	ldr	r3, [pc, #24]	; (8008098 <HAL_RCC_OscConfig+0x2b0>)
 800807e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008080:	f013 0f02 	tst.w	r3, #2
 8008084:	d133      	bne.n	80080ee <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008086:	f7fc ff8b 	bl	8004fa0 <HAL_GetTick>
 800808a:	1b80      	subs	r0, r0, r6
 800808c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008090:	4298      	cmp	r0, r3
 8008092:	d9f3      	bls.n	800807c <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8008094:	2003      	movs	r0, #3
 8008096:	e0ae      	b.n	80081f6 <HAL_RCC_OscConfig+0x40e>
 8008098:	40023800 	.word	0x40023800
 800809c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080a0:	2b05      	cmp	r3, #5
 80080a2:	d009      	beq.n	80080b8 <HAL_RCC_OscConfig+0x2d0>
 80080a4:	4b56      	ldr	r3, [pc, #344]	; (8008200 <HAL_RCC_OscConfig+0x418>)
 80080a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080a8:	f022 0201 	bic.w	r2, r2, #1
 80080ac:	671a      	str	r2, [r3, #112]	; 0x70
 80080ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080b0:	f022 0204 	bic.w	r2, r2, #4
 80080b4:	671a      	str	r2, [r3, #112]	; 0x70
 80080b6:	e7dc      	b.n	8008072 <HAL_RCC_OscConfig+0x28a>
 80080b8:	4b51      	ldr	r3, [pc, #324]	; (8008200 <HAL_RCC_OscConfig+0x418>)
 80080ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080bc:	f042 0204 	orr.w	r2, r2, #4
 80080c0:	671a      	str	r2, [r3, #112]	; 0x70
 80080c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080c4:	f042 0201 	orr.w	r2, r2, #1
 80080c8:	671a      	str	r2, [r3, #112]	; 0x70
 80080ca:	e7d2      	b.n	8008072 <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080cc:	f7fc ff68 	bl	8004fa0 <HAL_GetTick>
 80080d0:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080d2:	4b4b      	ldr	r3, [pc, #300]	; (8008200 <HAL_RCC_OscConfig+0x418>)
 80080d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d6:	f013 0f02 	tst.w	r3, #2
 80080da:	d008      	beq.n	80080ee <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080dc:	f7fc ff60 	bl	8004fa0 <HAL_GetTick>
 80080e0:	1b80      	subs	r0, r0, r6
 80080e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80080e6:	4298      	cmp	r0, r3
 80080e8:	d9f3      	bls.n	80080d2 <HAL_RCC_OscConfig+0x2ea>
        {
          return HAL_TIMEOUT;
 80080ea:	2003      	movs	r0, #3
 80080ec:	e083      	b.n	80081f6 <HAL_RCC_OscConfig+0x40e>
        }       
      }
    }
    
    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080ee:	b9f5      	cbnz	r5, 800812e <HAL_RCC_OscConfig+0x346>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080f0:	69a3      	ldr	r3, [r4, #24]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d07e      	beq.n	80081f4 <HAL_RCC_OscConfig+0x40c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80080f6:	4a42      	ldr	r2, [pc, #264]	; (8008200 <HAL_RCC_OscConfig+0x418>)
 80080f8:	6892      	ldr	r2, [r2, #8]
 80080fa:	f002 020c 	and.w	r2, r2, #12
 80080fe:	2a08      	cmp	r2, #8
 8008100:	d07b      	beq.n	80081fa <HAL_RCC_OscConfig+0x412>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008102:	2b02      	cmp	r3, #2
 8008104:	d019      	beq.n	800813a <HAL_RCC_OscConfig+0x352>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008106:	4a3e      	ldr	r2, [pc, #248]	; (8008200 <HAL_RCC_OscConfig+0x418>)
 8008108:	6813      	ldr	r3, [r2, #0]
 800810a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800810e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008110:	f7fc ff46 	bl	8004fa0 <HAL_GetTick>
 8008114:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008116:	4b3a      	ldr	r3, [pc, #232]	; (8008200 <HAL_RCC_OscConfig+0x418>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800811e:	d063      	beq.n	80081e8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008120:	f7fc ff3e 	bl	8004fa0 <HAL_GetTick>
 8008124:	1b00      	subs	r0, r0, r4
 8008126:	2802      	cmp	r0, #2
 8008128:	d9f5      	bls.n	8008116 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800812a:	2003      	movs	r0, #3
 800812c:	e063      	b.n	80081f6 <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800812e:	4a34      	ldr	r2, [pc, #208]	; (8008200 <HAL_RCC_OscConfig+0x418>)
 8008130:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008136:	6413      	str	r3, [r2, #64]	; 0x40
 8008138:	e7da      	b.n	80080f0 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 800813a:	4a31      	ldr	r2, [pc, #196]	; (8008200 <HAL_RCC_OscConfig+0x418>)
 800813c:	6813      	ldr	r3, [r2, #0]
 800813e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008142:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008144:	f7fc ff2c 	bl	8004fa0 <HAL_GetTick>
 8008148:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800814a:	4b2d      	ldr	r3, [pc, #180]	; (8008200 <HAL_RCC_OscConfig+0x418>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008152:	d006      	beq.n	8008162 <HAL_RCC_OscConfig+0x37a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008154:	f7fc ff24 	bl	8004fa0 <HAL_GetTick>
 8008158:	1b40      	subs	r0, r0, r5
 800815a:	2802      	cmp	r0, #2
 800815c:	d9f5      	bls.n	800814a <HAL_RCC_OscConfig+0x362>
            return HAL_TIMEOUT;
 800815e:	2003      	movs	r0, #3
 8008160:	e049      	b.n	80081f6 <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008162:	69e3      	ldr	r3, [r4, #28]
 8008164:	6a22      	ldr	r2, [r4, #32]
 8008166:	4313      	orrs	r3, r2
 8008168:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800816a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800816e:	fa92 f2a2 	rbit	r2, r2
 8008172:	fab2 f282 	clz	r2, r2
 8008176:	fa01 f202 	lsl.w	r2, r1, r2
 800817a:	4313      	orrs	r3, r2
 800817c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800817e:	0852      	lsrs	r2, r2, #1
 8008180:	3a01      	subs	r2, #1
 8008182:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8008186:	fa91 f1a1 	rbit	r1, r1
 800818a:	fab1 f181 	clz	r1, r1
 800818e:	408a      	lsls	r2, r1
 8008190:	4313      	orrs	r3, r2
 8008192:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008194:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8008198:	fa92 f2a2 	rbit	r2, r2
 800819c:	fab2 f282 	clz	r2, r2
 80081a0:	fa01 f202 	lsl.w	r2, r1, r2
 80081a4:	4313      	orrs	r3, r2
 80081a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80081a8:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80081ac:	fa92 f2a2 	rbit	r2, r2
 80081b0:	fab2 f282 	clz	r2, r2
 80081b4:	fa01 f202 	lsl.w	r2, r1, r2
 80081b8:	4313      	orrs	r3, r2
 80081ba:	4a11      	ldr	r2, [pc, #68]	; (8008200 <HAL_RCC_OscConfig+0x418>)
 80081bc:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80081be:	6813      	ldr	r3, [r2, #0]
 80081c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081c4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80081c6:	f7fc feeb 	bl	8004fa0 <HAL_GetTick>
 80081ca:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081cc:	4b0c      	ldr	r3, [pc, #48]	; (8008200 <HAL_RCC_OscConfig+0x418>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80081d4:	d106      	bne.n	80081e4 <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081d6:	f7fc fee3 	bl	8004fa0 <HAL_GetTick>
 80081da:	1b00      	subs	r0, r0, r4
 80081dc:	2802      	cmp	r0, #2
 80081de:	d9f5      	bls.n	80081cc <HAL_RCC_OscConfig+0x3e4>
            return HAL_TIMEOUT;
 80081e0:	2003      	movs	r0, #3
 80081e2:	e008      	b.n	80081f6 <HAL_RCC_OscConfig+0x40e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80081e4:	2000      	movs	r0, #0
 80081e6:	e006      	b.n	80081f6 <HAL_RCC_OscConfig+0x40e>
 80081e8:	2000      	movs	r0, #0
 80081ea:	e004      	b.n	80081f6 <HAL_RCC_OscConfig+0x40e>
        return HAL_ERROR;
 80081ec:	2001      	movs	r0, #1
 80081ee:	e002      	b.n	80081f6 <HAL_RCC_OscConfig+0x40e>
        return HAL_ERROR;
 80081f0:	2001      	movs	r0, #1
 80081f2:	e000      	b.n	80081f6 <HAL_RCC_OscConfig+0x40e>
  return HAL_OK;
 80081f4:	2000      	movs	r0, #0
}
 80081f6:	b002      	add	sp, #8
 80081f8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80081fa:	2001      	movs	r0, #1
 80081fc:	e7fb      	b.n	80081f6 <HAL_RCC_OscConfig+0x40e>
 80081fe:	bf00      	nop
 8008200:	40023800 	.word	0x40023800

08008204 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008204:	4b21      	ldr	r3, [pc, #132]	; (800828c <HAL_RCC_GetSysClockFreq+0x88>)
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f003 030c 	and.w	r3, r3, #12
 800820c:	2b04      	cmp	r3, #4
 800820e:	d038      	beq.n	8008282 <HAL_RCC_GetSysClockFreq+0x7e>
 8008210:	2b08      	cmp	r3, #8
 8008212:	d138      	bne.n	8008286 <HAL_RCC_GetSysClockFreq+0x82>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008214:	4b1d      	ldr	r3, [pc, #116]	; (800828c <HAL_RCC_GetSysClockFreq+0x88>)
 8008216:	6858      	ldr	r0, [r3, #4]
 8008218:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8008222:	d01e      	beq.n	8008262 <HAL_RCC_GetSysClockFreq+0x5e>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8008224:	4a1a      	ldr	r2, [pc, #104]	; (8008290 <HAL_RCC_GetSysClockFreq+0x8c>)
 8008226:	fbb2 f2f0 	udiv	r2, r2, r0
 800822a:	4b18      	ldr	r3, [pc, #96]	; (800828c <HAL_RCC_GetSysClockFreq+0x88>)
 800822c:	6858      	ldr	r0, [r3, #4]
 800822e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008232:	4018      	ands	r0, r3
 8008234:	fa93 f3a3 	rbit	r3, r3
 8008238:	fab3 f383 	clz	r3, r3
 800823c:	40d8      	lsrs	r0, r3
 800823e:	fb00 f002 	mul.w	r0, r0, r2
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8008242:	4b12      	ldr	r3, [pc, #72]	; (800828c <HAL_RCC_GetSysClockFreq+0x88>)
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800824a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800824e:	fa92 f2a2 	rbit	r2, r2
 8008252:	fab2 f282 	clz	r2, r2
 8008256:	40d3      	lsrs	r3, r2
 8008258:	3301      	adds	r3, #1
 800825a:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 800825c:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8008260:	4770      	bx	lr
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8008262:	4a0c      	ldr	r2, [pc, #48]	; (8008294 <HAL_RCC_GetSysClockFreq+0x90>)
 8008264:	fbb2 f2f0 	udiv	r2, r2, r0
 8008268:	4b08      	ldr	r3, [pc, #32]	; (800828c <HAL_RCC_GetSysClockFreq+0x88>)
 800826a:	6858      	ldr	r0, [r3, #4]
 800826c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008270:	4018      	ands	r0, r3
 8008272:	fa93 f3a3 	rbit	r3, r3
 8008276:	fab3 f383 	clz	r3, r3
 800827a:	40d8      	lsrs	r0, r3
 800827c:	fb00 f002 	mul.w	r0, r0, r2
 8008280:	e7df      	b.n	8008242 <HAL_RCC_GetSysClockFreq+0x3e>
      sysclockfreq = HSE_VALUE;
 8008282:	4803      	ldr	r0, [pc, #12]	; (8008290 <HAL_RCC_GetSysClockFreq+0x8c>)
 8008284:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008286:	4803      	ldr	r0, [pc, #12]	; (8008294 <HAL_RCC_GetSysClockFreq+0x90>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	40023800 	.word	0x40023800
 8008290:	017d7840 	.word	0x017d7840
 8008294:	00f42400 	.word	0x00f42400

08008298 <HAL_RCC_ClockConfig>:
{
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	4604      	mov	r4, r0
 800829c:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800829e:	4b5c      	ldr	r3, [pc, #368]	; (8008410 <HAL_RCC_ClockConfig+0x178>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 030f 	and.w	r3, r3, #15
 80082a6:	428b      	cmp	r3, r1
 80082a8:	d20b      	bcs.n	80082c2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082aa:	4a59      	ldr	r2, [pc, #356]	; (8008410 <HAL_RCC_ClockConfig+0x178>)
 80082ac:	6813      	ldr	r3, [r2, #0]
 80082ae:	f023 030f 	bic.w	r3, r3, #15
 80082b2:	430b      	orrs	r3, r1
 80082b4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80082b6:	6813      	ldr	r3, [r2, #0]
 80082b8:	f003 030f 	and.w	r3, r3, #15
 80082bc:	428b      	cmp	r3, r1
 80082be:	f040 80a0 	bne.w	8008402 <HAL_RCC_ClockConfig+0x16a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	f013 0f02 	tst.w	r3, #2
 80082c8:	d006      	beq.n	80082d8 <HAL_RCC_ClockConfig+0x40>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082ca:	4a52      	ldr	r2, [pc, #328]	; (8008414 <HAL_RCC_ClockConfig+0x17c>)
 80082cc:	6893      	ldr	r3, [r2, #8]
 80082ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082d2:	68a1      	ldr	r1, [r4, #8]
 80082d4:	430b      	orrs	r3, r1
 80082d6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	f013 0f01 	tst.w	r3, #1
 80082de:	d052      	beq.n	8008386 <HAL_RCC_ClockConfig+0xee>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082e0:	6863      	ldr	r3, [r4, #4]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d023      	beq.n	800832e <HAL_RCC_ClockConfig+0x96>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d028      	beq.n	800833c <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082ea:	4a4a      	ldr	r2, [pc, #296]	; (8008414 <HAL_RCC_ClockConfig+0x17c>)
 80082ec:	6812      	ldr	r2, [r2, #0]
 80082ee:	f012 0f02 	tst.w	r2, #2
 80082f2:	f000 8088 	beq.w	8008406 <HAL_RCC_ClockConfig+0x16e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082f6:	4947      	ldr	r1, [pc, #284]	; (8008414 <HAL_RCC_ClockConfig+0x17c>)
 80082f8:	688a      	ldr	r2, [r1, #8]
 80082fa:	f022 0203 	bic.w	r2, r2, #3
 80082fe:	4313      	orrs	r3, r2
 8008300:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8008302:	f7fc fe4d 	bl	8004fa0 <HAL_GetTick>
 8008306:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008308:	6863      	ldr	r3, [r4, #4]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d01d      	beq.n	800834a <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800830e:	2b02      	cmp	r3, #2
 8008310:	d02a      	beq.n	8008368 <HAL_RCC_ClockConfig+0xd0>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008312:	4b40      	ldr	r3, [pc, #256]	; (8008414 <HAL_RCC_ClockConfig+0x17c>)
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f013 0f0c 	tst.w	r3, #12
 800831a:	d034      	beq.n	8008386 <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800831c:	f7fc fe40 	bl	8004fa0 <HAL_GetTick>
 8008320:	1b83      	subs	r3, r0, r6
 8008322:	f241 3288 	movw	r2, #5000	; 0x1388
 8008326:	4293      	cmp	r3, r2
 8008328:	d9f3      	bls.n	8008312 <HAL_RCC_ClockConfig+0x7a>
          return HAL_TIMEOUT;
 800832a:	2003      	movs	r0, #3
 800832c:	e068      	b.n	8008400 <HAL_RCC_ClockConfig+0x168>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800832e:	4a39      	ldr	r2, [pc, #228]	; (8008414 <HAL_RCC_ClockConfig+0x17c>)
 8008330:	6812      	ldr	r2, [r2, #0]
 8008332:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8008336:	d1de      	bne.n	80082f6 <HAL_RCC_ClockConfig+0x5e>
        return HAL_ERROR;
 8008338:	2001      	movs	r0, #1
 800833a:	e061      	b.n	8008400 <HAL_RCC_ClockConfig+0x168>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800833c:	4a35      	ldr	r2, [pc, #212]	; (8008414 <HAL_RCC_ClockConfig+0x17c>)
 800833e:	6812      	ldr	r2, [r2, #0]
 8008340:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8008344:	d1d7      	bne.n	80082f6 <HAL_RCC_ClockConfig+0x5e>
        return HAL_ERROR;
 8008346:	2001      	movs	r0, #1
 8008348:	e05a      	b.n	8008400 <HAL_RCC_ClockConfig+0x168>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800834a:	4b32      	ldr	r3, [pc, #200]	; (8008414 <HAL_RCC_ClockConfig+0x17c>)
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f003 030c 	and.w	r3, r3, #12
 8008352:	2b04      	cmp	r3, #4
 8008354:	d017      	beq.n	8008386 <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008356:	f7fc fe23 	bl	8004fa0 <HAL_GetTick>
 800835a:	1b83      	subs	r3, r0, r6
 800835c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008360:	4293      	cmp	r3, r2
 8008362:	d9f2      	bls.n	800834a <HAL_RCC_ClockConfig+0xb2>
          return HAL_TIMEOUT;
 8008364:	2003      	movs	r0, #3
 8008366:	e04b      	b.n	8008400 <HAL_RCC_ClockConfig+0x168>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008368:	4b2a      	ldr	r3, [pc, #168]	; (8008414 <HAL_RCC_ClockConfig+0x17c>)
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f003 030c 	and.w	r3, r3, #12
 8008370:	2b08      	cmp	r3, #8
 8008372:	d008      	beq.n	8008386 <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008374:	f7fc fe14 	bl	8004fa0 <HAL_GetTick>
 8008378:	1b80      	subs	r0, r0, r6
 800837a:	f241 3388 	movw	r3, #5000	; 0x1388
 800837e:	4298      	cmp	r0, r3
 8008380:	d9f2      	bls.n	8008368 <HAL_RCC_ClockConfig+0xd0>
          return HAL_TIMEOUT;
 8008382:	2003      	movs	r0, #3
 8008384:	e03c      	b.n	8008400 <HAL_RCC_ClockConfig+0x168>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8008386:	4b22      	ldr	r3, [pc, #136]	; (8008410 <HAL_RCC_ClockConfig+0x178>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 030f 	and.w	r3, r3, #15
 800838e:	42ab      	cmp	r3, r5
 8008390:	d90a      	bls.n	80083a8 <HAL_RCC_ClockConfig+0x110>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008392:	4a1f      	ldr	r2, [pc, #124]	; (8008410 <HAL_RCC_ClockConfig+0x178>)
 8008394:	6813      	ldr	r3, [r2, #0]
 8008396:	f023 030f 	bic.w	r3, r3, #15
 800839a:	432b      	orrs	r3, r5
 800839c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800839e:	6813      	ldr	r3, [r2, #0]
 80083a0:	f003 030f 	and.w	r3, r3, #15
 80083a4:	42ab      	cmp	r3, r5
 80083a6:	d130      	bne.n	800840a <HAL_RCC_ClockConfig+0x172>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083a8:	6823      	ldr	r3, [r4, #0]
 80083aa:	f013 0f04 	tst.w	r3, #4
 80083ae:	d006      	beq.n	80083be <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083b0:	4a18      	ldr	r2, [pc, #96]	; (8008414 <HAL_RCC_ClockConfig+0x17c>)
 80083b2:	6893      	ldr	r3, [r2, #8]
 80083b4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80083b8:	68e1      	ldr	r1, [r4, #12]
 80083ba:	430b      	orrs	r3, r1
 80083bc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	f013 0f08 	tst.w	r3, #8
 80083c4:	d007      	beq.n	80083d6 <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80083c6:	4a13      	ldr	r2, [pc, #76]	; (8008414 <HAL_RCC_ClockConfig+0x17c>)
 80083c8:	6893      	ldr	r3, [r2, #8]
 80083ca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80083ce:	6921      	ldr	r1, [r4, #16]
 80083d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80083d4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80083d6:	f7ff ff15 	bl	8008204 <HAL_RCC_GetSysClockFreq>
 80083da:	4b0e      	ldr	r3, [pc, #56]	; (8008414 <HAL_RCC_ClockConfig+0x17c>)
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083e2:	22f0      	movs	r2, #240	; 0xf0
 80083e4:	fa92 f2a2 	rbit	r2, r2
 80083e8:	fab2 f282 	clz	r2, r2
 80083ec:	40d3      	lsrs	r3, r2
 80083ee:	4a0a      	ldr	r2, [pc, #40]	; (8008418 <HAL_RCC_ClockConfig+0x180>)
 80083f0:	5cd3      	ldrb	r3, [r2, r3]
 80083f2:	40d8      	lsrs	r0, r3
 80083f4:	4b09      	ldr	r3, [pc, #36]	; (800841c <HAL_RCC_ClockConfig+0x184>)
 80083f6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80083f8:	2000      	movs	r0, #0
 80083fa:	f7fc fda7 	bl	8004f4c <HAL_InitTick>
  return HAL_OK;
 80083fe:	2000      	movs	r0, #0
}
 8008400:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8008402:	2001      	movs	r0, #1
 8008404:	e7fc      	b.n	8008400 <HAL_RCC_ClockConfig+0x168>
        return HAL_ERROR;
 8008406:	2001      	movs	r0, #1
 8008408:	e7fa      	b.n	8008400 <HAL_RCC_ClockConfig+0x168>
      return HAL_ERROR;
 800840a:	2001      	movs	r0, #1
 800840c:	e7f8      	b.n	8008400 <HAL_RCC_ClockConfig+0x168>
 800840e:	bf00      	nop
 8008410:	40023c00 	.word	0x40023c00
 8008414:	40023800 	.word	0x40023800
 8008418:	08013200 	.word	0x08013200
 800841c:	20000190 	.word	0x20000190

08008420 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8008420:	4b01      	ldr	r3, [pc, #4]	; (8008428 <HAL_RCC_GetHCLKFreq+0x8>)
 8008422:	6818      	ldr	r0, [r3, #0]
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	20000190 	.word	0x20000190

0800842c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 800842c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800842e:	f7ff fff7 	bl	8008420 <HAL_RCC_GetHCLKFreq>
 8008432:	4b07      	ldr	r3, [pc, #28]	; (8008450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800843a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800843e:	fa92 f2a2 	rbit	r2, r2
 8008442:	fab2 f282 	clz	r2, r2
 8008446:	40d3      	lsrs	r3, r2
 8008448:	4a02      	ldr	r2, [pc, #8]	; (8008454 <HAL_RCC_GetPCLK1Freq+0x28>)
 800844a:	5cd3      	ldrb	r3, [r2, r3]
}
 800844c:	40d8      	lsrs	r0, r3
 800844e:	bd08      	pop	{r3, pc}
 8008450:	40023800 	.word	0x40023800
 8008454:	08013210 	.word	0x08013210

08008458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008458:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800845a:	f7ff ffe1 	bl	8008420 <HAL_RCC_GetHCLKFreq>
 800845e:	4b07      	ldr	r3, [pc, #28]	; (800847c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008466:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800846a:	fa92 f2a2 	rbit	r2, r2
 800846e:	fab2 f282 	clz	r2, r2
 8008472:	40d3      	lsrs	r3, r2
 8008474:	4a02      	ldr	r2, [pc, #8]	; (8008480 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008476:	5cd3      	ldrb	r3, [r2, r3]
} 
 8008478:	40d8      	lsrs	r0, r3
 800847a:	bd08      	pop	{r3, pc}
 800847c:	40023800 	.word	0x40023800
 8008480:	08013210 	.word	0x08013210

08008484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008486:	b083      	sub	sp, #12
 8008488:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800848a:	6806      	ldr	r6, [r0, #0]
 800848c:	f016 0601 	ands.w	r6, r6, #1
 8008490:	d00d      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008492:	4bb5      	ldr	r3, [pc, #724]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008494:	689a      	ldr	r2, [r3, #8]
 8008496:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800849a:	609a      	str	r2, [r3, #8]
 800849c:	689a      	ldr	r2, [r3, #8]
 800849e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80084a0:	430a      	orrs	r2, r1
 80084a2:	609a      	str	r2, [r3, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80084a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f000 8155 	beq.w	8008756 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  uint32_t plli2sused = 0;
 80084ac:	2600      	movs	r6, #0
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80084ae:	6825      	ldr	r5, [r4, #0]
 80084b0:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 80084b4:	d011      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80084b6:	4aac      	ldr	r2, [pc, #688]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80084b8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80084bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80084c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80084c2:	430b      	orrs	r3, r1
 80084c4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80084c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80084ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084ce:	f000 8144 	beq.w	800875a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 8143 	beq.w	800875e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  uint32_t pllsaiused = 0;
 80084d8:	2500      	movs	r5, #0
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80084e0:	d00f      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80084e2:	4aa1      	ldr	r2, [pc, #644]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80084e4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80084e8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80084ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80084ee:	430b      	orrs	r3, r1
 80084f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80084f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084fa:	f000 8132 	beq.w	8008762 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80084fe:	b903      	cbnz	r3, 8008502 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1; 
 8008500:	2501      	movs	r5, #1
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8008508:	d000      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {    
      plli2sused = 1; 
 800850a:	2601      	movs	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800850c:	f013 0f20 	tst.w	r3, #32
 8008510:	f040 812c 	bne.w	800876c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	f013 0f10 	tst.w	r3, #16
 800851a:	d00c      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800851c:	4b92      	ldr	r3, [pc, #584]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800851e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008522:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800852a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800852e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008530:	430a      	orrs	r2, r1
 8008532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800853c:	d008      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800853e:	4a8a      	ldr	r2, [pc, #552]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008540:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008544:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008548:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800854a:	430b      	orrs	r3, r1
 800854c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8008556:	d008      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008558:	4a83      	ldr	r2, [pc, #524]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800855a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800855e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8008562:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8008564:	430b      	orrs	r3, r1
 8008566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008570:	d008      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008572:	4a7d      	ldr	r2, [pc, #500]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008574:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008578:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800857c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800857e:	430b      	orrs	r3, r1
 8008580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800858a:	d008      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800858c:	4a76      	ldr	r2, [pc, #472]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800858e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008592:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008596:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8008598:	430b      	orrs	r3, r1
 800859a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800859e:	6823      	ldr	r3, [r4, #0]
 80085a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80085a4:	d008      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80085a6:	4a70      	ldr	r2, [pc, #448]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80085a8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80085ac:	f023 0303 	bic.w	r3, r3, #3
 80085b0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80085b2:	430b      	orrs	r3, r1
 80085b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	f013 0f80 	tst.w	r3, #128	; 0x80
 80085be:	d008      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80085c0:	4a69      	ldr	r2, [pc, #420]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80085c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80085c6:	f023 030c 	bic.w	r3, r3, #12
 80085ca:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80085cc:	430b      	orrs	r3, r1
 80085ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80085d8:	d008      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80085da:	4a63      	ldr	r2, [pc, #396]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80085dc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80085e0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80085e4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80085e6:	430b      	orrs	r3, r1
 80085e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80085ec:	6823      	ldr	r3, [r4, #0]
 80085ee:	f413 7f00 	tst.w	r3, #512	; 0x200
 80085f2:	d008      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085f4:	4a5c      	ldr	r2, [pc, #368]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80085f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80085fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085fe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008600:	430b      	orrs	r3, r1
 8008602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800860c:	d008      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800860e:	4a56      	ldr	r2, [pc, #344]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008610:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008618:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800861a:	430b      	orrs	r3, r1
 800861c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8008626:	d008      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008628:	4a4f      	ldr	r2, [pc, #316]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800862a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800862e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008632:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008634:	430b      	orrs	r3, r1
 8008636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8008640:	d008      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008642:	4a49      	ldr	r2, [pc, #292]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008644:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008648:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800864c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800864e:	430b      	orrs	r3, r1
 8008650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008654:	6823      	ldr	r3, [r4, #0]
 8008656:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800865a:	d008      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800865c:	4a42      	ldr	r2, [pc, #264]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800865e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008662:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008666:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8008668:	430b      	orrs	r3, r1
 800866a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800866e:	6823      	ldr	r3, [r4, #0]
 8008670:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8008674:	d008      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008676:	4a3c      	ldr	r2, [pc, #240]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008678:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800867c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008680:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8008682:	430b      	orrs	r3, r1
 8008684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800868e:	d00d      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008690:	4a35      	ldr	r2, [pc, #212]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008692:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008696:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800869a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800869c:	430b      	orrs	r3, r1
 800869e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80086a2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80086a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086a8:	f000 80c6 	beq.w	8008838 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	f013 0f08 	tst.w	r3, #8
 80086b2:	d000      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1; 
 80086b4:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086b6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80086ba:	d008      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086bc:	4a2a      	ldr	r2, [pc, #168]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80086be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80086c2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80086c6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80086c8:	430b      	orrs	r3, r1
 80086ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80086d4:	d009      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80086d6:	4a24      	ldr	r2, [pc, #144]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80086d8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80086dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086e0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80086e4:	430b      	orrs	r3, r1
 80086e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80086f0:	d009      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80086f2:	4a1d      	ldr	r2, [pc, #116]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80086f4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80086f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80086fc:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8008700:	430b      	orrs	r3, r1
 8008702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008706:	6823      	ldr	r3, [r4, #0]
 8008708:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800870c:	d009      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800870e:	4a16      	ldr	r2, [pc, #88]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008710:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8008714:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008718:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800871c:	430b      	orrs	r3, r1
 800871e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008728:	d009      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800872a:	4a0f      	ldr	r2, [pc, #60]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800872c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8008730:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008734:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8008738:	430b      	orrs	r3, r1
 800873a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800873e:	2e00      	cmp	r6, #0
 8008740:	d17c      	bne.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008748:	d078      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800874a:	2d01      	cmp	r5, #1
 800874c:	f000 819e 	beq.w	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x608>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8008750:	2000      	movs	r0, #0
}
 8008752:	b003      	add	sp, #12
 8008754:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1; 
 8008756:	2601      	movs	r6, #1
 8008758:	e6a9      	b.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1; 
 800875a:	2601      	movs	r6, #1
 800875c:	e6b9      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1; 
 800875e:	2501      	movs	r5, #1
 8008760:	e6bb      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1; 
 8008762:	2601      	movs	r6, #1
 8008764:	e6cb      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008766:	bf00      	nop
 8008768:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 800876c:	4bc4      	ldr	r3, [pc, #784]	; (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 800876e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008770:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008774:	641a      	str	r2, [r3, #64]	; 0x40
 8008776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8008780:	4ac0      	ldr	r2, [pc, #768]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8008782:	6813      	ldr	r3, [r2, #0]
 8008784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008788:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800878a:	f7fc fc09 	bl	8004fa0 <HAL_GetTick>
 800878e:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008790:	4bbc      	ldr	r3, [pc, #752]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008798:	d106      	bne.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x324>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800879a:	f7fc fc01 	bl	8004fa0 <HAL_GetTick>
 800879e:	1bc0      	subs	r0, r0, r7
 80087a0:	2864      	cmp	r0, #100	; 0x64
 80087a2:	d9f5      	bls.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
 80087a4:	2003      	movs	r0, #3
 80087a6:	e7d4      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80087a8:	4bb5      	ldr	r3, [pc, #724]	; (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 80087aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80087ac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80087b0:	d015      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80087b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80087b4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d010      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x35a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80087bc:	4bb0      	ldr	r3, [pc, #704]	; (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 80087be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80087c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80087c4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80087c6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80087ca:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80087cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80087ce:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80087d2:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80087d4:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80087d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d8:	f013 0f01 	tst.w	r3, #1
 80087dc:	d112      	bne.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x380>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80087e0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80087e4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80087e8:	d01d      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80087ea:	4aa5      	ldr	r2, [pc, #660]	; (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 80087ec:	6893      	ldr	r3, [r2, #8]
 80087ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80087f2:	6093      	str	r3, [r2, #8]
 80087f4:	49a2      	ldr	r1, [pc, #648]	; (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 80087f6:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80087f8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80087fa:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80087fe:	4313      	orrs	r3, r2
 8008800:	670b      	str	r3, [r1, #112]	; 0x70
 8008802:	e687      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8008804:	f7fc fbcc 	bl	8004fa0 <HAL_GetTick>
 8008808:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800880a:	4b9d      	ldr	r3, [pc, #628]	; (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 800880c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880e:	f013 0f02 	tst.w	r3, #2
 8008812:	d1e4      	bne.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008814:	f7fc fbc4 	bl	8004fa0 <HAL_GetTick>
 8008818:	1bc0      	subs	r0, r0, r7
 800881a:	f241 3388 	movw	r3, #5000	; 0x1388
 800881e:	4298      	cmp	r0, r3
 8008820:	d9f3      	bls.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x386>
            return HAL_TIMEOUT;
 8008822:	2003      	movs	r0, #3
 8008824:	e795      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008826:	4896      	ldr	r0, [pc, #600]	; (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8008828:	6882      	ldr	r2, [r0, #8]
 800882a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800882e:	4996      	ldr	r1, [pc, #600]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008830:	4019      	ands	r1, r3
 8008832:	430a      	orrs	r2, r1
 8008834:	6082      	str	r2, [r0, #8]
 8008836:	e7dd      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      pllsaiused = 1; 
 8008838:	2501      	movs	r5, #1
 800883a:	e737      	b.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_PLLI2S_DISABLE();  
 800883c:	4a90      	ldr	r2, [pc, #576]	; (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 800883e:	6813      	ldr	r3, [r2, #0]
 8008840:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008844:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008846:	f7fc fbab 	bl	8004fa0 <HAL_GetTick>
 800884a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800884c:	4b8c      	ldr	r3, [pc, #560]	; (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8008854:	d006      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008856:	f7fc fba3 	bl	8004fa0 <HAL_GetTick>
 800885a:	1b80      	subs	r0, r0, r6
 800885c:	2864      	cmp	r0, #100	; 0x64
 800885e:	d9f5      	bls.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
 8008860:	2003      	movs	r0, #3
 8008862:	e776      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	f013 0f01 	tst.w	r3, #1
 800886a:	d03a      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800886c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800886e:	bbc3      	cbnz	r3, 80088e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8008870:	4e83      	ldr	r6, [pc, #524]	; (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8008872:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8008876:	f403 3c40 	and.w	ip, r3, #196608	; 0x30000
 800887a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800887e:	fa90 f3a0 	rbit	r3, r0
 8008882:	fab3 f383 	clz	r3, r3
 8008886:	fa2c fc03 	lsr.w	ip, ip, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 800888a:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 800888e:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8008892:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8008896:	fa91 f3a1 	rbit	r3, r1
 800889a:	fab3 f383 	clz	r3, r3
 800889e:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80088a0:	6863      	ldr	r3, [r4, #4]
 80088a2:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 80088a6:	fa97 f7a7 	rbit	r7, r7
 80088aa:	fab7 f787 	clz	r7, r7
 80088ae:	40bb      	lsls	r3, r7
 80088b0:	fa90 f0a0 	rbit	r0, r0
 80088b4:	fab0 f080 	clz	r0, r0
 80088b8:	fa0c f000 	lsl.w	r0, ip, r0
 80088bc:	4303      	orrs	r3, r0
 80088be:	fa91 f1a1 	rbit	r1, r1
 80088c2:	fab1 f181 	clz	r1, r1
 80088c6:	408a      	lsls	r2, r1
 80088c8:	4313      	orrs	r3, r2
 80088ca:	68a1      	ldr	r1, [r4, #8]
 80088cc:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80088d0:	fa92 f2a2 	rbit	r2, r2
 80088d4:	fab2 f282 	clz	r2, r2
 80088d8:	fa01 f202 	lsl.w	r2, r1, r2
 80088dc:	4313      	orrs	r3, r2
 80088de:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80088e8:	d003      	beq.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
 80088ea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80088ec:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80088f0:	d006      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80088f2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80088f6:	d045      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x500>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80088f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088fe:	d141      	bne.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x500>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8008900:	4e5f      	ldr	r6, [pc, #380]	; (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8008902:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
 8008906:	f400 3c40 	and.w	ip, r0, #196608	; 0x30000
 800890a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800890e:	fa90 f3a0 	rbit	r3, r0
 8008912:	fab3 f383 	clz	r3, r3
 8008916:	fa2c fc03 	lsr.w	ip, ip, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 800891a:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 800891e:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8008922:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8008926:	fa91 f3a1 	rbit	r3, r1
 800892a:	fab3 f383 	clz	r3, r3
 800892e:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008930:	6863      	ldr	r3, [r4, #4]
 8008932:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8008936:	fa97 f7a7 	rbit	r7, r7
 800893a:	fab7 f787 	clz	r7, r7
 800893e:	40bb      	lsls	r3, r7
 8008940:	fa90 f0a0 	rbit	r0, r0
 8008944:	fab0 f080 	clz	r0, r0
 8008948:	fa0c f000 	lsl.w	r0, ip, r0
 800894c:	4303      	orrs	r3, r0
 800894e:	68e7      	ldr	r7, [r4, #12]
 8008950:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8008954:	fa90 f0a0 	rbit	r0, r0
 8008958:	fab0 f080 	clz	r0, r0
 800895c:	fa07 f000 	lsl.w	r0, r7, r0
 8008960:	4303      	orrs	r3, r0
 8008962:	fa91 f1a1 	rbit	r1, r1
 8008966:	fab1 f181 	clz	r1, r1
 800896a:	408a      	lsls	r2, r1
 800896c:	4313      	orrs	r3, r2
 800896e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8008972:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8008976:	f023 031f 	bic.w	r3, r3, #31
 800897a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800897c:	3a01      	subs	r2, #1
 800897e:	4313      	orrs	r3, r2
 8008980:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800898a:	d037      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x578>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 800898c:	4e3c      	ldr	r6, [pc, #240]	; (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 800898e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
 8008992:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8008996:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 800899a:	fa9c f3ac 	rbit	r3, ip
 800899e:	fab3 f383 	clz	r3, r3
 80089a2:	40d9      	lsrs	r1, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80089a4:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 80089a8:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80089ac:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 80089b0:	fa90 f3a0 	rbit	r3, r0
 80089b4:	fab3 f383 	clz	r3, r3
 80089b8:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80089ba:	6863      	ldr	r3, [r4, #4]
 80089bc:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 80089c0:	fa97 f7a7 	rbit	r7, r7
 80089c4:	fab7 f787 	clz	r7, r7
 80089c8:	40bb      	lsls	r3, r7
 80089ca:	6927      	ldr	r7, [r4, #16]
 80089cc:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
 80089d0:	fa9e feae 	rbit	lr, lr
 80089d4:	fabe fe8e 	clz	lr, lr
 80089d8:	fa07 f70e 	lsl.w	r7, r7, lr
 80089dc:	433b      	orrs	r3, r7
 80089de:	fa9c fcac 	rbit	ip, ip
 80089e2:	fabc fc8c 	clz	ip, ip
 80089e6:	fa01 f10c 	lsl.w	r1, r1, ip
 80089ea:	430b      	orrs	r3, r1
 80089ec:	fa90 f0a0 	rbit	r0, r0
 80089f0:	fab0 f080 	clz	r0, r0
 80089f4:	4082      	lsls	r2, r0
 80089f6:	4313      	orrs	r3, r2
 80089f8:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008a02:	d028      	beq.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008a04:	6863      	ldr	r3, [r4, #4]
 8008a06:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8008a0a:	fa92 f2a2 	rbit	r2, r2
 8008a0e:	fab2 f282 	clz	r2, r2
 8008a12:	4093      	lsls	r3, r2
 8008a14:	6921      	ldr	r1, [r4, #16]
 8008a16:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008a1a:	fa92 f2a2 	rbit	r2, r2
 8008a1e:	fab2 f282 	clz	r2, r2
 8008a22:	fa01 f202 	lsl.w	r2, r1, r2
 8008a26:	4313      	orrs	r3, r2
 8008a28:	68e1      	ldr	r1, [r4, #12]
 8008a2a:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8008a2e:	fa92 f2a2 	rbit	r2, r2
 8008a32:	fab2 f282 	clz	r2, r2
 8008a36:	fa01 f202 	lsl.w	r2, r1, r2
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	68a1      	ldr	r1, [r4, #8]
 8008a3e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8008a42:	fa92 f2a2 	rbit	r2, r2
 8008a46:	fab2 f282 	clz	r2, r2
 8008a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	4a0b      	ldr	r2, [pc, #44]	; (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8008a52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8008a56:	4a0a      	ldr	r2, [pc, #40]	; (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8008a58:	6813      	ldr	r3, [r2, #0]
 8008a5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a5e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008a60:	f7fc fa9e 	bl	8004fa0 <HAL_GetTick>
 8008a64:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a66:	4b06      	ldr	r3, [pc, #24]	; (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8008a6e:	f47f ae6c 	bne.w	800874a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008a72:	f7fc fa95 	bl	8004fa0 <HAL_GetTick>
 8008a76:	1b80      	subs	r0, r0, r6
 8008a78:	2864      	cmp	r0, #100	; 0x64
 8008a7a:	d9f4      	bls.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
        return HAL_TIMEOUT;
 8008a7c:	2003      	movs	r0, #3
 8008a7e:	e668      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8008a80:	40023800 	.word	0x40023800
 8008a84:	40007000 	.word	0x40007000
 8008a88:	0ffffcff 	.word	0x0ffffcff
    __HAL_RCC_PLLSAI_DISABLE(); 
 8008a8c:	4a7d      	ldr	r2, [pc, #500]	; (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008a8e:	6813      	ldr	r3, [r2, #0]
 8008a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a94:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008a96:	f7fc fa83 	bl	8004fa0 <HAL_GetTick>
 8008a9a:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a9c:	4b79      	ldr	r3, [pc, #484]	; (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8008aa4:	d006      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x630>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008aa6:	f7fc fa7b 	bl	8004fa0 <HAL_GetTick>
 8008aaa:	1b40      	subs	r0, r0, r5
 8008aac:	2864      	cmp	r0, #100	; 0x64
 8008aae:	d9f5      	bls.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x618>
        return HAL_TIMEOUT;
 8008ab0:	2003      	movs	r0, #3
 8008ab2:	e64e      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8008aba:	d001      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8008abc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008abe:	b12a      	cbz	r2, 8008acc <HAL_RCCEx_PeriphCLKConfig+0x648>
 8008ac0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008ac4:	d044      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d141      	bne.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8008acc:	4d6d      	ldr	r5, [pc, #436]	; (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008ace:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
 8008ad2:	f407 3740 	and.w	r7, r7, #196608	; 0x30000
 8008ad6:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8008ada:	fa90 f3a0 	rbit	r3, r0
 8008ade:	fab3 f383 	clz	r3, r3
 8008ae2:	40df      	lsrs	r7, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8008ae4:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8008ae8:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8008aec:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8008af0:	fa91 f3a1 	rbit	r3, r1
 8008af4:	fab3 f383 	clz	r3, r3
 8008af8:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008afa:	6963      	ldr	r3, [r4, #20]
 8008afc:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 8008b00:	fa96 f6a6 	rbit	r6, r6
 8008b04:	fab6 f686 	clz	r6, r6
 8008b08:	40b3      	lsls	r3, r6
 8008b0a:	fa90 f0a0 	rbit	r0, r0
 8008b0e:	fab0 f080 	clz	r0, r0
 8008b12:	fa07 f000 	lsl.w	r0, r7, r0
 8008b16:	4303      	orrs	r3, r0
 8008b18:	69a6      	ldr	r6, [r4, #24]
 8008b1a:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8008b1e:	fa90 f0a0 	rbit	r0, r0
 8008b22:	fab0 f080 	clz	r0, r0
 8008b26:	fa06 f000 	lsl.w	r0, r6, r0
 8008b2a:	4303      	orrs	r3, r0
 8008b2c:	fa91 f1a1 	rbit	r1, r1
 8008b30:	fab1 f181 	clz	r1, r1
 8008b34:	408a      	lsls	r2, r1
 8008b36:	4313      	orrs	r3, r2
 8008b38:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008b3c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8008b40:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8008b44:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008b46:	3a01      	subs	r2, #1
 8008b48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008b4c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008b50:	6823      	ldr	r3, [r4, #0]
 8008b52:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8008b56:	d003      	beq.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8008b58:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8008b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b5e:	d056      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x78a>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	f013 0f08 	tst.w	r3, #8
 8008b66:	d03e      	beq.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x762>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8008b68:	4d46      	ldr	r5, [pc, #280]	; (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008b6a:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8008b6e:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8008b72:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8008b76:	fa90 f3a0 	rbit	r3, r0
 8008b7a:	fab3 f383 	clz	r3, r3
 8008b7e:	40da      	lsrs	r2, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8008b80:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8008b84:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8008b88:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 8008b8c:	fa96 f3a6 	rbit	r3, r6
 8008b90:	fab3 f383 	clz	r3, r3
 8008b94:	40d9      	lsrs	r1, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008b96:	6963      	ldr	r3, [r4, #20]
 8008b98:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8008b9c:	fa97 f7a7 	rbit	r7, r7
 8008ba0:	fab7 f787 	clz	r7, r7
 8008ba4:	40bb      	lsls	r3, r7
 8008ba6:	fa96 f6a6 	rbit	r6, r6
 8008baa:	fab6 f686 	clz	r6, r6
 8008bae:	40b1      	lsls	r1, r6
 8008bb0:	430b      	orrs	r3, r1
 8008bb2:	fa90 f1a0 	rbit	r1, r0
 8008bb6:	fab1 f181 	clz	r1, r1
 8008bba:	408a      	lsls	r2, r1
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	69e1      	ldr	r1, [r4, #28]
 8008bc0:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8008bc4:	fa92 f2a2 	rbit	r2, r2
 8008bc8:	fab2 f282 	clz	r2, r2
 8008bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008bd6:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8008bda:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008bde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008be0:	4313      	orrs	r3, r2
 8008be2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8008be6:	4a27      	ldr	r2, [pc, #156]	; (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008be8:	6813      	ldr	r3, [r2, #0]
 8008bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bee:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008bf0:	f7fc f9d6 	bl	8004fa0 <HAL_GetTick>
 8008bf4:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008bf6:	4b23      	ldr	r3, [pc, #140]	; (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8008bfe:	d13e      	bne.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x7fa>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008c00:	f7fc f9ce 	bl	8004fa0 <HAL_GetTick>
 8008c04:	1b00      	subs	r0, r0, r4
 8008c06:	2864      	cmp	r0, #100	; 0x64
 8008c08:	d9f5      	bls.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x772>
        return HAL_TIMEOUT;
 8008c0a:	2003      	movs	r0, #3
 8008c0c:	e5a1      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8008c0e:	4e1d      	ldr	r6, [pc, #116]	; (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008c10:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 8008c14:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8008c18:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 8008c1c:	fa95 f3a5 	rbit	r3, r5
 8008c20:	fab3 f383 	clz	r3, r3
 8008c24:	40d9      	lsrs	r1, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8008c26:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 8008c2a:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8008c2e:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 8008c32:	fa90 f3a0 	rbit	r3, r0
 8008c36:	fab3 f383 	clz	r3, r3
 8008c3a:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008c3c:	6963      	ldr	r3, [r4, #20]
 8008c3e:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8008c42:	fa97 f7a7 	rbit	r7, r7
 8008c46:	fab7 f787 	clz	r7, r7
 8008c4a:	40bb      	lsls	r3, r7
 8008c4c:	6a27      	ldr	r7, [r4, #32]
 8008c4e:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8008c52:	fa9c fcac 	rbit	ip, ip
 8008c56:	fabc fc8c 	clz	ip, ip
 8008c5a:	fa07 f70c 	lsl.w	r7, r7, ip
 8008c5e:	433b      	orrs	r3, r7
 8008c60:	fa95 f5a5 	rbit	r5, r5
 8008c64:	fab5 f585 	clz	r5, r5
 8008c68:	40a9      	lsls	r1, r5
 8008c6a:	430b      	orrs	r3, r1
 8008c6c:	fa90 f1a0 	rbit	r1, r0
 8008c70:	fab1 f181 	clz	r1, r1
 8008c74:	408a      	lsls	r2, r1
 8008c76:	4313      	orrs	r3, r2
 8008c78:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
 8008c7c:	e770      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  return HAL_OK;
 8008c7e:	2000      	movs	r0, #0
 8008c80:	e567      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8008c82:	bf00      	nop
 8008c84:	40023800 	.word	0x40023800

08008c88 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit: pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c88:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tempreg = 0;
  
  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8008c8a:	4b80      	ldr	r3, [pc, #512]	; (8008e8c <HAL_RCCEx_GetPeriphCLKConfig+0x204>)
 8008c8c:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 8008c8e:	4b80      	ldr	r3, [pc, #512]	; (8008e90 <HAL_RCCEx_GetPeriphCLKConfig+0x208>)
 8008c90:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8008c94:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8008c98:	4011      	ands	r1, r2
 8008c9a:	fa92 f4a2 	rbit	r4, r2
 8008c9e:	fab4 f484 	clz	r4, r4
 8008ca2:	40e1      	lsrs	r1, r4
 8008ca4:	6041      	str	r1, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8008ca6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008caa:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
 8008cae:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8008cb2:	fa91 f5a1 	rbit	r5, r1
 8008cb6:	fab5 f585 	clz	r5, r5
 8008cba:	40ec      	lsrs	r4, r5
 8008cbc:	6104      	str	r4, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8008cbe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008cc2:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
 8008cc6:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 8008cca:	fa95 f6a5 	rbit	r6, r5
 8008cce:	fab6 f686 	clz	r6, r6
 8008cd2:	40f4      	lsrs	r4, r6
 8008cd4:	60c4      	str	r4, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8008cd6:	f8d3 6084 	ldr.w	r6, [r3, #132]	; 0x84
 8008cda:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8008cde:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
 8008ce2:	fa94 f7a4 	rbit	r7, r4
 8008ce6:	fab7 f787 	clz	r7, r7
 8008cea:	40fe      	lsrs	r6, r7
 8008cec:	6086      	str	r6, [r0, #8]
  
  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
 8008cee:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 8008cf2:	4016      	ands	r6, r2
 8008cf4:	fa92 f2a2 	rbit	r2, r2
 8008cf8:	fab2 f282 	clz	r2, r2
 8008cfc:	fa26 f202 	lsr.w	r2, r6, r2
 8008d00:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8008d02:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d06:	400a      	ands	r2, r1
 8008d08:	fa91 f6a1 	rbit	r6, r1
 8008d0c:	fab6 f686 	clz	r6, r6
 8008d10:	40f2      	lsrs	r2, r6
 8008d12:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
 8008d14:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d18:	402a      	ands	r2, r5
 8008d1a:	fa95 f5a5 	rbit	r5, r5
 8008d1e:	fab5 f585 	clz	r5, r5
 8008d22:	fa22 f505 	lsr.w	r5, r2, r5
 8008d26:	6185      	str	r5, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR)); 
 8008d28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d2c:	4022      	ands	r2, r4
 8008d2e:	fa94 f4a4 	rbit	r4, r4
 8008d32:	fab4 f484 	clz	r4, r4
 8008d36:	fa22 f404 	lsr.w	r4, r2, r4
 8008d3a:	61c4      	str	r4, [r0, #28]
  
  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLI2SDIVQ));
 8008d3c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008d40:	f002 021f 	and.w	r2, r2, #31
 8008d44:	241f      	movs	r4, #31
 8008d46:	fa94 f4a4 	rbit	r4, r4
 8008d4a:	fab4 f484 	clz	r4, r4
 8008d4e:	40e2      	lsrs	r2, r4
 8008d50:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVQ));
 8008d52:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008d56:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 8008d5a:	f44f 54f8 	mov.w	r4, #7936	; 0x1f00
 8008d5e:	fa94 f4a4 	rbit	r4, r4
 8008d62:	fab4 f484 	clz	r4, r4
 8008d66:	40e2      	lsrs	r2, r4
 8008d68:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVR));
 8008d6a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008d6e:	400a      	ands	r2, r1
 8008d70:	fa91 f1a1 	rbit	r1, r1
 8008d74:	fab1 f181 	clz	r1, r1
 8008d78:	fa22 f101 	lsr.w	r1, r2, r1
 8008d7c:	62c1      	str	r1, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8008d7e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008d82:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8008d86:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8008d88:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008d8c:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8008d90:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8008d92:	689a      	ldr	r2, [r3, #8]
 8008d94:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8008d98:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8008d9a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008d9e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8008da2:	6642      	str	r2, [r0, #100]	; 0x64
  
  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8008da4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008da8:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8008dac:	6682      	str	r2, [r0, #104]	; 0x68
  
  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8008dae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008db2:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8008db6:	66c2      	str	r2, [r0, #108]	; 0x6c
  
  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8008db8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008dbc:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8008dc0:	6702      	str	r2, [r0, #112]	; 0x70
  
  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8008dc2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008dc6:	f002 0203 	and.w	r2, r2, #3
 8008dca:	6442      	str	r2, [r0, #68]	; 0x44
  
  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8008dcc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008dd0:	f002 020c 	and.w	r2, r2, #12
 8008dd4:	6482      	str	r2, [r0, #72]	; 0x48
  
  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8008dd6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008dda:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8008dde:	64c2      	str	r2, [r0, #76]	; 0x4c
  
  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8008de0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008de4:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8008de8:	6502      	str	r2, [r0, #80]	; 0x50
  
  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8008dea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008dee:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008df2:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8008df4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008df8:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8008dfc:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8008dfe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008e02:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8008e06:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8008e08:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008e0c:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8008e10:	6602      	str	r2, [r0, #96]	; 0x60
  
  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008e12:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008e16:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 8008e1a:	6742      	str	r2, [r0, #116]	; 0x74
  
  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8008e1c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008e20:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8008e24:	6782      	str	r2, [r0, #120]	; 0x78
  
  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8008e26:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008e2a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008e2e:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008e30:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008e34:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8008e38:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 8008e3c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008e40:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8008e44:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
	
  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 8008e48:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008e4c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8008e50:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
 8008e54:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008e58:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8008e5c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8008e60:	6899      	ldr	r1, [r3, #8]
 8008e62:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8008e66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e68:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008e6c:	430a      	orrs	r2, r1
 8008e6e:	6302      	str	r2, [r0, #48]	; 0x30
  
  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8008e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e74:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8008e78:	d103      	bne.n	8008e82 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	6383      	str	r3, [r0, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8008e7e:	bcf0      	pop	{r4, r5, r6, r7}
 8008e80:	4770      	bx	lr
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8008e82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e86:	6383      	str	r3, [r0, #56]	; 0x38
}
 8008e88:	e7f9      	b.n	8008e7e <HAL_RCCEx_GetPeriphCLKConfig+0x1f6>
 8008e8a:	bf00      	nop
 8008e8c:	1cfffff1 	.word	0x1cfffff1
 8008e90:	40023800 	.word	0x40023800

08008e94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008e94:	b410      	push	{r4}
 8008e96:	4603      	mov	r3, r0
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
  
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008e98:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8008e9c:	d006      	beq.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x18>
  uint32_t frequency = 0;
 8008e9e:	2000      	movs	r0, #0
        break;
      }
    }
  }
  
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008ea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ea4:	d073      	beq.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
      }
    }
  }
  
  return frequency;
}
 8008ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eaa:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;   
 8008eac:	4a6f      	ldr	r2, [pc, #444]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008eae:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008eb2:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 8008eb6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008eba:	d064      	beq.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8008ebc:	d826      	bhi.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8008ebe:	b38a      	cbz	r2, 8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8008ec0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008ec4:	d120      	bne.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008ec6:	4a69      	ldr	r2, [pc, #420]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008ec8:	6852      	ldr	r2, [r2, #4]
 8008eca:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8008ece:	d152      	bne.n	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008ed0:	4a66      	ldr	r2, [pc, #408]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008ed2:	6852      	ldr	r2, [r2, #4]
 8008ed4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008ed8:	4865      	ldr	r0, [pc, #404]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8008eda:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008ede:	4a63      	ldr	r2, [pc, #396]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008ee0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 8008ee4:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008ee8:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
 8008eec:	f3c4 1488 	ubfx	r4, r4, #6, #9
 8008ef0:	fb00 f004 	mul.w	r0, r0, r4
 8008ef4:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8008ef8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8008efc:	f002 021f 	and.w	r2, r2, #31
 8008f00:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 8008f02:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 8008f06:	e7cb      	b.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
    switch (saiclocksource)
 8008f08:	2000      	movs	r0, #0
 8008f0a:	e7c9      	b.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
 8008f0c:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8008f10:	d106      	bne.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008f12:	4a56      	ldr	r2, [pc, #344]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008f14:	6852      	ldr	r2, [r2, #4]
 8008f16:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8008f1a:	d136      	bne.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
          frequency = HSI_VALUE;
 8008f1c:	4854      	ldr	r0, [pc, #336]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8008f1e:	e7bf      	b.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
    switch (saiclocksource)
 8008f20:	2000      	movs	r0, #0
 8008f22:	e7bd      	b.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008f24:	4a51      	ldr	r2, [pc, #324]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008f26:	6852      	ldr	r2, [r2, #4]
 8008f28:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8008f2c:	d11b      	bne.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008f2e:	4a4f      	ldr	r2, [pc, #316]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008f30:	6852      	ldr	r2, [r2, #4]
 8008f32:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008f36:	484e      	ldr	r0, [pc, #312]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8008f38:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008f3c:	4a4b      	ldr	r2, [pc, #300]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008f3e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8008f42:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008f46:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
 8008f4a:	f3c4 1488 	ubfx	r4, r4, #6, #9
 8008f4e:	fb00 f004 	mul.w	r0, r0, r4
 8008f52:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008f56:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8008f5a:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8008f5e:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg); 
 8008f60:	fbb0 f0f2 	udiv	r0, r0, r2
        break;       
 8008f64:	e79c      	b.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008f66:	4a41      	ldr	r2, [pc, #260]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008f68:	6852      	ldr	r2, [r2, #4]
 8008f6a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008f6e:	4841      	ldr	r0, [pc, #260]	; (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8008f70:	fbb0 f0f2 	udiv	r0, r0, r2
 8008f74:	e7e2      	b.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008f76:	4a3d      	ldr	r2, [pc, #244]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008f78:	6852      	ldr	r2, [r2, #4]
 8008f7a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008f7e:	483d      	ldr	r0, [pc, #244]	; (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8008f80:	fbb0 f0f2 	udiv	r0, r0, r2
 8008f84:	e7ab      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f86:	483c      	ldr	r0, [pc, #240]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 8008f88:	e78a      	b.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
          frequency = HSE_VALUE;
 8008f8a:	483a      	ldr	r0, [pc, #232]	; (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8008f8c:	e788      	b.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
    saiclocksource = RCC->DCKCFGR1;   
 8008f8e:	4b37      	ldr	r3, [pc, #220]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008f94:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (saiclocksource)
 8008f98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f9c:	d062      	beq.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008f9e:	d825      	bhi.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8008fa0:	b37b      	cbz	r3, 8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8008fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fa6:	f47f af7e 	bne.w	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008faa:	4b30      	ldr	r3, [pc, #192]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8008fb2:	d14f      	bne.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008fb4:	4b2d      	ldr	r3, [pc, #180]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fbc:	482c      	ldr	r0, [pc, #176]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8008fbe:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008fc2:	4b2a      	ldr	r3, [pc, #168]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008fc4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008fc8:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008fcc:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8008fd0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8008fd4:	fb00 f001 	mul.w	r0, r0, r1
 8008fd8:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8008fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fe0:	f003 031f 	and.w	r3, r3, #31
 8008fe4:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8008fe6:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8008fea:	e75c      	b.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
    switch (saiclocksource)
 8008fec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008ff0:	f47f af59 	bne.w	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008ff4:	4b1d      	ldr	r3, [pc, #116]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8008ffc:	d134      	bne.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
          frequency = HSI_VALUE;
 8008ffe:	481c      	ldr	r0, [pc, #112]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8009000:	e751      	b.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009002:	4b1a      	ldr	r3, [pc, #104]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800900a:	d11b      	bne.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800900c:	4b17      	ldr	r3, [pc, #92]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009014:	4816      	ldr	r0, [pc, #88]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8009016:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800901a:	4b14      	ldr	r3, [pc, #80]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800901c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009020:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009024:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8009028:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800902c:	fb00 f001 	mul.w	r0, r0, r1
 8009030:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009038:	f3c3 2304 	ubfx	r3, r3, #8, #5
 800903c:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg); 
 800903e:	fbb0 f0f3 	udiv	r0, r0, r3
        break;       
 8009042:	e730      	b.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009044:	4b09      	ldr	r3, [pc, #36]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800904c:	4809      	ldr	r0, [pc, #36]	; (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 800904e:	fbb0 f0f3 	udiv	r0, r0, r3
 8009052:	e7e2      	b.n	800901a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009054:	4b05      	ldr	r3, [pc, #20]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800905c:	4805      	ldr	r0, [pc, #20]	; (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 800905e:	fbb0 f0f3 	udiv	r0, r0, r3
 8009062:	e7ae      	b.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009064:	4804      	ldr	r0, [pc, #16]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 8009066:	e71e      	b.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
          frequency = HSE_VALUE;
 8009068:	4802      	ldr	r0, [pc, #8]	; (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
  return frequency;
 800906a:	e71c      	b.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 800906c:	40023800 	.word	0x40023800
 8009070:	00f42400 	.word	0x00f42400
 8009074:	017d7840 	.word	0x017d7840
 8009078:	00bb8000 	.word	0x00bb8000

0800907c <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
  
  if(mode == SAI_MODE_IT)
 800907c:	2901      	cmp	r1, #1
 800907e:	d00a      	beq.n	8009096 <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8009080:	2301      	movs	r3, #1
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009082:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8009084:	2a08      	cmp	r2, #8
 8009086:	d008      	beq.n	800909a <SAI_InterruptFlag+0x1e>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT|= SAI_IT_CNRDY;
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009088:	6842      	ldr	r2, [r0, #4]
 800908a:	3a02      	subs	r2, #2
 800908c:	2a01      	cmp	r2, #1
 800908e:	d90c      	bls.n	80090aa <SAI_InterruptFlag+0x2e>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 8009090:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 8009094:	4770      	bx	lr
    tmpIT|= SAI_IT_FREQ;
 8009096:	2309      	movs	r3, #9
 8009098:	e7f3      	b.n	8009082 <SAI_InterruptFlag+0x6>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800909a:	6842      	ldr	r2, [r0, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800909c:	2a01      	cmp	r2, #1
 800909e:	bf18      	it	ne
 80090a0:	2a03      	cmpne	r2, #3
 80090a2:	d1f1      	bne.n	8009088 <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_CNRDY;
 80090a4:	f043 0310 	orr.w	r3, r3, #16
 80090a8:	e7ee      	b.n	8009088 <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80090aa:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 80090ae:	4770      	bx	lr

080090b0 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80090b0:	4b0e      	ldr	r3, [pc, #56]	; (80090ec <SAI_Disable+0x3c>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a0e      	ldr	r2, [pc, #56]	; (80090f0 <SAI_Disable+0x40>)
 80090b6:	fba2 2303 	umull	r2, r3, r2, r3
 80090ba:	0b1b      	lsrs	r3, r3, #12
 80090bc:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80090be:	6801      	ldr	r1, [r0, #0]
 80090c0:	680a      	ldr	r2, [r1, #0]
 80090c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80090c6:	600a      	str	r2, [r1, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80090c8:	461a      	mov	r2, r3
 80090ca:	3b01      	subs	r3, #1
 80090cc:	b132      	cbz	r2, 80090dc <SAI_Disable+0x2c>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80090ce:	6802      	ldr	r2, [r0, #0]
 80090d0:	6812      	ldr	r2, [r2, #0]
 80090d2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80090d6:	d1f7      	bne.n	80090c8 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80090d8:	2000      	movs	r0, #0

  return status;
}
 80090da:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80090dc:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80090e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090e4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 80090e8:	2003      	movs	r0, #3
      break;
 80090ea:	4770      	bx	lr
 80090ec:	20000190 	.word	0x20000190
 80090f0:	95cbec1b 	.word	0x95cbec1b

080090f4 <HAL_SAI_MspInit>:
}
 80090f4:	4770      	bx	lr
	...

080090f8 <HAL_SAI_Init>:
  if(hsai == NULL)
 80090f8:	2800      	cmp	r0, #0
 80090fa:	f000 80eb 	beq.w	80092d4 <HAL_SAI_Init+0x1dc>
{
 80090fe:	b570      	push	{r4, r5, r6, lr}
 8009100:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_RESET)
 8009102:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8009106:	2b00      	cmp	r3, #0
 8009108:	f000 80b9 	beq.w	800927e <HAL_SAI_Init+0x186>
  hsai->State = HAL_SAI_STATE_BUSY;
 800910c:	2302      	movs	r3, #2
 800910e:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8009112:	4620      	mov	r0, r4
 8009114:	f7ff ffcc 	bl	80090b0 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 8009118:	68e3      	ldr	r3, [r4, #12]
 800911a:	2b01      	cmp	r3, #1
 800911c:	f000 80b4 	beq.w	8009288 <HAL_SAI_Init+0x190>
 8009120:	2b02      	cmp	r3, #2
 8009122:	f040 80b3 	bne.w	800928c <HAL_SAI_Init+0x194>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009126:	2220      	movs	r2, #32
  switch(hsai->Init.Synchro)
 8009128:	68a3      	ldr	r3, [r4, #8]
 800912a:	2b02      	cmp	r3, #2
 800912c:	f000 80b8 	beq.w	80092a0 <HAL_SAI_Init+0x1a8>
 8009130:	2b03      	cmp	r3, #3
 8009132:	f000 80b0 	beq.w	8009296 <HAL_SAI_Init+0x19e>
 8009136:	2b01      	cmp	r3, #1
 8009138:	f000 80aa 	beq.w	8009290 <HAL_SAI_Init+0x198>
 800913c:	2500      	movs	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800913e:	6823      	ldr	r3, [r4, #0]
 8009140:	4865      	ldr	r0, [pc, #404]	; (80092d8 <HAL_SAI_Init+0x1e0>)
 8009142:	4966      	ldr	r1, [pc, #408]	; (80092dc <HAL_SAI_Init+0x1e4>)
 8009144:	428b      	cmp	r3, r1
 8009146:	bf18      	it	ne
 8009148:	4283      	cmpne	r3, r0
 800914a:	f040 80ac 	bne.w	80092a6 <HAL_SAI_Init+0x1ae>
    SAI1->GCR = tmpregisterGCR;
 800914e:	4b64      	ldr	r3, [pc, #400]	; (80092e0 <HAL_SAI_Init+0x1e8>)
 8009150:	601a      	str	r2, [r3, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009152:	69e3      	ldr	r3, [r4, #28]
 8009154:	b323      	cbz	r3, 80091a0 <HAL_SAI_Init+0xa8>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8009156:	6823      	ldr	r3, [r4, #0]
 8009158:	495f      	ldr	r1, [pc, #380]	; (80092d8 <HAL_SAI_Init+0x1e0>)
 800915a:	4a60      	ldr	r2, [pc, #384]	; (80092dc <HAL_SAI_Init+0x1e4>)
 800915c:	4293      	cmp	r3, r2
 800915e:	bf18      	it	ne
 8009160:	428b      	cmpne	r3, r1
 8009162:	f000 80a3 	beq.w	80092ac <HAL_SAI_Init+0x1b4>
    uint32_t freq = 0;
 8009166:	2000      	movs	r0, #0
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8009168:	6823      	ldr	r3, [r4, #0]
 800916a:	495e      	ldr	r1, [pc, #376]	; (80092e4 <HAL_SAI_Init+0x1ec>)
 800916c:	4a5e      	ldr	r2, [pc, #376]	; (80092e8 <HAL_SAI_Init+0x1f0>)
 800916e:	4293      	cmp	r3, r2
 8009170:	bf18      	it	ne
 8009172:	428b      	cmpne	r3, r1
 8009174:	f000 809f 	beq.w	80092b6 <HAL_SAI_Init+0x1be>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8009178:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800917c:	0040      	lsls	r0, r0, #1
 800917e:	69e3      	ldr	r3, [r4, #28]
 8009180:	025b      	lsls	r3, r3, #9
 8009182:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8009186:	4b59      	ldr	r3, [pc, #356]	; (80092ec <HAL_SAI_Init+0x1f4>)
 8009188:	fba3 2300 	umull	r2, r3, r3, r0
 800918c:	08db      	lsrs	r3, r3, #3
 800918e:	6223      	str	r3, [r4, #32]
    if((tmpval % 10) > 8)
 8009190:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009194:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8009198:	2808      	cmp	r0, #8
 800919a:	d901      	bls.n	80091a0 <HAL_SAI_Init+0xa8>
      hsai->Init.Mckdiv+= 1;
 800919c:	3301      	adds	r3, #1
 800919e:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80091a0:	6862      	ldr	r2, [r4, #4]
 80091a2:	2a02      	cmp	r2, #2
 80091a4:	bf14      	ite	ne
 80091a6:	2300      	movne	r3, #0
 80091a8:	2301      	moveq	r3, #1
 80091aa:	2a00      	cmp	r2, #0
 80091ac:	bf08      	it	eq
 80091ae:	2301      	moveq	r3, #1
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f000 8087 	beq.w	80092c4 <HAL_SAI_Init+0x1cc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80091b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	f000 8081 	beq.w	80092c0 <HAL_SAI_Init+0x1c8>
 80091be:	f44f 7600 	mov.w	r6, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80091c2:	6821      	ldr	r1, [r4, #0]
 80091c4:	680b      	ldr	r3, [r1, #0]
 80091c6:	4a4a      	ldr	r2, [pc, #296]	; (80092f0 <HAL_SAI_Init+0x1f8>)
 80091c8:	401a      	ands	r2, r3
 80091ca:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80091cc:	6822      	ldr	r2, [r4, #0]
 80091ce:	6811      	ldr	r1, [r2, #0]
 80091d0:	6863      	ldr	r3, [r4, #4]
 80091d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80091d4:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80091d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80091d8:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80091da:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80091dc:	4303      	orrs	r3, r0
 80091de:	4333      	orrs	r3, r6
                        ckstr_bits | syncen_bits |                               \
 80091e0:	432b      	orrs	r3, r5
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80091e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80091e4:	4303      	orrs	r3, r0
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80091e6:	6920      	ldr	r0, [r4, #16]
 80091e8:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80091ea:	6960      	ldr	r0, [r4, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80091ec:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80091ee:	6a20      	ldr	r0, [r4, #32]
 80091f0:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80091f4:	430b      	orrs	r3, r1
 80091f6:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80091f8:	6822      	ldr	r2, [r4, #0]
 80091fa:	6851      	ldr	r1, [r2, #4]
 80091fc:	4b3d      	ldr	r3, [pc, #244]	; (80092f4 <HAL_SAI_Init+0x1fc>)
 80091fe:	400b      	ands	r3, r1
 8009200:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009202:	6821      	ldr	r1, [r4, #0]
 8009204:	684a      	ldr	r2, [r1, #4]
 8009206:	69a3      	ldr	r3, [r4, #24]
 8009208:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800920a:	4303      	orrs	r3, r0
 800920c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800920e:	4303      	orrs	r3, r0
 8009210:	4313      	orrs	r3, r2
 8009212:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009214:	6822      	ldr	r2, [r4, #0]
 8009216:	6891      	ldr	r1, [r2, #8]
 8009218:	4b37      	ldr	r3, [pc, #220]	; (80092f8 <HAL_SAI_Init+0x200>)
 800921a:	400b      	ands	r3, r1
 800921c:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800921e:	6820      	ldr	r0, [r4, #0]
 8009220:	6882      	ldr	r2, [r0, #8]
 8009222:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009224:	3b01      	subs	r3, #1
                          hsai->FrameInit.FSOffset |
 8009226:	6d21      	ldr	r1, [r4, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8009228:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSDefinition |
 800922a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800922c:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSPolarity   |
 800922e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8009230:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009232:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009234:	3901      	subs	r1, #1
                          hsai->FrameInit.FSPolarity   |
 8009236:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800923a:	4313      	orrs	r3, r2
 800923c:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800923e:	6822      	ldr	r2, [r4, #0]
 8009240:	68d3      	ldr	r3, [r2, #12]
 8009242:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8009246:	f023 030f 	bic.w	r3, r3, #15
 800924a:	041b      	lsls	r3, r3, #16
 800924c:	0c1b      	lsrs	r3, r3, #16
 800924e:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009250:	6820      	ldr	r0, [r4, #0]
 8009252:	68c2      	ldr	r2, [r0, #12]
 8009254:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009256:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009258:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800925a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800925c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009260:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009262:	3901      	subs	r1, #1
 8009264:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009268:	4313      	orrs	r3, r2
 800926a:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800926c:	2000      	movs	r0, #0
 800926e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  hsai->State= HAL_SAI_STATE_READY;
 8009272:	2301      	movs	r3, #1
 8009274:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8009278:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800927c:	bd70      	pop	{r4, r5, r6, pc}
    hsai->Lock = HAL_UNLOCKED;
 800927e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8009282:	f7ff ff37 	bl	80090f4 <HAL_SAI_MspInit>
 8009286:	e741      	b.n	800910c <HAL_SAI_Init+0x14>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009288:	2210      	movs	r2, #16
 800928a:	e74d      	b.n	8009128 <HAL_SAI_Init+0x30>
  switch(hsai->Init.SynchroExt)
 800928c:	2200      	movs	r2, #0
 800928e:	e74b      	b.n	8009128 <HAL_SAI_Init+0x30>
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8009290:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8009294:	e753      	b.n	800913e <HAL_SAI_Init+0x46>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009296:	f042 0201 	orr.w	r2, r2, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800929a:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 800929e:	e74e      	b.n	800913e <HAL_SAI_Init+0x46>
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80092a0:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80092a4:	e74b      	b.n	800913e <HAL_SAI_Init+0x46>
    SAI2->GCR = tmpregisterGCR;
 80092a6:	4b15      	ldr	r3, [pc, #84]	; (80092fc <HAL_SAI_Init+0x204>)
 80092a8:	601a      	str	r2, [r3, #0]
 80092aa:	e752      	b.n	8009152 <HAL_SAI_Init+0x5a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80092ac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80092b0:	f7ff fdf0 	bl	8008e94 <HAL_RCCEx_GetPeriphCLKFreq>
 80092b4:	e758      	b.n	8009168 <HAL_SAI_Init+0x70>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80092b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80092ba:	f7ff fdeb 	bl	8008e94 <HAL_RCCEx_GetPeriphCLKFreq>
 80092be:	e75b      	b.n	8009178 <HAL_SAI_Init+0x80>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80092c0:	2600      	movs	r6, #0
 80092c2:	e77e      	b.n	80091c2 <HAL_SAI_Init+0xca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80092c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d001      	beq.n	80092ce <HAL_SAI_Init+0x1d6>
 80092ca:	2600      	movs	r6, #0
 80092cc:	e779      	b.n	80091c2 <HAL_SAI_Init+0xca>
 80092ce:	f44f 7600 	mov.w	r6, #512	; 0x200
 80092d2:	e776      	b.n	80091c2 <HAL_SAI_Init+0xca>
    return HAL_ERROR;
 80092d4:	2001      	movs	r0, #1
}
 80092d6:	4770      	bx	lr
 80092d8:	40015804 	.word	0x40015804
 80092dc:	40015824 	.word	0x40015824
 80092e0:	40015800 	.word	0x40015800
 80092e4:	40015c04 	.word	0x40015c04
 80092e8:	40015c24 	.word	0x40015c24
 80092ec:	cccccccd 	.word	0xcccccccd
 80092f0:	ff05c010 	.word	0xff05c010
 80092f4:	ffff1ff0 	.word	0xffff1ff0
 80092f8:	fff88000 	.word	0xfff88000
 80092fc:	40015c00 	.word	0x40015c00

08009300 <HAL_SAI_MspDeInit>:
}
 8009300:	4770      	bx	lr

08009302 <HAL_SAI_DeInit>:
  if(hsai == NULL)
 8009302:	b1e8      	cbz	r0, 8009340 <HAL_SAI_DeInit+0x3e>
{
 8009304:	b538      	push	{r3, r4, r5, lr}
 8009306:	4604      	mov	r4, r0
  hsai->State = HAL_SAI_STATE_BUSY;
 8009308:	2302      	movs	r3, #2
 800930a:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  hsai->Instance->IMR = 0;
 800930e:	6803      	ldr	r3, [r0, #0]
 8009310:	2500      	movs	r5, #0
 8009312:	611d      	str	r5, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009314:	6803      	ldr	r3, [r0, #0]
 8009316:	f04f 32ff 	mov.w	r2, #4294967295
 800931a:	619a      	str	r2, [r3, #24]
  SAI_Disable(hsai);
 800931c:	f7ff fec8 	bl	80090b0 <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009320:	6822      	ldr	r2, [r4, #0]
 8009322:	6853      	ldr	r3, [r2, #4]
 8009324:	f043 0308 	orr.w	r3, r3, #8
 8009328:	6053      	str	r3, [r2, #4]
  HAL_SAI_MspDeInit(hsai);
 800932a:	4620      	mov	r0, r4
 800932c:	f7ff ffe8 	bl	8009300 <HAL_SAI_MspDeInit>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009330:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  hsai->State = HAL_SAI_STATE_RESET;
 8009334:	f884 507d 	strb.w	r5, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8009338:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
  return HAL_OK;
 800933c:	4628      	mov	r0, r5
}
 800933e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009340:	2001      	movs	r0, #1
}
 8009342:	4770      	bx	lr

08009344 <HAL_SAI_DMAStop>:
  __HAL_LOCK(hsai);
 8009344:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8009348:	2b01      	cmp	r3, #1
 800934a:	d01d      	beq.n	8009388 <HAL_SAI_DMAStop+0x44>
{
 800934c:	b510      	push	{r4, lr}
 800934e:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 8009350:	2301      	movs	r3, #1
 8009352:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009356:	6802      	ldr	r2, [r0, #0]
 8009358:	6813      	ldr	r3, [r2, #0]
 800935a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800935e:	6013      	str	r3, [r2, #0]
  if(hsai->hdmatx != NULL)
 8009360:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8009362:	b110      	cbz	r0, 800936a <HAL_SAI_DMAStop+0x26>
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8009364:	f7fc faa5 	bl	80058b2 <HAL_DMA_Abort>
 8009368:	b980      	cbnz	r0, 800938c <HAL_SAI_DMAStop+0x48>
  if(hsai->hdmarx != NULL)
 800936a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800936c:	b110      	cbz	r0, 8009374 <HAL_SAI_DMAStop+0x30>
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800936e:	f7fc faa0 	bl	80058b2 <HAL_DMA_Abort>
 8009372:	b968      	cbnz	r0, 8009390 <HAL_SAI_DMAStop+0x4c>
  SAI_Disable(hsai);
 8009374:	4620      	mov	r0, r4
 8009376:	f7ff fe9b 	bl	80090b0 <SAI_Disable>
  hsai->State = HAL_SAI_STATE_READY;
 800937a:	2301      	movs	r3, #1
 800937c:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8009380:	2000      	movs	r0, #0
 8009382:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8009386:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hsai);
 8009388:	2002      	movs	r0, #2
}
 800938a:	4770      	bx	lr
      return HAL_ERROR;
 800938c:	2001      	movs	r0, #1
 800938e:	e7fa      	b.n	8009386 <HAL_SAI_DMAStop+0x42>
      return HAL_ERROR;
 8009390:	2001      	movs	r0, #1
 8009392:	e7f8      	b.n	8009386 <HAL_SAI_DMAStop+0x42>

08009394 <HAL_SAI_Transmit_DMA>:
{
 8009394:	b570      	push	{r4, r5, r6, lr}
  if((pData == NULL) || (Size == 0))
 8009396:	4613      	mov	r3, r2
 8009398:	fab2 f282 	clz	r2, r2
 800939c:	0952      	lsrs	r2, r2, #5
 800939e:	2900      	cmp	r1, #0
 80093a0:	bf08      	it	eq
 80093a2:	2201      	moveq	r2, #1
 80093a4:	2a00      	cmp	r2, #0
 80093a6:	d14b      	bne.n	8009440 <HAL_SAI_Transmit_DMA+0xac>
 80093a8:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_READY)
 80093aa:	f894 507d 	ldrb.w	r5, [r4, #125]	; 0x7d
 80093ae:	b2ed      	uxtb	r5, r5
 80093b0:	2d01      	cmp	r5, #1
 80093b2:	d148      	bne.n	8009446 <HAL_SAI_Transmit_DMA+0xb2>
    __HAL_LOCK(hsai);
 80093b4:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 80093b8:	2a01      	cmp	r2, #1
 80093ba:	d046      	beq.n	800944a <HAL_SAI_Transmit_DMA+0xb6>
 80093bc:	2201      	movs	r2, #1
 80093be:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 80093c2:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 80093c4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 80093c8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80093cc:	2300      	movs	r3, #0
 80093ce:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80093d2:	2212      	movs	r2, #18
 80093d4:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80093d8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80093da:	491d      	ldr	r1, [pc, #116]	; (8009450 <HAL_SAI_Transmit_DMA+0xbc>)
 80093dc:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80093de:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80093e0:	491c      	ldr	r1, [pc, #112]	; (8009454 <HAL_SAI_Transmit_DMA+0xc0>)
 80093e2:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80093e4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80093e6:	491c      	ldr	r1, [pc, #112]	; (8009458 <HAL_SAI_Transmit_DMA+0xc4>)
 80093e8:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 80093ea:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80093ec:	6513      	str	r3, [r2, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80093ee:	6822      	ldr	r2, [r4, #0]
 80093f0:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80093f4:	321c      	adds	r2, #28
 80093f6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80093f8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80093fa:	f7fc fa20 	bl	800583e <HAL_DMA_Start_IT>
 80093fe:	4606      	mov	r6, r0
 8009400:	b118      	cbz	r0, 800940a <HAL_SAI_Transmit_DMA+0x76>
      __HAL_UNLOCK(hsai);
 8009402:	2300      	movs	r3, #0
 8009404:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
      return  HAL_ERROR;
 8009408:	e01b      	b.n	8009442 <HAL_SAI_Transmit_DMA+0xae>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8009412:	d103      	bne.n	800941c <HAL_SAI_Transmit_DMA+0x88>
      __HAL_SAI_ENABLE(hsai);
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800941a:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800941c:	2100      	movs	r1, #0
 800941e:	4620      	mov	r0, r4
 8009420:	f7ff fe2c 	bl	800907c <SAI_InterruptFlag>
 8009424:	6822      	ldr	r2, [r4, #0]
 8009426:	6913      	ldr	r3, [r2, #16]
 8009428:	4303      	orrs	r3, r0
 800942a:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800942c:	6822      	ldr	r2, [r4, #0]
 800942e:	6813      	ldr	r3, [r2, #0]
 8009430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009434:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8009436:	2300      	movs	r3, #0
 8009438:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 800943c:	4635      	mov	r5, r6
 800943e:	e000      	b.n	8009442 <HAL_SAI_Transmit_DMA+0xae>
    return  HAL_ERROR;
 8009440:	2501      	movs	r5, #1
}
 8009442:	4628      	mov	r0, r5
 8009444:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8009446:	2502      	movs	r5, #2
 8009448:	e7fb      	b.n	8009442 <HAL_SAI_Transmit_DMA+0xae>
    __HAL_LOCK(hsai);
 800944a:	2502      	movs	r5, #2
 800944c:	e7f9      	b.n	8009442 <HAL_SAI_Transmit_DMA+0xae>
 800944e:	bf00      	nop
 8009450:	08009561 	.word	0x08009561
 8009454:	08009525 	.word	0x08009525
 8009458:	080095b1 	.word	0x080095b1

0800945c <HAL_SAI_Receive_DMA>:
{
 800945c:	b570      	push	{r4, r5, r6, lr}
  if((pData == NULL) || (Size == 0))
 800945e:	4613      	mov	r3, r2
 8009460:	fab2 f282 	clz	r2, r2
 8009464:	0952      	lsrs	r2, r2, #5
 8009466:	2900      	cmp	r1, #0
 8009468:	bf08      	it	eq
 800946a:	2201      	moveq	r2, #1
 800946c:	2a00      	cmp	r2, #0
 800946e:	d14b      	bne.n	8009508 <HAL_SAI_Receive_DMA+0xac>
 8009470:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_READY)
 8009472:	f894 507d 	ldrb.w	r5, [r4, #125]	; 0x7d
 8009476:	b2ed      	uxtb	r5, r5
 8009478:	2d01      	cmp	r5, #1
 800947a:	d148      	bne.n	800950e <HAL_SAI_Receive_DMA+0xb2>
    __HAL_LOCK(hsai);
 800947c:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 8009480:	2a01      	cmp	r2, #1
 8009482:	d046      	beq.n	8009512 <HAL_SAI_Receive_DMA+0xb6>
 8009484:	2201      	movs	r2, #1
 8009486:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 800948a:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 800948c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 8009490:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009494:	2300      	movs	r3, #0
 8009496:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800949a:	2222      	movs	r2, #34	; 0x22
 800949c:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80094a0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80094a2:	491d      	ldr	r1, [pc, #116]	; (8009518 <HAL_SAI_Receive_DMA+0xbc>)
 80094a4:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80094a6:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80094a8:	491c      	ldr	r1, [pc, #112]	; (800951c <HAL_SAI_Receive_DMA+0xc0>)
 80094aa:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80094ac:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80094ae:	491c      	ldr	r1, [pc, #112]	; (8009520 <HAL_SAI_Receive_DMA+0xc4>)
 80094b0:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 80094b2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80094b4:	6513      	str	r3, [r2, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80094b6:	6821      	ldr	r1, [r4, #0]
 80094b8:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80094bc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094be:	311c      	adds	r1, #28
 80094c0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80094c2:	f7fc f9bc 	bl	800583e <HAL_DMA_Start_IT>
 80094c6:	4606      	mov	r6, r0
 80094c8:	b118      	cbz	r0, 80094d2 <HAL_SAI_Receive_DMA+0x76>
      __HAL_UNLOCK(hsai);
 80094ca:	2300      	movs	r3, #0
 80094cc:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
      return  HAL_ERROR;
 80094d0:	e01b      	b.n	800950a <HAL_SAI_Receive_DMA+0xae>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80094da:	d103      	bne.n	80094e4 <HAL_SAI_Receive_DMA+0x88>
      __HAL_SAI_ENABLE(hsai);
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80094e2:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80094e4:	2100      	movs	r1, #0
 80094e6:	4620      	mov	r0, r4
 80094e8:	f7ff fdc8 	bl	800907c <SAI_InterruptFlag>
 80094ec:	6822      	ldr	r2, [r4, #0]
 80094ee:	6913      	ldr	r3, [r2, #16]
 80094f0:	4303      	orrs	r3, r0
 80094f2:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80094f4:	6822      	ldr	r2, [r4, #0]
 80094f6:	6813      	ldr	r3, [r2, #0]
 80094f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094fc:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 80094fe:	2300      	movs	r3, #0
 8009500:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8009504:	4635      	mov	r5, r6
 8009506:	e000      	b.n	800950a <HAL_SAI_Receive_DMA+0xae>
    return  HAL_ERROR;
 8009508:	2501      	movs	r5, #1
}
 800950a:	4628      	mov	r0, r5
 800950c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800950e:	2502      	movs	r5, #2
 8009510:	e7fb      	b.n	800950a <HAL_SAI_Receive_DMA+0xae>
    __HAL_LOCK(hsai);
 8009512:	2502      	movs	r5, #2
 8009514:	e7f9      	b.n	800950a <HAL_SAI_Receive_DMA+0xae>
 8009516:	bf00      	nop
 8009518:	080095a7 	.word	0x080095a7
 800951c:	0800956b 	.word	0x0800956b
 8009520:	080095b1 	.word	0x080095b1

08009524 <SAI_DMATxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8009524:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 8009526:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8009528:	6803      	ldr	r3, [r0, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009530:	d112      	bne.n	8009558 <SAI_DMATxCplt+0x34>
  {
    hsai->XferCount = 0;
 8009532:	2100      	movs	r1, #0
 8009534:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    
    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009538:	6822      	ldr	r2, [r4, #0]
 800953a:	6813      	ldr	r3, [r2, #0]
 800953c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009540:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009542:	4620      	mov	r0, r4
 8009544:	f7ff fd9a 	bl	800907c <SAI_InterruptFlag>
 8009548:	6822      	ldr	r2, [r4, #0]
 800954a:	6913      	ldr	r3, [r2, #16]
 800954c:	ea23 0300 	bic.w	r3, r3, r0
 8009550:	6113      	str	r3, [r2, #16]
    
    hsai->State= HAL_SAI_STATE_READY;
 8009552:	2301      	movs	r3, #1
 8009554:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_TxCpltCallback(hsai);
 8009558:	4620      	mov	r0, r4
 800955a:	f7f8 faf3 	bl	8001b44 <HAL_SAI_TxCpltCallback>
}
 800955e:	bd10      	pop	{r4, pc}

08009560 <SAI_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009560:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_TxHalfCpltCallback(hsai);
 8009562:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8009564:	f7f8 faf2 	bl	8001b4c <HAL_SAI_TxHalfCpltCallback>
}
 8009568:	bd08      	pop	{r3, pc}

0800956a <SAI_DMARxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800956a:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800956c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 800956e:	6803      	ldr	r3, [r0, #0]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009576:	d112      	bne.n	800959e <SAI_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009578:	6822      	ldr	r2, [r4, #0]
 800957a:	6813      	ldr	r3, [r2, #0]
 800957c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009580:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 8009582:	2100      	movs	r1, #0
 8009584:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009588:	4620      	mov	r0, r4
 800958a:	f7ff fd77 	bl	800907c <SAI_InterruptFlag>
 800958e:	6822      	ldr	r2, [r4, #0]
 8009590:	6913      	ldr	r3, [r2, #16]
 8009592:	ea23 0300 	bic.w	r3, r3, r0
 8009596:	6113      	str	r3, [r2, #16]
    
    hsai->State = HAL_SAI_STATE_READY;
 8009598:	2301      	movs	r3, #1
 800959a:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_RxCpltCallback(hsai);
 800959e:	4620      	mov	r0, r4
 80095a0:	f7f8 fdde 	bl	8002160 <HAL_SAI_RxCpltCallback>
}
 80095a4:	bd10      	pop	{r4, pc}

080095a6 <SAI_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80095a6:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_RxHalfCpltCallback(hsai);
 80095a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80095aa:	f7f8 fe3d 	bl	8002228 <HAL_SAI_RxHalfCpltCallback>
}
 80095ae:	bd08      	pop	{r3, pc}

080095b0 <SAI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80095b0:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80095b2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80095b4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80095b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095bc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80095c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80095c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d007      	beq.n	80095d8 <SAI_DMAError+0x28>
 80095c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80095ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d003      	beq.n	80095d8 <SAI_DMAError+0x28>

    /* Initialize XferCount */
    hsai->XferCount = 0U;
  }
  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 80095d0:	4620      	mov	r0, r4
 80095d2:	f7f8 fe2f 	bl	8002234 <HAL_SAI_ErrorCallback>
}
 80095d6:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80095d8:	6822      	ldr	r2, [r4, #0]
 80095da:	6813      	ldr	r3, [r2, #0]
 80095dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80095e0:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 80095e2:	4620      	mov	r0, r4
 80095e4:	f7ff fd64 	bl	80090b0 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 80095e8:	2301      	movs	r3, #1
 80095ea:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    hsai->XferCount = 0U;
 80095ee:	2300      	movs	r3, #0
 80095f0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 80095f4:	e7ec      	b.n	80095d0 <SAI_DMAError+0x20>

080095f6 <HAL_SAI_GetState>:
  return hsai->State;
 80095f6:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 80095fa:	4770      	bx	lr

080095fc <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095fc:	4770      	bx	lr

080095fe <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095fe:	4770      	bx	lr

08009600 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009600:	4770      	bx	lr

08009602 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009602:	4770      	bx	lr

08009604 <HAL_TIM_IRQHandler>:
{
 8009604:	b510      	push	{r4, lr}
 8009606:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009608:	6803      	ldr	r3, [r0, #0]
 800960a:	691a      	ldr	r2, [r3, #16]
 800960c:	f012 0f02 	tst.w	r2, #2
 8009610:	d011      	beq.n	8009636 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8009612:	68da      	ldr	r2, [r3, #12]
 8009614:	f012 0f02 	tst.w	r2, #2
 8009618:	d00d      	beq.n	8009636 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800961a:	f06f 0202 	mvn.w	r2, #2
 800961e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009620:	2301      	movs	r3, #1
 8009622:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8009624:	6803      	ldr	r3, [r0, #0]
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	f013 0f03 	tst.w	r3, #3
 800962c:	d079      	beq.n	8009722 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800962e:	f7ff ffe6 	bl	80095fe <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009632:	2300      	movs	r3, #0
 8009634:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	691a      	ldr	r2, [r3, #16]
 800963a:	f012 0f04 	tst.w	r2, #4
 800963e:	d012      	beq.n	8009666 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8009640:	68da      	ldr	r2, [r3, #12]
 8009642:	f012 0f04 	tst.w	r2, #4
 8009646:	d00e      	beq.n	8009666 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009648:	f06f 0204 	mvn.w	r2, #4
 800964c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800964e:	2302      	movs	r3, #2
 8009650:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8009652:	6823      	ldr	r3, [r4, #0]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	f413 7f40 	tst.w	r3, #768	; 0x300
 800965a:	d068      	beq.n	800972e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800965c:	4620      	mov	r0, r4
 800965e:	f7ff ffce 	bl	80095fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009662:	2300      	movs	r3, #0
 8009664:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	691a      	ldr	r2, [r3, #16]
 800966a:	f012 0f08 	tst.w	r2, #8
 800966e:	d012      	beq.n	8009696 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8009670:	68da      	ldr	r2, [r3, #12]
 8009672:	f012 0f08 	tst.w	r2, #8
 8009676:	d00e      	beq.n	8009696 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009678:	f06f 0208 	mvn.w	r2, #8
 800967c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800967e:	2304      	movs	r3, #4
 8009680:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	69db      	ldr	r3, [r3, #28]
 8009686:	f013 0f03 	tst.w	r3, #3
 800968a:	d057      	beq.n	800973c <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800968c:	4620      	mov	r0, r4
 800968e:	f7ff ffb6 	bl	80095fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009692:	2300      	movs	r3, #0
 8009694:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	691a      	ldr	r2, [r3, #16]
 800969a:	f012 0f10 	tst.w	r2, #16
 800969e:	d012      	beq.n	80096c6 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80096a0:	68da      	ldr	r2, [r3, #12]
 80096a2:	f012 0f10 	tst.w	r2, #16
 80096a6:	d00e      	beq.n	80096c6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80096a8:	f06f 0210 	mvn.w	r2, #16
 80096ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80096ae:	2308      	movs	r3, #8
 80096b0:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80096ba:	d046      	beq.n	800974a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80096bc:	4620      	mov	r0, r4
 80096be:	f7ff ff9e 	bl	80095fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096c2:	2300      	movs	r3, #0
 80096c4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	691a      	ldr	r2, [r3, #16]
 80096ca:	f012 0f01 	tst.w	r2, #1
 80096ce:	d003      	beq.n	80096d8 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80096d0:	68da      	ldr	r2, [r3, #12]
 80096d2:	f012 0f01 	tst.w	r2, #1
 80096d6:	d13f      	bne.n	8009758 <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80096d8:	6823      	ldr	r3, [r4, #0]
 80096da:	691a      	ldr	r2, [r3, #16]
 80096dc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80096e0:	d003      	beq.n	80096ea <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80096e2:	68da      	ldr	r2, [r3, #12]
 80096e4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80096e8:	d13d      	bne.n	8009766 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80096ea:	6823      	ldr	r3, [r4, #0]
 80096ec:	691a      	ldr	r2, [r3, #16]
 80096ee:	f412 7f80 	tst.w	r2, #256	; 0x100
 80096f2:	d003      	beq.n	80096fc <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80096fa:	d13b      	bne.n	8009774 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	691a      	ldr	r2, [r3, #16]
 8009700:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009704:	d003      	beq.n	800970e <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8009706:	68da      	ldr	r2, [r3, #12]
 8009708:	f012 0f40 	tst.w	r2, #64	; 0x40
 800970c:	d139      	bne.n	8009782 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800970e:	6823      	ldr	r3, [r4, #0]
 8009710:	691a      	ldr	r2, [r3, #16]
 8009712:	f012 0f20 	tst.w	r2, #32
 8009716:	d003      	beq.n	8009720 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8009718:	68da      	ldr	r2, [r3, #12]
 800971a:	f012 0f20 	tst.w	r2, #32
 800971e:	d137      	bne.n	8009790 <HAL_TIM_IRQHandler+0x18c>
}
 8009720:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009722:	f7ff ff6b 	bl	80095fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009726:	4620      	mov	r0, r4
 8009728:	f7ff ff6a 	bl	8009600 <HAL_TIM_PWM_PulseFinishedCallback>
 800972c:	e781      	b.n	8009632 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800972e:	4620      	mov	r0, r4
 8009730:	f7ff ff64 	bl	80095fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009734:	4620      	mov	r0, r4
 8009736:	f7ff ff63 	bl	8009600 <HAL_TIM_PWM_PulseFinishedCallback>
 800973a:	e792      	b.n	8009662 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800973c:	4620      	mov	r0, r4
 800973e:	f7ff ff5d 	bl	80095fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8009742:	4620      	mov	r0, r4
 8009744:	f7ff ff5c 	bl	8009600 <HAL_TIM_PWM_PulseFinishedCallback>
 8009748:	e7a3      	b.n	8009692 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800974a:	4620      	mov	r0, r4
 800974c:	f7ff ff56 	bl	80095fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009750:	4620      	mov	r0, r4
 8009752:	f7ff ff55 	bl	8009600 <HAL_TIM_PWM_PulseFinishedCallback>
 8009756:	e7b4      	b.n	80096c2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009758:	f06f 0201 	mvn.w	r2, #1
 800975c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800975e:	4620      	mov	r0, r4
 8009760:	f003 f8ac 	bl	800c8bc <HAL_TIM_PeriodElapsedCallback>
 8009764:	e7b8      	b.n	80096d8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009766:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800976a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800976c:	4620      	mov	r0, r4
 800976e:	f000 f817 	bl	80097a0 <HAL_TIMEx_BreakCallback>
 8009772:	e7ba      	b.n	80096ea <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009774:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009778:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800977a:	4620      	mov	r0, r4
 800977c:	f000 f810 	bl	80097a0 <HAL_TIMEx_BreakCallback>
 8009780:	e7bc      	b.n	80096fc <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009782:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009786:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009788:	4620      	mov	r0, r4
 800978a:	f7ff ff3a 	bl	8009602 <HAL_TIM_TriggerCallback>
 800978e:	e7be      	b.n	800970e <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009790:	f06f 0220 	mvn.w	r2, #32
 8009794:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8009796:	4620      	mov	r0, r4
 8009798:	f000 f801 	bl	800979e <HAL_TIMEx_CommutCallback>
}
 800979c:	e7c0      	b.n	8009720 <HAL_TIM_IRQHandler+0x11c>

0800979e <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800979e:	4770      	bx	lr

080097a0 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097a0:	4770      	bx	lr

080097a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80097a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097a6:	4605      	mov	r5, r0
 80097a8:	460f      	mov	r7, r1
 80097aa:	4616      	mov	r6, r2
 80097ac:	4699      	mov	r9, r3
 80097ae:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097b2:	682c      	ldr	r4, [r5, #0]
 80097b4:	69e4      	ldr	r4, [r4, #28]
 80097b6:	ea37 0304 	bics.w	r3, r7, r4
 80097ba:	bf0c      	ite	eq
 80097bc:	2401      	moveq	r4, #1
 80097be:	2400      	movne	r4, #0
 80097c0:	42b4      	cmp	r4, r6
 80097c2:	d11f      	bne.n	8009804 <UART_WaitOnFlagUntilTimeout+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80097c4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80097c8:	d0f3      	beq.n	80097b2 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80097ca:	f1b8 0f00 	cmp.w	r8, #0
 80097ce:	d005      	beq.n	80097dc <UART_WaitOnFlagUntilTimeout+0x3a>
 80097d0:	f7fb fbe6 	bl	8004fa0 <HAL_GetTick>
 80097d4:	eba0 0009 	sub.w	r0, r0, r9
 80097d8:	4540      	cmp	r0, r8
 80097da:	d3ea      	bcc.n	80097b2 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80097dc:	682a      	ldr	r2, [r5, #0]
 80097de:	6813      	ldr	r3, [r2, #0]
 80097e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80097e4:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097e6:	682a      	ldr	r2, [r5, #0]
 80097e8:	6893      	ldr	r3, [r2, #8]
 80097ea:	f023 0301 	bic.w	r3, r3, #1
 80097ee:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 80097f0:	2320      	movs	r3, #32
 80097f2:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80097f6:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80097fa:	2300      	movs	r3, #0
 80097fc:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8009800:	2003      	movs	r0, #3
 8009802:	e000      	b.n	8009806 <UART_WaitOnFlagUntilTimeout+0x64>
      }
    }
  }
  return HAL_OK;
 8009804:	2000      	movs	r0, #0
}
 8009806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800980a <HAL_UART_Transmit>:
{
 800980a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8009812:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b20      	cmp	r3, #32
 800981a:	d152      	bne.n	80098c2 <HAL_UART_Transmit+0xb8>
 800981c:	4604      	mov	r4, r0
 800981e:	460d      	mov	r5, r1
 8009820:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8009822:	fab2 f382 	clz	r3, r2
 8009826:	095b      	lsrs	r3, r3, #5
 8009828:	2900      	cmp	r1, #0
 800982a:	bf08      	it	eq
 800982c:	2301      	moveq	r3, #1
 800982e:	2b00      	cmp	r3, #0
 8009830:	d14b      	bne.n	80098ca <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8009832:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8009836:	2b01      	cmp	r3, #1
 8009838:	d049      	beq.n	80098ce <HAL_UART_Transmit+0xc4>
 800983a:	2301      	movs	r3, #1
 800983c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009840:	2300      	movs	r3, #0
 8009842:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009844:	2321      	movs	r3, #33	; 0x21
 8009846:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 800984a:	f7fb fba9 	bl	8004fa0 <HAL_GetTick>
 800984e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8009850:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8009854:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8009858:	e003      	b.n	8009862 <HAL_UART_Transmit+0x58>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800985a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800985e:	6823      	ldr	r3, [r4, #0]
 8009860:	629a      	str	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8009862:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8009866:	b29b      	uxth	r3, r3
 8009868:	b1e3      	cbz	r3, 80098a4 <HAL_UART_Transmit+0x9a>
      huart->TxXferCount--;
 800986a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800986e:	b292      	uxth	r2, r2
 8009870:	3a01      	subs	r2, #1
 8009872:	b292      	uxth	r2, r2
 8009874:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009878:	9600      	str	r6, [sp, #0]
 800987a:	463b      	mov	r3, r7
 800987c:	2200      	movs	r2, #0
 800987e:	2180      	movs	r1, #128	; 0x80
 8009880:	4620      	mov	r0, r4
 8009882:	f7ff ff8e 	bl	80097a2 <UART_WaitOnFlagUntilTimeout>
 8009886:	bb20      	cbnz	r0, 80098d2 <HAL_UART_Transmit+0xc8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009888:	68a3      	ldr	r3, [r4, #8]
 800988a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800988e:	d1e4      	bne.n	800985a <HAL_UART_Transmit+0x50>
 8009890:	6923      	ldr	r3, [r4, #16]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1e1      	bne.n	800985a <HAL_UART_Transmit+0x50>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8009896:	f835 3b02 	ldrh.w	r3, [r5], #2
 800989a:	6822      	ldr	r2, [r4, #0]
 800989c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a0:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 80098a2:	e7de      	b.n	8009862 <HAL_UART_Transmit+0x58>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098a4:	9600      	str	r6, [sp, #0]
 80098a6:	463b      	mov	r3, r7
 80098a8:	2200      	movs	r2, #0
 80098aa:	2140      	movs	r1, #64	; 0x40
 80098ac:	4620      	mov	r0, r4
 80098ae:	f7ff ff78 	bl	80097a2 <UART_WaitOnFlagUntilTimeout>
 80098b2:	b980      	cbnz	r0, 80098d6 <HAL_UART_Transmit+0xcc>
    huart->gState = HAL_UART_STATE_READY;
 80098b4:	2320      	movs	r3, #32
 80098b6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 80098ba:	2300      	movs	r3, #0
 80098bc:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    return HAL_OK;
 80098c0:	e000      	b.n	80098c4 <HAL_UART_Transmit+0xba>
    return HAL_BUSY;
 80098c2:	2002      	movs	r0, #2
}
 80098c4:	b002      	add	sp, #8
 80098c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80098ca:	2001      	movs	r0, #1
 80098cc:	e7fa      	b.n	80098c4 <HAL_UART_Transmit+0xba>
    __HAL_LOCK(huart);
 80098ce:	2002      	movs	r0, #2
 80098d0:	e7f8      	b.n	80098c4 <HAL_UART_Transmit+0xba>
        return HAL_TIMEOUT;
 80098d2:	2003      	movs	r0, #3
 80098d4:	e7f6      	b.n	80098c4 <HAL_UART_Transmit+0xba>
      return HAL_TIMEOUT;
 80098d6:	2003      	movs	r0, #3
 80098d8:	e7f4      	b.n	80098c4 <HAL_UART_Transmit+0xba>

080098da <HAL_UART_Receive>:
{
 80098da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 80098e2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	2b20      	cmp	r3, #32
 80098ea:	d176      	bne.n	80099da <HAL_UART_Receive+0x100>
 80098ec:	4604      	mov	r4, r0
 80098ee:	460d      	mov	r5, r1
 80098f0:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 80098f2:	fab2 f382 	clz	r3, r2
 80098f6:	095b      	lsrs	r3, r3, #5
 80098f8:	2900      	cmp	r1, #0
 80098fa:	bf08      	it	eq
 80098fc:	2301      	moveq	r3, #1
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d16f      	bne.n	80099e2 <HAL_UART_Receive+0x108>
    __HAL_LOCK(huart);
 8009902:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8009906:	2b01      	cmp	r3, #1
 8009908:	d06d      	beq.n	80099e6 <HAL_UART_Receive+0x10c>
 800990a:	2301      	movs	r3, #1
 800990c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009910:	2300      	movs	r3, #0
 8009912:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009914:	2322      	movs	r3, #34	; 0x22
 8009916:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 800991a:	f7fb fb41 	bl	8004fa0 <HAL_GetTick>
 800991e:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8009920:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8009924:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8009928:	68a3      	ldr	r3, [r4, #8]
 800992a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800992e:	d006      	beq.n	800993e <HAL_UART_Receive+0x64>
 8009930:	b9a3      	cbnz	r3, 800995c <HAL_UART_Receive+0x82>
 8009932:	6923      	ldr	r3, [r4, #16]
 8009934:	b973      	cbnz	r3, 8009954 <HAL_UART_Receive+0x7a>
 8009936:	23ff      	movs	r3, #255	; 0xff
 8009938:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800993c:	e011      	b.n	8009962 <HAL_UART_Receive+0x88>
 800993e:	6923      	ldr	r3, [r4, #16]
 8009940:	b923      	cbnz	r3, 800994c <HAL_UART_Receive+0x72>
 8009942:	f240 13ff 	movw	r3, #511	; 0x1ff
 8009946:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800994a:	e00a      	b.n	8009962 <HAL_UART_Receive+0x88>
 800994c:	23ff      	movs	r3, #255	; 0xff
 800994e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8009952:	e006      	b.n	8009962 <HAL_UART_Receive+0x88>
 8009954:	237f      	movs	r3, #127	; 0x7f
 8009956:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800995a:	e002      	b.n	8009962 <HAL_UART_Receive+0x88>
 800995c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009960:	d002      	beq.n	8009968 <HAL_UART_Receive+0x8e>
    uhMask = huart->Mask;
 8009962:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 8009966:	e010      	b.n	800998a <HAL_UART_Receive+0xb0>
    UART_MASK_COMPUTATION(huart);
 8009968:	6923      	ldr	r3, [r4, #16]
 800996a:	b91b      	cbnz	r3, 8009974 <HAL_UART_Receive+0x9a>
 800996c:	237f      	movs	r3, #127	; 0x7f
 800996e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8009972:	e7f6      	b.n	8009962 <HAL_UART_Receive+0x88>
 8009974:	233f      	movs	r3, #63	; 0x3f
 8009976:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800997a:	e7f2      	b.n	8009962 <HAL_UART_Receive+0x88>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800997c:	6823      	ldr	r3, [r4, #0]
 800997e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009980:	fa5f f388 	uxtb.w	r3, r8
 8009984:	4013      	ands	r3, r2
 8009986:	f805 3b01 	strb.w	r3, [r5], #1
    while(huart->RxXferCount > 0U)
 800998a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800998e:	b29b      	uxth	r3, r3
 8009990:	b1e3      	cbz	r3, 80099cc <HAL_UART_Receive+0xf2>
      huart->RxXferCount--;
 8009992:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8009996:	b292      	uxth	r2, r2
 8009998:	3a01      	subs	r2, #1
 800999a:	b292      	uxth	r2, r2
 800999c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80099a0:	9600      	str	r6, [sp, #0]
 80099a2:	463b      	mov	r3, r7
 80099a4:	2200      	movs	r2, #0
 80099a6:	2120      	movs	r1, #32
 80099a8:	4620      	mov	r0, r4
 80099aa:	f7ff fefa 	bl	80097a2 <UART_WaitOnFlagUntilTimeout>
 80099ae:	b9e0      	cbnz	r0, 80099ea <HAL_UART_Receive+0x110>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099b0:	68a3      	ldr	r3, [r4, #8]
 80099b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099b6:	d1e1      	bne.n	800997c <HAL_UART_Receive+0xa2>
 80099b8:	6923      	ldr	r3, [r4, #16]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1de      	bne.n	800997c <HAL_UART_Receive+0xa2>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c2:	ea08 0303 	and.w	r3, r8, r3
 80099c6:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 80099ca:	e7de      	b.n	800998a <HAL_UART_Receive+0xb0>
    huart->RxState = HAL_UART_STATE_READY;
 80099cc:	2320      	movs	r3, #32
 80099ce:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 80099d2:	2000      	movs	r0, #0
 80099d4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 80099d8:	e000      	b.n	80099dc <HAL_UART_Receive+0x102>
    return HAL_BUSY;
 80099da:	2002      	movs	r0, #2
}
 80099dc:	b002      	add	sp, #8
 80099de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80099e2:	2001      	movs	r0, #1
 80099e4:	e7fa      	b.n	80099dc <HAL_UART_Receive+0x102>
    __HAL_LOCK(huart);
 80099e6:	2002      	movs	r0, #2
 80099e8:	e7f8      	b.n	80099dc <HAL_UART_Receive+0x102>
        return HAL_TIMEOUT;
 80099ea:	2003      	movs	r0, #3
 80099ec:	e7f6      	b.n	80099dc <HAL_UART_Receive+0x102>
	...

080099f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099f4:	6883      	ldr	r3, [r0, #8]
 80099f6:	6902      	ldr	r2, [r0, #16]
 80099f8:	4313      	orrs	r3, r2
 80099fa:	6942      	ldr	r2, [r0, #20]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	69c2      	ldr	r2, [r0, #28]
 8009a00:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8009a02:	6801      	ldr	r1, [r0, #0]
 8009a04:	6808      	ldr	r0, [r1, #0]
 8009a06:	4aa0      	ldr	r2, [pc, #640]	; (8009c88 <UART_SetConfig+0x298>)
 8009a08:	4002      	ands	r2, r0
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a0e:	6822      	ldr	r2, [r4, #0]
 8009a10:	6853      	ldr	r3, [r2, #4]
 8009a12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009a16:	68e1      	ldr	r1, [r4, #12]
 8009a18:	430b      	orrs	r3, r1
 8009a1a:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8009a1c:	69a3      	ldr	r3, [r4, #24]
 8009a1e:	6a22      	ldr	r2, [r4, #32]
 8009a20:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8009a22:	6821      	ldr	r1, [r4, #0]
 8009a24:	688b      	ldr	r3, [r1, #8]
 8009a26:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a2e:	6823      	ldr	r3, [r4, #0]
 8009a30:	4a96      	ldr	r2, [pc, #600]	; (8009c8c <UART_SetConfig+0x29c>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d019      	beq.n	8009a6a <UART_SetConfig+0x7a>
 8009a36:	4a96      	ldr	r2, [pc, #600]	; (8009c90 <UART_SetConfig+0x2a0>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d02a      	beq.n	8009a92 <UART_SetConfig+0xa2>
 8009a3c:	4a95      	ldr	r2, [pc, #596]	; (8009c94 <UART_SetConfig+0x2a4>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d040      	beq.n	8009ac4 <UART_SetConfig+0xd4>
 8009a42:	4a95      	ldr	r2, [pc, #596]	; (8009c98 <UART_SetConfig+0x2a8>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d065      	beq.n	8009b14 <UART_SetConfig+0x124>
 8009a48:	4a94      	ldr	r2, [pc, #592]	; (8009c9c <UART_SetConfig+0x2ac>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d075      	beq.n	8009b3a <UART_SetConfig+0x14a>
 8009a4e:	4a94      	ldr	r2, [pc, #592]	; (8009ca0 <UART_SetConfig+0x2b0>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	f000 8088 	beq.w	8009b66 <UART_SetConfig+0x176>
 8009a56:	4a93      	ldr	r2, [pc, #588]	; (8009ca4 <UART_SetConfig+0x2b4>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	f000 809a 	beq.w	8009b92 <UART_SetConfig+0x1a2>
 8009a5e:	4a92      	ldr	r2, [pc, #584]	; (8009ca8 <UART_SetConfig+0x2b8>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	f000 80ac 	beq.w	8009bbe <UART_SetConfig+0x1ce>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8009a66:	2510      	movs	r5, #16
 8009a68:	e03d      	b.n	8009ae6 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a6a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009a6e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009a72:	f002 0203 	and.w	r2, r2, #3
 8009a76:	2a03      	cmp	r2, #3
 8009a78:	d803      	bhi.n	8009a82 <UART_SetConfig+0x92>
 8009a7a:	e8df f002 	tbb	[pc, r2]
 8009a7e:	06b5      	.short	0x06b5
 8009a80:	0804      	.short	0x0804
 8009a82:	2510      	movs	r5, #16
 8009a84:	e02f      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009a86:	2502      	movs	r5, #2
 8009a88:	e02d      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009a8a:	2504      	movs	r5, #4
 8009a8c:	e02b      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009a8e:	2508      	movs	r5, #8
 8009a90:	e029      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009a92:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8009a96:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009a9a:	f002 020c 	and.w	r2, r2, #12
 8009a9e:	2a0c      	cmp	r2, #12
 8009aa0:	d808      	bhi.n	8009ab4 <UART_SetConfig+0xc4>
 8009aa2:	e8df f002 	tbb	[pc, r2]
 8009aa6:	07a3      	.short	0x07a3
 8009aa8:	070b0707 	.word	0x070b0707
 8009aac:	07090707 	.word	0x07090707
 8009ab0:	0707      	.short	0x0707
 8009ab2:	0d          	.byte	0x0d
 8009ab3:	00          	.byte	0x00
 8009ab4:	2510      	movs	r5, #16
 8009ab6:	e016      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009ab8:	2502      	movs	r5, #2
 8009aba:	e014      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009abc:	2504      	movs	r5, #4
 8009abe:	e012      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009ac0:	2508      	movs	r5, #8
 8009ac2:	e010      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009ac4:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8009ac8:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009acc:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8009ad0:	2a20      	cmp	r2, #32
 8009ad2:	f000 808d 	beq.w	8009bf0 <UART_SetConfig+0x200>
 8009ad6:	d819      	bhi.n	8009b0c <UART_SetConfig+0x11c>
 8009ad8:	2a00      	cmp	r2, #0
 8009ada:	f000 808b 	beq.w	8009bf4 <UART_SetConfig+0x204>
 8009ade:	2a10      	cmp	r2, #16
 8009ae0:	f040 808a 	bne.w	8009bf8 <UART_SetConfig+0x208>
 8009ae4:	2504      	movs	r5, #4

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ae6:	69e2      	ldr	r2, [r4, #28]
 8009ae8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009aec:	f000 80b0 	beq.w	8009c50 <UART_SetConfig+0x260>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8009af0:	2d08      	cmp	r5, #8
 8009af2:	f200 813d 	bhi.w	8009d70 <UART_SetConfig+0x380>
 8009af6:	e8df f015 	tbh	[pc, r5, lsl #1]
 8009afa:	0104      	.short	0x0104
 8009afc:	011b010f 	.word	0x011b010f
 8009b00:	0125013b 	.word	0x0125013b
 8009b04:	013b013b 	.word	0x013b013b
 8009b08:	0131013b 	.word	0x0131013b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b0c:	2a30      	cmp	r2, #48	; 0x30
 8009b0e:	d175      	bne.n	8009bfc <UART_SetConfig+0x20c>
 8009b10:	2508      	movs	r5, #8
 8009b12:	e7e8      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009b14:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8009b18:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009b1c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8009b20:	2a80      	cmp	r2, #128	; 0x80
 8009b22:	d06d      	beq.n	8009c00 <UART_SetConfig+0x210>
 8009b24:	d805      	bhi.n	8009b32 <UART_SetConfig+0x142>
 8009b26:	2a00      	cmp	r2, #0
 8009b28:	d06c      	beq.n	8009c04 <UART_SetConfig+0x214>
 8009b2a:	2a40      	cmp	r2, #64	; 0x40
 8009b2c:	d16c      	bne.n	8009c08 <UART_SetConfig+0x218>
 8009b2e:	2504      	movs	r5, #4
 8009b30:	e7d9      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009b32:	2ac0      	cmp	r2, #192	; 0xc0
 8009b34:	d16a      	bne.n	8009c0c <UART_SetConfig+0x21c>
 8009b36:	2508      	movs	r5, #8
 8009b38:	e7d5      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009b3a:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8009b3e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009b42:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8009b46:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009b4a:	d061      	beq.n	8009c10 <UART_SetConfig+0x220>
 8009b4c:	d806      	bhi.n	8009b5c <UART_SetConfig+0x16c>
 8009b4e:	2a00      	cmp	r2, #0
 8009b50:	d060      	beq.n	8009c14 <UART_SetConfig+0x224>
 8009b52:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009b56:	d15f      	bne.n	8009c18 <UART_SetConfig+0x228>
 8009b58:	2504      	movs	r5, #4
 8009b5a:	e7c4      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009b5c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009b60:	d15c      	bne.n	8009c1c <UART_SetConfig+0x22c>
 8009b62:	2508      	movs	r5, #8
 8009b64:	e7bf      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009b66:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8009b6a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009b6e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8009b72:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009b76:	d053      	beq.n	8009c20 <UART_SetConfig+0x230>
 8009b78:	d806      	bhi.n	8009b88 <UART_SetConfig+0x198>
 8009b7a:	2a00      	cmp	r2, #0
 8009b7c:	d052      	beq.n	8009c24 <UART_SetConfig+0x234>
 8009b7e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009b82:	d151      	bne.n	8009c28 <UART_SetConfig+0x238>
 8009b84:	2504      	movs	r5, #4
 8009b86:	e7ae      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009b88:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8009b8c:	d14e      	bne.n	8009c2c <UART_SetConfig+0x23c>
 8009b8e:	2508      	movs	r5, #8
 8009b90:	e7a9      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009b92:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8009b96:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009b9a:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8009b9e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009ba2:	d045      	beq.n	8009c30 <UART_SetConfig+0x240>
 8009ba4:	d806      	bhi.n	8009bb4 <UART_SetConfig+0x1c4>
 8009ba6:	2a00      	cmp	r2, #0
 8009ba8:	d044      	beq.n	8009c34 <UART_SetConfig+0x244>
 8009baa:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009bae:	d143      	bne.n	8009c38 <UART_SetConfig+0x248>
 8009bb0:	2504      	movs	r5, #4
 8009bb2:	e798      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009bb4:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8009bb8:	d140      	bne.n	8009c3c <UART_SetConfig+0x24c>
 8009bba:	2508      	movs	r5, #8
 8009bbc:	e793      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009bbe:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8009bc2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8009bc6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8009bca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009bce:	d037      	beq.n	8009c40 <UART_SetConfig+0x250>
 8009bd0:	d805      	bhi.n	8009bde <UART_SetConfig+0x1ee>
 8009bd2:	b3ba      	cbz	r2, 8009c44 <UART_SetConfig+0x254>
 8009bd4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009bd8:	d136      	bne.n	8009c48 <UART_SetConfig+0x258>
 8009bda:	2504      	movs	r5, #4
 8009bdc:	e783      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009bde:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8009be2:	d133      	bne.n	8009c4c <UART_SetConfig+0x25c>
 8009be4:	2508      	movs	r5, #8
 8009be6:	e77e      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009be8:	2501      	movs	r5, #1
 8009bea:	e77c      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009bec:	2500      	movs	r5, #0
 8009bee:	e77a      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009bf0:	2502      	movs	r5, #2
 8009bf2:	e778      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009bf4:	2500      	movs	r5, #0
 8009bf6:	e776      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009bf8:	2510      	movs	r5, #16
 8009bfa:	e774      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009bfc:	2510      	movs	r5, #16
 8009bfe:	e772      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c00:	2502      	movs	r5, #2
 8009c02:	e770      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c04:	2500      	movs	r5, #0
 8009c06:	e76e      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c08:	2510      	movs	r5, #16
 8009c0a:	e76c      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c0c:	2510      	movs	r5, #16
 8009c0e:	e76a      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c10:	2502      	movs	r5, #2
 8009c12:	e768      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c14:	2500      	movs	r5, #0
 8009c16:	e766      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c18:	2510      	movs	r5, #16
 8009c1a:	e764      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c1c:	2510      	movs	r5, #16
 8009c1e:	e762      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c20:	2502      	movs	r5, #2
 8009c22:	e760      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c24:	2501      	movs	r5, #1
 8009c26:	e75e      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c28:	2510      	movs	r5, #16
 8009c2a:	e75c      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c2c:	2510      	movs	r5, #16
 8009c2e:	e75a      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c30:	2502      	movs	r5, #2
 8009c32:	e758      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c34:	2500      	movs	r5, #0
 8009c36:	e756      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c38:	2510      	movs	r5, #16
 8009c3a:	e754      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c3c:	2510      	movs	r5, #16
 8009c3e:	e752      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c40:	2502      	movs	r5, #2
 8009c42:	e750      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c44:	2500      	movs	r5, #0
 8009c46:	e74e      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c48:	2510      	movs	r5, #16
 8009c4a:	e74c      	b.n	8009ae6 <UART_SetConfig+0xf6>
 8009c4c:	2510      	movs	r5, #16
 8009c4e:	e74a      	b.n	8009ae6 <UART_SetConfig+0xf6>
    switch (clocksource)
 8009c50:	2d08      	cmp	r5, #8
 8009c52:	d853      	bhi.n	8009cfc <UART_SetConfig+0x30c>
 8009c54:	e8df f005 	tbb	[pc, r5]
 8009c58:	52352a05 	.word	0x52352a05
 8009c5c:	5252523e 	.word	0x5252523e
 8009c60:	49          	.byte	0x49
 8009c61:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009c62:	f7fe fbe3 	bl	800842c <HAL_RCC_GetPCLK1Freq>
 8009c66:	6862      	ldr	r2, [r4, #4]
 8009c68:	0853      	lsrs	r3, r2, #1
 8009c6a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8009c6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c72:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8009c74:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c78:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8009c7c:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8009c7e:	6822      	ldr	r2, [r4, #0]
 8009c80:	60d3      	str	r3, [r2, #12]
    }
  }

  return ret;

}
 8009c82:	4628      	mov	r0, r5
 8009c84:	bd38      	pop	{r3, r4, r5, pc}
 8009c86:	bf00      	nop
 8009c88:	efff69f3 	.word	0xefff69f3
 8009c8c:	40011000 	.word	0x40011000
 8009c90:	40004400 	.word	0x40004400
 8009c94:	40004800 	.word	0x40004800
 8009c98:	40004c00 	.word	0x40004c00
 8009c9c:	40005000 	.word	0x40005000
 8009ca0:	40011400 	.word	0x40011400
 8009ca4:	40007800 	.word	0x40007800
 8009ca8:	40007c00 	.word	0x40007c00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009cac:	f7fe fbd4 	bl	8008458 <HAL_RCC_GetPCLK2Freq>
 8009cb0:	6862      	ldr	r2, [r4, #4]
 8009cb2:	0853      	lsrs	r3, r2, #1
 8009cb4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8009cb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cbc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cbe:	2500      	movs	r5, #0
      break;
 8009cc0:	e7d8      	b.n	8009c74 <UART_SetConfig+0x284>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009cc2:	6862      	ldr	r2, [r4, #4]
 8009cc4:	4b2b      	ldr	r3, [pc, #172]	; (8009d74 <UART_SetConfig+0x384>)
 8009cc6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8009cca:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cce:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cd0:	2500      	movs	r5, #0
      break;
 8009cd2:	e7cf      	b.n	8009c74 <UART_SetConfig+0x284>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009cd4:	f7fe fa96 	bl	8008204 <HAL_RCC_GetSysClockFreq>
 8009cd8:	6862      	ldr	r2, [r4, #4]
 8009cda:	0853      	lsrs	r3, r2, #1
 8009cdc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8009ce0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ce4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ce6:	2500      	movs	r5, #0
      break;
 8009ce8:	e7c4      	b.n	8009c74 <UART_SetConfig+0x284>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009cea:	6862      	ldr	r2, [r4, #4]
 8009cec:	0853      	lsrs	r3, r2, #1
 8009cee:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009cf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cf6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cf8:	2500      	movs	r5, #0
      break;
 8009cfa:	e7bb      	b.n	8009c74 <UART_SetConfig+0x284>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cfc:	2501      	movs	r5, #1
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e7b8      	b.n	8009c74 <UART_SetConfig+0x284>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009d02:	f7fe fb93 	bl	800842c <HAL_RCC_GetPCLK1Freq>
 8009d06:	6862      	ldr	r2, [r4, #4]
 8009d08:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8009d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d10:	6822      	ldr	r2, [r4, #0]
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	60d3      	str	r3, [r2, #12]
      break;
 8009d16:	e7b4      	b.n	8009c82 <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009d18:	f7fe fb9e 	bl	8008458 <HAL_RCC_GetPCLK2Freq>
 8009d1c:	6862      	ldr	r2, [r4, #4]
 8009d1e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8009d22:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d26:	6822      	ldr	r2, [r4, #0]
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d2c:	2500      	movs	r5, #0
      break;
 8009d2e:	e7a8      	b.n	8009c82 <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009d30:	6861      	ldr	r1, [r4, #4]
 8009d32:	4a11      	ldr	r2, [pc, #68]	; (8009d78 <UART_SetConfig+0x388>)
 8009d34:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8009d38:	fbb2 f2f1 	udiv	r2, r2, r1
 8009d3c:	b292      	uxth	r2, r2
 8009d3e:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d40:	2500      	movs	r5, #0
      break;
 8009d42:	e79e      	b.n	8009c82 <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009d44:	f7fe fa5e 	bl	8008204 <HAL_RCC_GetSysClockFreq>
 8009d48:	6862      	ldr	r2, [r4, #4]
 8009d4a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8009d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d52:	6822      	ldr	r2, [r4, #0]
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d58:	2500      	movs	r5, #0
      break;
 8009d5a:	e792      	b.n	8009c82 <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009d5c:	6861      	ldr	r1, [r4, #4]
 8009d5e:	084a      	lsrs	r2, r1, #1
 8009d60:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8009d64:	fbb2 f2f1 	udiv	r2, r2, r1
 8009d68:	b292      	uxth	r2, r2
 8009d6a:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d6c:	2500      	movs	r5, #0
      break;
 8009d6e:	e788      	b.n	8009c82 <UART_SetConfig+0x292>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d70:	2501      	movs	r5, #1
 8009d72:	e786      	b.n	8009c82 <UART_SetConfig+0x292>
 8009d74:	01e84800 	.word	0x01e84800
 8009d78:	00f42400 	.word	0x00f42400

08009d7c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009d7e:	f013 0f01 	tst.w	r3, #1
 8009d82:	d006      	beq.n	8009d92 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d84:	6802      	ldr	r2, [r0, #0]
 8009d86:	6853      	ldr	r3, [r2, #4]
 8009d88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009d8c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009d8e:	430b      	orrs	r3, r1
 8009d90:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d92:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009d94:	f013 0f02 	tst.w	r3, #2
 8009d98:	d006      	beq.n	8009da8 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d9a:	6802      	ldr	r2, [r0, #0]
 8009d9c:	6853      	ldr	r3, [r2, #4]
 8009d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009da2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009da4:	430b      	orrs	r3, r1
 8009da6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009da8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009daa:	f013 0f04 	tst.w	r3, #4
 8009dae:	d006      	beq.n	8009dbe <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009db0:	6802      	ldr	r2, [r0, #0]
 8009db2:	6853      	ldr	r3, [r2, #4]
 8009db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009db8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8009dba:	430b      	orrs	r3, r1
 8009dbc:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009dbe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009dc0:	f013 0f08 	tst.w	r3, #8
 8009dc4:	d006      	beq.n	8009dd4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009dc6:	6802      	ldr	r2, [r0, #0]
 8009dc8:	6853      	ldr	r3, [r2, #4]
 8009dca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009dce:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8009dd0:	430b      	orrs	r3, r1
 8009dd2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009dd6:	f013 0f10 	tst.w	r3, #16
 8009dda:	d006      	beq.n	8009dea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ddc:	6802      	ldr	r2, [r0, #0]
 8009dde:	6893      	ldr	r3, [r2, #8]
 8009de0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009de4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8009de6:	430b      	orrs	r3, r1
 8009de8:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009dec:	f013 0f20 	tst.w	r3, #32
 8009df0:	d006      	beq.n	8009e00 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009df2:	6802      	ldr	r2, [r0, #0]
 8009df4:	6893      	ldr	r3, [r2, #8]
 8009df6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009dfa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8009dfc:	430b      	orrs	r3, r1
 8009dfe:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009e02:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009e06:	d00a      	beq.n	8009e1e <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e08:	6802      	ldr	r2, [r0, #0]
 8009e0a:	6853      	ldr	r3, [r2, #4]
 8009e0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009e10:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8009e12:	430b      	orrs	r3, r1
 8009e14:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e16:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e1c:	d00b      	beq.n	8009e36 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009e20:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009e24:	d006      	beq.n	8009e34 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e26:	6802      	ldr	r2, [r0, #0]
 8009e28:	6853      	ldr	r3, [r2, #4]
 8009e2a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8009e2e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8009e30:	430b      	orrs	r3, r1
 8009e32:	6053      	str	r3, [r2, #4]
  }
}
 8009e34:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e36:	6802      	ldr	r2, [r0, #0]
 8009e38:	6853      	ldr	r3, [r2, #4]
 8009e3a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009e3e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8009e40:	430b      	orrs	r3, r1
 8009e42:	6053      	str	r3, [r2, #4]
 8009e44:	e7eb      	b.n	8009e1e <UART_AdvFeatureConfig+0xa2>

08009e46 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e46:	b510      	push	{r4, lr}
 8009e48:	b082      	sub	sp, #8
 8009e4a:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009e50:	f7fb f8a6 	bl	8004fa0 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f013 0f08 	tst.w	r3, #8
 8009e5c:	d109      	bne.n	8009e72 <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8009e5e:	2320      	movs	r3, #32
 8009e60:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8009e64:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e68:	2000      	movs	r0, #0
 8009e6a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return HAL_OK;
}
 8009e6e:	b002      	add	sp, #8
 8009e70:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e80:	4620      	mov	r0, r4
 8009e82:	f7ff fc8e 	bl	80097a2 <UART_WaitOnFlagUntilTimeout>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	d0e9      	beq.n	8009e5e <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8009e8a:	2003      	movs	r0, #3
 8009e8c:	e7ef      	b.n	8009e6e <UART_CheckIdleState+0x28>

08009e8e <HAL_UART_Init>:
  if(huart == NULL)
 8009e8e:	b378      	cbz	r0, 8009ef0 <HAL_UART_Init+0x62>
{
 8009e90:	b510      	push	{r4, lr}
 8009e92:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8009e94:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8009e98:	b30b      	cbz	r3, 8009ede <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8009e9a:	2324      	movs	r3, #36	; 0x24
 8009e9c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8009ea0:	6822      	ldr	r2, [r4, #0]
 8009ea2:	6813      	ldr	r3, [r2, #0]
 8009ea4:	f023 0301 	bic.w	r3, r3, #1
 8009ea8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009eaa:	4620      	mov	r0, r4
 8009eac:	f7ff fda0 	bl	80099f0 <UART_SetConfig>
 8009eb0:	2801      	cmp	r0, #1
 8009eb2:	d013      	beq.n	8009edc <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009eb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009eb6:	b9bb      	cbnz	r3, 8009ee8 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009eb8:	6822      	ldr	r2, [r4, #0]
 8009eba:	6853      	ldr	r3, [r2, #4]
 8009ebc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8009ec0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ec2:	6822      	ldr	r2, [r4, #0]
 8009ec4:	6893      	ldr	r3, [r2, #8]
 8009ec6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8009eca:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8009ecc:	6822      	ldr	r2, [r4, #0]
 8009ece:	6813      	ldr	r3, [r2, #0]
 8009ed0:	f043 0301 	orr.w	r3, r3, #1
 8009ed4:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f7ff ffb5 	bl	8009e46 <UART_CheckIdleState>
}
 8009edc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8009ede:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8009ee2:	f002 fd41 	bl	800c968 <HAL_UART_MspInit>
 8009ee6:	e7d8      	b.n	8009e9a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f7ff ff47 	bl	8009d7c <UART_AdvFeatureConfig>
 8009eee:	e7e3      	b.n	8009eb8 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8009ef0:	2001      	movs	r0, #1
}
 8009ef2:	4770      	bx	lr

08009ef4 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 8009ef4:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	4a0c      	ldr	r2, [pc, #48]	; (8009f2c <USB_CoreReset+0x38>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d811      	bhi.n	8009f22 <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009efe:	6902      	ldr	r2, [r0, #16]
 8009f00:	2a00      	cmp	r2, #0
 8009f02:	daf8      	bge.n	8009ef6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f04:	6903      	ldr	r3, [r0, #16]
 8009f06:	f043 0301 	orr.w	r3, r3, #1
 8009f0a:	6103      	str	r3, [r0, #16]
  count = 0U;
 8009f0c:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 8009f0e:	3301      	adds	r3, #1
 8009f10:	4a06      	ldr	r2, [pc, #24]	; (8009f2c <USB_CoreReset+0x38>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d807      	bhi.n	8009f26 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f16:	6902      	ldr	r2, [r0, #16]
 8009f18:	f012 0f01 	tst.w	r2, #1
 8009f1c:	d1f7      	bne.n	8009f0e <USB_CoreReset+0x1a>

  return HAL_OK;
 8009f1e:	2000      	movs	r0, #0
 8009f20:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009f22:	2003      	movs	r0, #3
 8009f24:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009f26:	2003      	movs	r0, #3
}
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	00030d40 	.word	0x00030d40

08009f30 <USB_CoreInit>:
{
 8009f30:	b084      	sub	sp, #16
 8009f32:	b510      	push	{r4, lr}
 8009f34:	4604      	mov	r4, r0
 8009f36:	a803      	add	r0, sp, #12
 8009f38:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f3c:	9b08      	ldr	r3, [sp, #32]
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d11d      	bne.n	8009f7e <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f48:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009f4a:	68e2      	ldr	r2, [r4, #12]
 8009f4c:	4b16      	ldr	r3, [pc, #88]	; (8009fa8 <USB_CoreInit+0x78>)
 8009f4e:	4013      	ands	r3, r2
 8009f50:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009f52:	68e3      	ldr	r3, [r4, #12]
 8009f54:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009f58:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8009f5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d009      	beq.n	8009f74 <USB_CoreInit+0x44>
    ret = USB_CoreReset(USBx);
 8009f60:	4620      	mov	r0, r4
 8009f62:	f7ff ffc7 	bl	8009ef4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8009f66:	9b06      	ldr	r3, [sp, #24]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d014      	beq.n	8009f96 <USB_CoreInit+0x66>
}
 8009f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f70:	b004      	add	sp, #16
 8009f72:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009f74:	68e3      	ldr	r3, [r4, #12]
 8009f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f7a:	60e3      	str	r3, [r4, #12]
 8009f7c:	e7f0      	b.n	8009f60 <USB_CoreInit+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009f7e:	68e3      	ldr	r3, [r4, #12]
 8009f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f84:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8009f86:	4620      	mov	r0, r4
 8009f88:	f7ff ffb4 	bl	8009ef4 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009f8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f92:	63a3      	str	r3, [r4, #56]	; 0x38
 8009f94:	e7e7      	b.n	8009f66 <USB_CoreInit+0x36>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009f96:	68a3      	ldr	r3, [r4, #8]
 8009f98:	f043 0306 	orr.w	r3, r3, #6
 8009f9c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009f9e:	68a3      	ldr	r3, [r4, #8]
 8009fa0:	f043 0320 	orr.w	r3, r3, #32
 8009fa4:	60a3      	str	r3, [r4, #8]
 8009fa6:	e7e1      	b.n	8009f6c <USB_CoreInit+0x3c>
 8009fa8:	ffbdffbf 	.word	0xffbdffbf

08009fac <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8009fac:	2a02      	cmp	r2, #2
 8009fae:	d00a      	beq.n	8009fc6 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009fb0:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009fb2:	68c2      	ldr	r2, [r0, #12]
 8009fb4:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8009fb8:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009fba:	68c3      	ldr	r3, [r0, #12]
 8009fbc:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8009fc0:	60c3      	str	r3, [r0, #12]
}
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009fc6:	4b20      	ldr	r3, [pc, #128]	; (800a048 <USB_SetTurnaroundTime+0x9c>)
 8009fc8:	440b      	add	r3, r1
 8009fca:	4a20      	ldr	r2, [pc, #128]	; (800a04c <USB_SetTurnaroundTime+0xa0>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d929      	bls.n	800a024 <USB_SetTurnaroundTime+0x78>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009fd0:	4b1f      	ldr	r3, [pc, #124]	; (800a050 <USB_SetTurnaroundTime+0xa4>)
 8009fd2:	440b      	add	r3, r1
 8009fd4:	4a1f      	ldr	r2, [pc, #124]	; (800a054 <USB_SetTurnaroundTime+0xa8>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d926      	bls.n	800a028 <USB_SetTurnaroundTime+0x7c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009fda:	4b1f      	ldr	r3, [pc, #124]	; (800a058 <USB_SetTurnaroundTime+0xac>)
 8009fdc:	440b      	add	r3, r1
 8009fde:	4a1f      	ldr	r2, [pc, #124]	; (800a05c <USB_SetTurnaroundTime+0xb0>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d923      	bls.n	800a02c <USB_SetTurnaroundTime+0x80>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009fe4:	4b1e      	ldr	r3, [pc, #120]	; (800a060 <USB_SetTurnaroundTime+0xb4>)
 8009fe6:	440b      	add	r3, r1
 8009fe8:	4a1e      	ldr	r2, [pc, #120]	; (800a064 <USB_SetTurnaroundTime+0xb8>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d320      	bcc.n	800a030 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009fee:	4b1e      	ldr	r3, [pc, #120]	; (800a068 <USB_SetTurnaroundTime+0xbc>)
 8009ff0:	440b      	add	r3, r1
 8009ff2:	4a1e      	ldr	r2, [pc, #120]	; (800a06c <USB_SetTurnaroundTime+0xc0>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d91d      	bls.n	800a034 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009ff8:	4b1d      	ldr	r3, [pc, #116]	; (800a070 <USB_SetTurnaroundTime+0xc4>)
 8009ffa:	440b      	add	r3, r1
 8009ffc:	4a1d      	ldr	r2, [pc, #116]	; (800a074 <USB_SetTurnaroundTime+0xc8>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d31a      	bcc.n	800a038 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a002:	4b1d      	ldr	r3, [pc, #116]	; (800a078 <USB_SetTurnaroundTime+0xcc>)
 800a004:	440b      	add	r3, r1
 800a006:	4a1d      	ldr	r2, [pc, #116]	; (800a07c <USB_SetTurnaroundTime+0xd0>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d317      	bcc.n	800a03c <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a00c:	4b1c      	ldr	r3, [pc, #112]	; (800a080 <USB_SetTurnaroundTime+0xd4>)
 800a00e:	440b      	add	r3, r1
 800a010:	4a1c      	ldr	r2, [pc, #112]	; (800a084 <USB_SetTurnaroundTime+0xd8>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d314      	bcc.n	800a040 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a016:	4b1c      	ldr	r3, [pc, #112]	; (800a088 <USB_SetTurnaroundTime+0xdc>)
 800a018:	440b      	add	r3, r1
 800a01a:	4a1c      	ldr	r2, [pc, #112]	; (800a08c <USB_SetTurnaroundTime+0xe0>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d211      	bcs.n	800a044 <USB_SetTurnaroundTime+0x98>
      UsbTrd = 0x7U;
 800a020:	2107      	movs	r1, #7
 800a022:	e7c6      	b.n	8009fb2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 800a024:	210f      	movs	r1, #15
 800a026:	e7c4      	b.n	8009fb2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 800a028:	210e      	movs	r1, #14
 800a02a:	e7c2      	b.n	8009fb2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 800a02c:	210d      	movs	r1, #13
 800a02e:	e7c0      	b.n	8009fb2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 800a030:	210c      	movs	r1, #12
 800a032:	e7be      	b.n	8009fb2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 800a034:	210b      	movs	r1, #11
 800a036:	e7bc      	b.n	8009fb2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 800a038:	210a      	movs	r1, #10
 800a03a:	e7ba      	b.n	8009fb2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 800a03c:	2109      	movs	r1, #9
 800a03e:	e7b8      	b.n	8009fb2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 800a040:	2108      	movs	r1, #8
 800a042:	e7b6      	b.n	8009fb2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 800a044:	2106      	movs	r1, #6
 800a046:	e7b4      	b.n	8009fb2 <USB_SetTurnaroundTime+0x6>
 800a048:	ff275340 	.word	0xff275340
 800a04c:	000c34ff 	.word	0x000c34ff
 800a050:	ff1b1e40 	.word	0xff1b1e40
 800a054:	000f423f 	.word	0x000f423f
 800a058:	ff0bdc00 	.word	0xff0bdc00
 800a05c:	00124f7f 	.word	0x00124f7f
 800a060:	fef98c80 	.word	0xfef98c80
 800a064:	0013d620 	.word	0x0013d620
 800a068:	fee5b660 	.word	0xfee5b660
 800a06c:	0016e35f 	.word	0x0016e35f
 800a070:	feced300 	.word	0xfeced300
 800a074:	001b7740 	.word	0x001b7740
 800a078:	feb35bc0 	.word	0xfeb35bc0
 800a07c:	002191c0 	.word	0x002191c0
 800a080:	fe91ca00 	.word	0xfe91ca00
 800a084:	00387520 	.word	0x00387520
 800a088:	fe5954e0 	.word	0xfe5954e0
 800a08c:	00419ce0 	.word	0x00419ce0

0800a090 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a090:	6883      	ldr	r3, [r0, #8]
 800a092:	f043 0301 	orr.w	r3, r3, #1
 800a096:	6083      	str	r3, [r0, #8]
}
 800a098:	2000      	movs	r0, #0
 800a09a:	4770      	bx	lr

0800a09c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a09c:	6883      	ldr	r3, [r0, #8]
 800a09e:	f023 0301 	bic.w	r3, r3, #1
 800a0a2:	6083      	str	r3, [r0, #8]
}
 800a0a4:	2000      	movs	r0, #0
 800a0a6:	4770      	bx	lr

0800a0a8 <USB_SetCurrentMode>:
{
 800a0a8:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a0aa:	68c3      	ldr	r3, [r0, #12]
 800a0ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a0b0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800a0b2:	2901      	cmp	r1, #1
 800a0b4:	d009      	beq.n	800a0ca <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 800a0b6:	b969      	cbnz	r1, 800a0d4 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a0b8:	68c3      	ldr	r3, [r0, #12]
 800a0ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0be:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800a0c0:	2032      	movs	r0, #50	; 0x32
 800a0c2:	f7fa ff73 	bl	8004fac <HAL_Delay>
  return HAL_OK;
 800a0c6:	2000      	movs	r0, #0
}
 800a0c8:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a0ca:	68c3      	ldr	r3, [r0, #12]
 800a0cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0d0:	60c3      	str	r3, [r0, #12]
 800a0d2:	e7f5      	b.n	800a0c0 <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 800a0d4:	2001      	movs	r0, #1
 800a0d6:	e7f7      	b.n	800a0c8 <USB_SetCurrentMode+0x20>

0800a0d8 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a0d8:	0189      	lsls	r1, r1, #6
 800a0da:	f041 0120 	orr.w	r1, r1, #32
 800a0de:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 800a0e0:	2300      	movs	r3, #0
    if (++count > 200000U)
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	4a05      	ldr	r2, [pc, #20]	; (800a0fc <USB_FlushTxFifo+0x24>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d805      	bhi.n	800a0f6 <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a0ea:	6902      	ldr	r2, [r0, #16]
 800a0ec:	f012 0f20 	tst.w	r2, #32
 800a0f0:	d1f7      	bne.n	800a0e2 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800a0f2:	2000      	movs	r0, #0
 800a0f4:	4770      	bx	lr
      return HAL_TIMEOUT;
 800a0f6:	2003      	movs	r0, #3
}
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	00030d40 	.word	0x00030d40

0800a100 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a100:	2310      	movs	r3, #16
 800a102:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 800a104:	2300      	movs	r3, #0
    if (++count > 200000U)
 800a106:	3301      	adds	r3, #1
 800a108:	4a05      	ldr	r2, [pc, #20]	; (800a120 <USB_FlushRxFifo+0x20>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d805      	bhi.n	800a11a <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a10e:	6902      	ldr	r2, [r0, #16]
 800a110:	f012 0f10 	tst.w	r2, #16
 800a114:	d1f7      	bne.n	800a106 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800a116:	2000      	movs	r0, #0
 800a118:	4770      	bx	lr
      return HAL_TIMEOUT;
 800a11a:	2003      	movs	r0, #3
}
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	00030d40 	.word	0x00030d40

0800a124 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800a124:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800a128:	4319      	orrs	r1, r3
 800a12a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800a12e:	2000      	movs	r0, #0
 800a130:	4770      	bx	lr
	...

0800a134 <USB_DevInit>:
{
 800a134:	b084      	sub	sp, #16
 800a136:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a13a:	4604      	mov	r4, r0
 800a13c:	a809      	add	r0, sp, #36	; 0x24
 800a13e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a142:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 800a144:	2300      	movs	r3, #0
 800a146:	e006      	b.n	800a156 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 800a148:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800a14c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a150:	2100      	movs	r1, #0
 800a152:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800a154:	3301      	adds	r3, #1
 800a156:	2b0e      	cmp	r3, #14
 800a158:	d9f6      	bls.n	800a148 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 800a15a:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800a15e:	f1b8 0f00 	cmp.w	r8, #0
 800a162:	d126      	bne.n	800a1b2 <USB_DevInit+0x7e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a164:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 800a168:	f043 0302 	orr.w	r3, r3, #2
 800a16c:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a170:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a172:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a176:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a178:	6823      	ldr	r3, [r4, #0]
 800a17a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a17e:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a180:	6823      	ldr	r3, [r4, #0]
 800a182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a186:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800a188:	2300      	movs	r3, #0
 800a18a:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a18e:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 800a192:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800a196:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a19a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d00d      	beq.n	800a1bc <USB_DevInit+0x88>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800a1a0:	2b03      	cmp	r3, #3
 800a1a2:	d11c      	bne.n	800a1de <USB_DevInit+0xaa>
    if (cfg.speed == USBD_HS_SPEED)
 800a1a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1a6:	b9ab      	cbnz	r3, 800a1d4 <USB_DevInit+0xa0>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f7ff ffba 	bl	800a124 <USB_SetDevSpeed>
 800a1b0:	e019      	b.n	800a1e6 <USB_DevInit+0xb2>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a1b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a1b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1b8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a1ba:	e7e5      	b.n	800a188 <USB_DevInit+0x54>
    if (cfg.speed == USBD_HS_SPEED)
 800a1bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1be:	b923      	cbnz	r3, 800a1ca <USB_DevInit+0x96>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f7ff ffae 	bl	800a124 <USB_SetDevSpeed>
 800a1c8:	e00d      	b.n	800a1e6 <USB_DevInit+0xb2>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a1ca:	2101      	movs	r1, #1
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f7ff ffa9 	bl	800a124 <USB_SetDevSpeed>
 800a1d2:	e008      	b.n	800a1e6 <USB_DevInit+0xb2>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f7ff ffa4 	bl	800a124 <USB_SetDevSpeed>
 800a1dc:	e003      	b.n	800a1e6 <USB_DevInit+0xb2>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a1de:	2103      	movs	r1, #3
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f7ff ff9f 	bl	800a124 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a1e6:	2110      	movs	r1, #16
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f7ff ff75 	bl	800a0d8 <USB_FlushTxFifo>
 800a1ee:	4681      	mov	r9, r0
 800a1f0:	b108      	cbz	r0, 800a1f6 <USB_DevInit+0xc2>
    ret = HAL_ERROR;
 800a1f2:	f04f 0901 	mov.w	r9, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f7ff ff82 	bl	800a100 <USB_FlushRxFifo>
 800a1fc:	b108      	cbz	r0, 800a202 <USB_DevInit+0xce>
    ret = HAL_ERROR;
 800a1fe:	f04f 0901 	mov.w	r9, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800a202:	2300      	movs	r3, #0
 800a204:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a206:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a208:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a20a:	e00a      	b.n	800a222 <USB_DevInit+0xee>
      if (i == 0U)
 800a20c:	b9c3      	cbnz	r3, 800a240 <USB_DevInit+0x10c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a20e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800a212:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a216:	2200      	movs	r2, #0
 800a218:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a21a:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800a21e:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a220:	3301      	adds	r3, #1
 800a222:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a224:	429f      	cmp	r7, r3
 800a226:	d910      	bls.n	800a24a <USB_DevInit+0x116>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a228:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 800a22c:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 800a230:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 800a234:	2800      	cmp	r0, #0
 800a236:	dbe9      	blt.n	800a20c <USB_DevInit+0xd8>
      USBx_INEP(i)->DIEPCTL = 0U;
 800a238:	2000      	movs	r0, #0
 800a23a:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 800a23e:	e7ea      	b.n	800a216 <USB_DevInit+0xe2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a244:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 800a248:	e7e5      	b.n	800a216 <USB_DevInit+0xe2>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a24a:	2300      	movs	r3, #0
 800a24c:	e00a      	b.n	800a264 <USB_DevInit+0x130>
      if (i == 0U)
 800a24e:	b1bb      	cbz	r3, 800a280 <USB_DevInit+0x14c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a254:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a258:	2200      	movs	r2, #0
 800a25a:	610a      	str	r2, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a25c:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800a260:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a262:	3301      	adds	r3, #1
 800a264:	429f      	cmp	r7, r3
 800a266:	d910      	bls.n	800a28a <USB_DevInit+0x156>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a268:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 800a26c:	f502 6130 	add.w	r1, r2, #2816	; 0xb00
 800a270:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 800a274:	2800      	cmp	r0, #0
 800a276:	dbea      	blt.n	800a24e <USB_DevInit+0x11a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a278:	2000      	movs	r0, #0
 800a27a:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
 800a27e:	e7eb      	b.n	800a258 <USB_DevInit+0x124>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a280:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800a284:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
 800a288:	e7e6      	b.n	800a258 <USB_DevInit+0x124>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a28a:	6933      	ldr	r3, [r6, #16]
 800a28c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a290:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800a292:	2300      	movs	r3, #0
 800a294:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a296:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800a29a:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800a29c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a29e:	b91b      	cbnz	r3, 800a2a8 <USB_DevInit+0x174>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a2a0:	69a3      	ldr	r3, [r4, #24]
 800a2a2:	f043 0310 	orr.w	r3, r3, #16
 800a2a6:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a2a8:	69a2      	ldr	r2, [r4, #24]
 800a2aa:	4b0b      	ldr	r3, [pc, #44]	; (800a2d8 <USB_DevInit+0x1a4>)
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800a2b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2b2:	b11b      	cbz	r3, 800a2bc <USB_DevInit+0x188>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a2b4:	69a3      	ldr	r3, [r4, #24]
 800a2b6:	f043 0308 	orr.w	r3, r3, #8
 800a2ba:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800a2bc:	f1b8 0f01 	cmp.w	r8, #1
 800a2c0:	d004      	beq.n	800a2cc <USB_DevInit+0x198>
}
 800a2c2:	4648      	mov	r0, r9
 800a2c4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c8:	b004      	add	sp, #16
 800a2ca:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a2cc:	69a2      	ldr	r2, [r4, #24]
 800a2ce:	4b03      	ldr	r3, [pc, #12]	; (800a2dc <USB_DevInit+0x1a8>)
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	61a3      	str	r3, [r4, #24]
 800a2d4:	e7f5      	b.n	800a2c2 <USB_DevInit+0x18e>
 800a2d6:	bf00      	nop
 800a2d8:	803c3800 	.word	0x803c3800
 800a2dc:	40000004 	.word	0x40000004

0800a2e0 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a2e0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a2e4:	f013 0306 	ands.w	r3, r3, #6
 800a2e8:	d005      	beq.n	800a2f6 <USB_GetDevSpeed+0x16>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a2ea:	2b06      	cmp	r3, #6
 800a2ec:	bf18      	it	ne
 800a2ee:	2b02      	cmpne	r3, #2
 800a2f0:	d103      	bne.n	800a2fa <USB_GetDevSpeed+0x1a>
    speed = USBD_FS_SPEED;
 800a2f2:	2002      	movs	r0, #2
 800a2f4:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	4770      	bx	lr
    speed = 0xFU;
 800a2fa:	200f      	movs	r0, #15
}
 800a2fc:	4770      	bx	lr
	...

0800a300 <USB_ActivateEndpoint>:
{
 800a300:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 800a302:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800a304:	784b      	ldrb	r3, [r1, #1]
 800a306:	2b01      	cmp	r3, #1
 800a308:	d020      	beq.n	800a34c <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a30a:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 800a30e:	f004 060f 	and.w	r6, r4, #15
 800a312:	2201      	movs	r2, #1
 800a314:	40b2      	lsls	r2, r6
 800a316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a31a:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a31e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800a322:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a326:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a32a:	d10c      	bne.n	800a346 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a32c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800a330:	688b      	ldr	r3, [r1, #8]
 800a332:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a336:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a338:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800a33c:	4313      	orrs	r3, r2
 800a33e:	4a13      	ldr	r2, [pc, #76]	; (800a38c <USB_ActivateEndpoint+0x8c>)
 800a340:	431a      	orrs	r2, r3
 800a342:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
}
 800a346:	2000      	movs	r0, #0
 800a348:	bc70      	pop	{r4, r5, r6}
 800a34a:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a34c:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800a350:	f004 060f 	and.w	r6, r4, #15
 800a354:	40b3      	lsls	r3, r6
 800a356:	b29b      	uxth	r3, r3
 800a358:	4313      	orrs	r3, r2
 800a35a:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a35e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800a362:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a366:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a36a:	d1ec      	bne.n	800a346 <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a36c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800a370:	688b      	ldr	r3, [r1, #8]
 800a372:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a376:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a378:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a37c:	ea43 5484 	orr.w	r4, r3, r4, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a380:	4314      	orrs	r4, r2
 800a382:	4b02      	ldr	r3, [pc, #8]	; (800a38c <USB_ActivateEndpoint+0x8c>)
 800a384:	4323      	orrs	r3, r4
 800a386:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800a38a:	e7dc      	b.n	800a346 <USB_ActivateEndpoint+0x46>
 800a38c:	10008000 	.word	0x10008000

0800a390 <USB_DeactivateEndpoint>:
{
 800a390:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 800a392:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a394:	784a      	ldrb	r2, [r1, #1]
 800a396:	2a01      	cmp	r2, #1
 800a398:	d024      	beq.n	800a3e4 <USB_DeactivateEndpoint+0x54>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a39a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a39e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a3a2:	2a00      	cmp	r2, #0
 800a3a4:	db50      	blt.n	800a448 <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a3a6:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 800a3aa:	780a      	ldrb	r2, [r1, #0]
 800a3ac:	f002 020f 	and.w	r2, r2, #15
 800a3b0:	2401      	movs	r4, #1
 800a3b2:	fa04 f202 	lsl.w	r2, r4, r2
 800a3b6:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 800a3ba:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a3be:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800a3c2:	7809      	ldrb	r1, [r1, #0]
 800a3c4:	f001 010f 	and.w	r1, r1, #15
 800a3c8:	408c      	lsls	r4, r1
 800a3ca:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 800a3ce:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a3d2:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800a3d6:	4a23      	ldr	r2, [pc, #140]	; (800a464 <USB_DeactivateEndpoint+0xd4>)
 800a3d8:	400a      	ands	r2, r1
 800a3da:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800a3de:	2000      	movs	r0, #0
 800a3e0:	bc30      	pop	{r4, r5}
 800a3e2:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a3e4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a3e8:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a3ec:	2a00      	cmp	r2, #0
 800a3ee:	db1e      	blt.n	800a42e <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a3f0:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 800a3f4:	780a      	ldrb	r2, [r1, #0]
 800a3f6:	f002 020f 	and.w	r2, r2, #15
 800a3fa:	2401      	movs	r4, #1
 800a3fc:	fa04 f202 	lsl.w	r2, r4, r2
 800a400:	b292      	uxth	r2, r2
 800a402:	ea25 0202 	bic.w	r2, r5, r2
 800a406:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a40a:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800a40e:	7809      	ldrb	r1, [r1, #0]
 800a410:	f001 010f 	and.w	r1, r1, #15
 800a414:	408c      	lsls	r4, r1
 800a416:	b2a4      	uxth	r4, r4
 800a418:	ea22 0404 	bic.w	r4, r2, r4
 800a41c:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a420:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800a424:	4a10      	ldr	r2, [pc, #64]	; (800a468 <USB_DeactivateEndpoint+0xd8>)
 800a426:	400a      	ands	r2, r1
 800a428:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800a42c:	e7d7      	b.n	800a3de <USB_DeactivateEndpoint+0x4e>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a42e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a432:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a436:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a43a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a43e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a442:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800a446:	e7d3      	b.n	800a3f0 <USB_DeactivateEndpoint+0x60>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a448:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a44c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a450:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a454:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a458:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a45c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800a460:	e7a1      	b.n	800a3a6 <USB_DeactivateEndpoint+0x16>
 800a462:	bf00      	nop
 800a464:	eff37800 	.word	0xeff37800
 800a468:	ec337800 	.word	0xec337800

0800a46c <USB_EP0StartXfer>:
{
 800a46c:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 800a46e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a470:	784c      	ldrb	r4, [r1, #1]
 800a472:	2c01      	cmp	r4, #1
 800a474:	d024      	beq.n	800a4c0 <USB_EP0StartXfer+0x54>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a476:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a47a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800a47e:	691d      	ldr	r5, [r3, #16]
 800a480:	4c3e      	ldr	r4, [pc, #248]	; (800a57c <USB_EP0StartXfer+0x110>)
 800a482:	402c      	ands	r4, r5
 800a484:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a486:	691d      	ldr	r5, [r3, #16]
 800a488:	4c3d      	ldr	r4, [pc, #244]	; (800a580 <USB_EP0StartXfer+0x114>)
 800a48a:	402c      	ands	r4, r5
 800a48c:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 800a48e:	694c      	ldr	r4, [r1, #20]
 800a490:	b10c      	cbz	r4, 800a496 <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 800a492:	688c      	ldr	r4, [r1, #8]
 800a494:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a496:	691c      	ldr	r4, [r3, #16]
 800a498:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800a49c:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a49e:	691c      	ldr	r4, [r3, #16]
 800a4a0:	688d      	ldr	r5, [r1, #8]
 800a4a2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800a4a6:	432c      	orrs	r4, r5
 800a4a8:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800a4aa:	2a01      	cmp	r2, #1
 800a4ac:	d061      	beq.n	800a572 <USB_EP0StartXfer+0x106>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a4ae:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a4b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a4b6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	bc70      	pop	{r4, r5, r6}
 800a4be:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 800a4c0:	694c      	ldr	r4, [r1, #20]
 800a4c2:	bb5c      	cbnz	r4, 800a51c <USB_EP0StartXfer+0xb0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a4c4:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800a4c8:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800a4cc:	4d2c      	ldr	r5, [pc, #176]	; (800a580 <USB_EP0StartXfer+0x114>)
 800a4ce:	4035      	ands	r5, r6
 800a4d0:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a4d4:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800a4d8:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800a4dc:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a4e0:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800a4e4:	4d25      	ldr	r5, [pc, #148]	; (800a57c <USB_EP0StartXfer+0x110>)
 800a4e6:	4035      	ands	r5, r6
 800a4e8:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 800a4ec:	2a01      	cmp	r2, #1
 800a4ee:	d031      	beq.n	800a554 <USB_EP0StartXfer+0xe8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a4f0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a4f4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a4f8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800a4fc:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800a500:	694b      	ldr	r3, [r1, #20]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d0d9      	beq.n	800a4ba <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a506:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800a50a:	780a      	ldrb	r2, [r1, #0]
 800a50c:	f002 010f 	and.w	r1, r2, #15
 800a510:	2201      	movs	r2, #1
 800a512:	408a      	lsls	r2, r1
 800a514:	4313      	orrs	r3, r2
 800a516:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800a51a:	e7ce      	b.n	800a4ba <USB_EP0StartXfer+0x4e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a51c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800a520:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 800a524:	6926      	ldr	r6, [r4, #16]
 800a526:	4d15      	ldr	r5, [pc, #84]	; (800a57c <USB_EP0StartXfer+0x110>)
 800a528:	4035      	ands	r5, r6
 800a52a:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a52c:	6926      	ldr	r6, [r4, #16]
 800a52e:	4d14      	ldr	r5, [pc, #80]	; (800a580 <USB_EP0StartXfer+0x114>)
 800a530:	4035      	ands	r5, r6
 800a532:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 800a534:	694e      	ldr	r6, [r1, #20]
 800a536:	688d      	ldr	r5, [r1, #8]
 800a538:	42ae      	cmp	r6, r5
 800a53a:	d900      	bls.n	800a53e <USB_EP0StartXfer+0xd2>
        ep->xfer_len = ep->maxpacket;
 800a53c:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a53e:	6925      	ldr	r5, [r4, #16]
 800a540:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800a544:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a546:	6925      	ldr	r5, [r4, #16]
 800a548:	694e      	ldr	r6, [r1, #20]
 800a54a:	f3c6 0612 	ubfx	r6, r6, #0, #19
 800a54e:	4335      	orrs	r5, r6
 800a550:	6125      	str	r5, [r4, #16]
 800a552:	e7cb      	b.n	800a4ec <USB_EP0StartXfer+0x80>
      if ((uint32_t)ep->dma_addr != 0U)
 800a554:	690a      	ldr	r2, [r1, #16]
 800a556:	b11a      	cbz	r2, 800a560 <USB_EP0StartXfer+0xf4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a558:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800a55c:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a560:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a564:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800a568:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800a56c:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 800a570:	e7a3      	b.n	800a4ba <USB_EP0StartXfer+0x4e>
      if ((uint32_t)ep->xfer_buff != 0U)
 800a572:	68ca      	ldr	r2, [r1, #12]
 800a574:	2a00      	cmp	r2, #0
 800a576:	d09a      	beq.n	800a4ae <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a578:	615a      	str	r2, [r3, #20]
 800a57a:	e798      	b.n	800a4ae <USB_EP0StartXfer+0x42>
 800a57c:	fff80000 	.word	0xfff80000
 800a580:	e007ffff 	.word	0xe007ffff

0800a584 <USB_WritePacket>:
{
 800a584:	b470      	push	{r4, r5, r6}
 800a586:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 800a58a:	b964      	cbnz	r4, 800a5a6 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 800a58c:	3303      	adds	r3, #3
 800a58e:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 800a590:	42ac      	cmp	r4, r5
 800a592:	d208      	bcs.n	800a5a6 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a594:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 800a598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a59c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a5a0:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 800a5a2:	3401      	adds	r4, #1
 800a5a4:	e7f4      	b.n	800a590 <USB_WritePacket+0xc>
}
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	bc70      	pop	{r4, r5, r6}
 800a5aa:	4770      	bx	lr

0800a5ac <USB_EPStartXfer>:
{
 800a5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ae:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 800a5b0:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a5b2:	784c      	ldrb	r4, [r1, #1]
 800a5b4:	2c01      	cmp	r4, #1
 800a5b6:	d029      	beq.n	800a60c <USB_EPStartXfer+0x60>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a5b8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a5bc:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 800a5c0:	6926      	ldr	r6, [r4, #16]
 800a5c2:	4d7c      	ldr	r5, [pc, #496]	; (800a7b4 <USB_EPStartXfer+0x208>)
 800a5c4:	4035      	ands	r5, r6
 800a5c6:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a5c8:	6926      	ldr	r6, [r4, #16]
 800a5ca:	4d7b      	ldr	r5, [pc, #492]	; (800a7b8 <USB_EPStartXfer+0x20c>)
 800a5cc:	4035      	ands	r5, r6
 800a5ce:	6125      	str	r5, [r4, #16]
    if (ep->xfer_len == 0U)
 800a5d0:	694d      	ldr	r5, [r1, #20]
 800a5d2:	2d00      	cmp	r5, #0
 800a5d4:	f040 80bf 	bne.w	800a756 <USB_EPStartXfer+0x1aa>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a5d8:	6925      	ldr	r5, [r4, #16]
 800a5da:	688e      	ldr	r6, [r1, #8]
 800a5dc:	f3c6 0612 	ubfx	r6, r6, #0, #19
 800a5e0:	4335      	orrs	r5, r6
 800a5e2:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a5e4:	6925      	ldr	r5, [r4, #16]
 800a5e6:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800a5ea:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 800a5ec:	2a01      	cmp	r2, #1
 800a5ee:	f000 80c7 	beq.w	800a780 <USB_EPStartXfer+0x1d4>
    if (ep->type == EP_TYPE_ISOC)
 800a5f2:	78ca      	ldrb	r2, [r1, #3]
 800a5f4:	2a01      	cmp	r2, #1
 800a5f6:	f000 80c9 	beq.w	800a78c <USB_EPStartXfer+0x1e0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a5fa:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a5fe:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800a602:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800a606:	2000      	movs	r0, #0
 800a608:	b003      	add	sp, #12
 800a60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 800a60c:	694c      	ldr	r4, [r1, #20]
 800a60e:	bb74      	cbnz	r4, 800a66e <USB_EPStartXfer+0xc2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a610:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800a614:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800a618:	4d67      	ldr	r5, [pc, #412]	; (800a7b8 <USB_EPStartXfer+0x20c>)
 800a61a:	4035      	ands	r5, r6
 800a61c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a620:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800a624:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800a628:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a62c:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800a630:	4d60      	ldr	r5, [pc, #384]	; (800a7b4 <USB_EPStartXfer+0x208>)
 800a632:	4035      	ands	r5, r6
 800a634:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 800a638:	2a01      	cmp	r2, #1
 800a63a:	d04a      	beq.n	800a6d2 <USB_EPStartXfer+0x126>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a63c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a640:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800a644:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800a648:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800a64c:	78cc      	ldrb	r4, [r1, #3]
 800a64e:	2c01      	cmp	r4, #1
 800a650:	d068      	beq.n	800a724 <USB_EPStartXfer+0x178>
        if (ep->xfer_len > 0U)
 800a652:	694b      	ldr	r3, [r1, #20]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d0d6      	beq.n	800a606 <USB_EPStartXfer+0x5a>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a658:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800a65c:	7809      	ldrb	r1, [r1, #0]
 800a65e:	f001 040f 	and.w	r4, r1, #15
 800a662:	2101      	movs	r1, #1
 800a664:	40a1      	lsls	r1, r4
 800a666:	430a      	orrs	r2, r1
 800a668:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 800a66c:	e7cb      	b.n	800a606 <USB_EPStartXfer+0x5a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a66e:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800a672:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800a676:	4d4f      	ldr	r5, [pc, #316]	; (800a7b4 <USB_EPStartXfer+0x208>)
 800a678:	4035      	ands	r5, r6
 800a67a:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a67e:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800a682:	4d4d      	ldr	r5, [pc, #308]	; (800a7b8 <USB_EPStartXfer+0x20c>)
 800a684:	4035      	ands	r5, r6
 800a686:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a68a:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800a68e:	694d      	ldr	r5, [r1, #20]
 800a690:	688f      	ldr	r7, [r1, #8]
 800a692:	443d      	add	r5, r7
 800a694:	3d01      	subs	r5, #1
 800a696:	fbb5 f5f7 	udiv	r5, r5, r7
 800a69a:	4f48      	ldr	r7, [pc, #288]	; (800a7bc <USB_EPStartXfer+0x210>)
 800a69c:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 800a6a0:	4335      	orrs	r5, r6
 800a6a2:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a6a6:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800a6aa:	694e      	ldr	r6, [r1, #20]
 800a6ac:	f3c6 0612 	ubfx	r6, r6, #0, #19
 800a6b0:	4335      	orrs	r5, r6
 800a6b2:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a6b6:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800a6ba:	78cd      	ldrb	r5, [r1, #3]
 800a6bc:	2d01      	cmp	r5, #1
 800a6be:	d1bb      	bne.n	800a638 <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a6c0:	6925      	ldr	r5, [r4, #16]
 800a6c2:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800a6c6:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a6c8:	6925      	ldr	r5, [r4, #16]
 800a6ca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a6ce:	6125      	str	r5, [r4, #16]
 800a6d0:	e7b2      	b.n	800a638 <USB_EPStartXfer+0x8c>
      if ((uint32_t)ep->dma_addr != 0U)
 800a6d2:	690a      	ldr	r2, [r1, #16]
 800a6d4:	b11a      	cbz	r2, 800a6de <USB_EPStartXfer+0x132>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a6d6:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800a6da:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 800a6de:	78ca      	ldrb	r2, [r1, #3]
 800a6e0:	2a01      	cmp	r2, #1
 800a6e2:	d008      	beq.n	800a6f6 <USB_EPStartXfer+0x14a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a6e4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a6e8:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a6ec:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800a6f0:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800a6f4:	e787      	b.n	800a606 <USB_EPStartXfer+0x5a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a6f6:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800a6fa:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a6fe:	d108      	bne.n	800a712 <USB_EPStartXfer+0x166>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a700:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800a704:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 800a708:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800a70c:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 800a710:	e7e8      	b.n	800a6e4 <USB_EPStartXfer+0x138>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a712:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800a716:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 800a71a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a71e:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 800a722:	e7df      	b.n	800a6e4 <USB_EPStartXfer+0x138>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a724:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 800a728:	f414 7f80 	tst.w	r4, #256	; 0x100
 800a72c:	d10c      	bne.n	800a748 <USB_EPStartXfer+0x19c>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a72e:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800a732:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800a736:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a73a:	9200      	str	r2, [sp, #0]
 800a73c:	8a8b      	ldrh	r3, [r1, #20]
 800a73e:	780a      	ldrb	r2, [r1, #0]
 800a740:	68c9      	ldr	r1, [r1, #12]
 800a742:	f7ff ff1f 	bl	800a584 <USB_WritePacket>
 800a746:	e75e      	b.n	800a606 <USB_EPStartXfer+0x5a>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a748:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800a74c:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800a750:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 800a754:	e7f1      	b.n	800a73a <USB_EPStartXfer+0x18e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a756:	688e      	ldr	r6, [r1, #8]
 800a758:	4435      	add	r5, r6
 800a75a:	3d01      	subs	r5, #1
 800a75c:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a760:	6926      	ldr	r6, [r4, #16]
 800a762:	4f16      	ldr	r7, [pc, #88]	; (800a7bc <USB_EPStartXfer+0x210>)
 800a764:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 800a768:	433e      	orrs	r6, r7
 800a76a:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a76c:	6927      	ldr	r7, [r4, #16]
 800a76e:	688e      	ldr	r6, [r1, #8]
 800a770:	b2ad      	uxth	r5, r5
 800a772:	fb06 f505 	mul.w	r5, r6, r5
 800a776:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800a77a:	433d      	orrs	r5, r7
 800a77c:	6125      	str	r5, [r4, #16]
 800a77e:	e735      	b.n	800a5ec <USB_EPStartXfer+0x40>
      if ((uint32_t)ep->xfer_buff != 0U)
 800a780:	68ca      	ldr	r2, [r1, #12]
 800a782:	2a00      	cmp	r2, #0
 800a784:	f43f af35 	beq.w	800a5f2 <USB_EPStartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a788:	6162      	str	r2, [r4, #20]
 800a78a:	e732      	b.n	800a5f2 <USB_EPStartXfer+0x46>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a78c:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800a790:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a794:	d106      	bne.n	800a7a4 <USB_EPStartXfer+0x1f8>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a796:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a79a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800a79e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800a7a2:	e72a      	b.n	800a5fa <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a7a4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a7a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a7ac:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800a7b0:	e723      	b.n	800a5fa <USB_EPStartXfer+0x4e>
 800a7b2:	bf00      	nop
 800a7b4:	fff80000 	.word	0xfff80000
 800a7b8:	e007ffff 	.word	0xe007ffff
 800a7bc:	1ff80000 	.word	0x1ff80000

0800a7c0 <USB_ReadPacket>:
{
 800a7c0:	b410      	push	{r4}
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a7c2:	3203      	adds	r2, #3
 800a7c4:	0894      	lsrs	r4, r2, #2
  for (i = 0U; i < count32b; i++)
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	42a3      	cmp	r3, r4
 800a7ca:	d206      	bcs.n	800a7da <USB_ReadPacket+0x1a>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a7cc:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
 800a7d0:	6812      	ldr	r2, [r2, #0]
 800a7d2:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0U; i < count32b; i++)
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	e7f6      	b.n	800a7c8 <USB_ReadPacket+0x8>
}
 800a7da:	4608      	mov	r0, r1
 800a7dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7e0:	4770      	bx	lr

0800a7e2 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800a7e2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a7e4:	784a      	ldrb	r2, [r1, #1]
 800a7e6:	2a01      	cmp	r2, #1
 800a7e8:	d014      	beq.n	800a814 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a7ea:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a7ee:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800a7f2:	2a00      	cmp	r2, #0
 800a7f4:	db06      	blt.n	800a804 <USB_EPSetStall+0x22>
 800a7f6:	b12b      	cbz	r3, 800a804 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a7f8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a7fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a800:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a804:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a808:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a80c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800a810:	2000      	movs	r0, #0
 800a812:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a814:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a818:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800a81c:	2a00      	cmp	r2, #0
 800a81e:	db06      	blt.n	800a82e <USB_EPSetStall+0x4c>
 800a820:	b12b      	cbz	r3, 800a82e <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a822:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a826:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a82a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a82e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a836:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800a83a:	e7e9      	b.n	800a810 <USB_EPSetStall+0x2e>

0800a83c <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800a83c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a83e:	784a      	ldrb	r2, [r1, #1]
 800a840:	2a01      	cmp	r2, #1
 800a842:	d00e      	beq.n	800a862 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a844:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a848:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a84c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a850:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a854:	78cb      	ldrb	r3, [r1, #3]
 800a856:	3b02      	subs	r3, #2
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d915      	bls.n	800a88a <USB_EPClearStall+0x4e>
}
 800a85e:	2000      	movs	r0, #0
 800a860:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a862:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a866:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a86a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a86e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a872:	78cb      	ldrb	r3, [r1, #3]
 800a874:	3b02      	subs	r3, #2
 800a876:	b2db      	uxtb	r3, r3
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d8f0      	bhi.n	800a85e <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a87c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a884:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800a888:	e7e9      	b.n	800a85e <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a88a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a88e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a892:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800a896:	e7e2      	b.n	800a85e <USB_EPClearStall+0x22>

0800a898 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a898:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800a89c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a8a0:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a8a4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800a8a8:	0109      	lsls	r1, r1, #4
 800a8aa:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800a8ae:	4319      	orrs	r1, r3
 800a8b0:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800a8b4:	2000      	movs	r0, #0
 800a8b6:	4770      	bx	lr

0800a8b8 <USB_DevConnect>:
{
 800a8b8:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a8ba:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800a8be:	f023 0302 	bic.w	r3, r3, #2
 800a8c2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800a8c6:	2003      	movs	r0, #3
 800a8c8:	f7fa fb70 	bl	8004fac <HAL_Delay>
}
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	bd08      	pop	{r3, pc}

0800a8d0 <USB_DevDisconnect>:
{
 800a8d0:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8d2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800a8d6:	f043 0302 	orr.w	r3, r3, #2
 800a8da:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800a8de:	2003      	movs	r0, #3
 800a8e0:	f7fa fb64 	bl	8004fac <HAL_Delay>
}
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	bd08      	pop	{r3, pc}

0800a8e8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800a8e8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800a8ea:	6980      	ldr	r0, [r0, #24]
}
 800a8ec:	4010      	ands	r0, r2
 800a8ee:	4770      	bx	lr

0800a8f0 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800a8f0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800a8f4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a8f8:	69c0      	ldr	r0, [r0, #28]
 800a8fa:	4018      	ands	r0, r3
}
 800a8fc:	0c00      	lsrs	r0, r0, #16
 800a8fe:	4770      	bx	lr

0800a900 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800a900:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800a904:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a908:	69c0      	ldr	r0, [r0, #28]
 800a90a:	4018      	ands	r0, r3
}
 800a90c:	b280      	uxth	r0, r0
 800a90e:	4770      	bx	lr

0800a910 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a910:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800a914:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a918:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800a91c:	6940      	ldr	r0, [r0, #20]
}
 800a91e:	4010      	ands	r0, r2
 800a920:	4770      	bx	lr

0800a922 <USB_ReadDevInEPInterrupt>:
{
 800a922:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 800a924:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a928:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a92c:	f001 020f 	and.w	r2, r1, #15
 800a930:	40d3      	lsrs	r3, r2
 800a932:	01db      	lsls	r3, r3, #7
 800a934:	b2db      	uxtb	r3, r3
 800a936:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a938:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800a93c:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800a940:	6880      	ldr	r0, [r0, #8]
}
 800a942:	4018      	ands	r0, r3
 800a944:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800a94a:	6940      	ldr	r0, [r0, #20]
}
 800a94c:	f000 0001 	and.w	r0, r0, #1
 800a950:	4770      	bx	lr
	...

0800a954 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a954:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800a958:	4b05      	ldr	r3, [pc, #20]	; (800a970 <USB_ActivateSetup+0x1c>)
 800a95a:	4013      	ands	r3, r2
 800a95c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a960:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800a964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a968:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800a96c:	2000      	movs	r0, #0
 800a96e:	4770      	bx	lr
 800a970:	fffff800 	.word	0xfffff800

0800a974 <USB_EP0_OutStart>:
{
 800a974:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a976:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a978:	4b15      	ldr	r3, [pc, #84]	; (800a9d0 <USB_EP0_OutStart+0x5c>)
 800a97a:	429c      	cmp	r4, r3
 800a97c:	d903      	bls.n	800a986 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a97e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a982:	2b00      	cmp	r3, #0
 800a984:	db16      	blt.n	800a9b4 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a986:	2400      	movs	r4, #0
 800a988:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a98c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800a990:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800a994:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a998:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800a99c:	f044 0418 	orr.w	r4, r4, #24
 800a9a0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a9a4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800a9a8:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800a9ac:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 800a9b0:	2901      	cmp	r1, #1
 800a9b2:	d003      	beq.n	800a9bc <USB_EP0_OutStart+0x48>
}
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9ba:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a9bc:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a9c0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a9c4:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a9c8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800a9cc:	e7f2      	b.n	800a9b4 <USB_EP0_OutStart+0x40>
 800a9ce:	bf00      	nop
 800a9d0:	4f54300a 	.word	0x4f54300a

0800a9d4 <get_usb_full_speed_rate>:
  * @param  buf: 
  * @retval 
  */
static  unsigned get_usb_full_speed_rate(unsigned int rate, unsigned char * buf)
{
        uint32_t freq =  ((rate << 13) + 62) / 125;
 800a9d4:	0340      	lsls	r0, r0, #13
 800a9d6:	303e      	adds	r0, #62	; 0x3e
 800a9d8:	4b05      	ldr	r3, [pc, #20]	; (800a9f0 <get_usb_full_speed_rate+0x1c>)
 800a9da:	fba3 3000 	umull	r3, r0, r3, r0
        buf[0] =    freq>> 2;
 800a9de:	0943      	lsrs	r3, r0, #5
 800a9e0:	700b      	strb	r3, [r1, #0]
        buf[1] =    freq>> 10;
 800a9e2:	0b43      	lsrs	r3, r0, #13
 800a9e4:	704b      	strb	r3, [r1, #1]
        buf[2] =    freq>> 18;
 800a9e6:	0d40      	lsrs	r0, r0, #21
 800a9e8:	7088      	strb	r0, [r1, #2]
return 0;
 }
 800a9ea:	2000      	movs	r0, #0
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	10624dd3 	.word	0x10624dd3

0800a9f4 <USBD_AUDIO_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_AUDIO_GetCfgDesc (uint16_t *length)
{
  *length = USBD_AUDIO_CfgDescSize;
 800a9f4:	4b02      	ldr	r3, [pc, #8]	; (800aa00 <USBD_AUDIO_GetCfgDesc+0xc>)
 800a9f6:	881a      	ldrh	r2, [r3, #0]
 800a9f8:	8002      	strh	r2, [r0, #0]
  return USBD_AUDIO_CfgDesc;
}
 800a9fa:	6858      	ldr	r0, [r3, #4]
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	20000ad8 	.word	0x20000ad8

0800aa04 <USBD_AUDIO_EP0_TxReady>:
  */
static uint8_t  USBD_AUDIO_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
  /* Only OUT control data are processed */
  return USBD_OK;
}
 800aa04:	2000      	movs	r0, #0
 800aa06:	4770      	bx	lr

0800aa08 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_SOF (USBD_HandleTypeDef *pdev)
{
 800aa08:	b538      	push	{r3, r4, r5, lr}
    USBD_AUDIO_HandleTypeDef   *haudio;
  
 
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData; 
 800aa0a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  
  for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 800aa0e:	2400      	movs	r4, #0
 800aa10:	e000      	b.n	800aa14 <USBD_AUDIO_SOF+0xc>
 800aa12:	3401      	adds	r4, #1
 800aa14:	786b      	ldrb	r3, [r5, #1]
 800aa16:	42a3      	cmp	r3, r4
 800aa18:	dd15      	ble.n	800aa46 <USBD_AUDIO_SOF+0x3e>
  {
      if(haudio->aud_function.as_interfaces[i].alternate!=0)
 800aa1a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800aa1e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800aa22:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d0f3      	beq.n	800aa12 <USBD_AUDIO_SOF+0xa>
      {
        if(haudio->aud_function.as_interfaces[i].SofReceived)
 800aa2a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800aa2e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800aa32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aa34:	2a00      	cmp	r2, #0
 800aa36:	d0ec      	beq.n	800aa12 <USBD_AUDIO_SOF+0xa>
          
        {
          haudio->aud_function.as_interfaces[i].SofReceived(haudio->aud_function.as_interfaces[i].private_data);
 800aa38:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800aa3c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800aa40:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800aa42:	4790      	blx	r2
 800aa44:	e7e5      	b.n	800aa12 <USBD_AUDIO_SOF+0xa>
        }
      }
  }
  return USBD_OK;
}
 800aa46:	2000      	movs	r0, #0
 800aa48:	bd38      	pop	{r3, r4, r5, pc}

0800aa4a <USBD_AUDIO_IsoOutIncomplete>:
  */
static uint8_t  USBD_AUDIO_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{

  return USBD_OK;
}
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	4770      	bx	lr
	...

0800aa50 <USBD_AUDIO_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_AUDIO_DeviceQualifierDesc);
 800aa50:	230a      	movs	r3, #10
 800aa52:	8003      	strh	r3, [r0, #0]
  return USBD_AUDIO_DeviceQualifierDesc;
}
 800aa54:	4800      	ldr	r0, [pc, #0]	; (800aa58 <USBD_AUDIO_GetDeviceQualifierDesc+0x8>)
 800aa56:	4770      	bx	lr
 800aa58:	20000144 	.word	0x20000144

0800aa5c <USBD_AUDIO_IsoINIncomplete>:
{
 800aa5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5e:	4606      	mov	r6, r0
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 800aa60:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  for(int i = 1; i<USBD_AUDIO_MAX_IN_EP; i++)
 800aa64:	2401      	movs	r4, #1
 800aa66:	e025      	b.n	800aab4 <USBD_AUDIO_IsoINIncomplete+0x58>
      epnum = i|0x80;
 800aa68:	f064 037f 	orn	r3, r4, #127	; 0x7f
 800aa6c:	b2df      	uxtb	r7, r3
      USB_CLEAR_INCOMPLETE_IN_EP(epnum);
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	db48      	blt.n	800ab04 <USBD_AUDIO_IsoINIncomplete+0xa8>
      USBD_LL_FlushEP(pdev, epnum);
 800aa72:	4639      	mov	r1, r7
 800aa74:	4630      	mov	r0, r6
 800aa76:	f003 fbb7 	bl	800e1e8 <USBD_LL_FlushEP>
      ep->tx_rx_soffn = USB_SOF_NUMBER();
 800aa7a:	4b31      	ldr	r3, [pc, #196]	; (800ab40 <USBD_AUDIO_IsoINIncomplete+0xe4>)
 800aa7c:	689a      	ldr	r2, [r3, #8]
 800aa7e:	f3c2 220d 	ubfx	r2, r2, #8, #14
 800aa82:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800aa86:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800aa8a:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
     if(ep->ep_type==USBD_AUDIO_FEEDBACK_EP)
 800aa8e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d040      	beq.n	800ab18 <USBD_AUDIO_IsoINIncomplete+0xbc>
     if(ep->ep_type==USBD_AUDIO_DATA_EP)
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d14c      	bne.n	800ab34 <USBD_AUDIO_IsoINIncomplete+0xd8>
                      ep->ep_description.data_ep->buf,
 800aa9a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800aa9e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800aaa2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
        USBD_LL_Transmit(pdev, 
 800aaa6:	8993      	ldrh	r3, [r2, #12]
 800aaa8:	6892      	ldr	r2, [r2, #8]
 800aaaa:	4639      	mov	r1, r7
 800aaac:	4630      	mov	r0, r6
 800aaae:	f003 fbce 	bl	800e24e <USBD_LL_Transmit>
  for(int i = 1; i<USBD_AUDIO_MAX_IN_EP; i++)
 800aab2:	3401      	adds	r4, #1
 800aab4:	2c04      	cmp	r4, #4
 800aab6:	dc40      	bgt.n	800ab3a <USBD_AUDIO_IsoINIncomplete+0xde>
    current_sof = USB_SOF_NUMBER();
 800aab8:	4b21      	ldr	r3, [pc, #132]	; (800ab40 <USBD_AUDIO_IsoINIncomplete+0xe4>)
 800aaba:	6899      	ldr	r1, [r3, #8]
 800aabc:	f3c1 210d 	ubfx	r1, r1, #8, #14
    if((ep->open) && IS_ISO_IN_INCOMPLETE_EP(i,current_sof, ep->tx_rx_soffn))
 800aac0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800aac4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800aac8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d0f0      	beq.n	800aab2 <USBD_AUDIO_IsoINIncomplete+0x56>
 800aad0:	f004 027f 	and.w	r2, r4, #127	; 0x7f
 800aad4:	4b1b      	ldr	r3, [pc, #108]	; (800ab44 <USBD_AUDIO_IsoINIncomplete+0xe8>)
 800aad6:	4413      	add	r3, r2
 800aad8:	015b      	lsls	r3, r3, #5
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	2a00      	cmp	r2, #0
 800aade:	dae8      	bge.n	800aab2 <USBD_AUDIO_IsoINIncomplete+0x56>
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	ea81 4313 	eor.w	r3, r1, r3, lsr #16
 800aae6:	f013 0f01 	tst.w	r3, #1
 800aaea:	d0bd      	beq.n	800aa68 <USBD_AUDIO_IsoINIncomplete+0xc>
 800aaec:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800aaf0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800aaf4:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800aaf8:	3302      	adds	r3, #2
 800aafa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aafe:	4299      	cmp	r1, r3
 800ab00:	d1d7      	bne.n	800aab2 <USBD_AUDIO_IsoINIncomplete+0x56>
 800ab02:	e7b1      	b.n	800aa68 <USBD_AUDIO_IsoINIncomplete+0xc>
      USB_CLEAR_INCOMPLETE_IN_EP(epnum);
 800ab04:	f007 027f 	and.w	r2, r7, #127	; 0x7f
 800ab08:	4b0e      	ldr	r3, [pc, #56]	; (800ab44 <USBD_AUDIO_IsoINIncomplete+0xe8>)
 800ab0a:	4413      	add	r3, r2
 800ab0c:	015b      	lsls	r3, r3, #5
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	f042 4290 	orr.w	r2, r2, #1207959552	; 0x48000000
 800ab14:	601a      	str	r2, [r3, #0]
 800ab16:	e7ac      	b.n	800aa72 <USBD_AUDIO_IsoINIncomplete+0x16>
                         ep->ep_description.sync_ep->feedback_data,
 800ab18:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ab1c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ab20:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
        USBD_LL_Transmit(pdev, 
 800ab24:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800ab28:	3201      	adds	r2, #1
 800ab2a:	4639      	mov	r1, r7
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	f003 fb8e 	bl	800e24e <USBD_LL_Transmit>
        continue;
 800ab32:	e7be      	b.n	800aab2 <USBD_AUDIO_IsoINIncomplete+0x56>
       USBD_error_handler();
 800ab34:	f002 fe46 	bl	800d7c4 <Error_Handler>
 800ab38:	e7bb      	b.n	800aab2 <USBD_AUDIO_IsoINIncomplete+0x56>
}
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	40040800 	.word	0x40040800
 800ab44:	02002048 	.word	0x02002048

0800ab48 <USBD_AUDIO_DataIn>:
{
 800ab48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ep = &((USBD_AUDIO_HandleTypeDef*) pdev->pClassData)->ep_in[epnum&0x7F];
 800ab4c:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
 800ab50:	f001 047f 	and.w	r4, r1, #127	; 0x7f
   if(ep->open)
 800ab54:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ab58:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ab5c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d04e      	beq.n	800ac02 <USBD_AUDIO_DataIn+0xba>
 800ab64:	4605      	mov	r5, r0
 800ab66:	460e      	mov	r6, r1
      if(ep->ep_type==USBD_AUDIO_DATA_EP)
 800ab68:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ab6c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ab70:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ab74:	bb03      	cbnz	r3, 800abb8 <USBD_AUDIO_DataIn+0x70>
          ep->ep_description.data_ep->buf = ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,
 800ab76:	eb04 0944 	add.w	r9, r4, r4, lsl #1
 800ab7a:	eb07 0989 	add.w	r9, r7, r9, lsl #2
 800ab7e:	f8d9 a0b4 	ldr.w	sl, [r9, #180]	; 0xb4
 800ab82:	f8da 3014 	ldr.w	r3, [sl, #20]
 800ab86:	f10a 010c 	add.w	r1, sl, #12
 800ab8a:	f8da 0020 	ldr.w	r0, [sl, #32]
 800ab8e:	4798      	blx	r3
 800ab90:	f8ca 0008 	str.w	r0, [sl, #8]
          ep->tx_rx_soffn = USB_SOF_NUMBER();
 800ab94:	4b1c      	ldr	r3, [pc, #112]	; (800ac08 <USBD_AUDIO_DataIn+0xc0>)
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800ab9c:	f8a9 30bc 	strh.w	r3, [r9, #188]	; 0xbc
                      ep->ep_description.data_ep->buf,
 800aba0:	f8d9 20b4 	ldr.w	r2, [r9, #180]	; 0xb4
          USBD_LL_Transmit(pdev, 
 800aba4:	8993      	ldrh	r3, [r2, #12]
 800aba6:	6892      	ldr	r2, [r2, #8]
 800aba8:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 800abac:	4628      	mov	r0, r5
 800abae:	f003 fb4e 	bl	800e24e <USBD_LL_Transmit>
}
 800abb2:	2000      	movs	r0, #0
 800abb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     if(ep->ep_type==USBD_AUDIO_FEEDBACK_EP)
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d1fa      	bne.n	800abb2 <USBD_AUDIO_DataIn+0x6a>
       USBD_AUDIO_EP_SynchTypeDef* sync_ep=ep->ep_description.sync_ep;
 800abbc:	ea4f 0944 	mov.w	r9, r4, lsl #1
 800abc0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800abc4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800abc8:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
       rate = sync_ep->GetFeedback(sync_ep->private_data);
 800abcc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800abd0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800abd4:	4798      	blx	r3
       get_usb_full_speed_rate(rate,sync_ep->feedback_data);
 800abd6:	f108 0801 	add.w	r8, r8, #1
 800abda:	4641      	mov	r1, r8
 800abdc:	f7ff fefa 	bl	800a9d4 <get_usb_full_speed_rate>
       ep->tx_rx_soffn = USB_SOF_NUMBER();
 800abe0:	4b09      	ldr	r3, [pc, #36]	; (800ac08 <USBD_AUDIO_DataIn+0xc0>)
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800abe8:	444c      	add	r4, r9
 800abea:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 800abee:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
       USBD_LL_Transmit(pdev, 
 800abf2:	2303      	movs	r3, #3
 800abf4:	4642      	mov	r2, r8
 800abf6:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 800abfa:	4628      	mov	r0, r5
 800abfc:	f003 fb27 	bl	800e24e <USBD_LL_Transmit>
 800ac00:	e7d7      	b.n	800abb2 <USBD_AUDIO_DataIn+0x6a>
     USBD_error_handler();
 800ac02:	f002 fddf 	bl	800d7c4 <Error_Handler>
 800ac06:	e7d4      	b.n	800abb2 <USBD_AUDIO_DataIn+0x6a>
 800ac08:	40040800 	.word	0x40040800

0800ac0c <USBD_AUDIO_EP0_RxReady>:
{
 800ac0c:	b538      	push	{r3, r4, r5, lr}
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData; 
 800ac0e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
  if(haudio->last_control.req == 0x00)
 800ac12:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800ac16:	b11a      	cbz	r2, 800ac20 <USBD_AUDIO_EP0_RxReady+0x14>
  if(haudio->last_control.request_target == AUDIO_UNIT_CONTROL_REQUEST)
 800ac18:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 800ac1c:	2901      	cmp	r1, #1
 800ac1e:	d001      	beq.n	800ac24 <USBD_AUDIO_EP0_RxReady+0x18>
}
 800ac20:	2000      	movs	r0, #0
 800ac22:	bd38      	pop	{r3, r4, r5, pc}
    ctl=haudio->last_control.entity.controller;
 800ac24:	f8d3 112c 	ldr.w	r1, [r3, #300]	; 0x12c
    switch(ctl->type)
 800ac28:	7848      	ldrb	r0, [r1, #1]
 800ac2a:	2806      	cmp	r0, #6
 800ac2c:	d121      	bne.n	800ac72 <USBD_AUDIO_EP0_RxReady+0x66>
            uint16_t selector = HIBYTE(haudio->last_control.wValue);
 800ac2e:	f8b3 0178 	ldrh.w	r0, [r3, #376]	; 0x178
 800ac32:	0a04      	lsrs	r4, r0, #8
            USBD_AUDIO_FeatureControlCallbacksTypeDef* feature_control = ctl->Callbacks.feature_control;
 800ac34:	688d      	ldr	r5, [r1, #8]
          switch(selector)
 800ac36:	2c01      	cmp	r4, #1
 800ac38:	d004      	beq.n	800ac44 <USBD_AUDIO_EP0_RxReady+0x38>
 800ac3a:	2c02      	cmp	r4, #2
 800ac3c:	d00b      	beq.n	800ac56 <USBD_AUDIO_EP0_RxReady+0x4a>
                          USBD_error_handler();
 800ac3e:	f002 fdc1 	bl	800d7c4 <Error_Handler>
 800ac42:	e7ed      	b.n	800ac20 <USBD_AUDIO_EP0_RxReady+0x14>
                      if(feature_control->SetMute)
 800ac44:	686c      	ldr	r4, [r5, #4]
 800ac46:	2c00      	cmp	r4, #0
 800ac48:	d0ea      	beq.n	800ac20 <USBD_AUDIO_EP0_RxReady+0x14>
                        feature_control->SetMute(LOBYTE(haudio->last_control.wValue),
 800ac4a:	68ca      	ldr	r2, [r1, #12]
 800ac4c:	f893 1131 	ldrb.w	r1, [r3, #305]	; 0x131
 800ac50:	b2c0      	uxtb	r0, r0
 800ac52:	47a0      	blx	r4
 800ac54:	e7e4      	b.n	800ac20 <USBD_AUDIO_EP0_RxReady+0x14>
                       switch(haudio->last_control.req)
 800ac56:	2a01      	cmp	r2, #1
 800ac58:	d108      	bne.n	800ac6c <USBD_AUDIO_EP0_RxReady+0x60>
                              if(feature_control->SetCurVolume)
 800ac5a:	68ac      	ldr	r4, [r5, #8]
 800ac5c:	2c00      	cmp	r4, #0
 800ac5e:	d0df      	beq.n	800ac20 <USBD_AUDIO_EP0_RxReady+0x14>
                                  feature_control->SetCurVolume(LOBYTE(haudio->last_control.wValue),
 800ac60:	68ca      	ldr	r2, [r1, #12]
 800ac62:	f8b3 1131 	ldrh.w	r1, [r3, #305]	; 0x131
 800ac66:	b2c0      	uxtb	r0, r0
 800ac68:	47a0      	blx	r4
 800ac6a:	e7d9      	b.n	800ac20 <USBD_AUDIO_EP0_RxReady+0x14>
                                USBD_error_handler();
 800ac6c:	f002 fdaa 	bl	800d7c4 <Error_Handler>
 800ac70:	e7d6      	b.n	800ac20 <USBD_AUDIO_EP0_RxReady+0x14>
            USBD_error_handler();
 800ac72:	f002 fda7 	bl	800d7c4 <Error_Handler>
 800ac76:	e7d3      	b.n	800ac20 <USBD_AUDIO_EP0_RxReady+0x14>

0800ac78 <USBD_AUDIO_DataOut>:
{
 800ac78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac7a:	b083      	sub	sp, #12
  ep=&((USBD_AUDIO_HandleTypeDef*) pdev->pClassData)->ep_out[epnum];
 800ac7c:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  if(ep->open)
 800ac80:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800ac84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ac88:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800ac8c:	b323      	cbz	r3, 800acd8 <USBD_AUDIO_DataOut+0x60>
 800ac8e:	4605      	mov	r5, r0
 800ac90:	460c      	mov	r4, r1
    packet_length = USBD_LL_GetRxDataSize(pdev, epnum);
 800ac92:	f003 faea 	bl	800e26a <USBD_LL_GetRxDataSize>
 800ac96:	b280      	uxth	r0, r0
 800ac98:	f8ad 0006 	strh.w	r0, [sp, #6]
    ep->ep_description.data_ep->DataReceived(packet_length,ep->ep_description.data_ep->private_data);
 800ac9c:	0067      	lsls	r7, r4, #1
 800ac9e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800aca2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aca6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800acaa:	691a      	ldr	r2, [r3, #16]
 800acac:	6a19      	ldr	r1, [r3, #32]
 800acae:	4790      	blx	r2
    pbuf=  ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,&packet_length);                               
 800acb0:	4427      	add	r7, r4
 800acb2:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 800acb6:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 800acba:	695a      	ldr	r2, [r3, #20]
 800acbc:	f10d 0106 	add.w	r1, sp, #6
 800acc0:	6a18      	ldr	r0, [r3, #32]
 800acc2:	4790      	blx	r2
 800acc4:	4602      	mov	r2, r0
     USBD_LL_PrepareReceive(pdev,
 800acc6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800acca:	4621      	mov	r1, r4
 800accc:	4628      	mov	r0, r5
 800acce:	f003 fac5 	bl	800e25c <USBD_LL_PrepareReceive>
}
 800acd2:	2000      	movs	r0, #0
 800acd4:	b003      	add	sp, #12
 800acd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBD_error_handler();
 800acd8:	f002 fd74 	bl	800d7c4 <Error_Handler>
 800acdc:	e7f9      	b.n	800acd2 <USBD_AUDIO_DataOut+0x5a>

0800acde <AUDIO_REQ>:
{  
 800acde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace0:	4605      	mov	r5, r0
 800ace2:	460e      	mov	r6, r1
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 800ace4:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  haudio->last_control.req = 0x00;
 800ace8:	2300      	movs	r3, #0
 800acea:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
  unit_id = HIBYTE(req->wIndex);
 800acee:	8888      	ldrh	r0, [r1, #4]
 800acf0:	0a00      	lsrs	r0, r0, #8
  for (int i = 0;i < haudio->aud_function.control_count; i++)
 800acf2:	7822      	ldrb	r2, [r4, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	dd0a      	ble.n	800ad0e <AUDIO_REQ+0x30>
    if(unit_id == haudio->aud_function.controls[i].id)
 800acf8:	eb04 1203 	add.w	r2, r4, r3, lsl #4
 800acfc:	7912      	ldrb	r2, [r2, #4]
 800acfe:	4282      	cmp	r2, r0
 800ad00:	d001      	beq.n	800ad06 <AUDIO_REQ+0x28>
  for (int i = 0;i < haudio->aud_function.control_count; i++)
 800ad02:	3301      	adds	r3, #1
 800ad04:	e7f5      	b.n	800acf2 <AUDIO_REQ+0x14>
      ctl = &haudio->aud_function.controls[i];
 800ad06:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 800ad0a:	3304      	adds	r3, #4
      break;
 800ad0c:	e000      	b.n	800ad10 <AUDIO_REQ+0x32>
  USBD_AUDIO_ControlTypeDef * ctl = 0;
 800ad0e:	2300      	movs	r3, #0
  if(!ctl)
 800ad10:	b1b3      	cbz	r3, 800ad40 <AUDIO_REQ+0x62>
  control_selector = HIBYTE(req->wValue);
 800ad12:	8870      	ldrh	r0, [r6, #2]
 800ad14:	0a01      	lsrs	r1, r0, #8
  if((ctl->control_selector_map & control_selector) == 0)
 800ad16:	889a      	ldrh	r2, [r3, #4]
 800ad18:	ea12 2210 	ands.w	r2, r2, r0, lsr #8
 800ad1c:	d016      	beq.n	800ad4c <AUDIO_REQ+0x6e>
  if(!(req->bRequest&0x80))
 800ad1e:	7877      	ldrb	r7, [r6, #1]
 800ad20:	f996 2001 	ldrsb.w	r2, [r6, #1]
 800ad24:	2a00      	cmp	r2, #0
 800ad26:	da17      	bge.n	800ad58 <AUDIO_REQ+0x7a>
  switch(ctl->type)
 800ad28:	785a      	ldrb	r2, [r3, #1]
 800ad2a:	2a06      	cmp	r2, #6
 800ad2c:	d160      	bne.n	800adf0 <AUDIO_REQ+0x112>
           USBD_AUDIO_FeatureControlCallbacksTypeDef* feature_control = ctl->Callbacks.feature_control;
 800ad2e:	689a      	ldr	r2, [r3, #8]
          switch(control_selector)
 800ad30:	2901      	cmp	r1, #1
 800ad32:	d026      	beq.n	800ad82 <AUDIO_REQ+0xa4>
 800ad34:	2902      	cmp	r1, #2
 800ad36:	d036      	beq.n	800ada6 <AUDIO_REQ+0xc8>
                          USBD_error_handler();
 800ad38:	f002 fd44 	bl	800d7c4 <Error_Handler>
  return USBD_OK;
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	e05a      	b.n	800adf6 <AUDIO_REQ+0x118>
    USBD_CtlError (pdev, req);
 800ad40:	4631      	mov	r1, r6
 800ad42:	4628      	mov	r0, r5
 800ad44:	f000 fbe5 	bl	800b512 <USBD_CtlError>
    return  USBD_FAIL; 
 800ad48:	2003      	movs	r0, #3
 800ad4a:	e054      	b.n	800adf6 <AUDIO_REQ+0x118>
    USBD_CtlError (pdev, req);
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	4628      	mov	r0, r5
 800ad50:	f000 fbdf 	bl	800b512 <USBD_CtlError>
      return  USBD_FAIL; 
 800ad54:	2003      	movs	r0, #3
 800ad56:	e04e      	b.n	800adf6 <AUDIO_REQ+0x118>
     haudio->last_control.wValue  = req->wValue;
 800ad58:	f8a4 0178 	strh.w	r0, [r4, #376]	; 0x178
     haudio->last_control.entity.controller= ctl;
 800ad5c:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
     haudio->last_control.request_target = AUDIO_UNIT_CONTROL_REQUEST;
 800ad60:	2301      	movs	r3, #1
 800ad62:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
     haudio->last_control.len = req->wLength;
 800ad66:	88f3      	ldrh	r3, [r6, #6]
 800ad68:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
     haudio->last_control.req = req->bRequest;
 800ad6c:	7873      	ldrb	r3, [r6, #1]
 800ad6e:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
     USBD_CtlPrepareRx (pdev,
 800ad72:	88f2      	ldrh	r2, [r6, #6]
 800ad74:	f204 1131 	addw	r1, r4, #305	; 0x131
 800ad78:	4628      	mov	r0, r5
 800ad7a:	f000 ff16 	bl	800bbaa <USBD_CtlPrepareRx>
      return USBD_OK;   
 800ad7e:	2000      	movs	r0, #0
 800ad80:	e039      	b.n	800adf6 <AUDIO_REQ+0x118>
                      haudio->last_control.data[0] = 0;
 800ad82:	2100      	movs	r1, #0
 800ad84:	f884 1131 	strb.w	r1, [r4, #305]	; 0x131
                      if(feature_control->GetMute)
 800ad88:	6817      	ldr	r7, [r2, #0]
 800ad8a:	b127      	cbz	r7, 800ad96 <AUDIO_REQ+0xb8>
                        feature_control->GetMute(LOBYTE(req->wValue),
 800ad8c:	68da      	ldr	r2, [r3, #12]
 800ad8e:	f204 1131 	addw	r1, r4, #305	; 0x131
 800ad92:	78b0      	ldrb	r0, [r6, #2]
 800ad94:	47b8      	blx	r7
                      USBD_CtlSendData (pdev, haudio->last_control.data,1);
 800ad96:	2201      	movs	r2, #1
 800ad98:	f204 1131 	addw	r1, r4, #305	; 0x131
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	f000 feef 	bl	800bb80 <USBD_CtlSendData>
  return USBD_OK;
 800ada2:	2000      	movs	r0, #0
                      break;
 800ada4:	e027      	b.n	800adf6 <AUDIO_REQ+0x118>
                       tmpdata =  (uint16_t*) &(haudio->last_control.data);
 800ada6:	f204 1431 	addw	r4, r4, #305	; 0x131
                        switch(req->bRequest)
 800adaa:	3f81      	subs	r7, #129	; 0x81
 800adac:	2f03      	cmp	r7, #3
 800adae:	d81a      	bhi.n	800ade6 <AUDIO_REQ+0x108>
 800adb0:	e8df f007 	tbb	[pc, r7]
 800adb4:	16130a02 	.word	0x16130a02
                              if(feature_control->GetCurVolume)
 800adb8:	68d6      	ldr	r6, [r2, #12]
 800adba:	b1be      	cbz	r6, 800adec <AUDIO_REQ+0x10e>
                                  feature_control->GetCurVolume(LOBYTE(req->wValue),
 800adbc:	68da      	ldr	r2, [r3, #12]
 800adbe:	4621      	mov	r1, r4
 800adc0:	b2c0      	uxtb	r0, r0
 800adc2:	47b0      	blx	r6
                              tmpdata = 0;
 800adc4:	2400      	movs	r4, #0
 800adc6:	e001      	b.n	800adcc <AUDIO_REQ+0xee>
                              tmpdata = (uint16_t*) &(feature_control->MinVolume);
 800adc8:	f102 0412 	add.w	r4, r2, #18
                                USBD_CtlSendData (pdev, (uint8_t*) tmpdata,2);
 800adcc:	2202      	movs	r2, #2
 800adce:	4621      	mov	r1, r4
 800add0:	4628      	mov	r0, r5
 800add2:	f000 fed5 	bl	800bb80 <USBD_CtlSendData>
  return USBD_OK;
 800add6:	2000      	movs	r0, #0
                         break;
 800add8:	e00d      	b.n	800adf6 <AUDIO_REQ+0x118>
                             tmpdata = (uint16_t*) &(feature_control->MaxVolume);
 800adda:	f102 0410 	add.w	r4, r2, #16
                              break;
 800adde:	e7f5      	b.n	800adcc <AUDIO_REQ+0xee>
                              tmpdata = (uint16_t*) &(feature_control->ResVolume);
 800ade0:	f102 0414 	add.w	r4, r2, #20
                              break;
 800ade4:	e7f2      	b.n	800adcc <AUDIO_REQ+0xee>
                                USBD_error_handler();
 800ade6:	f002 fced 	bl	800d7c4 <Error_Handler>
 800adea:	e7ef      	b.n	800adcc <AUDIO_REQ+0xee>
                              tmpdata = 0;
 800adec:	2400      	movs	r4, #0
 800adee:	e7ed      	b.n	800adcc <AUDIO_REQ+0xee>
            USBD_error_handler();
 800adf0:	f002 fce8 	bl	800d7c4 <Error_Handler>
  return USBD_OK;
 800adf4:	2000      	movs	r0, #0
}
 800adf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800adf8 <USBD_AUDIO_SetInterfaceAlternate>:
{
 800adf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfc:	b083      	sub	sp, #12
 800adfe:	4606      	mov	r6, r0
 800ae00:	460c      	mov	r4, r1
 800ae02:	4690      	mov	r8, r2
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 800ae04:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  ep = (pas_interface->data_ep.ep_num&0x80)?&haudio->ep_in[pas_interface->data_ep.ep_num&0x0F]:
 800ae08:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800ae0c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800ae10:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
 800ae14:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	db39      	blt.n	800ae90 <USBD_AUDIO_SetInterfaceAlternate+0x98>
 800ae1c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800ae20:	00bf      	lsls	r7, r7, #2
 800ae22:	37f0      	adds	r7, #240	; 0xf0
 800ae24:	442f      	add	r7, r5
  if(new_alt==0)
 800ae26:	f1b8 0f00 	cmp.w	r8, #0
 800ae2a:	d155      	bne.n	800aed8 <USBD_AUDIO_SetInterfaceAlternate+0xe0>
    if (pas_interface->alternate!=0)
 800ae2c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800ae30:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800ae34:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800ae38:	b1bb      	cbz	r3, 800ae6a <USBD_AUDIO_SetInterfaceAlternate+0x72>
      if(ep->open)
 800ae3a:	797b      	ldrb	r3, [r7, #5]
 800ae3c:	bb8b      	cbnz	r3, 800aea2 <USBD_AUDIO_SetInterfaceAlternate+0xaa>
      if(pas_interface->synch_enabled)
 800ae3e:	1c63      	adds	r3, r4, #1
 800ae40:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800ae44:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800ae48:	791b      	ldrb	r3, [r3, #4]
 800ae4a:	b173      	cbz	r3, 800ae6a <USBD_AUDIO_SetInterfaceAlternate+0x72>
          ep=&haudio->ep_in[pas_interface->synch_ep.ep_num&0x0F];
 800ae4c:	1c63      	adds	r3, r4, #1
 800ae4e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800ae52:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800ae56:	7a1f      	ldrb	r7, [r3, #8]
 800ae58:	f007 070f 	and.w	r7, r7, #15
          if(ep->open)
 800ae5c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800ae60:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ae64:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ae68:	bb1b      	cbnz	r3, 800aeb2 <USBD_AUDIO_SetInterfaceAlternate+0xba>
    pas_interface->SetAS_Alternate(new_alt,pas_interface->private_data);
 800ae6a:	00e6      	lsls	r6, r4, #3
 800ae6c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800ae70:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800ae74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ae76:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800ae78:	4640      	mov	r0, r8
 800ae7a:	4790      	blx	r2
    pas_interface->alternate=0;
 800ae7c:	4434      	add	r4, r6
 800ae7e:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ae82:	2300      	movs	r3, #0
 800ae84:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
}
 800ae88:	2000      	movs	r0, #0
 800ae8a:	b003      	add	sp, #12
 800ae8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  ep = (pas_interface->data_ep.ep_num&0x80)?&haudio->ep_in[pas_interface->data_ep.ep_num&0x0F]:
 800ae90:	f007 070f 	and.w	r7, r7, #15
 800ae94:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800ae98:	00bf      	lsls	r7, r7, #2
 800ae9a:	37b0      	adds	r7, #176	; 0xb0
 800ae9c:	442f      	add	r7, r5
 800ae9e:	3704      	adds	r7, #4
 800aea0:	e7c1      	b.n	800ae26 <USBD_AUDIO_SetInterfaceAlternate+0x2e>
        USBD_LL_CloseEP(pdev, ep->ep_description.data_ep->ep_num);
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	7819      	ldrb	r1, [r3, #0]
 800aea6:	4630      	mov	r0, r6
 800aea8:	f003 f984 	bl	800e1b4 <USBD_LL_CloseEP>
        ep->open=0;
 800aeac:	2300      	movs	r3, #0
 800aeae:	717b      	strb	r3, [r7, #5]
 800aeb0:	e7c5      	b.n	800ae3e <USBD_AUDIO_SetInterfaceAlternate+0x46>
            USBD_LL_CloseEP(pdev, ep->ep_description.sync_ep->ep_num);
 800aeb2:	ea4f 0947 	mov.w	r9, r7, lsl #1
 800aeb6:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800aeba:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800aebe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800aec2:	7819      	ldrb	r1, [r3, #0]
 800aec4:	4630      	mov	r0, r6
 800aec6:	f003 f975 	bl	800e1b4 <USBD_LL_CloseEP>
            ep->open = 0;
 800aeca:	444f      	add	r7, r9
 800aecc:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800aed0:	2300      	movs	r3, #0
 800aed2:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
 800aed6:	e7c8      	b.n	800ae6a <USBD_AUDIO_SetInterfaceAlternate+0x72>
    ep->ep_description.data_ep=&pas_interface->data_ep;
 800aed8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800aedc:	00db      	lsls	r3, r3, #3
 800aede:	3320      	adds	r3, #32
 800aee0:	442b      	add	r3, r5
 800aee2:	3308      	adds	r3, #8
 800aee4:	603b      	str	r3, [r7, #0]
    pas_interface->SetAS_Alternate(new_alt,pas_interface->private_data);
 800aee6:	eb04 09c4 	add.w	r9, r4, r4, lsl #3
 800aeea:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 800aeee:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
 800aef2:	f8d9 1068 	ldr.w	r1, [r9, #104]	; 0x68
 800aef6:	4640      	mov	r0, r8
 800aef8:	4798      	blx	r3
    pas_interface->alternate=new_alt;
 800aefa:	f889 8026 	strb.w	r8, [r9, #38]	; 0x26
    ep->max_packet_length=ep->ep_description.data_ep->GetMaxPacketLength(ep->ep_description.data_ep->private_data);
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	699a      	ldr	r2, [r3, #24]
 800af02:	6a18      	ldr	r0, [r3, #32]
 800af04:	4790      	blx	r2
 800af06:	4603      	mov	r3, r0
 800af08:	80f8      	strh	r0, [r7, #6]
                 ep->ep_description.data_ep->ep_num,
 800af0a:	6839      	ldr	r1, [r7, #0]
    USBD_LL_OpenEP(pdev,
 800af0c:	2201      	movs	r2, #1
 800af0e:	7809      	ldrb	r1, [r1, #0]
 800af10:	4630      	mov	r0, r6
 800af12:	f003 f944 	bl	800e19e <USBD_LL_OpenEP>
     ep->open = 1;
 800af16:	2301      	movs	r3, #1
 800af18:	717b      	strb	r3, [r7, #5]
    ep->ep_description.data_ep->buf= ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,
 800af1a:	f8d7 8000 	ldr.w	r8, [r7]
 800af1e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800af22:	f108 010c 	add.w	r1, r8, #12
 800af26:	f8d8 0020 	ldr.w	r0, [r8, #32]
 800af2a:	4798      	blx	r3
 800af2c:	f8c8 0008 	str.w	r0, [r8, #8]
    if(ep->ep_description.data_ep->ep_num&0x80)  /* IN EP */
 800af30:	683a      	ldr	r2, [r7, #0]
 800af32:	7811      	ldrb	r1, [r2, #0]
 800af34:	f992 3000 	ldrsb.w	r3, [r2]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	db5a      	blt.n	800aff2 <USBD_AUDIO_SetInterfaceAlternate+0x1fa>
    USBD_LL_PrepareReceive(pdev,
 800af3c:	88fb      	ldrh	r3, [r7, #6]
 800af3e:	6892      	ldr	r2, [r2, #8]
 800af40:	4630      	mov	r0, r6
 800af42:	f003 f98b 	bl	800e25c <USBD_LL_PrepareReceive>
    if(pas_interface->synch_enabled)
 800af46:	1c63      	adds	r3, r4, #1
 800af48:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800af4c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800af50:	791b      	ldrb	r3, [r3, #4]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d098      	beq.n	800ae88 <USBD_AUDIO_SetInterfaceAlternate+0x90>
           ep = &haudio->ep_in[pas_interface->synch_ep.ep_num&0x0F];
 800af56:	1c67      	adds	r7, r4, #1
 800af58:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 800af5c:	eb07 03c7 	add.w	r3, r7, r7, lsl #3
 800af60:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800af64:	7a19      	ldrb	r1, [r3, #8]
 800af66:	f001 0a0f 	and.w	sl, r1, #15
           sync_ep = &pas_interface->synch_ep;
 800af6a:	eb07 03c7 	add.w	r3, r7, r7, lsl #3
 800af6e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800af72:	3308      	adds	r3, #8
           ep->ep_description.sync_ep = sync_ep;
 800af74:	ea4f 024a 	mov.w	r2, sl, lsl #1
 800af78:	9201      	str	r2, [sp, #4]
 800af7a:	eb0a 084a 	add.w	r8, sl, sl, lsl #1
 800af7e:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800af82:	f8c8 30b4 	str.w	r3, [r8, #180]	; 0xb4
           ep->max_packet_length = AUDIO_FEEDBACK_EP_PACKET_SIZE;
 800af86:	2303      	movs	r3, #3
 800af88:	f8a8 30ba 	strh.w	r3, [r8, #186]	; 0xba
           ep->ep_type = USBD_AUDIO_FEEDBACK_EP;
 800af8c:	f04f 0b01 	mov.w	fp, #1
 800af90:	f888 b0b8 	strb.w	fp, [r8, #184]	; 0xb8
           USBD_LL_OpenEP(pdev, sync_ep->ep_num,
 800af94:	465a      	mov	r2, fp
 800af96:	4630      	mov	r0, r6
 800af98:	f003 f901 	bl	800e19e <USBD_LL_OpenEP>
            ep->open = 1;
 800af9c:	f888 b0b9 	strb.w	fp, [r8, #185]	; 0xb9
            rate = sync_ep->GetFeedback(sync_ep->private_data);
 800afa0:	eb09 0307 	add.w	r3, r9, r7
 800afa4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800afae:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 800afb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afb4:	4798      	blx	r3
            get_usb_full_speed_rate(rate,sync_ep->feedback_data);
 800afb6:	eb09 0b07 	add.w	fp, r9, r7
 800afba:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
 800afbe:	f10b 0b09 	add.w	fp, fp, #9
 800afc2:	4659      	mov	r1, fp
 800afc4:	f7ff fd06 	bl	800a9d4 <get_usb_full_speed_rate>
            ep->tx_rx_soffn = USB_SOF_NUMBER();
 800afc8:	4b12      	ldr	r3, [pc, #72]	; (800b014 <USBD_AUDIO_SetInterfaceAlternate+0x21c>)
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800afd0:	f8a8 30bc 	strh.w	r3, [r8, #188]	; 0xbc
                             sync_ep->feedback_data, ep->max_packet_length);
 800afd4:	9a01      	ldr	r2, [sp, #4]
 800afd6:	4492      	add	sl, r2
 800afd8:	eb05 0a8a 	add.w	sl, r5, sl, lsl #2
            USBD_LL_Transmit(pdev, sync_ep->ep_num,
 800afdc:	444f      	add	r7, r9
 800afde:	eb05 05c7 	add.w	r5, r5, r7, lsl #3
 800afe2:	f8ba 30ba 	ldrh.w	r3, [sl, #186]	; 0xba
 800afe6:	465a      	mov	r2, fp
 800afe8:	7a29      	ldrb	r1, [r5, #8]
 800afea:	4630      	mov	r0, r6
 800afec:	f003 f92f 	bl	800e24e <USBD_LL_Transmit>
 800aff0:	e74a      	b.n	800ae88 <USBD_AUDIO_SetInterfaceAlternate+0x90>
      USBD_LL_FlushEP(pdev, ep->ep_description.data_ep->ep_num);
 800aff2:	4630      	mov	r0, r6
 800aff4:	f003 f8f8 	bl	800e1e8 <USBD_LL_FlushEP>
      ep->tx_rx_soffn = USB_SOF_NUMBER();
 800aff8:	4b06      	ldr	r3, [pc, #24]	; (800b014 <USBD_AUDIO_SetInterfaceAlternate+0x21c>)
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800b000:	813b      	strh	r3, [r7, #8]
                        ep->ep_description.data_ep->ep_num,
 800b002:	6839      	ldr	r1, [r7, #0]
      USBD_LL_Transmit(pdev, 
 800b004:	898b      	ldrh	r3, [r1, #12]
 800b006:	688a      	ldr	r2, [r1, #8]
 800b008:	7809      	ldrb	r1, [r1, #0]
 800b00a:	4630      	mov	r0, r6
 800b00c:	f003 f91f 	bl	800e24e <USBD_LL_Transmit>
 800b010:	e73a      	b.n	800ae88 <USBD_AUDIO_SetInterfaceAlternate+0x90>
 800b012:	bf00      	nop
 800b014:	40040800 	.word	0x40040800

0800b018 <USBD_AUDIO_Setup>:
{
 800b018:	b570      	push	{r4, r5, r6, lr}
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 800b01a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b01e:	780b      	ldrb	r3, [r1, #0]
 800b020:	f013 0460 	ands.w	r4, r3, #96	; 0x60
 800b024:	d01a      	beq.n	800b05c <USBD_AUDIO_Setup+0x44>
 800b026:	2c20      	cmp	r4, #32
 800b028:	d174      	bne.n	800b114 <USBD_AUDIO_Setup+0xfc>
    if((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_INTERFACE)
 800b02a:	f003 0303 	and.w	r3, r3, #3
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d110      	bne.n	800b054 <USBD_AUDIO_Setup+0x3c>
      switch (req->bRequest)
 800b032:	784b      	ldrb	r3, [r1, #1]
 800b034:	2b01      	cmp	r3, #1
 800b036:	d005      	beq.n	800b044 <USBD_AUDIO_Setup+0x2c>
 800b038:	b25a      	sxtb	r2, r3
 800b03a:	b13a      	cbz	r2, 800b04c <USBD_AUDIO_Setup+0x34>
 800b03c:	337f      	adds	r3, #127	; 0x7f
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	2b03      	cmp	r3, #3
 800b042:	d803      	bhi.n	800b04c <USBD_AUDIO_Setup+0x34>
           AUDIO_REQ(pdev, req);
 800b044:	f7ff fe4b 	bl	800acde <AUDIO_REQ>
  uint8_t ret = USBD_OK;
 800b048:	2400      	movs	r4, #0
        break;
 800b04a:	e064      	b.n	800b116 <USBD_AUDIO_Setup+0xfe>
        USBD_CtlError (pdev, req);
 800b04c:	f000 fa61 	bl	800b512 <USBD_CtlError>
        ret = USBD_FAIL; 
 800b050:	2403      	movs	r4, #3
 800b052:	e060      	b.n	800b116 <USBD_AUDIO_Setup+0xfe>
     USBD_CtlError (pdev, req);
 800b054:	f000 fa5d 	bl	800b512 <USBD_CtlError>
        ret = USBD_FAIL;
 800b058:	2403      	movs	r4, #3
 800b05a:	e05c      	b.n	800b116 <USBD_AUDIO_Setup+0xfe>
    switch (req->bRequest)
 800b05c:	784b      	ldrb	r3, [r1, #1]
 800b05e:	2b0a      	cmp	r3, #10
 800b060:	d020      	beq.n	800b0a4 <USBD_AUDIO_Setup+0x8c>
 800b062:	2b0b      	cmp	r3, #11
 800b064:	d03f      	beq.n	800b0e6 <USBD_AUDIO_Setup+0xce>
 800b066:	2b06      	cmp	r3, #6
 800b068:	d003      	beq.n	800b072 <USBD_AUDIO_Setup+0x5a>
      USBD_CtlError (pdev, req);
 800b06a:	f000 fa52 	bl	800b512 <USBD_CtlError>
      ret = USBD_FAIL;     
 800b06e:	2403      	movs	r4, #3
 800b070:	e051      	b.n	800b116 <USBD_AUDIO_Setup+0xfe>
      if( (req->wValue >> 8) == USBD_AUDIO_DESC_TYPE_CS_DEVICE)
 800b072:	884b      	ldrh	r3, [r1, #2]
 800b074:	0a1b      	lsrs	r3, r3, #8
 800b076:	2b21      	cmp	r3, #33	; 0x21
 800b078:	d14d      	bne.n	800b116 <USBD_AUDIO_Setup+0xfe>
        pbuf = USBD_AUDIO_CfgDesc + 18;
 800b07a:	4b28      	ldr	r3, [pc, #160]	; (800b11c <USBD_AUDIO_Setup+0x104>)
 800b07c:	685b      	ldr	r3, [r3, #4]
        len = MIN(USBD_AUDIO_DESC_SIZ , req->wLength);
 800b07e:	88ca      	ldrh	r2, [r1, #6]
        USBD_CtlSendData (pdev, 
 800b080:	2a09      	cmp	r2, #9
 800b082:	bf28      	it	cs
 800b084:	2209      	movcs	r2, #9
 800b086:	f103 0112 	add.w	r1, r3, #18
 800b08a:	f000 fd79 	bl	800bb80 <USBD_CtlSendData>
 800b08e:	e042      	b.n	800b116 <USBD_AUDIO_Setup+0xfe>
              USBD_CtlSendData (pdev,
 800b090:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800b094:	00c9      	lsls	r1, r1, #3
 800b096:	3120      	adds	r1, #32
 800b098:	4429      	add	r1, r5
 800b09a:	2201      	movs	r2, #1
 800b09c:	3106      	adds	r1, #6
 800b09e:	f000 fd6f 	bl	800bb80 <USBD_CtlSendData>
              return USBD_OK;
 800b0a2:	e038      	b.n	800b116 <USBD_AUDIO_Setup+0xfe>
 800b0a4:	2300      	movs	r3, #0
        for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 800b0a6:	786a      	ldrb	r2, [r5, #1]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	dd0a      	ble.n	800b0c2 <USBD_AUDIO_Setup+0xaa>
            if((uint8_t)(req->wIndex)==haudio->aud_function.as_interfaces[i].interface_num)
 800b0ac:	790e      	ldrb	r6, [r1, #4]
 800b0ae:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800b0b2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800b0b6:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800b0ba:	4296      	cmp	r6, r2
 800b0bc:	d0e8      	beq.n	800b090 <USBD_AUDIO_Setup+0x78>
        for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 800b0be:	3301      	adds	r3, #1
 800b0c0:	e7f1      	b.n	800b0a6 <USBD_AUDIO_Setup+0x8e>
        USBD_CtlError (pdev, req);
 800b0c2:	f000 fa26 	bl	800b512 <USBD_CtlError>
        ret = USBD_FAIL; 
 800b0c6:	2403      	movs	r4, #3
      break;
 800b0c8:	e025      	b.n	800b116 <USBD_AUDIO_Setup+0xfe>
              if((uint8_t)(req->wValue)==haudio->aud_function.as_interfaces[i].alternate)
 800b0ca:	788a      	ldrb	r2, [r1, #2]
 800b0cc:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800b0d0:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800b0d4:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 800b0d8:	428a      	cmp	r2, r1
 800b0da:	d01c      	beq.n	800b116 <USBD_AUDIO_Setup+0xfe>
                return USBD_AUDIO_SetInterfaceAlternate(pdev,i,(uint8_t)(req->wValue));
 800b0dc:	b2d9      	uxtb	r1, r3
 800b0de:	f7ff fe8b 	bl	800adf8 <USBD_AUDIO_SetInterfaceAlternate>
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	e017      	b.n	800b116 <USBD_AUDIO_Setup+0xfe>
 800b0e6:	2300      	movs	r3, #0
        for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 800b0e8:	786a      	ldrb	r2, [r5, #1]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	dd0a      	ble.n	800b104 <USBD_AUDIO_Setup+0xec>
            if((uint8_t)(req->wIndex)==haudio->aud_function.as_interfaces[i].interface_num)
 800b0ee:	790e      	ldrb	r6, [r1, #4]
 800b0f0:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800b0f4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800b0f8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800b0fc:	4296      	cmp	r6, r2
 800b0fe:	d0e4      	beq.n	800b0ca <USBD_AUDIO_Setup+0xb2>
        for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 800b100:	3301      	adds	r3, #1
 800b102:	e7f1      	b.n	800b0e8 <USBD_AUDIO_Setup+0xd0>
        if(((uint8_t)(req->wIndex) ==0)&&((uint8_t)(req->wValue))==0)
 800b104:	790b      	ldrb	r3, [r1, #4]
 800b106:	b90b      	cbnz	r3, 800b10c <USBD_AUDIO_Setup+0xf4>
 800b108:	788c      	ldrb	r4, [r1, #2]
 800b10a:	b124      	cbz	r4, 800b116 <USBD_AUDIO_Setup+0xfe>
          USBD_CtlError (pdev, req);
 800b10c:	f000 fa01 	bl	800b512 <USBD_CtlError>
          ret = USBD_FAIL; 
 800b110:	2403      	movs	r4, #3
      break;      
 800b112:	e000      	b.n	800b116 <USBD_AUDIO_Setup+0xfe>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b114:	2400      	movs	r4, #0
}
 800b116:	4620      	mov	r0, r4
 800b118:	bd70      	pop	{r4, r5, r6, pc}
 800b11a:	bf00      	nop
 800b11c:	20000ad8 	.word	0x20000ad8

0800b120 <USBD_AUDIO_DeInit>:
{
 800b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b122:	4606      	mov	r6, r0
    haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 800b124:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
    aud_if_cbks =  (USBD_AUDIO_InterfaceCallbacksfTypeDef *)pdev->pUserData;
 800b128:	f8d0 72c0 	ldr.w	r7, [r0, #704]	; 0x2c0
    for(int i=1;i < USBD_AUDIO_MAX_IN_EP; i++)
 800b12c:	2401      	movs	r4, #1
 800b12e:	e00d      	b.n	800b14c <USBD_AUDIO_DeInit+0x2c>
        USBD_LL_CloseEP(pdev, i|0x80);
 800b130:	f064 017f 	orn	r1, r4, #127	; 0x7f
 800b134:	b2c9      	uxtb	r1, r1
 800b136:	4630      	mov	r0, r6
 800b138:	f003 f83c 	bl	800e1b4 <USBD_LL_CloseEP>
        haudio->ep_in[i].open = 0;
 800b13c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b140:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b144:	2200      	movs	r2, #0
 800b146:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    for(int i=1;i < USBD_AUDIO_MAX_IN_EP; i++)
 800b14a:	3401      	adds	r4, #1
 800b14c:	2c04      	cmp	r4, #4
 800b14e:	dc08      	bgt.n	800b162 <USBD_AUDIO_DeInit+0x42>
      if(haudio->ep_in[i].open)
 800b150:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b154:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b158:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d0f4      	beq.n	800b14a <USBD_AUDIO_DeInit+0x2a>
 800b160:	e7e6      	b.n	800b130 <USBD_AUDIO_DeInit+0x10>
    for(int i=1;i < USBD_AUDIO_MAX_OUT_EP; i++)
 800b162:	2401      	movs	r4, #1
 800b164:	e00b      	b.n	800b17e <USBD_AUDIO_DeInit+0x5e>
        USBD_LL_CloseEP(pdev, i);
 800b166:	b2e1      	uxtb	r1, r4
 800b168:	4630      	mov	r0, r6
 800b16a:	f003 f823 	bl	800e1b4 <USBD_LL_CloseEP>
        haudio->ep_out[i].open = 0;
 800b16e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b172:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b176:	2200      	movs	r2, #0
 800b178:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
    for(int i=1;i < USBD_AUDIO_MAX_OUT_EP; i++)
 800b17c:	3401      	adds	r4, #1
 800b17e:	2c04      	cmp	r4, #4
 800b180:	dc08      	bgt.n	800b194 <USBD_AUDIO_DeInit+0x74>
      if(haudio->ep_out[i].open)
 800b182:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b186:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b18a:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d0f4      	beq.n	800b17c <USBD_AUDIO_DeInit+0x5c>
 800b192:	e7e8      	b.n	800b166 <USBD_AUDIO_DeInit+0x46>
  if(haudio != NULL)
 800b194:	b14d      	cbz	r5, 800b1aa <USBD_AUDIO_DeInit+0x8a>
   aud_if_cbks->DeInit(&haudio->aud_function,aud_if_cbks->private_data);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6939      	ldr	r1, [r7, #16]
 800b19a:	4628      	mov	r0, r5
 800b19c:	4798      	blx	r3
    USBD_free(haudio);
 800b19e:	4628      	mov	r0, r5
 800b1a0:	f003 fb22 	bl	800e7e8 <free>
    pdev->pClassData = NULL;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	f8c6 32bc 	str.w	r3, [r6, #700]	; 0x2bc
}
 800b1aa:	2000      	movs	r0, #0
 800b1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b1ae <USBD_AUDIO_Init>:
{
 800b1ae:	b538      	push	{r3, r4, r5, lr}
 800b1b0:	4604      	mov	r4, r0
  haudio = USBD_malloc(sizeof (USBD_AUDIO_HandleTypeDef));
 800b1b2:	f44f 70be 	mov.w	r0, #380	; 0x17c
 800b1b6:	f003 fb0f 	bl	800e7d8 <malloc>
  if(haudio == NULL)
 800b1ba:	b1c8      	cbz	r0, 800b1f0 <USBD_AUDIO_Init+0x42>
 800b1bc:	4605      	mov	r5, r0
    memset(haudio, 0, sizeof(USBD_AUDIO_HandleTypeDef));
 800b1be:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	f003 fb26 	bl	800e814 <memset>
    aud_if_cbks = (USBD_AUDIO_InterfaceCallbacksfTypeDef *)pdev->pUserData;
 800b1c8:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
    if (aud_if_cbks->Init(&haudio->aud_function,aud_if_cbks->private_data)!= USBD_OK)
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	6919      	ldr	r1, [r3, #16]
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	4790      	blx	r2
 800b1d4:	b918      	cbnz	r0, 800b1de <USBD_AUDIO_Init+0x30>
  pdev->pClassData = haudio;
 800b1d6:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
  return USBD_OK;
 800b1da:	2000      	movs	r0, #0
}
 800b1dc:	bd38      	pop	{r3, r4, r5, pc}
      USBD_free(pdev->pClassData);
 800b1de:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800b1e2:	f003 fb01 	bl	800e7e8 <free>
      pdev->pClassData = 0;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
      return USBD_FAIL;
 800b1ec:	2003      	movs	r0, #3
 800b1ee:	e7f5      	b.n	800b1dc <USBD_AUDIO_Init+0x2e>
    return USBD_FAIL; 
 800b1f0:	2003      	movs	r0, #3
 800b1f2:	e7f3      	b.n	800b1dc <USBD_AUDIO_Init+0x2e>

0800b1f4 <USBD_AUDIO_RegisterInterface>:
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                        USBD_AUDIO_InterfaceCallbacksfTypeDef *aifc)
{
  if(aifc != NULL)
 800b1f4:	b151      	cbz	r1, 800b20c <USBD_AUDIO_RegisterInterface+0x18>
{
 800b1f6:	b510      	push	{r4, lr}
 800b1f8:	460b      	mov	r3, r1
  {
    pdev->pUserData= aifc;
 800b1fa:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0
    aifc->GetConfigDesc(&USBD_AUDIO_CfgDesc, &USBD_AUDIO_CfgDescSize, aifc->private_data);
 800b1fe:	688c      	ldr	r4, [r1, #8]
 800b200:	4903      	ldr	r1, [pc, #12]	; (800b210 <USBD_AUDIO_RegisterInterface+0x1c>)
 800b202:	691a      	ldr	r2, [r3, #16]
 800b204:	1d08      	adds	r0, r1, #4
 800b206:	47a0      	blx	r4
    
  }
  return 0;
}
 800b208:	2000      	movs	r0, #0
 800b20a:	bd10      	pop	{r4, pc}
 800b20c:	2000      	movs	r0, #0
 800b20e:	4770      	bx	lr
 800b210:	20000ad8 	.word	0x20000ad8

0800b214 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800b214:	b198      	cbz	r0, 800b23e <USBD_Init+0x2a>
{
 800b216:	b508      	push	{r3, lr}
 800b218:	4603      	mov	r3, r0
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800b21a:	f8d0 02b8 	ldr.w	r0, [r0, #696]	; 0x2b8
 800b21e:	b110      	cbz	r0, 800b226 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 800b220:	2000      	movs	r0, #0
 800b222:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800b226:	b109      	cbz	r1, 800b22c <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 800b228:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800b22c:	2101      	movs	r1, #1
 800b22e:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 800b232:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b234:	4618      	mov	r0, r3
 800b236:	f002 ff89 	bl	800e14c <USBD_LL_Init>
  
  return USBD_OK; 
 800b23a:	2000      	movs	r0, #0
}
 800b23c:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800b23e:	2003      	movs	r0, #3
}
 800b240:	4770      	bx	lr

0800b242 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800b242:	b119      	cbz	r1, 800b24c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b244:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
    status = USBD_OK;
 800b248:	2000      	movs	r0, #0
 800b24a:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800b24c:	2003      	movs	r0, #3
  }
  
  return status;
}
 800b24e:	4770      	bx	lr

0800b250 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800b250:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800b252:	f002 ff9d 	bl	800e190 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800b256:	2000      	movs	r0, #0
 800b258:	bd08      	pop	{r3, pc}

0800b25a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b25a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800b25c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b260:	b12b      	cbz	r3, 800b26e <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4798      	blx	r3
 800b266:	b900      	cbnz	r0, 800b26a <USBD_SetClassConfig+0x10>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800b268:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800b26a:	2003      	movs	r0, #3
 800b26c:	e7fc      	b.n	800b268 <USBD_SetClassConfig+0xe>
 800b26e:	2003      	movs	r0, #3
 800b270:	e7fa      	b.n	800b268 <USBD_SetClassConfig+0xe>

0800b272 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b272:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800b274:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	4798      	blx	r3
  return USBD_OK;
}
 800b27c:	2000      	movs	r0, #0
 800b27e:	bd08      	pop	{r3, pc}

0800b280 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b280:	b538      	push	{r3, r4, r5, lr}
 800b282:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b284:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800b288:	4628      	mov	r0, r5
 800b28a:	f000 f92e 	bl	800b4ea <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800b28e:	2301      	movs	r3, #1
 800b290:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800b294:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800b298:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  
  switch (pdev->request.bmRequest & 0x1F) 
 800b29c:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800b2a0:	f001 031f 	and.w	r3, r1, #31
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d00e      	beq.n	800b2c6 <USBD_LL_SetupStage+0x46>
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	d011      	beq.n	800b2d0 <USBD_LL_SetupStage+0x50>
 800b2ac:	b12b      	cbz	r3, 800b2ba <USBD_LL_SetupStage+0x3a>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800b2ae:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f002 ff9f 	bl	800e1f6 <USBD_LL_StallEP>
    break;
 800b2b8:	e003      	b.n	800b2c2 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800b2ba:	4629      	mov	r1, r5
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f000 facf 	bl	800b860 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800b2c6:	4629      	mov	r1, r5
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	f000 fb01 	bl	800b8d0 <USBD_StdItfReq>
    break;
 800b2ce:	e7f8      	b.n	800b2c2 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f000 fb30 	bl	800b938 <USBD_StdEPReq>
    break;
 800b2d8:	e7f3      	b.n	800b2c2 <USBD_LL_SetupStage+0x42>

0800b2da <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800b2da:	b510      	push	{r4, lr}
 800b2dc:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800b2de:	bb21      	cbnz	r1, 800b32a <USBD_LL_DataOutStage+0x50>
 800b2e0:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b2e2:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800b2e6:	2a03      	cmp	r2, #3
 800b2e8:	d001      	beq.n	800b2ee <USBD_LL_DataOutStage+0x14>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 800b2ee:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 800b2f2:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800b2f6:	4291      	cmp	r1, r2
 800b2f8:	d80b      	bhi.n	800b312 <USBD_LL_DataOutStage+0x38>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800b2fa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b2fe:	691b      	ldr	r3, [r3, #16]
 800b300:	b11b      	cbz	r3, 800b30a <USBD_LL_DataOutStage+0x30>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b302:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800b306:	2a03      	cmp	r2, #3
 800b308:	d00d      	beq.n	800b326 <USBD_LL_DataOutStage+0x4c>
        USBD_CtlSendStatus(pdev);
 800b30a:	4620      	mov	r0, r4
 800b30c:	f000 fc64 	bl	800bbd8 <USBD_CtlSendStatus>
 800b310:	e7eb      	b.n	800b2ea <USBD_LL_DataOutStage+0x10>
        pep->rem_length -=  pep->maxpacket;
 800b312:	1a89      	subs	r1, r1, r2
 800b314:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        USBD_CtlContinueRx (pdev, 
 800b318:	428a      	cmp	r2, r1
 800b31a:	bf28      	it	cs
 800b31c:	460a      	movcs	r2, r1
 800b31e:	4619      	mov	r1, r3
 800b320:	f000 fc52 	bl	800bbc8 <USBD_CtlContinueRx>
 800b324:	e7e1      	b.n	800b2ea <USBD_LL_DataOutStage+0x10>
          pdev->pClass->EP0_RxReady(pdev); 
 800b326:	4798      	blx	r3
 800b328:	e7ef      	b.n	800b30a <USBD_LL_DataOutStage+0x30>
 800b32a:	460a      	mov	r2, r1
  else if((pdev->pClass->DataOut != NULL)&&
 800b32c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b330:	699b      	ldr	r3, [r3, #24]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d0d9      	beq.n	800b2ea <USBD_LL_DataOutStage+0x10>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b336:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if((pdev->pClass->DataOut != NULL)&&
 800b33a:	2903      	cmp	r1, #3
 800b33c:	d1d5      	bne.n	800b2ea <USBD_LL_DataOutStage+0x10>
    pdev->pClass->DataOut(pdev, epnum); 
 800b33e:	4611      	mov	r1, r2
 800b340:	4798      	blx	r3
 800b342:	e7d2      	b.n	800b2ea <USBD_LL_DataOutStage+0x10>

0800b344 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800b344:	b510      	push	{r4, lr}
 800b346:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800b348:	2900      	cmp	r1, #0
 800b34a:	d146      	bne.n	800b3da <USBD_LL_DataInStage+0x96>
 800b34c:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800b34e:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800b352:	2a02      	cmp	r2, #2
 800b354:	d005      	beq.n	800b362 <USBD_LL_DataInStage+0x1e>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800b356:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d039      	beq.n	800b3d2 <USBD_LL_DataInStage+0x8e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800b35e:	2000      	movs	r0, #0
 800b360:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 800b362:	69c1      	ldr	r1, [r0, #28]
 800b364:	6a02      	ldr	r2, [r0, #32]
 800b366:	4291      	cmp	r1, r2
 800b368:	d817      	bhi.n	800b39a <USBD_LL_DataInStage+0x56>
        if((pep->total_length % pep->maxpacket == 0) &&
 800b36a:	6981      	ldr	r1, [r0, #24]
 800b36c:	fbb1 f3f2 	udiv	r3, r1, r2
 800b370:	fb02 1313 	mls	r3, r2, r3, r1
 800b374:	b92b      	cbnz	r3, 800b382 <USBD_LL_DataInStage+0x3e>
 800b376:	428a      	cmp	r2, r1
 800b378:	d803      	bhi.n	800b382 <USBD_LL_DataInStage+0x3e>
             (pep->total_length < pdev->ep0_data_len ))
 800b37a:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
           (pep->total_length >= pep->maxpacket) &&
 800b37e:	4299      	cmp	r1, r3
 800b380:	d317      	bcc.n	800b3b2 <USBD_LL_DataInStage+0x6e>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800b382:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	b11b      	cbz	r3, 800b392 <USBD_LL_DataInStage+0x4e>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b38a:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800b38e:	2a03      	cmp	r2, #3
 800b390:	d01c      	beq.n	800b3cc <USBD_LL_DataInStage+0x88>
          USBD_CtlReceiveStatus(pdev);
 800b392:	4620      	mov	r0, r4
 800b394:	f000 fc2b 	bl	800bbee <USBD_CtlReceiveStatus>
 800b398:	e7dd      	b.n	800b356 <USBD_LL_DataInStage+0x12>
        pep->rem_length -=  pep->maxpacket;
 800b39a:	1a8a      	subs	r2, r1, r2
 800b39c:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 800b39e:	4619      	mov	r1, r3
 800b3a0:	f000 fbfb 	bl	800bb9a <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f002 ff56 	bl	800e25c <USBD_LL_PrepareReceive>
 800b3b0:	e7d1      	b.n	800b356 <USBD_LL_DataInStage+0x12>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	4611      	mov	r1, r2
 800b3b6:	f000 fbf0 	bl	800bb9a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
        USBD_LL_PrepareReceive (pdev,
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	460a      	mov	r2, r1
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	f002 ff49 	bl	800e25c <USBD_LL_PrepareReceive>
 800b3ca:	e7c4      	b.n	800b356 <USBD_LL_DataInStage+0x12>
            pdev->pClass->EP0_TxSent(pdev); 
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	4798      	blx	r3
 800b3d0:	e7df      	b.n	800b392 <USBD_LL_DataInStage+0x4e>
      pdev->dev_test_mode = 0;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
 800b3d8:	e7c1      	b.n	800b35e <USBD_LL_DataInStage+0x1a>
 800b3da:	460a      	mov	r2, r1
  else if((pdev->pClass->DataIn != NULL)&& 
 800b3dc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d0bb      	beq.n	800b35e <USBD_LL_DataInStage+0x1a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b3e6:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if((pdev->pClass->DataIn != NULL)&& 
 800b3ea:	2903      	cmp	r1, #3
 800b3ec:	d1b7      	bne.n	800b35e <USBD_LL_DataInStage+0x1a>
    pdev->pClass->DataIn(pdev, epnum); 
 800b3ee:	4611      	mov	r1, r2
 800b3f0:	4798      	blx	r3
 800b3f2:	e7b4      	b.n	800b35e <USBD_LL_DataInStage+0x1a>

0800b3f4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800b3f4:	b538      	push	{r3, r4, r5, lr}
 800b3f6:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800b3f8:	2340      	movs	r3, #64	; 0x40
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	4611      	mov	r1, r2
 800b3fe:	f002 fece 	bl	800e19e <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b402:	2540      	movs	r5, #64	; 0x40
 800b404:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800b408:	462b      	mov	r3, r5
 800b40a:	2200      	movs	r2, #0
 800b40c:	2180      	movs	r1, #128	; 0x80
 800b40e:	4620      	mov	r0, r4
 800b410:	f002 fec5 	bl	800e19e <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b414:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b416:	2301      	movs	r3, #1
 800b418:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
  
  if (pdev->pClassData) 
 800b41c:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800b420:	b12b      	cbz	r3, 800b42e <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800b422:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	7921      	ldrb	r1, [r4, #4]
 800b42a:	4620      	mov	r0, r4
 800b42c:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800b42e:	2000      	movs	r0, #0
 800b430:	bd38      	pop	{r3, r4, r5, pc}

0800b432 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800b432:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800b434:	2000      	movs	r0, #0
 800b436:	4770      	bx	lr

0800b438 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800b438:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b43c:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b440:	2304      	movs	r3, #4
 800b442:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  return USBD_OK;
}
 800b446:	2000      	movs	r0, #0
 800b448:	4770      	bx	lr

0800b44a <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 800b44a:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800b44e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  return USBD_OK;
}
 800b452:	2000      	movs	r0, #0
 800b454:	4770      	bx	lr

0800b456 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800b456:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800b458:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b45c:	2b03      	cmp	r3, #3
 800b45e:	d001      	beq.n	800b464 <USBD_LL_SOF+0xe>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 800b460:	2000      	movs	r0, #0
 800b462:	bd08      	pop	{r3, pc}
    if(pdev->pClass->SOF != NULL)
 800b464:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b468:	69db      	ldr	r3, [r3, #28]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d0f8      	beq.n	800b460 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 800b46e:	4798      	blx	r3
 800b470:	e7f6      	b.n	800b460 <USBD_LL_SOF+0xa>

0800b472 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800b472:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800b474:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b478:	2b03      	cmp	r3, #3
 800b47a:	d001      	beq.n	800b480 <USBD_LL_IsoINIncomplete+0xe>
    {
      pdev->pClass->IsoINIncomplete(pdev,epnum);
    }
  }
  return USBD_OK;
}
 800b47c:	2000      	movs	r0, #0
 800b47e:	bd08      	pop	{r3, pc}
    if(pdev->pClass->IsoINIncomplete != NULL)
 800b480:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d0f8      	beq.n	800b47c <USBD_LL_IsoINIncomplete+0xa>
      pdev->pClass->IsoINIncomplete(pdev,epnum);
 800b48a:	4798      	blx	r3
 800b48c:	e7f6      	b.n	800b47c <USBD_LL_IsoINIncomplete+0xa>

0800b48e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800b48e:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800b490:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b494:	2b03      	cmp	r3, #3
 800b496:	d001      	beq.n	800b49c <USBD_LL_IsoOUTIncomplete+0xe>
    {
      pdev->pClass->IsoOUTIncomplete(pdev,epnum);
    }
  }
  return USBD_OK;
}
 800b498:	2000      	movs	r0, #0
 800b49a:	bd08      	pop	{r3, pc}
    if(pdev->pClass->IsoOUTIncomplete != NULL)
 800b49c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d0f8      	beq.n	800b498 <USBD_LL_IsoOUTIncomplete+0xa>
      pdev->pClass->IsoOUTIncomplete(pdev,epnum);
 800b4a6:	4798      	blx	r3
 800b4a8:	e7f6      	b.n	800b498 <USBD_LL_IsoOUTIncomplete+0xa>

0800b4aa <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 800b4aa:	2000      	movs	r0, #0
 800b4ac:	4770      	bx	lr

0800b4ae <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800b4ae:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800b4b6:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800b4ba:	6852      	ldr	r2, [r2, #4]
 800b4bc:	7901      	ldrb	r1, [r0, #4]
 800b4be:	4790      	blx	r2
   
  return USBD_OK;
}
 800b4c0:	2000      	movs	r0, #0
 800b4c2:	bd08      	pop	{r3, pc}

0800b4c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b4c4:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800b4c6:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800b4c8:	781a      	ldrb	r2, [r3, #0]
 800b4ca:	b11a      	cbz	r2, 800b4d4 <USBD_GetLen+0x10>
  {
    len++;
 800b4cc:	3001      	adds	r0, #1
 800b4ce:	b2c0      	uxtb	r0, r0
    pbuff++;
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	e7f9      	b.n	800b4c8 <USBD_GetLen+0x4>
  }

  return len;
}
 800b4d4:	4770      	bx	lr

0800b4d6 <USBD_SetFeature>:
{
 800b4d6:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b4d8:	884b      	ldrh	r3, [r1, #2]
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d000      	beq.n	800b4e0 <USBD_SetFeature+0xa>
}
 800b4de:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800b4e0:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b4e4:	f000 fb78 	bl	800bbd8 <USBD_CtlSendStatus>
}
 800b4e8:	e7f9      	b.n	800b4de <USBD_SetFeature+0x8>

0800b4ea <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800b4ea:	780b      	ldrb	r3, [r1, #0]
 800b4ec:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800b4ee:	784b      	ldrb	r3, [r1, #1]
 800b4f0:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800b4f2:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800b4f4:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b4f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800b4fa:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800b4fc:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800b4fe:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b500:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800b504:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800b506:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800b508:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b50a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800b50e:	80c3      	strh	r3, [r0, #6]
}
 800b510:	4770      	bx	lr

0800b512 <USBD_CtlError>:
{
 800b512:	b510      	push	{r4, lr}
 800b514:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b516:	2180      	movs	r1, #128	; 0x80
 800b518:	f002 fe6d 	bl	800e1f6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b51c:	2100      	movs	r1, #0
 800b51e:	4620      	mov	r0, r4
 800b520:	f002 fe69 	bl	800e1f6 <USBD_LL_StallEP>
}
 800b524:	bd10      	pop	{r4, pc}

0800b526 <USBD_GetDescriptor>:
{
 800b526:	b530      	push	{r4, r5, lr}
 800b528:	b083      	sub	sp, #12
 800b52a:	4604      	mov	r4, r0
 800b52c:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800b52e:	2300      	movs	r3, #0
 800b530:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800b534:	884a      	ldrh	r2, [r1, #2]
 800b536:	0a13      	lsrs	r3, r2, #8
 800b538:	3b01      	subs	r3, #1
 800b53a:	2b06      	cmp	r3, #6
 800b53c:	f200 80ab 	bhi.w	800b696 <USBD_GetDescriptor+0x170>
 800b540:	e8df f003 	tbb	[pc, r3]
 800b544:	a9331f04 	.word	0xa9331f04
 800b548:	8da9      	.short	0x8da9
 800b54a:	9a          	.byte	0x9a
 800b54b:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b54c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f10d 0106 	add.w	r1, sp, #6
 800b556:	7c00      	ldrb	r0, [r0, #16]
 800b558:	4798      	blx	r3
    if (req->wLength != 0U)
 800b55a:	88ea      	ldrh	r2, [r5, #6]
 800b55c:	2a00      	cmp	r2, #0
 800b55e:	f000 80a3 	beq.w	800b6a8 <USBD_GetDescriptor+0x182>
      if (len != 0U)
 800b562:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b566:	2b00      	cmp	r3, #0
 800b568:	f000 8099 	beq.w	800b69e <USBD_GetDescriptor+0x178>
        len = MIN(len, req->wLength);
 800b56c:	429a      	cmp	r2, r3
 800b56e:	bf28      	it	cs
 800b570:	461a      	movcs	r2, r3
 800b572:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b576:	4601      	mov	r1, r0
 800b578:	4620      	mov	r0, r4
 800b57a:	f000 fb01 	bl	800bb80 <USBD_CtlSendData>
}
 800b57e:	b003      	add	sp, #12
 800b580:	bd30      	pop	{r4, r5, pc}
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b582:	7c03      	ldrb	r3, [r0, #16]
 800b584:	b943      	cbnz	r3, 800b598 <USBD_GetDescriptor+0x72>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b586:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b58c:	f10d 0006 	add.w	r0, sp, #6
 800b590:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b592:	2302      	movs	r3, #2
 800b594:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800b596:	e7e0      	b.n	800b55a <USBD_GetDescriptor+0x34>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b598:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59e:	f10d 0006 	add.w	r0, sp, #6
 800b5a2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800b5a8:	e7d7      	b.n	800b55a <USBD_GetDescriptor+0x34>
    switch ((uint8_t)(req->wValue))
 800b5aa:	b2d2      	uxtb	r2, r2
 800b5ac:	2a05      	cmp	r2, #5
 800b5ae:	d852      	bhi.n	800b656 <USBD_GetDescriptor+0x130>
 800b5b0:	e8df f002 	tbb	[pc, r2]
 800b5b4:	2a1d1003 	.word	0x2a1d1003
 800b5b8:	4437      	.short	0x4437
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b5ba:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	b123      	cbz	r3, 800b5cc <USBD_GetDescriptor+0xa6>
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b5c2:	f10d 0106 	add.w	r1, sp, #6
 800b5c6:	7c00      	ldrb	r0, [r0, #16]
 800b5c8:	4798      	blx	r3
  if (err != 0U)
 800b5ca:	e7c6      	b.n	800b55a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800b5cc:	4629      	mov	r1, r5
 800b5ce:	f7ff ffa0 	bl	800b512 <USBD_CtlError>
  if (err != 0U)
 800b5d2:	e7d4      	b.n	800b57e <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b5d4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	b123      	cbz	r3, 800b5e6 <USBD_GetDescriptor+0xc0>
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b5dc:	f10d 0106 	add.w	r1, sp, #6
 800b5e0:	7c00      	ldrb	r0, [r0, #16]
 800b5e2:	4798      	blx	r3
  if (err != 0U)
 800b5e4:	e7b9      	b.n	800b55a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800b5e6:	4629      	mov	r1, r5
 800b5e8:	f7ff ff93 	bl	800b512 <USBD_CtlError>
  if (err != 0U)
 800b5ec:	e7c7      	b.n	800b57e <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b5ee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	b123      	cbz	r3, 800b600 <USBD_GetDescriptor+0xda>
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b5f6:	f10d 0106 	add.w	r1, sp, #6
 800b5fa:	7c00      	ldrb	r0, [r0, #16]
 800b5fc:	4798      	blx	r3
  if (err != 0U)
 800b5fe:	e7ac      	b.n	800b55a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800b600:	4629      	mov	r1, r5
 800b602:	f7ff ff86 	bl	800b512 <USBD_CtlError>
  if (err != 0U)
 800b606:	e7ba      	b.n	800b57e <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b608:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	b123      	cbz	r3, 800b61a <USBD_GetDescriptor+0xf4>
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b610:	f10d 0106 	add.w	r1, sp, #6
 800b614:	7c00      	ldrb	r0, [r0, #16]
 800b616:	4798      	blx	r3
  if (err != 0U)
 800b618:	e79f      	b.n	800b55a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800b61a:	4629      	mov	r1, r5
 800b61c:	f7ff ff79 	bl	800b512 <USBD_CtlError>
  if (err != 0U)
 800b620:	e7ad      	b.n	800b57e <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b622:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b626:	695b      	ldr	r3, [r3, #20]
 800b628:	b123      	cbz	r3, 800b634 <USBD_GetDescriptor+0x10e>
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b62a:	f10d 0106 	add.w	r1, sp, #6
 800b62e:	7c00      	ldrb	r0, [r0, #16]
 800b630:	4798      	blx	r3
  if (err != 0U)
 800b632:	e792      	b.n	800b55a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800b634:	4629      	mov	r1, r5
 800b636:	f7ff ff6c 	bl	800b512 <USBD_CtlError>
  if (err != 0U)
 800b63a:	e7a0      	b.n	800b57e <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b63c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800b640:	699b      	ldr	r3, [r3, #24]
 800b642:	b123      	cbz	r3, 800b64e <USBD_GetDescriptor+0x128>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b644:	f10d 0106 	add.w	r1, sp, #6
 800b648:	7c00      	ldrb	r0, [r0, #16]
 800b64a:	4798      	blx	r3
  if (err != 0U)
 800b64c:	e785      	b.n	800b55a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800b64e:	4629      	mov	r1, r5
 800b650:	f7ff ff5f 	bl	800b512 <USBD_CtlError>
  if (err != 0U)
 800b654:	e793      	b.n	800b57e <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800b656:	4629      	mov	r1, r5
 800b658:	f7ff ff5b 	bl	800b512 <USBD_CtlError>
  if (err != 0U)
 800b65c:	e78f      	b.n	800b57e <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b65e:	7c03      	ldrb	r3, [r0, #16]
 800b660:	b933      	cbnz	r3, 800b670 <USBD_GetDescriptor+0x14a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b662:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b668:	f10d 0006 	add.w	r0, sp, #6
 800b66c:	4798      	blx	r3
  if (err != 0U)
 800b66e:	e774      	b.n	800b55a <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 800b670:	4629      	mov	r1, r5
 800b672:	f7ff ff4e 	bl	800b512 <USBD_CtlError>
  if (err != 0U)
 800b676:	e782      	b.n	800b57e <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b678:	7c03      	ldrb	r3, [r0, #16]
 800b67a:	b943      	cbnz	r3, 800b68e <USBD_GetDescriptor+0x168>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b67c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b682:	f10d 0006 	add.w	r0, sp, #6
 800b686:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b688:	2307      	movs	r3, #7
 800b68a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800b68c:	e765      	b.n	800b55a <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 800b68e:	4629      	mov	r1, r5
 800b690:	f7ff ff3f 	bl	800b512 <USBD_CtlError>
  if (err != 0U)
 800b694:	e773      	b.n	800b57e <USBD_GetDescriptor+0x58>
    USBD_CtlError(pdev, req);
 800b696:	4629      	mov	r1, r5
 800b698:	f7ff ff3b 	bl	800b512 <USBD_CtlError>
    return;
 800b69c:	e76f      	b.n	800b57e <USBD_GetDescriptor+0x58>
        USBD_CtlError(pdev, req);
 800b69e:	4629      	mov	r1, r5
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f7ff ff36 	bl	800b512 <USBD_CtlError>
 800b6a6:	e76a      	b.n	800b57e <USBD_GetDescriptor+0x58>
      (void)USBD_CtlSendStatus(pdev);
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	f000 fa95 	bl	800bbd8 <USBD_CtlSendStatus>
 800b6ae:	e766      	b.n	800b57e <USBD_GetDescriptor+0x58>

0800b6b0 <USBD_SetAddress>:
{
 800b6b0:	b538      	push	{r3, r4, r5, lr}
 800b6b2:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b6b4:	888b      	ldrh	r3, [r1, #4]
 800b6b6:	b9f3      	cbnz	r3, 800b6f6 <USBD_SetAddress+0x46>
 800b6b8:	88cb      	ldrh	r3, [r1, #6]
 800b6ba:	b9e3      	cbnz	r3, 800b6f6 <USBD_SetAddress+0x46>
 800b6bc:	884b      	ldrh	r3, [r1, #2]
 800b6be:	2b7f      	cmp	r3, #127	; 0x7f
 800b6c0:	d819      	bhi.n	800b6f6 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b6c2:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6c6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b6ca:	2b03      	cmp	r3, #3
 800b6cc:	d00c      	beq.n	800b6e8 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 800b6ce:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b6d2:	4629      	mov	r1, r5
 800b6d4:	f002 fdb4 	bl	800e240 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f000 fa7d 	bl	800bbd8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800b6de:	b135      	cbz	r5, 800b6ee <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6e0:	2302      	movs	r3, #2
 800b6e2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800b6e6:	e009      	b.n	800b6fc <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 800b6e8:	f7ff ff13 	bl	800b512 <USBD_CtlError>
 800b6ec:	e006      	b.n	800b6fc <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800b6f4:	e002      	b.n	800b6fc <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f7ff ff0b 	bl	800b512 <USBD_CtlError>
}
 800b6fc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b700 <USBD_SetConfig>:
{
 800b700:	b570      	push	{r4, r5, r6, lr}
 800b702:	4604      	mov	r4, r0
 800b704:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800b706:	788d      	ldrb	r5, [r1, #2]
 800b708:	4b2d      	ldr	r3, [pc, #180]	; (800b7c0 <USBD_SetConfig+0xc0>)
 800b70a:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b70c:	2d01      	cmp	r5, #1
 800b70e:	d80f      	bhi.n	800b730 <USBD_SetConfig+0x30>
  switch (pdev->dev_state)
 800b710:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b714:	2b02      	cmp	r3, #2
 800b716:	d00f      	beq.n	800b738 <USBD_SetConfig+0x38>
 800b718:	2b03      	cmp	r3, #3
 800b71a:	d023      	beq.n	800b764 <USBD_SetConfig+0x64>
    USBD_CtlError(pdev, req);
 800b71c:	f7ff fef9 	bl	800b512 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b720:	4b27      	ldr	r3, [pc, #156]	; (800b7c0 <USBD_SetConfig+0xc0>)
 800b722:	7819      	ldrb	r1, [r3, #0]
 800b724:	4620      	mov	r0, r4
 800b726:	f7ff fda4 	bl	800b272 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b72a:	2503      	movs	r5, #3
}
 800b72c:	4628      	mov	r0, r5
 800b72e:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800b730:	f7ff feef 	bl	800b512 <USBD_CtlError>
    return USBD_FAIL;
 800b734:	2503      	movs	r5, #3
 800b736:	e7f9      	b.n	800b72c <USBD_SetConfig+0x2c>
    if (cfgidx != 0U)
 800b738:	b18d      	cbz	r5, 800b75e <USBD_SetConfig+0x5e>
      pdev->dev_config = cfgidx;
 800b73a:	6045      	str	r5, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b73c:	4629      	mov	r1, r5
 800b73e:	f7ff fd8c 	bl	800b25a <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800b742:	4605      	mov	r5, r0
 800b744:	b120      	cbz	r0, 800b750 <USBD_SetConfig+0x50>
        USBD_CtlError(pdev, req);
 800b746:	4631      	mov	r1, r6
 800b748:	4620      	mov	r0, r4
 800b74a:	f7ff fee2 	bl	800b512 <USBD_CtlError>
 800b74e:	e7ed      	b.n	800b72c <USBD_SetConfig+0x2c>
        (void)USBD_CtlSendStatus(pdev);
 800b750:	4620      	mov	r0, r4
 800b752:	f000 fa41 	bl	800bbd8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b756:	2303      	movs	r3, #3
 800b758:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800b75c:	e7e6      	b.n	800b72c <USBD_SetConfig+0x2c>
      (void)USBD_CtlSendStatus(pdev);
 800b75e:	f000 fa3b 	bl	800bbd8 <USBD_CtlSendStatus>
 800b762:	e7e3      	b.n	800b72c <USBD_SetConfig+0x2c>
    if (cfgidx == 0U)
 800b764:	b1cd      	cbz	r5, 800b79a <USBD_SetConfig+0x9a>
    else if (cfgidx != pdev->dev_config)
 800b766:	6841      	ldr	r1, [r0, #4]
 800b768:	428d      	cmp	r5, r1
 800b76a:	d025      	beq.n	800b7b8 <USBD_SetConfig+0xb8>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b76c:	b2c9      	uxtb	r1, r1
 800b76e:	f7ff fd80 	bl	800b272 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800b772:	4b13      	ldr	r3, [pc, #76]	; (800b7c0 <USBD_SetConfig+0xc0>)
 800b774:	7819      	ldrb	r1, [r3, #0]
 800b776:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b778:	4620      	mov	r0, r4
 800b77a:	f7ff fd6e 	bl	800b25a <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800b77e:	4605      	mov	r5, r0
 800b780:	b1b0      	cbz	r0, 800b7b0 <USBD_SetConfig+0xb0>
        USBD_CtlError(pdev, req);
 800b782:	4631      	mov	r1, r6
 800b784:	4620      	mov	r0, r4
 800b786:	f7ff fec4 	bl	800b512 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b78a:	7921      	ldrb	r1, [r4, #4]
 800b78c:	4620      	mov	r0, r4
 800b78e:	f7ff fd70 	bl	800b272 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b792:	2302      	movs	r3, #2
 800b794:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800b798:	e7c8      	b.n	800b72c <USBD_SetConfig+0x2c>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b79a:	2302      	movs	r3, #2
 800b79c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800b7a0:	6045      	str	r5, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	f7ff fd65 	bl	800b272 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f000 fa15 	bl	800bbd8 <USBD_CtlSendStatus>
 800b7ae:	e7bd      	b.n	800b72c <USBD_SetConfig+0x2c>
        (void)USBD_CtlSendStatus(pdev);
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f000 fa11 	bl	800bbd8 <USBD_CtlSendStatus>
 800b7b6:	e7b9      	b.n	800b72c <USBD_SetConfig+0x2c>
      (void)USBD_CtlSendStatus(pdev);
 800b7b8:	f000 fa0e 	bl	800bbd8 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800b7bc:	2500      	movs	r5, #0
 800b7be:	e7b5      	b.n	800b72c <USBD_SetConfig+0x2c>
 800b7c0:	20000ae0 	.word	0x20000ae0

0800b7c4 <USBD_GetConfig>:
{
 800b7c4:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800b7c6:	88cb      	ldrh	r3, [r1, #6]
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d10a      	bne.n	800b7e2 <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 800b7cc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b7d0:	2b02      	cmp	r3, #2
 800b7d2:	d909      	bls.n	800b7e8 <USBD_GetConfig+0x24>
 800b7d4:	2b03      	cmp	r3, #3
 800b7d6:	d109      	bne.n	800b7ec <USBD_GetConfig+0x28>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b7d8:	2201      	movs	r2, #1
 800b7da:	1d01      	adds	r1, r0, #4
 800b7dc:	f000 f9d0 	bl	800bb80 <USBD_CtlSendData>
      break;
 800b7e0:	e001      	b.n	800b7e6 <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 800b7e2:	f7ff fe96 	bl	800b512 <USBD_CtlError>
}
 800b7e6:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800b7e8:	b25b      	sxtb	r3, r3
 800b7ea:	b913      	cbnz	r3, 800b7f2 <USBD_GetConfig+0x2e>
      USBD_CtlError(pdev, req);
 800b7ec:	f7ff fe91 	bl	800b512 <USBD_CtlError>
}
 800b7f0:	e7f9      	b.n	800b7e6 <USBD_GetConfig+0x22>
      pdev->dev_default_config = 0U;
 800b7f2:	4601      	mov	r1, r0
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f000 f9c0 	bl	800bb80 <USBD_CtlSendData>
      break;
 800b800:	e7f1      	b.n	800b7e6 <USBD_GetConfig+0x22>

0800b802 <USBD_GetStatus>:
{
 800b802:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800b804:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b808:	3b01      	subs	r3, #1
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d812      	bhi.n	800b834 <USBD_GetStatus+0x32>
    if (req->wLength != 0x2U)
 800b80e:	88cb      	ldrh	r3, [r1, #6]
 800b810:	2b02      	cmp	r3, #2
 800b812:	d10c      	bne.n	800b82e <USBD_GetStatus+0x2c>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b814:	2301      	movs	r3, #1
 800b816:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 800b818:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800b81c:	b10b      	cbz	r3, 800b822 <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b81e:	2303      	movs	r3, #3
 800b820:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b822:	2202      	movs	r2, #2
 800b824:	f100 010c 	add.w	r1, r0, #12
 800b828:	f000 f9aa 	bl	800bb80 <USBD_CtlSendData>
}
 800b82c:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 800b82e:	f7ff fe70 	bl	800b512 <USBD_CtlError>
      break;
 800b832:	e7fb      	b.n	800b82c <USBD_GetStatus+0x2a>
    USBD_CtlError(pdev, req);
 800b834:	f7ff fe6d 	bl	800b512 <USBD_CtlError>
}
 800b838:	e7f8      	b.n	800b82c <USBD_GetStatus+0x2a>

0800b83a <USBD_ClrFeature>:
{
 800b83a:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800b83c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b840:	3b01      	subs	r3, #1
 800b842:	2b02      	cmp	r3, #2
 800b844:	d809      	bhi.n	800b85a <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b846:	884b      	ldrh	r3, [r1, #2]
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d000      	beq.n	800b84e <USBD_ClrFeature+0x14>
}
 800b84c:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800b84e:	2300      	movs	r3, #0
 800b850:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b854:	f000 f9c0 	bl	800bbd8 <USBD_CtlSendStatus>
 800b858:	e7f8      	b.n	800b84c <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800b85a:	f7ff fe5a 	bl	800b512 <USBD_CtlError>
}
 800b85e:	e7f5      	b.n	800b84c <USBD_ClrFeature+0x12>

0800b860 <USBD_StdDevReq>:
{
 800b860:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b862:	780c      	ldrb	r4, [r1, #0]
 800b864:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800b868:	2c20      	cmp	r4, #32
 800b86a:	d006      	beq.n	800b87a <USBD_StdDevReq+0x1a>
 800b86c:	2c40      	cmp	r4, #64	; 0x40
 800b86e:	d004      	beq.n	800b87a <USBD_StdDevReq+0x1a>
 800b870:	b154      	cbz	r4, 800b888 <USBD_StdDevReq+0x28>
    USBD_CtlError(pdev, req);
 800b872:	f7ff fe4e 	bl	800b512 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b876:	2400      	movs	r4, #0
    break;
 800b878:	e004      	b.n	800b884 <USBD_StdDevReq+0x24>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b87a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	4798      	blx	r3
 800b882:	4604      	mov	r4, r0
}
 800b884:	4620      	mov	r0, r4
 800b886:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 800b888:	784d      	ldrb	r5, [r1, #1]
 800b88a:	2d09      	cmp	r5, #9
 800b88c:	d81d      	bhi.n	800b8ca <USBD_StdDevReq+0x6a>
 800b88e:	e8df f005 	tbb	[pc, r5]
 800b892:	1912      	.short	0x1912
 800b894:	081c161c 	.word	0x081c161c
 800b898:	0b0f1c05 	.word	0x0b0f1c05
      USBD_GetDescriptor(pdev, req);
 800b89c:	f7ff fe43 	bl	800b526 <USBD_GetDescriptor>
      break;
 800b8a0:	e7f0      	b.n	800b884 <USBD_StdDevReq+0x24>
      USBD_SetAddress(pdev, req);
 800b8a2:	f7ff ff05 	bl	800b6b0 <USBD_SetAddress>
      break;
 800b8a6:	e7ed      	b.n	800b884 <USBD_StdDevReq+0x24>
      ret = USBD_SetConfig(pdev, req);
 800b8a8:	f7ff ff2a 	bl	800b700 <USBD_SetConfig>
 800b8ac:	4604      	mov	r4, r0
      break;
 800b8ae:	e7e9      	b.n	800b884 <USBD_StdDevReq+0x24>
      USBD_GetConfig(pdev, req);
 800b8b0:	f7ff ff88 	bl	800b7c4 <USBD_GetConfig>
      break;
 800b8b4:	e7e6      	b.n	800b884 <USBD_StdDevReq+0x24>
      USBD_GetStatus(pdev, req);
 800b8b6:	f7ff ffa4 	bl	800b802 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800b8ba:	462c      	mov	r4, r5
      break;
 800b8bc:	e7e2      	b.n	800b884 <USBD_StdDevReq+0x24>
      USBD_SetFeature(pdev, req);
 800b8be:	f7ff fe0a 	bl	800b4d6 <USBD_SetFeature>
      break;
 800b8c2:	e7df      	b.n	800b884 <USBD_StdDevReq+0x24>
      USBD_ClrFeature(pdev, req);
 800b8c4:	f7ff ffb9 	bl	800b83a <USBD_ClrFeature>
      break;
 800b8c8:	e7dc      	b.n	800b884 <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 800b8ca:	f7ff fe22 	bl	800b512 <USBD_CtlError>
      break;
 800b8ce:	e7d9      	b.n	800b884 <USBD_StdDevReq+0x24>

0800b8d0 <USBD_StdItfReq>:
{
 800b8d0:	b570      	push	{r4, r5, r6, lr}
 800b8d2:	4605      	mov	r5, r0
 800b8d4:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8d6:	780b      	ldrb	r3, [r1, #0]
 800b8d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8dc:	2b20      	cmp	r3, #32
 800b8de:	d007      	beq.n	800b8f0 <USBD_StdItfReq+0x20>
 800b8e0:	2b40      	cmp	r3, #64	; 0x40
 800b8e2:	d005      	beq.n	800b8f0 <USBD_StdItfReq+0x20>
 800b8e4:	b123      	cbz	r3, 800b8f0 <USBD_StdItfReq+0x20>
    USBD_CtlError(pdev, req);
 800b8e6:	f7ff fe14 	bl	800b512 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b8ea:	2600      	movs	r6, #0
}
 800b8ec:	4630      	mov	r0, r6
 800b8ee:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 800b8f0:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800b8f4:	3b01      	subs	r3, #1
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	d818      	bhi.n	800b92c <USBD_StdItfReq+0x5c>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b8fa:	7923      	ldrb	r3, [r4, #4]
 800b8fc:	2b02      	cmp	r3, #2
 800b8fe:	d80f      	bhi.n	800b920 <USBD_StdItfReq+0x50>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b900:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	4621      	mov	r1, r4
 800b908:	4628      	mov	r0, r5
 800b90a:	4798      	blx	r3
 800b90c:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800b90e:	88e3      	ldrh	r3, [r4, #6]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d1eb      	bne.n	800b8ec <USBD_StdItfReq+0x1c>
 800b914:	2800      	cmp	r0, #0
 800b916:	d1e9      	bne.n	800b8ec <USBD_StdItfReq+0x1c>
          (void)USBD_CtlSendStatus(pdev);
 800b918:	4628      	mov	r0, r5
 800b91a:	f000 f95d 	bl	800bbd8 <USBD_CtlSendStatus>
 800b91e:	e7e5      	b.n	800b8ec <USBD_StdItfReq+0x1c>
        USBD_CtlError(pdev, req);
 800b920:	4621      	mov	r1, r4
 800b922:	4628      	mov	r0, r5
 800b924:	f7ff fdf5 	bl	800b512 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b928:	2600      	movs	r6, #0
 800b92a:	e7df      	b.n	800b8ec <USBD_StdItfReq+0x1c>
      USBD_CtlError(pdev, req);
 800b92c:	4621      	mov	r1, r4
 800b92e:	4628      	mov	r0, r5
 800b930:	f7ff fdef 	bl	800b512 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b934:	2600      	movs	r6, #0
      break;
 800b936:	e7d9      	b.n	800b8ec <USBD_StdItfReq+0x1c>

0800b938 <USBD_StdEPReq>:
{
 800b938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93a:	4606      	mov	r6, r0
 800b93c:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800b93e:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b940:	780c      	ldrb	r4, [r1, #0]
 800b942:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800b946:	2c20      	cmp	r4, #32
 800b948:	d008      	beq.n	800b95c <USBD_StdEPReq+0x24>
 800b94a:	b2d9      	uxtb	r1, r3
 800b94c:	2c40      	cmp	r4, #64	; 0x40
 800b94e:	d005      	beq.n	800b95c <USBD_StdEPReq+0x24>
 800b950:	b16c      	cbz	r4, 800b96e <USBD_StdEPReq+0x36>
    USBD_CtlError(pdev, req);
 800b952:	4629      	mov	r1, r5
 800b954:	f7ff fddd 	bl	800b512 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b958:	2400      	movs	r4, #0
    break;
 800b95a:	e006      	b.n	800b96a <USBD_StdEPReq+0x32>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b95c:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	4629      	mov	r1, r5
 800b964:	4630      	mov	r0, r6
 800b966:	4798      	blx	r3
 800b968:	4604      	mov	r4, r0
}
 800b96a:	4620      	mov	r0, r4
 800b96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (req->bRequest)
 800b96e:	786f      	ldrb	r7, [r5, #1]
 800b970:	2f01      	cmp	r7, #1
 800b972:	d037      	beq.n	800b9e4 <USBD_StdEPReq+0xac>
 800b974:	2f03      	cmp	r7, #3
 800b976:	d005      	beq.n	800b984 <USBD_StdEPReq+0x4c>
 800b978:	2f00      	cmp	r7, #0
 800b97a:	d063      	beq.n	800ba44 <USBD_StdEPReq+0x10c>
      USBD_CtlError(pdev, req);
 800b97c:	4629      	mov	r1, r5
 800b97e:	f7ff fdc8 	bl	800b512 <USBD_CtlError>
      break;
 800b982:	e7f2      	b.n	800b96a <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 800b984:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d005      	beq.n	800b998 <USBD_StdEPReq+0x60>
 800b98c:	2b03      	cmp	r3, #3
 800b98e:	d016      	beq.n	800b9be <USBD_StdEPReq+0x86>
        USBD_CtlError(pdev, req);
 800b990:	4629      	mov	r1, r5
 800b992:	f7ff fdbe 	bl	800b512 <USBD_CtlError>
        break;
 800b996:	e7e8      	b.n	800b96a <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b998:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 800b99c:	bf18      	it	ne
 800b99e:	2301      	movne	r3, #1
 800b9a0:	2900      	cmp	r1, #0
 800b9a2:	bf08      	it	eq
 800b9a4:	2300      	moveq	r3, #0
 800b9a6:	b133      	cbz	r3, 800b9b6 <USBD_StdEPReq+0x7e>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9a8:	f002 fc25 	bl	800e1f6 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9ac:	2180      	movs	r1, #128	; 0x80
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	f002 fc21 	bl	800e1f6 <USBD_LL_StallEP>
 800b9b4:	e7d9      	b.n	800b96a <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	f7ff fdab 	bl	800b512 <USBD_CtlError>
 800b9bc:	e7d5      	b.n	800b96a <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b9be:	886b      	ldrh	r3, [r5, #2]
 800b9c0:	b94b      	cbnz	r3, 800b9d6 <USBD_StdEPReq+0x9e>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b9c2:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 800b9c6:	bf18      	it	ne
 800b9c8:	2301      	movne	r3, #1
 800b9ca:	2900      	cmp	r1, #0
 800b9cc:	bf08      	it	eq
 800b9ce:	2300      	moveq	r3, #0
 800b9d0:	b10b      	cbz	r3, 800b9d6 <USBD_StdEPReq+0x9e>
 800b9d2:	88eb      	ldrh	r3, [r5, #6]
 800b9d4:	b11b      	cbz	r3, 800b9de <USBD_StdEPReq+0xa6>
        (void)USBD_CtlSendStatus(pdev);
 800b9d6:	4630      	mov	r0, r6
 800b9d8:	f000 f8fe 	bl	800bbd8 <USBD_CtlSendStatus>
        break;
 800b9dc:	e7c5      	b.n	800b96a <USBD_StdEPReq+0x32>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9de:	f002 fc0a 	bl	800e1f6 <USBD_LL_StallEP>
 800b9e2:	e7f8      	b.n	800b9d6 <USBD_StdEPReq+0x9e>
      switch (pdev->dev_state)
 800b9e4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b9e8:	2b02      	cmp	r3, #2
 800b9ea:	d005      	beq.n	800b9f8 <USBD_StdEPReq+0xc0>
 800b9ec:	2b03      	cmp	r3, #3
 800b9ee:	d016      	beq.n	800ba1e <USBD_StdEPReq+0xe6>
        USBD_CtlError(pdev, req);
 800b9f0:	4629      	mov	r1, r5
 800b9f2:	f7ff fd8e 	bl	800b512 <USBD_CtlError>
        break;
 800b9f6:	e7b8      	b.n	800b96a <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9f8:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 800b9fc:	bf18      	it	ne
 800b9fe:	2301      	movne	r3, #1
 800ba00:	2900      	cmp	r1, #0
 800ba02:	bf08      	it	eq
 800ba04:	2300      	moveq	r3, #0
 800ba06:	b133      	cbz	r3, 800ba16 <USBD_StdEPReq+0xde>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba08:	f002 fbf5 	bl	800e1f6 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba0c:	2180      	movs	r1, #128	; 0x80
 800ba0e:	4630      	mov	r0, r6
 800ba10:	f002 fbf1 	bl	800e1f6 <USBD_LL_StallEP>
 800ba14:	e7a9      	b.n	800b96a <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 800ba16:	4629      	mov	r1, r5
 800ba18:	f7ff fd7b 	bl	800b512 <USBD_CtlError>
 800ba1c:	e7a5      	b.n	800b96a <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ba1e:	886b      	ldrh	r3, [r5, #2]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d1a2      	bne.n	800b96a <USBD_StdEPReq+0x32>
          if ((ep_addr & 0x7FU) != 0x00U)
 800ba24:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800ba28:	d109      	bne.n	800ba3e <USBD_StdEPReq+0x106>
          (void)USBD_CtlSendStatus(pdev);
 800ba2a:	4630      	mov	r0, r6
 800ba2c:	f000 f8d4 	bl	800bbd8 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba30:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	4629      	mov	r1, r5
 800ba38:	4630      	mov	r0, r6
 800ba3a:	4798      	blx	r3
 800ba3c:	e795      	b.n	800b96a <USBD_StdEPReq+0x32>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba3e:	f002 fbe1 	bl	800e204 <USBD_LL_ClearStallEP>
 800ba42:	e7f2      	b.n	800ba2a <USBD_StdEPReq+0xf2>
      switch (pdev->dev_state)
 800ba44:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800ba48:	2a02      	cmp	r2, #2
 800ba4a:	d006      	beq.n	800ba5a <USBD_StdEPReq+0x122>
 800ba4c:	2a03      	cmp	r2, #3
 800ba4e:	d02e      	beq.n	800baae <USBD_StdEPReq+0x176>
        USBD_CtlError(pdev, req);
 800ba50:	4629      	mov	r1, r5
 800ba52:	f7ff fd5e 	bl	800b512 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ba56:	463c      	mov	r4, r7
        break;
 800ba58:	e787      	b.n	800b96a <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba5a:	f1b1 0280 	subs.w	r2, r1, #128	; 0x80
 800ba5e:	bf18      	it	ne
 800ba60:	2201      	movne	r2, #1
 800ba62:	2900      	cmp	r1, #0
 800ba64:	bf08      	it	eq
 800ba66:	2200      	moveq	r2, #0
 800ba68:	b99a      	cbnz	r2, 800ba92 <USBD_StdEPReq+0x15a>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba6a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ba6e:	d115      	bne.n	800ba9c <USBD_StdEPReq+0x164>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ba70:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba74:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ba78:	0089      	lsls	r1, r1, #2
 800ba7a:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800ba7e:	4401      	add	r1, r0
 800ba80:	3104      	adds	r1, #4
        pep->status = 0x0000U;
 800ba82:	2300      	movs	r3, #0
 800ba84:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba86:	2202      	movs	r2, #2
 800ba88:	4630      	mov	r0, r6
 800ba8a:	f000 f879 	bl	800bb80 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800ba8e:	463c      	mov	r4, r7
        break;
 800ba90:	e76b      	b.n	800b96a <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 800ba92:	4629      	mov	r1, r5
 800ba94:	f7ff fd3d 	bl	800b512 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ba98:	463c      	mov	r4, r7
          break;
 800ba9a:	e766      	b.n	800b96a <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba9c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800baa0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800baa4:	0089      	lsls	r1, r1, #2
 800baa6:	3110      	adds	r1, #16
 800baa8:	4401      	add	r1, r0
 800baaa:	3104      	adds	r1, #4
 800baac:	e7e9      	b.n	800ba82 <USBD_StdEPReq+0x14a>
        if ((ep_addr & 0x80U) == 0x80U)
 800baae:	b25b      	sxtb	r3, r3
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	db24      	blt.n	800bafe <USBD_StdEPReq+0x1c6>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bab4:	f001 020f 	and.w	r2, r1, #15
 800bab8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800babc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800bac0:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800bac4:	b34a      	cbz	r2, 800bb1a <USBD_StdEPReq+0x1e2>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	db2c      	blt.n	800bb24 <USBD_StdEPReq+0x1ec>
              &pdev->ep_out[ep_addr & 0x7FU];
 800baca:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bace:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800bad2:	009c      	lsls	r4, r3, #2
 800bad4:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 800bad8:	4434      	add	r4, r6
 800bada:	3404      	adds	r4, #4
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800badc:	2980      	cmp	r1, #128	; 0x80
 800bade:	bf14      	ite	ne
 800bae0:	2300      	movne	r3, #0
 800bae2:	2301      	moveq	r3, #1
 800bae4:	2900      	cmp	r1, #0
 800bae6:	bf08      	it	eq
 800bae8:	2301      	moveq	r3, #1
 800baea:	b323      	cbz	r3, 800bb36 <USBD_StdEPReq+0x1fe>
            pep->status = 0x0000U;
 800baec:	2300      	movs	r3, #0
 800baee:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800baf0:	2202      	movs	r2, #2
 800baf2:	4621      	mov	r1, r4
 800baf4:	4630      	mov	r0, r6
 800baf6:	f000 f843 	bl	800bb80 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800bafa:	463c      	mov	r4, r7
          break;
 800bafc:	e735      	b.n	800b96a <USBD_StdEPReq+0x32>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bafe:	f001 020f 	and.w	r2, r1, #15
 800bb02:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800bb06:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800bb0a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800bb0c:	2a00      	cmp	r2, #0
 800bb0e:	d1da      	bne.n	800bac6 <USBD_StdEPReq+0x18e>
            USBD_CtlError(pdev, req);
 800bb10:	4629      	mov	r1, r5
 800bb12:	f7ff fcfe 	bl	800b512 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800bb16:	463c      	mov	r4, r7
            break;
 800bb18:	e727      	b.n	800b96a <USBD_StdEPReq+0x32>
            USBD_CtlError(pdev, req);
 800bb1a:	4629      	mov	r1, r5
 800bb1c:	f7ff fcf9 	bl	800b512 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800bb20:	463c      	mov	r4, r7
            break;
 800bb22:	e722      	b.n	800b96a <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb24:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800bb28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800bb2c:	009c      	lsls	r4, r3, #2
 800bb2e:	3410      	adds	r4, #16
 800bb30:	4434      	add	r4, r6
 800bb32:	3404      	adds	r4, #4
 800bb34:	e7d2      	b.n	800badc <USBD_StdEPReq+0x1a4>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bb36:	4630      	mov	r0, r6
 800bb38:	f002 fb6b 	bl	800e212 <USBD_LL_IsStallEP>
 800bb3c:	b110      	cbz	r0, 800bb44 <USBD_StdEPReq+0x20c>
            pep->status = 0x0001U;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	e7d5      	b.n	800baf0 <USBD_StdEPReq+0x1b8>
            pep->status = 0x0000U;
 800bb44:	2300      	movs	r3, #0
 800bb46:	6023      	str	r3, [r4, #0]
 800bb48:	e7d2      	b.n	800baf0 <USBD_StdEPReq+0x1b8>

0800bb4a <USBD_GetString>:
  if (desc == NULL)
 800bb4a:	b1c0      	cbz	r0, 800bb7e <USBD_GetString+0x34>
{
 800bb4c:	b570      	push	{r4, r5, r6, lr}
 800bb4e:	460d      	mov	r5, r1
 800bb50:	4616      	mov	r6, r2
 800bb52:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bb54:	f7ff fcb6 	bl	800b4c4 <USBD_GetLen>
 800bb58:	3001      	adds	r0, #1
 800bb5a:	0040      	lsls	r0, r0, #1
 800bb5c:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800bb5e:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bb60:	2303      	movs	r3, #3
 800bb62:	706b      	strb	r3, [r5, #1]
  idx++;
 800bb64:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800bb66:	7822      	ldrb	r2, [r4, #0]
 800bb68:	b142      	cbz	r2, 800bb7c <USBD_GetString+0x32>
    unicode[idx] = *pdesc;
 800bb6a:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800bb6c:	3401      	adds	r4, #1
    idx++;
 800bb6e:	1c5a      	adds	r2, r3, #1
 800bb70:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800bb72:	2100      	movs	r1, #0
 800bb74:	54a9      	strb	r1, [r5, r2]
    idx++;
 800bb76:	3302      	adds	r3, #2
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	e7f4      	b.n	800bb66 <USBD_GetString+0x1c>
}
 800bb7c:	bd70      	pop	{r4, r5, r6, pc}
 800bb7e:	4770      	bx	lr

0800bb80 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bb80:	b510      	push	{r4, lr}
 800bb82:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb84:	2202      	movs	r2, #2
 800bb86:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bb8a:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length = len;
 800bb8c:	61c3      	str	r3, [r0, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb8e:	460a      	mov	r2, r1
 800bb90:	2100      	movs	r1, #0
 800bb92:	f002 fb5c 	bl	800e24e <USBD_LL_Transmit>

  return USBD_OK;
}
 800bb96:	2000      	movs	r0, #0
 800bb98:	bd10      	pop	{r4, pc}

0800bb9a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bb9a:	b508      	push	{r3, lr}
 800bb9c:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb9e:	460a      	mov	r2, r1
 800bba0:	2100      	movs	r1, #0
 800bba2:	f002 fb54 	bl	800e24e <USBD_LL_Transmit>

  return USBD_OK;
}
 800bba6:	2000      	movs	r0, #0
 800bba8:	bd08      	pop	{r3, pc}

0800bbaa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bbaa:	b510      	push	{r4, lr}
 800bbac:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bbae:	2203      	movs	r2, #3
 800bbb0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bbb4:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800bbb8:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bbbc:	460a      	mov	r2, r1
 800bbbe:	2100      	movs	r1, #0
 800bbc0:	f002 fb4c 	bl	800e25c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	bd10      	pop	{r4, pc}

0800bbc8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bbc8:	b508      	push	{r3, lr}
 800bbca:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bbcc:	460a      	mov	r2, r1
 800bbce:	2100      	movs	r1, #0
 800bbd0:	f002 fb44 	bl	800e25c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	bd08      	pop	{r3, pc}

0800bbd8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bbd8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bbda:	2304      	movs	r3, #4
 800bbdc:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	f002 fb32 	bl	800e24e <USBD_LL_Transmit>

  return USBD_OK;
}
 800bbea:	2000      	movs	r0, #0
 800bbec:	bd08      	pop	{r3, pc}

0800bbee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bbee:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bbf0:	2305      	movs	r3, #5
 800bbf2:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	f002 fb2e 	bl	800e25c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800bc00:	2000      	movs	r0, #0
 800bc02:	bd08      	pop	{r3, pc}

0800bc04 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800bc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc08:	b089      	sub	sp, #36	; 0x24
 800bc0a:	9003      	str	r0, [sp, #12]
 800bc0c:	9105      	str	r1, [sp, #20]
 800bc0e:	4611      	mov	r1, r2
 800bc10:	9207      	str	r2, [sp, #28]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800bc12:	4a67      	ldr	r2, [pc, #412]	; (800bdb0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ac>)
 800bc14:	fba2 2303 	umull	r2, r3, r2, r3
 800bc18:	0a1b      	lsrs	r3, r3, #8
 800bc1a:	9306      	str	r3, [sp, #24]
  currentMCU = BlockIndex;
 800bc1c:	9104      	str	r1, [sp, #16]
  

  while(currentMCU < (numberMCU + BlockIndex))
 800bc1e:	e0a4      	b.n	800bd6a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x166>
    
    for(i= 0; i <  16; i+=2)
    {
      if(i == 8)
      {
        pLum = pInBuffer + 128;
 800bc20:	9b03      	ldr	r3, [sp, #12]
 800bc22:	f103 0780 	add.w	r7, r3, #128	; 0x80
 800bc26:	e08e      	b.n	800bd46 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x142>
        
        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
          {           
            cbcomp = (int32_t)(*(pChrom));
 800bc28:	f898 5000 	ldrb.w	r5, [r8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800bc2c:	4b61      	ldr	r3, [pc, #388]	; (800bdb4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b0>)
 800bc2e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800bc32:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
            
            crcomp = (int32_t)(*(pChrom + 64));
 800bc36:	f898 2040 	ldrb.w	r2, [r8, #64]	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800bc3a:	f503 6188 	add.w	r1, r3, #1088	; 0x440
 800bc3e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800bc42:	f503 6604 	add.w	r6, r3, #2112	; 0x840
 800bc46:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800bc4a:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 800bc4e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bc52:	441a      	add	r2, r3
          
            
            
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
            ycomp = (int32_t)(*(pLum +j));
 800bc54:	5d3e      	ldrb	r6, [r7, r4]
            
            *(__IO uint32_t *)pOutAddr = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800bc56:	198d      	adds	r5, r1, r6
 800bc58:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800bc5c:	4b56      	ldr	r3, [pc, #344]	; (800bdb8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b4>)
 800bc5e:	f813 9005 	ldrb.w	r9, [r3, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800bc62:	eb06 4522 	add.w	r5, r6, r2, asr #16
 800bc66:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800bc6a:	5d5d      	ldrb	r5, [r3, r5]
 800bc6c:	022d      	lsls	r5, r5, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800bc6e:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 800bc72:	4406      	add	r6, r0
 800bc74:	f506 7680 	add.w	r6, r6, #256	; 0x100
 800bc78:	5d9e      	ldrb	r6, [r3, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800bc7a:	4335      	orrs	r5, r6
            *(__IO uint32_t *)pOutAddr = 
 800bc7c:	f8cc 5000 	str.w	r5, [ip]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 800bc80:	1c65      	adds	r5, r4, #1
 800bc82:	5d7e      	ldrb	r6, [r7, r5]
            
            *((__IO uint32_t *)(pOutAddr + 4)) = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800bc84:	198d      	adds	r5, r1, r6
 800bc86:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800bc8a:	f813 9005 	ldrb.w	r9, [r3, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800bc8e:	eb06 4522 	add.w	r5, r6, r2, asr #16
 800bc92:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800bc96:	5d5d      	ldrb	r5, [r3, r5]
 800bc98:	022d      	lsls	r5, r5, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800bc9a:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 800bc9e:	4406      	add	r6, r0
 800bca0:	f506 7680 	add.w	r6, r6, #256	; 0x100
 800bca4:	5d9e      	ldrb	r6, [r3, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800bca6:	4335      	orrs	r5, r6
            *((__IO uint32_t *)(pOutAddr + 4)) = 
 800bca8:	f8cc 5004 	str.w	r5, [ip, #4]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 800bcac:	f104 0508 	add.w	r5, r4, #8
 800bcb0:	5d7e      	ldrb	r6, [r7, r5]
            
            *(__IO uint32_t *)pOutAddr2 = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800bcb2:	198d      	adds	r5, r1, r6
 800bcb4:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800bcb8:	f813 9005 	ldrb.w	r9, [r3, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800bcbc:	eb06 4522 	add.w	r5, r6, r2, asr #16
 800bcc0:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800bcc4:	5d5d      	ldrb	r5, [r3, r5]
 800bcc6:	022d      	lsls	r5, r5, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800bcc8:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 800bccc:	4406      	add	r6, r0
 800bcce:	f506 7680 	add.w	r6, r6, #256	; 0x100
 800bcd2:	5d9e      	ldrb	r6, [r3, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800bcd4:	4335      	orrs	r5, r6
            *(__IO uint32_t *)pOutAddr2 = 
 800bcd6:	f8ce 5000 	str.w	r5, [lr]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 800bcda:	f104 0509 	add.w	r5, r4, #9
 800bcde:	5d7d      	ldrb	r5, [r7, r5]
            
            *((__IO uint32_t *)(pOutAddr2 +4)) = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800bce0:	4429      	add	r1, r5
 800bce2:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800bce6:	5c5e      	ldrb	r6, [r3, r1]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800bce8:	eb05 4122 	add.w	r1, r5, r2, asr #16
 800bcec:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800bcf0:	5c59      	ldrb	r1, [r3, r1]
 800bcf2:	0209      	lsls	r1, r1, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800bcf4:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 800bcf8:	1942      	adds	r2, r0, r5
 800bcfa:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800bcfe:	5c9b      	ldrb	r3, [r3, r2]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800bd00:	430b      	orrs	r3, r1
            *((__IO uint32_t *)(pOutAddr2 +4)) = 
 800bd02:	f8ce 3004 	str.w	r3, [lr, #4]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 800bd06:	f10c 0c08 	add.w	ip, ip, #8
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 800bd0a:	f10e 0e08 	add.w	lr, lr, #8
          
            pChrom++;
 800bd0e:	f108 0801 	add.w	r8, r8, #1
          for(j=0; j < 8; j+=2)
 800bd12:	3402      	adds	r4, #2
 800bd14:	2c07      	cmp	r4, #7
 800bd16:	d987      	bls.n	800bc28 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x24>
          }
          pLum += 64;                      
 800bd18:	3740      	adds	r7, #64	; 0x40
        for(k= 0; k<2; k++)
 800bd1a:	f10b 0b01 	add.w	fp, fp, #1
 800bd1e:	f1bb 0f01 	cmp.w	fp, #1
 800bd22:	d801      	bhi.n	800bd28 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x124>
          for(j=0; j < 8; j+=2)
 800bd24:	2400      	movs	r4, #0
 800bd26:	e7f5      	b.n	800bd14 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x110>
        }

        pLum = pLum - 128 + 16;
 800bd28:	3f70      	subs	r7, #112	; 0x70
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800bd2a:	9b01      	ldr	r3, [sp, #4]
 800bd2c:	9a02      	ldr	r2, [sp, #8]
 800bd2e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800bd32:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
 800bd34:	f10a 0a02 	add.w	sl, sl, #2
 800bd38:	f1ba 0f0f 	cmp.w	sl, #15
 800bd3c:	d811      	bhi.n	800bd62 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x15e>
      if(i == 8)
 800bd3e:	f1ba 0f08 	cmp.w	sl, #8
 800bd42:	f43f af6d 	beq.w	800bc20 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1c>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800bd46:	4b1b      	ldr	r3, [pc, #108]	; (800bdb4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b0>)
 800bd48:	691b      	ldr	r3, [r3, #16]
 800bd4a:	9a01      	ldr	r2, [sp, #4]
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d9f1      	bls.n	800bd34 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x130>
        pOutAddr = pOutBuffer + refline;
 800bd50:	9b05      	ldr	r3, [sp, #20]
 800bd52:	eb03 0c02 	add.w	ip, r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800bd56:	9b02      	ldr	r3, [sp, #8]
 800bd58:	eb0c 0e03 	add.w	lr, ip, r3
        for(k= 0; k<2; k++)
 800bd5c:	f04f 0b00 	mov.w	fp, #0
 800bd60:	e7dd      	b.n	800bd1e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x11a>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 800bd62:	9b03      	ldr	r3, [sp, #12]
 800bd64:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800bd68:	9303      	str	r3, [sp, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 800bd6a:	9b06      	ldr	r3, [sp, #24]
 800bd6c:	9a07      	ldr	r2, [sp, #28]
 800bd6e:	4413      	add	r3, r2
 800bd70:	9a04      	ldr	r2, [sp, #16]
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d917      	bls.n	800bda6 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1a2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800bd76:	9c04      	ldr	r4, [sp, #16]
 800bd78:	0120      	lsls	r0, r4, #4
 800bd7a:	490e      	ldr	r1, [pc, #56]	; (800bdb4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b0>)
 800bd7c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800bd7e:	fbb0 f2f3 	udiv	r2, r0, r3
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800bd82:	fb03 0312 	mls	r3, r3, r2, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800bd86:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800bd88:	9102      	str	r1, [sp, #8]
 800bd8a:	fb01 f202 	mul.w	r2, r1, r2
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800bd94:	9301      	str	r3, [sp, #4]
    currentMCU++;
 800bd96:	1c63      	adds	r3, r4, #1
 800bd98:	9304      	str	r3, [sp, #16]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 800bd9a:	9f03      	ldr	r7, [sp, #12]
 800bd9c:	f507 7880 	add.w	r8, r7, #256	; 0x100
    for(i= 0; i <  16; i+=2)
 800bda0:	f04f 0a00 	mov.w	sl, #0
 800bda4:	e7c8      	b.n	800bd38 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x134>
  }
  return numberMCU;
}
 800bda6:	9806      	ldr	r0, [sp, #24]
 800bda8:	b009      	add	sp, #36	; 0x24
 800bdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdae:	bf00      	nop
 800bdb0:	aaaaaaab 	.word	0xaaaaaaab
 800bdb4:	20000ae4 	.word	0x20000ae4
 800bdb8:	08012f00 	.word	0x08012f00

0800bdbc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800bdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc0:	b087      	sub	sp, #28
 800bdc2:	9002      	str	r0, [sp, #8]
 800bdc4:	9103      	str	r1, [sp, #12]
 800bdc6:	9205      	str	r2, [sp, #20]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800bdc8:	0a1b      	lsrs	r3, r3, #8
 800bdca:	9304      	str	r3, [sp, #16]
  currentMCU = BlockIndex;
 800bdcc:	9200      	str	r2, [sp, #0]
  

  while(currentMCU < (numberMCU + BlockIndex))
 800bdce:	e066      	b.n	800be9e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xe2>
        
        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
          {           
            cbcomp = (int32_t)(*(pChrom));
 800bdd0:	f89c 4000 	ldrb.w	r4, [ip]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800bdd4:	4a44      	ldr	r2, [pc, #272]	; (800bee8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x12c>)
 800bdd6:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800bdda:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            
            crcomp = (int32_t)(*(pChrom + 64));
 800bdde:	f89c 3040 	ldrb.w	r3, [ip, #64]	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800bde2:	f502 6588 	add.w	r5, r2, #1088	; 0x440
 800bde6:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800bdea:	f502 6504 	add.w	r5, r2, #2112	; 0x840
 800bdee:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 800bdf2:	f502 6244 	add.w	r2, r2, #3136	; 0xc40
 800bdf6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800bdfa:	442b      	add	r3, r5
          
            
            
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888) 
          
            ycomp = (int32_t)(*(pLum +j));
 800bdfc:	f81e 5000 	ldrb.w	r5, [lr, r0]
            
            *(__IO uint32_t *)pOutAddr = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800be00:	1972      	adds	r2, r6, r5
 800be02:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800be06:	4c39      	ldr	r4, [pc, #228]	; (800beec <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x130>)
 800be08:	f814 8002 	ldrb.w	r8, [r4, r2]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800be0c:	eb05 4223 	add.w	r2, r5, r3, asr #16
 800be10:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800be14:	5ca2      	ldrb	r2, [r4, r2]
 800be16:	0212      	lsls	r2, r2, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800be18:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 800be1c:	440d      	add	r5, r1
 800be1e:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800be22:	5d65      	ldrb	r5, [r4, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800be24:	432a      	orrs	r2, r5
            *(__IO uint32_t *)pOutAddr = 
 800be26:	603a      	str	r2, [r7, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 800be28:	1c42      	adds	r2, r0, #1
 800be2a:	f81e 2002 	ldrb.w	r2, [lr, r2]
            
            *((__IO uint32_t *)(pOutAddr + 4)) = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800be2e:	4416      	add	r6, r2
 800be30:	f506 7680 	add.w	r6, r6, #256	; 0x100
 800be34:	5da5      	ldrb	r5, [r4, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800be36:	eb02 4323 	add.w	r3, r2, r3, asr #16
 800be3a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800be3e:	5ce3      	ldrb	r3, [r4, r3]
 800be40:	021b      	lsls	r3, r3, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800be42:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);         
 800be46:	4411      	add	r1, r2
 800be48:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800be4c:	5c62      	ldrb	r2, [r4, r1]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800be4e:	4313      	orrs	r3, r2
            *((__IO uint32_t *)(pOutAddr + 4)) = 
 800be50:	607b      	str	r3, [r7, #4]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
          
#endif /* JPEG_RGB_FORMAT*/          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 800be52:	3708      	adds	r7, #8
          
            pChrom++;
 800be54:	f10c 0c01 	add.w	ip, ip, #1
          for(j=0; j < 8; j+=2)
 800be58:	3002      	adds	r0, #2
 800be5a:	2807      	cmp	r0, #7
 800be5c:	d9b8      	bls.n	800bdd0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14>
          }
          pLum += 64;                      
 800be5e:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
        for(k= 0; k<2; k++)
 800be62:	f10b 0b01 	add.w	fp, fp, #1
 800be66:	f1bb 0f01 	cmp.w	fp, #1
 800be6a:	d801      	bhi.n	800be70 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xb4>
          for(j=0; j < 8; j+=2)
 800be6c:	2000      	movs	r0, #0
 800be6e:	e7f4      	b.n	800be5a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9e>
        }
        
        pLum = pLum - 128 + 8;
 800be70:	f1ae 0e78 	sub.w	lr, lr, #120	; 0x78
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800be74:	9b01      	ldr	r3, [sp, #4]
 800be76:	449a      	add	sl, r3
    for(i= 0; i <  8; i++)
 800be78:	f109 0901 	add.w	r9, r9, #1
 800be7c:	f1b9 0f07 	cmp.w	r9, #7
 800be80:	d809      	bhi.n	800be96 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xda>
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800be82:	4b19      	ldr	r3, [pc, #100]	; (800bee8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x12c>)
 800be84:	691b      	ldr	r3, [r3, #16]
 800be86:	4553      	cmp	r3, sl
 800be88:	d9f6      	bls.n	800be78 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xbc>
        pOutAddr = pOutBuffer + refline;
 800be8a:	9b03      	ldr	r3, [sp, #12]
 800be8c:	eb03 070a 	add.w	r7, r3, sl
        for(k= 0; k<2; k++)
 800be90:	f04f 0b00 	mov.w	fp, #0
 800be94:	e7e7      	b.n	800be66 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xaa>
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 800be96:	9b02      	ldr	r3, [sp, #8]
 800be98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800be9c:	9302      	str	r3, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 800be9e:	9b04      	ldr	r3, [sp, #16]
 800bea0:	9a05      	ldr	r2, [sp, #20]
 800bea2:	4413      	add	r3, r2
 800bea4:	9a00      	ldr	r2, [sp, #0]
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d919      	bls.n	800bede <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x122>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800beaa:	9800      	ldr	r0, [sp, #0]
 800beac:	ea4f 1a00 	mov.w	sl, r0, lsl #4
 800beb0:	490d      	ldr	r1, [pc, #52]	; (800bee8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x12c>)
 800beb2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800beb4:	fbba f2f3 	udiv	r2, sl, r3
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800beb8:	fb03 aa12 	mls	sl, r3, r2, sl
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800bebc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800bebe:	9301      	str	r3, [sp, #4]
 800bec0:	fb03 f202 	mul.w	r2, r3, r2
 800bec4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800bec8:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
    currentMCU++;
 800becc:	1c43      	adds	r3, r0, #1
 800bece:	9300      	str	r3, [sp, #0]
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 800bed0:	9b02      	ldr	r3, [sp, #8]
 800bed2:	f103 0c80 	add.w	ip, r3, #128	; 0x80
    pLum = pInBuffer;
 800bed6:	469e      	mov	lr, r3
    for(i= 0; i <  8; i++)
 800bed8:	f04f 0900 	mov.w	r9, #0
 800bedc:	e7ce      	b.n	800be7c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xc0>
  }
  return numberMCU;
}
 800bede:	9804      	ldr	r0, [sp, #16]
 800bee0:	b007      	add	sp, #28
 800bee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee6:	bf00      	nop
 800bee8:	20000ae4 	.word	0x20000ae4
 800beec:	08012f00 	.word	0x08012f00

0800bef0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800bef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef4:	b085      	sub	sp, #20
 800bef6:	9000      	str	r0, [sp, #0]
 800bef8:	9101      	str	r1, [sp, #4]
 800befa:	4692      	mov	sl, r2
 800befc:	9203      	str	r2, [sp, #12]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800befe:	4a35      	ldr	r2, [pc, #212]	; (800bfd4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe4>)
 800bf00:	fba2 2303 	umull	r2, r3, r2, r3
 800bf04:	09db      	lsrs	r3, r3, #7
 800bf06:	9302      	str	r3, [sp, #8]
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
 800bf08:	e042      	b.n	800bf90 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xa0>
        pOutAddr = pOutBuffer+ refline;
        

          for(j=0; j < 8; j++)
          {           
            cbcomp = (int32_t)(*pChrom);
 800bf0a:	7825      	ldrb	r5, [r4, #0]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800bf0c:	4b32      	ldr	r3, [pc, #200]	; (800bfd8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
 800bf0e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800bf12:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
            
            crcomp = (int32_t)(*(pChrom + 64));
 800bf16:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800bf1a:	f503 6688 	add.w	r6, r3, #1088	; 0x440
 800bf1e:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800bf22:	f503 6c04 	add.w	ip, r3, #2112	; 0x840
 800bf26:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 800bf2a:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 800bf2e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bf32:	441a      	add	r2, r3
                      
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
            ycomp = (int32_t)(*(pLum +j));
 800bf34:	f818 3000 	ldrb.w	r3, [r8, r0]
            
            *(__IO uint32_t *)pOutAddr = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800bf38:	441e      	add	r6, r3
 800bf3a:	f506 7680 	add.w	r6, r6, #256	; 0x100
 800bf3e:	4d27      	ldr	r5, [pc, #156]	; (800bfdc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
 800bf40:	5dae      	ldrb	r6, [r5, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800bf42:	eb03 4222 	add.w	r2, r3, r2, asr #16
 800bf46:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800bf4a:	5caa      	ldrb	r2, [r5, r2]
 800bf4c:	0212      	lsls	r2, r2, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800bf4e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);       
 800bf52:	440b      	add	r3, r1
 800bf54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bf58:	5ceb      	ldrb	r3, [r5, r3]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800bf5a:	431e      	orrs	r6, r3
            *(__IO uint32_t *)pOutAddr = 
 800bf5c:	f847 6b04 	str.w	r6, [r7], #4
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
          
            pChrom++;
 800bf60:	3401      	adds	r4, #1
          for(j=0; j < 8; j++)
 800bf62:	3001      	adds	r0, #1
 800bf64:	2807      	cmp	r0, #7
 800bf66:	d9d0      	bls.n	800bf0a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x1a>
          }
          pLum += 8;
 800bf68:	f108 0808 	add.w	r8, r8, #8

        refline += JPEG_ConvertorParams.ScaledWidth;          
 800bf6c:	44d9      	add	r9, fp
    for(i= 0; i <  8; i++)
 800bf6e:	f10e 0e01 	add.w	lr, lr, #1
 800bf72:	f1be 0f07 	cmp.w	lr, #7
 800bf76:	d808      	bhi.n	800bf8a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x9a>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800bf78:	4b17      	ldr	r3, [pc, #92]	; (800bfd8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
 800bf7a:	691b      	ldr	r3, [r3, #16]
 800bf7c:	454b      	cmp	r3, r9
 800bf7e:	d9f6      	bls.n	800bf6e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7e>
        pOutAddr = pOutBuffer+ refline;
 800bf80:	9b01      	ldr	r3, [sp, #4]
 800bf82:	eb03 0709 	add.w	r7, r3, r9
          for(j=0; j < 8; j++)
 800bf86:	2000      	movs	r0, #0
 800bf88:	e7ec      	b.n	800bf64 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x74>
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 800bf8a:	9b00      	ldr	r3, [sp, #0]
 800bf8c:	33c0      	adds	r3, #192	; 0xc0
 800bf8e:	9300      	str	r3, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 800bf90:	9b02      	ldr	r3, [sp, #8]
 800bf92:	9a03      	ldr	r2, [sp, #12]
 800bf94:	4413      	add	r3, r2
 800bf96:	4553      	cmp	r3, sl
 800bf98:	d918      	bls.n	800bfcc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xdc>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800bf9a:	ea4f 09ca 	mov.w	r9, sl, lsl #3
 800bf9e:	490e      	ldr	r1, [pc, #56]	; (800bfd8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
 800bfa0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800bfa2:	fbb9 f2f3 	udiv	r2, r9, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800bfa6:	fb03 9912 	mls	r9, r3, r2, r9
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800bfaa:	f8d1 b028 	ldr.w	fp, [r1, #40]	; 0x28
 800bfae:	fb0b f202 	mul.w	r2, fp, r2
 800bfb2:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800bfb6:	eb09 09c2 	add.w	r9, r9, r2, lsl #3
    currentMCU++;   
 800bfba:	f10a 0a01 	add.w	sl, sl, #1
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 800bfbe:	9b00      	ldr	r3, [sp, #0]
 800bfc0:	f103 0440 	add.w	r4, r3, #64	; 0x40
    pLum = pInBuffer;
 800bfc4:	4698      	mov	r8, r3
    for(i= 0; i <  8; i++)
 800bfc6:	f04f 0e00 	mov.w	lr, #0
 800bfca:	e7d2      	b.n	800bf72 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x82>
  }
  return numberMCU;
}
 800bfcc:	9802      	ldr	r0, [sp, #8]
 800bfce:	b005      	add	sp, #20
 800bfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfd4:	aaaaaaab 	.word	0xaaaaaaab
 800bfd8:	20000ae4 	.word	0x20000ae4
 800bfdc:	08012f00 	.word	0x08012f00

0800bfe0 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 800bfe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe4:	4681      	mov	r9, r0
 800bfe6:	4692      	mov	sl, r2

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 800bfe8:	0998      	lsrs	r0, r3, #6
  currentMCU = BlockIndex;
 800bfea:	4690      	mov	r8, r2
  
  while(currentMCU < (numberMCU + BlockIndex))
 800bfec:	e01a      	b.n	800c024 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x44>
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
      {  
        for(j=0; j < 8; j++)
        { 
          ySample =   (uint32_t)(*pLum);
 800bfee:	f817 4b01 	ldrb.w	r4, [r7], #1

#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
          *(__IO uint32_t *)pOutAddr = ySample |  (ySample << 8) | (ySample << 16);
 800bff2:	ea44 2304 	orr.w	r3, r4, r4, lsl #8
 800bff6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bffa:	f846 3b04 	str.w	r3, [r6], #4
        for(j=0; j < 8; j++)
 800bffe:	3501      	adds	r5, #1
 800c000:	2d07      	cmp	r5, #7
 800c002:	d9f4      	bls.n	800bfee <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xe>
          
          pOutAddr += JPEG_BYTES_PER_PIXEL;
          pLum++;
        }

        refline += JPEG_ConvertorParams.ScaledWidth;        
 800c004:	4494      	add	ip, r2
    for(i= 0; i <  8; i++)
 800c006:	f10e 0e01 	add.w	lr, lr, #1
 800c00a:	f1be 0f07 	cmp.w	lr, #7
 800c00e:	d807      	bhi.n	800c020 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x40>
      pOutAddr = pOutBuffer + refline;
 800c010:	eb01 060c 	add.w	r6, r1, ip
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800c014:	4b11      	ldr	r3, [pc, #68]	; (800c05c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
 800c016:	691b      	ldr	r3, [r3, #16]
 800c018:	4563      	cmp	r3, ip
 800c01a:	d9f4      	bls.n	800c006 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
        for(j=0; j < 8; j++)
 800c01c:	2500      	movs	r5, #0
 800c01e:	e7ef      	b.n	800c000 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x20>
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 800c020:	f109 0940 	add.w	r9, r9, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
 800c024:	eb00 030a 	add.w	r3, r0, sl
 800c028:	4543      	cmp	r3, r8
 800c02a:	d914      	bls.n	800c056 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x76>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800c02c:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800c030:	4a0a      	ldr	r2, [pc, #40]	; (800c05c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
 800c032:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c034:	fbbc f4f3 	udiv	r4, ip, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800c038:	fb03 cc14 	mls	ip, r3, r4, ip
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800c03c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800c03e:	fb02 f404 	mul.w	r4, r2, r4
 800c042:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800c046:	eb0c 0cc4 	add.w	ip, ip, r4, lsl #3
    currentMCU++;
 800c04a:	f108 0801 	add.w	r8, r8, #1
    pLum = pInBuffer;
 800c04e:	464f      	mov	r7, r9
    for(i= 0; i <  8; i++)
 800c050:	f04f 0e00 	mov.w	lr, #0
 800c054:	e7d9      	b.n	800c00a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
 800c056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c05a:	bf00      	nop
 800c05c:	20000ae4 	.word	0x20000ae4

0800c060 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800c060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c064:	b085      	sub	sp, #20
 800c066:	9203      	str	r2, [sp, #12]
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 800c068:	0a1b      	lsrs	r3, r3, #8
 800c06a:	9302      	str	r3, [sp, #8]
  currentMCU = BlockIndex;
 800c06c:	4691      	mov	r9, r2
 800c06e:	468a      	mov	sl, r1
  

  while(currentMCU < (numberMCU + BlockIndex))
 800c070:	e035      	b.n	800c0de <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7e>
      {
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
 800c072:	f894 c0c0 	ldrb.w	ip, [r4, #192]	; 0xc0
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800c076:	7823      	ldrb	r3, [r4, #0]
 800c078:	fb0c f303 	mul.w	r3, ip, r3
 800c07c:	4a27      	ldr	r2, [pc, #156]	; (800c11c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xbc>)
 800c07e:	fb82 b703 	smull	fp, r7, r2, r3
 800c082:	443b      	add	r3, r7
 800c084:	11df      	asrs	r7, r3, #7
            
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 800c086:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800c08a:	fb0c f303 	mul.w	r3, ip, r3
 800c08e:	fb82 1b03 	smull	r1, fp, r2, r3
 800c092:	445b      	add	r3, fp
 800c094:	11db      	asrs	r3, r3, #7
            
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 800c096:	f894 b080 	ldrb.w	fp, [r4, #128]	; 0x80
 800c09a:	fb0c fc0b 	mul.w	ip, ip, fp
 800c09e:	fb82 120c 	smull	r1, r2, r2, ip
 800c0a2:	4462      	add	r2, ip
                      
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
          *(__IO uint32_t *)pOutAddr = 
            (c_red << JPEG_RED_OFFSET) | \
            (c_green << JPEG_GREEN_OFFSET) | \
 800c0a4:	021b      	lsls	r3, r3, #8
            (c_red << JPEG_RED_OFFSET) | \
 800c0a6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
            (c_green << JPEG_GREEN_OFFSET) | \
 800c0aa:	ea43 13e2 	orr.w	r3, r3, r2, asr #7
          *(__IO uint32_t *)pOutAddr = 
 800c0ae:	f846 3b04 	str.w	r3, [r6], #4
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
          
            pChrom++;
 800c0b2:	3401      	adds	r4, #1
          for(j=0; j < 8; j++)
 800c0b4:	3501      	adds	r5, #1
 800c0b6:	2d07      	cmp	r5, #7
 800c0b8:	d9db      	bls.n	800c072 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x12>
 800c0ba:	9901      	ldr	r1, [sp, #4]
          }

        refline += JPEG_ConvertorParams.ScaledWidth;          
 800c0bc:	4488      	add	r8, r1
    for(i= 0; i <  8; i++)
 800c0be:	f10e 0e01 	add.w	lr, lr, #1
 800c0c2:	f1be 0f07 	cmp.w	lr, #7
 800c0c6:	d808      	bhi.n	800c0da <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7a>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800c0c8:	4b15      	ldr	r3, [pc, #84]	; (800c120 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xc0>)
 800c0ca:	691b      	ldr	r3, [r3, #16]
 800c0cc:	4543      	cmp	r3, r8
 800c0ce:	d9f6      	bls.n	800c0be <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x5e>
        pOutAddr = pOutBuffer+ refline;        
 800c0d0:	eb0a 0608 	add.w	r6, sl, r8
          for(j=0; j < 8; j++)
 800c0d4:	2500      	movs	r5, #0
 800c0d6:	9101      	str	r1, [sp, #4]
 800c0d8:	e7ed      	b.n	800c0b6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x56>
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 800c0da:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
 800c0de:	9b02      	ldr	r3, [sp, #8]
 800c0e0:	9a03      	ldr	r2, [sp, #12]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	454b      	cmp	r3, r9
 800c0e6:	d914      	bls.n	800c112 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb2>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800c0e8:	ea4f 08c9 	mov.w	r8, r9, lsl #3
 800c0ec:	490c      	ldr	r1, [pc, #48]	; (800c120 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xc0>)
 800c0ee:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800c0f0:	fbb8 f2f3 	udiv	r2, r8, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800c0f4:	fb03 8812 	mls	r8, r3, r2, r8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800c0f8:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800c0fa:	fb01 f202 	mul.w	r2, r1, r2
 800c0fe:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800c102:	eb08 08c2 	add.w	r8, r8, r2, lsl #3
    currentMCU++;
 800c106:	f109 0901 	add.w	r9, r9, #1
    pChrom = pInBuffer;
 800c10a:	4604      	mov	r4, r0
    for(i= 0; i <  8; i++)
 800c10c:	f04f 0e00 	mov.w	lr, #0
 800c110:	e7d7      	b.n	800c0c2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x62>
  }
  return numberMCU;
}
 800c112:	9802      	ldr	r0, [sp, #8]
 800c114:	b005      	add	sp, #20
 800c116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c11a:	bf00      	nop
 800c11c:	80808081 	.word	0x80808081
 800c120:	20000ae4 	.word	0x20000ae4

0800c124 <JPEG_InitPostProcColorTables>:
  */
void JPEG_InitPostProcColorTables(void)
{
  int32_t index, i; 
    
  for (i = 0; i <= 255; i++) 
 800c124:	2100      	movs	r1, #0
 800c126:	29ff      	cmp	r1, #255	; 0xff
 800c128:	dc1f      	bgt.n	800c16a <JPEG_InitPostProcColorTables+0x46>
  {
    index = (i * 2) - 256;
 800c12a:	f1a1 0080 	sub.w	r0, r1, #128	; 0x80
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800c12e:	4b0f      	ldr	r3, [pc, #60]	; (800c16c <JPEG_InitPostProcColorTables+0x48>)
 800c130:	fb03 f300 	mul.w	r3, r3, r0
 800c134:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c138:	141b      	asrs	r3, r3, #16
 800c13a:	4a0d      	ldr	r2, [pc, #52]	; (800c170 <JPEG_InitPostProcColorTables+0x4c>)
 800c13c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c140:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800c144:	4b0b      	ldr	r3, [pc, #44]	; (800c174 <JPEG_InitPostProcColorTables+0x50>)
 800c146:	fb03 f300 	mul.w	r3, r3, r0
 800c14a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c14e:	141b      	asrs	r3, r3, #16
 800c150:	6413      	str	r3, [r2, #64]	; 0x40
    
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 800c152:	4b09      	ldr	r3, [pc, #36]	; (800c178 <JPEG_InitPostProcColorTables+0x54>)
 800c154:	fb03 f300 	mul.w	r3, r3, r0
 800c158:	f8c2 3840 	str.w	r3, [r2, #2112]	; 0x840
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800c15c:	4b07      	ldr	r3, [pc, #28]	; (800c17c <JPEG_InitPostProcColorTables+0x58>)
 800c15e:	fb03 f000 	mul.w	r0, r3, r0
 800c162:	f8c2 0c40 	str.w	r0, [r2, #3136]	; 0xc40
  for (i = 0; i <= 255; i++) 
 800c166:	3101      	adds	r1, #1
 800c168:	e7dd      	b.n	800c126 <JPEG_InitPostProcColorTables+0x2>
  }  
}
 800c16a:	4770      	bx	lr
 800c16c:	000166e8 	.word	0x000166e8
 800c170:	20000ae4 	.word	0x20000ae4
 800c174:	0001c5a0 	.word	0x0001c5a0
 800c178:	ffff4930 	.word	0xffff4930
 800c17c:	ffffa7e8 	.word	0xffffa7e8

0800c180 <JPEG_GetDecodeColorConvertFunc>:
{
 800c180:	b4f0      	push	{r4, r5, r6, r7}
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800c182:	6807      	ldr	r7, [r0, #0]
 800c184:	4c3f      	ldr	r4, [pc, #252]	; (800c284 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800c186:	6027      	str	r7, [r4, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800c188:	68c3      	ldr	r3, [r0, #12]
 800c18a:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800c18c:	6885      	ldr	r5, [r0, #8]
 800c18e:	60e5      	str	r5, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800c190:	fb05 f603 	mul.w	r6, r5, r3
 800c194:	00b6      	lsls	r6, r6, #2
 800c196:	6126      	str	r6, [r4, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800c198:	6840      	ldr	r0, [r0, #4]
 800c19a:	6060      	str	r0, [r4, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800c19c:	2f10      	cmp	r7, #16
 800c19e:	d02c      	beq.n	800c1fa <JPEG_GetDecodeColorConvertFunc+0x7a>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 800c1a0:	2f00      	cmp	r7, #0
 800c1a2:	d15b      	bne.n	800c25c <JPEG_GetDecodeColorConvertFunc+0xdc>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800c1a4:	4838      	ldr	r0, [pc, #224]	; (800c288 <JPEG_GetDecodeColorConvertFunc+0x108>)
 800c1a6:	6008      	str	r0, [r1, #0]
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800c1a8:	f003 0107 	and.w	r1, r3, #7
 800c1ac:	4835      	ldr	r0, [pc, #212]	; (800c284 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800c1ae:	6141      	str	r1, [r0, #20]
    if(JPEG_ConvertorParams.LineOffset != 0)
 800c1b0:	b111      	cbz	r1, 800c1b8 <JPEG_GetDecodeColorConvertFunc+0x38>
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800c1b2:	f1c1 0108 	rsb	r1, r1, #8
 800c1b6:	6141      	str	r1, [r0, #20]
    JPEG_ConvertorParams.H_factor = 8;
 800c1b8:	4932      	ldr	r1, [pc, #200]	; (800c284 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800c1ba:	2008      	movs	r0, #8
 800c1bc:	61c8      	str	r0, [r1, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 800c1be:	6208      	str	r0, [r1, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800c1c0:	4930      	ldr	r1, [pc, #192]	; (800c284 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800c1c2:	6948      	ldr	r0, [r1, #20]
 800c1c4:	4418      	add	r0, r3
 800c1c6:	6248      	str	r0, [r1, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 800c1c8:	0098      	lsls	r0, r3, #2
 800c1ca:	6288      	str	r0, [r1, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800c1cc:	69c9      	ldr	r1, [r1, #28]
 800c1ce:	fbb3 f0f1 	udiv	r0, r3, r1
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 800c1d2:	fb01 3110 	mls	r1, r1, r0, r3
 800c1d6:	b101      	cbz	r1, 800c1da <JPEG_GetDecodeColorConvertFunc+0x5a>
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 800c1d8:	3001      	adds	r0, #1
  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 800c1da:	4b2a      	ldr	r3, [pc, #168]	; (800c284 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800c1dc:	6a19      	ldr	r1, [r3, #32]
 800c1de:	fbb5 f3f1 	udiv	r3, r5, r1
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 800c1e2:	fb01 5513 	mls	r5, r1, r3, r5
 800c1e6:	b105      	cbz	r5, 800c1ea <JPEG_GetDecodeColorConvertFunc+0x6a>
    vMCU++; /*+1 for vertical incomplete MCU */                
 800c1e8:	3301      	adds	r3, #1
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800c1ea:	fb03 f300 	mul.w	r3, r3, r0
 800c1ee:	4925      	ldr	r1, [pc, #148]	; (800c284 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800c1f0:	62cb      	str	r3, [r1, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 800c1f2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800c1f4:	2000      	movs	r0, #0
}
 800c1f6:	bcf0      	pop	{r4, r5, r6, r7}
 800c1f8:	4770      	bx	lr
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800c1fa:	2801      	cmp	r0, #1
 800c1fc:	d010      	beq.n	800c220 <JPEG_GetDecodeColorConvertFunc+0xa0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800c1fe:	2802      	cmp	r0, #2
 800c200:	d01c      	beq.n	800c23c <JPEG_GetDecodeColorConvertFunc+0xbc>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 800c202:	4822      	ldr	r0, [pc, #136]	; (800c28c <JPEG_GetDecodeColorConvertFunc+0x10c>)
 800c204:	6008      	str	r0, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800c206:	f003 0107 	and.w	r1, r3, #7
 800c20a:	481e      	ldr	r0, [pc, #120]	; (800c284 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800c20c:	6141      	str	r1, [r0, #20]
      if(JPEG_ConvertorParams.LineOffset != 0)
 800c20e:	b111      	cbz	r1, 800c216 <JPEG_GetDecodeColorConvertFunc+0x96>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800c210:	f1c1 0108 	rsb	r1, r1, #8
 800c214:	6141      	str	r1, [r0, #20]
      JPEG_ConvertorParams.H_factor = 8;
 800c216:	491b      	ldr	r1, [pc, #108]	; (800c284 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800c218:	2008      	movs	r0, #8
 800c21a:	61c8      	str	r0, [r1, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800c21c:	6208      	str	r0, [r1, #32]
 800c21e:	e7cf      	b.n	800c1c0 <JPEG_GetDecodeColorConvertFunc+0x40>
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 800c220:	481b      	ldr	r0, [pc, #108]	; (800c290 <JPEG_GetDecodeColorConvertFunc+0x110>)
 800c222:	6008      	str	r0, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 800c224:	f003 010f 	and.w	r1, r3, #15
 800c228:	6161      	str	r1, [r4, #20]
      if(JPEG_ConvertorParams.LineOffset != 0)
 800c22a:	b111      	cbz	r1, 800c232 <JPEG_GetDecodeColorConvertFunc+0xb2>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800c22c:	f1c1 0110 	rsb	r1, r1, #16
 800c230:	6161      	str	r1, [r4, #20]
      JPEG_ConvertorParams.H_factor = 16;
 800c232:	4914      	ldr	r1, [pc, #80]	; (800c284 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800c234:	2010      	movs	r0, #16
 800c236:	61c8      	str	r0, [r1, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 800c238:	6208      	str	r0, [r1, #32]
 800c23a:	e7c1      	b.n	800c1c0 <JPEG_GetDecodeColorConvertFunc+0x40>
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 800c23c:	4815      	ldr	r0, [pc, #84]	; (800c294 <JPEG_GetDecodeColorConvertFunc+0x114>)
 800c23e:	6008      	str	r0, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 800c240:	f003 010f 	and.w	r1, r3, #15
 800c244:	480f      	ldr	r0, [pc, #60]	; (800c284 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800c246:	6141      	str	r1, [r0, #20]
      if(JPEG_ConvertorParams.LineOffset != 0)
 800c248:	b111      	cbz	r1, 800c250 <JPEG_GetDecodeColorConvertFunc+0xd0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800c24a:	f1c1 0110 	rsb	r1, r1, #16
 800c24e:	6141      	str	r1, [r0, #20]
      JPEG_ConvertorParams.H_factor = 16;
 800c250:	490c      	ldr	r1, [pc, #48]	; (800c284 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800c252:	2010      	movs	r0, #16
 800c254:	61c8      	str	r0, [r1, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800c256:	2008      	movs	r0, #8
 800c258:	6208      	str	r0, [r1, #32]
 800c25a:	e7b1      	b.n	800c1c0 <JPEG_GetDecodeColorConvertFunc+0x40>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 800c25c:	2f30      	cmp	r7, #48	; 0x30
 800c25e:	d10e      	bne.n	800c27e <JPEG_GetDecodeColorConvertFunc+0xfe>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 800c260:	480d      	ldr	r0, [pc, #52]	; (800c298 <JPEG_GetDecodeColorConvertFunc+0x118>)
 800c262:	6008      	str	r0, [r1, #0]
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800c264:	f003 0107 	and.w	r1, r3, #7
 800c268:	4806      	ldr	r0, [pc, #24]	; (800c284 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800c26a:	6141      	str	r1, [r0, #20]
    if(JPEG_ConvertorParams.LineOffset != 0)
 800c26c:	b111      	cbz	r1, 800c274 <JPEG_GetDecodeColorConvertFunc+0xf4>
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800c26e:	f1c1 0108 	rsb	r1, r1, #8
 800c272:	6141      	str	r1, [r0, #20]
    JPEG_ConvertorParams.H_factor = 8;
 800c274:	4903      	ldr	r1, [pc, #12]	; (800c284 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800c276:	2008      	movs	r0, #8
 800c278:	61c8      	str	r0, [r1, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 800c27a:	6208      	str	r0, [r1, #32]
 800c27c:	e7a0      	b.n	800c1c0 <JPEG_GetDecodeColorConvertFunc+0x40>
    return HAL_ERROR; /* Color space Not supported*/
 800c27e:	2001      	movs	r0, #1
 800c280:	e7b9      	b.n	800c1f6 <JPEG_GetDecodeColorConvertFunc+0x76>
 800c282:	bf00      	nop
 800c284:	20000ae4 	.word	0x20000ae4
 800c288:	0800bfe1 	.word	0x0800bfe1
 800c28c:	0800bef1 	.word	0x0800bef1
 800c290:	0800bc05 	.word	0x0800bc05
 800c294:	0800bdbd 	.word	0x0800bdbd
 800c298:	0800c061 	.word	0x0800c061

0800c29c <JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitColorTables(void)
{
 800c29c:	b508      	push	{r3, lr}
  JPEG_InitPreProcColorTables();
  JPEG_Init_MCU_LUT();
#endif

#if (USE_JPEG_DECODER == 1)
  JPEG_InitPostProcColorTables();
 800c29e:	f7ff ff41 	bl	800c124 <JPEG_InitPostProcColorTables>
#endif

}
 800c2a2:	bd08      	pop	{r3, pc}
 800c2a4:	0000      	movs	r0, r0
	...

0800c2a8 <FFT>:
 *  Created on: Dec 7, 2021
 *      Author: Patrick
 */
#include <fft.h>

short FFT(short int dir, long m, double* x,double* y) { // m == -1 --> FFT, m == 1 --> IFFT
 800c2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2ac:	ed2d 8b04 	vpush	{d8-d9}
 800c2b0:	4682      	mov	sl, r0
 800c2b2:	4689      	mov	r9, r1
 800c2b4:	4614      	mov	r4, r2
 800c2b6:	461d      	mov	r5, r3
	long n,i,i1,j,k,i2,l,l1,l2;
	double c1,c2,tx,ty,t1,t2,u1,u2,z;

	/* Calculate the number of points */
	n = 1;
	for (i=0;i<m;i++)
 800c2b8:	2300      	movs	r3, #0
	n = 1;
 800c2ba:	2601      	movs	r6, #1
	for (i=0;i<m;i++)
 800c2bc:	e001      	b.n	800c2c2 <FFT+0x1a>
	n *= 2;
 800c2be:	0076      	lsls	r6, r6, #1
	for (i=0;i<m;i++)
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	454b      	cmp	r3, r9
 800c2c4:	dbfb      	blt.n	800c2be <FFT+0x16>

	/* Do the bit reversal */
	i2 = n >> 1;
 800c2c6:	ea4f 0c66 	mov.w	ip, r6, asr #1
	j = 0;
 800c2ca:	2200      	movs	r2, #0
	for (i=0;i<n-1;i++) {
 800c2cc:	4611      	mov	r1, r2
 800c2ce:	e005      	b.n	800c2dc <FFT+0x34>
		 x[j] = tx;
		 y[j] = ty;
	  }
	  k = i2;
	  while (k <= j) {
		 j -= k;
 800c2d0:	1ad2      	subs	r2, r2, r3
		 k >>= 1;
 800c2d2:	105b      	asrs	r3, r3, #1
	  while (k <= j) {
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	dafb      	bge.n	800c2d0 <FFT+0x28>
	  }
	  j += k;
 800c2d8:	441a      	add	r2, r3
	for (i=0;i<n-1;i++) {
 800c2da:	3101      	adds	r1, #1
 800c2dc:	1e73      	subs	r3, r6, #1
 800c2de:	428b      	cmp	r3, r1
 800c2e0:	dd1b      	ble.n	800c31a <FFT+0x72>
	  if (i < j) {
 800c2e2:	4291      	cmp	r1, r2
 800c2e4:	da17      	bge.n	800c316 <FFT+0x6e>
		 tx = x[i];
 800c2e6:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 800c2ea:	ed93 6b00 	vldr	d6, [r3]
		 ty = y[i];
 800c2ee:	eb05 07c1 	add.w	r7, r5, r1, lsl #3
 800c2f2:	ed97 7b00 	vldr	d7, [r7]
		 x[i] = x[j];
 800c2f6:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 800c2fa:	ed90 5b00 	vldr	d5, [r0]
 800c2fe:	ed83 5b00 	vstr	d5, [r3]
		 y[i] = y[j];
 800c302:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 800c306:	ed93 5b00 	vldr	d5, [r3]
 800c30a:	ed87 5b00 	vstr	d5, [r7]
		 x[j] = tx;
 800c30e:	ed80 6b00 	vstr	d6, [r0]
		 y[j] = ty;
 800c312:	ed83 7b00 	vstr	d7, [r3]
	  k = i2;
 800c316:	4663      	mov	r3, ip
	  while (k <= j) {
 800c318:	e7dc      	b.n	800c2d4 <FFT+0x2c>
	}

	/* Compute the FFT */
	c1 = -1.0;
	c2 = 0.0;
 800c31a:	ed9f 9b4d 	vldr	d9, [pc, #308]	; 800c450 <FFT+0x1a8>
	c1 = -1.0;
 800c31e:	eebf 8b00 	vmov.f64	d8, #240	; 0xbf800000 -1.0
	l2 = 1;
 800c322:	f04f 0c01 	mov.w	ip, #1
	for (l=0;l<m;l++) {
 800c326:	f04f 0800 	mov.w	r8, #0
 800c32a:	e05e      	b.n	800c3ea <FFT+0x142>
	  l2 <<= 1;
	  u1 = 1.0;
	  u2 = 0.0;
	  for (j=0;j<l1;j++) {
		 for (i=j;i<n;i+=l2) {
			i1 = i + l1;
 800c32c:	eb03 020c 	add.w	r2, r3, ip
			t1 = u1 * x[i1] - u2 * y[i1];
 800c330:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
 800c334:	ed91 7b00 	vldr	d7, [r1]
 800c338:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800c33c:	ed92 5b00 	vldr	d5, [r2]
 800c340:	ee25 2b04 	vmul.f64	d2, d5, d4
 800c344:	ee17 2b03 	vnmls.f64	d2, d7, d3
			t2 = u1 * y[i1] + u2 * x[i1];
 800c348:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c34c:	ee05 7b03 	vmla.f64	d7, d5, d3
			x[i1] = x[i] - t1;
 800c350:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
 800c354:	ed90 5b00 	vldr	d5, [r0]
 800c358:	ee35 5b42 	vsub.f64	d5, d5, d2
 800c35c:	ed81 5b00 	vstr	d5, [r1]
			y[i1] = y[i] - t2;
 800c360:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 800c364:	ed91 5b00 	vldr	d5, [r1]
 800c368:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c36c:	ed82 5b00 	vstr	d5, [r2]
			x[i] += t1;
 800c370:	ed90 6b00 	vldr	d6, [r0]
 800c374:	ee36 6b02 	vadd.f64	d6, d6, d2
 800c378:	ed80 6b00 	vstr	d6, [r0]
			y[i] += t2;
 800c37c:	ed91 6b00 	vldr	d6, [r1]
 800c380:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c384:	ed81 7b00 	vstr	d7, [r1]
		 for (i=j;i<n;i+=l2) {
 800c388:	443b      	add	r3, r7
 800c38a:	429e      	cmp	r6, r3
 800c38c:	dcce      	bgt.n	800c32c <FFT+0x84>
		 }
		 z =  u1 * c1 - u2 * c2;
 800c38e:	ee29 7b04 	vmul.f64	d7, d9, d4
		 u2 = u1 * c2 + u2 * c1;
 800c392:	ee28 4b04 	vmul.f64	d4, d8, d4
 800c396:	ee09 4b03 	vmla.f64	d4, d9, d3
	  for (j=0;j<l1;j++) {
 800c39a:	f10e 0e01 	add.w	lr, lr, #1
		 u1 = z;
 800c39e:	ee18 7b03 	vnmls.f64	d7, d8, d3
 800c3a2:	eeb0 3b47 	vmov.f64	d3, d7
	  for (j=0;j<l1;j++) {
 800c3a6:	45e6      	cmp	lr, ip
 800c3a8:	da01      	bge.n	800c3ae <FFT+0x106>
		 for (i=j;i<n;i+=l2) {
 800c3aa:	4673      	mov	r3, lr
 800c3ac:	e7ed      	b.n	800c38a <FFT+0xe2>
	  }
	  c2 = sqrt((1.0 - c1) / 2.0);
 800c3ae:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c3b2:	ee37 7b48 	vsub.f64	d7, d7, d8
 800c3b6:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 800c3ba:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c3be:	f002 fd3f 	bl	800ee40 <sqrt>
 800c3c2:	eeb0 9b40 	vmov.f64	d9, d0
	  if (dir == 1)
 800c3c6:	f1ba 0f01 	cmp.w	sl, #1
 800c3ca:	d019      	beq.n	800c400 <FFT+0x158>
		 c2 = -c2;
	  c1 = sqrt((1.0 + c1) / 2.0);
 800c3cc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c3d0:	ee38 8b07 	vadd.f64	d8, d8, d7
 800c3d4:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 800c3d8:	ee28 0b00 	vmul.f64	d0, d8, d0
 800c3dc:	f002 fd30 	bl	800ee40 <sqrt>
 800c3e0:	eeb0 8b40 	vmov.f64	d8, d0
	for (l=0;l<m;l++) {
 800c3e4:	f108 0801 	add.w	r8, r8, #1
	  l2 <<= 1;
 800c3e8:	46bc      	mov	ip, r7
	for (l=0;l<m;l++) {
 800c3ea:	45c8      	cmp	r8, r9
 800c3ec:	da0b      	bge.n	800c406 <FFT+0x15e>
	  l2 <<= 1;
 800c3ee:	ea4f 074c 	mov.w	r7, ip, lsl #1
	  u2 = 0.0;
 800c3f2:	ed9f 4b17 	vldr	d4, [pc, #92]	; 800c450 <FFT+0x1a8>
	  u1 = 1.0;
 800c3f6:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
	  for (j=0;j<l1;j++) {
 800c3fa:	f04f 0e00 	mov.w	lr, #0
 800c3fe:	e7d2      	b.n	800c3a6 <FFT+0xfe>
		 c2 = -c2;
 800c400:	eeb1 9b40 	vneg.f64	d9, d0
 800c404:	e7e2      	b.n	800c3cc <FFT+0x124>
	}

	/* Scaling for forward transform */
	if (dir == 1) {
 800c406:	f1ba 0f01 	cmp.w	sl, #1
 800c40a:	d01c      	beq.n	800c446 <FFT+0x19e>
		 y[i] /= n;
	  }
	}

	return(1);
}
 800c40c:	2001      	movs	r0, #1
 800c40e:	ecbd 8b04 	vpop	{d8-d9}
 800c412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 x[i] /= n;
 800c416:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 800c41a:	ee07 6a90 	vmov	s15, r6
 800c41e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c422:	ed92 5b00 	vldr	d5, [r2]
 800c426:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800c42a:	ed82 6b00 	vstr	d6, [r2]
		 y[i] /= n;
 800c42e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800c432:	ed92 5b00 	vldr	d5, [r2]
 800c436:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800c43a:	ed82 6b00 	vstr	d6, [r2]
	  for (i=0;i<n;i++) {
 800c43e:	3301      	adds	r3, #1
 800c440:	429e      	cmp	r6, r3
 800c442:	dce8      	bgt.n	800c416 <FFT+0x16e>
 800c444:	e7e2      	b.n	800c40c <FFT+0x164>
 800c446:	2300      	movs	r3, #0
 800c448:	e7fa      	b.n	800c440 <FFT+0x198>
 800c44a:	bf00      	nop
 800c44c:	f3af 8000 	nop.w
	...

0800c458 <FX1>:
//
//
// -- Functions -----
//
void FX1(int16_t* pBufferFilt, int16_t* pBuffer, uint16_t Buffer_Size) {
	for (int i = 1; i < Buffer_Size; i++) {
 800c458:	2301      	movs	r3, #1
 800c45a:	429a      	cmp	r2, r3
 800c45c:	dd28      	ble.n	800c4b0 <FX1+0x58>
void FX1(int16_t* pBufferFilt, int16_t* pBuffer, uint16_t Buffer_Size) {
 800c45e:	b410      	push	{r4}
		//Lowpass Filter
		pBufferFilt[i] = pBufferFilt[i-1]*alpha_fx1 + (pBuffer[i])*(1-alpha_fx1);
 800c460:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800c464:	441c      	add	r4, r3
 800c466:	f930 4014 	ldrsh.w	r4, [r0, r4, lsl #1]
 800c46a:	ee07 4a90 	vmov	s15, r4
 800c46e:	4c11      	ldr	r4, [pc, #68]	; (800c4b4 <FX1+0x5c>)
 800c470:	ed94 6a00 	vldr	s12, [r4]
 800c474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c478:	ee27 7a86 	vmul.f32	s14, s15, s12
 800c47c:	f931 4013 	ldrsh.w	r4, [r1, r3, lsl #1]
 800c480:	ee07 4a90 	vmov	s15, r4
 800c484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c488:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800c48c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c490:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c494:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c49c:	ee17 4a90 	vmov	r4, s15
 800c4a0:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
	for (int i = 1; i < Buffer_Size; i++) {
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	dcda      	bgt.n	800c460 <FX1+0x8>
	}
}
 800c4aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4ae:	4770      	bx	lr
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	20000188 	.word	0x20000188

0800c4b8 <FX2>:

void FX2(int16_t* pBufferFilt, int16_t* pBuffer, uint16_t Buffer_Size) {
	for (int i = 1; i < Buffer_Size; i++) {
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	dd28      	ble.n	800c510 <FX2+0x58>
void FX2(int16_t* pBufferFilt, int16_t* pBuffer, uint16_t Buffer_Size) {
 800c4be:	b410      	push	{r4}
		//Highpass Filter
		pBufferFilt[i] = (pBufferFilt[i-1])*alpha_fx2 + (pBuffer[i])*(1-alpha_fx2);
 800c4c0:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800c4c4:	441c      	add	r4, r3
 800c4c6:	f930 4014 	ldrsh.w	r4, [r0, r4, lsl #1]
 800c4ca:	ee07 4a90 	vmov	s15, r4
 800c4ce:	4c11      	ldr	r4, [pc, #68]	; (800c514 <FX2+0x5c>)
 800c4d0:	ed94 6a01 	vldr	s12, [r4, #4]
 800c4d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4d8:	ee27 7a86 	vmul.f32	s14, s15, s12
 800c4dc:	f931 4013 	ldrsh.w	r4, [r1, r3, lsl #1]
 800c4e0:	ee07 4a90 	vmov	s15, r4
 800c4e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4e8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800c4ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c4f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4fc:	ee17 4a90 	vmov	r4, s15
 800c500:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
	for (int i = 1; i < Buffer_Size; i++) {
 800c504:	3301      	adds	r3, #1
 800c506:	429a      	cmp	r2, r3
 800c508:	dcda      	bgt.n	800c4c0 <FX2+0x8>

	}
}
 800c50a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c50e:	4770      	bx	lr
 800c510:	4770      	bx	lr
 800c512:	bf00      	nop
 800c514:	20000188 	.word	0x20000188

0800c518 <FX3>:

void FX3(int16_t* pBufferFilt, int16_t* pBuffer, uint16_t Buffer_Size) {
	//Bandpass Filter
	for (int i = 1; i < Buffer_Size; i++) {
 800c518:	2301      	movs	r3, #1
 800c51a:	429a      	cmp	r2, r3
 800c51c:	dd34      	ble.n	800c588 <FX3+0x70>
void FX3(int16_t* pBufferFilt, int16_t* pBuffer, uint16_t Buffer_Size) {
 800c51e:	b410      	push	{r4}
		pBufferFilt[i] = ((pBufferFilt[i-1])*alpha_fx2 + (pBuffer[i])*(1-alpha_fx2)) - (pBufferFilt[i-1]*alpha_fx1 + (pBuffer[i])*(1-alpha_fx1));
 800c520:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800c524:	441c      	add	r4, r3
 800c526:	f930 4014 	ldrsh.w	r4, [r0, r4, lsl #1]
 800c52a:	ee07 4a90 	vmov	s15, r4
 800c52e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c532:	4c16      	ldr	r4, [pc, #88]	; (800c58c <FX3+0x74>)
 800c534:	ed94 6a01 	vldr	s12, [r4, #4]
 800c538:	ee27 7a86 	vmul.f32	s14, s15, s12
 800c53c:	f931 c013 	ldrsh.w	ip, [r1, r3, lsl #1]
 800c540:	ee06 ca90 	vmov	s13, ip
 800c544:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c548:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c54c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800c550:	ee26 6a86 	vmul.f32	s12, s13, s12
 800c554:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c558:	ed94 6a00 	vldr	s12, [r4]
 800c55c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c560:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800c564:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800c568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c56c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c574:	ee17 4a90 	vmov	r4, s15
 800c578:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
	for (int i = 1; i < Buffer_Size; i++) {
 800c57c:	3301      	adds	r3, #1
 800c57e:	429a      	cmp	r2, r3
 800c580:	dcce      	bgt.n	800c520 <FX3+0x8>
	}
}
 800c582:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c586:	4770      	bx	lr
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	20000188 	.word	0x20000188

0800c590 <FX4>:

void FX4(int16_t* pBufferFilt, int16_t* pBuffer, uint16_t Buffer_Size) {
	for (int i = 0; i < Buffer_Size; i++) {
 800c590:	2300      	movs	r3, #0
 800c592:	429a      	cmp	r2, r3
 800c594:	dd04      	ble.n	800c5a0 <FX4+0x10>
		pBufferFilt++;
		*pBufferFilt = 0;
 800c596:	2100      	movs	r1, #0
 800c598:	f820 1f02 	strh.w	r1, [r0, #2]!
	for (int i = 0; i < Buffer_Size; i++) {
 800c59c:	3301      	adds	r3, #1
 800c59e:	e7f8      	b.n	800c592 <FX4+0x2>
	}
}
 800c5a0:	4770      	bx	lr

0800c5a2 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 800c5a2:	b500      	push	{lr}
 800c5a4:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c5aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c5ae:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c5b0:	2302      	movs	r3, #2
 800c5b2:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c5b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800c5b8:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 800c5ba:	2219      	movs	r2, #25
 800c5bc:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 800c5be:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800c5c2:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c5c4:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800c5c6:	2309      	movs	r3, #9
 800c5c8:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 800c5ca:	2307      	movs	r3, #7
 800c5cc:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800c5ce:	4668      	mov	r0, sp
 800c5d0:	f7fb fc0a 	bl	8007de8 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 800c5d4:	b100      	cbz	r0, 800c5d8 <SystemClock_Config+0x36>
    while(1) { ; }
 800c5d6:	e7fe      	b.n	800c5d6 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800c5d8:	f7fb fbc8 	bl	8007d6c <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800c5dc:	b100      	cbz	r0, 800c5e0 <SystemClock_Config+0x3e>
    while(1) { ; }
 800c5de:	e7fe      	b.n	800c5de <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800c5e0:	230f      	movs	r3, #15
 800c5e2:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c5e4:	2302      	movs	r3, #2
 800c5e6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c5ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c5f0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c5f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5f6:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800c5f8:	2107      	movs	r1, #7
 800c5fa:	a80d      	add	r0, sp, #52	; 0x34
 800c5fc:	f7fb fe4c 	bl	8008298 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 800c600:	b100      	cbz	r0, 800c604 <SystemClock_Config+0x62>
    while(1) { ; }
 800c602:	e7fe      	b.n	800c602 <SystemClock_Config+0x60>
  }
}
 800c604:	b013      	add	sp, #76	; 0x4c
 800c606:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c60c <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 800c60c:	b410      	push	{r4}
  __ASM volatile ("dsb 0xF":::"memory");
 800c60e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c612:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800c616:	4b1a      	ldr	r3, [pc, #104]	; (800c680 <CPU_CACHE_Enable+0x74>)
 800c618:	2100      	movs	r1, #0
 800c61a:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800c61e:	695a      	ldr	r2, [r3, #20]
 800c620:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c624:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c626:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c62a:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 800c62e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800c632:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800c636:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800c63a:	f3c0 324e 	ubfx	r2, r0, #13, #15
 800c63e:	e000      	b.n	800c642 <CPU_CACHE_Enable+0x36>
    } while(sets--);
 800c640:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800c642:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800c646:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800c64a:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 800c64e:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 800c652:	4c0b      	ldr	r4, [pc, #44]	; (800c680 <CPU_CACHE_Enable+0x74>)
 800c654:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
 800c658:	460b      	mov	r3, r1
 800c65a:	3901      	subs	r1, #1
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d1f2      	bne.n	800c646 <CPU_CACHE_Enable+0x3a>
    } while(sets--);
 800c660:	1e53      	subs	r3, r2, #1
 800c662:	2a00      	cmp	r2, #0
 800c664:	d1ec      	bne.n	800c640 <CPU_CACHE_Enable+0x34>
 800c666:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800c66a:	6963      	ldr	r3, [r4, #20]
 800c66c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c670:	6163      	str	r3, [r4, #20]
 800c672:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c676:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800c67a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c67e:	4770      	bx	lr
 800c680:	e000ed00 	.word	0xe000ed00

0800c684 <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 800c684:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 800c686:	f7ff ffc1 	bl	800c60c <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 800c68a:	f7f8 fc75 	bl	8004f78 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 800c68e:	f7ff ff88 	bl	800c5a2 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 800c692:	4a04      	ldr	r2, [pc, #16]	; (800c6a4 <Sys_Init+0x20>)
 800c694:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800c698:	4803      	ldr	r0, [pc, #12]	; (800c6a8 <Sys_Init+0x24>)
 800c69a:	f000 f9cf 	bl	800ca3c <initUart>

	/* Initialization for setting up JPEG Color Conversion */
	JPEG_InitColorTables();
 800c69e:	f7ff fdfd 	bl	800c29c <JPEG_InitColorTables>

}
 800c6a2:	bd08      	pop	{r3, pc}
 800c6a4:	40011000 	.word	0x40011000
 800c6a8:	20006178 	.word	0x20006178

0800c6ac <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 800c6ac:	b508      	push	{r3, lr}
  HAL_IncTick();
 800c6ae:	f7f8 fc6f 	bl	8004f90 <HAL_IncTick>
}
 800c6b2:	bd08      	pop	{r3, pc}

0800c6b4 <main>:

//
//
// -- Main Function -----
//
int main(void) {
 800c6b4:	b530      	push	{r4, r5, lr}
 800c6b6:	b087      	sub	sp, #28
	/* Initialization */
	Sys_Init(); // Initialize STM32 System
 800c6b8:	f7ff ffe4 	bl	800c684 <Sys_Init>
	//Timer_Init(); // Initialize Program Timer
	//UI_Init(); // Initialize SD Card, LCD, JPEG Peripheral, and Pushbutton
	//Line_Audio_Init(); // Initialize Audio Functionality
	USB_Audio_Init();
 800c6bc:	f001 f87c 	bl	800d7b8 <USB_Audio_Init>
	usb_state = USB_STATE_ON;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	4a6c      	ldr	r2, [pc, #432]	; (800c874 <main+0x1c0>)
 800c6c4:	6013      	str	r3, [r2, #0]
	ui_data.usb_selection_state = USB_STATE_ON;
 800c6c6:	4a6c      	ldr	r2, [pc, #432]	; (800c878 <main+0x1c4>)
 800c6c8:	6053      	str	r3, [r2, #4]
 800c6ca:	e096      	b.n	800c7fa <main+0x146>
	/* Main Loop */
	while (1) {
		/* Handle UI Updates */
		if (TIM_TICK == 1) {
			/* Time Domain Visualization */
			if (sv_state == SV_STATE_SCOPE) {
 800c6cc:	4b69      	ldr	r3, [pc, #420]	; (800c874 <main+0x1c0>)
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	b953      	cbnz	r3, 800c6e8 <main+0x34>
				for (int i = 0; i < RECORD_BUFFER_SIZE; i++) {
					audio_ft_out_buffer[i] = (int16_t)audio_ft_buffer_real[i]/2;
				}
				ui_data = UI_Handler((int16_t*)&audio_ft_out_buffer, fx_state, usb_state, sv_state);
			}
			fx_state = ui_data.fx_selection_state;
 800c6d2:	4a69      	ldr	r2, [pc, #420]	; (800c878 <main+0x1c4>)
 800c6d4:	6811      	ldr	r1, [r2, #0]
 800c6d6:	4b67      	ldr	r3, [pc, #412]	; (800c874 <main+0x1c0>)
 800c6d8:	60d9      	str	r1, [r3, #12]
			usb_state = ui_data.usb_selection_state;
 800c6da:	6851      	ldr	r1, [r2, #4]
 800c6dc:	6019      	str	r1, [r3, #0]
			sv_state = ui_data.sv_selection_state;
 800c6de:	6892      	ldr	r2, [r2, #8]
 800c6e0:	609a      	str	r2, [r3, #8]
			TIM_TICK = 0;
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	605a      	str	r2, [r3, #4]
 800c6e6:	e08d      	b.n	800c804 <main+0x150>
				for (int i = 0; i < RECORD_BUFFER_SIZE; i++) {
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6ee:	da14      	bge.n	800c71a <main+0x66>
					audio_ft_buffer_real[i] = (double)audio_in_buffer[i];
 800c6f0:	4a62      	ldr	r2, [pc, #392]	; (800c87c <main+0x1c8>)
 800c6f2:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800c6f6:	ee07 2a10 	vmov	s14, r2
 800c6fa:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800c6fe:	4a60      	ldr	r2, [pc, #384]	; (800c880 <main+0x1cc>)
 800c700:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c704:	ed82 7b00 	vstr	d7, [r2]
					audio_ft_buffer_imag[i] = 0;
 800c708:	4a5e      	ldr	r2, [pc, #376]	; (800c884 <main+0x1d0>)
 800c70a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c70e:	2000      	movs	r0, #0
 800c710:	2100      	movs	r1, #0
 800c712:	e9c2 0100 	strd	r0, r1, [r2]
				for (int i = 0; i < RECORD_BUFFER_SIZE; i++) {
 800c716:	3301      	adds	r3, #1
 800c718:	e7e7      	b.n	800c6ea <main+0x36>
				FFT(-1, 12, (double*)&audio_ft_buffer_real, (double*)&audio_ft_buffer_imag);
 800c71a:	4b5a      	ldr	r3, [pc, #360]	; (800c884 <main+0x1d0>)
 800c71c:	4a58      	ldr	r2, [pc, #352]	; (800c880 <main+0x1cc>)
 800c71e:	210c      	movs	r1, #12
 800c720:	f04f 30ff 	mov.w	r0, #4294967295
 800c724:	f7ff fdc0 	bl	800c2a8 <FFT>
				for (int i = 0; i < RECORD_BUFFER_SIZE; i++) {
 800c728:	2200      	movs	r2, #0
 800c72a:	e004      	b.n	800c736 <main+0x82>
					audio_ft_out_buffer[i] = (int16_t)audio_ft_buffer_real[i]/2;
 800c72c:	1049      	asrs	r1, r1, #1
 800c72e:	4b56      	ldr	r3, [pc, #344]	; (800c888 <main+0x1d4>)
 800c730:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				for (int i = 0; i < RECORD_BUFFER_SIZE; i++) {
 800c734:	3201      	adds	r2, #1
 800c736:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800c73a:	da0e      	bge.n	800c75a <main+0xa6>
					audio_ft_out_buffer[i] = (int16_t)audio_ft_buffer_real[i]/2;
 800c73c:	4b50      	ldr	r3, [pc, #320]	; (800c880 <main+0x1cc>)
 800c73e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c742:	ed93 7b00 	vldr	d7, [r3]
 800c746:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c74a:	ee17 3a10 	vmov	r3, s14
 800c74e:	b21b      	sxth	r3, r3
 800c750:	4619      	mov	r1, r3
 800c752:	2b00      	cmp	r3, #0
 800c754:	daea      	bge.n	800c72c <main+0x78>
 800c756:	1c59      	adds	r1, r3, #1
 800c758:	e7e8      	b.n	800c72c <main+0x78>
				ui_data = UI_Handler((int16_t*)&audio_ft_out_buffer, fx_state, usb_state, sv_state);
 800c75a:	4d47      	ldr	r5, [pc, #284]	; (800c878 <main+0x1c4>)
 800c75c:	ac02      	add	r4, sp, #8
 800c75e:	4a45      	ldr	r2, [pc, #276]	; (800c874 <main+0x1c0>)
 800c760:	8913      	ldrh	r3, [r2, #8]
 800c762:	9300      	str	r3, [sp, #0]
 800c764:	8813      	ldrh	r3, [r2, #0]
 800c766:	8992      	ldrh	r2, [r2, #12]
 800c768:	4947      	ldr	r1, [pc, #284]	; (800c888 <main+0x1d4>)
 800c76a:	4620      	mov	r0, r4
 800c76c:	f000 ff52 	bl	800d614 <UI_Handler>
 800c770:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c774:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c778:	e7ab      	b.n	800c6d2 <main+0x1e>
		{
			/* Copy half of the record buffer to the playback buffer */
			if (audio_line_in_buffer_state == BUFFER_OFFSET_HALF)
			{
				/* Select Sound FX */
				if (fx_state == FX_STATE_1) {
 800c77a:	4b3e      	ldr	r3, [pc, #248]	; (800c874 <main+0x1c0>)
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d00c      	beq.n	800c79c <main+0xe8>
					FX1((int16_t*)&audio_out_buffer, (int16_t*)&audio_in_buffer, RECORD_BUFFER_SIZE);
				} else if (fx_state == FX_STATE_2) {
 800c782:	2b02      	cmp	r3, #2
 800c784:	d011      	beq.n	800c7aa <main+0xf6>
					FX2((int16_t*)&audio_out_buffer, (int16_t*)&audio_in_buffer, RECORD_BUFFER_SIZE);
				} else if (fx_state == FX_STATE_3) {
 800c786:	2b03      	cmp	r3, #3
 800c788:	d016      	beq.n	800c7b8 <main+0x104>
					FX3((int16_t*)&audio_out_buffer, (int16_t*)&audio_in_buffer, RECORD_BUFFER_SIZE);
				} else if (fx_state == FX_STATE_4) {
 800c78a:	2b04      	cmp	r3, #4
 800c78c:	d01b      	beq.n	800c7c6 <main+0x112>
					FX4((int16_t*)&audio_out_buffer, (int16_t*)&audio_in_buffer, RECORD_BUFFER_SIZE);
				} else { // No FX
					memcpy((int16_t*)&audio_out_buffer[0], (int16_t*)&audio_in_buffer[0], RECORD_BUFFER_SIZE);
 800c78e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c792:	493a      	ldr	r1, [pc, #232]	; (800c87c <main+0x1c8>)
 800c794:	483d      	ldr	r0, [pc, #244]	; (800c88c <main+0x1d8>)
 800c796:	f002 f82f 	bl	800e7f8 <memcpy>
 800c79a:	e021      	b.n	800c7e0 <main+0x12c>
					FX1((int16_t*)&audio_out_buffer, (int16_t*)&audio_in_buffer, RECORD_BUFFER_SIZE);
 800c79c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c7a0:	4936      	ldr	r1, [pc, #216]	; (800c87c <main+0x1c8>)
 800c7a2:	483a      	ldr	r0, [pc, #232]	; (800c88c <main+0x1d8>)
 800c7a4:	f7ff fe58 	bl	800c458 <FX1>
 800c7a8:	e01a      	b.n	800c7e0 <main+0x12c>
					FX2((int16_t*)&audio_out_buffer, (int16_t*)&audio_in_buffer, RECORD_BUFFER_SIZE);
 800c7aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c7ae:	4933      	ldr	r1, [pc, #204]	; (800c87c <main+0x1c8>)
 800c7b0:	4836      	ldr	r0, [pc, #216]	; (800c88c <main+0x1d8>)
 800c7b2:	f7ff fe81 	bl	800c4b8 <FX2>
 800c7b6:	e013      	b.n	800c7e0 <main+0x12c>
					FX3((int16_t*)&audio_out_buffer, (int16_t*)&audio_in_buffer, RECORD_BUFFER_SIZE);
 800c7b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c7bc:	492f      	ldr	r1, [pc, #188]	; (800c87c <main+0x1c8>)
 800c7be:	4833      	ldr	r0, [pc, #204]	; (800c88c <main+0x1d8>)
 800c7c0:	f7ff feaa 	bl	800c518 <FX3>
 800c7c4:	e00c      	b.n	800c7e0 <main+0x12c>
					FX4((int16_t*)&audio_out_buffer, (int16_t*)&audio_in_buffer, RECORD_BUFFER_SIZE);
 800c7c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c7ca:	492c      	ldr	r1, [pc, #176]	; (800c87c <main+0x1c8>)
 800c7cc:	482f      	ldr	r0, [pc, #188]	; (800c88c <main+0x1d8>)
 800c7ce:	f7ff fedf 	bl	800c590 <FX4>
 800c7d2:	e005      	b.n	800c7e0 <main+0x12c>
			}
			else
			{
				/* Select Sound FX */
				if (fx_state == FX_STATE_1) {
					FX1((int16_t*)&audio_out_buffer[RECORD_BUFFER_SIZE/2],
 800c7d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c7d8:	492d      	ldr	r1, [pc, #180]	; (800c890 <main+0x1dc>)
 800c7da:	482e      	ldr	r0, [pc, #184]	; (800c894 <main+0x1e0>)
 800c7dc:	f7ff fe3c 	bl	800c458 <FX1>
					memcpy((int16_t*)&audio_out_buffer[RECORD_BUFFER_SIZE/2],
						   (int16_t*)&audio_in_buffer[RECORD_BUFFER_SIZE/2], RECORD_BUFFER_SIZE);
				}
			}
			/* Wait for next data */
			audio_line_in_buffer_state = BUFFER_OFFSET_NONE;
 800c7e0:	4b2d      	ldr	r3, [pc, #180]	; (800c898 <main+0x1e4>)
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	601a      	str	r2, [r3, #0]
		}

		if(audio_usb_in_buffer_state != BUFFER_OFFSET_NONE){
 800c7e6:	4b2d      	ldr	r3, [pc, #180]	; (800c89c <main+0x1e8>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d138      	bne.n	800c860 <main+0x1ac>
			printf("we got some data\r\n");
			fflush(stdout);
		}

		/* Reset audio flag */
		if (audio_line_out_buffer_state)
 800c7ee:	4b2c      	ldr	r3, [pc, #176]	; (800c8a0 <main+0x1ec>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	b113      	cbz	r3, 800c7fa <main+0x146>
		{
			audio_line_out_buffer_state = 0;
 800c7f4:	4b2a      	ldr	r3, [pc, #168]	; (800c8a0 <main+0x1ec>)
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	601a      	str	r2, [r3, #0]
		if (TIM_TICK == 1) {
 800c7fa:	4b1e      	ldr	r3, [pc, #120]	; (800c874 <main+0x1c0>)
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	f43f af64 	beq.w	800c6cc <main+0x18>
		if (audio_line_in_buffer_state != BUFFER_OFFSET_NONE)
 800c804:	4b24      	ldr	r3, [pc, #144]	; (800c898 <main+0x1e4>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d0ec      	beq.n	800c7e6 <main+0x132>
			if (audio_line_in_buffer_state == BUFFER_OFFSET_HALF)
 800c80c:	4b22      	ldr	r3, [pc, #136]	; (800c898 <main+0x1e4>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d0b2      	beq.n	800c77a <main+0xc6>
				if (fx_state == FX_STATE_1) {
 800c814:	4b17      	ldr	r3, [pc, #92]	; (800c874 <main+0x1c0>)
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d0db      	beq.n	800c7d4 <main+0x120>
				} else if (fx_state == FX_STATE_2) {
 800c81c:	2b02      	cmp	r3, #2
 800c81e:	d00a      	beq.n	800c836 <main+0x182>
				} else if (fx_state == FX_STATE_3) {
 800c820:	2b03      	cmp	r3, #3
 800c822:	d00f      	beq.n	800c844 <main+0x190>
				} else if (fx_state == FX_STATE_4) {
 800c824:	2b04      	cmp	r3, #4
 800c826:	d014      	beq.n	800c852 <main+0x19e>
					memcpy((int16_t*)&audio_out_buffer[RECORD_BUFFER_SIZE/2],
 800c828:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c82c:	4918      	ldr	r1, [pc, #96]	; (800c890 <main+0x1dc>)
 800c82e:	4819      	ldr	r0, [pc, #100]	; (800c894 <main+0x1e0>)
 800c830:	f001 ffe2 	bl	800e7f8 <memcpy>
 800c834:	e7d4      	b.n	800c7e0 <main+0x12c>
					FX2((int16_t*)&audio_out_buffer[RECORD_BUFFER_SIZE/2],
 800c836:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c83a:	4915      	ldr	r1, [pc, #84]	; (800c890 <main+0x1dc>)
 800c83c:	4815      	ldr	r0, [pc, #84]	; (800c894 <main+0x1e0>)
 800c83e:	f7ff fe3b 	bl	800c4b8 <FX2>
 800c842:	e7cd      	b.n	800c7e0 <main+0x12c>
					FX3((int16_t*)&audio_out_buffer[RECORD_BUFFER_SIZE/2],
 800c844:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c848:	4911      	ldr	r1, [pc, #68]	; (800c890 <main+0x1dc>)
 800c84a:	4812      	ldr	r0, [pc, #72]	; (800c894 <main+0x1e0>)
 800c84c:	f7ff fe64 	bl	800c518 <FX3>
 800c850:	e7c6      	b.n	800c7e0 <main+0x12c>
					FX4((int16_t*)&audio_out_buffer[RECORD_BUFFER_SIZE/2],
 800c852:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c856:	490e      	ldr	r1, [pc, #56]	; (800c890 <main+0x1dc>)
 800c858:	480e      	ldr	r0, [pc, #56]	; (800c894 <main+0x1e0>)
 800c85a:	f7ff fe99 	bl	800c590 <FX4>
 800c85e:	e7bf      	b.n	800c7e0 <main+0x12c>
			printf("we got some data\r\n");
 800c860:	4810      	ldr	r0, [pc, #64]	; (800c8a4 <main+0x1f0>)
 800c862:	f002 f8f7 	bl	800ea54 <puts>
			fflush(stdout);
 800c866:	4b10      	ldr	r3, [pc, #64]	; (800c8a8 <main+0x1f4>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	6898      	ldr	r0, [r3, #8]
 800c86c:	f001 fe84 	bl	800e578 <fflush>
 800c870:	e7bd      	b.n	800c7ee <main+0x13a>
 800c872:	bf00      	nop
 800c874:	20001b24 	.word	0x20001b24
 800c878:	200061e8 	.word	0x200061e8
 800c87c:	20004178 	.word	0x20004178
 800c880:	20010518 	.word	0x20010518
 800c884:	200061f8 	.word	0x200061f8
 800c888:	2000e518 	.word	0x2000e518
 800c88c:	20002178 	.word	0x20002178
 800c890:	20005178 	.word	0x20005178
 800c894:	20003178 	.word	0x20003178
 800c898:	2000e4d0 	.word	0x2000e4d0
 800c89c:	2000e4cc 	.word	0x2000e4cc
 800c8a0:	2000e4c8 	.word	0x2000e4c8
 800c8a4:	0801325c 	.word	0x0801325c
 800c8a8:	20000208 	.word	0x20000208

0800c8ac <TIM7_IRQHandler>:
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
	HAL_TIM_Base_Init(&htim);
	HAL_TIM_Base_Start_IT(&htim);
}

void TIM7_IRQHandler(void) {
 800c8ac:	b508      	push	{r3, lr}
	HAL_TIM_IRQHandler(&htim);
 800c8ae:	4802      	ldr	r0, [pc, #8]	; (800c8b8 <TIM7_IRQHandler+0xc>)
 800c8b0:	f7fc fea8 	bl	8009604 <HAL_TIM_IRQHandler>
}
 800c8b4:	bd08      	pop	{r3, pc}
 800c8b6:	bf00      	nop
 800c8b8:	2000e4d8 	.word	0x2000e4d8

0800c8bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim->Instance == TIM7) {
 800c8bc:	6802      	ldr	r2, [r0, #0]
 800c8be:	4b04      	ldr	r3, [pc, #16]	; (800c8d0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d000      	beq.n	800c8c6 <HAL_TIM_PeriodElapsedCallback+0xa>
		TIM_TICK = 1;
	}
}
 800c8c4:	4770      	bx	lr
		TIM_TICK = 1;
 800c8c6:	4b03      	ldr	r3, [pc, #12]	; (800c8d4 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	605a      	str	r2, [r3, #4]
}
 800c8cc:	e7fa      	b.n	800c8c4 <HAL_TIM_PeriodElapsedCallback+0x8>
 800c8ce:	bf00      	nop
 800c8d0:	40001400 	.word	0x40001400
 800c8d4:	20001b24 	.word	0x20001b24

0800c8d8 <DMA2_Stream4_IRQHandler>:
/******************************************************************************/


/* ISR Handlers */
void DMA2_Stream4_IRQHandler(void)
{
 800c8d8:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800c8da:	4b02      	ldr	r3, [pc, #8]	; (800c8e4 <DMA2_Stream4_IRQHandler+0xc>)
 800c8dc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800c8de:	f7f9 f845 	bl	800596c <HAL_DMA_IRQHandler>
}
 800c8e2:	bd08      	pop	{r3, pc}
 800c8e4:	20001bb0 	.word	0x20001bb0

0800c8e8 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800c8e8:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800c8ea:	4b02      	ldr	r3, [pc, #8]	; (800c8f4 <DMA2_Stream1_IRQHandler+0xc>)
 800c8ec:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800c8ee:	f7f9 f83d 	bl	800596c <HAL_DMA_IRQHandler>
}
 800c8f2:	bd08      	pop	{r3, pc}
 800c8f4:	20001c94 	.word	0x20001c94

0800c8f8 <OTG_HS_IRQHandler>:
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
#endif
{
 800c8f8:	b508      	push	{r3, lr}
  HAL_PCD_IRQHandler(&hpcd);
 800c8fa:	4802      	ldr	r0, [pc, #8]	; (800c904 <OTG_HS_IRQHandler+0xc>)
 800c8fc:	f7fa fdf4 	bl	80074e8 <HAL_PCD_IRQHandler>
}
 800c900:	bd08      	pop	{r3, pc}
 800c902:	bf00      	nop
 800c904:	20058b7c 	.word	0x20058b7c

0800c908 <DMA2_Stream6_IRQHandler>:
  * @brief This function handles DMA2 Stream 5 interrupt request.
  * @param None
  * @retval None
  */
void DMA2_Stream6_IRQHandler(void)
{
 800c908:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800c90a:	4b02      	ldr	r3, [pc, #8]	; (800c914 <DMA2_Stream6_IRQHandler+0xc>)
 800c90c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800c90e:	f7f9 f82d 	bl	800596c <HAL_DMA_IRQHandler>
}
 800c912:	bd08      	pop	{r3, pc}
 800c914:	20001c94 	.word	0x20001c94

0800c918 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c918:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c91a:	4a0f      	ldr	r2, [pc, #60]	; (800c958 <SystemInit+0x40>)
 800c91c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800c920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c928:	4b0c      	ldr	r3, [pc, #48]	; (800c95c <SystemInit+0x44>)
 800c92a:	6819      	ldr	r1, [r3, #0]
 800c92c:	f041 0101 	orr.w	r1, r1, #1
 800c930:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c932:	2000      	movs	r0, #0
 800c934:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c936:	681c      	ldr	r4, [r3, #0]
 800c938:	4909      	ldr	r1, [pc, #36]	; (800c960 <SystemInit+0x48>)
 800c93a:	4021      	ands	r1, r4
 800c93c:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c93e:	4909      	ldr	r1, [pc, #36]	; (800c964 <SystemInit+0x4c>)
 800c940:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c942:	6819      	ldr	r1, [r3, #0]
 800c944:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800c948:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c94a:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c94c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c950:	6093      	str	r3, [r2, #8]
#endif
}
 800c952:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c956:	4770      	bx	lr
 800c958:	e000ed00 	.word	0xe000ed00
 800c95c:	40023800 	.word	0x40023800
 800c960:	fef6ffff 	.word	0xfef6ffff
 800c964:	24003010 	.word	0x24003010

0800c968 <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 800c968:	b530      	push	{r4, r5, lr}
 800c96a:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 800c96c:	6803      	ldr	r3, [r0, #0]
 800c96e:	4a2e      	ldr	r2, [pc, #184]	; (800ca28 <HAL_UART_MspInit+0xc0>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d004      	beq.n	800c97e <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 800c974:	4a2d      	ldr	r2, [pc, #180]	; (800ca2c <HAL_UART_MspInit+0xc4>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d02c      	beq.n	800c9d4 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 800c97a:	b00b      	add	sp, #44	; 0x2c
 800c97c:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 800c97e:	4c2c      	ldr	r4, [pc, #176]	; (800ca30 <HAL_UART_MspInit+0xc8>)
 800c980:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c982:	f043 0301 	orr.w	r3, r3, #1
 800c986:	6323      	str	r3, [r4, #48]	; 0x30
 800c988:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c98a:	f003 0301 	and.w	r3, r3, #1
 800c98e:	9301      	str	r3, [sp, #4]
 800c990:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 800c992:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c996:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800c998:	2302      	movs	r3, #2
 800c99a:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800c99c:	2301      	movs	r3, #1
 800c99e:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800c9a0:	2303      	movs	r3, #3
 800c9a2:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c9a4:	2307      	movs	r3, #7
 800c9a6:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 800c9a8:	4d22      	ldr	r5, [pc, #136]	; (800ca34 <HAL_UART_MspInit+0xcc>)
 800c9aa:	a905      	add	r1, sp, #20
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	f7f9 fa7d 	bl	8005eac <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 800c9b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9b6:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 800c9b8:	a905      	add	r1, sp, #20
 800c9ba:	4628      	mov	r0, r5
 800c9bc:	f7f9 fa76 	bl	8005eac <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 800c9c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c9c2:	f043 0310 	orr.w	r3, r3, #16
 800c9c6:	6463      	str	r3, [r4, #68]	; 0x44
 800c9c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c9ca:	f003 0310 	and.w	r3, r3, #16
 800c9ce:	9302      	str	r3, [sp, #8]
 800c9d0:	9b02      	ldr	r3, [sp, #8]
 800c9d2:	e7d2      	b.n	800c97a <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 800c9d4:	4c16      	ldr	r4, [pc, #88]	; (800ca30 <HAL_UART_MspInit+0xc8>)
 800c9d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c9d8:	f043 0304 	orr.w	r3, r3, #4
 800c9dc:	6323      	str	r3, [r4, #48]	; 0x30
 800c9de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c9e0:	f003 0304 	and.w	r3, r3, #4
 800c9e4:	9303      	str	r3, [sp, #12]
 800c9e6:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 800c9e8:	2340      	movs	r3, #64	; 0x40
 800c9ea:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800c9ec:	2302      	movs	r3, #2
 800c9ee:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800c9f4:	2303      	movs	r3, #3
 800c9f6:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800c9f8:	2308      	movs	r3, #8
 800c9fa:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 800c9fc:	4d0e      	ldr	r5, [pc, #56]	; (800ca38 <HAL_UART_MspInit+0xd0>)
 800c9fe:	a905      	add	r1, sp, #20
 800ca00:	4628      	mov	r0, r5
 800ca02:	f7f9 fa53 	bl	8005eac <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 800ca06:	2380      	movs	r3, #128	; 0x80
 800ca08:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 800ca0a:	a905      	add	r1, sp, #20
 800ca0c:	4628      	mov	r0, r5
 800ca0e:	f7f9 fa4d 	bl	8005eac <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 800ca12:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ca14:	f043 0320 	orr.w	r3, r3, #32
 800ca18:	6463      	str	r3, [r4, #68]	; 0x44
 800ca1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ca1c:	f003 0320 	and.w	r3, r3, #32
 800ca20:	9304      	str	r3, [sp, #16]
 800ca22:	9b04      	ldr	r3, [sp, #16]
}
 800ca24:	e7a9      	b.n	800c97a <HAL_UART_MspInit+0x12>
 800ca26:	bf00      	nop
 800ca28:	40011000 	.word	0x40011000
 800ca2c:	40011400 	.word	0x40011400
 800ca30:	40023800 	.word	0x40023800
 800ca34:	40020000 	.word	0x40020000
 800ca38:	40020800 	.word	0x40020800

0800ca3c <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 800ca3c:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 800ca3e:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 800ca40:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 800ca42:	2200      	movs	r2, #0
 800ca44:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 800ca46:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 800ca48:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 800ca4a:	210c      	movs	r1, #12
 800ca4c:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800ca4e:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 800ca50:	f7fd fa1d 	bl	8009e8e <HAL_UART_Init>
}
 800ca54:	bd08      	pop	{r3, pc}
	...

0800ca58 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 800ca58:	b510      	push	{r4, lr}
 800ca5a:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 800ca5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca60:	b292      	uxth	r2, r2
 800ca62:	4802      	ldr	r0, [pc, #8]	; (800ca6c <_write+0x14>)
 800ca64:	f7fc fed1 	bl	800980a <HAL_UART_Transmit>
	return len;
}
 800ca68:	4620      	mov	r0, r4
 800ca6a:	bd10      	pop	{r4, pc}
 800ca6c:	20006178 	.word	0x20006178

0800ca70 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 800ca70:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 800ca72:	2200      	movs	r2, #0
 800ca74:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800ca76:	f04f 33ff 	mov.w	r3, #4294967295
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	4802      	ldr	r0, [pc, #8]	; (800ca88 <_read+0x18>)
 800ca7e:	f7fc ff2c 	bl	80098da <HAL_UART_Receive>
	return len;
}
 800ca82:	2001      	movs	r0, #1
 800ca84:	bd08      	pop	{r3, pc}
 800ca86:	bf00      	nop
 800ca88:	20006178 	.word	0x20006178

0800ca8c <UI_Config_SV>:
		displayJPEG(iconName_FX4, iconPosX_FX4, iconPosY_FX4);
	}
}

/* Display Signal Viewer Screen */
void UI_Config_SV(uint16_t sv_state) {
 800ca8c:	b538      	push	{r3, r4, r5, lr}
 800ca8e:	4605      	mov	r5, r0
	// Clear LCD
	BSP_LCD_Clear(LCD_COLOR_LIGHTGRAY);
 800ca90:	4830      	ldr	r0, [pc, #192]	; (800cb54 <UI_Config_SV+0xc8>)
 800ca92:	f7f5 fcf3 	bl	800247c <BSP_LCD_Clear>
	// Major Axes
	for (int i = 1; i < 4; i++) BSP_LCD_DrawHLine(59, 419+i, axisScaleX);
 800ca96:	2401      	movs	r4, #1
 800ca98:	e008      	b.n	800caac <UI_Config_SV+0x20>
 800ca9a:	f204 11a3 	addw	r1, r4, #419	; 0x1a3
 800ca9e:	4b2e      	ldr	r3, [pc, #184]	; (800cb58 <UI_Config_SV+0xcc>)
 800caa0:	881a      	ldrh	r2, [r3, #0]
 800caa2:	b289      	uxth	r1, r1
 800caa4:	203b      	movs	r0, #59	; 0x3b
 800caa6:	f7f5 fd07 	bl	80024b8 <BSP_LCD_DrawHLine>
 800caaa:	3401      	adds	r4, #1
 800caac:	2c03      	cmp	r4, #3
 800caae:	ddf4      	ble.n	800ca9a <UI_Config_SV+0xe>
	for (int i = 1; i < 4; i++) BSP_LCD_DrawVLine(57+i, 49, axisScaleY+10);
 800cab0:	2401      	movs	r4, #1
 800cab2:	e00a      	b.n	800caca <UI_Config_SV+0x3e>
 800cab4:	4b29      	ldr	r3, [pc, #164]	; (800cb5c <UI_Config_SV+0xd0>)
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	320a      	adds	r2, #10
 800caba:	f104 0039 	add.w	r0, r4, #57	; 0x39
 800cabe:	b292      	uxth	r2, r2
 800cac0:	2131      	movs	r1, #49	; 0x31
 800cac2:	b280      	uxth	r0, r0
 800cac4:	f7f5 fd20 	bl	8002508 <BSP_LCD_DrawVLine>
 800cac8:	3401      	adds	r4, #1
 800caca:	2c03      	cmp	r4, #3
 800cacc:	ddf2      	ble.n	800cab4 <UI_Config_SV+0x28>
	// Axes Subdivision Lines
	for (int i = 1; i < 12; i++) BSP_LCD_DrawVLine(60+62*i, 410, 25);
 800cace:	2401      	movs	r4, #1
 800cad0:	e00a      	b.n	800cae8 <UI_Config_SV+0x5c>
 800cad2:	ebc4 1044 	rsb	r0, r4, r4, lsl #5
 800cad6:	0040      	lsls	r0, r0, #1
 800cad8:	303c      	adds	r0, #60	; 0x3c
 800cada:	b280      	uxth	r0, r0
 800cadc:	2219      	movs	r2, #25
 800cade:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800cae2:	f7f5 fd11 	bl	8002508 <BSP_LCD_DrawVLine>
 800cae6:	3401      	adds	r4, #1
 800cae8:	2c0b      	cmp	r4, #11
 800caea:	ddf2      	ble.n	800cad2 <UI_Config_SV+0x46>
	for (int i = 0; i < 10; i++) BSP_LCD_DrawHLine(48, 49+37*i, 25);
 800caec:	2400      	movs	r4, #0
 800caee:	2c09      	cmp	r4, #9
 800caf0:	dc0b      	bgt.n	800cb0a <UI_Config_SV+0x7e>
 800caf2:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800caf6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800cafa:	3131      	adds	r1, #49	; 0x31
 800cafc:	2219      	movs	r2, #25
 800cafe:	b289      	uxth	r1, r1
 800cb00:	2030      	movs	r0, #48	; 0x30
 800cb02:	f7f5 fcd9 	bl	80024b8 <BSP_LCD_DrawHLine>
 800cb06:	3401      	adds	r4, #1
 800cb08:	e7f1      	b.n	800caee <UI_Config_SV+0x62>
	// Axes Labels
	BSP_LCD_DisplayStringAt(430, ySize_LCD-30, (uint8_t *)"0", CENTER_MODE);
 800cb0a:	4b15      	ldr	r3, [pc, #84]	; (800cb60 <UI_Config_SV+0xd4>)
 800cb0c:	6819      	ldr	r1, [r3, #0]
 800cb0e:	391e      	subs	r1, #30
 800cb10:	2301      	movs	r3, #1
 800cb12:	4a14      	ldr	r2, [pc, #80]	; (800cb64 <UI_Config_SV+0xd8>)
 800cb14:	b289      	uxth	r1, r1
 800cb16:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 800cb1a:	f7f5 fe09 	bl	8002730 <BSP_LCD_DisplayStringAt>
	if (sv_state == SV_STATE_SCOPE) {
 800cb1e:	b115      	cbz	r5, 800cb26 <UI_Config_SV+0x9a>
		BSP_LCD_DisplayStringAt(350, ySize_LCD-30, (uint8_t *)"TIME", CENTER_MODE);
	} else if (sv_state == SV_STATE_SPECTRUM) {
 800cb20:	2d01      	cmp	r5, #1
 800cb22:	d00b      	beq.n	800cb3c <UI_Config_SV+0xb0>
		BSP_LCD_DisplayStringAt(350, ySize_LCD-30, (uint8_t *)"FREQ", CENTER_MODE);
	}
}
 800cb24:	bd38      	pop	{r3, r4, r5, pc}
		BSP_LCD_DisplayStringAt(350, ySize_LCD-30, (uint8_t *)"TIME", CENTER_MODE);
 800cb26:	4b0e      	ldr	r3, [pc, #56]	; (800cb60 <UI_Config_SV+0xd4>)
 800cb28:	6819      	ldr	r1, [r3, #0]
 800cb2a:	391e      	subs	r1, #30
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	4a0e      	ldr	r2, [pc, #56]	; (800cb68 <UI_Config_SV+0xdc>)
 800cb30:	b289      	uxth	r1, r1
 800cb32:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800cb36:	f7f5 fdfb 	bl	8002730 <BSP_LCD_DisplayStringAt>
 800cb3a:	e7f3      	b.n	800cb24 <UI_Config_SV+0x98>
		BSP_LCD_DisplayStringAt(350, ySize_LCD-30, (uint8_t *)"FREQ", CENTER_MODE);
 800cb3c:	4b08      	ldr	r3, [pc, #32]	; (800cb60 <UI_Config_SV+0xd4>)
 800cb3e:	6819      	ldr	r1, [r3, #0]
 800cb40:	391e      	subs	r1, #30
 800cb42:	2301      	movs	r3, #1
 800cb44:	4a09      	ldr	r2, [pc, #36]	; (800cb6c <UI_Config_SV+0xe0>)
 800cb46:	b289      	uxth	r1, r1
 800cb48:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800cb4c:	f7f5 fdf0 	bl	8002730 <BSP_LCD_DisplayStringAt>
}
 800cb50:	e7e8      	b.n	800cb24 <UI_Config_SV+0x98>
 800cb52:	bf00      	nop
 800cb54:	ffd3d3d3 	.word	0xffd3d3d3
 800cb58:	20018a34 	.word	0x20018a34
 800cb5c:	20018524 	.word	0x20018524
 800cb60:	20058b64 	.word	0x20058b64
 800cb64:	08013270 	.word	0x08013270
 800cb68:	08013274 	.word	0x08013274
 800cb6c:	0801327c 	.word	0x0801327c

0800cb70 <SV_Handler>:
	}
}

/* Handle Signal Viewer Display */
void SV_Handler(int16_t* pData, uint16_t sv_state) {
	if (menu_state == SV_MENU_STATE) {
 800cb70:	4b30      	ldr	r3, [pc, #192]	; (800cc34 <SV_Handler+0xc4>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2b02      	cmp	r3, #2
 800cb76:	d000      	beq.n	800cb7a <SV_Handler+0xa>
 800cb78:	4770      	bx	lr
void SV_Handler(int16_t* pData, uint16_t sv_state) {
 800cb7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb7e:	4607      	mov	r7, r0
 800cb80:	4688      	mov	r8, r1
		// Clear Graph
		UI_Config_SV(sv_state);
 800cb82:	4608      	mov	r0, r1
 800cb84:	f7ff ff82 	bl	800ca8c <UI_Config_SV>
		// Set Variables
		uint16_t avg = 0;
		uint16_t prev_y = axisScaleY/2;
 800cb88:	4b2b      	ldr	r3, [pc, #172]	; (800cc38 <SV_Handler+0xc8>)
 800cb8a:	681e      	ldr	r6, [r3, #0]
 800cb8c:	f3c6 064f 	ubfx	r6, r6, #1, #16
		uint16_t inverse_scale_factor = 88;
		// Display plot lines for data array
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTRED);
 800cb90:	482a      	ldr	r0, [pc, #168]	; (800cc3c <SV_Handler+0xcc>)
 800cb92:	f7f5 fc69 	bl	8002468 <BSP_LCD_SetTextColor>
		for (int i = 0; i < 2048; i++) {
 800cb96:	2400      	movs	r4, #0
		uint16_t avg = 0;
 800cb98:	4621      	mov	r1, r4
		for (int i = 0; i < 2048; i++) {
 800cb9a:	e01e      	b.n	800cbda <SV_Handler+0x6a>
			// Average every 6 samples and draw
			avg += (*pData+32767)/inverse_scale_factor; // Scale to fit on plot
			pData++;
			if (sv_state == SV_STATE_SPECTRUM) {
				pData++; // Increment again to prevent mirrored output on Spectrum Analyzer
 800cb9c:	1d3d      	adds	r5, r7, #4
 800cb9e:	e030      	b.n	800cc02 <SV_Handler+0x92>
			}
			if (i % 6 == 0) {
				avg /= 6;
				if (i > 6) {
					BSP_LCD_DrawLine(axisPosX_StartLeft+i/3, 244+prev_y,
 800cba0:	4827      	ldr	r0, [pc, #156]	; (800cc40 <SV_Handler+0xd0>)
 800cba2:	fb80 3004 	smull	r3, r0, r0, r4
 800cba6:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
 800cbaa:	4b26      	ldr	r3, [pc, #152]	; (800cc44 <SV_Handler+0xd4>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4418      	add	r0, r3
 800cbb0:	b280      	uxth	r0, r0
							 	 	 axisPosX_StartLeft+i/3+1, 244+(axisScaleY-avg));
 800cbb2:	4b21      	ldr	r3, [pc, #132]	; (800cc38 <SV_Handler+0xc8>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	1bdb      	subs	r3, r3, r7
 800cbb8:	b29b      	uxth	r3, r3
					BSP_LCD_DrawLine(axisPosX_StartLeft+i/3, 244+prev_y,
 800cbba:	33f4      	adds	r3, #244	; 0xf4
 800cbbc:	1c42      	adds	r2, r0, #1
 800cbbe:	f106 01f4 	add.w	r1, r6, #244	; 0xf4
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	b292      	uxth	r2, r2
 800cbc6:	b289      	uxth	r1, r1
 800cbc8:	f7f5 fe10 	bl	80027ec <BSP_LCD_DrawLine>
				}
				prev_y = axisScaleY-avg;
 800cbcc:	4b1a      	ldr	r3, [pc, #104]	; (800cc38 <SV_Handler+0xc8>)
 800cbce:	881e      	ldrh	r6, [r3, #0]
 800cbd0:	1bf6      	subs	r6, r6, r7
 800cbd2:	b2b6      	uxth	r6, r6
				avg = 0;
 800cbd4:	2100      	movs	r1, #0
		for (int i = 0; i < 2048; i++) {
 800cbd6:	3401      	adds	r4, #1
 800cbd8:	462f      	mov	r7, r5
 800cbda:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 800cbde:	da22      	bge.n	800cc26 <SV_Handler+0xb6>
			avg += (*pData+32767)/inverse_scale_factor; // Scale to fit on plot
 800cbe0:	463d      	mov	r5, r7
 800cbe2:	f935 2b02 	ldrsh.w	r2, [r5], #2
 800cbe6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800cbea:	4413      	add	r3, r2
 800cbec:	4a16      	ldr	r2, [pc, #88]	; (800cc48 <SV_Handler+0xd8>)
 800cbee:	fb82 0203 	smull	r0, r2, r2, r3
 800cbf2:	17db      	asrs	r3, r3, #31
 800cbf4:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 800cbf8:	440b      	add	r3, r1
 800cbfa:	b299      	uxth	r1, r3
			if (sv_state == SV_STATE_SPECTRUM) {
 800cbfc:	f1b8 0f01 	cmp.w	r8, #1
 800cc00:	d0cc      	beq.n	800cb9c <SV_Handler+0x2c>
			if (i % 6 == 0) {
 800cc02:	4a12      	ldr	r2, [pc, #72]	; (800cc4c <SV_Handler+0xdc>)
 800cc04:	fb82 3204 	smull	r3, r2, r2, r4
 800cc08:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 800cc0c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800cc10:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
 800cc14:	d1df      	bne.n	800cbd6 <SV_Handler+0x66>
				avg /= 6;
 800cc16:	4b0e      	ldr	r3, [pc, #56]	; (800cc50 <SV_Handler+0xe0>)
 800cc18:	fba3 2301 	umull	r2, r3, r3, r1
 800cc1c:	f3c3 078f 	ubfx	r7, r3, #2, #16
				if (i > 6) {
 800cc20:	2c06      	cmp	r4, #6
 800cc22:	dcbd      	bgt.n	800cba0 <SV_Handler+0x30>
 800cc24:	e7d2      	b.n	800cbcc <SV_Handler+0x5c>
			}
		}
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800cc26:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800cc2a:	f7f5 fc1d 	bl	8002468 <BSP_LCD_SetTextColor>
	}
}
 800cc2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc32:	bf00      	nop
 800cc34:	20001b34 	.word	0x20001b34
 800cc38:	20018524 	.word	0x20018524
 800cc3c:	ffff8080 	.word	0xffff8080
 800cc40:	55555556 	.word	0x55555556
 800cc44:	20018520 	.word	0x20018520
 800cc48:	2e8ba2e9 	.word	0x2e8ba2e9
 800cc4c:	2aaaaaab 	.word	0x2aaaaaab
 800cc50:	aaaaaaab 	.word	0xaaaaaaab

0800cc54 <colorConversion>:

//
//
// -- JPEG Functions -----
//
uint8_t *colorConversion(uint8_t *jpeg_addr, uint32_t num_bytes) {
 800cc54:	b530      	push	{r4, r5, lr}
 800cc56:	b085      	sub	sp, #20
 800cc58:	460b      	mov	r3, r1
	uint8_t *raw_out_buf = jpeg_addr + num_bytes;
 800cc5a:	1844      	adds	r4, r0, r1
	uint32_t total_raw_data;
	pConvert_Function(jpeg_addr, raw_out_buf, 0, num_bytes, &total_raw_data);
 800cc5c:	aa03      	add	r2, sp, #12
 800cc5e:	9200      	str	r2, [sp, #0]
 800cc60:	4a03      	ldr	r2, [pc, #12]	; (800cc70 <colorConversion+0x1c>)
 800cc62:	6815      	ldr	r5, [r2, #0]
 800cc64:	2200      	movs	r2, #0
 800cc66:	4621      	mov	r1, r4
 800cc68:	47a8      	blx	r5

	return raw_out_buf;
}
 800cc6a:	4620      	mov	r0, r4
 800cc6c:	b005      	add	sp, #20
 800cc6e:	bd30      	pop	{r4, r5, pc}
 800cc70:	20058a38 	.word	0x20058a38

0800cc74 <DMA2D_CopyBuffer>:

void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, JPEG_ConfTypeDef *jpeg_info)
{
 800cc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc78:	b087      	sub	sp, #28
 800cc7a:	9003      	str	r0, [sp, #12]
 800cc7c:	4688      	mov	r8, r1
 800cc7e:	4617      	mov	r7, r2
 800cc80:	461e      	mov	r6, r3
 800cc82:	9d10      	ldr	r5, [sp, #64]	; 0x40
	uint32_t destination = (uint32_t)pDst;
	uint32_t source = (uint32_t)pSrc;

	// DMA2D Clock Enable
	__HAL_RCC_DMA2D_CLK_ENABLE();
 800cc84:	4b2c      	ldr	r3, [pc, #176]	; (800cd38 <DMA2D_CopyBuffer+0xc4>)
 800cc86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc88:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800cc8c:	631a      	str	r2, [r3, #48]	; 0x30
 800cc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc94:	9305      	str	r3, [sp, #20]
 800cc96:	9b05      	ldr	r3, [sp, #20]

	// Width offset calculation (from STM32 examples)
	uint32_t width_offset = 0;
	if(jpeg_info->ChromaSubsampling == JPEG_420_SUBSAMPLING) {
 800cc98:	686b      	ldr	r3, [r5, #4]
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d03e      	beq.n	800cd1c <DMA2D_CopyBuffer+0xa8>
	uint32_t width_offset = 0;
 800cc9e:	f04f 0900 	mov.w	r9, #0
		if((jpeg_info->ImageWidth % 16) != 0)
			width_offset = 16 - (jpeg_info->ImageWidth % 16);
	}

	if(jpeg_info->ChromaSubsampling == JPEG_422_SUBSAMPLING) {
 800cca2:	2b02      	cmp	r3, #2
 800cca4:	d041      	beq.n	800cd2a <DMA2D_CopyBuffer+0xb6>
		if((jpeg_info->ImageWidth % 16) != 0)
			width_offset = 16 - (jpeg_info->ImageWidth % 16);
	}

	if(jpeg_info->ChromaSubsampling == JPEG_444_SUBSAMPLING) {
 800cca6:	b92b      	cbnz	r3, 800ccb4 <DMA2D_CopyBuffer+0x40>
		if((jpeg_info->ImageWidth % 8) != 0)
 800cca8:	68eb      	ldr	r3, [r5, #12]
 800ccaa:	f013 0307 	ands.w	r3, r3, #7
 800ccae:	d001      	beq.n	800ccb4 <DMA2D_CopyBuffer+0x40>
			width_offset = 8 - (jpeg_info->ImageWidth % 8);
 800ccb0:	f1c3 0908 	rsb	r9, r3, #8
	}

	/*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
	hdma2d.Instance 		  = DMA2D;
 800ccb4:	4c21      	ldr	r4, [pc, #132]	; (800cd3c <DMA2D_CopyBuffer+0xc8>)
 800ccb6:	4b22      	ldr	r3, [pc, #136]	; (800cd40 <DMA2D_CopyBuffer+0xcc>)
 800ccb8:	6023      	str	r3, [r4, #0]
	hdma2d.Init.Mode          = DMA2D_M2M_PFC;
 800ccba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ccbe:	6063      	str	r3, [r4, #4]
	hdma2d.Init.ColorMode     = DMA2D_OUTPUT_ARGB8888;
 800ccc0:	f04f 0b00 	mov.w	fp, #0
 800ccc4:	f8c4 b008 	str.w	fp, [r4, #8]
	hdma2d.Init.OutputOffset  = BSP_LCD_GetXSize() - jpeg_info->ImageWidth;
 800ccc8:	f7f5 fbc2 	bl	8002450 <BSP_LCD_GetXSize>
 800cccc:	68eb      	ldr	r3, [r5, #12]
 800ccce:	1ac0      	subs	r0, r0, r3
 800ccd0:	60e0      	str	r0, [r4, #12]

	/*##-2- Foreground Configuration ###########################################*/
	hdma2d.LayerCfg[1].AlphaMode 		= DMA2D_REPLACE_ALPHA;
 800ccd2:	f04f 0a01 	mov.w	sl, #1
 800ccd6:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
	hdma2d.LayerCfg[1].InputAlpha 		= 0xFF;
 800ccda:	23ff      	movs	r3, #255	; 0xff
 800ccdc:	6463      	str	r3, [r4, #68]	; 0x44
	hdma2d.LayerCfg[1].InputColorMode 	= DMA2D_INPUT_ARGB8888;
 800ccde:	f8c4 b03c 	str.w	fp, [r4, #60]	; 0x3c
	hdma2d.LayerCfg[1].InputOffset 		= width_offset;
 800cce2:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38

	/* DMA2D Initialization */
	HAL_DMA2D_Init(&hdma2d);
 800cce6:	4620      	mov	r0, r4
 800cce8:	f7f8 ff7a 	bl	8005be0 <HAL_DMA2D_Init>

	/* DMA2D Config Layer */
	HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 800ccec:	4651      	mov	r1, sl
 800ccee:	4620      	mov	r0, r4
 800ccf0:	f7f9 f86c 	bl	8005dcc <HAL_DMA2D_ConfigLayer>

	/* DMA2D Start */
	HAL_DMA2D_Start(&hdma2d, source, destination + ((y * BSP_LCD_GetXSize() + x) * 4),
 800ccf4:	f7f5 fbac 	bl	8002450 <BSP_LCD_GetXSize>
 800ccf8:	fb00 7206 	mla	r2, r0, r6, r7
 800ccfc:	68ab      	ldr	r3, [r5, #8]
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	68eb      	ldr	r3, [r5, #12]
 800cd02:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 800cd06:	9903      	ldr	r1, [sp, #12]
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f7f8 ffa3 	bl	8005c54 <HAL_DMA2D_Start>
					jpeg_info->ImageWidth, jpeg_info->ImageHeight);

	/* DMA2D Poll for Transfer */
	HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 800cd0e:	210a      	movs	r1, #10
 800cd10:	4620      	mov	r0, r4
 800cd12:	f7f8 ffbb 	bl	8005c8c <HAL_DMA2D_PollForTransfer>
}
 800cd16:	b007      	add	sp, #28
 800cd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if((jpeg_info->ImageWidth % 16) != 0)
 800cd1c:	68ea      	ldr	r2, [r5, #12]
 800cd1e:	f012 090f 	ands.w	r9, r2, #15
 800cd22:	d0be      	beq.n	800cca2 <DMA2D_CopyBuffer+0x2e>
			width_offset = 16 - (jpeg_info->ImageWidth % 16);
 800cd24:	f1c9 0910 	rsb	r9, r9, #16
 800cd28:	e7bb      	b.n	800cca2 <DMA2D_CopyBuffer+0x2e>
		if((jpeg_info->ImageWidth % 16) != 0)
 800cd2a:	68ea      	ldr	r2, [r5, #12]
 800cd2c:	f012 020f 	ands.w	r2, r2, #15
 800cd30:	d0b9      	beq.n	800cca6 <DMA2D_CopyBuffer+0x32>
			width_offset = 16 - (jpeg_info->ImageWidth % 16);
 800cd32:	f1c2 0910 	rsb	r9, r2, #16
 800cd36:	e7b6      	b.n	800cca6 <DMA2D_CopyBuffer+0x32>
 800cd38:	40023800 	.word	0x40023800
 800cd3c:	20058afc 	.word	0x20058afc
 800cd40:	4002b000 	.word	0x4002b000

0800cd44 <displayJPEG>:
void displayJPEG(char* fileName, uint32_t xPos, uint32_t yPos) {
 800cd44:	b570      	push	{r4, r5, r6, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	4606      	mov	r6, r0
 800cd4a:	460c      	mov	r4, r1
 800cd4c:	4615      	mov	r5, r2
	f_opendir(&dir, path);
 800cd4e:	4b1d      	ldr	r3, [pc, #116]	; (800cdc4 <displayJPEG+0x80>)
 800cd50:	6819      	ldr	r1, [r3, #0]
 800cd52:	481d      	ldr	r0, [pc, #116]	; (800cdc8 <displayJPEG+0x84>)
 800cd54:	f7f8 f8b3 	bl	8004ebe <f_opendir>
	if (f_open(&file, (TCHAR*)fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE) == FR_OK) {
 800cd58:	2213      	movs	r2, #19
 800cd5a:	4631      	mov	r1, r6
 800cd5c:	481b      	ldr	r0, [pc, #108]	; (800cdcc <displayJPEG+0x88>)
 800cd5e:	f7f7 fe53 	bl	8004a08 <f_open>
 800cd62:	b330      	cbz	r0, 800cdb2 <displayJPEG+0x6e>
	HAL_JPEG_Decode_IT(&hjpeg, (uint8_t*)jpeg_input_buffer, JPEG_BUFFER_SIZE,
 800cd64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cd68:	9200      	str	r2, [sp, #0]
 800cd6a:	4b16      	ldr	r3, [pc, #88]	; (800cdc4 <displayJPEG+0x80>)
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	4918      	ldr	r1, [pc, #96]	; (800cdd0 <displayJPEG+0x8c>)
 800cd70:	4818      	ldr	r0, [pc, #96]	; (800cdd4 <displayJPEG+0x90>)
 800cd72:	f7f9 fedc 	bl	8006b2e <HAL_JPEG_Decode_IT>
	while (JPEG_DECODE_COMPLETE == 0); // Wait for Decode Completion
 800cd76:	4b18      	ldr	r3, [pc, #96]	; (800cdd8 <displayJPEG+0x94>)
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d0fb      	beq.n	800cd76 <displayJPEG+0x32>
	JPEG_DECODE_COMPLETE = 0;
 800cd7e:	4b16      	ldr	r3, [pc, #88]	; (800cdd8 <displayJPEG+0x94>)
 800cd80:	2200      	movs	r2, #0
 800cd82:	605a      	str	r2, [r3, #4]
	HAL_JPEG_GetInfo(&hjpeg, &jpeg_info);
 800cd84:	4e15      	ldr	r6, [pc, #84]	; (800cddc <displayJPEG+0x98>)
 800cd86:	4631      	mov	r1, r6
 800cd88:	4812      	ldr	r0, [pc, #72]	; (800cdd4 <displayJPEG+0x90>)
 800cd8a:	f7f9 fe67 	bl	8006a5c <HAL_JPEG_GetInfo>
	uint8_t *raw_output = colorConversion((uint8_t *)jpeg_output_buffer, JPEG_BUFFER_SIZE);
 800cd8e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800cd92:	4b0c      	ldr	r3, [pc, #48]	; (800cdc4 <displayJPEG+0x80>)
 800cd94:	6858      	ldr	r0, [r3, #4]
 800cd96:	f7ff ff5d 	bl	800cc54 <colorConversion>
	DMA2D_CopyBuffer((uint32_t *)raw_output, (uint32_t *)LCD_FRAME_BUFFER,
 800cd9a:	9600      	str	r6, [sp, #0]
 800cd9c:	b2ab      	uxth	r3, r5
 800cd9e:	b2a2      	uxth	r2, r4
 800cda0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800cda4:	f7ff ff66 	bl	800cc74 <DMA2D_CopyBuffer>
	f_close(&file);
 800cda8:	4808      	ldr	r0, [pc, #32]	; (800cdcc <displayJPEG+0x88>)
 800cdaa:	f7f8 f873 	bl	8004e94 <f_close>
}
 800cdae:	b002      	add	sp, #8
 800cdb0:	bd70      	pop	{r4, r5, r6, pc}
		f_read(&file, jpeg_input_buffer, JPEG_BUFFER_SIZE, &br);
 800cdb2:	4b0b      	ldr	r3, [pc, #44]	; (800cde0 <displayJPEG+0x9c>)
 800cdb4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cdb8:	4905      	ldr	r1, [pc, #20]	; (800cdd0 <displayJPEG+0x8c>)
 800cdba:	4804      	ldr	r0, [pc, #16]	; (800cdcc <displayJPEG+0x88>)
 800cdbc:	f7f7 ff3c 	bl	8004c38 <f_read>
 800cdc0:	e7d0      	b.n	800cd64 <displayJPEG+0x20>
 800cdc2:	bf00      	nop
 800cdc4:	20000194 	.word	0x20000194
 800cdc8:	20058a44 	.word	0x20058a44
 800cdcc:	200187a0 	.word	0x200187a0
 800cdd0:	20018a38 	.word	0x20018a38
 800cdd4:	200189d8 	.word	0x200189d8
 800cdd8:	20001b34 	.word	0x20001b34
 800cddc:	20018774 	.word	0x20018774
 800cde0:	20018794 	.word	0x20018794

0800cde4 <UI_Config_Main>:
void UI_Config_Main() {
 800cde4:	b538      	push	{r3, r4, r5, lr}
	BSP_LCD_Clear(LCD_COLOR_LIGHTGRAY);
 800cde6:	482f      	ldr	r0, [pc, #188]	; (800cea4 <UI_Config_Main+0xc0>)
 800cde8:	f7f5 fb48 	bl	800247c <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800cdec:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf0:	f7f5 fb3a 	bl	8002468 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(iconPosX_FX, iconPosY_SV, iconSize, iconSize);
 800cdf4:	4c2c      	ldr	r4, [pc, #176]	; (800cea8 <UI_Config_Main+0xc4>)
 800cdf6:	8822      	ldrh	r2, [r4, #0]
 800cdf8:	4d2c      	ldr	r5, [pc, #176]	; (800ceac <UI_Config_Main+0xc8>)
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	8829      	ldrh	r1, [r5, #0]
 800cdfe:	482c      	ldr	r0, [pc, #176]	; (800ceb0 <UI_Config_Main+0xcc>)
 800ce00:	8800      	ldrh	r0, [r0, #0]
 800ce02:	f7f5 fbc5 	bl	8002590 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(iconPosX_SV, iconPosY_SV, iconSize, iconSize);
 800ce06:	8822      	ldrh	r2, [r4, #0]
 800ce08:	4613      	mov	r3, r2
 800ce0a:	8829      	ldrh	r1, [r5, #0]
 800ce0c:	4829      	ldr	r0, [pc, #164]	; (800ceb4 <UI_Config_Main+0xd0>)
 800ce0e:	8800      	ldrh	r0, [r0, #0]
 800ce10:	f7f5 fbbe 	bl	8002590 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(xSize_LCD-80, 30, iconSize/2, iconSize/2);
 800ce14:	6822      	ldr	r2, [r4, #0]
 800ce16:	f3c2 024f 	ubfx	r2, r2, #1, #16
 800ce1a:	4b27      	ldr	r3, [pc, #156]	; (800ceb8 <UI_Config_Main+0xd4>)
 800ce1c:	6818      	ldr	r0, [r3, #0]
 800ce1e:	3850      	subs	r0, #80	; 0x50
 800ce20:	4613      	mov	r3, r2
 800ce22:	211e      	movs	r1, #30
 800ce24:	b280      	uxth	r0, r0
 800ce26:	f7f5 fbb3 	bl	8002590 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800ce2a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800ce2e:	f7f5 fb1b 	bl	8002468 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(650, ySize_LCD/2 + 3*iconSize/4,
 800ce32:	4d22      	ldr	r5, [pc, #136]	; (800cebc <UI_Config_Main+0xd8>)
 800ce34:	682a      	ldr	r2, [r5, #0]
 800ce36:	6821      	ldr	r1, [r4, #0]
 800ce38:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ce3c:	0889      	lsrs	r1, r1, #2
 800ce3e:	eb01 0152 	add.w	r1, r1, r2, lsr #1
 800ce42:	2301      	movs	r3, #1
 800ce44:	4a1e      	ldr	r2, [pc, #120]	; (800cec0 <UI_Config_Main+0xdc>)
 800ce46:	b289      	uxth	r1, r1
 800ce48:	f240 208a 	movw	r0, #650	; 0x28a
 800ce4c:	f7f5 fc70 	bl	8002730 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(150, ySize_LCD/2 + 3*iconSize/4,
 800ce50:	682a      	ldr	r2, [r5, #0]
 800ce52:	6821      	ldr	r1, [r4, #0]
 800ce54:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ce58:	0889      	lsrs	r1, r1, #2
 800ce5a:	eb01 0152 	add.w	r1, r1, r2, lsr #1
 800ce5e:	2301      	movs	r3, #1
 800ce60:	4a18      	ldr	r2, [pc, #96]	; (800cec4 <UI_Config_Main+0xe0>)
 800ce62:	b289      	uxth	r1, r1
 800ce64:	2096      	movs	r0, #150	; 0x96
 800ce66:	f7f5 fc63 	bl	8002730 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(275, 45,
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	4a16      	ldr	r2, [pc, #88]	; (800cec8 <UI_Config_Main+0xe4>)
 800ce6e:	212d      	movs	r1, #45	; 0x2d
 800ce70:	f240 1013 	movw	r0, #275	; 0x113
 800ce74:	f7f5 fc5c 	bl	8002730 <BSP_LCD_DisplayStringAt>
	if (SD_CARD_ENABLED == 1) {
 800ce78:	4b14      	ldr	r3, [pc, #80]	; (800cecc <UI_Config_Main+0xe8>)
 800ce7a:	689b      	ldr	r3, [r3, #8]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d000      	beq.n	800ce82 <UI_Config_Main+0x9e>
}
 800ce80:	bd38      	pop	{r3, r4, r5, pc}
		displayJPEG(iconName_SV, iconPosX_SV, iconPosY_SV); // Signal Viewer
 800ce82:	4c13      	ldr	r4, [pc, #76]	; (800ced0 <UI_Config_Main+0xec>)
 800ce84:	4b09      	ldr	r3, [pc, #36]	; (800ceac <UI_Config_Main+0xc8>)
 800ce86:	681a      	ldr	r2, [r3, #0]
 800ce88:	4b0a      	ldr	r3, [pc, #40]	; (800ceb4 <UI_Config_Main+0xd0>)
 800ce8a:	6819      	ldr	r1, [r3, #0]
 800ce8c:	68a0      	ldr	r0, [r4, #8]
 800ce8e:	f7ff ff59 	bl	800cd44 <displayJPEG>
		displayJPEG(iconName_FX, iconPosX_FX, iconPosY_FX); // Sound Effects
 800ce92:	4b10      	ldr	r3, [pc, #64]	; (800ced4 <UI_Config_Main+0xf0>)
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	4b06      	ldr	r3, [pc, #24]	; (800ceb0 <UI_Config_Main+0xcc>)
 800ce98:	6819      	ldr	r1, [r3, #0]
 800ce9a:	68e0      	ldr	r0, [r4, #12]
 800ce9c:	f7ff ff52 	bl	800cd44 <displayJPEG>
}
 800cea0:	e7ee      	b.n	800ce80 <UI_Config_Main+0x9c>
 800cea2:	bf00      	nop
 800cea4:	ffd3d3d3 	.word	0xffd3d3d3
 800cea8:	2001878c 	.word	0x2001878c
 800ceac:	20058af8 	.word	0x20058af8
 800ceb0:	20058a40 	.word	0x20058a40
 800ceb4:	20018798 	.word	0x20018798
 800ceb8:	20018518 	.word	0x20018518
 800cebc:	20058b64 	.word	0x20058b64
 800cec0:	08013284 	.word	0x08013284
 800cec4:	08013294 	.word	0x08013294
 800cec8:	080132a4 	.word	0x080132a4
 800cecc:	20001b34 	.word	0x20001b34
 800ced0:	20000194 	.word	0x20000194
 800ced4:	200189d4 	.word	0x200189d4

0800ced8 <Button_Handler>:
void Button_Handler() {
 800ced8:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && menu_state != MAIN_MENU_STATE) {
 800ceda:	2101      	movs	r1, #1
 800cedc:	4807      	ldr	r0, [pc, #28]	; (800cefc <Button_Handler+0x24>)
 800cede:	f7f9 f975 	bl	80061cc <HAL_GPIO_ReadPin>
 800cee2:	2801      	cmp	r0, #1
 800cee4:	d000      	beq.n	800cee8 <Button_Handler+0x10>
}
 800cee6:	bd08      	pop	{r3, pc}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 && menu_state != MAIN_MENU_STATE) {
 800cee8:	4b05      	ldr	r3, [pc, #20]	; (800cf00 <Button_Handler+0x28>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d0fa      	beq.n	800cee6 <Button_Handler+0xe>
		UI_Config_Main(); // Return to Main Menu on Button Press (if outside of main menu)
 800cef0:	f7ff ff78 	bl	800cde4 <UI_Config_Main>
		menu_state = MAIN_MENU_STATE;
 800cef4:	4b02      	ldr	r3, [pc, #8]	; (800cf00 <Button_Handler+0x28>)
 800cef6:	2200      	movs	r2, #0
 800cef8:	601a      	str	r2, [r3, #0]
}
 800cefa:	e7f4      	b.n	800cee6 <Button_Handler+0xe>
 800cefc:	40020000 	.word	0x40020000
 800cf00:	20001b34 	.word	0x20001b34

0800cf04 <UI_Config_FX>:
void UI_Config_FX() {
 800cf04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BSP_LCD_Clear(LCD_COLOR_LIGHTGRAY);
 800cf08:	483e      	ldr	r0, [pc, #248]	; (800d004 <UI_Config_FX+0x100>)
 800cf0a:	f7f5 fab7 	bl	800247c <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800cf0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf12:	f7f5 faa9 	bl	8002468 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(iconPosX_FX1, iconPosY_FX1, iconSize, iconSize);
 800cf16:	4c3c      	ldr	r4, [pc, #240]	; (800d008 <UI_Config_FX+0x104>)
 800cf18:	8822      	ldrh	r2, [r4, #0]
 800cf1a:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800d040 <UI_Config_FX+0x13c>
 800cf1e:	4613      	mov	r3, r2
 800cf20:	f8b8 1000 	ldrh.w	r1, [r8]
 800cf24:	4839      	ldr	r0, [pc, #228]	; (800d00c <UI_Config_FX+0x108>)
 800cf26:	8800      	ldrh	r0, [r0, #0]
 800cf28:	f7f5 fb32 	bl	8002590 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(iconPosX_FX2, iconPosY_FX2, iconSize, iconSize);
 800cf2c:	8822      	ldrh	r2, [r4, #0]
 800cf2e:	4f38      	ldr	r7, [pc, #224]	; (800d010 <UI_Config_FX+0x10c>)
 800cf30:	4613      	mov	r3, r2
 800cf32:	8839      	ldrh	r1, [r7, #0]
 800cf34:	4837      	ldr	r0, [pc, #220]	; (800d014 <UI_Config_FX+0x110>)
 800cf36:	8800      	ldrh	r0, [r0, #0]
 800cf38:	f7f5 fb2a 	bl	8002590 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(iconPosX_FX3, iconPosY_FX3, iconSize, iconSize);
 800cf3c:	8822      	ldrh	r2, [r4, #0]
 800cf3e:	4e36      	ldr	r6, [pc, #216]	; (800d018 <UI_Config_FX+0x114>)
 800cf40:	4613      	mov	r3, r2
 800cf42:	8831      	ldrh	r1, [r6, #0]
 800cf44:	4835      	ldr	r0, [pc, #212]	; (800d01c <UI_Config_FX+0x118>)
 800cf46:	8800      	ldrh	r0, [r0, #0]
 800cf48:	f7f5 fb22 	bl	8002590 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(iconPosX_FX4, iconPosY_FX4, iconSize, iconSize);
 800cf4c:	8822      	ldrh	r2, [r4, #0]
 800cf4e:	4d34      	ldr	r5, [pc, #208]	; (800d020 <UI_Config_FX+0x11c>)
 800cf50:	4613      	mov	r3, r2
 800cf52:	8829      	ldrh	r1, [r5, #0]
 800cf54:	4833      	ldr	r0, [pc, #204]	; (800d024 <UI_Config_FX+0x120>)
 800cf56:	8800      	ldrh	r0, [r0, #0]
 800cf58:	f7f5 fb1a 	bl	8002590 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800cf5c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800cf60:	f7f5 fa82 	bl	8002468 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(650, iconPosY_FX1+iconSize+20, (uint8_t *)"Lowpass", CENTER_MODE);
 800cf64:	f8d8 1000 	ldr.w	r1, [r8]
 800cf68:	6823      	ldr	r3, [r4, #0]
 800cf6a:	4419      	add	r1, r3
 800cf6c:	b289      	uxth	r1, r1
 800cf6e:	3114      	adds	r1, #20
 800cf70:	2301      	movs	r3, #1
 800cf72:	4a2d      	ldr	r2, [pc, #180]	; (800d028 <UI_Config_FX+0x124>)
 800cf74:	b289      	uxth	r1, r1
 800cf76:	f240 208a 	movw	r0, #650	; 0x28a
 800cf7a:	f7f5 fbd9 	bl	8002730 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(150, iconPosY_FX2+iconSize+20, (uint8_t *)"Highpass", CENTER_MODE);
 800cf7e:	6839      	ldr	r1, [r7, #0]
 800cf80:	6823      	ldr	r3, [r4, #0]
 800cf82:	4419      	add	r1, r3
 800cf84:	b289      	uxth	r1, r1
 800cf86:	3114      	adds	r1, #20
 800cf88:	2301      	movs	r3, #1
 800cf8a:	4a28      	ldr	r2, [pc, #160]	; (800d02c <UI_Config_FX+0x128>)
 800cf8c:	b289      	uxth	r1, r1
 800cf8e:	2096      	movs	r0, #150	; 0x96
 800cf90:	f7f5 fbce 	bl	8002730 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(650, iconPosY_FX3+iconSize+20, (uint8_t *)"Bandpass", CENTER_MODE);
 800cf94:	6831      	ldr	r1, [r6, #0]
 800cf96:	6823      	ldr	r3, [r4, #0]
 800cf98:	4419      	add	r1, r3
 800cf9a:	b289      	uxth	r1, r1
 800cf9c:	3114      	adds	r1, #20
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	4a23      	ldr	r2, [pc, #140]	; (800d030 <UI_Config_FX+0x12c>)
 800cfa2:	b289      	uxth	r1, r1
 800cfa4:	f240 208a 	movw	r0, #650	; 0x28a
 800cfa8:	f7f5 fbc2 	bl	8002730 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(150, iconPosY_FX4+iconSize+20, (uint8_t *)"Mute", CENTER_MODE);
 800cfac:	6829      	ldr	r1, [r5, #0]
 800cfae:	6823      	ldr	r3, [r4, #0]
 800cfb0:	4419      	add	r1, r3
 800cfb2:	b289      	uxth	r1, r1
 800cfb4:	3114      	adds	r1, #20
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	4a1e      	ldr	r2, [pc, #120]	; (800d034 <UI_Config_FX+0x130>)
 800cfba:	b289      	uxth	r1, r1
 800cfbc:	2096      	movs	r0, #150	; 0x96
 800cfbe:	f7f5 fbb7 	bl	8002730 <BSP_LCD_DisplayStringAt>
	if (SD_CARD_ENABLED == 1) {
 800cfc2:	4b1d      	ldr	r3, [pc, #116]	; (800d038 <UI_Config_FX+0x134>)
 800cfc4:	689b      	ldr	r3, [r3, #8]
 800cfc6:	2b01      	cmp	r3, #1
 800cfc8:	d001      	beq.n	800cfce <UI_Config_FX+0xca>
}
 800cfca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		displayJPEG(iconName_FX1, iconPosX_FX1, iconPosY_FX1);
 800cfce:	4c1b      	ldr	r4, [pc, #108]	; (800d03c <UI_Config_FX+0x138>)
 800cfd0:	f8d8 2000 	ldr.w	r2, [r8]
 800cfd4:	4b0d      	ldr	r3, [pc, #52]	; (800d00c <UI_Config_FX+0x108>)
 800cfd6:	6819      	ldr	r1, [r3, #0]
 800cfd8:	6920      	ldr	r0, [r4, #16]
 800cfda:	f7ff feb3 	bl	800cd44 <displayJPEG>
		displayJPEG(iconName_FX2, iconPosX_FX2, iconPosY_FX2);
 800cfde:	683a      	ldr	r2, [r7, #0]
 800cfe0:	4b0c      	ldr	r3, [pc, #48]	; (800d014 <UI_Config_FX+0x110>)
 800cfe2:	6819      	ldr	r1, [r3, #0]
 800cfe4:	6960      	ldr	r0, [r4, #20]
 800cfe6:	f7ff fead 	bl	800cd44 <displayJPEG>
		displayJPEG(iconName_FX3, iconPosX_FX3, iconPosY_FX3);
 800cfea:	6832      	ldr	r2, [r6, #0]
 800cfec:	4b0b      	ldr	r3, [pc, #44]	; (800d01c <UI_Config_FX+0x118>)
 800cfee:	6819      	ldr	r1, [r3, #0]
 800cff0:	69a0      	ldr	r0, [r4, #24]
 800cff2:	f7ff fea7 	bl	800cd44 <displayJPEG>
		displayJPEG(iconName_FX4, iconPosX_FX4, iconPosY_FX4);
 800cff6:	682a      	ldr	r2, [r5, #0]
 800cff8:	4b0a      	ldr	r3, [pc, #40]	; (800d024 <UI_Config_FX+0x120>)
 800cffa:	6819      	ldr	r1, [r3, #0]
 800cffc:	69e0      	ldr	r0, [r4, #28]
 800cffe:	f7ff fea1 	bl	800cd44 <displayJPEG>
}
 800d002:	e7e2      	b.n	800cfca <UI_Config_FX+0xc6>
 800d004:	ffd3d3d3 	.word	0xffd3d3d3
 800d008:	2001878c 	.word	0x2001878c
 800d00c:	20018770 	.word	0x20018770
 800d010:	20018790 	.word	0x20018790
 800d014:	20058b60 	.word	0x20058b60
 800d018:	2001879c 	.word	0x2001879c
 800d01c:	20018a30 	.word	0x20018a30
 800d020:	2001851c 	.word	0x2001851c
 800d024:	200189d0 	.word	0x200189d0
 800d028:	080132b8 	.word	0x080132b8
 800d02c:	080132c0 	.word	0x080132c0
 800d030:	080132cc 	.word	0x080132cc
 800d034:	080132d8 	.word	0x080132d8
 800d038:	20001b34 	.word	0x20001b34
 800d03c:	20000194 	.word	0x20000194
 800d040:	20058a3c 	.word	0x20058a3c

0800d044 <TouchScreen_Handler>:
Struct TouchScreen_Handler(uint16_t fx_state_current, uint16_t usb_state_current, uint16_t sv_state_current) {
 800d044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d048:	4604      	mov	r4, r0
 800d04a:	460d      	mov	r5, r1
 800d04c:	4617      	mov	r7, r2
 800d04e:	461e      	mov	r6, r3
	ui_data.fx_selection_state = fx_state_current;
 800d050:	6001      	str	r1, [r0, #0]
	ui_data.usb_selection_state = usb_state_current;
 800d052:	6042      	str	r2, [r0, #4]
	ui_data.sv_selection_state = sv_state_current;
 800d054:	6083      	str	r3, [r0, #8]
	BSP_TS_GetState(&TS_State);
 800d056:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 800d300 <TouchScreen_Handler+0x2bc>
 800d05a:	4640      	mov	r0, r8
 800d05c:	f7f5 fc42 	bl	80028e4 <BSP_TS_GetState>
	if (TS_State.touchDetected == 1) {
 800d060:	f898 3000 	ldrb.w	r3, [r8]
 800d064:	2b01      	cmp	r3, #1
 800d066:	d002      	beq.n	800d06e <TouchScreen_Handler+0x2a>
}
 800d068:	4620      	mov	r0, r4
 800d06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d06e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d072:	f7f5 f9f9 	bl	8002468 <BSP_LCD_SetTextColor>
		BSP_TS_GetState(&TS_State);
 800d076:	4640      	mov	r0, r8
 800d078:	f7f5 fc34 	bl	80028e4 <BSP_TS_GetState>
		if (menu_state == MAIN_MENU_STATE) {
 800d07c:	4b9f      	ldr	r3, [pc, #636]	; (800d2fc <TouchScreen_Handler+0x2b8>)
 800d07e:	f8d3 8000 	ldr.w	r8, [r3]
 800d082:	f1b8 0f00 	cmp.w	r8, #0
 800d086:	f040 80a0 	bne.w	800d1ca <TouchScreen_Handler+0x186>
			if ((TS_State.touchX[0] > iconPosX_FX) && (TS_State.touchX[0] < iconPosX_FX+iconSize) &&
 800d08a:	4b9d      	ldr	r3, [pc, #628]	; (800d300 <TouchScreen_Handler+0x2bc>)
 800d08c:	885b      	ldrh	r3, [r3, #2]
 800d08e:	4a9d      	ldr	r2, [pc, #628]	; (800d304 <TouchScreen_Handler+0x2c0>)
 800d090:	6812      	ldr	r2, [r2, #0]
 800d092:	4293      	cmp	r3, r2
 800d094:	d90d      	bls.n	800d0b2 <TouchScreen_Handler+0x6e>
 800d096:	499c      	ldr	r1, [pc, #624]	; (800d308 <TouchScreen_Handler+0x2c4>)
 800d098:	6809      	ldr	r1, [r1, #0]
 800d09a:	440a      	add	r2, r1
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d208      	bcs.n	800d0b2 <TouchScreen_Handler+0x6e>
				(TS_State.touchY[0] > iconPosY_FX) && (TS_State.touchY[0] < iconPosY_FX+iconSize))
 800d0a0:	4a97      	ldr	r2, [pc, #604]	; (800d300 <TouchScreen_Handler+0x2bc>)
 800d0a2:	88d2      	ldrh	r2, [r2, #6]
 800d0a4:	4899      	ldr	r0, [pc, #612]	; (800d30c <TouchScreen_Handler+0x2c8>)
 800d0a6:	6800      	ldr	r0, [r0, #0]
			if ((TS_State.touchX[0] > iconPosX_FX) && (TS_State.touchX[0] < iconPosX_FX+iconSize) &&
 800d0a8:	4282      	cmp	r2, r0
 800d0aa:	d902      	bls.n	800d0b2 <TouchScreen_Handler+0x6e>
				(TS_State.touchY[0] > iconPosY_FX) && (TS_State.touchY[0] < iconPosY_FX+iconSize))
 800d0ac:	4401      	add	r1, r0
 800d0ae:	428a      	cmp	r2, r1
 800d0b0:	d372      	bcc.n	800d198 <TouchScreen_Handler+0x154>
			else if ((TS_State.touchX[0] > iconPosX_SV) && (TS_State.touchX[0] < iconPosX_SV+iconSize) &&
 800d0b2:	4a97      	ldr	r2, [pc, #604]	; (800d310 <TouchScreen_Handler+0x2cc>)
 800d0b4:	6812      	ldr	r2, [r2, #0]
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d90d      	bls.n	800d0d6 <TouchScreen_Handler+0x92>
 800d0ba:	4993      	ldr	r1, [pc, #588]	; (800d308 <TouchScreen_Handler+0x2c4>)
 800d0bc:	6809      	ldr	r1, [r1, #0]
 800d0be:	440a      	add	r2, r1
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d208      	bcs.n	800d0d6 <TouchScreen_Handler+0x92>
				(TS_State.touchY[0] > iconPosY_SV) && (TS_State.touchY[0] < iconPosY_SV+iconSize))
 800d0c4:	4b8e      	ldr	r3, [pc, #568]	; (800d300 <TouchScreen_Handler+0x2bc>)
 800d0c6:	88db      	ldrh	r3, [r3, #6]
 800d0c8:	4a92      	ldr	r2, [pc, #584]	; (800d314 <TouchScreen_Handler+0x2d0>)
 800d0ca:	6812      	ldr	r2, [r2, #0]
			else if ((TS_State.touchX[0] > iconPosX_SV) && (TS_State.touchX[0] < iconPosX_SV+iconSize) &&
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d902      	bls.n	800d0d6 <TouchScreen_Handler+0x92>
				(TS_State.touchY[0] > iconPosY_SV) && (TS_State.touchY[0] < iconPosY_SV+iconSize))
 800d0d0:	4411      	add	r1, r2
 800d0d2:	428b      	cmp	r3, r1
 800d0d4:	d363      	bcc.n	800d19e <TouchScreen_Handler+0x15a>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800d0d6:	4890      	ldr	r0, [pc, #576]	; (800d318 <TouchScreen_Handler+0x2d4>)
 800d0d8:	f7f5 f9c6 	bl	8002468 <BSP_LCD_SetTextColor>
				BSP_LCD_DrawRect(iconPosX_FX - 10, iconPosY_FX - 10, iconSize + 20, iconSize + 20);
 800d0dc:	4e8a      	ldr	r6, [pc, #552]	; (800d308 <TouchScreen_Handler+0x2c4>)
 800d0de:	6832      	ldr	r2, [r6, #0]
 800d0e0:	3214      	adds	r2, #20
 800d0e2:	b292      	uxth	r2, r2
 800d0e4:	4b89      	ldr	r3, [pc, #548]	; (800d30c <TouchScreen_Handler+0x2c8>)
 800d0e6:	6819      	ldr	r1, [r3, #0]
 800d0e8:	390a      	subs	r1, #10
 800d0ea:	4b86      	ldr	r3, [pc, #536]	; (800d304 <TouchScreen_Handler+0x2c0>)
 800d0ec:	6818      	ldr	r0, [r3, #0]
 800d0ee:	380a      	subs	r0, #10
 800d0f0:	4613      	mov	r3, r2
 800d0f2:	b289      	uxth	r1, r1
 800d0f4:	b280      	uxth	r0, r0
 800d0f6:	f7f5 fa31 	bl	800255c <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_SV - 10, iconPosY_SV - 10, iconSize + 20, iconSize + 20);
 800d0fa:	6832      	ldr	r2, [r6, #0]
 800d0fc:	3214      	adds	r2, #20
 800d0fe:	b292      	uxth	r2, r2
 800d100:	4b84      	ldr	r3, [pc, #528]	; (800d314 <TouchScreen_Handler+0x2d0>)
 800d102:	6819      	ldr	r1, [r3, #0]
 800d104:	390a      	subs	r1, #10
 800d106:	4b82      	ldr	r3, [pc, #520]	; (800d310 <TouchScreen_Handler+0x2cc>)
 800d108:	6818      	ldr	r0, [r3, #0]
 800d10a:	380a      	subs	r0, #10
 800d10c:	4613      	mov	r3, r2
 800d10e:	b289      	uxth	r1, r1
 800d110:	b280      	uxth	r0, r0
 800d112:	f7f5 fa23 	bl	800255c <BSP_LCD_DrawRect>
			if ((TS_State.touchX[0] > xSize_LCD-160) && (TS_State.touchX[0] < (xSize_LCD-80)+iconSize) &&
 800d116:	4b7a      	ldr	r3, [pc, #488]	; (800d300 <TouchScreen_Handler+0x2bc>)
 800d118:	885a      	ldrh	r2, [r3, #2]
 800d11a:	4b80      	ldr	r3, [pc, #512]	; (800d31c <TouchScreen_Handler+0x2d8>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f1a3 01a0 	sub.w	r1, r3, #160	; 0xa0
 800d122:	428a      	cmp	r2, r1
 800d124:	d928      	bls.n	800d178 <TouchScreen_Handler+0x134>
 800d126:	4978      	ldr	r1, [pc, #480]	; (800d308 <TouchScreen_Handler+0x2c4>)
 800d128:	6809      	ldr	r1, [r1, #0]
 800d12a:	440b      	add	r3, r1
 800d12c:	3b50      	subs	r3, #80	; 0x50
 800d12e:	429a      	cmp	r2, r3
 800d130:	d222      	bcs.n	800d178 <TouchScreen_Handler+0x134>
				(TS_State.touchY[0] > 0) && (TS_State.touchY[0] < 30+iconSize))
 800d132:	4b73      	ldr	r3, [pc, #460]	; (800d300 <TouchScreen_Handler+0x2bc>)
 800d134:	88db      	ldrh	r3, [r3, #6]
			if ((TS_State.touchX[0] > xSize_LCD-160) && (TS_State.touchX[0] < (xSize_LCD-80)+iconSize) &&
 800d136:	b1fb      	cbz	r3, 800d178 <TouchScreen_Handler+0x134>
				(TS_State.touchY[0] > 0) && (TS_State.touchY[0] < 30+iconSize))
 800d138:	311e      	adds	r1, #30
 800d13a:	428b      	cmp	r3, r1
 800d13c:	d21c      	bcs.n	800d178 <TouchScreen_Handler+0x134>
				if (ui_data.usb_selection_state == USB_STATE_OFF) {
 800d13e:	bb8f      	cbnz	r7, 800d1a4 <TouchScreen_Handler+0x160>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d140:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d144:	f7f5 f990 	bl	8002468 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(xSize_LCD-80+iconSize/16, 30+iconSize/16, 3*iconSize/8, 3*iconSize/8);
 800d148:	4b6f      	ldr	r3, [pc, #444]	; (800d308 <TouchScreen_Handler+0x2c4>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f3c3 110f 	ubfx	r1, r3, #4, #16
 800d150:	4a72      	ldr	r2, [pc, #456]	; (800d31c <TouchScreen_Handler+0x2d8>)
 800d152:	6810      	ldr	r0, [r2, #0]
 800d154:	4408      	add	r0, r1
 800d156:	b280      	uxth	r0, r0
 800d158:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d15c:	f3c3 02cf 	ubfx	r2, r3, #3, #16
 800d160:	311e      	adds	r1, #30
 800d162:	3850      	subs	r0, #80	; 0x50
 800d164:	4613      	mov	r3, r2
 800d166:	b289      	uxth	r1, r1
 800d168:	b280      	uxth	r0, r0
 800d16a:	f7f5 fa11 	bl	8002590 <BSP_LCD_FillRect>
					ui_data.usb_selection_state = USB_STATE_ON;
 800d16e:	2301      	movs	r3, #1
 800d170:	6063      	str	r3, [r4, #4]
				HAL_Delay(200);
 800d172:	20c8      	movs	r0, #200	; 0xc8
 800d174:	f7f7 ff1a 	bl	8004fac <HAL_Delay>
		if (menu_selection_state == 1) { // FX Menu
 800d178:	f1b8 0f01 	cmp.w	r8, #1
 800d17c:	f000 81df 	beq.w	800d53e <TouchScreen_Handler+0x4fa>
		} else if (menu_selection_state == 2) { // Signal Viewer
 800d180:	f1b8 0f02 	cmp.w	r8, #2
 800d184:	f47f af70 	bne.w	800d068 <TouchScreen_Handler+0x24>
			UI_Config_SV(SV_STATE_SCOPE);
 800d188:	2000      	movs	r0, #0
 800d18a:	f7ff fc7f 	bl	800ca8c <UI_Config_SV>
			menu_state = SV_MENU_STATE;
 800d18e:	4b5b      	ldr	r3, [pc, #364]	; (800d2fc <TouchScreen_Handler+0x2b8>)
 800d190:	2202      	movs	r2, #2
 800d192:	601a      	str	r2, [r3, #0]
			ui_data.fx_selection_state = fx_state_current;
 800d194:	6025      	str	r5, [r4, #0]
	return ui_data;
 800d196:	e767      	b.n	800d068 <TouchScreen_Handler+0x24>
				menu_selection_state = 1;
 800d198:	f04f 0801 	mov.w	r8, #1
 800d19c:	e7bb      	b.n	800d116 <TouchScreen_Handler+0xd2>
				menu_selection_state = 2;
 800d19e:	f04f 0802 	mov.w	r8, #2
 800d1a2:	e7b8      	b.n	800d116 <TouchScreen_Handler+0xd2>
					BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1a8:	f7f5 f95e 	bl	8002468 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(xSize_LCD-80, 30, iconSize/2, iconSize/2);
 800d1ac:	4b56      	ldr	r3, [pc, #344]	; (800d308 <TouchScreen_Handler+0x2c4>)
 800d1ae:	681a      	ldr	r2, [r3, #0]
 800d1b0:	f3c2 024f 	ubfx	r2, r2, #1, #16
 800d1b4:	4b59      	ldr	r3, [pc, #356]	; (800d31c <TouchScreen_Handler+0x2d8>)
 800d1b6:	6818      	ldr	r0, [r3, #0]
 800d1b8:	3850      	subs	r0, #80	; 0x50
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	211e      	movs	r1, #30
 800d1be:	b280      	uxth	r0, r0
 800d1c0:	f7f5 f9e6 	bl	8002590 <BSP_LCD_FillRect>
					ui_data.usb_selection_state = USB_STATE_OFF;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	6063      	str	r3, [r4, #4]
 800d1c8:	e7d3      	b.n	800d172 <TouchScreen_Handler+0x12e>
		else if (menu_state == FX_MENU_STATE) {
 800d1ca:	f1b8 0f01 	cmp.w	r8, #1
 800d1ce:	d006      	beq.n	800d1de <TouchScreen_Handler+0x19a>
		else if (menu_state == SV_MENU_STATE) {
 800d1d0:	f1b8 0f02 	cmp.w	r8, #2
 800d1d4:	f000 81a5 	beq.w	800d522 <TouchScreen_Handler+0x4de>
	int menu_selection_state = 0;
 800d1d8:	f04f 0800 	mov.w	r8, #0
 800d1dc:	e7d0      	b.n	800d180 <TouchScreen_Handler+0x13c>
			if ((TS_State.touchX[0] > iconPosX_FX1) && (TS_State.touchX[0] < iconPosX_FX1+iconSize) &&
 800d1de:	4b48      	ldr	r3, [pc, #288]	; (800d300 <TouchScreen_Handler+0x2bc>)
 800d1e0:	885b      	ldrh	r3, [r3, #2]
 800d1e2:	4a4f      	ldr	r2, [pc, #316]	; (800d320 <TouchScreen_Handler+0x2dc>)
 800d1e4:	6810      	ldr	r0, [r2, #0]
 800d1e6:	4283      	cmp	r3, r0
 800d1e8:	d90e      	bls.n	800d208 <TouchScreen_Handler+0x1c4>
 800d1ea:	4a47      	ldr	r2, [pc, #284]	; (800d308 <TouchScreen_Handler+0x2c4>)
 800d1ec:	6812      	ldr	r2, [r2, #0]
 800d1ee:	1881      	adds	r1, r0, r2
 800d1f0:	428b      	cmp	r3, r1
 800d1f2:	d209      	bcs.n	800d208 <TouchScreen_Handler+0x1c4>
				(TS_State.touchY[0] > iconPosY_FX1) && (TS_State.touchY[0] < iconPosY_FX1+iconSize))
 800d1f4:	4942      	ldr	r1, [pc, #264]	; (800d300 <TouchScreen_Handler+0x2bc>)
 800d1f6:	88ce      	ldrh	r6, [r1, #6]
 800d1f8:	494a      	ldr	r1, [pc, #296]	; (800d324 <TouchScreen_Handler+0x2e0>)
 800d1fa:	6809      	ldr	r1, [r1, #0]
			if ((TS_State.touchX[0] > iconPosX_FX1) && (TS_State.touchX[0] < iconPosX_FX1+iconSize) &&
 800d1fc:	428e      	cmp	r6, r1
 800d1fe:	d903      	bls.n	800d208 <TouchScreen_Handler+0x1c4>
				(TS_State.touchY[0] > iconPosY_FX1) && (TS_State.touchY[0] < iconPosY_FX1+iconSize))
 800d200:	1857      	adds	r7, r2, r1
 800d202:	42be      	cmp	r6, r7
 800d204:	f0c0 809c 	bcc.w	800d340 <TouchScreen_Handler+0x2fc>
			else if ((TS_State.touchX[0] > iconPosX_FX2) && (TS_State.touchX[0] < iconPosX_FX2+iconSize) &&
 800d208:	4a47      	ldr	r2, [pc, #284]	; (800d328 <TouchScreen_Handler+0x2e4>)
 800d20a:	6810      	ldr	r0, [r2, #0]
 800d20c:	4283      	cmp	r3, r0
 800d20e:	d90e      	bls.n	800d22e <TouchScreen_Handler+0x1ea>
 800d210:	4a3d      	ldr	r2, [pc, #244]	; (800d308 <TouchScreen_Handler+0x2c4>)
 800d212:	6812      	ldr	r2, [r2, #0]
 800d214:	1881      	adds	r1, r0, r2
 800d216:	428b      	cmp	r3, r1
 800d218:	d209      	bcs.n	800d22e <TouchScreen_Handler+0x1ea>
					(TS_State.touchY[0] > iconPosY_FX2) && (TS_State.touchY[0] < iconPosY_FX2+iconSize))
 800d21a:	4939      	ldr	r1, [pc, #228]	; (800d300 <TouchScreen_Handler+0x2bc>)
 800d21c:	88ce      	ldrh	r6, [r1, #6]
 800d21e:	4943      	ldr	r1, [pc, #268]	; (800d32c <TouchScreen_Handler+0x2e8>)
 800d220:	6809      	ldr	r1, [r1, #0]
			else if ((TS_State.touchX[0] > iconPosX_FX2) && (TS_State.touchX[0] < iconPosX_FX2+iconSize) &&
 800d222:	428e      	cmp	r6, r1
 800d224:	d903      	bls.n	800d22e <TouchScreen_Handler+0x1ea>
					(TS_State.touchY[0] > iconPosY_FX2) && (TS_State.touchY[0] < iconPosY_FX2+iconSize))
 800d226:	1857      	adds	r7, r2, r1
 800d228:	42be      	cmp	r6, r7
 800d22a:	f0c0 80c5 	bcc.w	800d3b8 <TouchScreen_Handler+0x374>
			else if ((TS_State.touchX[0] > iconPosX_FX3) && (TS_State.touchX[0] < iconPosX_FX3+iconSize) &&
 800d22e:	4a40      	ldr	r2, [pc, #256]	; (800d330 <TouchScreen_Handler+0x2ec>)
 800d230:	6810      	ldr	r0, [r2, #0]
 800d232:	4283      	cmp	r3, r0
 800d234:	d90e      	bls.n	800d254 <TouchScreen_Handler+0x210>
 800d236:	4a34      	ldr	r2, [pc, #208]	; (800d308 <TouchScreen_Handler+0x2c4>)
 800d238:	6812      	ldr	r2, [r2, #0]
 800d23a:	1881      	adds	r1, r0, r2
 800d23c:	428b      	cmp	r3, r1
 800d23e:	d209      	bcs.n	800d254 <TouchScreen_Handler+0x210>
					(TS_State.touchY[0] > iconPosY_FX3) && (TS_State.touchY[0] < iconPosY_FX3+iconSize))
 800d240:	492f      	ldr	r1, [pc, #188]	; (800d300 <TouchScreen_Handler+0x2bc>)
 800d242:	88ce      	ldrh	r6, [r1, #6]
 800d244:	493b      	ldr	r1, [pc, #236]	; (800d334 <TouchScreen_Handler+0x2f0>)
 800d246:	6809      	ldr	r1, [r1, #0]
			else if ((TS_State.touchX[0] > iconPosX_FX3) && (TS_State.touchX[0] < iconPosX_FX3+iconSize) &&
 800d248:	428e      	cmp	r6, r1
 800d24a:	d903      	bls.n	800d254 <TouchScreen_Handler+0x210>
					(TS_State.touchY[0] > iconPosY_FX3) && (TS_State.touchY[0] < iconPosY_FX3+iconSize))
 800d24c:	1857      	adds	r7, r2, r1
 800d24e:	42be      	cmp	r6, r7
 800d250:	f0c0 80ee 	bcc.w	800d430 <TouchScreen_Handler+0x3ec>
			else if ((TS_State.touchX[0] > iconPosX_FX4) && (TS_State.touchX[0] < iconPosX_FX4+iconSize) &&
 800d254:	4a38      	ldr	r2, [pc, #224]	; (800d338 <TouchScreen_Handler+0x2f4>)
 800d256:	6810      	ldr	r0, [r2, #0]
 800d258:	4283      	cmp	r3, r0
 800d25a:	d90e      	bls.n	800d27a <TouchScreen_Handler+0x236>
 800d25c:	4a2a      	ldr	r2, [pc, #168]	; (800d308 <TouchScreen_Handler+0x2c4>)
 800d25e:	6812      	ldr	r2, [r2, #0]
 800d260:	1881      	adds	r1, r0, r2
 800d262:	428b      	cmp	r3, r1
 800d264:	d209      	bcs.n	800d27a <TouchScreen_Handler+0x236>
					(TS_State.touchY[0] > iconPosY_FX4) && (TS_State.touchY[0] < iconPosY_FX4+iconSize))
 800d266:	4b26      	ldr	r3, [pc, #152]	; (800d300 <TouchScreen_Handler+0x2bc>)
 800d268:	88d9      	ldrh	r1, [r3, #6]
 800d26a:	4b34      	ldr	r3, [pc, #208]	; (800d33c <TouchScreen_Handler+0x2f8>)
 800d26c:	681b      	ldr	r3, [r3, #0]
			else if ((TS_State.touchX[0] > iconPosX_FX4) && (TS_State.touchX[0] < iconPosX_FX4+iconSize) &&
 800d26e:	4299      	cmp	r1, r3
 800d270:	d903      	bls.n	800d27a <TouchScreen_Handler+0x236>
					(TS_State.touchY[0] > iconPosY_FX4) && (TS_State.touchY[0] < iconPosY_FX4+iconSize))
 800d272:	18d6      	adds	r6, r2, r3
 800d274:	42b1      	cmp	r1, r6
 800d276:	f0c0 8117 	bcc.w	800d4a8 <TouchScreen_Handler+0x464>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800d27a:	4827      	ldr	r0, [pc, #156]	; (800d318 <TouchScreen_Handler+0x2d4>)
 800d27c:	f7f5 f8f4 	bl	8002468 <BSP_LCD_SetTextColor>
				BSP_LCD_DrawRect(iconPosX_FX1 - 10, iconPosY_FX1 - 10, iconSize + 20, iconSize + 20);
 800d280:	4e21      	ldr	r6, [pc, #132]	; (800d308 <TouchScreen_Handler+0x2c4>)
 800d282:	6832      	ldr	r2, [r6, #0]
 800d284:	3214      	adds	r2, #20
 800d286:	b292      	uxth	r2, r2
 800d288:	4b26      	ldr	r3, [pc, #152]	; (800d324 <TouchScreen_Handler+0x2e0>)
 800d28a:	6819      	ldr	r1, [r3, #0]
 800d28c:	390a      	subs	r1, #10
 800d28e:	4b24      	ldr	r3, [pc, #144]	; (800d320 <TouchScreen_Handler+0x2dc>)
 800d290:	6818      	ldr	r0, [r3, #0]
 800d292:	380a      	subs	r0, #10
 800d294:	4613      	mov	r3, r2
 800d296:	b289      	uxth	r1, r1
 800d298:	b280      	uxth	r0, r0
 800d29a:	f7f5 f95f 	bl	800255c <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX2 - 10, iconPosY_FX2 - 10, iconSize + 20, iconSize + 20);
 800d29e:	6832      	ldr	r2, [r6, #0]
 800d2a0:	3214      	adds	r2, #20
 800d2a2:	b292      	uxth	r2, r2
 800d2a4:	4b21      	ldr	r3, [pc, #132]	; (800d32c <TouchScreen_Handler+0x2e8>)
 800d2a6:	6819      	ldr	r1, [r3, #0]
 800d2a8:	390a      	subs	r1, #10
 800d2aa:	4b1f      	ldr	r3, [pc, #124]	; (800d328 <TouchScreen_Handler+0x2e4>)
 800d2ac:	6818      	ldr	r0, [r3, #0]
 800d2ae:	380a      	subs	r0, #10
 800d2b0:	4613      	mov	r3, r2
 800d2b2:	b289      	uxth	r1, r1
 800d2b4:	b280      	uxth	r0, r0
 800d2b6:	f7f5 f951 	bl	800255c <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX3 - 10, iconPosY_FX3 - 10, iconSize + 20, iconSize + 20);
 800d2ba:	6832      	ldr	r2, [r6, #0]
 800d2bc:	3214      	adds	r2, #20
 800d2be:	b292      	uxth	r2, r2
 800d2c0:	4b1c      	ldr	r3, [pc, #112]	; (800d334 <TouchScreen_Handler+0x2f0>)
 800d2c2:	6819      	ldr	r1, [r3, #0]
 800d2c4:	390a      	subs	r1, #10
 800d2c6:	4b1a      	ldr	r3, [pc, #104]	; (800d330 <TouchScreen_Handler+0x2ec>)
 800d2c8:	6818      	ldr	r0, [r3, #0]
 800d2ca:	380a      	subs	r0, #10
 800d2cc:	4613      	mov	r3, r2
 800d2ce:	b289      	uxth	r1, r1
 800d2d0:	b280      	uxth	r0, r0
 800d2d2:	f7f5 f943 	bl	800255c <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX4 - 10, iconPosY_FX4 - 10, iconSize + 20, iconSize + 20);
 800d2d6:	6832      	ldr	r2, [r6, #0]
 800d2d8:	3214      	adds	r2, #20
 800d2da:	b292      	uxth	r2, r2
 800d2dc:	4b17      	ldr	r3, [pc, #92]	; (800d33c <TouchScreen_Handler+0x2f8>)
 800d2de:	6819      	ldr	r1, [r3, #0]
 800d2e0:	390a      	subs	r1, #10
 800d2e2:	4b15      	ldr	r3, [pc, #84]	; (800d338 <TouchScreen_Handler+0x2f4>)
 800d2e4:	6818      	ldr	r0, [r3, #0]
 800d2e6:	380a      	subs	r0, #10
 800d2e8:	4613      	mov	r3, r2
 800d2ea:	b289      	uxth	r1, r1
 800d2ec:	b280      	uxth	r0, r0
 800d2ee:	f7f5 f935 	bl	800255c <BSP_LCD_DrawRect>
				ui_data.fx_selection_state = FX_STATE_NONE;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	6023      	str	r3, [r4, #0]
	int menu_selection_state = 0;
 800d2f6:	4698      	mov	r8, r3
 800d2f8:	e742      	b.n	800d180 <TouchScreen_Handler+0x13c>
 800d2fa:	bf00      	nop
 800d2fc:	20001b34 	.word	0x20001b34
 800d300:	20058b54 	.word	0x20058b54
 800d304:	20058a40 	.word	0x20058a40
 800d308:	2001878c 	.word	0x2001878c
 800d30c:	200189d4 	.word	0x200189d4
 800d310:	20018798 	.word	0x20018798
 800d314:	20058af8 	.word	0x20058af8
 800d318:	ffd3d3d3 	.word	0xffd3d3d3
 800d31c:	20018518 	.word	0x20018518
 800d320:	20018770 	.word	0x20018770
 800d324:	20058a3c 	.word	0x20058a3c
 800d328:	20058b60 	.word	0x20058b60
 800d32c:	20018790 	.word	0x20018790
 800d330:	20018a30 	.word	0x20018a30
 800d334:	2001879c 	.word	0x2001879c
 800d338:	200189d0 	.word	0x200189d0
 800d33c:	2001851c 	.word	0x2001851c
				BSP_LCD_DrawRect(iconPosX_FX1 - 10, iconPosY_FX1 - 10, iconSize + 20, iconSize + 20);
 800d340:	3214      	adds	r2, #20
 800d342:	b292      	uxth	r2, r2
 800d344:	390a      	subs	r1, #10
 800d346:	380a      	subs	r0, #10
 800d348:	4613      	mov	r3, r2
 800d34a:	b289      	uxth	r1, r1
 800d34c:	b280      	uxth	r0, r0
 800d34e:	f7f5 f905 	bl	800255c <BSP_LCD_DrawRect>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800d352:	48a5      	ldr	r0, [pc, #660]	; (800d5e8 <TouchScreen_Handler+0x5a4>)
 800d354:	f7f5 f888 	bl	8002468 <BSP_LCD_SetTextColor>
				BSP_LCD_DrawRect(iconPosX_FX2 - 10, iconPosY_FX2 - 10, iconSize + 20, iconSize + 20);
 800d358:	4ea4      	ldr	r6, [pc, #656]	; (800d5ec <TouchScreen_Handler+0x5a8>)
 800d35a:	6833      	ldr	r3, [r6, #0]
 800d35c:	3314      	adds	r3, #20
 800d35e:	b29a      	uxth	r2, r3
 800d360:	4ba3      	ldr	r3, [pc, #652]	; (800d5f0 <TouchScreen_Handler+0x5ac>)
 800d362:	6819      	ldr	r1, [r3, #0]
 800d364:	390a      	subs	r1, #10
 800d366:	4ba3      	ldr	r3, [pc, #652]	; (800d5f4 <TouchScreen_Handler+0x5b0>)
 800d368:	6818      	ldr	r0, [r3, #0]
 800d36a:	380a      	subs	r0, #10
 800d36c:	4613      	mov	r3, r2
 800d36e:	b289      	uxth	r1, r1
 800d370:	b280      	uxth	r0, r0
 800d372:	f7f5 f8f3 	bl	800255c <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX3 - 10, iconPosY_FX3 - 10, iconSize + 20, iconSize + 20);
 800d376:	6833      	ldr	r3, [r6, #0]
 800d378:	3314      	adds	r3, #20
 800d37a:	b29a      	uxth	r2, r3
 800d37c:	4b9e      	ldr	r3, [pc, #632]	; (800d5f8 <TouchScreen_Handler+0x5b4>)
 800d37e:	6819      	ldr	r1, [r3, #0]
 800d380:	390a      	subs	r1, #10
 800d382:	4b9e      	ldr	r3, [pc, #632]	; (800d5fc <TouchScreen_Handler+0x5b8>)
 800d384:	6818      	ldr	r0, [r3, #0]
 800d386:	380a      	subs	r0, #10
 800d388:	4613      	mov	r3, r2
 800d38a:	b289      	uxth	r1, r1
 800d38c:	b280      	uxth	r0, r0
 800d38e:	f7f5 f8e5 	bl	800255c <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX4 - 10, iconPosY_FX4 - 10, iconSize + 20, iconSize + 20);
 800d392:	6832      	ldr	r2, [r6, #0]
 800d394:	3214      	adds	r2, #20
 800d396:	b292      	uxth	r2, r2
 800d398:	4b99      	ldr	r3, [pc, #612]	; (800d600 <TouchScreen_Handler+0x5bc>)
 800d39a:	6819      	ldr	r1, [r3, #0]
 800d39c:	390a      	subs	r1, #10
 800d39e:	4b99      	ldr	r3, [pc, #612]	; (800d604 <TouchScreen_Handler+0x5c0>)
 800d3a0:	6818      	ldr	r0, [r3, #0]
 800d3a2:	380a      	subs	r0, #10
 800d3a4:	4613      	mov	r3, r2
 800d3a6:	b289      	uxth	r1, r1
 800d3a8:	b280      	uxth	r0, r0
 800d3aa:	f7f5 f8d7 	bl	800255c <BSP_LCD_DrawRect>
				ui_data.fx_selection_state = FX_STATE_1;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	6023      	str	r3, [r4, #0]
	int menu_selection_state = 0;
 800d3b2:	f04f 0800 	mov.w	r8, #0
 800d3b6:	e6e3      	b.n	800d180 <TouchScreen_Handler+0x13c>
				BSP_LCD_DrawRect(iconPosX_FX2 - 10, iconPosY_FX2 - 10, iconSize + 20, iconSize + 20);
 800d3b8:	3214      	adds	r2, #20
 800d3ba:	b292      	uxth	r2, r2
 800d3bc:	390a      	subs	r1, #10
 800d3be:	380a      	subs	r0, #10
 800d3c0:	4613      	mov	r3, r2
 800d3c2:	b289      	uxth	r1, r1
 800d3c4:	b280      	uxth	r0, r0
 800d3c6:	f7f5 f8c9 	bl	800255c <BSP_LCD_DrawRect>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800d3ca:	4887      	ldr	r0, [pc, #540]	; (800d5e8 <TouchScreen_Handler+0x5a4>)
 800d3cc:	f7f5 f84c 	bl	8002468 <BSP_LCD_SetTextColor>
				BSP_LCD_DrawRect(iconPosX_FX1 - 10, iconPosY_FX1 - 10, iconSize + 20, iconSize + 20);
 800d3d0:	4e86      	ldr	r6, [pc, #536]	; (800d5ec <TouchScreen_Handler+0x5a8>)
 800d3d2:	6833      	ldr	r3, [r6, #0]
 800d3d4:	3314      	adds	r3, #20
 800d3d6:	b29a      	uxth	r2, r3
 800d3d8:	4b8b      	ldr	r3, [pc, #556]	; (800d608 <TouchScreen_Handler+0x5c4>)
 800d3da:	6819      	ldr	r1, [r3, #0]
 800d3dc:	390a      	subs	r1, #10
 800d3de:	4b8b      	ldr	r3, [pc, #556]	; (800d60c <TouchScreen_Handler+0x5c8>)
 800d3e0:	6818      	ldr	r0, [r3, #0]
 800d3e2:	380a      	subs	r0, #10
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	b289      	uxth	r1, r1
 800d3e8:	b280      	uxth	r0, r0
 800d3ea:	f7f5 f8b7 	bl	800255c <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX3 - 10, iconPosY_FX3 - 10, iconSize + 20, iconSize + 20);
 800d3ee:	6833      	ldr	r3, [r6, #0]
 800d3f0:	3314      	adds	r3, #20
 800d3f2:	b29a      	uxth	r2, r3
 800d3f4:	4b80      	ldr	r3, [pc, #512]	; (800d5f8 <TouchScreen_Handler+0x5b4>)
 800d3f6:	6819      	ldr	r1, [r3, #0]
 800d3f8:	390a      	subs	r1, #10
 800d3fa:	4b80      	ldr	r3, [pc, #512]	; (800d5fc <TouchScreen_Handler+0x5b8>)
 800d3fc:	6818      	ldr	r0, [r3, #0]
 800d3fe:	380a      	subs	r0, #10
 800d400:	4613      	mov	r3, r2
 800d402:	b289      	uxth	r1, r1
 800d404:	b280      	uxth	r0, r0
 800d406:	f7f5 f8a9 	bl	800255c <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX4 - 10, iconPosY_FX4 - 10, iconSize + 20, iconSize + 20);
 800d40a:	6832      	ldr	r2, [r6, #0]
 800d40c:	3214      	adds	r2, #20
 800d40e:	b292      	uxth	r2, r2
 800d410:	4b7b      	ldr	r3, [pc, #492]	; (800d600 <TouchScreen_Handler+0x5bc>)
 800d412:	6819      	ldr	r1, [r3, #0]
 800d414:	390a      	subs	r1, #10
 800d416:	4b7b      	ldr	r3, [pc, #492]	; (800d604 <TouchScreen_Handler+0x5c0>)
 800d418:	6818      	ldr	r0, [r3, #0]
 800d41a:	380a      	subs	r0, #10
 800d41c:	4613      	mov	r3, r2
 800d41e:	b289      	uxth	r1, r1
 800d420:	b280      	uxth	r0, r0
 800d422:	f7f5 f89b 	bl	800255c <BSP_LCD_DrawRect>
				ui_data.fx_selection_state = FX_STATE_2;
 800d426:	2302      	movs	r3, #2
 800d428:	6023      	str	r3, [r4, #0]
	int menu_selection_state = 0;
 800d42a:	f04f 0800 	mov.w	r8, #0
 800d42e:	e6a7      	b.n	800d180 <TouchScreen_Handler+0x13c>
				BSP_LCD_DrawRect(iconPosX_FX3 - 10, iconPosY_FX3 - 10, iconSize + 20, iconSize + 20);
 800d430:	3214      	adds	r2, #20
 800d432:	b292      	uxth	r2, r2
 800d434:	390a      	subs	r1, #10
 800d436:	380a      	subs	r0, #10
 800d438:	4613      	mov	r3, r2
 800d43a:	b289      	uxth	r1, r1
 800d43c:	b280      	uxth	r0, r0
 800d43e:	f7f5 f88d 	bl	800255c <BSP_LCD_DrawRect>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800d442:	4869      	ldr	r0, [pc, #420]	; (800d5e8 <TouchScreen_Handler+0x5a4>)
 800d444:	f7f5 f810 	bl	8002468 <BSP_LCD_SetTextColor>
				BSP_LCD_DrawRect(iconPosX_FX1 - 10, iconPosY_FX1 - 10, iconSize + 20, iconSize + 20);
 800d448:	4e68      	ldr	r6, [pc, #416]	; (800d5ec <TouchScreen_Handler+0x5a8>)
 800d44a:	6833      	ldr	r3, [r6, #0]
 800d44c:	3314      	adds	r3, #20
 800d44e:	b29a      	uxth	r2, r3
 800d450:	4b6d      	ldr	r3, [pc, #436]	; (800d608 <TouchScreen_Handler+0x5c4>)
 800d452:	6819      	ldr	r1, [r3, #0]
 800d454:	390a      	subs	r1, #10
 800d456:	4b6d      	ldr	r3, [pc, #436]	; (800d60c <TouchScreen_Handler+0x5c8>)
 800d458:	6818      	ldr	r0, [r3, #0]
 800d45a:	380a      	subs	r0, #10
 800d45c:	4613      	mov	r3, r2
 800d45e:	b289      	uxth	r1, r1
 800d460:	b280      	uxth	r0, r0
 800d462:	f7f5 f87b 	bl	800255c <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX2 - 10, iconPosY_FX2 - 10, iconSize + 20, iconSize + 20);
 800d466:	6833      	ldr	r3, [r6, #0]
 800d468:	3314      	adds	r3, #20
 800d46a:	b29a      	uxth	r2, r3
 800d46c:	4b60      	ldr	r3, [pc, #384]	; (800d5f0 <TouchScreen_Handler+0x5ac>)
 800d46e:	6819      	ldr	r1, [r3, #0]
 800d470:	390a      	subs	r1, #10
 800d472:	4b60      	ldr	r3, [pc, #384]	; (800d5f4 <TouchScreen_Handler+0x5b0>)
 800d474:	6818      	ldr	r0, [r3, #0]
 800d476:	380a      	subs	r0, #10
 800d478:	4613      	mov	r3, r2
 800d47a:	b289      	uxth	r1, r1
 800d47c:	b280      	uxth	r0, r0
 800d47e:	f7f5 f86d 	bl	800255c <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX4 - 10, iconPosY_FX4 - 10, iconSize + 20, iconSize + 20);
 800d482:	6832      	ldr	r2, [r6, #0]
 800d484:	3214      	adds	r2, #20
 800d486:	b292      	uxth	r2, r2
 800d488:	4b5d      	ldr	r3, [pc, #372]	; (800d600 <TouchScreen_Handler+0x5bc>)
 800d48a:	6819      	ldr	r1, [r3, #0]
 800d48c:	390a      	subs	r1, #10
 800d48e:	4b5d      	ldr	r3, [pc, #372]	; (800d604 <TouchScreen_Handler+0x5c0>)
 800d490:	6818      	ldr	r0, [r3, #0]
 800d492:	380a      	subs	r0, #10
 800d494:	4613      	mov	r3, r2
 800d496:	b289      	uxth	r1, r1
 800d498:	b280      	uxth	r0, r0
 800d49a:	f7f5 f85f 	bl	800255c <BSP_LCD_DrawRect>
				ui_data.fx_selection_state = FX_STATE_3;
 800d49e:	2303      	movs	r3, #3
 800d4a0:	6023      	str	r3, [r4, #0]
	int menu_selection_state = 0;
 800d4a2:	f04f 0800 	mov.w	r8, #0
 800d4a6:	e66b      	b.n	800d180 <TouchScreen_Handler+0x13c>
				BSP_LCD_DrawRect(iconPosX_FX4 - 10, iconPosY_FX4 - 10, iconSize + 20, iconSize + 20);
 800d4a8:	3214      	adds	r2, #20
 800d4aa:	b292      	uxth	r2, r2
 800d4ac:	f1a3 010a 	sub.w	r1, r3, #10
 800d4b0:	380a      	subs	r0, #10
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	b289      	uxth	r1, r1
 800d4b6:	b280      	uxth	r0, r0
 800d4b8:	f7f5 f850 	bl	800255c <BSP_LCD_DrawRect>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800d4bc:	484a      	ldr	r0, [pc, #296]	; (800d5e8 <TouchScreen_Handler+0x5a4>)
 800d4be:	f7f4 ffd3 	bl	8002468 <BSP_LCD_SetTextColor>
				BSP_LCD_DrawRect(iconPosX_FX1 - 10, iconPosY_FX1 - 10, iconSize + 20, iconSize + 20);
 800d4c2:	4e4a      	ldr	r6, [pc, #296]	; (800d5ec <TouchScreen_Handler+0x5a8>)
 800d4c4:	6833      	ldr	r3, [r6, #0]
 800d4c6:	3314      	adds	r3, #20
 800d4c8:	b29a      	uxth	r2, r3
 800d4ca:	4b4f      	ldr	r3, [pc, #316]	; (800d608 <TouchScreen_Handler+0x5c4>)
 800d4cc:	6819      	ldr	r1, [r3, #0]
 800d4ce:	390a      	subs	r1, #10
 800d4d0:	4b4e      	ldr	r3, [pc, #312]	; (800d60c <TouchScreen_Handler+0x5c8>)
 800d4d2:	6818      	ldr	r0, [r3, #0]
 800d4d4:	380a      	subs	r0, #10
 800d4d6:	4613      	mov	r3, r2
 800d4d8:	b289      	uxth	r1, r1
 800d4da:	b280      	uxth	r0, r0
 800d4dc:	f7f5 f83e 	bl	800255c <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX2 - 10, iconPosY_FX2 - 10, iconSize + 20, iconSize + 20);
 800d4e0:	6833      	ldr	r3, [r6, #0]
 800d4e2:	3314      	adds	r3, #20
 800d4e4:	b29a      	uxth	r2, r3
 800d4e6:	4b42      	ldr	r3, [pc, #264]	; (800d5f0 <TouchScreen_Handler+0x5ac>)
 800d4e8:	6819      	ldr	r1, [r3, #0]
 800d4ea:	390a      	subs	r1, #10
 800d4ec:	4b41      	ldr	r3, [pc, #260]	; (800d5f4 <TouchScreen_Handler+0x5b0>)
 800d4ee:	6818      	ldr	r0, [r3, #0]
 800d4f0:	380a      	subs	r0, #10
 800d4f2:	4613      	mov	r3, r2
 800d4f4:	b289      	uxth	r1, r1
 800d4f6:	b280      	uxth	r0, r0
 800d4f8:	f7f5 f830 	bl	800255c <BSP_LCD_DrawRect>
				BSP_LCD_DrawRect(iconPosX_FX3 - 10, iconPosY_FX3 - 10, iconSize + 20, iconSize + 20);
 800d4fc:	6832      	ldr	r2, [r6, #0]
 800d4fe:	3214      	adds	r2, #20
 800d500:	b292      	uxth	r2, r2
 800d502:	4b3d      	ldr	r3, [pc, #244]	; (800d5f8 <TouchScreen_Handler+0x5b4>)
 800d504:	6819      	ldr	r1, [r3, #0]
 800d506:	390a      	subs	r1, #10
 800d508:	4b3c      	ldr	r3, [pc, #240]	; (800d5fc <TouchScreen_Handler+0x5b8>)
 800d50a:	6818      	ldr	r0, [r3, #0]
 800d50c:	380a      	subs	r0, #10
 800d50e:	4613      	mov	r3, r2
 800d510:	b289      	uxth	r1, r1
 800d512:	b280      	uxth	r0, r0
 800d514:	f7f5 f822 	bl	800255c <BSP_LCD_DrawRect>
				ui_data.fx_selection_state = FX_STATE_4;
 800d518:	2304      	movs	r3, #4
 800d51a:	6023      	str	r3, [r4, #0]
	int menu_selection_state = 0;
 800d51c:	f04f 0800 	mov.w	r8, #0
 800d520:	e62e      	b.n	800d180 <TouchScreen_Handler+0x13c>
			if (sv_state_current == SV_STATE_SCOPE) {
 800d522:	b93e      	cbnz	r6, 800d534 <TouchScreen_Handler+0x4f0>
				ui_data.sv_selection_state = SV_STATE_SPECTRUM;
 800d524:	2301      	movs	r3, #1
 800d526:	60a3      	str	r3, [r4, #8]
			HAL_Delay(100);
 800d528:	2064      	movs	r0, #100	; 0x64
 800d52a:	f7f7 fd3f 	bl	8004fac <HAL_Delay>
	int menu_selection_state = 0;
 800d52e:	f04f 0800 	mov.w	r8, #0
 800d532:	e625      	b.n	800d180 <TouchScreen_Handler+0x13c>
			else if (sv_state_current == SV_STATE_SPECTRUM) {
 800d534:	2e01      	cmp	r6, #1
 800d536:	d1f7      	bne.n	800d528 <TouchScreen_Handler+0x4e4>
				ui_data.sv_selection_state = SV_STATE_SCOPE;
 800d538:	2300      	movs	r3, #0
 800d53a:	60a3      	str	r3, [r4, #8]
 800d53c:	e7f4      	b.n	800d528 <TouchScreen_Handler+0x4e4>
			UI_Config_FX();
 800d53e:	f7ff fce1 	bl	800cf04 <UI_Config_FX>
			menu_state = FX_MENU_STATE;
 800d542:	4b33      	ldr	r3, [pc, #204]	; (800d610 <TouchScreen_Handler+0x5cc>)
 800d544:	2201      	movs	r2, #1
 800d546:	601a      	str	r2, [r3, #0]
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d548:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d54c:	f7f4 ff8c 	bl	8002468 <BSP_LCD_SetTextColor>
			if (ui_data.fx_selection_state == FX_STATE_1) {
 800d550:	2d01      	cmp	r5, #1
 800d552:	d009      	beq.n	800d568 <TouchScreen_Handler+0x524>
			} else if (ui_data.fx_selection_state == FX_STATE_2) {
 800d554:	2d02      	cmp	r5, #2
 800d556:	d017      	beq.n	800d588 <TouchScreen_Handler+0x544>
			} else if (ui_data.fx_selection_state == FX_STATE_3) {
 800d558:	2d03      	cmp	r5, #3
 800d55a:	d025      	beq.n	800d5a8 <TouchScreen_Handler+0x564>
			} else if (ui_data.fx_selection_state == FX_STATE_4) {
 800d55c:	2d04      	cmp	r5, #4
 800d55e:	d033      	beq.n	800d5c8 <TouchScreen_Handler+0x584>
			BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800d560:	4821      	ldr	r0, [pc, #132]	; (800d5e8 <TouchScreen_Handler+0x5a4>)
 800d562:	f7f4 ff81 	bl	8002468 <BSP_LCD_SetTextColor>
 800d566:	e57f      	b.n	800d068 <TouchScreen_Handler+0x24>
				BSP_LCD_DrawRect(iconPosX_FX1 - 10, iconPosY_FX1 - 10, iconSize + 20, iconSize + 20);
 800d568:	4b20      	ldr	r3, [pc, #128]	; (800d5ec <TouchScreen_Handler+0x5a8>)
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	3214      	adds	r2, #20
 800d56e:	b292      	uxth	r2, r2
 800d570:	4b25      	ldr	r3, [pc, #148]	; (800d608 <TouchScreen_Handler+0x5c4>)
 800d572:	6819      	ldr	r1, [r3, #0]
 800d574:	390a      	subs	r1, #10
 800d576:	4b25      	ldr	r3, [pc, #148]	; (800d60c <TouchScreen_Handler+0x5c8>)
 800d578:	6818      	ldr	r0, [r3, #0]
 800d57a:	380a      	subs	r0, #10
 800d57c:	4613      	mov	r3, r2
 800d57e:	b289      	uxth	r1, r1
 800d580:	b280      	uxth	r0, r0
 800d582:	f7f4 ffeb 	bl	800255c <BSP_LCD_DrawRect>
 800d586:	e7eb      	b.n	800d560 <TouchScreen_Handler+0x51c>
				BSP_LCD_DrawRect(iconPosX_FX2 - 10, iconPosY_FX2 - 10, iconSize + 20, iconSize + 20);
 800d588:	4b18      	ldr	r3, [pc, #96]	; (800d5ec <TouchScreen_Handler+0x5a8>)
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	3214      	adds	r2, #20
 800d58e:	b292      	uxth	r2, r2
 800d590:	4b17      	ldr	r3, [pc, #92]	; (800d5f0 <TouchScreen_Handler+0x5ac>)
 800d592:	6819      	ldr	r1, [r3, #0]
 800d594:	390a      	subs	r1, #10
 800d596:	4b17      	ldr	r3, [pc, #92]	; (800d5f4 <TouchScreen_Handler+0x5b0>)
 800d598:	6818      	ldr	r0, [r3, #0]
 800d59a:	380a      	subs	r0, #10
 800d59c:	4613      	mov	r3, r2
 800d59e:	b289      	uxth	r1, r1
 800d5a0:	b280      	uxth	r0, r0
 800d5a2:	f7f4 ffdb 	bl	800255c <BSP_LCD_DrawRect>
 800d5a6:	e7db      	b.n	800d560 <TouchScreen_Handler+0x51c>
				BSP_LCD_DrawRect(iconPosX_FX3 - 10, iconPosY_FX3 - 10, iconSize + 20, iconSize + 20);
 800d5a8:	4b10      	ldr	r3, [pc, #64]	; (800d5ec <TouchScreen_Handler+0x5a8>)
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	3214      	adds	r2, #20
 800d5ae:	b292      	uxth	r2, r2
 800d5b0:	4b11      	ldr	r3, [pc, #68]	; (800d5f8 <TouchScreen_Handler+0x5b4>)
 800d5b2:	6819      	ldr	r1, [r3, #0]
 800d5b4:	390a      	subs	r1, #10
 800d5b6:	4b11      	ldr	r3, [pc, #68]	; (800d5fc <TouchScreen_Handler+0x5b8>)
 800d5b8:	6818      	ldr	r0, [r3, #0]
 800d5ba:	380a      	subs	r0, #10
 800d5bc:	4613      	mov	r3, r2
 800d5be:	b289      	uxth	r1, r1
 800d5c0:	b280      	uxth	r0, r0
 800d5c2:	f7f4 ffcb 	bl	800255c <BSP_LCD_DrawRect>
 800d5c6:	e7cb      	b.n	800d560 <TouchScreen_Handler+0x51c>
				BSP_LCD_DrawRect(iconPosX_FX4 - 10, iconPosY_FX4 - 10, iconSize + 20, iconSize + 20);
 800d5c8:	4b08      	ldr	r3, [pc, #32]	; (800d5ec <TouchScreen_Handler+0x5a8>)
 800d5ca:	681a      	ldr	r2, [r3, #0]
 800d5cc:	3214      	adds	r2, #20
 800d5ce:	b292      	uxth	r2, r2
 800d5d0:	4b0b      	ldr	r3, [pc, #44]	; (800d600 <TouchScreen_Handler+0x5bc>)
 800d5d2:	6819      	ldr	r1, [r3, #0]
 800d5d4:	390a      	subs	r1, #10
 800d5d6:	4b0b      	ldr	r3, [pc, #44]	; (800d604 <TouchScreen_Handler+0x5c0>)
 800d5d8:	6818      	ldr	r0, [r3, #0]
 800d5da:	380a      	subs	r0, #10
 800d5dc:	4613      	mov	r3, r2
 800d5de:	b289      	uxth	r1, r1
 800d5e0:	b280      	uxth	r0, r0
 800d5e2:	f7f4 ffbb 	bl	800255c <BSP_LCD_DrawRect>
 800d5e6:	e7bb      	b.n	800d560 <TouchScreen_Handler+0x51c>
 800d5e8:	ffd3d3d3 	.word	0xffd3d3d3
 800d5ec:	2001878c 	.word	0x2001878c
 800d5f0:	20018790 	.word	0x20018790
 800d5f4:	20058b60 	.word	0x20058b60
 800d5f8:	2001879c 	.word	0x2001879c
 800d5fc:	20018a30 	.word	0x20018a30
 800d600:	2001851c 	.word	0x2001851c
 800d604:	200189d0 	.word	0x200189d0
 800d608:	20058a3c 	.word	0x20058a3c
 800d60c:	20018770 	.word	0x20018770
 800d610:	20001b34 	.word	0x20001b34

0800d614 <UI_Handler>:
				  uint16_t usb_state_current, uint16_t sv_state_current) {
 800d614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d618:	4604      	mov	r4, r0
 800d61a:	460f      	mov	r7, r1
 800d61c:	4615      	mov	r5, r2
 800d61e:	461e      	mov	r6, r3
 800d620:	f8bd 8018 	ldrh.w	r8, [sp, #24]
	Button_Handler();
 800d624:	f7ff fc58 	bl	800ced8 <Button_Handler>
	SV_Handler(pData, sv_state_current); // pData must have 4096 entries
 800d628:	4641      	mov	r1, r8
 800d62a:	4638      	mov	r0, r7
 800d62c:	f7ff faa0 	bl	800cb70 <SV_Handler>
	Struct ui_data = TouchScreen_Handler(fx_state_current, usb_state_current, sv_state_current);
 800d630:	4643      	mov	r3, r8
 800d632:	4632      	mov	r2, r6
 800d634:	4629      	mov	r1, r5
 800d636:	4620      	mov	r0, r4
 800d638:	f7ff fd04 	bl	800d044 <TouchScreen_Handler>
	if (ui_data.usb_selection_state == USB_STATE_ON && menu_state == MAIN_MENU_STATE) {
 800d63c:	6863      	ldr	r3, [r4, #4]
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d002      	beq.n	800d648 <UI_Handler+0x34>
}
 800d642:	4620      	mov	r0, r4
 800d644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ui_data.usb_selection_state == USB_STATE_ON && menu_state == MAIN_MENU_STATE) {
 800d648:	4b0d      	ldr	r3, [pc, #52]	; (800d680 <UI_Handler+0x6c>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d1f8      	bne.n	800d642 <UI_Handler+0x2e>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d650:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d654:	f7f4 ff08 	bl	8002468 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(xSize_LCD-80+iconSize/16, 30+iconSize/16, 3*iconSize/8, 3*iconSize/8);
 800d658:	4b0a      	ldr	r3, [pc, #40]	; (800d684 <UI_Handler+0x70>)
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	f3c2 110f 	ubfx	r1, r2, #4, #16
 800d660:	4b09      	ldr	r3, [pc, #36]	; (800d688 <UI_Handler+0x74>)
 800d662:	6818      	ldr	r0, [r3, #0]
 800d664:	4408      	add	r0, r1
 800d666:	b280      	uxth	r0, r0
 800d668:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d66c:	f3c2 02cf 	ubfx	r2, r2, #3, #16
 800d670:	311e      	adds	r1, #30
 800d672:	3850      	subs	r0, #80	; 0x50
 800d674:	4613      	mov	r3, r2
 800d676:	b289      	uxth	r1, r1
 800d678:	b280      	uxth	r0, r0
 800d67a:	f7f4 ff89 	bl	8002590 <BSP_LCD_FillRect>
	return ui_data;
 800d67e:	e7e0      	b.n	800d642 <UI_Handler+0x2e>
 800d680:	20001b34 	.word	0x20001b34
 800d684:	2001878c 	.word	0x2001878c
 800d688:	20018518 	.word	0x20018518

0800d68c <JPEG_IRQHandler>:

//
//
// -- Interrupt & Callback FUnctions -----
//
void JPEG_IRQHandler(void) {
 800d68c:	b508      	push	{r3, lr}
	HAL_JPEG_IRQHandler(&hjpeg); // Pass to HAL
 800d68e:	4802      	ldr	r0, [pc, #8]	; (800d698 <JPEG_IRQHandler+0xc>)
 800d690:	f7f9 fd57 	bl	8007142 <HAL_JPEG_IRQHandler>
}
 800d694:	bd08      	pop	{r3, pc}
 800d696:	bf00      	nop
 800d698:	200189d8 	.word	0x200189d8

0800d69c <HAL_JPEG_GetDataCallback>:

void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData) {
 800d69c:	b570      	push	{r4, r5, r6, lr}
 800d69e:	4604      	mov	r4, r0
	bzero(jpeg_input_buffer, JPEG_BUFFER_SIZE);
 800d6a0:	4d06      	ldr	r5, [pc, #24]	; (800d6bc <HAL_JPEG_GetDataCallback+0x20>)
 800d6a2:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800d6a6:	4632      	mov	r2, r6
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	4628      	mov	r0, r5
 800d6ac:	f001 f8b2 	bl	800e814 <memset>
	HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)jpeg_input_buffer, JPEG_BUFFER_SIZE);
 800d6b0:	4632      	mov	r2, r6
 800d6b2:	4629      	mov	r1, r5
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	f7f9 fab3 	bl	8006c20 <HAL_JPEG_ConfigInputBuffer>
}
 800d6ba:	bd70      	pop	{r4, r5, r6, pc}
 800d6bc:	20018a38 	.word	0x20018a38

0800d6c0 <HAL_JPEG_DataReadyCallback>:

void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength) {
 800d6c0:	b508      	push	{r3, lr}
	OutputBufferAddress = JPEG_OUTPUT_DATA_BUFFER;
 800d6c2:	4b03      	ldr	r3, [pc, #12]	; (800d6d0 <HAL_JPEG_DataReadyCallback+0x10>)
 800d6c4:	4a03      	ldr	r2, [pc, #12]	; (800d6d4 <HAL_JPEG_DataReadyCallback+0x14>)
 800d6c6:	621a      	str	r2, [r3, #32]
	HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)jpeg_output_buffer, OutputBufferAddress);
 800d6c8:	6859      	ldr	r1, [r3, #4]
 800d6ca:	f7f9 faac 	bl	8006c26 <HAL_JPEG_ConfigOutputBuffer>
}
 800d6ce:	bd08      	pop	{r3, pc}
 800d6d0:	20000194 	.word	0x20000194
 800d6d4:	c0200000 	.word	0xc0200000

0800d6d8 <HAL_JPEG_DecodeCpltCallback>:

void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg) {
	JPEG_DECODE_COMPLETE = 1;
 800d6d8:	4b01      	ldr	r3, [pc, #4]	; (800d6e0 <HAL_JPEG_DecodeCpltCallback+0x8>)
 800d6da:	2201      	movs	r2, #1
 800d6dc:	605a      	str	r2, [r3, #4]
}
 800d6de:	4770      	bx	lr
 800d6e0:	20001b34 	.word	0x20001b34

0800d6e4 <HAL_JPEG_InfoReadyCallback>:
		printf("\r\nError Code: Unknown");
	fflush(stdout);
}

/* Adjust the width to be a multiple of 8 or 16 when JPEG header has been parsed */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo) {
 800d6e4:	b508      	push	{r3, lr}
 800d6e6:	4608      	mov	r0, r1
	// Have to add padding for DMA2D
	if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING) {
 800d6e8:	684a      	ldr	r2, [r1, #4]
 800d6ea:	2a01      	cmp	r2, #1
 800d6ec:	d018      	beq.n	800d720 <HAL_JPEG_InfoReadyCallback+0x3c>

		if((pInfo->ImageHeight % 16) != 0)
			pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
	}

	if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING) {
 800d6ee:	2a02      	cmp	r2, #2
 800d6f0:	d027      	beq.n	800d742 <HAL_JPEG_InfoReadyCallback+0x5e>

		if((pInfo->ImageHeight % 8) != 0)
			pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
	}

	if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING) {
 800d6f2:	b97a      	cbnz	r2, 800d714 <HAL_JPEG_InfoReadyCallback+0x30>
		if((pInfo->ImageWidth % 8) != 0)
 800d6f4:	68c3      	ldr	r3, [r0, #12]
 800d6f6:	f013 0f07 	tst.w	r3, #7
 800d6fa:	d003      	beq.n	800d704 <HAL_JPEG_InfoReadyCallback+0x20>
			pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 800d6fc:	f023 0307 	bic.w	r3, r3, #7
 800d700:	3308      	adds	r3, #8
 800d702:	60c3      	str	r3, [r0, #12]

		if((pInfo->ImageHeight % 8) != 0)
 800d704:	6883      	ldr	r3, [r0, #8]
 800d706:	f013 0f07 	tst.w	r3, #7
 800d70a:	d003      	beq.n	800d714 <HAL_JPEG_InfoReadyCallback+0x30>
			pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 800d70c:	f023 0307 	bic.w	r3, r3, #7
 800d710:	3308      	adds	r3, #8
 800d712:	6083      	str	r3, [r0, #8]
	}

	if(JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb) != HAL_OK) {
 800d714:	4a15      	ldr	r2, [pc, #84]	; (800d76c <HAL_JPEG_InfoReadyCallback+0x88>)
 800d716:	4916      	ldr	r1, [pc, #88]	; (800d770 <HAL_JPEG_InfoReadyCallback+0x8c>)
 800d718:	f7fe fd32 	bl	800c180 <JPEG_GetDecodeColorConvertFunc>
 800d71c:	bb10      	cbnz	r0, 800d764 <HAL_JPEG_InfoReadyCallback+0x80>
		printf("Error getting DecodeColorConvertFunct\r\n");
		while(1);
	}
}
 800d71e:	bd08      	pop	{r3, pc}
		if((pInfo->ImageWidth % 16) != 0)
 800d720:	68cb      	ldr	r3, [r1, #12]
 800d722:	f013 0f0f 	tst.w	r3, #15
 800d726:	d003      	beq.n	800d730 <HAL_JPEG_InfoReadyCallback+0x4c>
			pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800d728:	f023 030f 	bic.w	r3, r3, #15
 800d72c:	3310      	adds	r3, #16
 800d72e:	60cb      	str	r3, [r1, #12]
		if((pInfo->ImageHeight % 16) != 0)
 800d730:	6883      	ldr	r3, [r0, #8]
 800d732:	f013 0f0f 	tst.w	r3, #15
 800d736:	d0da      	beq.n	800d6ee <HAL_JPEG_InfoReadyCallback+0xa>
			pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 800d738:	f023 030f 	bic.w	r3, r3, #15
 800d73c:	3310      	adds	r3, #16
 800d73e:	6083      	str	r3, [r0, #8]
 800d740:	e7d5      	b.n	800d6ee <HAL_JPEG_InfoReadyCallback+0xa>
		if((pInfo->ImageWidth % 16) != 0)
 800d742:	68c3      	ldr	r3, [r0, #12]
 800d744:	f013 0f0f 	tst.w	r3, #15
 800d748:	d003      	beq.n	800d752 <HAL_JPEG_InfoReadyCallback+0x6e>
			pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800d74a:	f023 030f 	bic.w	r3, r3, #15
 800d74e:	3310      	adds	r3, #16
 800d750:	60c3      	str	r3, [r0, #12]
		if((pInfo->ImageHeight % 8) != 0)
 800d752:	6883      	ldr	r3, [r0, #8]
 800d754:	f013 0f07 	tst.w	r3, #7
 800d758:	d0cb      	beq.n	800d6f2 <HAL_JPEG_InfoReadyCallback+0xe>
			pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 800d75a:	f023 0307 	bic.w	r3, r3, #7
 800d75e:	3308      	adds	r3, #8
 800d760:	6083      	str	r3, [r0, #8]
 800d762:	e7c6      	b.n	800d6f2 <HAL_JPEG_InfoReadyCallback+0xe>
		printf("Error getting DecodeColorConvertFunct\r\n");
 800d764:	4803      	ldr	r0, [pc, #12]	; (800d774 <HAL_JPEG_InfoReadyCallback+0x90>)
 800d766:	f001 f975 	bl	800ea54 <puts>
		while(1);
 800d76a:	e7fe      	b.n	800d76a <HAL_JPEG_InfoReadyCallback+0x86>
 800d76c:	20001b40 	.word	0x20001b40
 800d770:	20058a38 	.word	0x20058a38
 800d774:	080133b0 	.word	0x080133b0

0800d778 <USBD_Setup>:
#include "usbd_desc.h"
#include "usbd_audio.h"
#include "usbd_audio_if.h"


void USBD_Setup(){
 800d778:	b510      	push	{r4, lr}

	// Application Initializations
	  /* Init Device Library */
	  USBD_Init(&USBD_Device, &AUDIO_Desc, 0);
 800d77a:	4c07      	ldr	r4, [pc, #28]	; (800d798 <USBD_Setup+0x20>)
 800d77c:	2200      	movs	r2, #0
 800d77e:	4907      	ldr	r1, [pc, #28]	; (800d79c <USBD_Setup+0x24>)
 800d780:	4620      	mov	r0, r4
 800d782:	f7fd fd47 	bl	800b214 <USBD_Init>

	  /* Add Supported Class */
	  USBD_RegisterClass(&USBD_Device, USBD_AUDIO_CLASS);
 800d786:	4906      	ldr	r1, [pc, #24]	; (800d7a0 <USBD_Setup+0x28>)
 800d788:	4620      	mov	r0, r4
 800d78a:	f7fd fd5a 	bl	800b242 <USBD_RegisterClass>

	  /* Add Interface callbacks for AUDIO Class */
	  USBD_AUDIO_RegisterInterface(&USBD_Device, &audio_class_interface);
 800d78e:	4905      	ldr	r1, [pc, #20]	; (800d7a4 <USBD_Setup+0x2c>)
 800d790:	4620      	mov	r0, r4
 800d792:	f7fd fd2f 	bl	800b1f4 <USBD_AUDIO_RegisterInterface>



}
 800d796:	bd10      	pop	{r4, pc}
 800d798:	2000e1f8 	.word	0x2000e1f8
 800d79c:	200001ec 	.word	0x200001ec
 800d7a0:	20000150 	.word	0x20000150
 800d7a4:	20000130 	.word	0x20000130

0800d7a8 <USBD_Start_Device>:


void USBD_Start_Device(){
 800d7a8:	b508      	push	{r3, lr}
	  /* Start Device Process */
	  USBD_Start(&USBD_Device);
 800d7aa:	4802      	ldr	r0, [pc, #8]	; (800d7b4 <USBD_Start_Device+0xc>)
 800d7ac:	f7fd fd50 	bl	800b250 <USBD_Start>
}
 800d7b0:	bd08      	pop	{r3, pc}
 800d7b2:	bf00      	nop
 800d7b4:	2000e1f8 	.word	0x2000e1f8

0800d7b8 <USB_Audio_Init>:
#include "filter.h"
#include "usb.h"
#include "ui.h"
#include "usbd_audio.h"

void USB_Audio_Init(void){
 800d7b8:	b508      	push	{r3, lr}
	USBD_Setup();
 800d7ba:	f7ff ffdd 	bl	800d778 <USBD_Setup>

	USBD_Start_Device();
 800d7be:	f7ff fff3 	bl	800d7a8 <USBD_Start_Device>

}
 800d7c2:	bd08      	pop	{r3, pc}

0800d7c4 <Error_Handler>:
 }

void Error_Handler(void)
{
 /* User may add here some code to deal with this error */
 while(1)
 800d7c4:	e7fe      	b.n	800d7c4 <Error_Handler>

0800d7c6 <AUDIO_MicStart>:
static int8_t  AUDIO_MicStart(AUDIO_CircularBuffer_t* buffer ,  uint32_t node_handle)
{
  AUDIO_MicNode_t* mic;
  mic=(AUDIO_MicNode_t*)node_handle;

  if(mic->node.state != AUDIO_NODE_STARTED)
 800d7c6:	780b      	ldrb	r3, [r1, #0]
 800d7c8:	2b02      	cmp	r3, #2
 800d7ca:	d002      	beq.n	800d7d2 <AUDIO_MicStart+0xc>
  {
    mic->node.state = AUDIO_NODE_STARTED;
 800d7cc:	2302      	movs	r3, #2
 800d7ce:	700b      	strb	r3, [r1, #0]
    mic->buf        = buffer;
 800d7d0:	6148      	str	r0, [r1, #20]
  }
    return 0;
}
 800d7d2:	2000      	movs	r0, #0
 800d7d4:	4770      	bx	lr

0800d7d6 <AUDIO_MicStop>:
{
    
  AUDIO_MicNode_t* mic;
  mic = (AUDIO_MicNode_t*)node_handle;

  if(mic->node.state == AUDIO_NODE_STARTED)
 800d7d6:	7803      	ldrb	r3, [r0, #0]
 800d7d8:	2b02      	cmp	r3, #2
 800d7da:	d001      	beq.n	800d7e0 <AUDIO_MicStop+0xa>
  {
    mic->node.state = AUDIO_NODE_STOPPED;
  }
    return 0;
}
 800d7dc:	2000      	movs	r0, #0
 800d7de:	4770      	bx	lr
    mic->node.state = AUDIO_NODE_STOPPED;
 800d7e0:	2303      	movs	r3, #3
 800d7e2:	7003      	strb	r3, [r0, #0]
 800d7e4:	e7fa      	b.n	800d7dc <AUDIO_MicStop+0x6>

0800d7e6 <AUDIO_MicChangeFrequency>:
{
    
  AUDIO_MicNode_t* mic;

  mic = (AUDIO_MicNode_t*)node_handle;
  mic->specific.cmd|= MIC_CMD_CHANGE_FREQUENCE;
 800d7e6:	f890 3346 	ldrb.w	r3, [r0, #838]	; 0x346
 800d7ea:	f043 0304 	orr.w	r3, r3, #4
 800d7ee:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
  
    return 0;
}
 800d7f2:	2000      	movs	r0, #0
 800d7f4:	4770      	bx	lr

0800d7f6 <AUDIO_MicMute>:
{
  /* @TODO check if really mic is muted */
	/* No action  currently not supported  call*/
  
  return 0;
}
 800d7f6:	2000      	movs	r0, #0
 800d7f8:	4770      	bx	lr

0800d7fa <AUDIO_MicSetVolume>:
  * @param  node_handle      mic  node handle
  * @retval 0 if no error
  */
static int8_t  AUDIO_MicSetVolume( uint16_t channel_number,  int volume_db_256 ,  uint32_t node_handle)
{
  ((AUDIO_MicNode_t*)node_handle)->volume = VOLUME_DB_256_TO_PERCENT(volume_db_256);
 800d7fa:	f501 5300 	add.w	r3, r1, #8192	; 0x2000
 800d7fe:	2164      	movs	r1, #100	; 0x64
 800d800:	fb01 f103 	mul.w	r1, r1, r3
 800d804:	2900      	cmp	r1, #0
 800d806:	db04      	blt.n	800d812 <AUDIO_MicSetVolume+0x18>
 800d808:	f3c1 3187 	ubfx	r1, r1, #14, #8
 800d80c:	7691      	strb	r1, [r2, #26]
	/* No action  currently not supported  call*/
  
  return 0;
}
 800d80e:	2000      	movs	r0, #0
 800d810:	4770      	bx	lr
  ((AUDIO_MicNode_t*)node_handle)->volume = VOLUME_DB_256_TO_PERCENT(volume_db_256);
 800d812:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 800d816:	313f      	adds	r1, #63	; 0x3f
 800d818:	e7f6      	b.n	800d808 <AUDIO_MicSetVolume+0xe>

0800d81a <AUDIO_MicGetVolumeDefaultsValues>:
  * @param  node_handle         
  * @retval 0 if no error
  */
static int8_t  AUDIO_MicGetVolumeDefaultsValues( int* vol_max, int* vol_min, int* vol_res, uint32_t node_handle)
{
  *vol_max = MEMS_VOLUME_MIC_MAX_DB_256;
 800d81a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d81e:	6003      	str	r3, [r0, #0]
  *vol_min = MEMS_VOLUME_MIC_MIN_DB_256;
 800d820:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d824:	600b      	str	r3, [r1, #0]
  *vol_res = MEMS_VOLUME_MIC_RES_DB_256;
 800d826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d82a:	6013      	str	r3, [r2, #0]
  return 0;
}
 800d82c:	2000      	movs	r0, #0
 800d82e:	4770      	bx	lr

0800d830 <AUDIO_MicStartReadCount>:
{
    AUDIO_MicNode_t* mic;
  
    mic = (AUDIO_MicNode_t*)node_handle;
  
    if(mic->node.state == AUDIO_NODE_STARTED)
 800d830:	7803      	ldrb	r3, [r0, #0]
 800d832:	2b02      	cmp	r3, #2
 800d834:	d106      	bne.n	800d844 <AUDIO_MicStartReadCount+0x14>
    {
           /* read remained value in dma buffer */
      mic->specific.dma_remaining =__HAL_DMA_GET_COUNTER(&hDmaTopRight);
 800d836:	4b05      	ldr	r3, [pc, #20]	; (800d84c <AUDIO_MicStartReadCount+0x1c>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	f8a0 3348 	strh.w	r3, [r0, #840]	; 0x348
      return 0;
 800d840:	2000      	movs	r0, #0
 800d842:	4770      	bx	lr
    }
   return -1;     
 800d844:	f04f 30ff 	mov.w	r0, #4294967295
} 
 800d848:	4770      	bx	lr
 800d84a:	bf00      	nop
 800d84c:	20001d6c 	.word	0x20001d6c

0800d850 <AUDIO_MicGetLastReadCount>:
{
  AUDIO_MicNode_t* mic;
  int remaining_data_count , read_samples;
  mic = (AUDIO_MicNode_t*)node_handle;
  
  if(mic->node.state == AUDIO_NODE_STARTED)
 800d850:	7803      	ldrb	r3, [r0, #0]
 800d852:	2b02      	cmp	r3, #2
 800d854:	d001      	beq.n	800d85a <AUDIO_MicGetLastReadCount+0xa>
                   ((mic->specific.packet_sample_count<<1) - remaining_data_count) + mic->specific.dma_remaining; 

    mic->specific.dma_remaining = remaining_data_count;
	return read_samples*AUDIO_MicHandler->specific.packet_sample_size;
  }
    return 0;
 800d856:	2000      	movs	r0, #0
}
 800d858:	4770      	bx	lr
    remaining_data_count = __HAL_DMA_GET_COUNTER(&hDmaTopRight);
 800d85a:	4b0c      	ldr	r3, [pc, #48]	; (800d88c <AUDIO_MicGetLastReadCount+0x3c>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	685a      	ldr	r2, [r3, #4]
    read_samples =(remaining_data_count < mic->specific.dma_remaining)? mic->specific.dma_remaining - remaining_data_count :
 800d860:	f8b0 3348 	ldrh.w	r3, [r0, #840]	; 0x348
 800d864:	4293      	cmp	r3, r2
 800d866:	dd0a      	ble.n	800d87e <AUDIO_MicGetLastReadCount+0x2e>
 800d868:	1a9b      	subs	r3, r3, r2
    mic->specific.dma_remaining = remaining_data_count;
 800d86a:	f8a0 2348 	strh.w	r2, [r0, #840]	; 0x348
	return read_samples*AUDIO_MicHandler->specific.packet_sample_size;
 800d86e:	4a08      	ldr	r2, [pc, #32]	; (800d890 <AUDIO_MicGetLastReadCount+0x40>)
 800d870:	6812      	ldr	r2, [r2, #0]
 800d872:	f892 0344 	ldrb.w	r0, [r2, #836]	; 0x344
 800d876:	fb10 f003 	smulbb	r0, r0, r3
 800d87a:	b280      	uxth	r0, r0
 800d87c:	4770      	bx	lr
                   ((mic->specific.packet_sample_count<<1) - remaining_data_count) + mic->specific.dma_remaining; 
 800d87e:	f8b0 1342 	ldrh.w	r1, [r0, #834]	; 0x342
 800d882:	ebc2 0141 	rsb	r1, r2, r1, lsl #1
    read_samples =(remaining_data_count < mic->specific.dma_remaining)? mic->specific.dma_remaining - remaining_data_count :
 800d886:	440b      	add	r3, r1
 800d888:	e7ef      	b.n	800d86a <AUDIO_MicGetLastReadCount+0x1a>
 800d88a:	bf00      	nop
 800d88c:	20001d6c 	.word	0x20001d6c
 800d890:	20001b48 	.word	0x20001b48

0800d894 <AUDIO_MicDeInit>:
  if(mic->node.state != AUDIO_NODE_OFF)
 800d894:	7803      	ldrb	r3, [r0, #0]
 800d896:	b173      	cbz	r3, 800d8b6 <AUDIO_MicDeInit+0x22>
{
 800d898:	b510      	push	{r4, lr}
 800d89a:	4604      	mov	r4, r0
    if(mic->node.state == AUDIO_NODE_STARTED)
 800d89c:	2b02      	cmp	r3, #2
 800d89e:	d007      	beq.n	800d8b0 <AUDIO_MicDeInit+0x1c>
    BSP_AUDIO_IN_Stop();
 800d8a0:	f7f4 fb38 	bl	8001f14 <BSP_AUDIO_IN_Stop>
    BSP_AUDIO_IN_DeInit();  
 800d8a4:	f7f4 fcfc 	bl	80022a0 <BSP_AUDIO_IN_DeInit>
    mic->node.state = AUDIO_NODE_OFF;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	7023      	strb	r3, [r4, #0]
}
 800d8ac:	2000      	movs	r0, #0
 800d8ae:	bd10      	pop	{r4, pc}
      AUDIO_MicStop(node_handle);
 800d8b0:	f7ff ff91 	bl	800d7d6 <AUDIO_MicStop>
 800d8b4:	e7f4      	b.n	800d8a0 <AUDIO_MicDeInit+0xc>
}
 800d8b6:	2000      	movs	r0, #0
 800d8b8:	4770      	bx	lr
	...

0800d8bc <AUDIO_FillDataToBuffer>:
{
 800d8bc:	b570      	push	{r4, r5, r6, lr}
  if(AUDIO_MicHandler->specific.cmd & MIC_CMD_CHANGE_FREQUENCE)
 800d8be:	4b3e      	ldr	r3, [pc, #248]	; (800d9b8 <AUDIO_FillDataToBuffer+0xfc>)
 800d8c0:	6819      	ldr	r1, [r3, #0]
 800d8c2:	f891 3346 	ldrb.w	r3, [r1, #838]	; 0x346
 800d8c6:	f013 0f04 	tst.w	r3, #4
 800d8ca:	d104      	bne.n	800d8d6 <AUDIO_FillDataToBuffer+0x1a>
 800d8cc:	4604      	mov	r4, r0
    if(AUDIO_MicHandler->node.state==AUDIO_NODE_STARTED)
 800d8ce:	780b      	ldrb	r3, [r1, #0]
 800d8d0:	2b02      	cmp	r3, #2
 800d8d2:	d03c      	beq.n	800d94e <AUDIO_FillDataToBuffer+0x92>
}
 800d8d4:	bd70      	pop	{r4, r5, r6, pc}
     BSP_AUDIO_IN_Stop();
 800d8d6:	f7f4 fb1d 	bl	8001f14 <BSP_AUDIO_IN_Stop>
     BSP_AUDIO_IN_DeInit();
 800d8da:	f7f4 fce1 	bl	80022a0 <BSP_AUDIO_IN_DeInit>
     AUDIO_MicHandler->packet_length = AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(AUDIO_MicHandler->node.audio_description);
 800d8de:	4c36      	ldr	r4, [pc, #216]	; (800d9b8 <AUDIO_FillDataToBuffer+0xfc>)
 800d8e0:	6822      	ldr	r2, [r4, #0]
 800d8e2:	6850      	ldr	r0, [r2, #4]
 800d8e4:	6803      	ldr	r3, [r0, #0]
 800d8e6:	4d35      	ldr	r5, [pc, #212]	; (800d9bc <AUDIO_FillDataToBuffer+0x100>)
 800d8e8:	fba5 1303 	umull	r1, r3, r5, r3
 800d8ec:	099b      	lsrs	r3, r3, #6
 800d8ee:	7906      	ldrb	r6, [r0, #4]
 800d8f0:	7c41      	ldrb	r1, [r0, #17]
 800d8f2:	fb13 f306 	smulbb	r3, r3, r6
 800d8f6:	fb13 f301 	smulbb	r3, r3, r1
 800d8fa:	8313      	strh	r3, [r2, #24]
     BSP_AUDIO_IN_Init(AUDIO_MicHandler->node.audio_description->frequency, AUDIO_MicHandler->node.audio_description->resolution, AUDIO_MicHandler->node.audio_description->channels_count);
 800d8fc:	7902      	ldrb	r2, [r0, #4]
 800d8fe:	7c41      	ldrb	r1, [r0, #17]
 800d900:	6800      	ldr	r0, [r0, #0]
 800d902:	f7f4 fd6f 	bl	80023e4 <BSP_AUDIO_IN_Init>
     BSP_AUDIO_IN_AllocScratch (AUDIO_MicHandler->specific.scratch, (AUDIO_SAMPLE_COUNT_LENGTH(AUDIO_MicHandler->node.audio_description->frequency))<<2);
 800d906:	6820      	ldr	r0, [r4, #0]
 800d908:	6843      	ldr	r3, [r0, #4]
 800d90a:	6819      	ldr	r1, [r3, #0]
 800d90c:	fba5 3101 	umull	r3, r1, r5, r1
 800d910:	0989      	lsrs	r1, r1, #6
 800d912:	0089      	lsls	r1, r1, #2
 800d914:	3040      	adds	r0, #64	; 0x40
 800d916:	f7f4 fa8f 	bl	8001e38 <BSP_AUDIO_IN_AllocScratch>
     AUDIO_MicHandler->specific.packet_sample_count = AUDIO_PACKET_SAMPLES_COUNT(AUDIO_MicHandler->node.audio_description->frequency);
 800d91a:	6822      	ldr	r2, [r4, #0]
 800d91c:	6851      	ldr	r1, [r2, #4]
 800d91e:	680b      	ldr	r3, [r1, #0]
 800d920:	fba5 3503 	umull	r3, r5, r5, r3
 800d924:	09ad      	lsrs	r5, r5, #6
 800d926:	f8a2 5342 	strh.w	r5, [r2, #834]	; 0x342
     AUDIO_MicHandler->specific.packet_sample_size = AUDIO_SAMPLE_LENGTH(AUDIO_MicHandler->node.audio_description);
 800d92a:	790b      	ldrb	r3, [r1, #4]
 800d92c:	7c49      	ldrb	r1, [r1, #17]
 800d92e:	fb13 f301 	smulbb	r3, r3, r1
 800d932:	f882 3344 	strb.w	r3, [r2, #836]	; 0x344
     BSP_AUDIO_IN_Record(0,0); /* x2 for double buffering */
 800d936:	2100      	movs	r1, #0
 800d938:	4608      	mov	r0, r1
 800d93a:	f7f4 fa9d 	bl	8001e78 <BSP_AUDIO_IN_Record>
     AUDIO_MicHandler->specific.cmd &= ~MIC_CMD_CHANGE_FREQUENCE;
 800d93e:	6822      	ldr	r2, [r4, #0]
 800d940:	f892 3346 	ldrb.w	r3, [r2, #838]	; 0x346
 800d944:	f023 0304 	bic.w	r3, r3, #4
 800d948:	f882 3346 	strb.w	r3, [r2, #838]	; 0x346
 800d94c:	e7c2      	b.n	800d8d4 <AUDIO_FillDataToBuffer+0x18>
    wr_distance = AUDIO_BUFFER_FREE_SIZE(AUDIO_MicHandler->buf);
 800d94e:	694a      	ldr	r2, [r1, #20]
 800d950:	88d0      	ldrh	r0, [r2, #6]
 800d952:	8893      	ldrh	r3, [r2, #4]
 800d954:	4298      	cmp	r0, r3
 800d956:	d32b      	bcc.n	800d9b0 <AUDIO_FillDataToBuffer+0xf4>
 800d958:	8912      	ldrh	r2, [r2, #8]
 800d95a:	4413      	add	r3, r2
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	1a1b      	subs	r3, r3, r0
 800d960:	b29b      	uxth	r3, r3
    if(wr_distance<=AUDIO_MicHandler->packet_length)
 800d962:	8b0a      	ldrh	r2, [r1, #24]
 800d964:	429a      	cmp	r2, r3
 800d966:	d303      	bcc.n	800d970 <AUDIO_FillDataToBuffer+0xb4>
      AUDIO_MicHandler->node.session_handle->SessionCallback(AUDIO_OVERRUN, (AUDIO_Node_t*)AUDIO_MicHandler,
 800d968:	68ca      	ldr	r2, [r1, #12]
 800d96a:	6893      	ldr	r3, [r2, #8]
 800d96c:	2004      	movs	r0, #4
 800d96e:	4798      	blx	r3
    BSP_AUDIO_IN_Get_PcmBuffer((AUDIO_MicHandler->buf->data+AUDIO_MicHandler->buf->wr_ptr),AUDIO_MicHandler->specific.packet_sample_count,
 800d970:	4d11      	ldr	r5, [pc, #68]	; (800d9b8 <AUDIO_FillDataToBuffer+0xfc>)
 800d972:	6829      	ldr	r1, [r5, #0]
 800d974:	694b      	ldr	r3, [r1, #20]
 800d976:	681e      	ldr	r6, [r3, #0]
 800d978:	88d8      	ldrh	r0, [r3, #6]
                               pcm_offset, AUDIO_MicHandler->node.audio_description->resolution);
 800d97a:	684b      	ldr	r3, [r1, #4]
    BSP_AUDIO_IN_Get_PcmBuffer((AUDIO_MicHandler->buf->data+AUDIO_MicHandler->buf->wr_ptr),AUDIO_MicHandler->specific.packet_sample_count,
 800d97c:	7c5b      	ldrb	r3, [r3, #17]
 800d97e:	b2a2      	uxth	r2, r4
 800d980:	f8b1 1342 	ldrh.w	r1, [r1, #834]	; 0x342
 800d984:	4430      	add	r0, r6
 800d986:	f7f4 fb09 	bl	8001f9c <BSP_AUDIO_IN_Get_PcmBuffer>
    AUDIO_MicHandler->buf->wr_ptr += AUDIO_MicHandler->packet_length;
 800d98a:	6829      	ldr	r1, [r5, #0]
 800d98c:	694a      	ldr	r2, [r1, #20]
 800d98e:	8b0b      	ldrh	r3, [r1, #24]
 800d990:	88d0      	ldrh	r0, [r2, #6]
 800d992:	4403      	add	r3, r0
 800d994:	80d3      	strh	r3, [r2, #6]
  AUDIO_MicHandler->node.session_handle->SessionCallback(AUDIO_PACKET_RECEIVED, (AUDIO_Node_t*)AUDIO_MicHandler,
 800d996:	68ca      	ldr	r2, [r1, #12]
 800d998:	6893      	ldr	r3, [r2, #8]
 800d99a:	2002      	movs	r0, #2
 800d99c:	4798      	blx	r3
    if(AUDIO_MicHandler->buf->wr_ptr == AUDIO_MicHandler->buf->size)
 800d99e:	682b      	ldr	r3, [r5, #0]
 800d9a0:	695b      	ldr	r3, [r3, #20]
 800d9a2:	88d9      	ldrh	r1, [r3, #6]
 800d9a4:	891a      	ldrh	r2, [r3, #8]
 800d9a6:	4291      	cmp	r1, r2
 800d9a8:	d194      	bne.n	800d8d4 <AUDIO_FillDataToBuffer+0x18>
      AUDIO_MicHandler->buf->wr_ptr = 0;
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	80da      	strh	r2, [r3, #6]
}
 800d9ae:	e791      	b.n	800d8d4 <AUDIO_FillDataToBuffer+0x18>
    wr_distance = AUDIO_BUFFER_FREE_SIZE(AUDIO_MicHandler->buf);
 800d9b0:	1a1b      	subs	r3, r3, r0
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	e7d5      	b.n	800d962 <AUDIO_FillDataToBuffer+0xa6>
 800d9b6:	bf00      	nop
 800d9b8:	20001b48 	.word	0x20001b48
 800d9bc:	10624dd3 	.word	0x10624dd3

0800d9c0 <AUDIO_DFSDM_MEMS_MicInit>:
{
 800d9c0:	b570      	push	{r4, r5, r6, lr}
 800d9c2:	4605      	mov	r5, r0
 800d9c4:	460e      	mov	r6, r1
 800d9c6:	4614      	mov	r4, r2
  memset(mic, 0, sizeof(AUDIO_MicNode_t));
 800d9c8:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800d9cc:	2100      	movs	r1, #0
 800d9ce:	4620      	mov	r0, r4
 800d9d0:	f000 ff20 	bl	800e814 <memset>
  mic->node.type                = AUDIO_INPUT;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	7223      	strb	r3, [r4, #8]
  mic->node.state               = AUDIO_NODE_INITIALIZED;
 800d9d8:	2301      	movs	r3, #1
 800d9da:	7023      	strb	r3, [r4, #0]
  mic->node.session_handle      = session_handle;
 800d9dc:	60e6      	str	r6, [r4, #12]
  mic->node.audio_description   = audio_description;
 800d9de:	6065      	str	r5, [r4, #4]
  mic->MicDeInit                = AUDIO_MicDeInit;
 800d9e0:	4b25      	ldr	r3, [pc, #148]	; (800da78 <AUDIO_DFSDM_MEMS_MicInit+0xb8>)
 800d9e2:	61e3      	str	r3, [r4, #28]
  mic->MicStart                 = AUDIO_MicStart;
 800d9e4:	4b25      	ldr	r3, [pc, #148]	; (800da7c <AUDIO_DFSDM_MEMS_MicInit+0xbc>)
 800d9e6:	6223      	str	r3, [r4, #32]
  mic->MicStop                  = AUDIO_MicStop;
 800d9e8:	4b25      	ldr	r3, [pc, #148]	; (800da80 <AUDIO_DFSDM_MEMS_MicInit+0xc0>)
 800d9ea:	6263      	str	r3, [r4, #36]	; 0x24
  mic->MicChangeFrequency       = AUDIO_MicChangeFrequency;
 800d9ec:	4b25      	ldr	r3, [pc, #148]	; (800da84 <AUDIO_DFSDM_MEMS_MicInit+0xc4>)
 800d9ee:	62a3      	str	r3, [r4, #40]	; 0x28
  mic->MicMute                  = AUDIO_MicMute;
 800d9f0:	4b25      	ldr	r3, [pc, #148]	; (800da88 <AUDIO_DFSDM_MEMS_MicInit+0xc8>)
 800d9f2:	62e3      	str	r3, [r4, #44]	; 0x2c
  mic->MicSetVolume             = AUDIO_MicSetVolume;
 800d9f4:	4b25      	ldr	r3, [pc, #148]	; (800da8c <AUDIO_DFSDM_MEMS_MicInit+0xcc>)
 800d9f6:	6323      	str	r3, [r4, #48]	; 0x30
  mic->MicGetVolumeDefaultsValues = AUDIO_MicGetVolumeDefaultsValues;
 800d9f8:	4b25      	ldr	r3, [pc, #148]	; (800da90 <AUDIO_DFSDM_MEMS_MicInit+0xd0>)
 800d9fa:	6363      	str	r3, [r4, #52]	; 0x34
  mic->MicStartReadCount        = AUDIO_MicStartReadCount;
 800d9fc:	4b25      	ldr	r3, [pc, #148]	; (800da94 <AUDIO_DFSDM_MEMS_MicInit+0xd4>)
 800d9fe:	63a3      	str	r3, [r4, #56]	; 0x38
  mic->MicGetReadCount          = AUDIO_MicGetLastReadCount;
 800da00:	4b25      	ldr	r3, [pc, #148]	; (800da98 <AUDIO_DFSDM_MEMS_MicInit+0xd8>)
 800da02:	63e3      	str	r3, [r4, #60]	; 0x3c
  mic->volume = VOLUME_DB_256_TO_PERCENT(audio_description->audio_volume_db_256);
 800da04:	68eb      	ldr	r3, [r5, #12]
 800da06:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 800da0a:	2364      	movs	r3, #100	; 0x64
 800da0c:	fb03 f302 	mul.w	r3, r3, r2
 800da10:	2b00      	cmp	r3, #0
 800da12:	db2c      	blt.n	800da6e <AUDIO_DFSDM_MEMS_MicInit+0xae>
 800da14:	f3c3 3387 	ubfx	r3, r3, #14, #8
 800da18:	76a3      	strb	r3, [r4, #26]
  mic->packet_length = AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(audio_description);
 800da1a:	682b      	ldr	r3, [r5, #0]
 800da1c:	4e1f      	ldr	r6, [pc, #124]	; (800da9c <AUDIO_DFSDM_MEMS_MicInit+0xdc>)
 800da1e:	fba6 2303 	umull	r2, r3, r6, r3
 800da22:	099b      	lsrs	r3, r3, #6
 800da24:	7929      	ldrb	r1, [r5, #4]
 800da26:	7c6a      	ldrb	r2, [r5, #17]
 800da28:	fb13 f301 	smulbb	r3, r3, r1
 800da2c:	fb13 f302 	smulbb	r3, r3, r2
 800da30:	8323      	strh	r3, [r4, #24]
  BSP_AUDIO_IN_Init(audio_description->frequency, audio_description->resolution, audio_description->channels_count);
 800da32:	792a      	ldrb	r2, [r5, #4]
 800da34:	7c69      	ldrb	r1, [r5, #17]
 800da36:	6828      	ldr	r0, [r5, #0]
 800da38:	f7f4 fcd4 	bl	80023e4 <BSP_AUDIO_IN_Init>
  BSP_AUDIO_IN_AllocScratch (mic->specific.scratch, (AUDIO_SAMPLE_COUNT_LENGTH(USB_AUDIO_CONFIG_RECORD_FREQ_MAX))<<2);
 800da3c:	21c0      	movs	r1, #192	; 0xc0
 800da3e:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800da42:	f7f4 f9f9 	bl	8001e38 <BSP_AUDIO_IN_AllocScratch>
  mic->specific.packet_sample_count = AUDIO_PACKET_SAMPLES_COUNT(audio_description->frequency);
 800da46:	682b      	ldr	r3, [r5, #0]
 800da48:	fba6 3603 	umull	r3, r6, r6, r3
 800da4c:	09b6      	lsrs	r6, r6, #6
 800da4e:	f8a4 6342 	strh.w	r6, [r4, #834]	; 0x342
  mic->specific.packet_sample_size = AUDIO_SAMPLE_LENGTH(audio_description);
 800da52:	792b      	ldrb	r3, [r5, #4]
 800da54:	7c6a      	ldrb	r2, [r5, #17]
 800da56:	fb13 f302 	smulbb	r3, r3, r2
 800da5a:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
  AUDIO_MicHandler = mic;
 800da5e:	4b10      	ldr	r3, [pc, #64]	; (800daa0 <AUDIO_DFSDM_MEMS_MicInit+0xe0>)
 800da60:	601c      	str	r4, [r3, #0]
  BSP_AUDIO_IN_Record(0,0);
 800da62:	2100      	movs	r1, #0
 800da64:	4608      	mov	r0, r1
 800da66:	f7f4 fa07 	bl	8001e78 <BSP_AUDIO_IN_Record>
}
 800da6a:	2000      	movs	r0, #0
 800da6c:	bd70      	pop	{r4, r5, r6, pc}
  mic->volume = VOLUME_DB_256_TO_PERCENT(audio_description->audio_volume_db_256);
 800da6e:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 800da72:	333f      	adds	r3, #63	; 0x3f
 800da74:	e7ce      	b.n	800da14 <AUDIO_DFSDM_MEMS_MicInit+0x54>
 800da76:	bf00      	nop
 800da78:	0800d895 	.word	0x0800d895
 800da7c:	0800d7c7 	.word	0x0800d7c7
 800da80:	0800d7d7 	.word	0x0800d7d7
 800da84:	0800d7e7 	.word	0x0800d7e7
 800da88:	0800d7f7 	.word	0x0800d7f7
 800da8c:	0800d7fb 	.word	0x0800d7fb
 800da90:	0800d81b 	.word	0x0800d81b
 800da94:	0800d831 	.word	0x0800d831
 800da98:	0800d851 	.word	0x0800d851
 800da9c:	10624dd3 	.word	0x10624dd3
 800daa0:	20001b48 	.word	0x20001b48

0800daa4 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
{
 800daa4:	b508      	push	{r3, lr}
  if((AUDIO_MicHandler)&&(AUDIO_MicHandler->node.state==AUDIO_NODE_STARTED))
 800daa6:	4b05      	ldr	r3, [pc, #20]	; (800dabc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x18>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	b113      	cbz	r3, 800dab2 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xe>
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	2b02      	cmp	r3, #2
 800dab0:	d000      	beq.n	800dab4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x10>
}
 800dab2:	bd08      	pop	{r3, pc}
      AUDIO_FillDataToBuffer(0);
 800dab4:	2000      	movs	r0, #0
 800dab6:	f7ff ff01 	bl	800d8bc <AUDIO_FillDataToBuffer>
}
 800daba:	e7fa      	b.n	800dab2 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xe>
 800dabc:	20001b48 	.word	0x20001b48

0800dac0 <BSP_AUDIO_IN_TransferComplete_CallBack>:
{
 800dac0:	b508      	push	{r3, lr}
  if(AUDIO_MicHandler)
 800dac2:	4b04      	ldr	r3, [pc, #16]	; (800dad4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	b11b      	cbz	r3, 800dad0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x10>
      AUDIO_FillDataToBuffer(AUDIO_MicHandler->specific.packet_sample_count);
 800dac8:	f8b3 0342 	ldrh.w	r0, [r3, #834]	; 0x342
 800dacc:	f7ff fef6 	bl	800d8bc <AUDIO_FillDataToBuffer>
}
 800dad0:	bd08      	pop	{r3, pc}
 800dad2:	bf00      	nop
 800dad4:	20001b48 	.word	0x20001b48

0800dad8 <AUDIO_SpeakerStop>:
static int8_t  AUDIO_SpeakerStop( uint32_t node_handle)
{
  AUDIO_SpeakerNode_t* speaker;

  speaker = (AUDIO_SpeakerNode_t*)node_handle;
  speaker->specific.cmd |= SPEAKER_CMD_STOP;
 800dad8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800dadc:	f043 0301 	orr.w	r3, r3, #1
 800dae0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  return 0;
}
 800dae4:	2000      	movs	r0, #0
 800dae6:	4770      	bx	lr

0800dae8 <AUDIO_SpeakerChangeFrequency>:
static int8_t  AUDIO_SpeakerChangeFrequency( uint32_t node_handle)
{
  AUDIO_SpeakerNode_t* speaker;

  speaker = (AUDIO_SpeakerNode_t*)node_handle;
  speaker->specific.cmd |= SPEAKER_CMD_CHANGE_FREQUENCE;
 800dae8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800daec:	f043 0304 	orr.w	r3, r3, #4
 800daf0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  return 0;
}
 800daf4:	2000      	movs	r0, #0
 800daf6:	4770      	bx	lr

0800daf8 <AUDIO_SpeakerStartReadCount>:
static int8_t  AUDIO_SpeakerStartReadCount( uint32_t node_handle)
{
     AUDIO_SpeakerNode_t* speaker;
  
    speaker = (AUDIO_SpeakerNode_t*)node_handle;
    speaker->specific.dma_remaining = __HAL_DMA_GET_COUNTER(haudio_out_sai.hdmatx);
 800daf8:	4b03      	ldr	r3, [pc, #12]	; (800db08 <AUDIO_SpeakerStartReadCount+0x10>)
 800dafa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	685b      	ldr	r3, [r3, #4]
 800db00:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    return 0;    
}
 800db04:	2000      	movs	r0, #0
 800db06:	4770      	bx	lr
 800db08:	20001c94 	.word	0x20001c94

0800db0c <AUDIO_SpeakerGetLastReadCount>:
  AUDIO_SpeakerNode_t* speaker;
  int cur_waiting_bytes, read_bytes, last_packet_size;
  
   speaker = (AUDIO_SpeakerNode_t*)node_handle;
   /* read remind value in dma buffer */
    cur_waiting_bytes =  __HAL_DMA_GET_COUNTER(haudio_out_sai.hdmatx);
 800db0c:	4b0f      	ldr	r3, [pc, #60]	; (800db4c <AUDIO_SpeakerGetLastReadCount+0x40>)
 800db0e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800db10:	6812      	ldr	r2, [r2, #0]
 800db12:	6852      	ldr	r2, [r2, #4]
    last_packet_size = haudio_out_sai.XferSize;
 800db14:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
    read_bytes = (speaker->specific.dma_remaining>=cur_waiting_bytes )?speaker->specific.dma_remaining - cur_waiting_bytes:
 800db18:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800db1c:	4293      	cmp	r3, r2
 800db1e:	da0c      	bge.n	800db3a <AUDIO_SpeakerGetLastReadCount+0x2e>
{
 800db20:	b410      	push	{r4}
                 (last_packet_size - cur_waiting_bytes)+speaker->specific.dma_remaining;   
 800db22:	1a8c      	subs	r4, r1, r2
    read_bytes = (speaker->specific.dma_remaining>=cur_waiting_bytes )?speaker->specific.dma_remaining - cur_waiting_bytes:
 800db24:	4423      	add	r3, r4
    if(read_bytes<(last_packet_size>>1))
 800db26:	ebb3 0f61 	cmp.w	r3, r1, asr #1
 800db2a:	da00      	bge.n	800db2e <AUDIO_SpeakerGetLastReadCount+0x22>
    {
      read_bytes+=last_packet_size;
 800db2c:	440b      	add	r3, r1
    }
   speaker->specific.dma_remaining = cur_waiting_bytes;
 800db2e:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    
    return read_bytes;
}
 800db32:	b298      	uxth	r0, r3
 800db34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db38:	4770      	bx	lr
    read_bytes = (speaker->specific.dma_remaining>=cur_waiting_bytes )?speaker->specific.dma_remaining - cur_waiting_bytes:
 800db3a:	1a9b      	subs	r3, r3, r2
    if(read_bytes<(last_packet_size>>1))
 800db3c:	ebb3 0f61 	cmp.w	r3, r1, asr #1
 800db40:	da00      	bge.n	800db44 <AUDIO_SpeakerGetLastReadCount+0x38>
      read_bytes+=last_packet_size;
 800db42:	440b      	add	r3, r1
   speaker->specific.dma_remaining = cur_waiting_bytes;
 800db44:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
}
 800db48:	b298      	uxth	r0, r3
 800db4a:	4770      	bx	lr
 800db4c:	20001c94 	.word	0x20001c94

0800db50 <AUDIO_SpeakerInitInjectionsParams>:
{
 800db50:	b538      	push	{r3, r4, r5, lr}
 800db52:	4604      	mov	r4, r0
  speaker->packet_length = AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(speaker->node.audio_description);
 800db54:	6840      	ldr	r0, [r0, #4]
 800db56:	6801      	ldr	r1, [r0, #0]
 800db58:	4a12      	ldr	r2, [pc, #72]	; (800dba4 <AUDIO_SpeakerInitInjectionsParams+0x54>)
 800db5a:	fba2 3101 	umull	r3, r1, r2, r1
 800db5e:	0989      	lsrs	r1, r1, #6
 800db60:	7905      	ldrb	r5, [r0, #4]
 800db62:	7c43      	ldrb	r3, [r0, #17]
 800db64:	fb11 f105 	smulbb	r1, r1, r5
 800db68:	fb11 f103 	smulbb	r1, r1, r3
 800db6c:	8321      	strh	r1, [r4, #24]
  speaker->specific.injection_size = AUDIO_SPEAKER_INJECTION_LENGTH(speaker->node.audio_description);
 800db6e:	6803      	ldr	r3, [r0, #0]
 800db70:	fba2 3203 	umull	r3, r2, r2, r3
 800db74:	0992      	lsrs	r2, r2, #6
 800db76:	7901      	ldrb	r1, [r0, #4]
 800db78:	7c43      	ldrb	r3, [r0, #17]
 800db7a:	fb12 f201 	smulbb	r2, r2, r1
 800db7e:	fb12 f203 	smulbb	r2, r2, r3
 800db82:	b292      	uxth	r2, r2
 800db84:	87a2      	strh	r2, [r4, #60]	; 0x3c
  speaker->specific.double_buff = 0;
 800db86:	2100      	movs	r1, #0
 800db88:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
  speaker->specific.offset = 0;
 800db8c:	f884 104f 	strb.w	r1, [r4, #79]	; 0x4f
  memset(speaker->specific.alt_buffer, 0, speaker->specific.injection_size);
 800db90:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800db92:	f000 fe3f 	bl	800e814 <memset>
  speaker->specific.data = speaker->specific.alt_buffer;/* start injection of dumped data */
 800db96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800db98:	6423      	str	r3, [r4, #64]	; 0x40
  speaker->specific.data_size = speaker->specific.injection_size;
 800db9a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800db9c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 }
 800dba0:	bd38      	pop	{r3, r4, r5, pc}
 800dba2:	bf00      	nop
 800dba4:	10624dd3 	.word	0x10624dd3

0800dba8 <AUDIO_SpeakerSetVolume>:
{
 800dba8:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_SetVolume(VOLUME_DB_256_TO_PERCENT(volume_db_256));
 800dbaa:	f501 50c8 	add.w	r0, r1, #6400	; 0x1900
 800dbae:	2164      	movs	r1, #100	; 0x64
 800dbb0:	fb01 f100 	mul.w	r1, r1, r0
 800dbb4:	4805      	ldr	r0, [pc, #20]	; (800dbcc <AUDIO_SpeakerSetVolume+0x24>)
 800dbb6:	fb80 3001 	smull	r3, r0, r0, r1
 800dbba:	4408      	add	r0, r1
 800dbbc:	17c9      	asrs	r1, r1, #31
 800dbbe:	ebc1 3020 	rsb	r0, r1, r0, asr #12
 800dbc2:	b2c0      	uxtb	r0, r0
 800dbc4:	f7f3 ffa2 	bl	8001b0c <BSP_AUDIO_OUT_SetVolume>
}      
 800dbc8:	2000      	movs	r0, #0
 800dbca:	bd08      	pop	{r3, pc}
 800dbcc:	84210843 	.word	0x84210843

0800dbd0 <AUDIO_SpeakerMute>:
{
 800dbd0:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_SetMute(mute);
 800dbd2:	4608      	mov	r0, r1
 800dbd4:	f7f3 ffa8 	bl	8001b28 <BSP_AUDIO_OUT_SetMute>
}
 800dbd8:	2000      	movs	r0, #0
 800dbda:	bd08      	pop	{r3, pc}

0800dbdc <AUDIO_SpeakerStart>:
{
 800dbdc:	b538      	push	{r3, r4, r5, lr}
 800dbde:	460c      	mov	r4, r1
  speaker->buf = buffer;
 800dbe0:	6148      	str	r0, [r1, #20]
  speaker->specific.cmd = 0;
 800dbe2:	2500      	movs	r5, #0
 800dbe4:	f881 5050 	strb.w	r5, [r1, #80]	; 0x50
  AUDIO_SpeakerMute( 0,  speaker->node.audio_description->audio_mute , node_handle);
 800dbe8:	684b      	ldr	r3, [r1, #4]
 800dbea:	460a      	mov	r2, r1
 800dbec:	7c19      	ldrb	r1, [r3, #16]
 800dbee:	4628      	mov	r0, r5
 800dbf0:	f7ff ffee 	bl	800dbd0 <AUDIO_SpeakerMute>
  AUDIO_SpeakerSetVolume( 0,  speaker->node.audio_description->audio_volume_db_256 , node_handle);
 800dbf4:	6863      	ldr	r3, [r4, #4]
 800dbf6:	4622      	mov	r2, r4
 800dbf8:	68d9      	ldr	r1, [r3, #12]
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	f7ff ffd4 	bl	800dba8 <AUDIO_SpeakerSetVolume>
  speaker->node.state = AUDIO_NODE_STARTED;
 800dc00:	2302      	movs	r3, #2
 800dc02:	7023      	strb	r3, [r4, #0]
}
 800dc04:	4628      	mov	r0, r5
 800dc06:	bd38      	pop	{r3, r4, r5, pc}

0800dc08 <AUDIO_SpeakerDeInit>:
  if(speaker->node.state != AUDIO_NODE_OFF)
 800dc08:	7803      	ldrb	r3, [r0, #0]
 800dc0a:	b1e3      	cbz	r3, 800dc46 <AUDIO_SpeakerDeInit+0x3e>
{
 800dc0c:	b510      	push	{r4, lr}
 800dc0e:	4604      	mov	r4, r0
    if(speaker->node.state != AUDIO_NODE_ERROR)
 800dc10:	2b04      	cmp	r3, #4
 800dc12:	d007      	beq.n	800dc24 <AUDIO_SpeakerDeInit+0x1c>
      speaker->specific.cmd = SPEAKER_CMD_EXIT;
 800dc14:	2302      	movs	r3, #2
 800dc16:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        while(speaker->specific.cmd&SPEAKER_CMD_EXIT);
 800dc1a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800dc1e:	f013 0f02 	tst.w	r3, #2
 800dc22:	d1fa      	bne.n	800dc1a <AUDIO_SpeakerDeInit+0x12>
    BSP_AUDIO_OUT_SetMute(1);
 800dc24:	2001      	movs	r0, #1
 800dc26:	f7f3 ff7f 	bl	8001b28 <BSP_AUDIO_OUT_SetMute>
    free(speaker->specific.alt_buffer);
 800dc2a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800dc2c:	f000 fddc 	bl	800e7e8 <free>
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800dc30:	2002      	movs	r0, #2
 800dc32:	f7f3 ff51 	bl	8001ad8 <BSP_AUDIO_OUT_Stop>
    BSP_AUDIO_OUT_DeInit();
 800dc36:	f7f4 f849 	bl	8001ccc <BSP_AUDIO_OUT_DeInit>
    speaker->node.state = AUDIO_NODE_OFF;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	7023      	strb	r3, [r4, #0]
  AUDIO_SpeakerHandler = 0;
 800dc3e:	2000      	movs	r0, #0
 800dc40:	4b03      	ldr	r3, [pc, #12]	; (800dc50 <AUDIO_SpeakerDeInit+0x48>)
 800dc42:	6018      	str	r0, [r3, #0]
}
 800dc44:	bd10      	pop	{r4, pc}
  AUDIO_SpeakerHandler = 0;
 800dc46:	2000      	movs	r0, #0
 800dc48:	4b01      	ldr	r3, [pc, #4]	; (800dc50 <AUDIO_SpeakerDeInit+0x48>)
 800dc4a:	6018      	str	r0, [r3, #0]
}
 800dc4c:	4770      	bx	lr
 800dc4e:	bf00      	nop
 800dc50:	20001b4c 	.word	0x20001b4c

0800dc54 <AUDIO_SPEAKER_USER_Init>:
{
 800dc54:	b570      	push	{r4, r5, r6, lr}
 800dc56:	4605      	mov	r5, r0
 800dc58:	460e      	mov	r6, r1
 800dc5a:	4614      	mov	r4, r2
  memset(speaker, 0, sizeof(AUDIO_SpeakerNode_t));
 800dc5c:	2254      	movs	r2, #84	; 0x54
 800dc5e:	2100      	movs	r1, #0
 800dc60:	4620      	mov	r0, r4
 800dc62:	f000 fdd7 	bl	800e814 <memset>
  speaker->node.type = AUDIO_OUTPUT;
 800dc66:	2301      	movs	r3, #1
 800dc68:	7223      	strb	r3, [r4, #8]
  speaker->node.state = AUDIO_NODE_INITIALIZED;
 800dc6a:	7023      	strb	r3, [r4, #0]
  speaker->node.session_handle = session_handle;
 800dc6c:	60e6      	str	r6, [r4, #12]
  speaker->node.audio_description = audio_description;
 800dc6e:	6065      	str	r5, [r4, #4]
  speaker->specific.alt_buffer = malloc(SPEAKER_ALT_BUFFER_SIZE);
 800dc70:	f44f 7010 	mov.w	r0, #576	; 0x240
 800dc74:	f000 fdb0 	bl	800e7d8 <malloc>
 800dc78:	64a0      	str	r0, [r4, #72]	; 0x48
  if(speaker->specific.alt_buffer == 0)
 800dc7a:	b328      	cbz	r0, 800dcc8 <AUDIO_SPEAKER_USER_Init+0x74>
  AUDIO_SpeakerInitInjectionsParams( speaker);
 800dc7c:	4620      	mov	r0, r4
 800dc7e:	f7ff ff67 	bl	800db50 <AUDIO_SpeakerInitInjectionsParams>
  speaker->SpeakerDeInit = AUDIO_SpeakerDeInit;
 800dc82:	4b13      	ldr	r3, [pc, #76]	; (800dcd0 <AUDIO_SPEAKER_USER_Init+0x7c>)
 800dc84:	61e3      	str	r3, [r4, #28]
  speaker->SpeakerStart = AUDIO_SpeakerStart;
 800dc86:	4b13      	ldr	r3, [pc, #76]	; (800dcd4 <AUDIO_SPEAKER_USER_Init+0x80>)
 800dc88:	6223      	str	r3, [r4, #32]
  speaker->SpeakerStop = AUDIO_SpeakerStop;
 800dc8a:	4b13      	ldr	r3, [pc, #76]	; (800dcd8 <AUDIO_SPEAKER_USER_Init+0x84>)
 800dc8c:	6263      	str	r3, [r4, #36]	; 0x24
  speaker->SpeakerChangeFrequency = AUDIO_SpeakerChangeFrequency;
 800dc8e:	4b13      	ldr	r3, [pc, #76]	; (800dcdc <AUDIO_SPEAKER_USER_Init+0x88>)
 800dc90:	62a3      	str	r3, [r4, #40]	; 0x28
  speaker->SpeakerMute = AUDIO_SpeakerMute;
 800dc92:	4b13      	ldr	r3, [pc, #76]	; (800dce0 <AUDIO_SPEAKER_USER_Init+0x8c>)
 800dc94:	62e3      	str	r3, [r4, #44]	; 0x2c
  speaker->SpeakerSetVolume = AUDIO_SpeakerSetVolume;
 800dc96:	4b13      	ldr	r3, [pc, #76]	; (800dce4 <AUDIO_SPEAKER_USER_Init+0x90>)
 800dc98:	6323      	str	r3, [r4, #48]	; 0x30
  speaker->SpeakerStartReadCount = AUDIO_SpeakerStartReadCount;
 800dc9a:	4b13      	ldr	r3, [pc, #76]	; (800dce8 <AUDIO_SPEAKER_USER_Init+0x94>)
 800dc9c:	6363      	str	r3, [r4, #52]	; 0x34
  speaker->SpeakerGetReadCount = AUDIO_SpeakerGetLastReadCount;
 800dc9e:	4b13      	ldr	r3, [pc, #76]	; (800dcec <AUDIO_SPEAKER_USER_Init+0x98>)
 800dca0:	63a3      	str	r3, [r4, #56]	; 0x38
                     speaker->node.audio_description->frequency, audio_description->resolution<<3 );
 800dca2:	6862      	ldr	r2, [r4, #4]
 800dca4:	7c6b      	ldrb	r3, [r5, #17]
  BSP_AUDIO_OUT_Init_Ext(OUTPUT_DEVICE_AUTO,
 800dca6:	00db      	lsls	r3, r3, #3
 800dca8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800dcac:	6812      	ldr	r2, [r2, #0]
 800dcae:	2150      	movs	r1, #80	; 0x50
 800dcb0:	2004      	movs	r0, #4
 800dcb2:	f7f4 f84b 	bl	8001d4c <BSP_AUDIO_OUT_Init_Ext>
  BSP_AUDIO_OUT_Play((uint16_t *)speaker->specific.data ,speaker->specific.data_size );
 800dcb6:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 800dcba:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800dcbc:	f7f3 fed0 	bl	8001a60 <BSP_AUDIO_OUT_Play>
  AUDIO_SpeakerHandler = speaker;
 800dcc0:	4b0b      	ldr	r3, [pc, #44]	; (800dcf0 <AUDIO_SPEAKER_USER_Init+0x9c>)
 800dcc2:	601c      	str	r4, [r3, #0]
}
 800dcc4:	2000      	movs	r0, #0
 800dcc6:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 800dcc8:	f7ff fd7c 	bl	800d7c4 <Error_Handler>
 800dccc:	e7d6      	b.n	800dc7c <AUDIO_SPEAKER_USER_Init+0x28>
 800dcce:	bf00      	nop
 800dcd0:	0800dc09 	.word	0x0800dc09
 800dcd4:	0800dbdd 	.word	0x0800dbdd
 800dcd8:	0800dad9 	.word	0x0800dad9
 800dcdc:	0800dae9 	.word	0x0800dae9
 800dce0:	0800dbd1 	.word	0x0800dbd1
 800dce4:	0800dba9 	.word	0x0800dba9
 800dce8:	0800daf9 	.word	0x0800daf9
 800dcec:	0800db0d 	.word	0x0800db0d
 800dcf0:	20001b4c 	.word	0x20001b4c

0800dcf4 <BSP_AUDIO_OUT_Error_CallBack>:
{
 800dcf4:	b508      	push	{r3, lr}
  Error_Handler();
 800dcf6:	f7ff fd65 	bl	800d7c4 <Error_Handler>
}
 800dcfa:	bd08      	pop	{r3, pc}

0800dcfc <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  if((AUDIO_SpeakerHandler)&&(AUDIO_SpeakerHandler->node.state != AUDIO_NODE_OFF))
 800dcfc:	4b3f      	ldr	r3, [pc, #252]	; (800ddfc <BSP_AUDIO_OUT_TransferComplete_CallBack+0x100>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d07a      	beq.n	800ddfa <BSP_AUDIO_OUT_TransferComplete_CallBack+0xfe>
 800dd04:	781a      	ldrb	r2, [r3, #0]
 800dd06:	2a00      	cmp	r2, #0
 800dd08:	d077      	beq.n	800ddfa <BSP_AUDIO_OUT_TransferComplete_CallBack+0xfe>
   if(AUDIO_SpeakerHandler->specific.cmd&SPEAKER_CMD_EXIT)
 800dd0a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800dd0e:	f012 0f02 	tst.w	r2, #2
 800dd12:	d117      	bne.n	800dd44 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x48>
{
 800dd14:	b570      	push	{r4, r5, r6, lr}
   if(AUDIO_SpeakerHandler->specific.cmd&SPEAKER_CMD_CHANGE_FREQUENCE)
 800dd16:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800dd1a:	f012 0f04 	tst.w	r2, #4
 800dd1e:	d115      	bne.n	800dd4c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x50>
  if(AUDIO_SpeakerHandler->specific.cmd&SPEAKER_CMD_STOP)
 800dd20:	4b36      	ldr	r3, [pc, #216]	; (800ddfc <BSP_AUDIO_OUT_TransferComplete_CallBack+0x100>)
 800dd22:	681c      	ldr	r4, [r3, #0]
 800dd24:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800dd28:	f013 0f01 	tst.w	r3, #1
 800dd2c:	d126      	bne.n	800dd7c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x80>
    BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)AUDIO_SpeakerHandler->specific.data, (uint16_t)AUDIO_SpeakerHandler->specific.data_size); 
 800dd2e:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 800dd32:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800dd34:	f7f3 febe 	bl	8001ab4 <BSP_AUDIO_OUT_ChangeBuffer>
    if(AUDIO_SpeakerHandler->node.state == AUDIO_NODE_STARTED)
 800dd38:	4b30      	ldr	r3, [pc, #192]	; (800ddfc <BSP_AUDIO_OUT_TransferComplete_CallBack+0x100>)
 800dd3a:	6819      	ldr	r1, [r3, #0]
 800dd3c:	780b      	ldrb	r3, [r1, #0]
 800dd3e:	2b02      	cmp	r3, #2
 800dd40:	d02f      	beq.n	800dda2 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xa6>
}
 800dd42:	bd70      	pop	{r4, r5, r6, pc}
     AUDIO_SpeakerHandler->specific.cmd = 0;
 800dd44:	2200      	movs	r2, #0
 800dd46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
     return ;
 800dd4a:	4770      	bx	lr
     AUDIO_SpeakerHandler->node.state = AUDIO_NODE_STOPPED;
 800dd4c:	2203      	movs	r2, #3
 800dd4e:	701a      	strb	r2, [r3, #0]
     BSP_AUDIO_OUT_SetMute(1);
 800dd50:	2001      	movs	r0, #1
 800dd52:	f7f3 fee9 	bl	8001b28 <BSP_AUDIO_OUT_SetMute>
     AUDIO_SpeakerInitInjectionsParams(AUDIO_SpeakerHandler);
 800dd56:	4c29      	ldr	r4, [pc, #164]	; (800ddfc <BSP_AUDIO_OUT_TransferComplete_CallBack+0x100>)
 800dd58:	6820      	ldr	r0, [r4, #0]
 800dd5a:	f7ff fef9 	bl	800db50 <AUDIO_SpeakerInitInjectionsParams>
     BSP_AUDIO_OUT_SetFrequency(AUDIO_SpeakerHandler->node.audio_description->frequency);
 800dd5e:	6823      	ldr	r3, [r4, #0]
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	6818      	ldr	r0, [r3, #0]
 800dd64:	f7f4 f846 	bl	8001df4 <BSP_AUDIO_OUT_SetFrequency>
     BSP_AUDIO_OUT_SetMute(AUDIO_SpeakerHandler->node.audio_description->audio_mute);
 800dd68:	6823      	ldr	r3, [r4, #0]
 800dd6a:	685b      	ldr	r3, [r3, #4]
 800dd6c:	7c18      	ldrb	r0, [r3, #16]
 800dd6e:	f7f3 fedb 	bl	8001b28 <BSP_AUDIO_OUT_SetMute>
     AUDIO_SpeakerHandler->specific.cmd = 0;
 800dd72:	6823      	ldr	r3, [r4, #0]
 800dd74:	2200      	movs	r2, #0
 800dd76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800dd7a:	e7d1      	b.n	800dd20 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x24>
    AUDIO_SpeakerHandler->specific.data      = AUDIO_SpeakerHandler->specific.alt_buffer;
 800dd7c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800dd7e:	6420      	str	r0, [r4, #64]	; 0x40
    AUDIO_SpeakerHandler->specific.data_size = AUDIO_SpeakerHandler->specific.injection_size;
 800dd80:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800dd82:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    AUDIO_SpeakerHandler->specific.offset    = 0;
 800dd86:	2100      	movs	r1, #0
 800dd88:	f884 104f 	strb.w	r1, [r4, #79]	; 0x4f
    memset(AUDIO_SpeakerHandler->specific.data,0,AUDIO_SpeakerHandler->specific.data_size);
 800dd8c:	f000 fd42 	bl	800e814 <memset>
    AUDIO_SpeakerHandler->node.state = AUDIO_NODE_STOPPED;
 800dd90:	2303      	movs	r3, #3
 800dd92:	7023      	strb	r3, [r4, #0]
    AUDIO_SpeakerHandler->specific.cmd       ^= SPEAKER_CMD_STOP;
 800dd94:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800dd98:	f083 0301 	eor.w	r3, r3, #1
 800dd9c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800dda0:	e7c5      	b.n	800dd2e <BSP_AUDIO_OUT_TransferComplete_CallBack+0x32>
      AUDIO_SpeakerHandler->node.session_handle->SessionCallback(AUDIO_PACKET_PLAYED, (AUDIO_Node_t*)AUDIO_SpeakerHandler, 
 800dda2:	68ca      	ldr	r2, [r1, #12]
 800dda4:	6893      	ldr	r3, [r2, #8]
 800dda6:	2003      	movs	r0, #3
 800dda8:	4798      	blx	r3
      AUDIO_SpeakerHandler->specific.data_size = AUDIO_SpeakerHandler->specific.injection_size;
 800ddaa:	4b14      	ldr	r3, [pc, #80]	; (800ddfc <BSP_AUDIO_OUT_TransferComplete_CallBack+0x100>)
 800ddac:	6819      	ldr	r1, [r3, #0]
 800ddae:	8f8c      	ldrh	r4, [r1, #60]	; 0x3c
 800ddb0:	f8a1 4044 	strh.w	r4, [r1, #68]	; 0x44
      read_length = AUDIO_SpeakerHandler->packet_length;
 800ddb4:	8b0d      	ldrh	r5, [r1, #24]
      wr_distance = AUDIO_BUFFER_FILLED_SIZE(AUDIO_SpeakerHandler->buf);
 800ddb6:	694a      	ldr	r2, [r1, #20]
 800ddb8:	88d3      	ldrh	r3, [r2, #6]
 800ddba:	8890      	ldrh	r0, [r2, #4]
 800ddbc:	4283      	cmp	r3, r0
 800ddbe:	d308      	bcc.n	800ddd2 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xd6>
 800ddc0:	1a1b      	subs	r3, r3, r0
 800ddc2:	b29b      	uxth	r3, r3
      if(wr_distance < AUDIO_SpeakerHandler->specific.injection_size)
 800ddc4:	429c      	cmp	r4, r3
 800ddc6:	d90a      	bls.n	800ddde <BSP_AUDIO_OUT_TransferComplete_CallBack+0xe2>
        AUDIO_SpeakerHandler->node.session_handle->SessionCallback(AUDIO_UNDERRUN, (AUDIO_Node_t*)AUDIO_SpeakerHandler, 
 800ddc8:	68ca      	ldr	r2, [r1, #12]
 800ddca:	6893      	ldr	r3, [r2, #8]
 800ddcc:	2005      	movs	r0, #5
 800ddce:	4798      	blx	r3
 800ddd0:	e7b7      	b.n	800dd42 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x46>
      wr_distance = AUDIO_BUFFER_FILLED_SIZE(AUDIO_SpeakerHandler->buf);
 800ddd2:	8916      	ldrh	r6, [r2, #8]
 800ddd4:	4433      	add	r3, r6
 800ddd6:	b29b      	uxth	r3, r3
 800ddd8:	1a1b      	subs	r3, r3, r0
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	e7f2      	b.n	800ddc4 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xc8>
        AUDIO_SpeakerHandler->specific.data = AUDIO_SpeakerHandler->buf->data + AUDIO_SpeakerHandler->buf->rd_ptr;
 800ddde:	6813      	ldr	r3, [r2, #0]
 800dde0:	4418      	add	r0, r3
 800dde2:	6408      	str	r0, [r1, #64]	; 0x40
        AUDIO_SpeakerHandler->buf->rd_ptr += read_length;
 800dde4:	8893      	ldrh	r3, [r2, #4]
 800dde6:	441d      	add	r5, r3
 800dde8:	8095      	strh	r5, [r2, #4]
        if(AUDIO_SpeakerHandler->buf->rd_ptr >= AUDIO_SpeakerHandler->buf->size)
 800ddea:	694b      	ldr	r3, [r1, #20]
 800ddec:	889a      	ldrh	r2, [r3, #4]
 800ddee:	8919      	ldrh	r1, [r3, #8]
 800ddf0:	428a      	cmp	r2, r1
 800ddf2:	d3a6      	bcc.n	800dd42 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x46>
          AUDIO_SpeakerHandler->buf->rd_ptr = AUDIO_SpeakerHandler->buf->rd_ptr - AUDIO_SpeakerHandler->buf->size;
 800ddf4:	1a52      	subs	r2, r2, r1
 800ddf6:	809a      	strh	r2, [r3, #4]
 800ddf8:	e7a3      	b.n	800dd42 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x46>
 800ddfa:	4770      	bx	lr
 800ddfc:	20001b4c 	.word	0x20001b4c

0800de00 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
}
 800de00:	4770      	bx	lr
	...

0800de04 <USBD_LL_Setup_Fifo>:
/**
  * @brief  Setup dynamically the fifo.
  * @retval Status OK
  */
static USBD_StatusTypeDef USBD_LL_Setup_Fifo(void)
{
 800de04:	b510      	push	{r4, lr}
 800de06:	b084      	sub	sp, #16
  
  uint16_t tx_fifo_size[5]={0};/* TX_FIFO allocation*/
 800de08:	2000      	movs	r0, #0
 800de0a:	9001      	str	r0, [sp, #4]
 800de0c:	9002      	str	r0, [sp, #8]
 800de0e:	f8ad 000c 	strh.w	r0, [sp, #12]
#if  USE_USB_AUDIO_RECORDING   
 if((USB_AUDIO_CONFIG_RECORD_EP_IN&0x7F)>max_tx_ep_num)
 {
  max_tx_ep_num = USB_AUDIO_CONFIG_RECORD_EP_IN&0x7F;  
 }
 tx_fifo_size[USB_AUDIO_CONFIG_RECORD_EP_IN&0x7F] = (USBD_AUDIO_CONFIG_RECORD_MAX_PACKET_SIZE + 3U)/4;
 800de12:	2331      	movs	r3, #49	; 0x31
 800de14:	f8ad 3008 	strh.w	r3, [sp, #8]
#endif /* USE_USB_AUDIO_RECORDING */
 
  tx_fifo_used_size = (USB_AUDIO_GetConfigDescriptor(0)+3)/4 ;
 800de18:	f7f5 fdda 	bl	80039d0 <USB_AUDIO_GetConfigDescriptor>
 800de1c:	3003      	adds	r0, #3
 800de1e:	d405      	bmi.n	800de2c <USBD_LL_Setup_Fifo+0x28>
 800de20:	f3c0 008f 	ubfx	r0, r0, #2, #16
  tx_fifo_size[0] = tx_fifo_used_size;
 800de24:	f8ad 0004 	strh.w	r0, [sp, #4]
 
  for(int i = 1; i<= max_tx_ep_num; i++)
 800de28:	2301      	movs	r3, #1
 800de2a:	e009      	b.n	800de40 <USBD_LL_Setup_Fifo+0x3c>
  tx_fifo_used_size = (USB_AUDIO_GetConfigDescriptor(0)+3)/4 ;
 800de2c:	3003      	adds	r0, #3
 800de2e:	e7f7      	b.n	800de20 <USBD_LL_Setup_Fifo+0x1c>
 {
   if(tx_fifo_size[i]<16)
   {
     tx_fifo_size[i] = 16;
   }
   tx_fifo_used_size += tx_fifo_size[i];
 800de30:	aa04      	add	r2, sp, #16
 800de32:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800de36:	f832 2c0c 	ldrh.w	r2, [r2, #-12]
 800de3a:	4410      	add	r0, r2
 800de3c:	b280      	uxth	r0, r0
  for(int i = 1; i<= max_tx_ep_num; i++)
 800de3e:	3301      	adds	r3, #1
 800de40:	2b02      	cmp	r3, #2
 800de42:	dc0e      	bgt.n	800de62 <USBD_LL_Setup_Fifo+0x5e>
   if(tx_fifo_size[i]<16)
 800de44:	aa04      	add	r2, sp, #16
 800de46:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800de4a:	f832 2c0c 	ldrh.w	r2, [r2, #-12]
 800de4e:	2a0f      	cmp	r2, #15
 800de50:	d8ee      	bhi.n	800de30 <USBD_LL_Setup_Fifo+0x2c>
     tx_fifo_size[i] = 16;
 800de52:	2110      	movs	r1, #16
 800de54:	eb0d 0201 	add.w	r2, sp, r1
 800de58:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800de5c:	f822 1c0c 	strh.w	r1, [r2, #-12]
 800de60:	e7e6      	b.n	800de30 <USBD_LL_Setup_Fifo+0x2c>
 }
 
 rx_fifo_size += (5*1/*number of control endpoints*/+8
                    +1/* for status information*/+2*8/*number of OUT endpoints*/+1/*for Global NAK*/);
 
  if(tx_fifo_used_size + rx_fifo_size<=USB_FIFO_WORD_SIZE)
 800de62:	f100 0350 	add.w	r3, r0, #80	; 0x50
 800de66:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800de6a:	d80d      	bhi.n	800de88 <USBD_LL_Setup_Fifo+0x84>
  {
#if  USE_USB_AUDIO_RECORDING   
 tx_fifo_size[USB_AUDIO_CONFIG_RECORD_EP_IN&0x7F] += USB_FIFO_WORD_SIZE - (tx_fifo_used_size + rx_fifo_size);
 800de6c:	b298      	uxth	r0, r3
 800de6e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800de72:	1a18      	subs	r0, r3, r0
 800de74:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 800de78:	f8ad 0008 	strh.w	r0, [sp, #8]
  {
     Error_Handler();
  }
  
  
 HAL_PCDEx_SetRxFiFo(&hpcd, rx_fifo_size);
 800de7c:	2150      	movs	r1, #80	; 0x50
 800de7e:	480b      	ldr	r0, [pc, #44]	; (800deac <USBD_LL_Setup_Fifo+0xa8>)
 800de80:	f7f9 ff5a 	bl	8007d38 <HAL_PCDEx_SetRxFiFo>
 for(int i = 0; i<= max_tx_ep_num; i++)
 800de84:	2400      	movs	r4, #0
 800de86:	e00c      	b.n	800dea2 <USBD_LL_Setup_Fifo+0x9e>
     Error_Handler();
 800de88:	f7ff fc9c 	bl	800d7c4 <Error_Handler>
 800de8c:	e7f6      	b.n	800de7c <USBD_LL_Setup_Fifo+0x78>
 {
   HAL_PCD_SetTxFiFo(&hpcd, i, tx_fifo_size[i]);
 800de8e:	ab04      	add	r3, sp, #16
 800de90:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800de94:	f833 2c0c 	ldrh.w	r2, [r3, #-12]
 800de98:	b2e1      	uxtb	r1, r4
 800de9a:	4804      	ldr	r0, [pc, #16]	; (800deac <USBD_LL_Setup_Fifo+0xa8>)
 800de9c:	f7f9 ff28 	bl	8007cf0 <HAL_PCDEx_SetTxFiFo>
 for(int i = 0; i<= max_tx_ep_num; i++)
 800dea0:	3401      	adds	r4, #1
 800dea2:	2c02      	cmp	r4, #2
 800dea4:	ddf3      	ble.n	800de8e <USBD_LL_Setup_Fifo+0x8a>
 }
 return USBD_OK;
}
 800dea6:	2000      	movs	r0, #0
 800dea8:	b004      	add	sp, #16
 800deaa:	bd10      	pop	{r4, pc}
 800deac:	20058b7c 	.word	0x20058b7c

0800deb0 <HAL_PCD_MspInit>:
{
 800deb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800deb4:	b091      	sub	sp, #68	; 0x44
  if(hpcd->Instance == USB_OTG_FS)
 800deb6:	6803      	ldr	r3, [r0, #0]
 800deb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800debc:	d005      	beq.n	800deca <HAL_PCD_MspInit+0x1a>
  else if(hpcd->Instance == USB_OTG_HS)
 800debe:	4a6f      	ldr	r2, [pc, #444]	; (800e07c <HAL_PCD_MspInit+0x1cc>)
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d04f      	beq.n	800df64 <HAL_PCD_MspInit+0xb4>
}
 800dec4:	b011      	add	sp, #68	; 0x44
 800dec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800deca:	4c6d      	ldr	r4, [pc, #436]	; (800e080 <HAL_PCD_MspInit+0x1d0>)
 800decc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dece:	f043 0301 	orr.w	r3, r3, #1
 800ded2:	6323      	str	r3, [r4, #48]	; 0x30
 800ded4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ded6:	f003 0301 	and.w	r3, r3, #1
 800deda:	9301      	str	r3, [sp, #4]
 800dedc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800dede:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dee2:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dee4:	2302      	movs	r3, #2
 800dee6:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dee8:	2500      	movs	r5, #0
 800deea:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800deec:	2603      	movs	r6, #3
 800deee:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800def0:	f04f 080a 	mov.w	r8, #10
 800def4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800def8:	4f62      	ldr	r7, [pc, #392]	; (800e084 <HAL_PCD_MspInit+0x1d4>)
 800defa:	a90b      	add	r1, sp, #44	; 0x2c
 800defc:	4638      	mov	r0, r7
 800defe:	f7f7 ffd5 	bl	8005eac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800df02:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df06:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800df08:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df0a:	950d      	str	r5, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df0c:	a90b      	add	r1, sp, #44	; 0x2c
 800df0e:	4638      	mov	r0, r7
 800df10:	f7f7 ffcc 	bl	8005eac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800df14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df18:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800df1a:	2312      	movs	r3, #18
 800df1c:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df1e:	2301      	movs	r3, #1
 800df20:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800df22:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df26:	a90b      	add	r1, sp, #44	; 0x2c
 800df28:	4638      	mov	r0, r7
 800df2a:	f7f7 ffbf 	bl	8005eac <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800df2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df34:	6363      	str	r3, [r4, #52]	; 0x34
 800df36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df3c:	9302      	str	r3, [sp, #8]
 800df3e:	9b02      	ldr	r3, [sp, #8]
 800df40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800df42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800df46:	6463      	str	r3, [r4, #68]	; 0x44
 800df48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800df4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df4e:	9303      	str	r3, [sp, #12]
 800df50:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, USB_IRQ_PREPRIO, 0);
 800df52:	462a      	mov	r2, r5
 800df54:	4631      	mov	r1, r6
 800df56:	2043      	movs	r0, #67	; 0x43
 800df58:	f7f7 f848 	bl	8004fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800df5c:	2043      	movs	r0, #67	; 0x43
 800df5e:	f7f7 f877 	bl	8005050 <HAL_NVIC_EnableIRQ>
 800df62:	e7af      	b.n	800dec4 <HAL_PCD_MspInit+0x14>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df64:	4c46      	ldr	r4, [pc, #280]	; (800e080 <HAL_PCD_MspInit+0x1d0>)
 800df66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800df68:	f043 0301 	orr.w	r3, r3, #1
 800df6c:	6323      	str	r3, [r4, #48]	; 0x30
 800df6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800df70:	f003 0301 	and.w	r3, r3, #1
 800df74:	9304      	str	r3, [sp, #16]
 800df76:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800df78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800df7a:	f043 0302 	orr.w	r3, r3, #2
 800df7e:	6323      	str	r3, [r4, #48]	; 0x30
 800df80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800df82:	f003 0302 	and.w	r3, r3, #2
 800df86:	9305      	str	r3, [sp, #20]
 800df88:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800df8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800df8c:	f043 0304 	orr.w	r3, r3, #4
 800df90:	6323      	str	r3, [r4, #48]	; 0x30
 800df92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800df94:	f003 0304 	and.w	r3, r3, #4
 800df98:	9306      	str	r3, [sp, #24]
 800df9a:	9b06      	ldr	r3, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800df9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800df9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfa2:	6323      	str	r3, [r4, #48]	; 0x30
 800dfa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dfa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfaa:	9307      	str	r3, [sp, #28]
 800dfac:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800dfae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dfb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dfb4:	6323      	str	r3, [r4, #48]	; 0x30
 800dfb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dfb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfbc:	9308      	str	r3, [sp, #32]
 800dfbe:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800dfc0:	2320      	movs	r3, #32
 800dfc2:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfc4:	2702      	movs	r7, #2
 800dfc6:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfc8:	2500      	movs	r5, #0
 800dfca:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dfcc:	f04f 0803 	mov.w	r8, #3
 800dfd0:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800dfd4:	260a      	movs	r6, #10
 800dfd6:	960f      	str	r6, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dfd8:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800e084 <HAL_PCD_MspInit+0x1d4>
 800dfdc:	a90b      	add	r1, sp, #44	; 0x2c
 800dfde:	4648      	mov	r0, r9
 800dfe0:	f7f7 ff64 	bl	8005eac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800dfe4:	2308      	movs	r3, #8
 800dfe6:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfe8:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfea:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dfec:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800dff0:	960f      	str	r6, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dff2:	a90b      	add	r1, sp, #44	; 0x2c
 800dff4:	4648      	mov	r0, r9
 800dff6:	f7f7 ff59 	bl	8005eac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_5 |\
 800dffa:	f643 4323 	movw	r3, #15395	; 0x3c23
 800dffe:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e000:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e002:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800e004:	960f      	str	r6, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e006:	a90b      	add	r1, sp, #44	; 0x2c
 800e008:	481f      	ldr	r0, [pc, #124]	; (800e088 <HAL_PCD_MspInit+0x1d8>)
 800e00a:	f7f7 ff4f 	bl	8005eac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800e00e:	2301      	movs	r3, #1
 800e010:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e012:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e014:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800e016:	960f      	str	r6, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e018:	a90b      	add	r1, sp, #44	; 0x2c
 800e01a:	481c      	ldr	r0, [pc, #112]	; (800e08c <HAL_PCD_MspInit+0x1dc>)
 800e01c:	f7f7 ff46 	bl	8005eac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800e020:	2310      	movs	r3, #16
 800e022:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e024:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e026:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800e028:	960f      	str	r6, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e02a:	a90b      	add	r1, sp, #44	; 0x2c
 800e02c:	4818      	ldr	r0, [pc, #96]	; (800e090 <HAL_PCD_MspInit+0x1e0>)
 800e02e:	f7f7 ff3d 	bl	8005eac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800e032:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e036:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e038:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e03a:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800e03c:	960f      	str	r6, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800e03e:	a90b      	add	r1, sp, #44	; 0x2c
 800e040:	4814      	ldr	r0, [pc, #80]	; (800e094 <HAL_PCD_MspInit+0x1e4>)
 800e042:	f7f7 ff33 	bl	8005eac <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800e046:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e048:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e04c:	6323      	str	r3, [r4, #48]	; 0x30
 800e04e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e050:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e054:	9309      	str	r3, [sp, #36]	; 0x24
 800e056:	9b09      	ldr	r3, [sp, #36]	; 0x24
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e058:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e05a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e05e:	6323      	str	r3, [r4, #48]	; 0x30
 800e060:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e062:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e066:	930a      	str	r3, [sp, #40]	; 0x28
 800e068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    HAL_NVIC_SetPriority(OTG_HS_IRQn, USB_IRQ_PREPRIO, 0);
 800e06a:	462a      	mov	r2, r5
 800e06c:	4641      	mov	r1, r8
 800e06e:	204d      	movs	r0, #77	; 0x4d
 800e070:	f7f6 ffbc 	bl	8004fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e074:	204d      	movs	r0, #77	; 0x4d
 800e076:	f7f6 ffeb 	bl	8005050 <HAL_NVIC_EnableIRQ>
}
 800e07a:	e723      	b.n	800dec4 <HAL_PCD_MspInit+0x14>
 800e07c:	40040000 	.word	0x40040000
 800e080:	40023800 	.word	0x40023800
 800e084:	40020000 	.word	0x40020000
 800e088:	40020400 	.word	0x40020400
 800e08c:	40020800 	.word	0x40020800
 800e090:	40021c00 	.word	0x40021c00
 800e094:	40022000 	.word	0x40022000

0800e098 <HAL_PCD_SetupStageCallback>:
{
 800e098:	b508      	push	{r3, lr}
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800e09a:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800e09e:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800e0a2:	f7fd f8ed 	bl	800b280 <USBD_LL_SetupStage>
}
 800e0a6:	bd08      	pop	{r3, pc}

0800e0a8 <HAL_PCD_DataOutStageCallback>:
{
 800e0a8:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e0aa:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800e0ae:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e0b2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e0b6:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800e0ba:	f7fd f90e 	bl	800b2da <USBD_LL_DataOutStage>
}
 800e0be:	bd08      	pop	{r3, pc}

0800e0c0 <HAL_PCD_DataInStageCallback>:
{
 800e0c0:	b508      	push	{r3, lr}
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e0c2:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800e0c6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e0ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e0cc:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800e0d0:	f7fd f938 	bl	800b344 <USBD_LL_DataInStage>
}
 800e0d4:	bd08      	pop	{r3, pc}

0800e0d6 <HAL_PCD_SOFCallback>:
{
 800e0d6:	b508      	push	{r3, lr}
  USBD_LL_SOF(hpcd->pData);
 800e0d8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800e0dc:	f7fd f9bb 	bl	800b456 <USBD_LL_SOF>
}
 800e0e0:	bd08      	pop	{r3, pc}

0800e0e2 <HAL_PCD_ResetCallback>:
{   
 800e0e2:	b538      	push	{r3, r4, r5, lr}
 800e0e4:	4604      	mov	r4, r0
  switch(hpcd->Init.speed)
 800e0e6:	68c3      	ldr	r3, [r0, #12]
 800e0e8:	b153      	cbz	r3, 800e100 <HAL_PCD_ResetCallback+0x1e>
    speed = USBD_SPEED_FULL;
 800e0ea:	2501      	movs	r5, #1
  USBD_LL_Reset(hpcd->pData);
 800e0ec:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 800e0f0:	f7fd f980 	bl	800b3f4 <USBD_LL_Reset>
  USBD_LL_SetSpeed(hpcd->pData, speed);
 800e0f4:	4629      	mov	r1, r5
 800e0f6:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 800e0fa:	f7fd f99a 	bl	800b432 <USBD_LL_SetSpeed>
}
 800e0fe:	bd38      	pop	{r3, r4, r5, pc}
  switch(hpcd->Init.speed)
 800e100:	2500      	movs	r5, #0
 800e102:	e7f3      	b.n	800e0ec <HAL_PCD_ResetCallback+0xa>

0800e104 <HAL_PCD_SuspendCallback>:
{
 800e104:	b508      	push	{r3, lr}
  USBD_LL_Suspend(hpcd->pData);
 800e106:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800e10a:	f7fd f995 	bl	800b438 <USBD_LL_Suspend>
}
 800e10e:	bd08      	pop	{r3, pc}

0800e110 <HAL_PCD_ResumeCallback>:
{
 800e110:	b508      	push	{r3, lr}
  USBD_LL_Resume(hpcd->pData);
 800e112:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800e116:	f7fd f998 	bl	800b44a <USBD_LL_Resume>
}
 800e11a:	bd08      	pop	{r3, pc}

0800e11c <HAL_PCD_ISOOUTIncompleteCallback>:
{
 800e11c:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 800e11e:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800e122:	f7fd f9b4 	bl	800b48e <USBD_LL_IsoOUTIncomplete>
}
 800e126:	bd08      	pop	{r3, pc}

0800e128 <HAL_PCD_ISOINIncompleteCallback>:
{
 800e128:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 800e12a:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800e12e:	f7fd f9a0 	bl	800b472 <USBD_LL_IsoINIncomplete>
}
 800e132:	bd08      	pop	{r3, pc}

0800e134 <HAL_PCD_ConnectCallback>:
{
 800e134:	b508      	push	{r3, lr}
  USBD_LL_DevConnected(hpcd->pData);
 800e136:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800e13a:	f7fd f9b6 	bl	800b4aa <USBD_LL_DevConnected>
}
 800e13e:	bd08      	pop	{r3, pc}

0800e140 <HAL_PCD_DisconnectCallback>:
{
 800e140:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected(hpcd->pData);
 800e142:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800e146:	f7fd f9b2 	bl	800b4ae <USBD_LL_DevDisconnected>
}
 800e14a:	bd08      	pop	{r3, pc}

0800e14c <USBD_LL_Init>:
{
 800e14c:	b510      	push	{r4, lr}
 800e14e:	4603      	mov	r3, r0
  hpcd.Instance = USB_OTG_HS;
 800e150:	480d      	ldr	r0, [pc, #52]	; (800e188 <USBD_LL_Init+0x3c>)
 800e152:	4a0e      	ldr	r2, [pc, #56]	; (800e18c <USBD_LL_Init+0x40>)
 800e154:	6002      	str	r2, [r0, #0]
  hpcd.Init.dev_endpoints = 6;
 800e156:	2206      	movs	r2, #6
 800e158:	6042      	str	r2, [r0, #4]
  hpcd.Init.use_dedicated_ep1 = 0;
 800e15a:	2400      	movs	r4, #0
 800e15c:	6304      	str	r4, [r0, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;
 800e15e:	2240      	movs	r2, #64	; 0x40
 800e160:	6142      	str	r2, [r0, #20]
  hpcd.Init.dma_enable = 0;
 800e162:	6104      	str	r4, [r0, #16]
  hpcd.Init.low_power_enable = 0;
 800e164:	6204      	str	r4, [r0, #32]
  hpcd.Init.lpm_enable = 0;
 800e166:	6244      	str	r4, [r0, #36]	; 0x24
  hpcd.Init.phy_itface = PCD_PHY_ULPI;
 800e168:	2201      	movs	r2, #1
 800e16a:	6182      	str	r2, [r0, #24]
  hpcd.Init.Sof_enable = 1;
 800e16c:	61c2      	str	r2, [r0, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800e16e:	2102      	movs	r1, #2
 800e170:	60c1      	str	r1, [r0, #12]
  hpcd.Init.vbus_sensing_enable = 1;
 800e172:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd.pData = pdev;
 800e174:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  pdev->pData = &hpcd;
 800e178:	f8c3 02c4 	str.w	r0, [r3, #708]	; 0x2c4
  HAL_PCD_Init(&hpcd);
 800e17c:	f7f9 f861 	bl	8007242 <HAL_PCD_Init>
  USBD_LL_Setup_Fifo();
 800e180:	f7ff fe40 	bl	800de04 <USBD_LL_Setup_Fifo>
}
 800e184:	4620      	mov	r0, r4
 800e186:	bd10      	pop	{r4, pc}
 800e188:	20058b7c 	.word	0x20058b7c
 800e18c:	40040000 	.word	0x40040000

0800e190 <USBD_LL_Start>:
{
 800e190:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 800e192:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e196:	f7f9 f8ee 	bl	8007376 <HAL_PCD_Start>
}
 800e19a:	2000      	movs	r0, #0
 800e19c:	bd08      	pop	{r3, pc}

0800e19e <USBD_LL_OpenEP>:
{
 800e19e:	b510      	push	{r4, lr}
 800e1a0:	4614      	mov	r4, r2
 800e1a2:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData,
 800e1a4:	4623      	mov	r3, r4
 800e1a6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e1aa:	f7f9 fc28 	bl	80079fe <HAL_PCD_EP_Open>
}
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	bd10      	pop	{r4, pc}
	...

0800e1b4 <USBD_LL_CloseEP>:
{
 800e1b4:	b508      	push	{r3, lr}
  USB_DISABLE_EP_BEFORE_CLOSE(ep_addr);
 800e1b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 800e1ba:	d105      	bne.n	800e1c8 <USBD_LL_CloseEP+0x14>
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e1bc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e1c0:	f7f9 fc60 	bl	8007a84 <HAL_PCD_EP_Close>
}
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	bd08      	pop	{r3, pc}
  USB_DISABLE_EP_BEFORE_CLOSE(ep_addr);
 800e1c8:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 800e1cc:	4b05      	ldr	r3, [pc, #20]	; (800e1e4 <USBD_LL_CloseEP+0x30>)
 800e1ce:	4413      	add	r3, r2
 800e1d0:	015b      	lsls	r3, r3, #5
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	2a00      	cmp	r2, #0
 800e1d6:	daf1      	bge.n	800e1bc <USBD_LL_CloseEP+0x8>
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e1de:	601a      	str	r2, [r3, #0]
 800e1e0:	e7ec      	b.n	800e1bc <USBD_LL_CloseEP+0x8>
 800e1e2:	bf00      	nop
 800e1e4:	02002048 	.word	0x02002048

0800e1e8 <USBD_LL_FlushEP>:
{
 800e1e8:	b508      	push	{r3, lr}
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800e1ea:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e1ee:	f7f9 fd64 	bl	8007cba <HAL_PCD_EP_Flush>
}
 800e1f2:	2000      	movs	r0, #0
 800e1f4:	bd08      	pop	{r3, pc}

0800e1f6 <USBD_LL_StallEP>:
{
 800e1f6:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e1f8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e1fc:	f7f9 fcde 	bl	8007bbc <HAL_PCD_EP_SetStall>
}
 800e200:	2000      	movs	r0, #0
 800e202:	bd08      	pop	{r3, pc}

0800e204 <USBD_LL_ClearStallEP>:
{
 800e204:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e206:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e20a:	f7f9 fd1b 	bl	8007c44 <HAL_PCD_EP_ClrStall>
}
 800e20e:	2000      	movs	r0, #0
 800e210:	bd08      	pop	{r3, pc}

0800e212 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e212:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800e216:	f011 0f80 	tst.w	r1, #128	; 0x80
 800e21a:	d108      	bne.n	800e22e <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e21c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800e220:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800e224:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e228:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 800e22c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e22e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800e232:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800e236:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e23a:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 800e23e:	4770      	bx	lr

0800e240 <USBD_LL_SetUSBAddress>:
{
 800e240:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e242:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e246:	f7f9 fbc6 	bl	80079d6 <HAL_PCD_SetAddress>
}
 800e24a:	2000      	movs	r0, #0
 800e24c:	bd08      	pop	{r3, pc}

0800e24e <USBD_LL_Transmit>:
{
 800e24e:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e250:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e254:	f7f9 fc87 	bl	8007b66 <HAL_PCD_EP_Transmit>
}
 800e258:	2000      	movs	r0, #0
 800e25a:	bd08      	pop	{r3, pc}

0800e25c <USBD_LL_PrepareReceive>:
{
 800e25c:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e25e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e262:	f7f9 fc48 	bl	8007af6 <HAL_PCD_EP_Receive>
}
 800e266:	2000      	movs	r0, #0
 800e268:	bd08      	pop	{r3, pc}

0800e26a <USBD_LL_GetRxDataSize>:
{
 800e26a:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800e26c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e270:	f7f9 fc70 	bl	8007b54 <HAL_PCD_EP_GetRxCount>
}
 800e274:	bd08      	pop	{r3, pc}
	...

0800e278 <USBD_AUDIO_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 800e278:	2312      	movs	r3, #18
 800e27a:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc;
}
 800e27c:	4800      	ldr	r0, [pc, #0]	; (800e280 <USBD_AUDIO_DeviceDescriptor+0x8>)
 800e27e:	4770      	bx	lr
 800e280:	200001b8 	.word	0x200001b8

0800e284 <USBD_AUDIO_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 800e284:	2304      	movs	r3, #4
 800e286:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 800e288:	4800      	ldr	r0, [pc, #0]	; (800e28c <USBD_AUDIO_LangIDStrDescriptor+0x8>)
 800e28a:	4770      	bx	lr
 800e28c:	200001cc 	.word	0x200001cc

0800e290 <IntToUnicode>:
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0; idx < len; idx ++)
 800e290:	2300      	movs	r3, #0
 800e292:	4293      	cmp	r3, r2
 800e294:	d217      	bcs.n	800e2c6 <IntToUnicode+0x36>
{
 800e296:	b430      	push	{r4, r5}
 800e298:	e00b      	b.n	800e2b2 <IntToUnicode+0x22>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800e29a:	3437      	adds	r4, #55	; 0x37
 800e29c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }
    
    value = value << 4;
 800e2a0:	0100      	lsls	r0, r0, #4
    
    pbuf[ 2* idx + 1] = 0;
 800e2a2:	005c      	lsls	r4, r3, #1
 800e2a4:	3401      	adds	r4, #1
 800e2a6:	2500      	movs	r5, #0
 800e2a8:	550d      	strb	r5, [r1, r4]
  for( idx = 0; idx < len; idx ++)
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	b2db      	uxtb	r3, r3
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d207      	bcs.n	800e2c2 <IntToUnicode+0x32>
    if( ((value >> 28)) < 0xA )
 800e2b2:	0f04      	lsrs	r4, r0, #28
 800e2b4:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 800e2b8:	d2ef      	bcs.n	800e29a <IntToUnicode+0xa>
      pbuf[ 2* idx] = (value >> 28) + '0';
 800e2ba:	3430      	adds	r4, #48	; 0x30
 800e2bc:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 800e2c0:	e7ee      	b.n	800e2a0 <IntToUnicode+0x10>
  }
}
 800e2c2:	bc30      	pop	{r4, r5}
 800e2c4:	4770      	bx	lr
 800e2c6:	4770      	bx	lr

0800e2c8 <Get_SerialNum>:
{
 800e2c8:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 800e2ca:	4b0b      	ldr	r3, [pc, #44]	; (800e2f8 <Get_SerialNum+0x30>)
 800e2cc:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800e2ce:	3304      	adds	r3, #4
 800e2d0:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 800e2d2:	3304      	adds	r3, #4
 800e2d4:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800e2d6:	18c0      	adds	r0, r0, r3
 800e2d8:	d100      	bne.n	800e2dc <Get_SerialNum+0x14>
}
 800e2da:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode (deviceserial0, (uint8_t*)&USBD_StringSerial[2] ,8);
 800e2dc:	4d07      	ldr	r5, [pc, #28]	; (800e2fc <Get_SerialNum+0x34>)
 800e2de:	2208      	movs	r2, #8
 800e2e0:	f105 011a 	add.w	r1, r5, #26
 800e2e4:	f7ff ffd4 	bl	800e290 <IntToUnicode>
    IntToUnicode (deviceserial1, (uint8_t*)&USBD_StringSerial[18] ,4);
 800e2e8:	2204      	movs	r2, #4
 800e2ea:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	f7ff ffce 	bl	800e290 <IntToUnicode>
}
 800e2f4:	e7f1      	b.n	800e2da <Get_SerialNum+0x12>
 800e2f6:	bf00      	nop
 800e2f8:	1fff7a10 	.word	0x1fff7a10
 800e2fc:	200001b8 	.word	0x200001b8

0800e300 <USBD_AUDIO_SerialStrDescriptor>:
{
 800e300:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800e302:	231a      	movs	r3, #26
 800e304:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800e306:	f7ff ffdf 	bl	800e2c8 <Get_SerialNum>
}
 800e30a:	4801      	ldr	r0, [pc, #4]	; (800e310 <USBD_AUDIO_SerialStrDescriptor+0x10>)
 800e30c:	bd08      	pop	{r3, pc}
 800e30e:	bf00      	nop
 800e310:	200001d0 	.word	0x200001d0

0800e314 <USBD_AUDIO_ProductStrDescriptor>:
{
 800e314:	b508      	push	{r3, lr}
 800e316:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800e318:	b928      	cbnz	r0, 800e326 <USBD_AUDIO_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800e31a:	4905      	ldr	r1, [pc, #20]	; (800e330 <USBD_AUDIO_ProductStrDescriptor+0x1c>)
 800e31c:	4805      	ldr	r0, [pc, #20]	; (800e334 <USBD_AUDIO_ProductStrDescriptor+0x20>)
 800e31e:	f7fd fc14 	bl	800bb4a <USBD_GetString>
}
 800e322:	4803      	ldr	r0, [pc, #12]	; (800e330 <USBD_AUDIO_ProductStrDescriptor+0x1c>)
 800e324:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800e326:	4902      	ldr	r1, [pc, #8]	; (800e330 <USBD_AUDIO_ProductStrDescriptor+0x1c>)
 800e328:	4803      	ldr	r0, [pc, #12]	; (800e338 <USBD_AUDIO_ProductStrDescriptor+0x24>)
 800e32a:	f7fd fc0e 	bl	800bb4a <USBD_GetString>
 800e32e:	e7f8      	b.n	800e322 <USBD_AUDIO_ProductStrDescriptor+0xe>
 800e330:	20058f80 	.word	0x20058f80
 800e334:	08013410 	.word	0x08013410
 800e338:	08013434 	.word	0x08013434

0800e33c <USBD_AUDIO_ManufacturerStrDescriptor>:
{
 800e33c:	b510      	push	{r4, lr}
 800e33e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e340:	4c03      	ldr	r4, [pc, #12]	; (800e350 <USBD_AUDIO_ManufacturerStrDescriptor+0x14>)
 800e342:	4621      	mov	r1, r4
 800e344:	4803      	ldr	r0, [pc, #12]	; (800e354 <USBD_AUDIO_ManufacturerStrDescriptor+0x18>)
 800e346:	f7fd fc00 	bl	800bb4a <USBD_GetString>
}
 800e34a:	4620      	mov	r0, r4
 800e34c:	bd10      	pop	{r4, pc}
 800e34e:	bf00      	nop
 800e350:	20058f80 	.word	0x20058f80
 800e354:	08013458 	.word	0x08013458

0800e358 <USBD_AUDIO_ConfigStrDescriptor>:
{
 800e358:	b508      	push	{r3, lr}
 800e35a:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800e35c:	b928      	cbnz	r0, 800e36a <USBD_AUDIO_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800e35e:	4905      	ldr	r1, [pc, #20]	; (800e374 <USBD_AUDIO_ConfigStrDescriptor+0x1c>)
 800e360:	4805      	ldr	r0, [pc, #20]	; (800e378 <USBD_AUDIO_ConfigStrDescriptor+0x20>)
 800e362:	f7fd fbf2 	bl	800bb4a <USBD_GetString>
}
 800e366:	4803      	ldr	r0, [pc, #12]	; (800e374 <USBD_AUDIO_ConfigStrDescriptor+0x1c>)
 800e368:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800e36a:	4902      	ldr	r1, [pc, #8]	; (800e374 <USBD_AUDIO_ConfigStrDescriptor+0x1c>)
 800e36c:	4802      	ldr	r0, [pc, #8]	; (800e378 <USBD_AUDIO_ConfigStrDescriptor+0x20>)
 800e36e:	f7fd fbec 	bl	800bb4a <USBD_GetString>
 800e372:	e7f8      	b.n	800e366 <USBD_AUDIO_ConfigStrDescriptor+0xe>
 800e374:	20058f80 	.word	0x20058f80
 800e378:	0801346c 	.word	0x0801346c

0800e37c <USBD_AUDIO_InterfaceStrDescriptor>:
{
 800e37c:	b508      	push	{r3, lr}
 800e37e:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800e380:	b928      	cbnz	r0, 800e38e <USBD_AUDIO_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800e382:	4905      	ldr	r1, [pc, #20]	; (800e398 <USBD_AUDIO_InterfaceStrDescriptor+0x1c>)
 800e384:	4805      	ldr	r0, [pc, #20]	; (800e39c <USBD_AUDIO_InterfaceStrDescriptor+0x20>)
 800e386:	f7fd fbe0 	bl	800bb4a <USBD_GetString>
}
 800e38a:	4803      	ldr	r0, [pc, #12]	; (800e398 <USBD_AUDIO_InterfaceStrDescriptor+0x1c>)
 800e38c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800e38e:	4902      	ldr	r1, [pc, #8]	; (800e398 <USBD_AUDIO_InterfaceStrDescriptor+0x1c>)
 800e390:	4802      	ldr	r0, [pc, #8]	; (800e39c <USBD_AUDIO_InterfaceStrDescriptor+0x20>)
 800e392:	f7fd fbda 	bl	800bb4a <USBD_GetString>
 800e396:	e7f8      	b.n	800e38a <USBD_AUDIO_InterfaceStrDescriptor+0xe>
 800e398:	20058f80 	.word	0x20058f80
 800e39c:	0801347c 	.word	0x0801347c

0800e3a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800e3a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e3d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e3a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e3a6:	e003      	b.n	800e3b0 <LoopCopyDataInit>

0800e3a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e3a8:	4b0c      	ldr	r3, [pc, #48]	; (800e3dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e3aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e3ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e3ae:	3104      	adds	r1, #4

0800e3b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e3b0:	480b      	ldr	r0, [pc, #44]	; (800e3e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e3b2:	4b0c      	ldr	r3, [pc, #48]	; (800e3e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e3b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e3b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e3b8:	d3f6      	bcc.n	800e3a8 <CopyDataInit>
  ldr  r2, =_sbss
 800e3ba:	4a0b      	ldr	r2, [pc, #44]	; (800e3e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e3bc:	e002      	b.n	800e3c4 <LoopFillZerobss>

0800e3be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e3be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e3c0:	f842 3b04 	str.w	r3, [r2], #4

0800e3c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e3c4:	4b09      	ldr	r3, [pc, #36]	; (800e3ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e3c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e3c8:	d3f9      	bcc.n	800e3be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e3ca:	f7fe faa5 	bl	800c918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e3ce:	f000 f9db 	bl	800e788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e3d2:	f7fe f96f 	bl	800c6b4 <main>
  bx  lr    
 800e3d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800e3d8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800e3dc:	080134f8 	.word	0x080134f8
  ldr  r0, =_sdata
 800e3e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e3e4:	20000270 	.word	0x20000270
  ldr  r2, =_sbss
 800e3e8:	20000270 	.word	0x20000270
  ldr  r3, = _ebss
 800e3ec:	20059090 	.word	0x20059090

0800e3f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e3f0:	e7fe      	b.n	800e3f0 <ADC_IRQHandler>
	...

0800e3f4 <__sflush_r>:
 800e3f4:	898a      	ldrh	r2, [r1, #12]
 800e3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3fa:	4605      	mov	r5, r0
 800e3fc:	0710      	lsls	r0, r2, #28
 800e3fe:	460c      	mov	r4, r1
 800e400:	d458      	bmi.n	800e4b4 <__sflush_r+0xc0>
 800e402:	684b      	ldr	r3, [r1, #4]
 800e404:	2b00      	cmp	r3, #0
 800e406:	dc05      	bgt.n	800e414 <__sflush_r+0x20>
 800e408:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	dc02      	bgt.n	800e414 <__sflush_r+0x20>
 800e40e:	2000      	movs	r0, #0
 800e410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e416:	2e00      	cmp	r6, #0
 800e418:	d0f9      	beq.n	800e40e <__sflush_r+0x1a>
 800e41a:	2300      	movs	r3, #0
 800e41c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e420:	682f      	ldr	r7, [r5, #0]
 800e422:	602b      	str	r3, [r5, #0]
 800e424:	d032      	beq.n	800e48c <__sflush_r+0x98>
 800e426:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e428:	89a3      	ldrh	r3, [r4, #12]
 800e42a:	075a      	lsls	r2, r3, #29
 800e42c:	d505      	bpl.n	800e43a <__sflush_r+0x46>
 800e42e:	6863      	ldr	r3, [r4, #4]
 800e430:	1ac0      	subs	r0, r0, r3
 800e432:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e434:	b10b      	cbz	r3, 800e43a <__sflush_r+0x46>
 800e436:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e438:	1ac0      	subs	r0, r0, r3
 800e43a:	2300      	movs	r3, #0
 800e43c:	4602      	mov	r2, r0
 800e43e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e440:	6a21      	ldr	r1, [r4, #32]
 800e442:	4628      	mov	r0, r5
 800e444:	47b0      	blx	r6
 800e446:	1c43      	adds	r3, r0, #1
 800e448:	89a3      	ldrh	r3, [r4, #12]
 800e44a:	d106      	bne.n	800e45a <__sflush_r+0x66>
 800e44c:	6829      	ldr	r1, [r5, #0]
 800e44e:	291d      	cmp	r1, #29
 800e450:	d82c      	bhi.n	800e4ac <__sflush_r+0xb8>
 800e452:	4a2a      	ldr	r2, [pc, #168]	; (800e4fc <__sflush_r+0x108>)
 800e454:	40ca      	lsrs	r2, r1
 800e456:	07d6      	lsls	r6, r2, #31
 800e458:	d528      	bpl.n	800e4ac <__sflush_r+0xb8>
 800e45a:	2200      	movs	r2, #0
 800e45c:	6062      	str	r2, [r4, #4]
 800e45e:	04d9      	lsls	r1, r3, #19
 800e460:	6922      	ldr	r2, [r4, #16]
 800e462:	6022      	str	r2, [r4, #0]
 800e464:	d504      	bpl.n	800e470 <__sflush_r+0x7c>
 800e466:	1c42      	adds	r2, r0, #1
 800e468:	d101      	bne.n	800e46e <__sflush_r+0x7a>
 800e46a:	682b      	ldr	r3, [r5, #0]
 800e46c:	b903      	cbnz	r3, 800e470 <__sflush_r+0x7c>
 800e46e:	6560      	str	r0, [r4, #84]	; 0x54
 800e470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e472:	602f      	str	r7, [r5, #0]
 800e474:	2900      	cmp	r1, #0
 800e476:	d0ca      	beq.n	800e40e <__sflush_r+0x1a>
 800e478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e47c:	4299      	cmp	r1, r3
 800e47e:	d002      	beq.n	800e486 <__sflush_r+0x92>
 800e480:	4628      	mov	r0, r5
 800e482:	f000 f9cf 	bl	800e824 <_free_r>
 800e486:	2000      	movs	r0, #0
 800e488:	6360      	str	r0, [r4, #52]	; 0x34
 800e48a:	e7c1      	b.n	800e410 <__sflush_r+0x1c>
 800e48c:	6a21      	ldr	r1, [r4, #32]
 800e48e:	2301      	movs	r3, #1
 800e490:	4628      	mov	r0, r5
 800e492:	47b0      	blx	r6
 800e494:	1c41      	adds	r1, r0, #1
 800e496:	d1c7      	bne.n	800e428 <__sflush_r+0x34>
 800e498:	682b      	ldr	r3, [r5, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d0c4      	beq.n	800e428 <__sflush_r+0x34>
 800e49e:	2b1d      	cmp	r3, #29
 800e4a0:	d001      	beq.n	800e4a6 <__sflush_r+0xb2>
 800e4a2:	2b16      	cmp	r3, #22
 800e4a4:	d101      	bne.n	800e4aa <__sflush_r+0xb6>
 800e4a6:	602f      	str	r7, [r5, #0]
 800e4a8:	e7b1      	b.n	800e40e <__sflush_r+0x1a>
 800e4aa:	89a3      	ldrh	r3, [r4, #12]
 800e4ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4b0:	81a3      	strh	r3, [r4, #12]
 800e4b2:	e7ad      	b.n	800e410 <__sflush_r+0x1c>
 800e4b4:	690f      	ldr	r7, [r1, #16]
 800e4b6:	2f00      	cmp	r7, #0
 800e4b8:	d0a9      	beq.n	800e40e <__sflush_r+0x1a>
 800e4ba:	0793      	lsls	r3, r2, #30
 800e4bc:	680e      	ldr	r6, [r1, #0]
 800e4be:	bf08      	it	eq
 800e4c0:	694b      	ldreq	r3, [r1, #20]
 800e4c2:	600f      	str	r7, [r1, #0]
 800e4c4:	bf18      	it	ne
 800e4c6:	2300      	movne	r3, #0
 800e4c8:	eba6 0807 	sub.w	r8, r6, r7
 800e4cc:	608b      	str	r3, [r1, #8]
 800e4ce:	f1b8 0f00 	cmp.w	r8, #0
 800e4d2:	dd9c      	ble.n	800e40e <__sflush_r+0x1a>
 800e4d4:	6a21      	ldr	r1, [r4, #32]
 800e4d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e4d8:	4643      	mov	r3, r8
 800e4da:	463a      	mov	r2, r7
 800e4dc:	4628      	mov	r0, r5
 800e4de:	47b0      	blx	r6
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	dc06      	bgt.n	800e4f2 <__sflush_r+0xfe>
 800e4e4:	89a3      	ldrh	r3, [r4, #12]
 800e4e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4ea:	81a3      	strh	r3, [r4, #12]
 800e4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e4f0:	e78e      	b.n	800e410 <__sflush_r+0x1c>
 800e4f2:	4407      	add	r7, r0
 800e4f4:	eba8 0800 	sub.w	r8, r8, r0
 800e4f8:	e7e9      	b.n	800e4ce <__sflush_r+0xda>
 800e4fa:	bf00      	nop
 800e4fc:	20400001 	.word	0x20400001

0800e500 <_fflush_r>:
 800e500:	b538      	push	{r3, r4, r5, lr}
 800e502:	690b      	ldr	r3, [r1, #16]
 800e504:	4605      	mov	r5, r0
 800e506:	460c      	mov	r4, r1
 800e508:	b913      	cbnz	r3, 800e510 <_fflush_r+0x10>
 800e50a:	2500      	movs	r5, #0
 800e50c:	4628      	mov	r0, r5
 800e50e:	bd38      	pop	{r3, r4, r5, pc}
 800e510:	b118      	cbz	r0, 800e51a <_fflush_r+0x1a>
 800e512:	6983      	ldr	r3, [r0, #24]
 800e514:	b90b      	cbnz	r3, 800e51a <_fflush_r+0x1a>
 800e516:	f000 f899 	bl	800e64c <__sinit>
 800e51a:	4b14      	ldr	r3, [pc, #80]	; (800e56c <_fflush_r+0x6c>)
 800e51c:	429c      	cmp	r4, r3
 800e51e:	d11b      	bne.n	800e558 <_fflush_r+0x58>
 800e520:	686c      	ldr	r4, [r5, #4]
 800e522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d0ef      	beq.n	800e50a <_fflush_r+0xa>
 800e52a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e52c:	07d0      	lsls	r0, r2, #31
 800e52e:	d404      	bmi.n	800e53a <_fflush_r+0x3a>
 800e530:	0599      	lsls	r1, r3, #22
 800e532:	d402      	bmi.n	800e53a <_fflush_r+0x3a>
 800e534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e536:	f000 f94c 	bl	800e7d2 <__retarget_lock_acquire_recursive>
 800e53a:	4628      	mov	r0, r5
 800e53c:	4621      	mov	r1, r4
 800e53e:	f7ff ff59 	bl	800e3f4 <__sflush_r>
 800e542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e544:	07da      	lsls	r2, r3, #31
 800e546:	4605      	mov	r5, r0
 800e548:	d4e0      	bmi.n	800e50c <_fflush_r+0xc>
 800e54a:	89a3      	ldrh	r3, [r4, #12]
 800e54c:	059b      	lsls	r3, r3, #22
 800e54e:	d4dd      	bmi.n	800e50c <_fflush_r+0xc>
 800e550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e552:	f000 f93f 	bl	800e7d4 <__retarget_lock_release_recursive>
 800e556:	e7d9      	b.n	800e50c <_fflush_r+0xc>
 800e558:	4b05      	ldr	r3, [pc, #20]	; (800e570 <_fflush_r+0x70>)
 800e55a:	429c      	cmp	r4, r3
 800e55c:	d101      	bne.n	800e562 <_fflush_r+0x62>
 800e55e:	68ac      	ldr	r4, [r5, #8]
 800e560:	e7df      	b.n	800e522 <_fflush_r+0x22>
 800e562:	4b04      	ldr	r3, [pc, #16]	; (800e574 <_fflush_r+0x74>)
 800e564:	429c      	cmp	r4, r3
 800e566:	bf08      	it	eq
 800e568:	68ec      	ldreq	r4, [r5, #12]
 800e56a:	e7da      	b.n	800e522 <_fflush_r+0x22>
 800e56c:	080134ac 	.word	0x080134ac
 800e570:	080134cc 	.word	0x080134cc
 800e574:	0801348c 	.word	0x0801348c

0800e578 <fflush>:
 800e578:	4601      	mov	r1, r0
 800e57a:	b920      	cbnz	r0, 800e586 <fflush+0xe>
 800e57c:	4b04      	ldr	r3, [pc, #16]	; (800e590 <fflush+0x18>)
 800e57e:	4905      	ldr	r1, [pc, #20]	; (800e594 <fflush+0x1c>)
 800e580:	6818      	ldr	r0, [r3, #0]
 800e582:	f000 b8e1 	b.w	800e748 <_fwalk_reent>
 800e586:	4b04      	ldr	r3, [pc, #16]	; (800e598 <fflush+0x20>)
 800e588:	6818      	ldr	r0, [r3, #0]
 800e58a:	f7ff bfb9 	b.w	800e500 <_fflush_r>
 800e58e:	bf00      	nop
 800e590:	080134ec 	.word	0x080134ec
 800e594:	0800e501 	.word	0x0800e501
 800e598:	20000208 	.word	0x20000208

0800e59c <std>:
 800e59c:	2300      	movs	r3, #0
 800e59e:	b510      	push	{r4, lr}
 800e5a0:	4604      	mov	r4, r0
 800e5a2:	e9c0 3300 	strd	r3, r3, [r0]
 800e5a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5aa:	6083      	str	r3, [r0, #8]
 800e5ac:	8181      	strh	r1, [r0, #12]
 800e5ae:	6643      	str	r3, [r0, #100]	; 0x64
 800e5b0:	81c2      	strh	r2, [r0, #14]
 800e5b2:	6183      	str	r3, [r0, #24]
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	2208      	movs	r2, #8
 800e5b8:	305c      	adds	r0, #92	; 0x5c
 800e5ba:	f000 f92b 	bl	800e814 <memset>
 800e5be:	4b05      	ldr	r3, [pc, #20]	; (800e5d4 <std+0x38>)
 800e5c0:	6263      	str	r3, [r4, #36]	; 0x24
 800e5c2:	4b05      	ldr	r3, [pc, #20]	; (800e5d8 <std+0x3c>)
 800e5c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5c6:	4b05      	ldr	r3, [pc, #20]	; (800e5dc <std+0x40>)
 800e5c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5ca:	4b05      	ldr	r3, [pc, #20]	; (800e5e0 <std+0x44>)
 800e5cc:	6224      	str	r4, [r4, #32]
 800e5ce:	6323      	str	r3, [r4, #48]	; 0x30
 800e5d0:	bd10      	pop	{r4, pc}
 800e5d2:	bf00      	nop
 800e5d4:	0800ea85 	.word	0x0800ea85
 800e5d8:	0800eaa7 	.word	0x0800eaa7
 800e5dc:	0800eadf 	.word	0x0800eadf
 800e5e0:	0800eb03 	.word	0x0800eb03

0800e5e4 <_cleanup_r>:
 800e5e4:	4901      	ldr	r1, [pc, #4]	; (800e5ec <_cleanup_r+0x8>)
 800e5e6:	f000 b8af 	b.w	800e748 <_fwalk_reent>
 800e5ea:	bf00      	nop
 800e5ec:	0800e501 	.word	0x0800e501

0800e5f0 <__sfmoreglue>:
 800e5f0:	b570      	push	{r4, r5, r6, lr}
 800e5f2:	1e4a      	subs	r2, r1, #1
 800e5f4:	2568      	movs	r5, #104	; 0x68
 800e5f6:	4355      	muls	r5, r2
 800e5f8:	460e      	mov	r6, r1
 800e5fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e5fe:	f000 f961 	bl	800e8c4 <_malloc_r>
 800e602:	4604      	mov	r4, r0
 800e604:	b140      	cbz	r0, 800e618 <__sfmoreglue+0x28>
 800e606:	2100      	movs	r1, #0
 800e608:	e9c0 1600 	strd	r1, r6, [r0]
 800e60c:	300c      	adds	r0, #12
 800e60e:	60a0      	str	r0, [r4, #8]
 800e610:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e614:	f000 f8fe 	bl	800e814 <memset>
 800e618:	4620      	mov	r0, r4
 800e61a:	bd70      	pop	{r4, r5, r6, pc}

0800e61c <__sfp_lock_acquire>:
 800e61c:	4801      	ldr	r0, [pc, #4]	; (800e624 <__sfp_lock_acquire+0x8>)
 800e61e:	f000 b8d8 	b.w	800e7d2 <__retarget_lock_acquire_recursive>
 800e622:	bf00      	nop
 800e624:	20059088 	.word	0x20059088

0800e628 <__sfp_lock_release>:
 800e628:	4801      	ldr	r0, [pc, #4]	; (800e630 <__sfp_lock_release+0x8>)
 800e62a:	f000 b8d3 	b.w	800e7d4 <__retarget_lock_release_recursive>
 800e62e:	bf00      	nop
 800e630:	20059088 	.word	0x20059088

0800e634 <__sinit_lock_acquire>:
 800e634:	4801      	ldr	r0, [pc, #4]	; (800e63c <__sinit_lock_acquire+0x8>)
 800e636:	f000 b8cc 	b.w	800e7d2 <__retarget_lock_acquire_recursive>
 800e63a:	bf00      	nop
 800e63c:	20059083 	.word	0x20059083

0800e640 <__sinit_lock_release>:
 800e640:	4801      	ldr	r0, [pc, #4]	; (800e648 <__sinit_lock_release+0x8>)
 800e642:	f000 b8c7 	b.w	800e7d4 <__retarget_lock_release_recursive>
 800e646:	bf00      	nop
 800e648:	20059083 	.word	0x20059083

0800e64c <__sinit>:
 800e64c:	b510      	push	{r4, lr}
 800e64e:	4604      	mov	r4, r0
 800e650:	f7ff fff0 	bl	800e634 <__sinit_lock_acquire>
 800e654:	69a3      	ldr	r3, [r4, #24]
 800e656:	b11b      	cbz	r3, 800e660 <__sinit+0x14>
 800e658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e65c:	f7ff bff0 	b.w	800e640 <__sinit_lock_release>
 800e660:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e664:	6523      	str	r3, [r4, #80]	; 0x50
 800e666:	4b13      	ldr	r3, [pc, #76]	; (800e6b4 <__sinit+0x68>)
 800e668:	4a13      	ldr	r2, [pc, #76]	; (800e6b8 <__sinit+0x6c>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e66e:	42a3      	cmp	r3, r4
 800e670:	bf04      	itt	eq
 800e672:	2301      	moveq	r3, #1
 800e674:	61a3      	streq	r3, [r4, #24]
 800e676:	4620      	mov	r0, r4
 800e678:	f000 f820 	bl	800e6bc <__sfp>
 800e67c:	6060      	str	r0, [r4, #4]
 800e67e:	4620      	mov	r0, r4
 800e680:	f000 f81c 	bl	800e6bc <__sfp>
 800e684:	60a0      	str	r0, [r4, #8]
 800e686:	4620      	mov	r0, r4
 800e688:	f000 f818 	bl	800e6bc <__sfp>
 800e68c:	2200      	movs	r2, #0
 800e68e:	60e0      	str	r0, [r4, #12]
 800e690:	2104      	movs	r1, #4
 800e692:	6860      	ldr	r0, [r4, #4]
 800e694:	f7ff ff82 	bl	800e59c <std>
 800e698:	68a0      	ldr	r0, [r4, #8]
 800e69a:	2201      	movs	r2, #1
 800e69c:	2109      	movs	r1, #9
 800e69e:	f7ff ff7d 	bl	800e59c <std>
 800e6a2:	68e0      	ldr	r0, [r4, #12]
 800e6a4:	2202      	movs	r2, #2
 800e6a6:	2112      	movs	r1, #18
 800e6a8:	f7ff ff78 	bl	800e59c <std>
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	61a3      	str	r3, [r4, #24]
 800e6b0:	e7d2      	b.n	800e658 <__sinit+0xc>
 800e6b2:	bf00      	nop
 800e6b4:	080134ec 	.word	0x080134ec
 800e6b8:	0800e5e5 	.word	0x0800e5e5

0800e6bc <__sfp>:
 800e6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6be:	4607      	mov	r7, r0
 800e6c0:	f7ff ffac 	bl	800e61c <__sfp_lock_acquire>
 800e6c4:	4b1e      	ldr	r3, [pc, #120]	; (800e740 <__sfp+0x84>)
 800e6c6:	681e      	ldr	r6, [r3, #0]
 800e6c8:	69b3      	ldr	r3, [r6, #24]
 800e6ca:	b913      	cbnz	r3, 800e6d2 <__sfp+0x16>
 800e6cc:	4630      	mov	r0, r6
 800e6ce:	f7ff ffbd 	bl	800e64c <__sinit>
 800e6d2:	3648      	adds	r6, #72	; 0x48
 800e6d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e6d8:	3b01      	subs	r3, #1
 800e6da:	d503      	bpl.n	800e6e4 <__sfp+0x28>
 800e6dc:	6833      	ldr	r3, [r6, #0]
 800e6de:	b30b      	cbz	r3, 800e724 <__sfp+0x68>
 800e6e0:	6836      	ldr	r6, [r6, #0]
 800e6e2:	e7f7      	b.n	800e6d4 <__sfp+0x18>
 800e6e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e6e8:	b9d5      	cbnz	r5, 800e720 <__sfp+0x64>
 800e6ea:	4b16      	ldr	r3, [pc, #88]	; (800e744 <__sfp+0x88>)
 800e6ec:	60e3      	str	r3, [r4, #12]
 800e6ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e6f2:	6665      	str	r5, [r4, #100]	; 0x64
 800e6f4:	f000 f86c 	bl	800e7d0 <__retarget_lock_init_recursive>
 800e6f8:	f7ff ff96 	bl	800e628 <__sfp_lock_release>
 800e6fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e700:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e704:	6025      	str	r5, [r4, #0]
 800e706:	61a5      	str	r5, [r4, #24]
 800e708:	2208      	movs	r2, #8
 800e70a:	4629      	mov	r1, r5
 800e70c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e710:	f000 f880 	bl	800e814 <memset>
 800e714:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e718:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e71c:	4620      	mov	r0, r4
 800e71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e720:	3468      	adds	r4, #104	; 0x68
 800e722:	e7d9      	b.n	800e6d8 <__sfp+0x1c>
 800e724:	2104      	movs	r1, #4
 800e726:	4638      	mov	r0, r7
 800e728:	f7ff ff62 	bl	800e5f0 <__sfmoreglue>
 800e72c:	4604      	mov	r4, r0
 800e72e:	6030      	str	r0, [r6, #0]
 800e730:	2800      	cmp	r0, #0
 800e732:	d1d5      	bne.n	800e6e0 <__sfp+0x24>
 800e734:	f7ff ff78 	bl	800e628 <__sfp_lock_release>
 800e738:	230c      	movs	r3, #12
 800e73a:	603b      	str	r3, [r7, #0]
 800e73c:	e7ee      	b.n	800e71c <__sfp+0x60>
 800e73e:	bf00      	nop
 800e740:	080134ec 	.word	0x080134ec
 800e744:	ffff0001 	.word	0xffff0001

0800e748 <_fwalk_reent>:
 800e748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e74c:	4606      	mov	r6, r0
 800e74e:	4688      	mov	r8, r1
 800e750:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e754:	2700      	movs	r7, #0
 800e756:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e75a:	f1b9 0901 	subs.w	r9, r9, #1
 800e75e:	d505      	bpl.n	800e76c <_fwalk_reent+0x24>
 800e760:	6824      	ldr	r4, [r4, #0]
 800e762:	2c00      	cmp	r4, #0
 800e764:	d1f7      	bne.n	800e756 <_fwalk_reent+0xe>
 800e766:	4638      	mov	r0, r7
 800e768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e76c:	89ab      	ldrh	r3, [r5, #12]
 800e76e:	2b01      	cmp	r3, #1
 800e770:	d907      	bls.n	800e782 <_fwalk_reent+0x3a>
 800e772:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e776:	3301      	adds	r3, #1
 800e778:	d003      	beq.n	800e782 <_fwalk_reent+0x3a>
 800e77a:	4629      	mov	r1, r5
 800e77c:	4630      	mov	r0, r6
 800e77e:	47c0      	blx	r8
 800e780:	4307      	orrs	r7, r0
 800e782:	3568      	adds	r5, #104	; 0x68
 800e784:	e7e9      	b.n	800e75a <_fwalk_reent+0x12>
	...

0800e788 <__libc_init_array>:
 800e788:	b570      	push	{r4, r5, r6, lr}
 800e78a:	4d0d      	ldr	r5, [pc, #52]	; (800e7c0 <__libc_init_array+0x38>)
 800e78c:	4c0d      	ldr	r4, [pc, #52]	; (800e7c4 <__libc_init_array+0x3c>)
 800e78e:	1b64      	subs	r4, r4, r5
 800e790:	10a4      	asrs	r4, r4, #2
 800e792:	2600      	movs	r6, #0
 800e794:	42a6      	cmp	r6, r4
 800e796:	d109      	bne.n	800e7ac <__libc_init_array+0x24>
 800e798:	4d0b      	ldr	r5, [pc, #44]	; (800e7c8 <__libc_init_array+0x40>)
 800e79a:	4c0c      	ldr	r4, [pc, #48]	; (800e7cc <__libc_init_array+0x44>)
 800e79c:	f000 fbb2 	bl	800ef04 <_init>
 800e7a0:	1b64      	subs	r4, r4, r5
 800e7a2:	10a4      	asrs	r4, r4, #2
 800e7a4:	2600      	movs	r6, #0
 800e7a6:	42a6      	cmp	r6, r4
 800e7a8:	d105      	bne.n	800e7b6 <__libc_init_array+0x2e>
 800e7aa:	bd70      	pop	{r4, r5, r6, pc}
 800e7ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7b0:	4798      	blx	r3
 800e7b2:	3601      	adds	r6, #1
 800e7b4:	e7ee      	b.n	800e794 <__libc_init_array+0xc>
 800e7b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7ba:	4798      	blx	r3
 800e7bc:	3601      	adds	r6, #1
 800e7be:	e7f2      	b.n	800e7a6 <__libc_init_array+0x1e>
 800e7c0:	080134f0 	.word	0x080134f0
 800e7c4:	080134f0 	.word	0x080134f0
 800e7c8:	080134f0 	.word	0x080134f0
 800e7cc:	080134f4 	.word	0x080134f4

0800e7d0 <__retarget_lock_init_recursive>:
 800e7d0:	4770      	bx	lr

0800e7d2 <__retarget_lock_acquire_recursive>:
 800e7d2:	4770      	bx	lr

0800e7d4 <__retarget_lock_release_recursive>:
 800e7d4:	4770      	bx	lr
	...

0800e7d8 <malloc>:
 800e7d8:	4b02      	ldr	r3, [pc, #8]	; (800e7e4 <malloc+0xc>)
 800e7da:	4601      	mov	r1, r0
 800e7dc:	6818      	ldr	r0, [r3, #0]
 800e7de:	f000 b871 	b.w	800e8c4 <_malloc_r>
 800e7e2:	bf00      	nop
 800e7e4:	20000208 	.word	0x20000208

0800e7e8 <free>:
 800e7e8:	4b02      	ldr	r3, [pc, #8]	; (800e7f4 <free+0xc>)
 800e7ea:	4601      	mov	r1, r0
 800e7ec:	6818      	ldr	r0, [r3, #0]
 800e7ee:	f000 b819 	b.w	800e824 <_free_r>
 800e7f2:	bf00      	nop
 800e7f4:	20000208 	.word	0x20000208

0800e7f8 <memcpy>:
 800e7f8:	440a      	add	r2, r1
 800e7fa:	4291      	cmp	r1, r2
 800e7fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e800:	d100      	bne.n	800e804 <memcpy+0xc>
 800e802:	4770      	bx	lr
 800e804:	b510      	push	{r4, lr}
 800e806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e80a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e80e:	4291      	cmp	r1, r2
 800e810:	d1f9      	bne.n	800e806 <memcpy+0xe>
 800e812:	bd10      	pop	{r4, pc}

0800e814 <memset>:
 800e814:	4402      	add	r2, r0
 800e816:	4603      	mov	r3, r0
 800e818:	4293      	cmp	r3, r2
 800e81a:	d100      	bne.n	800e81e <memset+0xa>
 800e81c:	4770      	bx	lr
 800e81e:	f803 1b01 	strb.w	r1, [r3], #1
 800e822:	e7f9      	b.n	800e818 <memset+0x4>

0800e824 <_free_r>:
 800e824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e826:	2900      	cmp	r1, #0
 800e828:	d048      	beq.n	800e8bc <_free_r+0x98>
 800e82a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e82e:	9001      	str	r0, [sp, #4]
 800e830:	2b00      	cmp	r3, #0
 800e832:	f1a1 0404 	sub.w	r4, r1, #4
 800e836:	bfb8      	it	lt
 800e838:	18e4      	addlt	r4, r4, r3
 800e83a:	f000 fabf 	bl	800edbc <__malloc_lock>
 800e83e:	4a20      	ldr	r2, [pc, #128]	; (800e8c0 <_free_r+0x9c>)
 800e840:	9801      	ldr	r0, [sp, #4]
 800e842:	6813      	ldr	r3, [r2, #0]
 800e844:	4615      	mov	r5, r2
 800e846:	b933      	cbnz	r3, 800e856 <_free_r+0x32>
 800e848:	6063      	str	r3, [r4, #4]
 800e84a:	6014      	str	r4, [r2, #0]
 800e84c:	b003      	add	sp, #12
 800e84e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e852:	f000 bab9 	b.w	800edc8 <__malloc_unlock>
 800e856:	42a3      	cmp	r3, r4
 800e858:	d90b      	bls.n	800e872 <_free_r+0x4e>
 800e85a:	6821      	ldr	r1, [r4, #0]
 800e85c:	1862      	adds	r2, r4, r1
 800e85e:	4293      	cmp	r3, r2
 800e860:	bf04      	itt	eq
 800e862:	681a      	ldreq	r2, [r3, #0]
 800e864:	685b      	ldreq	r3, [r3, #4]
 800e866:	6063      	str	r3, [r4, #4]
 800e868:	bf04      	itt	eq
 800e86a:	1852      	addeq	r2, r2, r1
 800e86c:	6022      	streq	r2, [r4, #0]
 800e86e:	602c      	str	r4, [r5, #0]
 800e870:	e7ec      	b.n	800e84c <_free_r+0x28>
 800e872:	461a      	mov	r2, r3
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	b10b      	cbz	r3, 800e87c <_free_r+0x58>
 800e878:	42a3      	cmp	r3, r4
 800e87a:	d9fa      	bls.n	800e872 <_free_r+0x4e>
 800e87c:	6811      	ldr	r1, [r2, #0]
 800e87e:	1855      	adds	r5, r2, r1
 800e880:	42a5      	cmp	r5, r4
 800e882:	d10b      	bne.n	800e89c <_free_r+0x78>
 800e884:	6824      	ldr	r4, [r4, #0]
 800e886:	4421      	add	r1, r4
 800e888:	1854      	adds	r4, r2, r1
 800e88a:	42a3      	cmp	r3, r4
 800e88c:	6011      	str	r1, [r2, #0]
 800e88e:	d1dd      	bne.n	800e84c <_free_r+0x28>
 800e890:	681c      	ldr	r4, [r3, #0]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	6053      	str	r3, [r2, #4]
 800e896:	4421      	add	r1, r4
 800e898:	6011      	str	r1, [r2, #0]
 800e89a:	e7d7      	b.n	800e84c <_free_r+0x28>
 800e89c:	d902      	bls.n	800e8a4 <_free_r+0x80>
 800e89e:	230c      	movs	r3, #12
 800e8a0:	6003      	str	r3, [r0, #0]
 800e8a2:	e7d3      	b.n	800e84c <_free_r+0x28>
 800e8a4:	6825      	ldr	r5, [r4, #0]
 800e8a6:	1961      	adds	r1, r4, r5
 800e8a8:	428b      	cmp	r3, r1
 800e8aa:	bf04      	itt	eq
 800e8ac:	6819      	ldreq	r1, [r3, #0]
 800e8ae:	685b      	ldreq	r3, [r3, #4]
 800e8b0:	6063      	str	r3, [r4, #4]
 800e8b2:	bf04      	itt	eq
 800e8b4:	1949      	addeq	r1, r1, r5
 800e8b6:	6021      	streq	r1, [r4, #0]
 800e8b8:	6054      	str	r4, [r2, #4]
 800e8ba:	e7c7      	b.n	800e84c <_free_r+0x28>
 800e8bc:	b003      	add	sp, #12
 800e8be:	bd30      	pop	{r4, r5, pc}
 800e8c0:	20001b50 	.word	0x20001b50

0800e8c4 <_malloc_r>:
 800e8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8c6:	1ccd      	adds	r5, r1, #3
 800e8c8:	f025 0503 	bic.w	r5, r5, #3
 800e8cc:	3508      	adds	r5, #8
 800e8ce:	2d0c      	cmp	r5, #12
 800e8d0:	bf38      	it	cc
 800e8d2:	250c      	movcc	r5, #12
 800e8d4:	2d00      	cmp	r5, #0
 800e8d6:	4606      	mov	r6, r0
 800e8d8:	db01      	blt.n	800e8de <_malloc_r+0x1a>
 800e8da:	42a9      	cmp	r1, r5
 800e8dc:	d903      	bls.n	800e8e6 <_malloc_r+0x22>
 800e8de:	230c      	movs	r3, #12
 800e8e0:	6033      	str	r3, [r6, #0]
 800e8e2:	2000      	movs	r0, #0
 800e8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8e6:	f000 fa69 	bl	800edbc <__malloc_lock>
 800e8ea:	4921      	ldr	r1, [pc, #132]	; (800e970 <_malloc_r+0xac>)
 800e8ec:	680a      	ldr	r2, [r1, #0]
 800e8ee:	4614      	mov	r4, r2
 800e8f0:	b99c      	cbnz	r4, 800e91a <_malloc_r+0x56>
 800e8f2:	4f20      	ldr	r7, [pc, #128]	; (800e974 <_malloc_r+0xb0>)
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	b923      	cbnz	r3, 800e902 <_malloc_r+0x3e>
 800e8f8:	4621      	mov	r1, r4
 800e8fa:	4630      	mov	r0, r6
 800e8fc:	f000 f8b2 	bl	800ea64 <_sbrk_r>
 800e900:	6038      	str	r0, [r7, #0]
 800e902:	4629      	mov	r1, r5
 800e904:	4630      	mov	r0, r6
 800e906:	f000 f8ad 	bl	800ea64 <_sbrk_r>
 800e90a:	1c43      	adds	r3, r0, #1
 800e90c:	d123      	bne.n	800e956 <_malloc_r+0x92>
 800e90e:	230c      	movs	r3, #12
 800e910:	6033      	str	r3, [r6, #0]
 800e912:	4630      	mov	r0, r6
 800e914:	f000 fa58 	bl	800edc8 <__malloc_unlock>
 800e918:	e7e3      	b.n	800e8e2 <_malloc_r+0x1e>
 800e91a:	6823      	ldr	r3, [r4, #0]
 800e91c:	1b5b      	subs	r3, r3, r5
 800e91e:	d417      	bmi.n	800e950 <_malloc_r+0x8c>
 800e920:	2b0b      	cmp	r3, #11
 800e922:	d903      	bls.n	800e92c <_malloc_r+0x68>
 800e924:	6023      	str	r3, [r4, #0]
 800e926:	441c      	add	r4, r3
 800e928:	6025      	str	r5, [r4, #0]
 800e92a:	e004      	b.n	800e936 <_malloc_r+0x72>
 800e92c:	6863      	ldr	r3, [r4, #4]
 800e92e:	42a2      	cmp	r2, r4
 800e930:	bf0c      	ite	eq
 800e932:	600b      	streq	r3, [r1, #0]
 800e934:	6053      	strne	r3, [r2, #4]
 800e936:	4630      	mov	r0, r6
 800e938:	f000 fa46 	bl	800edc8 <__malloc_unlock>
 800e93c:	f104 000b 	add.w	r0, r4, #11
 800e940:	1d23      	adds	r3, r4, #4
 800e942:	f020 0007 	bic.w	r0, r0, #7
 800e946:	1ac2      	subs	r2, r0, r3
 800e948:	d0cc      	beq.n	800e8e4 <_malloc_r+0x20>
 800e94a:	1a1b      	subs	r3, r3, r0
 800e94c:	50a3      	str	r3, [r4, r2]
 800e94e:	e7c9      	b.n	800e8e4 <_malloc_r+0x20>
 800e950:	4622      	mov	r2, r4
 800e952:	6864      	ldr	r4, [r4, #4]
 800e954:	e7cc      	b.n	800e8f0 <_malloc_r+0x2c>
 800e956:	1cc4      	adds	r4, r0, #3
 800e958:	f024 0403 	bic.w	r4, r4, #3
 800e95c:	42a0      	cmp	r0, r4
 800e95e:	d0e3      	beq.n	800e928 <_malloc_r+0x64>
 800e960:	1a21      	subs	r1, r4, r0
 800e962:	4630      	mov	r0, r6
 800e964:	f000 f87e 	bl	800ea64 <_sbrk_r>
 800e968:	3001      	adds	r0, #1
 800e96a:	d1dd      	bne.n	800e928 <_malloc_r+0x64>
 800e96c:	e7cf      	b.n	800e90e <_malloc_r+0x4a>
 800e96e:	bf00      	nop
 800e970:	20001b50 	.word	0x20001b50
 800e974:	20001b54 	.word	0x20001b54

0800e978 <_puts_r>:
 800e978:	b570      	push	{r4, r5, r6, lr}
 800e97a:	460e      	mov	r6, r1
 800e97c:	4605      	mov	r5, r0
 800e97e:	b118      	cbz	r0, 800e988 <_puts_r+0x10>
 800e980:	6983      	ldr	r3, [r0, #24]
 800e982:	b90b      	cbnz	r3, 800e988 <_puts_r+0x10>
 800e984:	f7ff fe62 	bl	800e64c <__sinit>
 800e988:	69ab      	ldr	r3, [r5, #24]
 800e98a:	68ac      	ldr	r4, [r5, #8]
 800e98c:	b913      	cbnz	r3, 800e994 <_puts_r+0x1c>
 800e98e:	4628      	mov	r0, r5
 800e990:	f7ff fe5c 	bl	800e64c <__sinit>
 800e994:	4b2c      	ldr	r3, [pc, #176]	; (800ea48 <_puts_r+0xd0>)
 800e996:	429c      	cmp	r4, r3
 800e998:	d120      	bne.n	800e9dc <_puts_r+0x64>
 800e99a:	686c      	ldr	r4, [r5, #4]
 800e99c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e99e:	07db      	lsls	r3, r3, #31
 800e9a0:	d405      	bmi.n	800e9ae <_puts_r+0x36>
 800e9a2:	89a3      	ldrh	r3, [r4, #12]
 800e9a4:	0598      	lsls	r0, r3, #22
 800e9a6:	d402      	bmi.n	800e9ae <_puts_r+0x36>
 800e9a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9aa:	f7ff ff12 	bl	800e7d2 <__retarget_lock_acquire_recursive>
 800e9ae:	89a3      	ldrh	r3, [r4, #12]
 800e9b0:	0719      	lsls	r1, r3, #28
 800e9b2:	d51d      	bpl.n	800e9f0 <_puts_r+0x78>
 800e9b4:	6923      	ldr	r3, [r4, #16]
 800e9b6:	b1db      	cbz	r3, 800e9f0 <_puts_r+0x78>
 800e9b8:	3e01      	subs	r6, #1
 800e9ba:	68a3      	ldr	r3, [r4, #8]
 800e9bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e9c0:	3b01      	subs	r3, #1
 800e9c2:	60a3      	str	r3, [r4, #8]
 800e9c4:	bb39      	cbnz	r1, 800ea16 <_puts_r+0x9e>
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	da38      	bge.n	800ea3c <_puts_r+0xc4>
 800e9ca:	4622      	mov	r2, r4
 800e9cc:	210a      	movs	r1, #10
 800e9ce:	4628      	mov	r0, r5
 800e9d0:	f000 f89c 	bl	800eb0c <__swbuf_r>
 800e9d4:	3001      	adds	r0, #1
 800e9d6:	d011      	beq.n	800e9fc <_puts_r+0x84>
 800e9d8:	250a      	movs	r5, #10
 800e9da:	e011      	b.n	800ea00 <_puts_r+0x88>
 800e9dc:	4b1b      	ldr	r3, [pc, #108]	; (800ea4c <_puts_r+0xd4>)
 800e9de:	429c      	cmp	r4, r3
 800e9e0:	d101      	bne.n	800e9e6 <_puts_r+0x6e>
 800e9e2:	68ac      	ldr	r4, [r5, #8]
 800e9e4:	e7da      	b.n	800e99c <_puts_r+0x24>
 800e9e6:	4b1a      	ldr	r3, [pc, #104]	; (800ea50 <_puts_r+0xd8>)
 800e9e8:	429c      	cmp	r4, r3
 800e9ea:	bf08      	it	eq
 800e9ec:	68ec      	ldreq	r4, [r5, #12]
 800e9ee:	e7d5      	b.n	800e99c <_puts_r+0x24>
 800e9f0:	4621      	mov	r1, r4
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	f000 f8ee 	bl	800ebd4 <__swsetup_r>
 800e9f8:	2800      	cmp	r0, #0
 800e9fa:	d0dd      	beq.n	800e9b8 <_puts_r+0x40>
 800e9fc:	f04f 35ff 	mov.w	r5, #4294967295
 800ea00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea02:	07da      	lsls	r2, r3, #31
 800ea04:	d405      	bmi.n	800ea12 <_puts_r+0x9a>
 800ea06:	89a3      	ldrh	r3, [r4, #12]
 800ea08:	059b      	lsls	r3, r3, #22
 800ea0a:	d402      	bmi.n	800ea12 <_puts_r+0x9a>
 800ea0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea0e:	f7ff fee1 	bl	800e7d4 <__retarget_lock_release_recursive>
 800ea12:	4628      	mov	r0, r5
 800ea14:	bd70      	pop	{r4, r5, r6, pc}
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	da04      	bge.n	800ea24 <_puts_r+0xac>
 800ea1a:	69a2      	ldr	r2, [r4, #24]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	dc06      	bgt.n	800ea2e <_puts_r+0xb6>
 800ea20:	290a      	cmp	r1, #10
 800ea22:	d004      	beq.n	800ea2e <_puts_r+0xb6>
 800ea24:	6823      	ldr	r3, [r4, #0]
 800ea26:	1c5a      	adds	r2, r3, #1
 800ea28:	6022      	str	r2, [r4, #0]
 800ea2a:	7019      	strb	r1, [r3, #0]
 800ea2c:	e7c5      	b.n	800e9ba <_puts_r+0x42>
 800ea2e:	4622      	mov	r2, r4
 800ea30:	4628      	mov	r0, r5
 800ea32:	f000 f86b 	bl	800eb0c <__swbuf_r>
 800ea36:	3001      	adds	r0, #1
 800ea38:	d1bf      	bne.n	800e9ba <_puts_r+0x42>
 800ea3a:	e7df      	b.n	800e9fc <_puts_r+0x84>
 800ea3c:	6823      	ldr	r3, [r4, #0]
 800ea3e:	250a      	movs	r5, #10
 800ea40:	1c5a      	adds	r2, r3, #1
 800ea42:	6022      	str	r2, [r4, #0]
 800ea44:	701d      	strb	r5, [r3, #0]
 800ea46:	e7db      	b.n	800ea00 <_puts_r+0x88>
 800ea48:	080134ac 	.word	0x080134ac
 800ea4c:	080134cc 	.word	0x080134cc
 800ea50:	0801348c 	.word	0x0801348c

0800ea54 <puts>:
 800ea54:	4b02      	ldr	r3, [pc, #8]	; (800ea60 <puts+0xc>)
 800ea56:	4601      	mov	r1, r0
 800ea58:	6818      	ldr	r0, [r3, #0]
 800ea5a:	f7ff bf8d 	b.w	800e978 <_puts_r>
 800ea5e:	bf00      	nop
 800ea60:	20000208 	.word	0x20000208

0800ea64 <_sbrk_r>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	4d06      	ldr	r5, [pc, #24]	; (800ea80 <_sbrk_r+0x1c>)
 800ea68:	2300      	movs	r3, #0
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	4608      	mov	r0, r1
 800ea6e:	602b      	str	r3, [r5, #0]
 800ea70:	f000 fa3a 	bl	800eee8 <_sbrk>
 800ea74:	1c43      	adds	r3, r0, #1
 800ea76:	d102      	bne.n	800ea7e <_sbrk_r+0x1a>
 800ea78:	682b      	ldr	r3, [r5, #0]
 800ea7a:	b103      	cbz	r3, 800ea7e <_sbrk_r+0x1a>
 800ea7c:	6023      	str	r3, [r4, #0]
 800ea7e:	bd38      	pop	{r3, r4, r5, pc}
 800ea80:	2005908c 	.word	0x2005908c

0800ea84 <__sread>:
 800ea84:	b510      	push	{r4, lr}
 800ea86:	460c      	mov	r4, r1
 800ea88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea8c:	f000 f9a2 	bl	800edd4 <_read_r>
 800ea90:	2800      	cmp	r0, #0
 800ea92:	bfab      	itete	ge
 800ea94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ea96:	89a3      	ldrhlt	r3, [r4, #12]
 800ea98:	181b      	addge	r3, r3, r0
 800ea9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ea9e:	bfac      	ite	ge
 800eaa0:	6563      	strge	r3, [r4, #84]	; 0x54
 800eaa2:	81a3      	strhlt	r3, [r4, #12]
 800eaa4:	bd10      	pop	{r4, pc}

0800eaa6 <__swrite>:
 800eaa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaaa:	461f      	mov	r7, r3
 800eaac:	898b      	ldrh	r3, [r1, #12]
 800eaae:	05db      	lsls	r3, r3, #23
 800eab0:	4605      	mov	r5, r0
 800eab2:	460c      	mov	r4, r1
 800eab4:	4616      	mov	r6, r2
 800eab6:	d505      	bpl.n	800eac4 <__swrite+0x1e>
 800eab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eabc:	2302      	movs	r3, #2
 800eabe:	2200      	movs	r2, #0
 800eac0:	f000 f906 	bl	800ecd0 <_lseek_r>
 800eac4:	89a3      	ldrh	r3, [r4, #12]
 800eac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eaca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eace:	81a3      	strh	r3, [r4, #12]
 800ead0:	4632      	mov	r2, r6
 800ead2:	463b      	mov	r3, r7
 800ead4:	4628      	mov	r0, r5
 800ead6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eada:	f000 b869 	b.w	800ebb0 <_write_r>

0800eade <__sseek>:
 800eade:	b510      	push	{r4, lr}
 800eae0:	460c      	mov	r4, r1
 800eae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eae6:	f000 f8f3 	bl	800ecd0 <_lseek_r>
 800eaea:	1c43      	adds	r3, r0, #1
 800eaec:	89a3      	ldrh	r3, [r4, #12]
 800eaee:	bf15      	itete	ne
 800eaf0:	6560      	strne	r0, [r4, #84]	; 0x54
 800eaf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eaf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eafa:	81a3      	strheq	r3, [r4, #12]
 800eafc:	bf18      	it	ne
 800eafe:	81a3      	strhne	r3, [r4, #12]
 800eb00:	bd10      	pop	{r4, pc}

0800eb02 <__sclose>:
 800eb02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb06:	f000 b8d3 	b.w	800ecb0 <_close_r>
	...

0800eb0c <__swbuf_r>:
 800eb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb0e:	460e      	mov	r6, r1
 800eb10:	4614      	mov	r4, r2
 800eb12:	4605      	mov	r5, r0
 800eb14:	b118      	cbz	r0, 800eb1e <__swbuf_r+0x12>
 800eb16:	6983      	ldr	r3, [r0, #24]
 800eb18:	b90b      	cbnz	r3, 800eb1e <__swbuf_r+0x12>
 800eb1a:	f7ff fd97 	bl	800e64c <__sinit>
 800eb1e:	4b21      	ldr	r3, [pc, #132]	; (800eba4 <__swbuf_r+0x98>)
 800eb20:	429c      	cmp	r4, r3
 800eb22:	d12b      	bne.n	800eb7c <__swbuf_r+0x70>
 800eb24:	686c      	ldr	r4, [r5, #4]
 800eb26:	69a3      	ldr	r3, [r4, #24]
 800eb28:	60a3      	str	r3, [r4, #8]
 800eb2a:	89a3      	ldrh	r3, [r4, #12]
 800eb2c:	071a      	lsls	r2, r3, #28
 800eb2e:	d52f      	bpl.n	800eb90 <__swbuf_r+0x84>
 800eb30:	6923      	ldr	r3, [r4, #16]
 800eb32:	b36b      	cbz	r3, 800eb90 <__swbuf_r+0x84>
 800eb34:	6923      	ldr	r3, [r4, #16]
 800eb36:	6820      	ldr	r0, [r4, #0]
 800eb38:	1ac0      	subs	r0, r0, r3
 800eb3a:	6963      	ldr	r3, [r4, #20]
 800eb3c:	b2f6      	uxtb	r6, r6
 800eb3e:	4283      	cmp	r3, r0
 800eb40:	4637      	mov	r7, r6
 800eb42:	dc04      	bgt.n	800eb4e <__swbuf_r+0x42>
 800eb44:	4621      	mov	r1, r4
 800eb46:	4628      	mov	r0, r5
 800eb48:	f7ff fcda 	bl	800e500 <_fflush_r>
 800eb4c:	bb30      	cbnz	r0, 800eb9c <__swbuf_r+0x90>
 800eb4e:	68a3      	ldr	r3, [r4, #8]
 800eb50:	3b01      	subs	r3, #1
 800eb52:	60a3      	str	r3, [r4, #8]
 800eb54:	6823      	ldr	r3, [r4, #0]
 800eb56:	1c5a      	adds	r2, r3, #1
 800eb58:	6022      	str	r2, [r4, #0]
 800eb5a:	701e      	strb	r6, [r3, #0]
 800eb5c:	6963      	ldr	r3, [r4, #20]
 800eb5e:	3001      	adds	r0, #1
 800eb60:	4283      	cmp	r3, r0
 800eb62:	d004      	beq.n	800eb6e <__swbuf_r+0x62>
 800eb64:	89a3      	ldrh	r3, [r4, #12]
 800eb66:	07db      	lsls	r3, r3, #31
 800eb68:	d506      	bpl.n	800eb78 <__swbuf_r+0x6c>
 800eb6a:	2e0a      	cmp	r6, #10
 800eb6c:	d104      	bne.n	800eb78 <__swbuf_r+0x6c>
 800eb6e:	4621      	mov	r1, r4
 800eb70:	4628      	mov	r0, r5
 800eb72:	f7ff fcc5 	bl	800e500 <_fflush_r>
 800eb76:	b988      	cbnz	r0, 800eb9c <__swbuf_r+0x90>
 800eb78:	4638      	mov	r0, r7
 800eb7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb7c:	4b0a      	ldr	r3, [pc, #40]	; (800eba8 <__swbuf_r+0x9c>)
 800eb7e:	429c      	cmp	r4, r3
 800eb80:	d101      	bne.n	800eb86 <__swbuf_r+0x7a>
 800eb82:	68ac      	ldr	r4, [r5, #8]
 800eb84:	e7cf      	b.n	800eb26 <__swbuf_r+0x1a>
 800eb86:	4b09      	ldr	r3, [pc, #36]	; (800ebac <__swbuf_r+0xa0>)
 800eb88:	429c      	cmp	r4, r3
 800eb8a:	bf08      	it	eq
 800eb8c:	68ec      	ldreq	r4, [r5, #12]
 800eb8e:	e7ca      	b.n	800eb26 <__swbuf_r+0x1a>
 800eb90:	4621      	mov	r1, r4
 800eb92:	4628      	mov	r0, r5
 800eb94:	f000 f81e 	bl	800ebd4 <__swsetup_r>
 800eb98:	2800      	cmp	r0, #0
 800eb9a:	d0cb      	beq.n	800eb34 <__swbuf_r+0x28>
 800eb9c:	f04f 37ff 	mov.w	r7, #4294967295
 800eba0:	e7ea      	b.n	800eb78 <__swbuf_r+0x6c>
 800eba2:	bf00      	nop
 800eba4:	080134ac 	.word	0x080134ac
 800eba8:	080134cc 	.word	0x080134cc
 800ebac:	0801348c 	.word	0x0801348c

0800ebb0 <_write_r>:
 800ebb0:	b538      	push	{r3, r4, r5, lr}
 800ebb2:	4d07      	ldr	r5, [pc, #28]	; (800ebd0 <_write_r+0x20>)
 800ebb4:	4604      	mov	r4, r0
 800ebb6:	4608      	mov	r0, r1
 800ebb8:	4611      	mov	r1, r2
 800ebba:	2200      	movs	r2, #0
 800ebbc:	602a      	str	r2, [r5, #0]
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	f7fd ff4a 	bl	800ca58 <_write>
 800ebc4:	1c43      	adds	r3, r0, #1
 800ebc6:	d102      	bne.n	800ebce <_write_r+0x1e>
 800ebc8:	682b      	ldr	r3, [r5, #0]
 800ebca:	b103      	cbz	r3, 800ebce <_write_r+0x1e>
 800ebcc:	6023      	str	r3, [r4, #0]
 800ebce:	bd38      	pop	{r3, r4, r5, pc}
 800ebd0:	2005908c 	.word	0x2005908c

0800ebd4 <__swsetup_r>:
 800ebd4:	4b32      	ldr	r3, [pc, #200]	; (800eca0 <__swsetup_r+0xcc>)
 800ebd6:	b570      	push	{r4, r5, r6, lr}
 800ebd8:	681d      	ldr	r5, [r3, #0]
 800ebda:	4606      	mov	r6, r0
 800ebdc:	460c      	mov	r4, r1
 800ebde:	b125      	cbz	r5, 800ebea <__swsetup_r+0x16>
 800ebe0:	69ab      	ldr	r3, [r5, #24]
 800ebe2:	b913      	cbnz	r3, 800ebea <__swsetup_r+0x16>
 800ebe4:	4628      	mov	r0, r5
 800ebe6:	f7ff fd31 	bl	800e64c <__sinit>
 800ebea:	4b2e      	ldr	r3, [pc, #184]	; (800eca4 <__swsetup_r+0xd0>)
 800ebec:	429c      	cmp	r4, r3
 800ebee:	d10f      	bne.n	800ec10 <__swsetup_r+0x3c>
 800ebf0:	686c      	ldr	r4, [r5, #4]
 800ebf2:	89a3      	ldrh	r3, [r4, #12]
 800ebf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ebf8:	0719      	lsls	r1, r3, #28
 800ebfa:	d42c      	bmi.n	800ec56 <__swsetup_r+0x82>
 800ebfc:	06dd      	lsls	r5, r3, #27
 800ebfe:	d411      	bmi.n	800ec24 <__swsetup_r+0x50>
 800ec00:	2309      	movs	r3, #9
 800ec02:	6033      	str	r3, [r6, #0]
 800ec04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ec08:	81a3      	strh	r3, [r4, #12]
 800ec0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec0e:	e03e      	b.n	800ec8e <__swsetup_r+0xba>
 800ec10:	4b25      	ldr	r3, [pc, #148]	; (800eca8 <__swsetup_r+0xd4>)
 800ec12:	429c      	cmp	r4, r3
 800ec14:	d101      	bne.n	800ec1a <__swsetup_r+0x46>
 800ec16:	68ac      	ldr	r4, [r5, #8]
 800ec18:	e7eb      	b.n	800ebf2 <__swsetup_r+0x1e>
 800ec1a:	4b24      	ldr	r3, [pc, #144]	; (800ecac <__swsetup_r+0xd8>)
 800ec1c:	429c      	cmp	r4, r3
 800ec1e:	bf08      	it	eq
 800ec20:	68ec      	ldreq	r4, [r5, #12]
 800ec22:	e7e6      	b.n	800ebf2 <__swsetup_r+0x1e>
 800ec24:	0758      	lsls	r0, r3, #29
 800ec26:	d512      	bpl.n	800ec4e <__swsetup_r+0x7a>
 800ec28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec2a:	b141      	cbz	r1, 800ec3e <__swsetup_r+0x6a>
 800ec2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec30:	4299      	cmp	r1, r3
 800ec32:	d002      	beq.n	800ec3a <__swsetup_r+0x66>
 800ec34:	4630      	mov	r0, r6
 800ec36:	f7ff fdf5 	bl	800e824 <_free_r>
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	6363      	str	r3, [r4, #52]	; 0x34
 800ec3e:	89a3      	ldrh	r3, [r4, #12]
 800ec40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ec44:	81a3      	strh	r3, [r4, #12]
 800ec46:	2300      	movs	r3, #0
 800ec48:	6063      	str	r3, [r4, #4]
 800ec4a:	6923      	ldr	r3, [r4, #16]
 800ec4c:	6023      	str	r3, [r4, #0]
 800ec4e:	89a3      	ldrh	r3, [r4, #12]
 800ec50:	f043 0308 	orr.w	r3, r3, #8
 800ec54:	81a3      	strh	r3, [r4, #12]
 800ec56:	6923      	ldr	r3, [r4, #16]
 800ec58:	b94b      	cbnz	r3, 800ec6e <__swsetup_r+0x9a>
 800ec5a:	89a3      	ldrh	r3, [r4, #12]
 800ec5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ec60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec64:	d003      	beq.n	800ec6e <__swsetup_r+0x9a>
 800ec66:	4621      	mov	r1, r4
 800ec68:	4630      	mov	r0, r6
 800ec6a:	f000 f867 	bl	800ed3c <__smakebuf_r>
 800ec6e:	89a0      	ldrh	r0, [r4, #12]
 800ec70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec74:	f010 0301 	ands.w	r3, r0, #1
 800ec78:	d00a      	beq.n	800ec90 <__swsetup_r+0xbc>
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	60a3      	str	r3, [r4, #8]
 800ec7e:	6963      	ldr	r3, [r4, #20]
 800ec80:	425b      	negs	r3, r3
 800ec82:	61a3      	str	r3, [r4, #24]
 800ec84:	6923      	ldr	r3, [r4, #16]
 800ec86:	b943      	cbnz	r3, 800ec9a <__swsetup_r+0xc6>
 800ec88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ec8c:	d1ba      	bne.n	800ec04 <__swsetup_r+0x30>
 800ec8e:	bd70      	pop	{r4, r5, r6, pc}
 800ec90:	0781      	lsls	r1, r0, #30
 800ec92:	bf58      	it	pl
 800ec94:	6963      	ldrpl	r3, [r4, #20]
 800ec96:	60a3      	str	r3, [r4, #8]
 800ec98:	e7f4      	b.n	800ec84 <__swsetup_r+0xb0>
 800ec9a:	2000      	movs	r0, #0
 800ec9c:	e7f7      	b.n	800ec8e <__swsetup_r+0xba>
 800ec9e:	bf00      	nop
 800eca0:	20000208 	.word	0x20000208
 800eca4:	080134ac 	.word	0x080134ac
 800eca8:	080134cc 	.word	0x080134cc
 800ecac:	0801348c 	.word	0x0801348c

0800ecb0 <_close_r>:
 800ecb0:	b538      	push	{r3, r4, r5, lr}
 800ecb2:	4d06      	ldr	r5, [pc, #24]	; (800eccc <_close_r+0x1c>)
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	4608      	mov	r0, r1
 800ecba:	602b      	str	r3, [r5, #0]
 800ecbc:	f000 f8f4 	bl	800eea8 <_close>
 800ecc0:	1c43      	adds	r3, r0, #1
 800ecc2:	d102      	bne.n	800ecca <_close_r+0x1a>
 800ecc4:	682b      	ldr	r3, [r5, #0]
 800ecc6:	b103      	cbz	r3, 800ecca <_close_r+0x1a>
 800ecc8:	6023      	str	r3, [r4, #0]
 800ecca:	bd38      	pop	{r3, r4, r5, pc}
 800eccc:	2005908c 	.word	0x2005908c

0800ecd0 <_lseek_r>:
 800ecd0:	b538      	push	{r3, r4, r5, lr}
 800ecd2:	4d07      	ldr	r5, [pc, #28]	; (800ecf0 <_lseek_r+0x20>)
 800ecd4:	4604      	mov	r4, r0
 800ecd6:	4608      	mov	r0, r1
 800ecd8:	4611      	mov	r1, r2
 800ecda:	2200      	movs	r2, #0
 800ecdc:	602a      	str	r2, [r5, #0]
 800ecde:	461a      	mov	r2, r3
 800ece0:	f000 f8fa 	bl	800eed8 <_lseek>
 800ece4:	1c43      	adds	r3, r0, #1
 800ece6:	d102      	bne.n	800ecee <_lseek_r+0x1e>
 800ece8:	682b      	ldr	r3, [r5, #0]
 800ecea:	b103      	cbz	r3, 800ecee <_lseek_r+0x1e>
 800ecec:	6023      	str	r3, [r4, #0]
 800ecee:	bd38      	pop	{r3, r4, r5, pc}
 800ecf0:	2005908c 	.word	0x2005908c

0800ecf4 <__swhatbuf_r>:
 800ecf4:	b570      	push	{r4, r5, r6, lr}
 800ecf6:	460e      	mov	r6, r1
 800ecf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecfc:	2900      	cmp	r1, #0
 800ecfe:	b096      	sub	sp, #88	; 0x58
 800ed00:	4614      	mov	r4, r2
 800ed02:	461d      	mov	r5, r3
 800ed04:	da07      	bge.n	800ed16 <__swhatbuf_r+0x22>
 800ed06:	2300      	movs	r3, #0
 800ed08:	602b      	str	r3, [r5, #0]
 800ed0a:	89b3      	ldrh	r3, [r6, #12]
 800ed0c:	061a      	lsls	r2, r3, #24
 800ed0e:	d410      	bmi.n	800ed32 <__swhatbuf_r+0x3e>
 800ed10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed14:	e00e      	b.n	800ed34 <__swhatbuf_r+0x40>
 800ed16:	466a      	mov	r2, sp
 800ed18:	f000 f86e 	bl	800edf8 <_fstat_r>
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	dbf2      	blt.n	800ed06 <__swhatbuf_r+0x12>
 800ed20:	9a01      	ldr	r2, [sp, #4]
 800ed22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ed26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ed2a:	425a      	negs	r2, r3
 800ed2c:	415a      	adcs	r2, r3
 800ed2e:	602a      	str	r2, [r5, #0]
 800ed30:	e7ee      	b.n	800ed10 <__swhatbuf_r+0x1c>
 800ed32:	2340      	movs	r3, #64	; 0x40
 800ed34:	2000      	movs	r0, #0
 800ed36:	6023      	str	r3, [r4, #0]
 800ed38:	b016      	add	sp, #88	; 0x58
 800ed3a:	bd70      	pop	{r4, r5, r6, pc}

0800ed3c <__smakebuf_r>:
 800ed3c:	898b      	ldrh	r3, [r1, #12]
 800ed3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed40:	079d      	lsls	r5, r3, #30
 800ed42:	4606      	mov	r6, r0
 800ed44:	460c      	mov	r4, r1
 800ed46:	d507      	bpl.n	800ed58 <__smakebuf_r+0x1c>
 800ed48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed4c:	6023      	str	r3, [r4, #0]
 800ed4e:	6123      	str	r3, [r4, #16]
 800ed50:	2301      	movs	r3, #1
 800ed52:	6163      	str	r3, [r4, #20]
 800ed54:	b002      	add	sp, #8
 800ed56:	bd70      	pop	{r4, r5, r6, pc}
 800ed58:	ab01      	add	r3, sp, #4
 800ed5a:	466a      	mov	r2, sp
 800ed5c:	f7ff ffca 	bl	800ecf4 <__swhatbuf_r>
 800ed60:	9900      	ldr	r1, [sp, #0]
 800ed62:	4605      	mov	r5, r0
 800ed64:	4630      	mov	r0, r6
 800ed66:	f7ff fdad 	bl	800e8c4 <_malloc_r>
 800ed6a:	b948      	cbnz	r0, 800ed80 <__smakebuf_r+0x44>
 800ed6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed70:	059a      	lsls	r2, r3, #22
 800ed72:	d4ef      	bmi.n	800ed54 <__smakebuf_r+0x18>
 800ed74:	f023 0303 	bic.w	r3, r3, #3
 800ed78:	f043 0302 	orr.w	r3, r3, #2
 800ed7c:	81a3      	strh	r3, [r4, #12]
 800ed7e:	e7e3      	b.n	800ed48 <__smakebuf_r+0xc>
 800ed80:	4b0d      	ldr	r3, [pc, #52]	; (800edb8 <__smakebuf_r+0x7c>)
 800ed82:	62b3      	str	r3, [r6, #40]	; 0x28
 800ed84:	89a3      	ldrh	r3, [r4, #12]
 800ed86:	6020      	str	r0, [r4, #0]
 800ed88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed8c:	81a3      	strh	r3, [r4, #12]
 800ed8e:	9b00      	ldr	r3, [sp, #0]
 800ed90:	6163      	str	r3, [r4, #20]
 800ed92:	9b01      	ldr	r3, [sp, #4]
 800ed94:	6120      	str	r0, [r4, #16]
 800ed96:	b15b      	cbz	r3, 800edb0 <__smakebuf_r+0x74>
 800ed98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed9c:	4630      	mov	r0, r6
 800ed9e:	f000 f83d 	bl	800ee1c <_isatty_r>
 800eda2:	b128      	cbz	r0, 800edb0 <__smakebuf_r+0x74>
 800eda4:	89a3      	ldrh	r3, [r4, #12]
 800eda6:	f023 0303 	bic.w	r3, r3, #3
 800edaa:	f043 0301 	orr.w	r3, r3, #1
 800edae:	81a3      	strh	r3, [r4, #12]
 800edb0:	89a0      	ldrh	r0, [r4, #12]
 800edb2:	4305      	orrs	r5, r0
 800edb4:	81a5      	strh	r5, [r4, #12]
 800edb6:	e7cd      	b.n	800ed54 <__smakebuf_r+0x18>
 800edb8:	0800e5e5 	.word	0x0800e5e5

0800edbc <__malloc_lock>:
 800edbc:	4801      	ldr	r0, [pc, #4]	; (800edc4 <__malloc_lock+0x8>)
 800edbe:	f7ff bd08 	b.w	800e7d2 <__retarget_lock_acquire_recursive>
 800edc2:	bf00      	nop
 800edc4:	20059084 	.word	0x20059084

0800edc8 <__malloc_unlock>:
 800edc8:	4801      	ldr	r0, [pc, #4]	; (800edd0 <__malloc_unlock+0x8>)
 800edca:	f7ff bd03 	b.w	800e7d4 <__retarget_lock_release_recursive>
 800edce:	bf00      	nop
 800edd0:	20059084 	.word	0x20059084

0800edd4 <_read_r>:
 800edd4:	b538      	push	{r3, r4, r5, lr}
 800edd6:	4d07      	ldr	r5, [pc, #28]	; (800edf4 <_read_r+0x20>)
 800edd8:	4604      	mov	r4, r0
 800edda:	4608      	mov	r0, r1
 800eddc:	4611      	mov	r1, r2
 800edde:	2200      	movs	r2, #0
 800ede0:	602a      	str	r2, [r5, #0]
 800ede2:	461a      	mov	r2, r3
 800ede4:	f7fd fe44 	bl	800ca70 <_read>
 800ede8:	1c43      	adds	r3, r0, #1
 800edea:	d102      	bne.n	800edf2 <_read_r+0x1e>
 800edec:	682b      	ldr	r3, [r5, #0]
 800edee:	b103      	cbz	r3, 800edf2 <_read_r+0x1e>
 800edf0:	6023      	str	r3, [r4, #0]
 800edf2:	bd38      	pop	{r3, r4, r5, pc}
 800edf4:	2005908c 	.word	0x2005908c

0800edf8 <_fstat_r>:
 800edf8:	b538      	push	{r3, r4, r5, lr}
 800edfa:	4d07      	ldr	r5, [pc, #28]	; (800ee18 <_fstat_r+0x20>)
 800edfc:	2300      	movs	r3, #0
 800edfe:	4604      	mov	r4, r0
 800ee00:	4608      	mov	r0, r1
 800ee02:	4611      	mov	r1, r2
 800ee04:	602b      	str	r3, [r5, #0]
 800ee06:	f000 f857 	bl	800eeb8 <_fstat>
 800ee0a:	1c43      	adds	r3, r0, #1
 800ee0c:	d102      	bne.n	800ee14 <_fstat_r+0x1c>
 800ee0e:	682b      	ldr	r3, [r5, #0]
 800ee10:	b103      	cbz	r3, 800ee14 <_fstat_r+0x1c>
 800ee12:	6023      	str	r3, [r4, #0]
 800ee14:	bd38      	pop	{r3, r4, r5, pc}
 800ee16:	bf00      	nop
 800ee18:	2005908c 	.word	0x2005908c

0800ee1c <_isatty_r>:
 800ee1c:	b538      	push	{r3, r4, r5, lr}
 800ee1e:	4d06      	ldr	r5, [pc, #24]	; (800ee38 <_isatty_r+0x1c>)
 800ee20:	2300      	movs	r3, #0
 800ee22:	4604      	mov	r4, r0
 800ee24:	4608      	mov	r0, r1
 800ee26:	602b      	str	r3, [r5, #0]
 800ee28:	f000 f84e 	bl	800eec8 <_isatty>
 800ee2c:	1c43      	adds	r3, r0, #1
 800ee2e:	d102      	bne.n	800ee36 <_isatty_r+0x1a>
 800ee30:	682b      	ldr	r3, [r5, #0]
 800ee32:	b103      	cbz	r3, 800ee36 <_isatty_r+0x1a>
 800ee34:	6023      	str	r3, [r4, #0]
 800ee36:	bd38      	pop	{r3, r4, r5, pc}
 800ee38:	2005908c 	.word	0x2005908c
 800ee3c:	00000000 	.word	0x00000000

0800ee40 <sqrt>:
 800ee40:	b508      	push	{r3, lr}
 800ee42:	ed2d 8b04 	vpush	{d8-d9}
 800ee46:	eeb0 8b40 	vmov.f64	d8, d0
 800ee4a:	f000 f823 	bl	800ee94 <__ieee754_sqrt>
 800ee4e:	4b10      	ldr	r3, [pc, #64]	; (800ee90 <sqrt+0x50>)
 800ee50:	f993 3000 	ldrsb.w	r3, [r3]
 800ee54:	3301      	adds	r3, #1
 800ee56:	d011      	beq.n	800ee7c <sqrt+0x3c>
 800ee58:	eeb4 8b48 	vcmp.f64	d8, d8
 800ee5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee60:	d60c      	bvs.n	800ee7c <sqrt+0x3c>
 800ee62:	ed9f 9b09 	vldr	d9, [pc, #36]	; 800ee88 <sqrt+0x48>
 800ee66:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800ee6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee6e:	d505      	bpl.n	800ee7c <sqrt+0x3c>
 800ee70:	f000 f814 	bl	800ee9c <__errno>
 800ee74:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800ee78:	2321      	movs	r3, #33	; 0x21
 800ee7a:	6003      	str	r3, [r0, #0]
 800ee7c:	ecbd 8b04 	vpop	{d8-d9}
 800ee80:	bd08      	pop	{r3, pc}
 800ee82:	bf00      	nop
 800ee84:	f3af 8000 	nop.w
	...
 800ee90:	2000026c 	.word	0x2000026c

0800ee94 <__ieee754_sqrt>:
 800ee94:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800ee98:	4770      	bx	lr
	...

0800ee9c <__errno>:
 800ee9c:	4b01      	ldr	r3, [pc, #4]	; (800eea4 <__errno+0x8>)
 800ee9e:	6818      	ldr	r0, [r3, #0]
 800eea0:	4770      	bx	lr
 800eea2:	bf00      	nop
 800eea4:	20000208 	.word	0x20000208

0800eea8 <_close>:
 800eea8:	4b02      	ldr	r3, [pc, #8]	; (800eeb4 <_close+0xc>)
 800eeaa:	2258      	movs	r2, #88	; 0x58
 800eeac:	601a      	str	r2, [r3, #0]
 800eeae:	f04f 30ff 	mov.w	r0, #4294967295
 800eeb2:	4770      	bx	lr
 800eeb4:	2005908c 	.word	0x2005908c

0800eeb8 <_fstat>:
 800eeb8:	4b02      	ldr	r3, [pc, #8]	; (800eec4 <_fstat+0xc>)
 800eeba:	2258      	movs	r2, #88	; 0x58
 800eebc:	601a      	str	r2, [r3, #0]
 800eebe:	f04f 30ff 	mov.w	r0, #4294967295
 800eec2:	4770      	bx	lr
 800eec4:	2005908c 	.word	0x2005908c

0800eec8 <_isatty>:
 800eec8:	4b02      	ldr	r3, [pc, #8]	; (800eed4 <_isatty+0xc>)
 800eeca:	2258      	movs	r2, #88	; 0x58
 800eecc:	601a      	str	r2, [r3, #0]
 800eece:	2000      	movs	r0, #0
 800eed0:	4770      	bx	lr
 800eed2:	bf00      	nop
 800eed4:	2005908c 	.word	0x2005908c

0800eed8 <_lseek>:
 800eed8:	4b02      	ldr	r3, [pc, #8]	; (800eee4 <_lseek+0xc>)
 800eeda:	2258      	movs	r2, #88	; 0x58
 800eedc:	601a      	str	r2, [r3, #0]
 800eede:	f04f 30ff 	mov.w	r0, #4294967295
 800eee2:	4770      	bx	lr
 800eee4:	2005908c 	.word	0x2005908c

0800eee8 <_sbrk>:
 800eee8:	4b04      	ldr	r3, [pc, #16]	; (800eefc <_sbrk+0x14>)
 800eeea:	6819      	ldr	r1, [r3, #0]
 800eeec:	4602      	mov	r2, r0
 800eeee:	b909      	cbnz	r1, 800eef4 <_sbrk+0xc>
 800eef0:	4903      	ldr	r1, [pc, #12]	; (800ef00 <_sbrk+0x18>)
 800eef2:	6019      	str	r1, [r3, #0]
 800eef4:	6818      	ldr	r0, [r3, #0]
 800eef6:	4402      	add	r2, r0
 800eef8:	601a      	str	r2, [r3, #0]
 800eefa:	4770      	bx	lr
 800eefc:	20001b58 	.word	0x20001b58
 800ef00:	20059090 	.word	0x20059090

0800ef04 <_init>:
 800ef04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef06:	bf00      	nop
 800ef08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef0a:	bc08      	pop	{r3}
 800ef0c:	469e      	mov	lr, r3
 800ef0e:	4770      	bx	lr

0800ef10 <_fini>:
 800ef10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef12:	bf00      	nop
 800ef14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef16:	bc08      	pop	{r3}
 800ef18:	469e      	mov	lr, r3
 800ef1a:	4770      	bx	lr
