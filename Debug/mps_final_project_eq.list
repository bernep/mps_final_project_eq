
mps_final_project_eq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cf0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af0  08008ef0  08008ef0  00018ef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080099e0  080099e0  000199e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080099e4  080099e4  000199e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  080099e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00046808  200001dc  08009bc4  000201dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200469e4  08009bc4  000269e4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   000456b5  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006b8d  00000000  00000000  000658bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0001cda1  00000000  00000000  0006c44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001cd8  00000000  00000000  000891f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001b50  00000000  00000000  0008aec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003751a  00000000  00000000  0008ca18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000395b8  00000000  00000000  000c3f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00131cdc  00000000  00000000  000fd4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0022f1c6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005a24  00000000  00000000  0022f21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         0000006c  00000000  00000000  00234c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000e3  00000000  00000000  00234cac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08008ed8 	.word	0x08008ed8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08008ed8 	.word	0x08008ed8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80002e0:	b508      	push	{r3, lr}
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80002e2:	f000 feb9 	bl	8001058 <AUDIO_IO_Write>
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
}
 80002e6:	2000      	movs	r0, #0
 80002e8:	bd08      	pop	{r3, pc}
	...

080002ec <wm8994_SetMute>:
{
 80002ec:	b538      	push	{r3, r4, r5, lr}
 80002ee:	4603      	mov	r3, r0
  if (outputEnabled != 0)
 80002f0:	4a13      	ldr	r2, [pc, #76]	; (8000340 <wm8994_SetMute+0x54>)
 80002f2:	6810      	ldr	r0, [r2, #0]
 80002f4:	b180      	cbz	r0, 8000318 <wm8994_SetMute+0x2c>
    if(Cmd == AUDIO_MUTE_ON)
 80002f6:	2901      	cmp	r1, #1
 80002f8:	d00f      	beq.n	800031a <wm8994_SetMute+0x2e>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80002fa:	b2dd      	uxtb	r5, r3
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000302:	4628      	mov	r0, r5
 8000304:	f7ff ffec 	bl	80002e0 <CODEC_IO_Write>
 8000308:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 800030a:	2200      	movs	r2, #0
 800030c:	f240 4122 	movw	r1, #1058	; 0x422
 8000310:	4628      	mov	r0, r5
 8000312:	f7ff ffe5 	bl	80002e0 <CODEC_IO_Write>
 8000316:	4420      	add	r0, r4
}
 8000318:	bd38      	pop	{r3, r4, r5, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800031a:	b2dd      	uxtb	r5, r3
 800031c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000320:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000324:	4628      	mov	r0, r5
 8000326:	f7ff ffdb 	bl	80002e0 <CODEC_IO_Write>
 800032a:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800032c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000330:	f240 4122 	movw	r1, #1058	; 0x422
 8000334:	4628      	mov	r0, r5
 8000336:	f7ff ffd3 	bl	80002e0 <CODEC_IO_Write>
 800033a:	4420      	add	r0, r4
 800033c:	e7ec      	b.n	8000318 <wm8994_SetMute+0x2c>
 800033e:	bf00      	nop
 8000340:	200001f8 	.word	0x200001f8

08000344 <wm8994_Play>:
{
 8000344:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000346:	2100      	movs	r1, #0
 8000348:	f7ff ffd0 	bl	80002ec <wm8994_SetMute>
}
 800034c:	bd08      	pop	{r3, pc}

0800034e <wm8994_Resume>:
{
 800034e:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000350:	2100      	movs	r1, #0
 8000352:	f7ff ffcb 	bl	80002ec <wm8994_SetMute>
}
 8000356:	bd08      	pop	{r3, pc}

08000358 <wm8994_Pause>:
{  
 8000358:	b538      	push	{r3, r4, r5, lr}
 800035a:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800035c:	2101      	movs	r1, #1
 800035e:	f7ff ffc5 	bl	80002ec <wm8994_SetMute>
 8000362:	4604      	mov	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8000364:	2201      	movs	r2, #1
 8000366:	2102      	movs	r1, #2
 8000368:	b2e8      	uxtb	r0, r5
 800036a:	f7ff ffb9 	bl	80002e0 <CODEC_IO_Write>
}
 800036e:	4420      	add	r0, r4
 8000370:	bd38      	pop	{r3, r4, r5, pc}
	...

08000374 <wm8994_Stop>:
{
 8000374:	b570      	push	{r4, r5, r6, lr}
  if (outputEnabled != 0)
 8000376:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <wm8994_Stop+0x78>)
 8000378:	681c      	ldr	r4, [r3, #0]
 800037a:	b90c      	cbnz	r4, 8000380 <wm8994_Stop+0xc>
}
 800037c:	4620      	mov	r0, r4
 800037e:	bd70      	pop	{r4, r5, r6, pc}
 8000380:	4605      	mov	r5, r0
 8000382:	460e      	mov	r6, r1
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000384:	2101      	movs	r1, #1
 8000386:	f7ff ffb1 	bl	80002ec <wm8994_SetMute>
 800038a:	4604      	mov	r4, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 800038c:	2e02      	cmp	r6, #2
 800038e:	d0f5      	beq.n	800037c <wm8994_Stop+0x8>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8000390:	b2ed      	uxtb	r5, r5
 8000392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000396:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800039a:	4628      	mov	r0, r5
 800039c:	f7ff ffa0 	bl	80002e0 <CODEC_IO_Write>
 80003a0:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80003a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a6:	f240 4122 	movw	r1, #1058	; 0x422
 80003aa:	4628      	mov	r0, r5
 80003ac:	f7ff ff98 	bl	80002e0 <CODEC_IO_Write>
 80003b0:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80003b2:	2200      	movs	r2, #0
 80003b4:	212d      	movs	r1, #45	; 0x2d
 80003b6:	4628      	mov	r0, r5
 80003b8:	f7ff ff92 	bl	80002e0 <CODEC_IO_Write>
 80003bc:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 80003be:	2200      	movs	r2, #0
 80003c0:	212e      	movs	r1, #46	; 0x2e
 80003c2:	4628      	mov	r0, r5
 80003c4:	f7ff ff8c 	bl	80002e0 <CODEC_IO_Write>
 80003c8:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2105      	movs	r1, #5
 80003ce:	4628      	mov	r0, r5
 80003d0:	f7ff ff86 	bl	80002e0 <CODEC_IO_Write>
 80003d4:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80003d6:	2200      	movs	r2, #0
 80003d8:	4611      	mov	r1, r2
 80003da:	4628      	mov	r0, r5
 80003dc:	f7ff ff80 	bl	80002e0 <CODEC_IO_Write>
 80003e0:	4404      	add	r4, r0
      outputEnabled = 0;
 80003e2:	4b02      	ldr	r3, [pc, #8]	; (80003ec <wm8994_Stop+0x78>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
  return counter;
 80003e8:	e7c8      	b.n	800037c <wm8994_Stop+0x8>
 80003ea:	bf00      	nop
 80003ec:	200001f8 	.word	0x200001f8

080003f0 <wm8994_SetVolume>:
{
 80003f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003f4:	4606      	mov	r6, r0
 80003f6:	460c      	mov	r4, r1
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80003f8:	2964      	cmp	r1, #100	; 0x64
 80003fa:	d809      	bhi.n	8000410 <wm8994_SetVolume+0x20>
 80003fc:	ebc1 1381 	rsb	r3, r1, r1, lsl #6
 8000400:	4a46      	ldr	r2, [pc, #280]	; (800051c <wm8994_SetVolume+0x12c>)
 8000402:	fb82 1203 	smull	r1, r2, r2, r3
 8000406:	17df      	asrs	r7, r3, #31
 8000408:	ebc7 1762 	rsb	r7, r7, r2, asr #5
 800040c:	b2ff      	uxtb	r7, r7
 800040e:	e000      	b.n	8000412 <wm8994_SetVolume+0x22>
 8000410:	2764      	movs	r7, #100	; 0x64
  if (outputEnabled != 0)
 8000412:	4b43      	ldr	r3, [pc, #268]	; (8000520 <wm8994_SetVolume+0x130>)
 8000414:	681d      	ldr	r5, [r3, #0]
 8000416:	b13d      	cbz	r5, 8000428 <wm8994_SetVolume+0x38>
    if(convertedvol > 0x3E)
 8000418:	2f3e      	cmp	r7, #62	; 0x3e
 800041a:	d816      	bhi.n	800044a <wm8994_SetVolume+0x5a>
    else if (Volume == 0)
 800041c:	bbc4      	cbnz	r4, 8000490 <wm8994_SetVolume+0xa0>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800041e:	2101      	movs	r1, #1
 8000420:	4630      	mov	r0, r6
 8000422:	f7ff ff63 	bl	80002ec <wm8994_SetMute>
 8000426:	4605      	mov	r5, r0
  if (inputEnabled != 0)
 8000428:	4b3d      	ldr	r3, [pc, #244]	; (8000520 <wm8994_SetVolume+0x130>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d071      	beq.n	8000514 <wm8994_SetVolume+0x124>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8000430:	2c63      	cmp	r4, #99	; 0x63
 8000432:	d84f      	bhi.n	80004d4 <wm8994_SetVolume+0xe4>
 8000434:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8000438:	0124      	lsls	r4, r4, #4
 800043a:	4b38      	ldr	r3, [pc, #224]	; (800051c <wm8994_SetVolume+0x12c>)
 800043c:	fb83 2304 	smull	r2, r3, r3, r4
 8000440:	17e4      	asrs	r4, r4, #31
 8000442:	ebc4 1463 	rsb	r4, r4, r3, asr #5
 8000446:	b2e4      	uxtb	r4, r4
 8000448:	e045      	b.n	80004d6 <wm8994_SetVolume+0xe6>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800044a:	2100      	movs	r1, #0
 800044c:	4630      	mov	r0, r6
 800044e:	f7ff ff4d 	bl	80002ec <wm8994_SetMute>
 8000452:	4605      	mov	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8000454:	b2f7      	uxtb	r7, r6
 8000456:	f240 127f 	movw	r2, #383	; 0x17f
 800045a:	211c      	movs	r1, #28
 800045c:	4638      	mov	r0, r7
 800045e:	f7ff ff3f 	bl	80002e0 <CODEC_IO_Write>
 8000462:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8000464:	f240 127f 	movw	r2, #383	; 0x17f
 8000468:	211d      	movs	r1, #29
 800046a:	4638      	mov	r0, r7
 800046c:	f7ff ff38 	bl	80002e0 <CODEC_IO_Write>
 8000470:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8000472:	f240 127f 	movw	r2, #383	; 0x17f
 8000476:	2126      	movs	r1, #38	; 0x26
 8000478:	4638      	mov	r0, r7
 800047a:	f7ff ff31 	bl	80002e0 <CODEC_IO_Write>
 800047e:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8000480:	f240 127f 	movw	r2, #383	; 0x17f
 8000484:	2127      	movs	r1, #39	; 0x27
 8000486:	4638      	mov	r0, r7
 8000488:	f7ff ff2a 	bl	80002e0 <CODEC_IO_Write>
 800048c:	4405      	add	r5, r0
 800048e:	e7cb      	b.n	8000428 <wm8994_SetVolume+0x38>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000490:	2100      	movs	r1, #0
 8000492:	4630      	mov	r0, r6
 8000494:	f7ff ff2a 	bl	80002ec <wm8994_SetMute>
 8000498:	4605      	mov	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800049a:	fa5f f886 	uxtb.w	r8, r6
 800049e:	f447 77a0 	orr.w	r7, r7, #320	; 0x140
 80004a2:	463a      	mov	r2, r7
 80004a4:	211c      	movs	r1, #28
 80004a6:	4640      	mov	r0, r8
 80004a8:	f7ff ff1a 	bl	80002e0 <CODEC_IO_Write>
 80004ac:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80004ae:	463a      	mov	r2, r7
 80004b0:	211d      	movs	r1, #29
 80004b2:	4640      	mov	r0, r8
 80004b4:	f7ff ff14 	bl	80002e0 <CODEC_IO_Write>
 80004b8:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 80004ba:	463a      	mov	r2, r7
 80004bc:	2126      	movs	r1, #38	; 0x26
 80004be:	4640      	mov	r0, r8
 80004c0:	f7ff ff0e 	bl	80002e0 <CODEC_IO_Write>
 80004c4:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80004c6:	463a      	mov	r2, r7
 80004c8:	2127      	movs	r1, #39	; 0x27
 80004ca:	4640      	mov	r0, r8
 80004cc:	f7ff ff08 	bl	80002e0 <CODEC_IO_Write>
 80004d0:	4405      	add	r5, r0
 80004d2:	e7a9      	b.n	8000428 <wm8994_SetVolume+0x38>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80004d4:	24ef      	movs	r4, #239	; 0xef
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80004d6:	b2f6      	uxtb	r6, r6
 80004d8:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80004dc:	4622      	mov	r2, r4
 80004de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e2:	4630      	mov	r0, r6
 80004e4:	f7ff fefc 	bl	80002e0 <CODEC_IO_Write>
 80004e8:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80004ea:	4622      	mov	r2, r4
 80004ec:	f240 4101 	movw	r1, #1025	; 0x401
 80004f0:	4630      	mov	r0, r6
 80004f2:	f7ff fef5 	bl	80002e0 <CODEC_IO_Write>
 80004f6:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80004f8:	4622      	mov	r2, r4
 80004fa:	f240 4104 	movw	r1, #1028	; 0x404
 80004fe:	4630      	mov	r0, r6
 8000500:	f7ff feee 	bl	80002e0 <CODEC_IO_Write>
 8000504:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8000506:	4622      	mov	r2, r4
 8000508:	f240 4105 	movw	r1, #1029	; 0x405
 800050c:	4630      	mov	r0, r6
 800050e:	f7ff fee7 	bl	80002e0 <CODEC_IO_Write>
 8000512:	4405      	add	r5, r0
}
 8000514:	4628      	mov	r0, r5
 8000516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800051a:	bf00      	nop
 800051c:	51eb851f 	.word	0x51eb851f
 8000520:	200001f8 	.word	0x200001f8

08000524 <wm8994_Init>:
{
 8000524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000528:	4680      	mov	r8, r0
 800052a:	4691      	mov	r9, r2
 800052c:	469a      	mov	sl, r3
  uint16_t output_device = OutputInputDevice & 0xFF;
 800052e:	b2cf      	uxtb	r7, r1
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8000530:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
  AUDIO_IO_Init();
 8000534:	f000 fd86 	bl	8001044 <AUDIO_IO_Init>
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8000538:	fa5f f488 	uxtb.w	r4, r8
 800053c:	2203      	movs	r2, #3
 800053e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000542:	4620      	mov	r0, r4
 8000544:	f7ff fecc 	bl	80002e0 <CODEC_IO_Write>
 8000548:	4606      	mov	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 800054a:	2200      	movs	r2, #0
 800054c:	f640 0117 	movw	r1, #2071	; 0x817
 8000550:	4620      	mov	r0, r4
 8000552:	f7ff fec5 	bl	80002e0 <CODEC_IO_Write>
 8000556:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800055e:	4620      	mov	r0, r4
 8000560:	f7ff febe 	bl	80002e0 <CODEC_IO_Write>
 8000564:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8000566:	226c      	movs	r2, #108	; 0x6c
 8000568:	2139      	movs	r1, #57	; 0x39
 800056a:	4620      	mov	r0, r4
 800056c:	f7ff feb8 	bl	80002e0 <CODEC_IO_Write>
 8000570:	4406      	add	r6, r0
  if (input_device > 0)
 8000572:	b3c5      	cbz	r5, 80005e6 <wm8994_Init+0xc2>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8000574:	2213      	movs	r2, #19
 8000576:	2101      	movs	r1, #1
 8000578:	4620      	mov	r0, r4
 800057a:	f7ff feb1 	bl	80002e0 <CODEC_IO_Write>
 800057e:	4406      	add	r6, r0
  AUDIO_IO_Delay(50);
 8000580:	2032      	movs	r0, #50	; 0x32
 8000582:	f000 fd9d 	bl	80010c0 <AUDIO_IO_Delay>
  if (output_device > 0)
 8000586:	2f00      	cmp	r7, #0
 8000588:	f000 80c7 	beq.w	800071a <wm8994_Init+0x1f6>
    outputEnabled = 1;
 800058c:	4be6      	ldr	r3, [pc, #920]	; (8000928 <wm8994_Init+0x404>)
 800058e:	2201      	movs	r2, #1
 8000590:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8000592:	2f02      	cmp	r7, #2
 8000594:	d052      	beq.n	800063c <wm8994_Init+0x118>
 8000596:	2f03      	cmp	r7, #3
 8000598:	d074      	beq.n	8000684 <wm8994_Init+0x160>
 800059a:	4297      	cmp	r7, r2
 800059c:	d02a      	beq.n	80005f4 <wm8994_Init+0xd0>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800059e:	f240 3203 	movw	r2, #771	; 0x303
 80005a2:	2105      	movs	r1, #5
 80005a4:	4620      	mov	r0, r4
 80005a6:	f7ff fe9b 	bl	80002e0 <CODEC_IO_Write>
 80005aa:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f240 6101 	movw	r1, #1537	; 0x601
 80005b2:	4620      	mov	r0, r4
 80005b4:	f7ff fe94 	bl	80002e0 <CODEC_IO_Write>
 80005b8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80005ba:	2201      	movs	r2, #1
 80005bc:	f240 6102 	movw	r1, #1538	; 0x602
 80005c0:	4620      	mov	r0, r4
 80005c2:	f7ff fe8d 	bl	80002e0 <CODEC_IO_Write>
 80005c6:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f240 6104 	movw	r1, #1540	; 0x604
 80005ce:	4620      	mov	r0, r4
 80005d0:	f7ff fe86 	bl	80002e0 <CODEC_IO_Write>
 80005d4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f240 6105 	movw	r1, #1541	; 0x605
 80005dc:	4620      	mov	r0, r4
 80005de:	f7ff fe7f 	bl	80002e0 <CODEC_IO_Write>
 80005e2:	4406      	add	r6, r0
      break;
 80005e4:	e09c      	b.n	8000720 <wm8994_Init+0x1fc>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80005e6:	2203      	movs	r2, #3
 80005e8:	2101      	movs	r1, #1
 80005ea:	4620      	mov	r0, r4
 80005ec:	f7ff fe78 	bl	80002e0 <CODEC_IO_Write>
 80005f0:	4406      	add	r6, r0
 80005f2:	e7c5      	b.n	8000580 <wm8994_Init+0x5c>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80005f4:	f640 420c 	movw	r2, #3084	; 0xc0c
 80005f8:	2105      	movs	r1, #5
 80005fa:	4620      	mov	r0, r4
 80005fc:	f7ff fe70 	bl	80002e0 <CODEC_IO_Write>
 8000600:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8000602:	2200      	movs	r2, #0
 8000604:	f240 6101 	movw	r1, #1537	; 0x601
 8000608:	4620      	mov	r0, r4
 800060a:	f7ff fe69 	bl	80002e0 <CODEC_IO_Write>
 800060e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8000610:	2200      	movs	r2, #0
 8000612:	f240 6102 	movw	r1, #1538	; 0x602
 8000616:	4620      	mov	r0, r4
 8000618:	f7ff fe62 	bl	80002e0 <CODEC_IO_Write>
 800061c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800061e:	2202      	movs	r2, #2
 8000620:	f240 6104 	movw	r1, #1540	; 0x604
 8000624:	4620      	mov	r0, r4
 8000626:	f7ff fe5b 	bl	80002e0 <CODEC_IO_Write>
 800062a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800062c:	2202      	movs	r2, #2
 800062e:	f240 6105 	movw	r1, #1541	; 0x605
 8000632:	4620      	mov	r0, r4
 8000634:	f7ff fe54 	bl	80002e0 <CODEC_IO_Write>
 8000638:	4406      	add	r6, r0
      break;
 800063a:	e071      	b.n	8000720 <wm8994_Init+0x1fc>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800063c:	f240 3203 	movw	r2, #771	; 0x303
 8000640:	2105      	movs	r1, #5
 8000642:	4620      	mov	r0, r4
 8000644:	f7ff fe4c 	bl	80002e0 <CODEC_IO_Write>
 8000648:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800064a:	2201      	movs	r2, #1
 800064c:	f240 6101 	movw	r1, #1537	; 0x601
 8000650:	4620      	mov	r0, r4
 8000652:	f7ff fe45 	bl	80002e0 <CODEC_IO_Write>
 8000656:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000658:	2201      	movs	r2, #1
 800065a:	f240 6102 	movw	r1, #1538	; 0x602
 800065e:	4620      	mov	r0, r4
 8000660:	f7ff fe3e 	bl	80002e0 <CODEC_IO_Write>
 8000664:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000666:	2200      	movs	r2, #0
 8000668:	f240 6104 	movw	r1, #1540	; 0x604
 800066c:	4620      	mov	r0, r4
 800066e:	f7ff fe37 	bl	80002e0 <CODEC_IO_Write>
 8000672:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000674:	2200      	movs	r2, #0
 8000676:	f240 6105 	movw	r1, #1541	; 0x605
 800067a:	4620      	mov	r0, r4
 800067c:	f7ff fe30 	bl	80002e0 <CODEC_IO_Write>
 8000680:	4406      	add	r6, r0
      break;
 8000682:	e04d      	b.n	8000720 <wm8994_Init+0x1fc>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000684:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000688:	d023      	beq.n	80006d2 <wm8994_Init+0x1ae>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800068a:	f640 720f 	movw	r2, #3855	; 0xf0f
 800068e:	2105      	movs	r1, #5
 8000690:	4620      	mov	r0, r4
 8000692:	f7ff fe25 	bl	80002e0 <CODEC_IO_Write>
 8000696:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000698:	2201      	movs	r2, #1
 800069a:	f240 6101 	movw	r1, #1537	; 0x601
 800069e:	4620      	mov	r0, r4
 80006a0:	f7ff fe1e 	bl	80002e0 <CODEC_IO_Write>
 80006a4:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80006a6:	2201      	movs	r2, #1
 80006a8:	f240 6102 	movw	r1, #1538	; 0x602
 80006ac:	4620      	mov	r0, r4
 80006ae:	f7ff fe17 	bl	80002e0 <CODEC_IO_Write>
 80006b2:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80006b4:	2202      	movs	r2, #2
 80006b6:	f240 6104 	movw	r1, #1540	; 0x604
 80006ba:	4620      	mov	r0, r4
 80006bc:	f7ff fe10 	bl	80002e0 <CODEC_IO_Write>
 80006c0:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80006c2:	2202      	movs	r2, #2
 80006c4:	f240 6105 	movw	r1, #1541	; 0x605
 80006c8:	4620      	mov	r0, r4
 80006ca:	f7ff fe09 	bl	80002e0 <CODEC_IO_Write>
 80006ce:	4406      	add	r6, r0
 80006d0:	e026      	b.n	8000720 <wm8994_Init+0x1fc>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80006d2:	f640 720f 	movw	r2, #3855	; 0xf0f
 80006d6:	2105      	movs	r1, #5
 80006d8:	4620      	mov	r0, r4
 80006da:	f7ff fe01 	bl	80002e0 <CODEC_IO_Write>
 80006de:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80006e0:	2203      	movs	r2, #3
 80006e2:	f240 6101 	movw	r1, #1537	; 0x601
 80006e6:	4620      	mov	r0, r4
 80006e8:	f7ff fdfa 	bl	80002e0 <CODEC_IO_Write>
 80006ec:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80006ee:	2203      	movs	r2, #3
 80006f0:	f240 6102 	movw	r1, #1538	; 0x602
 80006f4:	4620      	mov	r0, r4
 80006f6:	f7ff fdf3 	bl	80002e0 <CODEC_IO_Write>
 80006fa:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80006fc:	2203      	movs	r2, #3
 80006fe:	f240 6104 	movw	r1, #1540	; 0x604
 8000702:	4620      	mov	r0, r4
 8000704:	f7ff fdec 	bl	80002e0 <CODEC_IO_Write>
 8000708:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 800070a:	2203      	movs	r2, #3
 800070c:	f240 6105 	movw	r1, #1541	; 0x605
 8000710:	4620      	mov	r0, r4
 8000712:	f7ff fde5 	bl	80002e0 <CODEC_IO_Write>
 8000716:	4406      	add	r6, r0
 8000718:	e002      	b.n	8000720 <wm8994_Init+0x1fc>
    outputEnabled = 0;
 800071a:	4b83      	ldr	r3, [pc, #524]	; (8000928 <wm8994_Init+0x404>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
  if (input_device > 0)
 8000720:	2d00      	cmp	r5, #0
 8000722:	f000 80e8 	beq.w	80008f6 <wm8994_Init+0x3d2>
    inputEnabled = 1;
 8000726:	4b80      	ldr	r3, [pc, #512]	; (8000928 <wm8994_Init+0x404>)
 8000728:	2201      	movs	r2, #1
 800072a:	605a      	str	r2, [r3, #4]
    switch (input_device)
 800072c:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8000730:	d077      	beq.n	8000822 <wm8994_Init+0x2fe>
 8000732:	d832      	bhi.n	800079a <wm8994_Init+0x276>
 8000734:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000738:	f000 80b0 	beq.w	800089c <wm8994_Init+0x378>
 800073c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8000740:	f040 80d7 	bne.w	80008f2 <wm8994_Init+0x3ce>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8000744:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8000748:	2104      	movs	r1, #4
 800074a:	4620      	mov	r0, r4
 800074c:	f7ff fdc8 	bl	80002e0 <CODEC_IO_Write>
 8000750:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8000752:	22db      	movs	r2, #219	; 0xdb
 8000754:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000758:	4620      	mov	r0, r4
 800075a:	f7ff fdc1 	bl	80002e0 <CODEC_IO_Write>
 800075e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8000760:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000764:	2102      	movs	r1, #2
 8000766:	4620      	mov	r0, r4
 8000768:	f7ff fdba 	bl	80002e0 <CODEC_IO_Write>
 800076c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800076e:	2202      	movs	r2, #2
 8000770:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000774:	4620      	mov	r0, r4
 8000776:	f7ff fdb3 	bl	80002e0 <CODEC_IO_Write>
 800077a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800077c:	2202      	movs	r2, #2
 800077e:	f240 6109 	movw	r1, #1545	; 0x609
 8000782:	4620      	mov	r0, r4
 8000784:	f7ff fdac 	bl	80002e0 <CODEC_IO_Write>
 8000788:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800078a:	220e      	movs	r2, #14
 800078c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000790:	4620      	mov	r0, r4
 8000792:	f7ff fda5 	bl	80002e0 <CODEC_IO_Write>
 8000796:	4406      	add	r6, r0
      break;
 8000798:	e0b0      	b.n	80008fc <wm8994_Init+0x3d8>
    switch (input_device)
 800079a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800079e:	f040 80a8 	bne.w	80008f2 <wm8994_Init+0x3ce>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80007a2:	f640 723c 	movw	r2, #3900	; 0xf3c
 80007a6:	2104      	movs	r1, #4
 80007a8:	4620      	mov	r0, r4
 80007aa:	f7ff fd99 	bl	80002e0 <CODEC_IO_Write>
 80007ae:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80007b0:	22db      	movs	r2, #219	; 0xdb
 80007b2:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80007b6:	4620      	mov	r0, r4
 80007b8:	f7ff fd92 	bl	80002e0 <CODEC_IO_Write>
 80007bc:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80007be:	22db      	movs	r2, #219	; 0xdb
 80007c0:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80007c4:	4620      	mov	r0, r4
 80007c6:	f7ff fd8b 	bl	80002e0 <CODEC_IO_Write>
 80007ca:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80007cc:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80007d0:	2102      	movs	r1, #2
 80007d2:	4620      	mov	r0, r4
 80007d4:	f7ff fd84 	bl	80002e0 <CODEC_IO_Write>
 80007d8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80007da:	2202      	movs	r2, #2
 80007dc:	f240 6106 	movw	r1, #1542	; 0x606
 80007e0:	4620      	mov	r0, r4
 80007e2:	f7ff fd7d 	bl	80002e0 <CODEC_IO_Write>
 80007e6:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80007e8:	2202      	movs	r2, #2
 80007ea:	f240 6107 	movw	r1, #1543	; 0x607
 80007ee:	4620      	mov	r0, r4
 80007f0:	f7ff fd76 	bl	80002e0 <CODEC_IO_Write>
 80007f4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80007f6:	2202      	movs	r2, #2
 80007f8:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80007fc:	4620      	mov	r0, r4
 80007fe:	f7ff fd6f 	bl	80002e0 <CODEC_IO_Write>
 8000802:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8000804:	2202      	movs	r2, #2
 8000806:	f240 6109 	movw	r1, #1545	; 0x609
 800080a:	4620      	mov	r0, r4
 800080c:	f7ff fd68 	bl	80002e0 <CODEC_IO_Write>
 8000810:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8000812:	220d      	movs	r2, #13
 8000814:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000818:	4620      	mov	r0, r4
 800081a:	f7ff fd61 	bl	80002e0 <CODEC_IO_Write>
 800081e:	4406      	add	r6, r0
      break;    
 8000820:	e06c      	b.n	80008fc <wm8994_Init+0x3d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8000822:	2211      	movs	r2, #17
 8000824:	2128      	movs	r1, #40	; 0x28
 8000826:	4620      	mov	r0, r4
 8000828:	f7ff fd5a 	bl	80002e0 <CODEC_IO_Write>
 800082c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 800082e:	2220      	movs	r2, #32
 8000830:	2129      	movs	r1, #41	; 0x29
 8000832:	4620      	mov	r0, r4
 8000834:	f7ff fd54 	bl	80002e0 <CODEC_IO_Write>
 8000838:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 800083a:	2220      	movs	r2, #32
 800083c:	212a      	movs	r1, #42	; 0x2a
 800083e:	4620      	mov	r0, r4
 8000840:	f7ff fd4e 	bl	80002e0 <CODEC_IO_Write>
 8000844:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8000846:	f240 3203 	movw	r2, #771	; 0x303
 800084a:	2104      	movs	r1, #4
 800084c:	4620      	mov	r0, r4
 800084e:	f7ff fd47 	bl	80002e0 <CODEC_IO_Write>
 8000852:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8000854:	22db      	movs	r2, #219	; 0xdb
 8000856:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800085a:	4620      	mov	r0, r4
 800085c:	f7ff fd40 	bl	80002e0 <CODEC_IO_Write>
 8000860:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8000862:	f246 3250 	movw	r2, #25424	; 0x6350
 8000866:	2102      	movs	r1, #2
 8000868:	4620      	mov	r0, r4
 800086a:	f7ff fd39 	bl	80002e0 <CODEC_IO_Write>
 800086e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8000870:	2202      	movs	r2, #2
 8000872:	f240 6106 	movw	r1, #1542	; 0x606
 8000876:	4620      	mov	r0, r4
 8000878:	f7ff fd32 	bl	80002e0 <CODEC_IO_Write>
 800087c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800087e:	2202      	movs	r2, #2
 8000880:	f240 6107 	movw	r1, #1543	; 0x607
 8000884:	4620      	mov	r0, r4
 8000886:	f7ff fd2b 	bl	80002e0 <CODEC_IO_Write>
 800088a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800088c:	220d      	movs	r2, #13
 800088e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000892:	4620      	mov	r0, r4
 8000894:	f7ff fd24 	bl	80002e0 <CODEC_IO_Write>
 8000898:	4406      	add	r6, r0
      break;
 800089a:	e02f      	b.n	80008fc <wm8994_Init+0x3d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 800089c:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80008a0:	2104      	movs	r1, #4
 80008a2:	4620      	mov	r0, r4
 80008a4:	f7ff fd1c 	bl	80002e0 <CODEC_IO_Write>
 80008a8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80008aa:	22db      	movs	r2, #219	; 0xdb
 80008ac:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80008b0:	4620      	mov	r0, r4
 80008b2:	f7ff fd15 	bl	80002e0 <CODEC_IO_Write>
 80008b6:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80008b8:	f246 3250 	movw	r2, #25424	; 0x6350
 80008bc:	2102      	movs	r1, #2
 80008be:	4620      	mov	r0, r4
 80008c0:	f7ff fd0e 	bl	80002e0 <CODEC_IO_Write>
 80008c4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80008c6:	2202      	movs	r2, #2
 80008c8:	f240 6106 	movw	r1, #1542	; 0x606
 80008cc:	4620      	mov	r0, r4
 80008ce:	f7ff fd07 	bl	80002e0 <CODEC_IO_Write>
 80008d2:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80008d4:	2202      	movs	r2, #2
 80008d6:	f240 6107 	movw	r1, #1543	; 0x607
 80008da:	4620      	mov	r0, r4
 80008dc:	f7ff fd00 	bl	80002e0 <CODEC_IO_Write>
 80008e0:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80008e2:	220d      	movs	r2, #13
 80008e4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80008e8:	4620      	mov	r0, r4
 80008ea:	f7ff fcf9 	bl	80002e0 <CODEC_IO_Write>
 80008ee:	4406      	add	r6, r0
      break; 
 80008f0:	e004      	b.n	80008fc <wm8994_Init+0x3d8>
      counter++;
 80008f2:	3601      	adds	r6, #1
      break;
 80008f4:	e002      	b.n	80008fc <wm8994_Init+0x3d8>
    inputEnabled = 0;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <wm8994_Init+0x404>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
  switch (AudioFreq)
 80008fc:	f5ba 4ffa 	cmp.w	sl, #32000	; 0x7d00
 8000900:	f000 8089 	beq.w	8000a16 <wm8994_Init+0x4f2>
 8000904:	d821      	bhi.n	800094a <wm8994_Init+0x426>
 8000906:	f5ba 5f7a 	cmp.w	sl, #16000	; 0x3e80
 800090a:	d07c      	beq.n	8000a06 <wm8994_Init+0x4e2>
 800090c:	d90e      	bls.n	800092c <wm8994_Init+0x408>
 800090e:	f245 6322 	movw	r3, #22050	; 0x5622
 8000912:	459a      	cmp	sl, r3
 8000914:	f040 808f 	bne.w	8000a36 <wm8994_Init+0x512>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8000918:	2243      	movs	r2, #67	; 0x43
 800091a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800091e:	4620      	mov	r0, r4
 8000920:	f7ff fcde 	bl	80002e0 <CODEC_IO_Write>
 8000924:	4406      	add	r6, r0
    break;
 8000926:	e032      	b.n	800098e <wm8994_Init+0x46a>
 8000928:	200001f8 	.word	0x200001f8
  switch (AudioFreq)
 800092c:	f5ba 5ffa 	cmp.w	sl, #8000	; 0x1f40
 8000930:	d026      	beq.n	8000980 <wm8994_Init+0x45c>
 8000932:	f642 3311 	movw	r3, #11025	; 0x2b11
 8000936:	459a      	cmp	sl, r3
 8000938:	d17d      	bne.n	8000a36 <wm8994_Init+0x512>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800093a:	2213      	movs	r2, #19
 800093c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000940:	4620      	mov	r0, r4
 8000942:	f7ff fccd 	bl	80002e0 <CODEC_IO_Write>
 8000946:	4406      	add	r6, r0
    break;
 8000948:	e021      	b.n	800098e <wm8994_Init+0x46a>
  switch (AudioFreq)
 800094a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800094e:	459a      	cmp	sl, r3
 8000950:	d069      	beq.n	8000a26 <wm8994_Init+0x502>
 8000952:	4bb5      	ldr	r3, [pc, #724]	; (8000c28 <wm8994_Init+0x704>)
 8000954:	459a      	cmp	sl, r3
 8000956:	d107      	bne.n	8000968 <wm8994_Init+0x444>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8000958:	22a3      	movs	r2, #163	; 0xa3
 800095a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800095e:	4620      	mov	r0, r4
 8000960:	f7ff fcbe 	bl	80002e0 <CODEC_IO_Write>
 8000964:	4406      	add	r6, r0
    break;
 8000966:	e012      	b.n	800098e <wm8994_Init+0x46a>
  switch (AudioFreq)
 8000968:	f64a 4344 	movw	r3, #44100	; 0xac44
 800096c:	459a      	cmp	sl, r3
 800096e:	d162      	bne.n	8000a36 <wm8994_Init+0x512>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8000970:	2273      	movs	r2, #115	; 0x73
 8000972:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000976:	4620      	mov	r0, r4
 8000978:	f7ff fcb2 	bl	80002e0 <CODEC_IO_Write>
 800097c:	4406      	add	r6, r0
    break; 
 800097e:	e006      	b.n	800098e <wm8994_Init+0x46a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8000980:	2203      	movs	r2, #3
 8000982:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000986:	4620      	mov	r0, r4
 8000988:	f7ff fcaa 	bl	80002e0 <CODEC_IO_Write>
 800098c:	4406      	add	r6, r0
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800098e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000992:	d058      	beq.n	8000a46 <wm8994_Init+0x522>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8000994:	f244 0210 	movw	r2, #16400	; 0x4010
 8000998:	f44f 7140 	mov.w	r1, #768	; 0x300
 800099c:	4620      	mov	r0, r4
 800099e:	f7ff fc9f 	bl	80002e0 <CODEC_IO_Write>
 80009a2:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f240 3102 	movw	r1, #770	; 0x302
 80009aa:	4620      	mov	r0, r4
 80009ac:	f7ff fc98 	bl	80002e0 <CODEC_IO_Write>
 80009b0:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80009b2:	220a      	movs	r2, #10
 80009b4:	f44f 7102 	mov.w	r1, #520	; 0x208
 80009b8:	4620      	mov	r0, r4
 80009ba:	f7ff fc91 	bl	80002e0 <CODEC_IO_Write>
 80009be:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c6:	4620      	mov	r0, r4
 80009c8:	f7ff fc8a 	bl	80002e0 <CODEC_IO_Write>
 80009cc:	4406      	add	r6, r0
  if (output_device > 0)  /* Audio output selected */
 80009ce:	2f00      	cmp	r7, #0
 80009d0:	d142      	bne.n	8000a58 <wm8994_Init+0x534>
  if (input_device > 0) /* Audio input selected */
 80009d2:	b1ad      	cbz	r5, 8000a00 <wm8994_Init+0x4dc>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80009d4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80009d8:	bf18      	it	ne
 80009da:	f5b5 7f80 	cmpne.w	r5, #256	; 0x100
 80009de:	f000 80d7 	beq.w	8000b90 <wm8994_Init+0x66c>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80009e2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80009e6:	f000 80ea 	beq.w	8000bbe <wm8994_Init+0x69a>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80009ea:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80009ee:	bf18      	it	ne
 80009f0:	f5b5 7f40 	cmpne.w	r5, #768	; 0x300
 80009f4:	f000 8102 	beq.w	8000bfc <wm8994_Init+0x6d8>
    wm8994_SetVolume(DeviceAddr, Volume);
 80009f8:	4649      	mov	r1, r9
 80009fa:	4640      	mov	r0, r8
 80009fc:	f7ff fcf8 	bl	80003f0 <wm8994_SetVolume>
}
 8000a00:	4630      	mov	r0, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8000a06:	2233      	movs	r2, #51	; 0x33
 8000a08:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a0c:	4620      	mov	r0, r4
 8000a0e:	f7ff fc67 	bl	80002e0 <CODEC_IO_Write>
 8000a12:	4406      	add	r6, r0
    break;
 8000a14:	e7bb      	b.n	800098e <wm8994_Init+0x46a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8000a16:	2263      	movs	r2, #99	; 0x63
 8000a18:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	f7ff fc5f 	bl	80002e0 <CODEC_IO_Write>
 8000a22:	4406      	add	r6, r0
    break;
 8000a24:	e7b3      	b.n	800098e <wm8994_Init+0x46a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000a26:	2283      	movs	r2, #131	; 0x83
 8000a28:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a2c:	4620      	mov	r0, r4
 8000a2e:	f7ff fc57 	bl	80002e0 <CODEC_IO_Write>
 8000a32:	4406      	add	r6, r0
    break;
 8000a34:	e7ab      	b.n	800098e <wm8994_Init+0x46a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000a36:	2283      	movs	r2, #131	; 0x83
 8000a38:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	f7ff fc4f 	bl	80002e0 <CODEC_IO_Write>
 8000a42:	4406      	add	r6, r0
    break; 
 8000a44:	e7a3      	b.n	800098e <wm8994_Init+0x46a>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8000a46:	f244 0218 	movw	r2, #16408	; 0x4018
 8000a4a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000a4e:	4620      	mov	r0, r4
 8000a50:	f7ff fc46 	bl	80002e0 <CODEC_IO_Write>
 8000a54:	4406      	add	r6, r0
 8000a56:	e7a5      	b.n	80009a4 <wm8994_Init+0x480>
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8000a58:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a5c:	2103      	movs	r1, #3
 8000a5e:	4620      	mov	r0, r4
 8000a60:	f7ff fc3e 	bl	80002e0 <CODEC_IO_Write>
 8000a64:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2122      	movs	r1, #34	; 0x22
 8000a6a:	4620      	mov	r0, r4
 8000a6c:	f7ff fc38 	bl	80002e0 <CODEC_IO_Write>
 8000a70:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2123      	movs	r1, #35	; 0x23
 8000a76:	4620      	mov	r0, r4
 8000a78:	f7ff fc32 	bl	80002e0 <CODEC_IO_Write>
 8000a7c:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8000a7e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a82:	2136      	movs	r1, #54	; 0x36
 8000a84:	4620      	mov	r0, r4
 8000a86:	f7ff fc2b 	bl	80002e0 <CODEC_IO_Write>
 8000a8a:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8000a8c:	f243 0203 	movw	r2, #12291	; 0x3003
 8000a90:	2101      	movs	r1, #1
 8000a92:	4620      	mov	r0, r4
 8000a94:	f7ff fc24 	bl	80002e0 <CODEC_IO_Write>
 8000a98:	4406      	add	r6, r0
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000a9a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000a9e:	d06f      	beq.n	8000b80 <wm8994_Init+0x65c>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8000aa0:	2205      	movs	r2, #5
 8000aa2:	2151      	movs	r1, #81	; 0x51
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f7ff fc1b 	bl	80002e0 <CODEC_IO_Write>
 8000aaa:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000aac:	f243 3203 	movw	r2, #13059	; 0x3303
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	f7ff fc14 	bl	80002e0 <CODEC_IO_Write>
 8000ab8:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8000aba:	2222      	movs	r2, #34	; 0x22
 8000abc:	2160      	movs	r1, #96	; 0x60
 8000abe:	4620      	mov	r0, r4
 8000ac0:	f7ff fc0e 	bl	80002e0 <CODEC_IO_Write>
 8000ac4:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8000ac6:	f649 7225 	movw	r2, #40741	; 0x9f25
 8000aca:	214c      	movs	r1, #76	; 0x4c
 8000acc:	4620      	mov	r0, r4
 8000ace:	f7ff fc07 	bl	80002e0 <CODEC_IO_Write>
 8000ad2:	4406      	add	r6, r0
    AUDIO_IO_Delay(15);
 8000ad4:	200f      	movs	r0, #15
 8000ad6:	f000 faf3 	bl	80010c0 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8000ada:	2201      	movs	r2, #1
 8000adc:	212d      	movs	r1, #45	; 0x2d
 8000ade:	4620      	mov	r0, r4
 8000ae0:	f7ff fbfe 	bl	80002e0 <CODEC_IO_Write>
 8000ae4:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	212e      	movs	r1, #46	; 0x2e
 8000aea:	4620      	mov	r0, r4
 8000aec:	f7ff fbf8 	bl	80002e0 <CODEC_IO_Write>
 8000af0:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8000af2:	f44f 724c 	mov.w	r2, #816	; 0x330
 8000af6:	2103      	movs	r1, #3
 8000af8:	4620      	mov	r0, r4
 8000afa:	f7ff fbf1 	bl	80002e0 <CODEC_IO_Write>
 8000afe:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8000b00:	2233      	movs	r2, #51	; 0x33
 8000b02:	2154      	movs	r1, #84	; 0x54
 8000b04:	4620      	mov	r0, r4
 8000b06:	f7ff fbeb 	bl	80002e0 <CODEC_IO_Write>
 8000b0a:	4406      	add	r6, r0
    AUDIO_IO_Delay(250);
 8000b0c:	20fa      	movs	r0, #250	; 0xfa
 8000b0e:	f000 fad7 	bl	80010c0 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8000b12:	22ee      	movs	r2, #238	; 0xee
 8000b14:	2160      	movs	r1, #96	; 0x60
 8000b16:	4620      	mov	r0, r4
 8000b18:	f7ff fbe2 	bl	80002e0 <CODEC_IO_Write>
 8000b1c:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8000b1e:	22c0      	movs	r2, #192	; 0xc0
 8000b20:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8000b24:	4620      	mov	r0, r4
 8000b26:	f7ff fbdb 	bl	80002e0 <CODEC_IO_Write>
 8000b2a:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8000b2c:	22c0      	movs	r2, #192	; 0xc0
 8000b2e:	f240 6111 	movw	r1, #1553	; 0x611
 8000b32:	4620      	mov	r0, r4
 8000b34:	f7ff fbd4 	bl	80002e0 <CODEC_IO_Write>
 8000b38:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000b40:	4620      	mov	r0, r4
 8000b42:	f7ff fbcd 	bl	80002e0 <CODEC_IO_Write>
 8000b46:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8000b48:	22c0      	movs	r2, #192	; 0xc0
 8000b4a:	f240 6112 	movw	r1, #1554	; 0x612
 8000b4e:	4620      	mov	r0, r4
 8000b50:	f7ff fbc6 	bl	80002e0 <CODEC_IO_Write>
 8000b54:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8000b56:	22c0      	movs	r2, #192	; 0xc0
 8000b58:	f240 6113 	movw	r1, #1555	; 0x613
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	f7ff fbbf 	bl	80002e0 <CODEC_IO_Write>
 8000b62:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f240 4122 	movw	r1, #1058	; 0x422
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	f7ff fbb8 	bl	80002e0 <CODEC_IO_Write>
 8000b70:	4406      	add	r6, r0
    wm8994_SetVolume(DeviceAddr, Volume);
 8000b72:	4649      	mov	r1, r9
 8000b74:	4640      	mov	r0, r8
 8000b76:	f7ff fc3b 	bl	80003f0 <wm8994_SetVolume>
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8000b7a:	f243 3703 	movw	r7, #13059	; 0x3303
 8000b7e:	e728      	b.n	80009d2 <wm8994_Init+0x4ae>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8000b80:	f240 2205 	movw	r2, #517	; 0x205
 8000b84:	2151      	movs	r1, #81	; 0x51
 8000b86:	4620      	mov	r0, r4
 8000b88:	f7ff fbaa 	bl	80002e0 <CODEC_IO_Write>
 8000b8c:	4406      	add	r6, r0
 8000b8e:	e78d      	b.n	8000aac <wm8994_Init+0x588>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000b90:	f047 0213 	orr.w	r2, r7, #19
 8000b94:	2101      	movs	r1, #1
 8000b96:	4620      	mov	r0, r4
 8000b98:	f7ff fba2 	bl	80002e0 <CODEC_IO_Write>
 8000b9c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000ba4:	4620      	mov	r0, r4
 8000ba6:	f7ff fb9b 	bl	80002e0 <CODEC_IO_Write>
 8000baa:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8000bac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000bb0:	f240 4111 	movw	r1, #1041	; 0x411
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f7ff fb93 	bl	80002e0 <CODEC_IO_Write>
 8000bba:	4406      	add	r6, r0
 8000bbc:	e71c      	b.n	80009f8 <wm8994_Init+0x4d4>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000bbe:	f047 0213 	orr.w	r2, r7, #19
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f7ff fb8b 	bl	80002e0 <CODEC_IO_Write>
 8000bca:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8000bcc:	2202      	movs	r2, #2
 8000bce:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	f7ff fb84 	bl	80002e0 <CODEC_IO_Write>
 8000bd8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8000bda:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000bde:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000be2:	4620      	mov	r0, r4
 8000be4:	f7ff fb7c 	bl	80002e0 <CODEC_IO_Write>
 8000be8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8000bea:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000bee:	f240 4111 	movw	r1, #1041	; 0x411
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	f7ff fb74 	bl	80002e0 <CODEC_IO_Write>
 8000bf8:	4406      	add	r6, r0
 8000bfa:	e6fd      	b.n	80009f8 <wm8994_Init+0x4d4>
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8000bfc:	220b      	movs	r2, #11
 8000bfe:	2118      	movs	r1, #24
 8000c00:	4620      	mov	r0, r4
 8000c02:	f7ff fb6d 	bl	80002e0 <CODEC_IO_Write>
 8000c06:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8000c08:	220b      	movs	r2, #11
 8000c0a:	211a      	movs	r1, #26
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f7ff fb67 	bl	80002e0 <CODEC_IO_Write>
 8000c12:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8000c14:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000c18:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f7ff fb5f 	bl	80002e0 <CODEC_IO_Write>
 8000c22:	4406      	add	r6, r0
 8000c24:	e6e8      	b.n	80009f8 <wm8994_Init+0x4d4>
 8000c26:	bf00      	nop
 8000c28:	00017700 	.word	0x00017700

08000c2c <wm8994_SetOutputMode>:
{
 8000c2c:	b538      	push	{r3, r4, r5, lr}
  switch (Output) 
 8000c2e:	2902      	cmp	r1, #2
 8000c30:	d04d      	beq.n	8000cce <wm8994_SetOutputMode+0xa2>
 8000c32:	2903      	cmp	r1, #3
 8000c34:	d070      	beq.n	8000d18 <wm8994_SetOutputMode+0xec>
 8000c36:	2901      	cmp	r1, #1
 8000c38:	d024      	beq.n	8000c84 <wm8994_SetOutputMode+0x58>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000c3a:	b2c4      	uxtb	r4, r0
 8000c3c:	f240 3203 	movw	r2, #771	; 0x303
 8000c40:	2105      	movs	r1, #5
 8000c42:	4620      	mov	r0, r4
 8000c44:	f7ff fb4c 	bl	80002e0 <CODEC_IO_Write>
 8000c48:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f240 6101 	movw	r1, #1537	; 0x601
 8000c50:	4620      	mov	r0, r4
 8000c52:	f7ff fb45 	bl	80002e0 <CODEC_IO_Write>
 8000c56:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f240 6102 	movw	r1, #1538	; 0x602
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f7ff fb3e 	bl	80002e0 <CODEC_IO_Write>
 8000c64:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f240 6104 	movw	r1, #1540	; 0x604
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f7ff fb37 	bl	80002e0 <CODEC_IO_Write>
 8000c72:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f240 6105 	movw	r1, #1541	; 0x605
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	f7ff fb30 	bl	80002e0 <CODEC_IO_Write>
 8000c80:	4428      	add	r0, r5
  return counter;
 8000c82:	e023      	b.n	8000ccc <wm8994_SetOutputMode+0xa0>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8000c84:	b2c4      	uxtb	r4, r0
 8000c86:	f640 420c 	movw	r2, #3084	; 0xc0c
 8000c8a:	2105      	movs	r1, #5
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f7ff fb27 	bl	80002e0 <CODEC_IO_Write>
 8000c92:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f240 6101 	movw	r1, #1537	; 0x601
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f7ff fb20 	bl	80002e0 <CODEC_IO_Write>
 8000ca0:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f240 6102 	movw	r1, #1538	; 0x602
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f7ff fb19 	bl	80002e0 <CODEC_IO_Write>
 8000cae:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	f240 6104 	movw	r1, #1540	; 0x604
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	f7ff fb12 	bl	80002e0 <CODEC_IO_Write>
 8000cbc:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	f240 6105 	movw	r1, #1541	; 0x605
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f7ff fb0b 	bl	80002e0 <CODEC_IO_Write>
 8000cca:	4428      	add	r0, r5
}
 8000ccc:	bd38      	pop	{r3, r4, r5, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000cce:	b2c4      	uxtb	r4, r0
 8000cd0:	f240 3203 	movw	r2, #771	; 0x303
 8000cd4:	2105      	movs	r1, #5
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f7ff fb02 	bl	80002e0 <CODEC_IO_Write>
 8000cdc:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f240 6101 	movw	r1, #1537	; 0x601
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f7ff fafb 	bl	80002e0 <CODEC_IO_Write>
 8000cea:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f240 6102 	movw	r1, #1538	; 0x602
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	f7ff faf4 	bl	80002e0 <CODEC_IO_Write>
 8000cf8:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f240 6104 	movw	r1, #1540	; 0x604
 8000d00:	4620      	mov	r0, r4
 8000d02:	f7ff faed 	bl	80002e0 <CODEC_IO_Write>
 8000d06:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f240 6105 	movw	r1, #1541	; 0x605
 8000d0e:	4620      	mov	r0, r4
 8000d10:	f7ff fae6 	bl	80002e0 <CODEC_IO_Write>
 8000d14:	4428      	add	r0, r5
    break;
 8000d16:	e7d9      	b.n	8000ccc <wm8994_SetOutputMode+0xa0>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8000d18:	b2c4      	uxtb	r4, r0
 8000d1a:	f640 720f 	movw	r2, #3855	; 0xf0f
 8000d1e:	2105      	movs	r1, #5
 8000d20:	4620      	mov	r0, r4
 8000d22:	f7ff fadd 	bl	80002e0 <CODEC_IO_Write>
 8000d26:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f240 6101 	movw	r1, #1537	; 0x601
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f7ff fad6 	bl	80002e0 <CODEC_IO_Write>
 8000d34:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f240 6102 	movw	r1, #1538	; 0x602
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	f7ff facf 	bl	80002e0 <CODEC_IO_Write>
 8000d42:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000d44:	2202      	movs	r2, #2
 8000d46:	f240 6104 	movw	r1, #1540	; 0x604
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	f7ff fac8 	bl	80002e0 <CODEC_IO_Write>
 8000d50:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000d52:	2202      	movs	r2, #2
 8000d54:	f240 6105 	movw	r1, #1541	; 0x605
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f7ff fac1 	bl	80002e0 <CODEC_IO_Write>
 8000d5e:	4428      	add	r0, r5
    break;
 8000d60:	e7b4      	b.n	8000ccc <wm8994_SetOutputMode+0xa0>
	...

08000d64 <wm8994_SetFrequency>:
{
 8000d64:	b508      	push	{r3, lr}
  switch (AudioFreq)
 8000d66:	f245 6322 	movw	r3, #22050	; 0x5622
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	d03f      	beq.n	8000dee <wm8994_SetFrequency+0x8a>
 8000d6e:	d817      	bhi.n	8000da0 <wm8994_SetFrequency+0x3c>
 8000d70:	f642 3311 	movw	r3, #11025	; 0x2b11
 8000d74:	4299      	cmp	r1, r3
 8000d76:	d033      	beq.n	8000de0 <wm8994_SetFrequency+0x7c>
 8000d78:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 8000d7c:	d106      	bne.n	8000d8c <wm8994_SetFrequency+0x28>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8000d7e:	2233      	movs	r2, #51	; 0x33
 8000d80:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d84:	b2c0      	uxtb	r0, r0
 8000d86:	f7ff faab 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000d8a:	e008      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 8000d8c:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 8000d90:	d134      	bne.n	8000dfc <wm8994_SetFrequency+0x98>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8000d92:	2203      	movs	r2, #3
 8000d94:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d98:	b2c0      	uxtb	r0, r0
 8000d9a:	f7ff faa1 	bl	80002e0 <CODEC_IO_Write>
}
 8000d9e:	bd08      	pop	{r3, pc}
  switch (AudioFreq)
 8000da0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8000da4:	4299      	cmp	r1, r3
 8000da6:	d014      	beq.n	8000dd2 <wm8994_SetFrequency+0x6e>
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <wm8994_SetFrequency+0xa8>)
 8000daa:	4299      	cmp	r1, r3
 8000dac:	d106      	bne.n	8000dbc <wm8994_SetFrequency+0x58>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8000dae:	22a3      	movs	r2, #163	; 0xa3
 8000db0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000db4:	b2c0      	uxtb	r0, r0
 8000db6:	f7ff fa93 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000dba:	e7f0      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 8000dbc:	f64a 4344 	movw	r3, #44100	; 0xac44
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d11b      	bne.n	8000dfc <wm8994_SetFrequency+0x98>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8000dc4:	2273      	movs	r2, #115	; 0x73
 8000dc6:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000dca:	b2c0      	uxtb	r0, r0
 8000dcc:	f7ff fa88 	bl	80002e0 <CODEC_IO_Write>
    break; 
 8000dd0:	e7e5      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000dd2:	2283      	movs	r2, #131	; 0x83
 8000dd4:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000dd8:	b2c0      	uxtb	r0, r0
 8000dda:	f7ff fa81 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000dde:	e7de      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8000de0:	2213      	movs	r2, #19
 8000de2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000de6:	b2c0      	uxtb	r0, r0
 8000de8:	f7ff fa7a 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000dec:	e7d7      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8000dee:	2243      	movs	r2, #67	; 0x43
 8000df0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000df4:	b2c0      	uxtb	r0, r0
 8000df6:	f7ff fa73 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000dfa:	e7d0      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000dfc:	2283      	movs	r2, #131	; 0x83
 8000dfe:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000e02:	b2c0      	uxtb	r0, r0
 8000e04:	f7ff fa6c 	bl	80002e0 <CODEC_IO_Write>
  return counter;
 8000e08:	e7c9      	b.n	8000d9e <wm8994_SetFrequency+0x3a>
 8000e0a:	bf00      	nop
 8000e0c:	00017700 	.word	0x00017700

08000e10 <wm8994_Reset>:
{
 8000e10:	b508      	push	{r3, lr}
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8000e12:	2200      	movs	r2, #0
 8000e14:	4611      	mov	r1, r2
 8000e16:	b2c0      	uxtb	r0, r0
 8000e18:	f7ff fa62 	bl	80002e0 <CODEC_IO_Write>
  outputEnabled = 0;
 8000e1c:	4b02      	ldr	r3, [pc, #8]	; (8000e28 <wm8994_Reset+0x18>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8000e22:	605a      	str	r2, [r3, #4]
}
 8000e24:	bd08      	pop	{r3, pc}
 8000e26:	bf00      	nop
 8000e28:	200001f8 	.word	0x200001f8

08000e2c <wm8994_DeInit>:
{
 8000e2c:	b508      	push	{r3, lr}
  AUDIO_IO_DeInit();
 8000e2e:	f000 f911 	bl	8001054 <AUDIO_IO_DeInit>
}
 8000e32:	bd08      	pop	{r3, pc}

08000e34 <wm8994_ReadID>:
{
 8000e34:	b510      	push	{r4, lr}
 8000e36:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 8000e38:	f000 f904 	bl	8001044 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	b2e0      	uxtb	r0, r4
 8000e40:	f000 f922 	bl	8001088 <AUDIO_IO_Read>
}
 8000e44:	bd10      	pop	{r4, pc}
	...

08000e48 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000e48:	b570      	push	{r4, r5, r6, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e4c:	4b49      	ldr	r3, [pc, #292]	; (8000f74 <I2Cx_MspInit+0x12c>)
 8000e4e:	4283      	cmp	r3, r0
 8000e50:	d043      	beq.n	8000eda <I2Cx_MspInit+0x92>
  }
  else
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e52:	4c49      	ldr	r4, [pc, #292]	; (8000f78 <I2Cx_MspInit+0x130>)
 8000e54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	6323      	str	r3, [r4, #48]	; 0x30
 8000e5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	9303      	str	r3, [sp, #12]
 8000e64:	9b03      	ldr	r3, [sp, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e6a:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e6c:	2312      	movs	r3, #18
 8000e6e:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000e70:	2500      	movs	r5, #0
 8000e72:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000e74:	2302      	movs	r3, #2
 8000e76:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e7c:	4e3f      	ldr	r6, [pc, #252]	; (8000f7c <I2Cx_MspInit+0x134>)
 8000e7e:	a905      	add	r1, sp, #20
 8000e80:	4630      	mov	r0, r6
 8000e82:	f000 fe29 	bl	8001ad8 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000e86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e8a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e8c:	a905      	add	r1, sp, #20
 8000e8e:	4630      	mov	r0, r6
 8000e90:	f000 fe22 	bl	8001ad8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000e94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e9a:	6423      	str	r3, [r4, #64]	; 0x40
 8000e9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea2:	9304      	str	r3, [sp, #16]
 8000ea4:	9b04      	ldr	r3, [sp, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000ea6:	6a23      	ldr	r3, [r4, #32]
 8000ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eac:	6223      	str	r3, [r4, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000eae:	6a23      	ldr	r3, [r4, #32]
 8000eb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000eb4:	6223      	str	r3, [r4, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000eb6:	462a      	mov	r2, r5
 8000eb8:	210f      	movs	r1, #15
 8000eba:	201f      	movs	r0, #31
 8000ebc:	f000 fb20 	bl	8001500 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000ec0:	201f      	movs	r0, #31
 8000ec2:	f000 fb4f 	bl	8001564 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000ec6:	462a      	mov	r2, r5
 8000ec8:	210f      	movs	r1, #15
 8000eca:	2020      	movs	r0, #32
 8000ecc:	f000 fb18 	bl	8001500 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000ed0:	2020      	movs	r0, #32
 8000ed2:	f000 fb47 	bl	8001564 <HAL_NVIC_EnableIRQ>
  }
}
 8000ed6:	b00a      	add	sp, #40	; 0x28
 8000ed8:	bd70      	pop	{r4, r5, r6, pc}
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000eda:	4c27      	ldr	r4, [pc, #156]	; (8000f78 <I2Cx_MspInit+0x130>)
 8000edc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ede:	f043 0308 	orr.w	r3, r3, #8
 8000ee2:	6323      	str	r3, [r4, #48]	; 0x30
 8000ee4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	9b00      	ldr	r3, [sp, #0]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000eee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	6323      	str	r3, [r4, #48]	; 0x30
 8000ef6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f04:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000f06:	2312      	movs	r3, #18
 8000f08:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000f0a:	2500      	movs	r5, #0
 8000f0c:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000f12:	2304      	movs	r3, #4
 8000f14:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000f16:	a905      	add	r1, sp, #20
 8000f18:	4819      	ldr	r0, [pc, #100]	; (8000f80 <I2Cx_MspInit+0x138>)
 8000f1a:	f000 fddd 	bl	8001ad8 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000f22:	230b      	movs	r3, #11
 8000f24:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000f26:	a905      	add	r1, sp, #20
 8000f28:	4814      	ldr	r0, [pc, #80]	; (8000f7c <I2Cx_MspInit+0x134>)
 8000f2a:	f000 fdd5 	bl	8001ad8 <HAL_GPIO_Init>
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000f2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f34:	6423      	str	r3, [r4, #64]	; 0x40
 8000f36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000f40:	6a23      	ldr	r3, [r4, #32]
 8000f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f46:	6223      	str	r3, [r4, #32]
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000f48:	6a23      	ldr	r3, [r4, #32]
 8000f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f4e:	6223      	str	r3, [r4, #32]
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000f50:	462a      	mov	r2, r5
 8000f52:	210f      	movs	r1, #15
 8000f54:	205f      	movs	r0, #95	; 0x5f
 8000f56:	f000 fad3 	bl	8001500 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000f5a:	205f      	movs	r0, #95	; 0x5f
 8000f5c:	f000 fb02 	bl	8001564 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000f60:	462a      	mov	r2, r5
 8000f62:	210f      	movs	r1, #15
 8000f64:	2060      	movs	r0, #96	; 0x60
 8000f66:	f000 facb 	bl	8001500 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000f6a:	2060      	movs	r0, #96	; 0x60
 8000f6c:	f000 fafa 	bl	8001564 <HAL_NVIC_EnableIRQ>
 8000f70:	e7b1      	b.n	8000ed6 <I2Cx_MspInit+0x8e>
 8000f72:	bf00      	nop
 8000f74:	20000200 	.word	0x20000200
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	40020c00 	.word	0x40020c00

08000f84 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000f84:	b510      	push	{r4, lr}
 8000f86:	4604      	mov	r4, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000f88:	f001 fa4c 	bl	8002424 <HAL_I2C_GetState>
 8000f8c:	b9a0      	cbnz	r0, 8000fb8 <I2Cx_Init+0x34>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <I2Cx_Init+0x3c>)
 8000f90:	429c      	cmp	r4, r3
 8000f92:	d012      	beq.n	8000fba <I2Cx_Init+0x36>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <I2Cx_Init+0x40>)
 8000f96:	6023      	str	r3, [r4, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <I2Cx_Init+0x44>)
 8000f9a:	6063      	str	r3, [r4, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60a3      	str	r3, [r4, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	60e2      	str	r2, [r4, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000fa4:	6123      	str	r3, [r4, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000fa6:	6163      	str	r3, [r4, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000fa8:	61e3      	str	r3, [r4, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000faa:	6223      	str	r3, [r4, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000fac:	4620      	mov	r0, r4
 8000fae:	f7ff ff4b 	bl	8000e48 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f000 ffec 	bl	8001f90 <HAL_I2C_Init>
  }
}
 8000fb8:	bd10      	pop	{r4, pc}
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <I2Cx_Init+0x48>)
 8000fbc:	6023      	str	r3, [r4, #0]
 8000fbe:	e7eb      	b.n	8000f98 <I2Cx_Init+0x14>
 8000fc0:	20000200 	.word	0x20000200
 8000fc4:	40005400 	.word	0x40005400
 8000fc8:	40912732 	.word	0x40912732
 8000fcc:	40006000 	.word	0x40006000

08000fd0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	4604      	mov	r4, r0
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000fd4:	f001 f83b 	bl	800204e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f7ff ffd3 	bl	8000f84 <I2Cx_Init>
}
 8000fde:	bd10      	pop	{r4, pc}

08000fe0 <I2Cx_WriteMultiple>:
{
 8000fe0:	b570      	push	{r4, r5, r6, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	4605      	mov	r5, r0
 8000fe6:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fe8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fec:	9102      	str	r1, [sp, #8]
 8000fee:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8000ff2:	9101      	str	r1, [sp, #4]
 8000ff4:	9908      	ldr	r1, [sp, #32]
 8000ff6:	9100      	str	r1, [sp, #0]
 8000ff8:	4621      	mov	r1, r4
 8000ffa:	f001 f841 	bl	8002080 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8000ffe:	4606      	mov	r6, r0
 8001000:	b910      	cbnz	r0, 8001008 <I2Cx_WriteMultiple+0x28>
}
 8001002:	4630      	mov	r0, r6
 8001004:	b004      	add	sp, #16
 8001006:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 8001008:	4621      	mov	r1, r4
 800100a:	4628      	mov	r0, r5
 800100c:	f7ff ffe0 	bl	8000fd0 <I2Cx_Error>
 8001010:	e7f7      	b.n	8001002 <I2Cx_WriteMultiple+0x22>

08001012 <I2Cx_ReadMultiple>:
{
 8001012:	b570      	push	{r4, r5, r6, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	4605      	mov	r5, r0
 8001018:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800101a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800101e:	9102      	str	r1, [sp, #8]
 8001020:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8001024:	9101      	str	r1, [sp, #4]
 8001026:	9908      	ldr	r1, [sp, #32]
 8001028:	9100      	str	r1, [sp, #0]
 800102a:	4621      	mov	r1, r4
 800102c:	f001 f912 	bl	8002254 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001030:	4606      	mov	r6, r0
 8001032:	b910      	cbnz	r0, 800103a <I2Cx_ReadMultiple+0x28>
}
 8001034:	4630      	mov	r0, r6
 8001036:	b004      	add	sp, #16
 8001038:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 800103a:	4621      	mov	r1, r4
 800103c:	4628      	mov	r0, r5
 800103e:	f7ff ffc7 	bl	8000fd0 <I2Cx_Error>
 8001042:	e7f7      	b.n	8001034 <I2Cx_ReadMultiple+0x22>

08001044 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 8001044:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cAudioHandler);
 8001046:	4802      	ldr	r0, [pc, #8]	; (8001050 <AUDIO_IO_Init+0xc>)
 8001048:	f7ff ff9c 	bl	8000f84 <I2Cx_Init>
}
 800104c:	bd08      	pop	{r3, pc}
 800104e:	bf00      	nop
 8001050:	20000200 	.word	0x20000200

08001054 <AUDIO_IO_DeInit>:
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{

}
 8001054:	4770      	bx	lr
	...

08001058 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001058:	b500      	push	{lr}
 800105a:	b085      	sub	sp, #20
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800105c:	0213      	lsls	r3, r2, #8
 800105e:	b21b      	sxth	r3, r3
 8001060:	ea43 2212 	orr.w	r2, r3, r2, lsr #8
 8001064:	f8ad 200e 	strh.w	r2, [sp, #14]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001068:	2302      	movs	r3, #2
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	f10d 020e 	add.w	r2, sp, #14
 8001070:	9200      	str	r2, [sp, #0]
 8001072:	460a      	mov	r2, r1
 8001074:	4601      	mov	r1, r0
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <AUDIO_IO_Write+0x2c>)
 8001078:	f7ff ffb2 	bl	8000fe0 <I2Cx_WriteMultiple>
}
 800107c:	b005      	add	sp, #20
 800107e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001082:	bf00      	nop
 8001084:	20000200 	.word	0x20000200

08001088 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8001088:	b500      	push	{lr}
 800108a:	b085      	sub	sp, #20
 800108c:	460a      	mov	r2, r1
  uint16_t read_value = 0, tmp = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	f8ad 300e 	strh.w	r3, [sp, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001094:	2302      	movs	r3, #2
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	f10d 010e 	add.w	r1, sp, #14
 800109c:	9100      	str	r1, [sp, #0]
 800109e:	4601      	mov	r1, r0
 80010a0:	4806      	ldr	r0, [pc, #24]	; (80010bc <AUDIO_IO_Read+0x34>)
 80010a2:	f7ff ffb6 	bl	8001012 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80010a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80010aa:	0218      	lsls	r0, r3, #8
 80010ac:	b200      	sxth	r0, r0
 80010ae:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
  
  read_value = tmp;
  
  return read_value;
}
 80010b2:	b280      	uxth	r0, r0
 80010b4:	b005      	add	sp, #20
 80010b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80010ba:	bf00      	nop
 80010bc:	20000200 	.word	0x20000200

080010c0 <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80010c0:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 80010c2:	f000 f9fd 	bl	80014c0 <HAL_Delay>
}
 80010c6:	bd08      	pop	{r3, pc}

080010c8 <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 80010c8:	b508      	push	{r3, lr}
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <SAIx_Out_DeInit+0x18>)
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <SAIx_Out_DeInit+0x1c>)
 80010ce:	6003      	str	r3, [r0, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010d6:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 80010d8:	f003 fd05 	bl	8004ae6 <HAL_SAI_DeInit>
}
 80010dc:	bd08      	pop	{r3, pc}
 80010de:	bf00      	nop
 80010e0:	20001740 	.word	0x20001740
 80010e4:	40015804 	.word	0x40015804

080010e8 <SAIx_Out_Init>:
{
 80010e8:	b510      	push	{r4, lr}
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80010ea:	4c1a      	ldr	r4, [pc, #104]	; (8001154 <SAIx_Out_Init+0x6c>)
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <SAIx_Out_Init+0x70>)
 80010ee:	6023      	str	r3, [r4, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010f6:	601a      	str	r2, [r3, #0]
  haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	6263      	str	r3, [r4, #36]	; 0x24
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80010fc:	61e0      	str	r0, [r4, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 80010fe:	6063      	str	r3, [r4, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001100:	6163      	str	r3, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001102:	6323      	str	r3, [r4, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	6362      	str	r2, [r4, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001108:	63a3      	str	r3, [r4, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800110a:	2101      	movs	r1, #1
 800110c:	63e1      	str	r1, [r4, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 800110e:	60a3      	str	r3, [r4, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8001110:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001114:	6120      	str	r0, [r4, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001116:	61a1      	str	r1, [r4, #24]
  haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8001118:	60e3      	str	r3, [r4, #12]
  haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 800111a:	62a3      	str	r3, [r4, #40]	; 0x28
  haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 800111c:	62e3      	str	r3, [r4, #44]	; 0x2c
  haudio_out_sai.Init.Mckdiv         = 0;
 800111e:	6223      	str	r3, [r4, #32]
  haudio_out_sai.FrameInit.FrameLength = 128; 
 8001120:	6422      	str	r2, [r4, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 64;
 8001122:	2240      	movs	r2, #64	; 0x40
 8001124:	6462      	str	r2, [r4, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001126:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800112a:	64a2      	str	r2, [r4, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800112c:	64e3      	str	r3, [r4, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800112e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001132:	6522      	str	r2, [r4, #80]	; 0x50
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8001134:	6563      	str	r3, [r4, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001136:	65a3      	str	r3, [r4, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4; 
 8001138:	2304      	movs	r3, #4
 800113a:	65e3      	str	r3, [r4, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 800113c:	230f      	movs	r3, #15
 800113e:	6623      	str	r3, [r4, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 8001140:	4620      	mov	r0, r4
 8001142:	f003 fbcb 	bl	80048dc <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001146:	6822      	ldr	r2, [r4, #0]
 8001148:	6813      	ldr	r3, [r2, #0]
 800114a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bd10      	pop	{r4, pc}
 8001152:	bf00      	nop
 8001154:	20001740 	.word	0x20001740
 8001158:	40015804 	.word	0x40015804

0800115c <BSP_AUDIO_OUT_Play>:
{
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	4605      	mov	r5, r0
 8001160:	460c      	mov	r4, r1
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *)pBuffer, Size) != 0)
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <BSP_AUDIO_OUT_Play+0x38>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	b28a      	uxth	r2, r1
 800116a:	4601      	mov	r1, r0
 800116c:	2034      	movs	r0, #52	; 0x34
 800116e:	4798      	blx	r3
 8001170:	b968      	cbnz	r0, 800118e <BSP_AUDIO_OUT_Play+0x32>
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8001172:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 8001176:	d202      	bcs.n	800117e <BSP_AUDIO_OUT_Play+0x22>
 8001178:	f3c4 024f 	ubfx	r2, r4, #1, #16
 800117c:	e001      	b.n	8001182 <BSP_AUDIO_OUT_Play+0x26>
 800117e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001182:	4629      	mov	r1, r5
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <BSP_AUDIO_OUT_Play+0x3c>)
 8001186:	f003 fcf7 	bl	8004b78 <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
 800118a:	2000      	movs	r0, #0
}
 800118c:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 800118e:	2001      	movs	r0, #1
 8001190:	e7fc      	b.n	800118c <BSP_AUDIO_OUT_Play+0x30>
 8001192:	bf00      	nop
 8001194:	20001880 	.word	0x20001880
 8001198:	20001740 	.word	0x20001740

0800119c <BSP_AUDIO_OUT_ChangeBuffer>:
{
 800119c:	b508      	push	{r3, lr}
 800119e:	460a      	mov	r2, r1
   HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pData, Size);
 80011a0:	4601      	mov	r1, r0
 80011a2:	4802      	ldr	r0, [pc, #8]	; (80011ac <BSP_AUDIO_OUT_ChangeBuffer+0x10>)
 80011a4:	f003 fce8 	bl	8004b78 <HAL_SAI_Transmit_DMA>
}
 80011a8:	bd08      	pop	{r3, pc}
 80011aa:	bf00      	nop
 80011ac:	20001740 	.word	0x20001740

080011b0 <BSP_AUDIO_OUT_Stop>:
{
 80011b0:	b510      	push	{r4, lr}
 80011b2:	4604      	mov	r4, r0
  HAL_SAI_DMAStop(&haudio_out_sai);
 80011b4:	4809      	ldr	r0, [pc, #36]	; (80011dc <BSP_AUDIO_OUT_Stop+0x2c>)
 80011b6:	f003 fcb7 	bl	8004b28 <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <BSP_AUDIO_OUT_Stop+0x30>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4621      	mov	r1, r4
 80011c2:	2034      	movs	r0, #52	; 0x34
 80011c4:	4798      	blx	r3
 80011c6:	b938      	cbnz	r0, 80011d8 <BSP_AUDIO_OUT_Stop+0x28>
    if(Option == CODEC_PDWN_HW)
 80011c8:	2c01      	cmp	r4, #1
 80011ca:	d001      	beq.n	80011d0 <BSP_AUDIO_OUT_Stop+0x20>
    return AUDIO_OK;
 80011cc:	2000      	movs	r0, #0
}
 80011ce:	bd10      	pop	{r4, pc}
      HAL_Delay(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f000 f975 	bl	80014c0 <HAL_Delay>
 80011d6:	e7f9      	b.n	80011cc <BSP_AUDIO_OUT_Stop+0x1c>
    return AUDIO_ERROR;
 80011d8:	2001      	movs	r0, #1
 80011da:	e7f8      	b.n	80011ce <BSP_AUDIO_OUT_Stop+0x1e>
 80011dc:	20001740 	.word	0x20001740
 80011e0:	20001880 	.word	0x20001880

080011e4 <BSP_AUDIO_OUT_SetVolume>:
{
 80011e4:	b508      	push	{r3, lr}
 80011e6:	4601      	mov	r1, r0
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <BSP_AUDIO_OUT_SetVolume+0x18>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	2034      	movs	r0, #52	; 0x34
 80011f0:	4798      	blx	r3
 80011f2:	b108      	cbz	r0, 80011f8 <BSP_AUDIO_OUT_SetVolume+0x14>
    return AUDIO_ERROR;
 80011f4:	2001      	movs	r0, #1
}
 80011f6:	bd08      	pop	{r3, pc}
    return AUDIO_OK;
 80011f8:	2000      	movs	r0, #0
 80011fa:	e7fc      	b.n	80011f6 <BSP_AUDIO_OUT_SetVolume+0x12>
 80011fc:	20001880 	.word	0x20001880

08001200 <BSP_AUDIO_OUT_SetMute>:
{ 
 8001200:	b508      	push	{r3, lr}
 8001202:	4601      	mov	r1, r0
  if(audio_drv->SetMute(AUDIO_I2C_ADDRESS, Cmd) != 0)
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <BSP_AUDIO_OUT_SetMute+0x18>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120a:	2034      	movs	r0, #52	; 0x34
 800120c:	4798      	blx	r3
 800120e:	b108      	cbz	r0, 8001214 <BSP_AUDIO_OUT_SetMute+0x14>
    return AUDIO_ERROR;
 8001210:	2001      	movs	r0, #1
}
 8001212:	bd08      	pop	{r3, pc}
    return AUDIO_OK;
 8001214:	2000      	movs	r0, #0
 8001216:	e7fc      	b.n	8001212 <BSP_AUDIO_OUT_SetMute+0x12>
 8001218:	20001880 	.word	0x20001880

0800121c <BSP_AUDIO_OUT_SetAudioFrameSlot>:
{ 
 800121c:	b510      	push	{r4, lr}
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800121e:	4c08      	ldr	r4, [pc, #32]	; (8001240 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x24>)
 8001220:	6822      	ldr	r2, [r4, #0]
 8001222:	6813      	ldr	r3, [r2, #0]
 8001224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001228:	6013      	str	r3, [r2, #0]
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 800122a:	6620      	str	r0, [r4, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 800122c:	4620      	mov	r0, r4
 800122e:	f003 fb55 	bl	80048dc <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	6813      	ldr	r3, [r2, #0]
 8001236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bd10      	pop	{r4, pc}
 800123e:	bf00      	nop
 8001240:	20001740 	.word	0x20001740

08001244 <HAL_SAI_TxCpltCallback>:
{
 8001244:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8001246:	f006 f8a9 	bl	800739c <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 800124a:	bd08      	pop	{r3, pc}

0800124c <HAL_SAI_TxHalfCpltCallback>:
{
 800124c:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 800124e:	f006 f8b9 	bl	80073c4 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8001252:	bd08      	pop	{r3, pc}

08001254 <BSP_AUDIO_OUT_Error_CallBack>:
}
 8001254:	4770      	bx	lr
	...

08001258 <BSP_AUDIO_OUT_MspInit>:
{ 
 8001258:	b530      	push	{r4, r5, lr}
 800125a:	b08b      	sub	sp, #44	; 0x2c
 800125c:	4605      	mov	r5, r0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 800125e:	4c3a      	ldr	r4, [pc, #232]	; (8001348 <BSP_AUDIO_OUT_MspInit+0xf0>)
 8001260:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001262:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001266:	6463      	str	r3, [r4, #68]	; 0x44
 8001268:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800126a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8001272:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001278:	6323      	str	r3, [r4, #48]	; 0x30
 800127a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800127c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001280:	9302      	str	r3, [sp, #8]
 8001282:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 8001284:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001286:	f043 0310 	orr.w	r3, r3, #16
 800128a:	6323      	str	r3, [r4, #48]	; 0x30
 800128c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	9303      	str	r3, [sp, #12]
 8001294:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 8001296:	2370      	movs	r3, #112	; 0x70
 8001298:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 80012a6:	2306      	movs	r3, #6
 80012a8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 80012aa:	a905      	add	r1, sp, #20
 80012ac:	4827      	ldr	r0, [pc, #156]	; (800134c <BSP_AUDIO_OUT_MspInit+0xf4>)
 80012ae:	f000 fc13 	bl	8001ad8 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80012b6:	a905      	add	r1, sp, #20
 80012b8:	4825      	ldr	r0, [pc, #148]	; (8001350 <BSP_AUDIO_OUT_MspInit+0xf8>)
 80012ba:	f000 fc0d 	bl	8001ad8 <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80012be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012c4:	6323      	str	r3, [r4, #48]	; 0x30
 80012c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012cc:	9304      	str	r3, [sp, #16]
 80012ce:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80012d0:	682a      	ldr	r2, [r5, #0]
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <BSP_AUDIO_OUT_MspInit+0xfc>)
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d009      	beq.n	80012ec <BSP_AUDIO_OUT_MspInit+0x94>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	210e      	movs	r1, #14
 80012dc:	2039      	movs	r0, #57	; 0x39
 80012de:	f000 f90f 	bl	8001500 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 80012e2:	2039      	movs	r0, #57	; 0x39
 80012e4:	f000 f93e 	bl	8001564 <HAL_NVIC_EnableIRQ>
}
 80012e8:	b00b      	add	sp, #44	; 0x2c
 80012ea:	bd30      	pop	{r4, r5, pc}
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <BSP_AUDIO_OUT_MspInit+0x100>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80012f2:	2140      	movs	r1, #64	; 0x40
 80012f4:	6699      	str	r1, [r3, #104]	; 0x68
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80012f6:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80012f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fc:	6719      	str	r1, [r3, #112]	; 0x70
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 80012fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001302:	6759      	str	r1, [r3, #116]	; 0x74
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8001304:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001308:	6799      	str	r1, [r3, #120]	; 0x78
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 800130a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800130e:	67d9      	str	r1, [r3, #124]	; 0x7c
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001310:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001314:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001318:	2104      	movs	r1, #4
 800131a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800131e:	2103      	movs	r1, #3
 8001320:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001328:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 800132c:	461c      	mov	r4, r3
 800132e:	4a0b      	ldr	r2, [pc, #44]	; (800135c <BSP_AUDIO_OUT_MspInit+0x104>)
 8001330:	f844 2f60 	str.w	r2, [r4, #96]!
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001334:	66ec      	str	r4, [r5, #108]	; 0x6c
 8001336:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    HAL_DMA_DeInit(&hdma_sai_tx);
 800133a:	4620      	mov	r0, r4
 800133c:	f000 fa18 	bl	8001770 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);
 8001340:	4620      	mov	r0, r4
 8001342:	f000 f9af 	bl	80016a4 <HAL_DMA_Init>
 8001346:	e7c7      	b.n	80012d8 <BSP_AUDIO_OUT_MspInit+0x80>
 8001348:	40023800 	.word	0x40023800
 800134c:	40021000 	.word	0x40021000
 8001350:	40021800 	.word	0x40021800
 8001354:	40015804 	.word	0x40015804
 8001358:	20000298 	.word	0x20000298
 800135c:	40026428 	.word	0x40026428

08001360 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8001360:	b510      	push	{r4, lr}
 8001362:	b0a4      	sub	sp, #144	; 0x90
 8001364:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001366:	4668      	mov	r0, sp
 8001368:	f003 f880 	bl	800446c <HAL_RCCEx_GetPeriphCLKConfig>
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800136c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001370:	f245 6322 	movw	r3, #22050	; 0x5622
 8001374:	429c      	cmp	r4, r3
 8001376:	bf18      	it	ne
 8001378:	4294      	cmpne	r4, r2
 800137a:	d003      	beq.n	8001384 <BSP_AUDIO_OUT_ClockConfig+0x24>
 800137c:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001380:	429c      	cmp	r4, r3
 8001382:	d111      	bne.n	80013a8 <BSP_AUDIO_OUT_ClockConfig+0x48>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001384:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001388:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 800138a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800138e:	930f      	str	r3, [sp, #60]	; 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8001390:	f240 13ad 	movw	r3, #429	; 0x1ad
 8001394:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8001396:	2302      	movs	r3, #2
 8001398:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800139a:	2313      	movs	r3, #19
 800139c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800139e:	4668      	mov	r0, sp
 80013a0:	f002 fc62 	bl	8003c68 <HAL_RCCEx_PeriphCLKConfig>
}
 80013a4:	b024      	add	sp, #144	; 0x90
 80013a6:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80013a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80013ac:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 80013ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013b2:	930f      	str	r3, [sp, #60]	; 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344; 
 80013b4:	f44f 73ac 	mov.w	r3, #344	; 0x158
 80013b8:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
 80013ba:	2307      	movs	r3, #7
 80013bc:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
 80013be:	2301      	movs	r3, #1
 80013c0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80013c2:	4668      	mov	r0, sp
 80013c4:	f002 fc50 	bl	8003c68 <HAL_RCCEx_PeriphCLKConfig>
}
 80013c8:	e7ec      	b.n	80013a4 <BSP_AUDIO_OUT_ClockConfig+0x44>
	...

080013cc <BSP_AUDIO_OUT_Init>:
{ 
 80013cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ce:	4606      	mov	r6, r0
 80013d0:	460f      	mov	r7, r1
 80013d2:	4614      	mov	r4, r2
  SAIx_Out_DeInit();
 80013d4:	f7ff fe78 	bl	80010c8 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 80013d8:	4d15      	ldr	r5, [pc, #84]	; (8001430 <BSP_AUDIO_OUT_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	4621      	mov	r1, r4
 80013de:	4628      	mov	r0, r5
 80013e0:	f7ff ffbe 	bl	8001360 <BSP_AUDIO_OUT_ClockConfig>
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <BSP_AUDIO_OUT_Init+0x68>)
 80013e6:	602b      	str	r3, [r5, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 80013e8:	4628      	mov	r0, r5
 80013ea:	f003 fc6f 	bl	8004ccc <HAL_SAI_GetState>
 80013ee:	b160      	cbz	r0, 800140a <BSP_AUDIO_OUT_Init+0x3e>
  SAIx_Out_Init(AudioFreq);
 80013f0:	4620      	mov	r0, r4
 80013f2:	f7ff fe79 	bl	80010e8 <SAIx_Out_Init>
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <BSP_AUDIO_OUT_Init+0x6c>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2034      	movs	r0, #52	; 0x34
 80013fc:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
 80013fe:	f648 1394 	movw	r3, #35220	; 0x8994
 8001402:	4298      	cmp	r0, r3
 8001404:	d006      	beq.n	8001414 <BSP_AUDIO_OUT_Init+0x48>
    ret = AUDIO_ERROR;
 8001406:	2001      	movs	r0, #1
}
 8001408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 800140a:	2100      	movs	r1, #0
 800140c:	4628      	mov	r0, r5
 800140e:	f7ff ff23 	bl	8001258 <BSP_AUDIO_OUT_MspInit>
 8001412:	e7ed      	b.n	80013f0 <BSP_AUDIO_OUT_Init+0x24>
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8001414:	4d08      	ldr	r5, [pc, #32]	; (8001438 <BSP_AUDIO_OUT_Init+0x6c>)
 8001416:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001418:	2034      	movs	r0, #52	; 0x34
 800141a:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <BSP_AUDIO_OUT_Init+0x70>)
 800141e:	601d      	str	r5, [r3, #0]
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8001420:	682d      	ldr	r5, [r5, #0]
 8001422:	4623      	mov	r3, r4
 8001424:	463a      	mov	r2, r7
 8001426:	4631      	mov	r1, r6
 8001428:	2034      	movs	r0, #52	; 0x34
 800142a:	47a8      	blx	r5
    ret = AUDIO_OK;
 800142c:	2000      	movs	r0, #0
 800142e:	e7eb      	b.n	8001408 <BSP_AUDIO_OUT_Init+0x3c>
 8001430:	20001740 	.word	0x20001740
 8001434:	40015804 	.word	0x40015804
 8001438:	20000000 	.word	0x20000000
 800143c:	20001880 	.word	0x20001880

08001440 <HAL_SAI_ErrorCallback>:
{
 8001440:	b508      	push	{r3, lr}
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001442:	6802      	ldr	r2, [r0, #0]
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <HAL_SAI_ErrorCallback+0x18>)
 8001446:	429a      	cmp	r2, r3
 8001448:	d002      	beq.n	8001450 <HAL_SAI_ErrorCallback+0x10>
    BSP_AUDIO_IN_Error_CallBack();
 800144a:	f005 ffcf 	bl	80073ec <BSP_AUDIO_IN_Error_CallBack>
}
 800144e:	bd08      	pop	{r3, pc}
  BSP_AUDIO_OUT_Error_CallBack();
 8001450:	f7ff ff00 	bl	8001254 <BSP_AUDIO_OUT_Error_CallBack>
 8001454:	e7fb      	b.n	800144e <HAL_SAI_ErrorCallback+0xe>
 8001456:	bf00      	nop
 8001458:	40015804 	.word	0x40015804

0800145c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800145c:	4770      	bx	lr
	...

08001460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001460:	b510      	push	{r4, lr}
 8001462:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <HAL_InitTick+0x24>)
 8001466:	6818      	ldr	r0, [r3, #0]
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <HAL_InitTick+0x28>)
 800146a:	fba3 3000 	umull	r3, r0, r3, r0
 800146e:	0980      	lsrs	r0, r0, #6
 8001470:	f000 f884 	bl	800157c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001474:	2200      	movs	r2, #0
 8001476:	4621      	mov	r1, r4
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f000 f840 	bl	8001500 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8001480:	2000      	movs	r0, #0
 8001482:	bd10      	pop	{r4, pc}
 8001484:	200000e4 	.word	0x200000e4
 8001488:	10624dd3 	.word	0x10624dd3

0800148c <HAL_Init>:
{
 800148c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148e:	2003      	movs	r0, #3
 8001490:	f000 f824 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff ffe3 	bl	8001460 <HAL_InitTick>
  HAL_MspInit();
 800149a:	f7ff ffdf 	bl	800145c <HAL_MspInit>
}
 800149e:	2000      	movs	r0, #0
 80014a0:	bd08      	pop	{r3, pc}
	...

080014a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80014a4:	4a02      	ldr	r2, [pc, #8]	; (80014b0 <HAL_IncTick+0xc>)
 80014a6:	6813      	ldr	r3, [r2, #0]
 80014a8:	3301      	adds	r3, #1
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20001acc 	.word	0x20001acc

080014b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014b4:	4b01      	ldr	r3, [pc, #4]	; (80014bc <HAL_GetTick+0x8>)
 80014b6:	6818      	ldr	r0, [r3, #0]
}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20001acc 	.word	0x20001acc

080014c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80014c0:	b510      	push	{r4, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80014c6:	f7ff fff5 	bl	80014b4 <HAL_GetTick>
 80014ca:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80014cc:	f7ff fff2 	bl	80014b4 <HAL_GetTick>
 80014d0:	1b00      	subs	r0, r0, r4
 80014d2:	9b01      	ldr	r3, [sp, #4]
 80014d4:	4298      	cmp	r0, r3
 80014d6:	d3f9      	bcc.n	80014cc <HAL_Delay+0xc>
  {
  }
}
 80014d8:	b002      	add	sp, #8
 80014da:	bd10      	pop	{r4, pc}

080014dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014dc:	4906      	ldr	r1, [pc, #24]	; (80014f8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80014de:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80014e8:	0200      	lsls	r0, r0, #8
 80014ea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ee:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80014f0:	4a02      	ldr	r2, [pc, #8]	; (80014fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80014f2:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80014f4:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00
 80014fc:	05fa0000 	.word	0x05fa0000

08001500 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001500:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_NVIC_SetPriority+0x58>)
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150a:	f1c3 0407 	rsb	r4, r3, #7
 800150e:	2c04      	cmp	r4, #4
 8001510:	bf28      	it	cs
 8001512:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001514:	1d1d      	adds	r5, r3, #4
 8001516:	2d06      	cmp	r5, #6
 8001518:	d914      	bls.n	8001544 <HAL_NVIC_SetPriority+0x44>
 800151a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 35ff 	mov.w	r5, #4294967295
 8001520:	fa05 f404 	lsl.w	r4, r5, r4
 8001524:	ea21 0104 	bic.w	r1, r1, r4
 8001528:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800152a:	fa05 f303 	lsl.w	r3, r5, r3
 800152e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001532:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8001534:	2800      	cmp	r0, #0
 8001536:	db07      	blt.n	8001548 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	0109      	lsls	r1, r1, #4
 800153a:	b2c9      	uxtb	r1, r1
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <HAL_NVIC_SetPriority+0x5c>)
 800153e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001540:	bc30      	pop	{r4, r5}
 8001542:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001544:	2300      	movs	r3, #0
 8001546:	e7e9      	b.n	800151c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	f000 000f 	and.w	r0, r0, #15
 800154c:	0109      	lsls	r1, r1, #4
 800154e:	b2c9      	uxtb	r1, r1
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_NVIC_SetPriority+0x60>)
 8001552:	5419      	strb	r1, [r3, r0]
 8001554:	e7f4      	b.n	8001540 <HAL_NVIC_SetPriority+0x40>
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00
 800155c:	e000e400 	.word	0xe000e400
 8001560:	e000ed14 	.word	0xe000ed14

08001564 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001564:	f000 021f 	and.w	r2, r0, #31
 8001568:	0940      	lsrs	r0, r0, #5
 800156a:	2301      	movs	r3, #1
 800156c:	4093      	lsls	r3, r2
 800156e:	4a02      	ldr	r2, [pc, #8]	; (8001578 <HAL_NVIC_EnableIRQ+0x14>)
 8001570:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100

0800157c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	3801      	subs	r0, #1
 800157e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001582:	d20a      	bcs.n	800159a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_SYSTICK_Config+0x24>)
 8001586:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001588:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <HAL_SYSTICK_Config+0x28>)
 800158a:	21f0      	movs	r1, #240	; 0xf0
 800158c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	2000      	movs	r0, #0
 8001592:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800159a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015a8:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015aa:	6805      	ldr	r5, [r0, #0]
 80015ac:	682c      	ldr	r4, [r5, #0]
 80015ae:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80015b2:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015b4:	6804      	ldr	r4, [r0, #0]
 80015b6:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015b8:	6883      	ldr	r3, [r0, #8]
 80015ba:	2b40      	cmp	r3, #64	; 0x40
 80015bc:	d005      	beq.n	80015ca <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80015be:	6803      	ldr	r3, [r0, #0]
 80015c0:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80015c2:	6803      	ldr	r3, [r0, #0]
 80015c4:	60da      	str	r2, [r3, #12]
  }
}
 80015c6:	bc30      	pop	{r4, r5}
 80015c8:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80015ca:	6803      	ldr	r3, [r0, #0]
 80015cc:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80015ce:	6803      	ldr	r3, [r0, #0]
 80015d0:	60d9      	str	r1, [r3, #12]
 80015d2:	e7f8      	b.n	80015c6 <DMA_SetConfig+0x1e>

080015d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015d4:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015d6:	6801      	ldr	r1, [r0, #0]
 80015d8:	b2ca      	uxtb	r2, r1
 80015da:	3a10      	subs	r2, #16
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <DMA_CalcBaseAndBitshift+0x34>)
 80015de:	fba3 4302 	umull	r4, r3, r3, r2
 80015e2:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015e4:	4c09      	ldr	r4, [pc, #36]	; (800160c <DMA_CalcBaseAndBitshift+0x38>)
 80015e6:	5ce3      	ldrb	r3, [r4, r3]
 80015e8:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80015ea:	2a5f      	cmp	r2, #95	; 0x5f
 80015ec:	d907      	bls.n	80015fe <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <DMA_CalcBaseAndBitshift+0x3c>)
 80015f0:	400b      	ands	r3, r1
 80015f2:	3304      	adds	r3, #4
 80015f4:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80015f6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80015f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015fc:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <DMA_CalcBaseAndBitshift+0x3c>)
 8001600:	400b      	ands	r3, r1
 8001602:	6583      	str	r3, [r0, #88]	; 0x58
 8001604:	e7f7      	b.n	80015f6 <DMA_CalcBaseAndBitshift+0x22>
 8001606:	bf00      	nop
 8001608:	aaaaaaab 	.word	0xaaaaaaab
 800160c:	08008ef0 	.word	0x08008ef0
 8001610:	fffffc00 	.word	0xfffffc00

08001614 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001614:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001616:	6982      	ldr	r2, [r0, #24]
 8001618:	b992      	cbnz	r2, 8001640 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800161a:	2b01      	cmp	r3, #1
 800161c:	d00a      	beq.n	8001634 <DMA_CheckFifoParam+0x20>
 800161e:	2b02      	cmp	r3, #2
 8001620:	d002      	beq.n	8001628 <DMA_CheckFifoParam+0x14>
 8001622:	b10b      	cbz	r3, 8001628 <DMA_CheckFifoParam+0x14>
 8001624:	2000      	movs	r0, #0
 8001626:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001628:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800162a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800162e:	d128      	bne.n	8001682 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001630:	2000      	movs	r0, #0
 8001632:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001634:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001636:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800163a:	d024      	beq.n	8001686 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 800163c:	2000      	movs	r0, #0
 800163e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001640:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001644:	d009      	beq.n	800165a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001646:	2b02      	cmp	r3, #2
 8001648:	d925      	bls.n	8001696 <DMA_CheckFifoParam+0x82>
 800164a:	2b03      	cmp	r3, #3
 800164c:	d125      	bne.n	800169a <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800164e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001650:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001654:	d123      	bne.n	800169e <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001656:	2000      	movs	r0, #0
 8001658:	4770      	bx	lr
    switch (tmp)
 800165a:	2b03      	cmp	r3, #3
 800165c:	d803      	bhi.n	8001666 <DMA_CheckFifoParam+0x52>
 800165e:	e8df f003 	tbb	[pc, r3]
 8001662:	0414      	.short	0x0414
 8001664:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001666:	2000      	movs	r0, #0
 8001668:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800166a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800166c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001670:	d10d      	bne.n	800168e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001672:	2000      	movs	r0, #0
 8001674:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001676:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001678:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800167c:	d009      	beq.n	8001692 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800167e:	2000      	movs	r0, #0
 8001680:	4770      	bx	lr
        status = HAL_ERROR;
 8001682:	2001      	movs	r0, #1
 8001684:	4770      	bx	lr
        status = HAL_ERROR;
 8001686:	2001      	movs	r0, #1
 8001688:	4770      	bx	lr
      status = HAL_ERROR;
 800168a:	2001      	movs	r0, #1
 800168c:	4770      	bx	lr
        status = HAL_ERROR;
 800168e:	2001      	movs	r0, #1
 8001690:	4770      	bx	lr
        status = HAL_ERROR;
 8001692:	2001      	movs	r0, #1
 8001694:	4770      	bx	lr
      status = HAL_ERROR;
 8001696:	2001      	movs	r0, #1
 8001698:	4770      	bx	lr
    switch (tmp)
 800169a:	2000      	movs	r0, #0
 800169c:	4770      	bx	lr
      {
        status = HAL_ERROR;
 800169e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_DMA_Init>:
{
 80016a4:	b570      	push	{r4, r5, r6, lr}
 80016a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80016a8:	f7ff ff04 	bl	80014b4 <HAL_GetTick>
  if(hdma == NULL)
 80016ac:	2c00      	cmp	r4, #0
 80016ae:	d05b      	beq.n	8001768 <HAL_DMA_Init+0xc4>
 80016b0:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80016b2:	2300      	movs	r3, #0
 80016b4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80016b8:	2302      	movs	r3, #2
 80016ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80016be:	6822      	ldr	r2, [r4, #0]
 80016c0:	6813      	ldr	r3, [r2, #0]
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	f012 0f01 	tst.w	r2, #1
 80016d0:	d00a      	beq.n	80016e8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016d2:	f7ff feef 	bl	80014b4 <HAL_GetTick>
 80016d6:	1b43      	subs	r3, r0, r5
 80016d8:	2b05      	cmp	r3, #5
 80016da:	d9f5      	bls.n	80016c8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016dc:	2320      	movs	r3, #32
 80016de:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016e0:	2003      	movs	r0, #3
 80016e2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80016e6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80016e8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016ea:	4820      	ldr	r0, [pc, #128]	; (800176c <HAL_DMA_Init+0xc8>)
 80016ec:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ee:	6861      	ldr	r1, [r4, #4]
 80016f0:	68a2      	ldr	r2, [r4, #8]
 80016f2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f4:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016f6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f8:	6921      	ldr	r1, [r4, #16]
 80016fa:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016fc:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016fe:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001700:	69a1      	ldr	r1, [r4, #24]
 8001702:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001704:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001706:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001708:	6a21      	ldr	r1, [r4, #32]
 800170a:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800170c:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800170e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001710:	2904      	cmp	r1, #4
 8001712:	d01e      	beq.n	8001752 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001714:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001716:	6826      	ldr	r6, [r4, #0]
 8001718:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800171a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800171e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001720:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001722:	2b04      	cmp	r3, #4
 8001724:	d107      	bne.n	8001736 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001726:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001728:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800172a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800172c:	b11b      	cbz	r3, 8001736 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800172e:	4620      	mov	r0, r4
 8001730:	f7ff ff70 	bl	8001614 <DMA_CheckFifoParam>
 8001734:	b990      	cbnz	r0, 800175c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001736:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001738:	4620      	mov	r0, r4
 800173a:	f7ff ff4b 	bl	80015d4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800173e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001740:	233f      	movs	r3, #63	; 0x3f
 8001742:	4093      	lsls	r3, r2
 8001744:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001746:	2000      	movs	r0, #0
 8001748:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800174a:	2301      	movs	r3, #1
 800174c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001750:	e7c9      	b.n	80016e6 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001752:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001754:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001756:	4301      	orrs	r1, r0
 8001758:	430a      	orrs	r2, r1
 800175a:	e7db      	b.n	8001714 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800175c:	2340      	movs	r3, #64	; 0x40
 800175e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001760:	2001      	movs	r0, #1
 8001762:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001766:	e7be      	b.n	80016e6 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001768:	2001      	movs	r0, #1
 800176a:	e7bc      	b.n	80016e6 <HAL_DMA_Init+0x42>
 800176c:	e010803f 	.word	0xe010803f

08001770 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8001770:	b338      	cbz	r0, 80017c2 <HAL_DMA_DeInit+0x52>
{
 8001772:	b538      	push	{r3, r4, r5, lr}
 8001774:	4605      	mov	r5, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001776:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 800177a:	b2c0      	uxtb	r0, r0
 800177c:	2802      	cmp	r0, #2
 800177e:	d01f      	beq.n	80017c0 <HAL_DMA_DeInit+0x50>
  __HAL_DMA_DISABLE(hdma);
 8001780:	682a      	ldr	r2, [r5, #0]
 8001782:	6813      	ldr	r3, [r2, #0]
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 800178a:	682b      	ldr	r3, [r5, #0]
 800178c:	2400      	movs	r4, #0
 800178e:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8001790:	682b      	ldr	r3, [r5, #0]
 8001792:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8001794:	682b      	ldr	r3, [r5, #0]
 8001796:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8001798:	682b      	ldr	r3, [r5, #0]
 800179a:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 800179c:	682b      	ldr	r3, [r5, #0]
 800179e:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80017a0:	682b      	ldr	r3, [r5, #0]
 80017a2:	2221      	movs	r2, #33	; 0x21
 80017a4:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017a6:	4628      	mov	r0, r5
 80017a8:	f7ff ff14 	bl	80015d4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ac:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80017ae:	233f      	movs	r3, #63	; 0x3f
 80017b0:	4093      	lsls	r3, r2
 80017b2:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b4:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 80017b6:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80017ba:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  return HAL_OK;
 80017be:	4620      	mov	r0, r4
}
 80017c0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80017c2:	2001      	movs	r0, #1
}
 80017c4:	4770      	bx	lr

080017c6 <HAL_DMA_Start_IT>:
{
 80017c6:	b538      	push	{r3, r4, r5, lr}
 80017c8:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017ca:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80017cc:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80017d0:	2801      	cmp	r0, #1
 80017d2:	d030      	beq.n	8001836 <HAL_DMA_Start_IT+0x70>
 80017d4:	2001      	movs	r0, #1
 80017d6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80017da:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80017de:	b2c0      	uxtb	r0, r0
 80017e0:	2801      	cmp	r0, #1
 80017e2:	d004      	beq.n	80017ee <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80017e4:	2300      	movs	r3, #0
 80017e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 80017ea:	2002      	movs	r0, #2
}
 80017ec:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80017ee:	2002      	movs	r0, #2
 80017f0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017f4:	2000      	movs	r0, #0
 80017f6:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017f8:	4620      	mov	r0, r4
 80017fa:	f7ff fed5 	bl	80015a8 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001800:	233f      	movs	r3, #63	; 0x3f
 8001802:	4093      	lsls	r3, r2
 8001804:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001806:	6822      	ldr	r2, [r4, #0]
 8001808:	6813      	ldr	r3, [r2, #0]
 800180a:	f043 0316 	orr.w	r3, r3, #22
 800180e:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001810:	6822      	ldr	r2, [r4, #0]
 8001812:	6953      	ldr	r3, [r2, #20]
 8001814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001818:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800181a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800181c:	b123      	cbz	r3, 8001828 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 800181e:	6822      	ldr	r2, [r4, #0]
 8001820:	6813      	ldr	r3, [r2, #0]
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001828:	6822      	ldr	r2, [r4, #0]
 800182a:	6813      	ldr	r3, [r2, #0]
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001832:	2000      	movs	r0, #0
 8001834:	e7da      	b.n	80017ec <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001836:	2002      	movs	r0, #2
 8001838:	e7d8      	b.n	80017ec <HAL_DMA_Start_IT+0x26>

0800183a <HAL_DMA_Abort>:
{
 800183a:	b570      	push	{r4, r5, r6, lr}
 800183c:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800183e:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8001840:	f7ff fe38 	bl	80014b4 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001844:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d006      	beq.n	800185c <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001852:	2300      	movs	r3, #0
 8001854:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001858:	2001      	movs	r0, #1
}
 800185a:	bd70      	pop	{r4, r5, r6, pc}
 800185c:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800185e:	6822      	ldr	r2, [r4, #0]
 8001860:	6813      	ldr	r3, [r2, #0]
 8001862:	f023 0316 	bic.w	r3, r3, #22
 8001866:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001868:	6822      	ldr	r2, [r4, #0]
 800186a:	6953      	ldr	r3, [r2, #20]
 800186c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001870:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001872:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001874:	b1e3      	cbz	r3, 80018b0 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001876:	6822      	ldr	r2, [r4, #0]
 8001878:	6813      	ldr	r3, [r2, #0]
 800187a:	f023 0308 	bic.w	r3, r3, #8
 800187e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001880:	6822      	ldr	r2, [r4, #0]
 8001882:	6813      	ldr	r3, [r2, #0]
 8001884:	f023 0301 	bic.w	r3, r3, #1
 8001888:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f013 0f01 	tst.w	r3, #1
 8001892:	d011      	beq.n	80018b8 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001894:	f7ff fe0e 	bl	80014b4 <HAL_GetTick>
 8001898:	1b43      	subs	r3, r0, r5
 800189a:	2b05      	cmp	r3, #5
 800189c:	d9f5      	bls.n	800188a <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800189e:	2320      	movs	r3, #32
 80018a0:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80018a2:	2300      	movs	r3, #0
 80018a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018a8:	2003      	movs	r0, #3
 80018aa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 80018ae:	e7d4      	b.n	800185a <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1df      	bne.n	8001876 <HAL_DMA_Abort+0x3c>
 80018b6:	e7e3      	b.n	8001880 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018b8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80018ba:	233f      	movs	r3, #63	; 0x3f
 80018bc:	4093      	lsls	r3, r2
 80018be:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 80018c0:	2000      	movs	r0, #0
 80018c2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80018c6:	2301      	movs	r3, #1
 80018c8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80018cc:	e7c5      	b.n	800185a <HAL_DMA_Abort+0x20>

080018ce <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ce:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d003      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80018dc:	2001      	movs	r0, #1
 80018de:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80018e0:	2305      	movs	r3, #5
 80018e2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80018e6:	6802      	ldr	r2, [r0, #0]
 80018e8:	6813      	ldr	r3, [r2, #0]
 80018ea:	f023 0301 	bic.w	r3, r3, #1
 80018ee:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80018f0:	2000      	movs	r0, #0
}
 80018f2:	4770      	bx	lr

080018f4 <HAL_DMA_IRQHandler>:
{
 80018f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018f6:	b083      	sub	sp, #12
 80018f8:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 80018fe:	4b72      	ldr	r3, [pc, #456]	; (8001ac8 <HAL_DMA_IRQHandler+0x1d4>)
 8001900:	681d      	ldr	r5, [r3, #0]
 8001902:	4b72      	ldr	r3, [pc, #456]	; (8001acc <HAL_DMA_IRQHandler+0x1d8>)
 8001904:	fba3 3505 	umull	r3, r5, r3, r5
 8001908:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800190a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 800190c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800190e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001910:	2308      	movs	r3, #8
 8001912:	4093      	lsls	r3, r2
 8001914:	4233      	tst	r3, r6
 8001916:	d010      	beq.n	800193a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001918:	6803      	ldr	r3, [r0, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	f012 0f04 	tst.w	r2, #4
 8001920:	d00b      	beq.n	800193a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	f022 0204 	bic.w	r2, r2, #4
 8001928:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800192a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800192c:	2308      	movs	r3, #8
 800192e:	4093      	lsls	r3, r2
 8001930:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001932:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800193a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800193c:	4b64      	ldr	r3, [pc, #400]	; (8001ad0 <HAL_DMA_IRQHandler+0x1dc>)
 800193e:	4093      	lsls	r3, r2
 8001940:	4233      	tst	r3, r6
 8001942:	d009      	beq.n	8001958 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001944:	6822      	ldr	r2, [r4, #0]
 8001946:	6952      	ldr	r2, [r2, #20]
 8001948:	f012 0f80 	tst.w	r2, #128	; 0x80
 800194c:	d004      	beq.n	8001958 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800194e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001950:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001952:	f043 0302 	orr.w	r3, r3, #2
 8001956:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001958:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800195a:	4b5e      	ldr	r3, [pc, #376]	; (8001ad4 <HAL_DMA_IRQHandler+0x1e0>)
 800195c:	4093      	lsls	r3, r2
 800195e:	4233      	tst	r3, r6
 8001960:	d009      	beq.n	8001976 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001962:	6822      	ldr	r2, [r4, #0]
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	f012 0f02 	tst.w	r2, #2
 800196a:	d004      	beq.n	8001976 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800196c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800196e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001976:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001978:	2310      	movs	r3, #16
 800197a:	4093      	lsls	r3, r2
 800197c:	4233      	tst	r3, r6
 800197e:	d024      	beq.n	80019ca <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001980:	6822      	ldr	r2, [r4, #0]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	f012 0f08 	tst.w	r2, #8
 8001988:	d01f      	beq.n	80019ca <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800198a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001994:	d00d      	beq.n	80019b2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800199c:	d104      	bne.n	80019a8 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800199e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019a0:	b19b      	cbz	r3, 80019ca <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80019a2:	4620      	mov	r0, r4
 80019a4:	4798      	blx	r3
 80019a6:	e010      	b.n	80019ca <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80019aa:	b173      	cbz	r3, 80019ca <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80019ac:	4620      	mov	r0, r4
 80019ae:	4798      	blx	r3
 80019b0:	e00b      	b.n	80019ca <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80019b8:	d103      	bne.n	80019c2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	f022 0208 	bic.w	r2, r2, #8
 80019c0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80019c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019c4:	b10b      	cbz	r3, 80019ca <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80019c6:	4620      	mov	r0, r4
 80019c8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019ca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80019cc:	2320      	movs	r3, #32
 80019ce:	4093      	lsls	r3, r2
 80019d0:	4233      	tst	r3, r6
 80019d2:	d055      	beq.n	8001a80 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019d4:	6822      	ldr	r2, [r4, #0]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	f012 0f10 	tst.w	r2, #16
 80019dc:	d050      	beq.n	8001a80 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019de:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019e0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	d00e      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019ea:	6823      	ldr	r3, [r4, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80019f2:	d033      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80019fa:	d12a      	bne.n	8001a52 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80019fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d03e      	beq.n	8001a80 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001a02:	4620      	mov	r0, r4
 8001a04:	4798      	blx	r3
 8001a06:	e03b      	b.n	8001a80 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a08:	6822      	ldr	r2, [r4, #0]
 8001a0a:	6813      	ldr	r3, [r2, #0]
 8001a0c:	f023 0316 	bic.w	r3, r3, #22
 8001a10:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a12:	6822      	ldr	r2, [r4, #0]
 8001a14:	6953      	ldr	r3, [r2, #20]
 8001a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a1a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a1e:	b1a3      	cbz	r3, 8001a4a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a20:	6822      	ldr	r2, [r4, #0]
 8001a22:	6813      	ldr	r3, [r2, #0]
 8001a24:	f023 0308 	bic.w	r3, r3, #8
 8001a28:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a2a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a2c:	233f      	movs	r3, #63	; 0x3f
 8001a2e:	4093      	lsls	r3, r2
 8001a30:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001a32:	2300      	movs	r3, #0
 8001a34:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001a3e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d03f      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001a44:	4620      	mov	r0, r4
 8001a46:	4798      	blx	r3
        return;
 8001a48:	e03c      	b.n	8001ac4 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1e7      	bne.n	8001a20 <HAL_DMA_IRQHandler+0x12c>
 8001a50:	e7eb      	b.n	8001a2a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001a52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a54:	b1a3      	cbz	r3, 8001a80 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001a56:	4620      	mov	r0, r4
 8001a58:	4798      	blx	r3
 8001a5a:	e011      	b.n	8001a80 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001a62:	d109      	bne.n	8001a78 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	f022 0210 	bic.w	r2, r2, #16
 8001a6a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001a72:	2301      	movs	r3, #1
 8001a74:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001a78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a7a:	b10b      	cbz	r3, 8001a80 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a82:	b1fb      	cbz	r3, 8001ac4 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a86:	f013 0f01 	tst.w	r3, #1
 8001a8a:	d017      	beq.n	8001abc <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a8c:	2305      	movs	r3, #5
 8001a8e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001a92:	6822      	ldr	r2, [r4, #0]
 8001a94:	6813      	ldr	r3, [r2, #0]
 8001a96:	f023 0301 	bic.w	r3, r3, #1
 8001a9a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001a9c:	9b01      	ldr	r3, [sp, #4]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	42ab      	cmp	r3, r5
 8001aa4:	d804      	bhi.n	8001ab0 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f013 0f01 	tst.w	r3, #1
 8001aae:	d1f5      	bne.n	8001a9c <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001abc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001abe:	b10b      	cbz	r3, 8001ac4 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	4798      	blx	r3
}
 8001ac4:	b003      	add	sp, #12
 8001ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac8:	200000e4 	.word	0x200000e4
 8001acc:	1b4e81b5 	.word	0x1b4e81b5
 8001ad0:	00800001 	.word	0x00800001
 8001ad4:	00800004 	.word	0x00800004

08001ad8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2b0f      	cmp	r3, #15
 8001adc:	f200 80e3 	bhi.w	8001ca6 <HAL_GPIO_Init+0x1ce>
{
 8001ae0:	b4f0      	push	{r4, r5, r6, r7}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	e039      	b.n	8001b5a <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ae6:	2209      	movs	r2, #9
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x14>
 8001aea:	2200      	movs	r2, #0
 8001aec:	40b2      	lsls	r2, r6
 8001aee:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001af0:	3402      	adds	r4, #2
 8001af2:	4e6d      	ldr	r6, [pc, #436]	; (8001ca8 <HAL_GPIO_Init+0x1d0>)
 8001af4:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af8:	4a6c      	ldr	r2, [pc, #432]	; (8001cac <HAL_GPIO_Init+0x1d4>)
 8001afa:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	43ea      	mvns	r2, r5
 8001afe:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b02:	684f      	ldr	r7, [r1, #4]
 8001b04:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001b08:	d001      	beq.n	8001b0e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001b0a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001b0e:	4c67      	ldr	r4, [pc, #412]	; (8001cac <HAL_GPIO_Init+0x1d4>)
 8001b10:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001b12:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b18:	684f      	ldr	r7, [r1, #4]
 8001b1a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001b1e:	d001      	beq.n	8001b24 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001b20:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001b24:	4c61      	ldr	r4, [pc, #388]	; (8001cac <HAL_GPIO_Init+0x1d4>)
 8001b26:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b28:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b2e:	684f      	ldr	r7, [r1, #4]
 8001b30:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001b34:	d001      	beq.n	8001b3a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8001b36:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8001b3a:	4c5c      	ldr	r4, [pc, #368]	; (8001cac <HAL_GPIO_Init+0x1d4>)
 8001b3c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001b3e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001b40:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b42:	684e      	ldr	r6, [r1, #4]
 8001b44:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001b48:	d001      	beq.n	8001b4e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8001b4a:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8001b4e:	4c57      	ldr	r4, [pc, #348]	; (8001cac <HAL_GPIO_Init+0x1d4>)
 8001b50:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b52:	3301      	adds	r3, #1
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	f200 80a3 	bhi.w	8001ca0 <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5e:	680c      	ldr	r4, [r1, #0]
 8001b60:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001b64:	ea32 0404 	bics.w	r4, r2, r4
 8001b68:	d1f3      	bne.n	8001b52 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b6a:	684c      	ldr	r4, [r1, #4]
 8001b6c:	2c12      	cmp	r4, #18
 8001b6e:	bf18      	it	ne
 8001b70:	2c02      	cmpne	r4, #2
 8001b72:	d110      	bne.n	8001b96 <HAL_GPIO_Init+0xbe>
        temp = GPIOx->AFR[position >> 3];
 8001b74:	08de      	lsrs	r6, r3, #3
 8001b76:	3608      	adds	r6, #8
 8001b78:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b7c:	f003 0407 	and.w	r4, r3, #7
 8001b80:	00a7      	lsls	r7, r4, #2
 8001b82:	240f      	movs	r4, #15
 8001b84:	40bc      	lsls	r4, r7
 8001b86:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b8a:	690c      	ldr	r4, [r1, #16]
 8001b8c:	40bc      	lsls	r4, r7
 8001b8e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8001b92:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8001b96:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b9a:	005e      	lsls	r6, r3, #1
 8001b9c:	2403      	movs	r4, #3
 8001b9e:	40b4      	lsls	r4, r6
 8001ba0:	43e7      	mvns	r7, r4
 8001ba2:	ea2c 0c04 	bic.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ba6:	684c      	ldr	r4, [r1, #4]
 8001ba8:	f004 0403 	and.w	r4, r4, #3
 8001bac:	40b4      	lsls	r4, r6
 8001bae:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8001bb2:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb4:	684c      	ldr	r4, [r1, #4]
 8001bb6:	f104 3cff 	add.w	ip, r4, #4294967295
 8001bba:	2c11      	cmp	r4, #17
 8001bbc:	bf18      	it	ne
 8001bbe:	f1bc 0f01 	cmpne.w	ip, #1
 8001bc2:	d901      	bls.n	8001bc8 <HAL_GPIO_Init+0xf0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc4:	2c12      	cmp	r4, #18
 8001bc6:	d110      	bne.n	8001bea <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8001bc8:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001bca:	ea07 0c04 	and.w	ip, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bce:	68cc      	ldr	r4, [r1, #12]
 8001bd0:	40b4      	lsls	r4, r6
 8001bd2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8001bd6:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001bd8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bda:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001bde:	684c      	ldr	r4, [r1, #4]
 8001be0:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8001be4:	409c      	lsls	r4, r3
 8001be6:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8001be8:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8001bea:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bec:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bee:	688a      	ldr	r2, [r1, #8]
 8001bf0:	40b2      	lsls	r2, r6
 8001bf2:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8001bf4:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bf6:	684a      	ldr	r2, [r1, #4]
 8001bf8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001bfc:	d0a9      	beq.n	8001b52 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	4a2c      	ldr	r2, [pc, #176]	; (8001cb0 <HAL_GPIO_Init+0x1d8>)
 8001c00:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001c02:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001c06:	6454      	str	r4, [r2, #68]	; 0x44
 8001c08:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c0a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c0e:	9201      	str	r2, [sp, #4]
 8001c10:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001c12:	089c      	lsrs	r4, r3, #2
 8001c14:	1ca6      	adds	r6, r4, #2
 8001c16:	4a24      	ldr	r2, [pc, #144]	; (8001ca8 <HAL_GPIO_Init+0x1d0>)
 8001c18:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c1c:	f003 0203 	and.w	r2, r3, #3
 8001c20:	0096      	lsls	r6, r2, #2
 8001c22:	220f      	movs	r2, #15
 8001c24:	40b2      	lsls	r2, r6
 8001c26:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c2a:	4a22      	ldr	r2, [pc, #136]	; (8001cb4 <HAL_GPIO_Init+0x1dc>)
 8001c2c:	4290      	cmp	r0, r2
 8001c2e:	f43f af5c 	beq.w	8001aea <HAL_GPIO_Init+0x12>
 8001c32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c36:	4290      	cmp	r0, r2
 8001c38:	d022      	beq.n	8001c80 <HAL_GPIO_Init+0x1a8>
 8001c3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c3e:	4290      	cmp	r0, r2
 8001c40:	d020      	beq.n	8001c84 <HAL_GPIO_Init+0x1ac>
 8001c42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c46:	4290      	cmp	r0, r2
 8001c48:	d01e      	beq.n	8001c88 <HAL_GPIO_Init+0x1b0>
 8001c4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c4e:	4290      	cmp	r0, r2
 8001c50:	d01c      	beq.n	8001c8c <HAL_GPIO_Init+0x1b4>
 8001c52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c56:	4290      	cmp	r0, r2
 8001c58:	d01a      	beq.n	8001c90 <HAL_GPIO_Init+0x1b8>
 8001c5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c5e:	4290      	cmp	r0, r2
 8001c60:	d018      	beq.n	8001c94 <HAL_GPIO_Init+0x1bc>
 8001c62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c66:	4290      	cmp	r0, r2
 8001c68:	d016      	beq.n	8001c98 <HAL_GPIO_Init+0x1c0>
 8001c6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c6e:	4290      	cmp	r0, r2
 8001c70:	d014      	beq.n	8001c9c <HAL_GPIO_Init+0x1c4>
 8001c72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c76:	4290      	cmp	r0, r2
 8001c78:	f43f af35 	beq.w	8001ae6 <HAL_GPIO_Init+0xe>
 8001c7c:	220a      	movs	r2, #10
 8001c7e:	e735      	b.n	8001aec <HAL_GPIO_Init+0x14>
 8001c80:	2201      	movs	r2, #1
 8001c82:	e733      	b.n	8001aec <HAL_GPIO_Init+0x14>
 8001c84:	2202      	movs	r2, #2
 8001c86:	e731      	b.n	8001aec <HAL_GPIO_Init+0x14>
 8001c88:	2203      	movs	r2, #3
 8001c8a:	e72f      	b.n	8001aec <HAL_GPIO_Init+0x14>
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	e72d      	b.n	8001aec <HAL_GPIO_Init+0x14>
 8001c90:	2205      	movs	r2, #5
 8001c92:	e72b      	b.n	8001aec <HAL_GPIO_Init+0x14>
 8001c94:	2206      	movs	r2, #6
 8001c96:	e729      	b.n	8001aec <HAL_GPIO_Init+0x14>
 8001c98:	2207      	movs	r2, #7
 8001c9a:	e727      	b.n	8001aec <HAL_GPIO_Init+0x14>
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	e725      	b.n	8001aec <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001ca0:	b002      	add	sp, #8
 8001ca2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	4770      	bx	lr
 8001ca8:	40013800 	.word	0x40013800
 8001cac:	40013c00 	.word	0x40013c00
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020000 	.word	0x40020000

08001cb8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001cb8:	6803      	ldr	r3, [r0, #0]
 8001cba:	699a      	ldr	r2, [r3, #24]
 8001cbc:	f012 0f02 	tst.w	r2, #2
 8001cc0:	d001      	beq.n	8001cc6 <I2C_Flush_TXDR+0xe>
  {
     hi2c->Instance->TXDR = 0x00U;
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cc6:	6803      	ldr	r3, [r0, #0]
 8001cc8:	699a      	ldr	r2, [r3, #24]
 8001cca:	f012 0f01 	tst.w	r2, #1
 8001cce:	d103      	bne.n	8001cd8 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001cd0:	699a      	ldr	r2, [r3, #24]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	619a      	str	r2, [r3, #24]
  }
}
 8001cd8:	4770      	bx	lr

08001cda <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001cda:	b410      	push	{r4}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8001cdc:	6804      	ldr	r4, [r0, #0]
 8001cde:	6860      	ldr	r0, [r4, #4]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001ce0:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 8001ce4:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
 8001ce8:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8001cec:	f020 0003 	bic.w	r0, r0, #3

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8001cf0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001cf4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001cf8:	4319      	orrs	r1, r3
 8001cfa:	9b01      	ldr	r3, [sp, #4]
 8001cfc:	4319      	orrs	r1, r3
 8001cfe:	4301      	orrs	r1, r0
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8001d00:	6061      	str	r1, [r4, #4]
}
 8001d02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <I2C_IsAcknowledgeFailed>:
{
 8001d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d0a:	4605      	mov	r5, r0
 8001d0c:	460e      	mov	r6, r1
 8001d0e:	4617      	mov	r7, r2
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d10:	6803      	ldr	r3, [r0, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f013 0f10 	tst.w	r3, #16
 8001d18:	d101      	bne.n	8001d1e <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8001d1a:	2000      	movs	r0, #0
}
 8001d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d1e:	682b      	ldr	r3, [r5, #0]
 8001d20:	699c      	ldr	r4, [r3, #24]
 8001d22:	f014 0f20 	tst.w	r4, #32
 8001d26:	d112      	bne.n	8001d4e <I2C_IsAcknowledgeFailed+0x46>
      if(Timeout != HAL_MAX_DELAY)
 8001d28:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001d2c:	d0f7      	beq.n	8001d1e <I2C_IsAcknowledgeFailed+0x16>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001d2e:	b126      	cbz	r6, 8001d3a <I2C_IsAcknowledgeFailed+0x32>
 8001d30:	f7ff fbc0 	bl	80014b4 <HAL_GetTick>
 8001d34:	1bc0      	subs	r0, r0, r7
 8001d36:	42b0      	cmp	r0, r6
 8001d38:	d9f1      	bls.n	8001d1e <I2C_IsAcknowledgeFailed+0x16>
          hi2c->State= HAL_I2C_STATE_READY;
 8001d3a:	2320      	movs	r3, #32
 8001d3c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8001d46:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_TIMEOUT;
 8001d4a:	2003      	movs	r0, #3
 8001d4c:	e7e6      	b.n	8001d1c <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d4e:	2210      	movs	r2, #16
 8001d50:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d52:	682b      	ldr	r3, [r5, #0]
 8001d54:	2420      	movs	r4, #32
 8001d56:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001d58:	4628      	mov	r0, r5
 8001d5a:	f7ff ffad 	bl	8001cb8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001d5e:	682a      	ldr	r2, [r5, #0]
 8001d60:	6853      	ldr	r3, [r2, #4]
 8001d62:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001d66:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001d6a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001d74:	2304      	movs	r3, #4
 8001d76:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 8001d78:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001d82:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8001d86:	2001      	movs	r0, #1
 8001d88:	e7c8      	b.n	8001d1c <I2C_IsAcknowledgeFailed+0x14>

08001d8a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001d8a:	b570      	push	{r4, r5, r6, lr}
 8001d8c:	4604      	mov	r4, r0
 8001d8e:	460d      	mov	r5, r1
 8001d90:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f013 0f02 	tst.w	r3, #2
 8001d9a:	d11c      	bne.n	8001dd6 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d9c:	4632      	mov	r2, r6
 8001d9e:	4629      	mov	r1, r5
 8001da0:	4620      	mov	r0, r4
 8001da2:	f7ff ffb1 	bl	8001d08 <I2C_IsAcknowledgeFailed>
 8001da6:	b9c0      	cbnz	r0, 8001dda <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8001da8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001dac:	d0f1      	beq.n	8001d92 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001dae:	b125      	cbz	r5, 8001dba <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8001db0:	f7ff fb80 	bl	80014b4 <HAL_GetTick>
 8001db4:	1b80      	subs	r0, r0, r6
 8001db6:	42a8      	cmp	r0, r5
 8001db8:	d9eb      	bls.n	8001d92 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001dbc:	f043 0320 	orr.w	r3, r3, #32
 8001dc0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 8001dc2:	2320      	movs	r3, #32
 8001dc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001dce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8001dd2:	2003      	movs	r0, #3
 8001dd4:	e000      	b.n	8001dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001dd6:	2000      	movs	r0, #0
}
 8001dd8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001dda:	2001      	movs	r0, #1
 8001ddc:	e7fc      	b.n	8001dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

08001dde <I2C_WaitOnFlagUntilTimeout>:
{
 8001dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001de2:	4606      	mov	r6, r0
 8001de4:	4688      	mov	r8, r1
 8001de6:	4617      	mov	r7, r2
 8001de8:	461d      	mov	r5, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dea:	6834      	ldr	r4, [r6, #0]
 8001dec:	69a4      	ldr	r4, [r4, #24]
 8001dee:	ea38 0304 	bics.w	r3, r8, r4
 8001df2:	bf0c      	ite	eq
 8001df4:	2401      	moveq	r4, #1
 8001df6:	2400      	movne	r4, #0
 8001df8:	42bc      	cmp	r4, r7
 8001dfa:	d113      	bne.n	8001e24 <I2C_WaitOnFlagUntilTimeout+0x46>
    if(Timeout != HAL_MAX_DELAY)
 8001dfc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001e00:	d0f3      	beq.n	8001dea <I2C_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001e02:	b12d      	cbz	r5, 8001e10 <I2C_WaitOnFlagUntilTimeout+0x32>
 8001e04:	f7ff fb56 	bl	80014b4 <HAL_GetTick>
 8001e08:	9b06      	ldr	r3, [sp, #24]
 8001e0a:	1ac0      	subs	r0, r0, r3
 8001e0c:	42a8      	cmp	r0, r5
 8001e0e:	d9ec      	bls.n	8001dea <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->State= HAL_I2C_STATE_READY;
 8001e10:	2320      	movs	r3, #32
 8001e12:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001e1c:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_TIMEOUT;
 8001e20:	2003      	movs	r0, #3
 8001e22:	e000      	b.n	8001e26 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8001e24:	2000      	movs	r0, #0
}
 8001e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e2a <I2C_RequestMemoryWrite>:
{
 8001e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	4604      	mov	r4, r0
 8001e32:	4690      	mov	r8, r2
 8001e34:	461d      	mov	r5, r3
 8001e36:	9e08      	ldr	r6, [sp, #32]
 8001e38:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e44:	b2ea      	uxtb	r2, r5
 8001e46:	f7ff ff48 	bl	8001cda <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e4a:	463a      	mov	r2, r7
 8001e4c:	4631      	mov	r1, r6
 8001e4e:	4620      	mov	r0, r4
 8001e50:	f7ff ff9b 	bl	8001d8a <I2C_WaitOnTXISFlagUntilTimeout>
 8001e54:	b130      	cbz	r0, 8001e64 <I2C_RequestMemoryWrite+0x3a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d001      	beq.n	8001e60 <I2C_RequestMemoryWrite+0x36>
      return HAL_TIMEOUT;
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	e00f      	b.n	8001e80 <I2C_RequestMemoryWrite+0x56>
      return HAL_ERROR;
 8001e60:	2001      	movs	r0, #1
 8001e62:	e00d      	b.n	8001e80 <I2C_RequestMemoryWrite+0x56>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e64:	2d01      	cmp	r5, #1
 8001e66:	d10e      	bne.n	8001e86 <I2C_RequestMemoryWrite+0x5c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	fa5f f288 	uxtb.w	r2, r8
 8001e6e:	629a      	str	r2, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001e70:	9700      	str	r7, [sp, #0]
 8001e72:	4633      	mov	r3, r6
 8001e74:	2200      	movs	r2, #0
 8001e76:	2180      	movs	r1, #128	; 0x80
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f7ff ffb0 	bl	8001dde <I2C_WaitOnFlagUntilTimeout>
 8001e7e:	b9c0      	cbnz	r0, 8001eb2 <I2C_RequestMemoryWrite+0x88>
}
 8001e80:	b002      	add	sp, #8
 8001e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e8e:	463a      	mov	r2, r7
 8001e90:	4631      	mov	r1, r6
 8001e92:	4620      	mov	r0, r4
 8001e94:	f7ff ff79 	bl	8001d8a <I2C_WaitOnTXISFlagUntilTimeout>
 8001e98:	b130      	cbz	r0, 8001ea8 <I2C_RequestMemoryWrite+0x7e>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d001      	beq.n	8001ea4 <I2C_RequestMemoryWrite+0x7a>
        return HAL_TIMEOUT;
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	e7ed      	b.n	8001e80 <I2C_RequestMemoryWrite+0x56>
        return HAL_ERROR;
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	e7eb      	b.n	8001e80 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	fa5f f288 	uxtb.w	r2, r8
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28
 8001eb0:	e7de      	b.n	8001e70 <I2C_RequestMemoryWrite+0x46>
    return HAL_TIMEOUT;
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	e7e4      	b.n	8001e80 <I2C_RequestMemoryWrite+0x56>

08001eb6 <I2C_RequestMemoryRead>:
{
 8001eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	4604      	mov	r4, r0
 8001ebe:	4690      	mov	r8, r2
 8001ec0:	461d      	mov	r5, r3
 8001ec2:	9e08      	ldr	r6, [sp, #32]
 8001ec4:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001ec6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	b2ea      	uxtb	r2, r5
 8001ed0:	f7ff ff03 	bl	8001cda <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ed4:	463a      	mov	r2, r7
 8001ed6:	4631      	mov	r1, r6
 8001ed8:	4620      	mov	r0, r4
 8001eda:	f7ff ff56 	bl	8001d8a <I2C_WaitOnTXISFlagUntilTimeout>
 8001ede:	b130      	cbz	r0, 8001eee <I2C_RequestMemoryRead+0x38>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ee0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d001      	beq.n	8001eea <I2C_RequestMemoryRead+0x34>
      return HAL_TIMEOUT;
 8001ee6:	2003      	movs	r0, #3
 8001ee8:	e00f      	b.n	8001f0a <I2C_RequestMemoryRead+0x54>
      return HAL_ERROR;
 8001eea:	2001      	movs	r0, #1
 8001eec:	e00d      	b.n	8001f0a <I2C_RequestMemoryRead+0x54>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001eee:	2d01      	cmp	r5, #1
 8001ef0:	d10e      	bne.n	8001f10 <I2C_RequestMemoryRead+0x5a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	fa5f f288 	uxtb.w	r2, r8
 8001ef8:	629a      	str	r2, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001efa:	9700      	str	r7, [sp, #0]
 8001efc:	4633      	mov	r3, r6
 8001efe:	2200      	movs	r2, #0
 8001f00:	2140      	movs	r1, #64	; 0x40
 8001f02:	4620      	mov	r0, r4
 8001f04:	f7ff ff6b 	bl	8001dde <I2C_WaitOnFlagUntilTimeout>
 8001f08:	b9c0      	cbnz	r0, 8001f3c <I2C_RequestMemoryRead+0x86>
}
 8001f0a:	b002      	add	sp, #8
 8001f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001f16:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f18:	463a      	mov	r2, r7
 8001f1a:	4631      	mov	r1, r6
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f7ff ff34 	bl	8001d8a <I2C_WaitOnTXISFlagUntilTimeout>
 8001f22:	b130      	cbz	r0, 8001f32 <I2C_RequestMemoryRead+0x7c>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f24:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d001      	beq.n	8001f2e <I2C_RequestMemoryRead+0x78>
        return HAL_TIMEOUT;
 8001f2a:	2003      	movs	r0, #3
 8001f2c:	e7ed      	b.n	8001f0a <I2C_RequestMemoryRead+0x54>
        return HAL_ERROR;
 8001f2e:	2001      	movs	r0, #1
 8001f30:	e7eb      	b.n	8001f0a <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	fa5f f288 	uxtb.w	r2, r8
 8001f38:	629a      	str	r2, [r3, #40]	; 0x28
 8001f3a:	e7de      	b.n	8001efa <I2C_RequestMemoryRead+0x44>
    return HAL_TIMEOUT;
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	e7e4      	b.n	8001f0a <I2C_RequestMemoryRead+0x54>

08001f40 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001f40:	b570      	push	{r4, r5, r6, lr}
 8001f42:	4605      	mov	r5, r0
 8001f44:	460c      	mov	r4, r1
 8001f46:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f48:	682b      	ldr	r3, [r5, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f013 0f20 	tst.w	r3, #32
 8001f50:	d119      	bne.n	8001f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f52:	4632      	mov	r2, r6
 8001f54:	4621      	mov	r1, r4
 8001f56:	4628      	mov	r0, r5
 8001f58:	f7ff fed6 	bl	8001d08 <I2C_IsAcknowledgeFailed>
 8001f5c:	b9a8      	cbnz	r0, 8001f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001f5e:	b124      	cbz	r4, 8001f6a <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
 8001f60:	f7ff faa8 	bl	80014b4 <HAL_GetTick>
 8001f64:	1b80      	subs	r0, r0, r6
 8001f66:	42a0      	cmp	r0, r4
 8001f68:	d9ee      	bls.n	8001f48 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f6a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001f6c:	f043 0320 	orr.w	r3, r3, #32
 8001f70:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8001f72:	2320      	movs	r3, #32
 8001f74:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001f7e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_TIMEOUT;
 8001f82:	2003      	movs	r0, #3
}
 8001f84:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001f86:	2000      	movs	r0, #0
 8001f88:	e7fc      	b.n	8001f84 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
      return HAL_ERROR;
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	e7fa      	b.n	8001f84 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

08001f8e <HAL_I2C_MspInit>:
}
 8001f8e:	4770      	bx	lr

08001f90 <HAL_I2C_Init>:
  if(hi2c == NULL)
 8001f90:	2800      	cmp	r0, #0
 8001f92:	d057      	beq.n	8002044 <HAL_I2C_Init+0xb4>
{
 8001f94:	b510      	push	{r4, lr}
 8001f96:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001f98:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d041      	beq.n	8002024 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa0:	2324      	movs	r3, #36	; 0x24
 8001fa2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001fa6:	6822      	ldr	r2, [r4, #0]
 8001fa8:	6813      	ldr	r3, [r2, #0]
 8001faa:	f023 0301 	bic.w	r3, r3, #1
 8001fae:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fb0:	6863      	ldr	r3, [r4, #4]
 8001fb2:	6822      	ldr	r2, [r4, #0]
 8001fb4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001fb8:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fba:	6822      	ldr	r2, [r4, #0]
 8001fbc:	6893      	ldr	r3, [r2, #8]
 8001fbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001fc2:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fc4:	68e3      	ldr	r3, [r4, #12]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d031      	beq.n	800202e <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fca:	68a3      	ldr	r3, [r4, #8]
 8001fcc:	6822      	ldr	r2, [r4, #0]
 8001fce:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001fd2:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fd4:	68e3      	ldr	r3, [r4, #12]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d02f      	beq.n	800203a <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fda:	6822      	ldr	r2, [r4, #0]
 8001fdc:	6851      	ldr	r1, [r2, #4]
 8001fde:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <HAL_I2C_Init+0xb8>)
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fe4:	6822      	ldr	r2, [r4, #0]
 8001fe6:	68d3      	ldr	r3, [r2, #12]
 8001fe8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001fec:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001fee:	6923      	ldr	r3, [r4, #16]
 8001ff0:	6962      	ldr	r2, [r4, #20]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	69a1      	ldr	r1, [r4, #24]
 8001ff6:	6822      	ldr	r2, [r4, #0]
 8001ff8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001ffc:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ffe:	69e3      	ldr	r3, [r4, #28]
 8002000:	6a21      	ldr	r1, [r4, #32]
 8002002:	6822      	ldr	r2, [r4, #0]
 8002004:	430b      	orrs	r3, r1
 8002006:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002008:	6822      	ldr	r2, [r4, #0]
 800200a:	6813      	ldr	r3, [r2, #0]
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002012:	2000      	movs	r0, #0
 8002014:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002016:	2320      	movs	r3, #32
 8002018:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800201c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800201e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002022:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002024:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002028:	f7ff ffb1 	bl	8001f8e <HAL_I2C_MspInit>
 800202c:	e7b8      	b.n	8001fa0 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800202e:	68a3      	ldr	r3, [r4, #8]
 8002030:	6822      	ldr	r2, [r4, #0]
 8002032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002036:	6093      	str	r3, [r2, #8]
 8002038:	e7cc      	b.n	8001fd4 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800203a:	6823      	ldr	r3, [r4, #0]
 800203c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	e7ca      	b.n	8001fda <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002044:	2001      	movs	r0, #1
}
 8002046:	4770      	bx	lr
 8002048:	02008000 	.word	0x02008000

0800204c <HAL_I2C_MspDeInit>:
}
 800204c:	4770      	bx	lr

0800204e <HAL_I2C_DeInit>:
  if(hi2c == NULL)
 800204e:	b1a8      	cbz	r0, 800207c <HAL_I2C_DeInit+0x2e>
{
 8002050:	b510      	push	{r4, lr}
 8002052:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002054:	2324      	movs	r3, #36	; 0x24
 8002056:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800205a:	6802      	ldr	r2, [r0, #0]
 800205c:	6813      	ldr	r3, [r2, #0]
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002064:	f7ff fff2 	bl	800204c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002068:	2000      	movs	r0, #0
 800206a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800206c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002070:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002072:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 8002076:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800207a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800207c:	2001      	movs	r0, #1
}
 800207e:	4770      	bx	lr

08002080 <HAL_I2C_Mem_Write>:
{
 8002080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002084:	b083      	sub	sp, #12
 8002086:	460d      	mov	r5, r1
 8002088:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800208c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if(hi2c->State == HAL_I2C_STATE_READY)
 800208e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8002092:	b2c9      	uxtb	r1, r1
 8002094:	2920      	cmp	r1, #32
 8002096:	f040 80d1 	bne.w	800223c <HAL_I2C_Mem_Write+0x1bc>
 800209a:	4604      	mov	r4, r0
 800209c:	4690      	mov	r8, r2
 800209e:	4699      	mov	r9, r3
    if((pData == NULL) || (Size == 0U))
 80020a0:	faba f38a 	clz	r3, sl
 80020a4:	095b      	lsrs	r3, r3, #5
 80020a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80020a8:	2a00      	cmp	r2, #0
 80020aa:	bf08      	it	eq
 80020ac:	2301      	moveq	r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 80c8 	bne.w	8002244 <HAL_I2C_Mem_Write+0x1c4>
    __HAL_LOCK(hi2c);
 80020b4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	f000 80c5 	beq.w	8002248 <HAL_I2C_Mem_Write+0x1c8>
 80020be:	f04f 0b01 	mov.w	fp, #1
 80020c2:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80020c6:	f7ff f9f5 	bl	80014b4 <HAL_GetTick>
 80020ca:	4606      	mov	r6, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020cc:	9000      	str	r0, [sp, #0]
 80020ce:	2319      	movs	r3, #25
 80020d0:	465a      	mov	r2, fp
 80020d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020d6:	4620      	mov	r0, r4
 80020d8:	f7ff fe81 	bl	8001dde <I2C_WaitOnFlagUntilTimeout>
 80020dc:	2800      	cmp	r0, #0
 80020de:	f040 80b5 	bne.w	800224c <HAL_I2C_Mem_Write+0x1cc>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020e2:	2321      	movs	r3, #33	; 0x21
 80020e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020e8:	2340      	movs	r3, #64	; 0x40
 80020ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80020f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80020f4:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80020f6:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020fa:	6363      	str	r3, [r4, #52]	; 0x34
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020fc:	9601      	str	r6, [sp, #4]
 80020fe:	9700      	str	r7, [sp, #0]
 8002100:	464b      	mov	r3, r9
 8002102:	4642      	mov	r2, r8
 8002104:	4629      	mov	r1, r5
 8002106:	4620      	mov	r0, r4
 8002108:	f7ff fe8f 	bl	8001e2a <I2C_RequestMemoryWrite>
 800210c:	b160      	cbz	r0, 8002128 <HAL_I2C_Mem_Write+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800210e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002110:	2b04      	cmp	r3, #4
 8002112:	d004      	beq.n	800211e <HAL_I2C_Mem_Write+0x9e>
        __HAL_UNLOCK(hi2c);
 8002114:	2300      	movs	r3, #0
 8002116:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800211a:	2003      	movs	r0, #3
 800211c:	e08f      	b.n	800223e <HAL_I2C_Mem_Write+0x1be>
        __HAL_UNLOCK(hi2c);
 800211e:	2300      	movs	r3, #0
 8002120:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002124:	4658      	mov	r0, fp
 8002126:	e08a      	b.n	800223e <HAL_I2C_Mem_Write+0x1be>
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002128:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800212a:	b29b      	uxth	r3, r3
 800212c:	2bff      	cmp	r3, #255	; 0xff
 800212e:	d90a      	bls.n	8002146 <HAL_I2C_Mem_Write+0xc6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002130:	22ff      	movs	r2, #255	; 0xff
 8002132:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002134:	2300      	movs	r3, #0
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800213c:	4629      	mov	r1, r5
 800213e:	4620      	mov	r0, r4
 8002140:	f7ff fdcb 	bl	8001cda <I2C_TransferConfig>
 8002144:	e023      	b.n	800218e <HAL_I2C_Mem_Write+0x10e>
      hi2c->XferSize = hi2c->XferCount;
 8002146:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002148:	b292      	uxth	r2, r2
 800214a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800214c:	2300      	movs	r3, #0
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	4629      	mov	r1, r5
 8002158:	4620      	mov	r0, r4
 800215a:	f7ff fdbe 	bl	8001cda <I2C_TransferConfig>
 800215e:	e016      	b.n	800218e <HAL_I2C_Mem_Write+0x10e>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002160:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002162:	2b04      	cmp	r3, #4
 8002164:	d001      	beq.n	800216a <HAL_I2C_Mem_Write+0xea>
          return HAL_TIMEOUT;
 8002166:	2003      	movs	r0, #3
 8002168:	e069      	b.n	800223e <HAL_I2C_Mem_Write+0x1be>
          return HAL_ERROR;
 800216a:	2001      	movs	r0, #1
 800216c:	e067      	b.n	800223e <HAL_I2C_Mem_Write+0x1be>
          hi2c->XferSize = hi2c->XferCount;
 800216e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002170:	b292      	uxth	r2, r2
 8002172:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002174:	2300      	movs	r3, #0
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	4629      	mov	r1, r5
 8002180:	4620      	mov	r0, r4
 8002182:	f7ff fdaa 	bl	8001cda <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 8002186:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d033      	beq.n	80021f6 <HAL_I2C_Mem_Write+0x176>
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800218e:	4632      	mov	r2, r6
 8002190:	4639      	mov	r1, r7
 8002192:	4620      	mov	r0, r4
 8002194:	f7ff fdf9 	bl	8001d8a <I2C_WaitOnTXISFlagUntilTimeout>
 8002198:	2800      	cmp	r0, #0
 800219a:	d1e1      	bne.n	8002160 <HAL_I2C_Mem_Write+0xe0>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800219c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	6262      	str	r2, [r4, #36]	; 0x24
 80021a2:	6822      	ldr	r2, [r4, #0]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80021a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80021b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	8523      	strh	r3, [r4, #40]	; 0x28
      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1e3      	bne.n	8002186 <HAL_I2C_Mem_Write+0x106>
 80021be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0df      	beq.n	8002186 <HAL_I2C_Mem_Write+0x106>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021c6:	9600      	str	r6, [sp, #0]
 80021c8:	463b      	mov	r3, r7
 80021ca:	2200      	movs	r2, #0
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	4620      	mov	r0, r4
 80021d0:	f7ff fe05 	bl	8001dde <I2C_WaitOnFlagUntilTimeout>
 80021d4:	2800      	cmp	r0, #0
 80021d6:	d13b      	bne.n	8002250 <HAL_I2C_Mem_Write+0x1d0>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80021d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021da:	b29b      	uxth	r3, r3
 80021dc:	2bff      	cmp	r3, #255	; 0xff
 80021de:	d9c6      	bls.n	800216e <HAL_I2C_Mem_Write+0xee>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021e0:	22ff      	movs	r2, #255	; 0xff
 80021e2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021e4:	2300      	movs	r3, #0
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021ec:	4629      	mov	r1, r5
 80021ee:	4620      	mov	r0, r4
 80021f0:	f7ff fd73 	bl	8001cda <I2C_TransferConfig>
 80021f4:	e7c7      	b.n	8002186 <HAL_I2C_Mem_Write+0x106>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f6:	4632      	mov	r2, r6
 80021f8:	4639      	mov	r1, r7
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7ff fea0 	bl	8001f40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002200:	b130      	cbz	r0, 8002210 <HAL_I2C_Mem_Write+0x190>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002202:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002204:	2b04      	cmp	r3, #4
 8002206:	d001      	beq.n	800220c <HAL_I2C_Mem_Write+0x18c>
        return HAL_TIMEOUT;
 8002208:	2003      	movs	r0, #3
 800220a:	e018      	b.n	800223e <HAL_I2C_Mem_Write+0x1be>
        return HAL_ERROR;
 800220c:	2001      	movs	r0, #1
 800220e:	e016      	b.n	800223e <HAL_I2C_Mem_Write+0x1be>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	2220      	movs	r2, #32
 8002214:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002216:	6821      	ldr	r1, [r4, #0]
 8002218:	684b      	ldr	r3, [r1, #4]
 800221a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800221e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002222:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002226:	f023 0301 	bic.w	r3, r3, #1
 800222a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800222c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002230:	2300      	movs	r3, #0
 8002232:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002236:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800223a:	e000      	b.n	800223e <HAL_I2C_Mem_Write+0x1be>
    return HAL_BUSY;
 800223c:	2002      	movs	r0, #2
}
 800223e:	b003      	add	sp, #12
 8002240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 8002244:	2001      	movs	r0, #1
 8002246:	e7fa      	b.n	800223e <HAL_I2C_Mem_Write+0x1be>
    __HAL_LOCK(hi2c);
 8002248:	2002      	movs	r0, #2
 800224a:	e7f8      	b.n	800223e <HAL_I2C_Mem_Write+0x1be>
      return HAL_TIMEOUT;
 800224c:	2003      	movs	r0, #3
 800224e:	e7f6      	b.n	800223e <HAL_I2C_Mem_Write+0x1be>
          return HAL_TIMEOUT;
 8002250:	2003      	movs	r0, #3
 8002252:	e7f4      	b.n	800223e <HAL_I2C_Mem_Write+0x1be>

08002254 <HAL_I2C_Mem_Read>:
{
 8002254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002258:	b083      	sub	sp, #12
 800225a:	460d      	mov	r5, r1
 800225c:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8002260:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002262:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8002266:	b2c9      	uxtb	r1, r1
 8002268:	2920      	cmp	r1, #32
 800226a:	f040 80cd 	bne.w	8002408 <HAL_I2C_Mem_Read+0x1b4>
 800226e:	4604      	mov	r4, r0
 8002270:	4690      	mov	r8, r2
 8002272:	4699      	mov	r9, r3
    if((pData == NULL) || (Size == 0U))
 8002274:	faba f38a 	clz	r3, sl
 8002278:	095b      	lsrs	r3, r3, #5
 800227a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800227c:	2a00      	cmp	r2, #0
 800227e:	bf08      	it	eq
 8002280:	2301      	moveq	r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 80c4 	bne.w	8002410 <HAL_I2C_Mem_Read+0x1bc>
    __HAL_LOCK(hi2c);
 8002288:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800228c:	2b01      	cmp	r3, #1
 800228e:	f000 80c1 	beq.w	8002414 <HAL_I2C_Mem_Read+0x1c0>
 8002292:	f04f 0b01 	mov.w	fp, #1
 8002296:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800229a:	f7ff f90b 	bl	80014b4 <HAL_GetTick>
 800229e:	4606      	mov	r6, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022a0:	9000      	str	r0, [sp, #0]
 80022a2:	2319      	movs	r3, #25
 80022a4:	465a      	mov	r2, fp
 80022a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022aa:	4620      	mov	r0, r4
 80022ac:	f7ff fd97 	bl	8001dde <I2C_WaitOnFlagUntilTimeout>
 80022b0:	2800      	cmp	r0, #0
 80022b2:	f040 80b1 	bne.w	8002418 <HAL_I2C_Mem_Read+0x1c4>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022b6:	2322      	movs	r3, #34	; 0x22
 80022b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022bc:	2340      	movs	r3, #64	; 0x40
 80022be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80022c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80022c8:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80022ca:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022ce:	6363      	str	r3, [r4, #52]	; 0x34
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022d0:	9601      	str	r6, [sp, #4]
 80022d2:	9700      	str	r7, [sp, #0]
 80022d4:	464b      	mov	r3, r9
 80022d6:	4642      	mov	r2, r8
 80022d8:	4629      	mov	r1, r5
 80022da:	4620      	mov	r0, r4
 80022dc:	f7ff fdeb 	bl	8001eb6 <I2C_RequestMemoryRead>
 80022e0:	b160      	cbz	r0, 80022fc <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d004      	beq.n	80022f2 <HAL_I2C_Mem_Read+0x9e>
        __HAL_UNLOCK(hi2c);
 80022e8:	2300      	movs	r3, #0
 80022ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 80022ee:	2003      	movs	r0, #3
 80022f0:	e08b      	b.n	800240a <HAL_I2C_Mem_Read+0x1b6>
        __HAL_UNLOCK(hi2c);
 80022f2:	2300      	movs	r3, #0
 80022f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80022f8:	4658      	mov	r0, fp
 80022fa:	e086      	b.n	800240a <HAL_I2C_Mem_Read+0x1b6>
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80022fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2bff      	cmp	r3, #255	; 0xff
 8002302:	d90b      	bls.n	800231c <HAL_I2C_Mem_Read+0xc8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002304:	22ff      	movs	r2, #255	; 0xff
 8002306:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002308:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002312:	4629      	mov	r1, r5
 8002314:	4620      	mov	r0, r4
 8002316:	f7ff fce0 	bl	8001cda <I2C_TransferConfig>
 800231a:	e01d      	b.n	8002358 <HAL_I2C_Mem_Read+0x104>
      hi2c->XferSize = hi2c->XferCount;
 800231c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800231e:	b292      	uxth	r2, r2
 8002320:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002322:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	4629      	mov	r1, r5
 8002330:	4620      	mov	r0, r4
 8002332:	f7ff fcd2 	bl	8001cda <I2C_TransferConfig>
 8002336:	e00f      	b.n	8002358 <HAL_I2C_Mem_Read+0x104>
          hi2c->XferSize = hi2c->XferCount;
 8002338:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800233a:	b292      	uxth	r2, r2
 800233c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800233e:	2300      	movs	r3, #0
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	4629      	mov	r1, r5
 800234a:	4620      	mov	r0, r4
 800234c:	f7ff fcc5 	bl	8001cda <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 8002350:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002352:	b29b      	uxth	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d034      	beq.n	80023c2 <HAL_I2C_Mem_Read+0x16e>
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002358:	9600      	str	r6, [sp, #0]
 800235a:	463b      	mov	r3, r7
 800235c:	2200      	movs	r2, #0
 800235e:	2104      	movs	r1, #4
 8002360:	4620      	mov	r0, r4
 8002362:	f7ff fd3c 	bl	8001dde <I2C_WaitOnFlagUntilTimeout>
 8002366:	2800      	cmp	r0, #0
 8002368:	d158      	bne.n	800241c <HAL_I2C_Mem_Read+0x1c8>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800236a:	6823      	ldr	r3, [r4, #0]
 800236c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800236e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002370:	1c59      	adds	r1, r3, #1
 8002372:	6261      	str	r1, [r4, #36]	; 0x24
 8002374:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8002376:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002378:	3a01      	subs	r2, #1
 800237a:	b292      	uxth	r2, r2
 800237c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800237e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29b      	uxth	r3, r3
 8002386:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002388:	2a00      	cmp	r2, #0
 800238a:	d1e1      	bne.n	8002350 <HAL_I2C_Mem_Read+0xfc>
 800238c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800238e:	b29b      	uxth	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0dd      	beq.n	8002350 <HAL_I2C_Mem_Read+0xfc>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002394:	9600      	str	r6, [sp, #0]
 8002396:	463b      	mov	r3, r7
 8002398:	2180      	movs	r1, #128	; 0x80
 800239a:	4620      	mov	r0, r4
 800239c:	f7ff fd1f 	bl	8001dde <I2C_WaitOnFlagUntilTimeout>
 80023a0:	2800      	cmp	r0, #0
 80023a2:	d13d      	bne.n	8002420 <HAL_I2C_Mem_Read+0x1cc>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80023a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2bff      	cmp	r3, #255	; 0xff
 80023aa:	d9c5      	bls.n	8002338 <HAL_I2C_Mem_Read+0xe4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023ac:	22ff      	movs	r2, #255	; 0xff
 80023ae:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023b0:	2300      	movs	r3, #0
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023b8:	4629      	mov	r1, r5
 80023ba:	4620      	mov	r0, r4
 80023bc:	f7ff fc8d 	bl	8001cda <I2C_TransferConfig>
 80023c0:	e7c6      	b.n	8002350 <HAL_I2C_Mem_Read+0xfc>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c2:	4632      	mov	r2, r6
 80023c4:	4639      	mov	r1, r7
 80023c6:	4620      	mov	r0, r4
 80023c8:	f7ff fdba 	bl	8001f40 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023cc:	b130      	cbz	r0, 80023dc <HAL_I2C_Mem_Read+0x188>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d001      	beq.n	80023d8 <HAL_I2C_Mem_Read+0x184>
        return HAL_TIMEOUT;
 80023d4:	2003      	movs	r0, #3
 80023d6:	e018      	b.n	800240a <HAL_I2C_Mem_Read+0x1b6>
        return HAL_ERROR;
 80023d8:	2001      	movs	r0, #1
 80023da:	e016      	b.n	800240a <HAL_I2C_Mem_Read+0x1b6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	2220      	movs	r2, #32
 80023e0:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80023e2:	6821      	ldr	r1, [r4, #0]
 80023e4:	684b      	ldr	r3, [r1, #4]
 80023e6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80023ea:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80023ee:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80023f2:	f023 0301 	bic.w	r3, r3, #1
 80023f6:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80023f8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002402:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8002406:	e000      	b.n	800240a <HAL_I2C_Mem_Read+0x1b6>
    return HAL_BUSY;
 8002408:	2002      	movs	r0, #2
}
 800240a:	b003      	add	sp, #12
 800240c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 8002410:	2001      	movs	r0, #1
 8002412:	e7fa      	b.n	800240a <HAL_I2C_Mem_Read+0x1b6>
    __HAL_LOCK(hi2c);
 8002414:	2002      	movs	r0, #2
 8002416:	e7f8      	b.n	800240a <HAL_I2C_Mem_Read+0x1b6>
      return HAL_TIMEOUT;
 8002418:	2003      	movs	r0, #3
 800241a:	e7f6      	b.n	800240a <HAL_I2C_Mem_Read+0x1b6>
        return HAL_TIMEOUT;
 800241c:	2003      	movs	r0, #3
 800241e:	e7f4      	b.n	800240a <HAL_I2C_Mem_Read+0x1b6>
          return HAL_TIMEOUT;
 8002420:	2003      	movs	r0, #3
 8002422:	e7f2      	b.n	800240a <HAL_I2C_Mem_Read+0x1b6>

08002424 <HAL_I2C_GetState>:
  return hi2c->State;
 8002424:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8002428:	4770      	bx	lr
	...

0800242c <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800242c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800242e:	6807      	ldr	r7, [r0, #0]
 8002430:	3750      	adds	r7, #80	; 0x50

  i = 0;
 8002432:	2500      	movs	r5, #0
  uint32_t quality = 0;
 8002434:	462c      	mov	r4, r5
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8002436:	e027      	b.n	8002488 <JPEG_GetQuality+0x5c>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
      if (quantVal == 1UL)
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8002438:	3464      	adds	r4, #100	; 0x64
    for (j = 0; j < 4UL; j++)
 800243a:	3101      	adds	r1, #1
 800243c:	2903      	cmp	r1, #3
 800243e:	d821      	bhi.n	8002484 <JPEG_GetQuality+0x58>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8002440:	00cb      	lsls	r3, r1, #3
 8002442:	fa26 f303 	lsr.w	r3, r6, r3
 8002446:	b2db      	uxtb	r3, r3
      if (quantVal == 1UL)
 8002448:	2b01      	cmp	r3, #1
 800244a:	d0f5      	beq.n	8002438 <JPEG_GetQuality+0xc>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800244c:	2264      	movs	r2, #100	; 0x64
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	eb05 0e01 	add.w	lr, r5, r1
 8002456:	4a10      	ldr	r2, [pc, #64]	; (8002498 <JPEG_GetQuality+0x6c>)
 8002458:	eb02 0c0e 	add.w	ip, r2, lr
 800245c:	f89c c1a0 	ldrb.w	ip, [ip, #416]	; 0x1a0
 8002460:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002462:	f812 200c 	ldrb.w	r2, [r2, ip]
 8002466:	fbb3 f3f2 	udiv	r3, r3, r2

        if (scale <= 100UL)
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d804      	bhi.n	8002478 <JPEG_GetQuality+0x4c>
        {
          quality += (200UL - scale) / 2UL;
 800246e:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002472:	eb04 0453 	add.w	r4, r4, r3, lsr #1
 8002476:	e7e0      	b.n	800243a <JPEG_GetQuality+0xe>
        }
        else
        {
          quality += 5000UL / scale;
 8002478:	f241 3288 	movw	r2, #5000	; 0x1388
 800247c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002480:	441c      	add	r4, r3
 8002482:	e7da      	b.n	800243a <JPEG_GetQuality+0xe>
        }
      }
    }

    i += 4UL;
 8002484:	3504      	adds	r5, #4
    tableAddress ++;
 8002486:	3704      	adds	r7, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8002488:	2d3c      	cmp	r5, #60	; 0x3c
 800248a:	d802      	bhi.n	8002492 <JPEG_GetQuality+0x66>
    quantRow = *tableAddress;
 800248c:	683e      	ldr	r6, [r7, #0]
    for (j = 0; j < 4UL; j++)
 800248e:	2100      	movs	r1, #0
 8002490:	e7d4      	b.n	800243c <JPEG_GetQuality+0x10>
  }

  return (quality / 64UL);
}
 8002492:	09a0      	lsrs	r0, r4, #6
 8002494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002496:	bf00      	nop
 8002498:	08008ef8 	.word	0x08008ef8

0800249c <HAL_JPEG_GetInfo>:
{
 800249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 800249e:	460c      	mov	r4, r1
 80024a0:	fab1 f181 	clz	r1, r1
 80024a4:	0949      	lsrs	r1, r1, #5
 80024a6:	2800      	cmp	r0, #0
 80024a8:	bf08      	it	eq
 80024aa:	2101      	moveq	r1, #1
 80024ac:	2900      	cmp	r1, #0
 80024ae:	d15a      	bne.n	8002566 <HAL_JPEG_GetInfo+0xca>
 80024b0:	4603      	mov	r3, r0
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80024b2:	6801      	ldr	r1, [r0, #0]
 80024b4:	684a      	ldr	r2, [r1, #4]
 80024b6:	f002 0203 	and.w	r2, r2, #3
 80024ba:	2a02      	cmp	r2, #2
 80024bc:	d006      	beq.n	80024cc <HAL_JPEG_GetInfo+0x30>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80024be:	684a      	ldr	r2, [r1, #4]
 80024c0:	f012 0f03 	tst.w	r2, #3
 80024c4:	d12a      	bne.n	800251c <HAL_JPEG_GetInfo+0x80>
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80024c6:	2200      	movs	r2, #0
 80024c8:	6022      	str	r2, [r4, #0]
 80024ca:	e001      	b.n	80024d0 <HAL_JPEG_GetInfo+0x34>
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80024cc:	2210      	movs	r2, #16
 80024ce:	6022      	str	r2, [r4, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	6852      	ldr	r2, [r2, #4]
 80024d4:	0c12      	lsrs	r2, r2, #16
 80024d6:	60a2      	str	r2, [r4, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68d2      	ldr	r2, [r2, #12]
 80024dc:	0c12      	lsrs	r2, r2, #16
 80024de:	60e2      	str	r2, [r4, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80024e0:	6822      	ldr	r2, [r4, #0]
 80024e2:	2a30      	cmp	r2, #48	; 0x30
 80024e4:	bf18      	it	ne
 80024e6:	2a10      	cmpne	r2, #16
 80024e8:	d135      	bne.n	8002556 <HAL_JPEG_GetInfo+0xba>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80024ea:	6819      	ldr	r1, [r3, #0]
 80024ec:	690a      	ldr	r2, [r1, #16]
 80024ee:	0915      	lsrs	r5, r2, #4
 80024f0:	f3c2 1203 	ubfx	r2, r2, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80024f4:	6948      	ldr	r0, [r1, #20]
 80024f6:	0907      	lsrs	r7, r0, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80024f8:	6989      	ldr	r1, [r1, #24]
 80024fa:	f3c1 1103 	ubfx	r1, r1, #4, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80024fe:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 8002502:	bf0c      	ite	eq
 8002504:	2001      	moveq	r0, #1
 8002506:	2000      	movne	r0, #0
 8002508:	2a01      	cmp	r2, #1
 800250a:	bf14      	ite	ne
 800250c:	2600      	movne	r6, #0
 800250e:	f000 0601 	andeq.w	r6, r0, #1
 8002512:	b15e      	cbz	r6, 800252c <HAL_JPEG_GetInfo+0x90>
 8002514:	b951      	cbnz	r1, 800252c <HAL_JPEG_GetInfo+0x90>
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8002516:	2202      	movs	r2, #2
 8002518:	6062      	str	r2, [r4, #4]
 800251a:	e01e      	b.n	800255a <HAL_JPEG_GetInfo+0xbe>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800251c:	684a      	ldr	r2, [r1, #4]
 800251e:	f002 0203 	and.w	r2, r2, #3
 8002522:	2a03      	cmp	r2, #3
 8002524:	d121      	bne.n	800256a <HAL_JPEG_GetInfo+0xce>
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8002526:	2230      	movs	r2, #48	; 0x30
 8002528:	6022      	str	r2, [r4, #0]
 800252a:	e7d1      	b.n	80024d0 <HAL_JPEG_GetInfo+0x34>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800252c:	433d      	orrs	r5, r7
 800252e:	f015 0f0f 	tst.w	r5, #15
 8002532:	d103      	bne.n	800253c <HAL_JPEG_GetInfo+0xa0>
 8002534:	b911      	cbnz	r1, 800253c <HAL_JPEG_GetInfo+0xa0>
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8002536:	2200      	movs	r2, #0
 8002538:	6062      	str	r2, [r4, #4]
 800253a:	e00e      	b.n	800255a <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800253c:	2a03      	cmp	r2, #3
 800253e:	bf14      	ite	ne
 8002540:	2200      	movne	r2, #0
 8002542:	f000 0201 	andeq.w	r2, r0, #1
 8002546:	b11a      	cbz	r2, 8002550 <HAL_JPEG_GetInfo+0xb4>
 8002548:	b911      	cbnz	r1, 8002550 <HAL_JPEG_GetInfo+0xb4>
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800254a:	2201      	movs	r2, #1
 800254c:	6062      	str	r2, [r4, #4]
 800254e:	e004      	b.n	800255a <HAL_JPEG_GetInfo+0xbe>
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8002550:	2200      	movs	r2, #0
 8002552:	6062      	str	r2, [r4, #4]
 8002554:	e001      	b.n	800255a <HAL_JPEG_GetInfo+0xbe>
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8002556:	2200      	movs	r2, #0
 8002558:	6062      	str	r2, [r4, #4]
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ff66 	bl	800242c <JPEG_GetQuality>
 8002560:	6120      	str	r0, [r4, #16]
  return HAL_OK;
 8002562:	2000      	movs	r0, #0
}
 8002564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002566:	2001      	movs	r0, #1
 8002568:	e7fc      	b.n	8002564 <HAL_JPEG_GetInfo+0xc8>
    return HAL_ERROR;
 800256a:	2001      	movs	r0, #1
 800256c:	e7fa      	b.n	8002564 <HAL_JPEG_GetInfo+0xc8>

0800256e <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800256e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b0c      	cmp	r3, #12
 8002576:	d006      	beq.n	8002586 <HAL_JPEG_Pause+0x18>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002578:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b08      	cmp	r3, #8
 8002580:	d01b      	beq.n	80025ba <HAL_JPEG_Pause+0x4c>
}
 8002582:	2000      	movs	r0, #0
 8002584:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8002586:	f011 0301 	ands.w	r3, r1, #1
 800258a:	d005      	beq.n	8002598 <HAL_JPEG_Pause+0x2a>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800258c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800258e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002592:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 8002594:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8002598:	f011 0f02 	tst.w	r1, #2
 800259c:	d005      	beq.n	80025aa <HAL_JPEG_Pause+0x3c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800259e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80025a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025a4:	6542      	str	r2, [r0, #84]	; 0x54
      mask |= JPEG_DMA_ODMA;
 80025a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    JPEG_DISABLE_DMA(hjpeg, mask);
 80025aa:	6801      	ldr	r1, [r0, #0]
 80025ac:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80025ae:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80025b2:	ea22 0303 	bic.w	r3, r2, r3
 80025b6:	630b      	str	r3, [r1, #48]	; 0x30
 80025b8:	e7e3      	b.n	8002582 <HAL_JPEG_Pause+0x14>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80025ba:	f011 0201 	ands.w	r2, r1, #1
 80025be:	d004      	beq.n	80025ca <HAL_JPEG_Pause+0x5c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80025c0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80025c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025c6:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80025c8:	2206      	movs	r2, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80025ca:	f011 0f02 	tst.w	r1, #2
 80025ce:	d005      	beq.n	80025dc <HAL_JPEG_Pause+0x6e>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80025d0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80025d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025d6:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80025d8:	f042 0228 	orr.w	r2, r2, #40	; 0x28
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80025dc:	6801      	ldr	r1, [r0, #0]
 80025de:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80025e0:	ea23 0302 	bic.w	r3, r3, r2
 80025e4:	630b      	str	r3, [r1, #48]	; 0x30
 80025e6:	e7cc      	b.n	8002582 <HAL_JPEG_Pause+0x14>

080025e8 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 80025e8:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 80025ea:	6282      	str	r2, [r0, #40]	; 0x28
}
 80025ec:	4770      	bx	lr

080025ee <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 80025ee:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 80025f0:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 80025f2:	4770      	bx	lr

080025f4 <HAL_JPEG_EncodeCpltCallback>:
}
 80025f4:	4770      	bx	lr

080025f6 <JPEG_ReadInputData>:
{
 80025f6:	b570      	push	{r4, r5, r6, lr}
 80025f8:	4604      	mov	r4, r0
 80025fa:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80025fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80025fe:	b103      	cbz	r3, 8002602 <JPEG_ReadInputData+0xc>
 8002600:	b991      	cbnz	r1, 8002628 <JPEG_ReadInputData+0x32>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8002602:	2101      	movs	r1, #1
 8002604:	4620      	mov	r0, r4
 8002606:	f7ff ffb2 	bl	800256e <HAL_JPEG_Pause>
  uint32_t nbBytes = 0, nBwords, index, Dataword, inputCount;
 800260a:	2200      	movs	r2, #0
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nbBytes > 0UL))
 800260c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800260e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8002612:	d15d      	bne.n	80026d0 <JPEG_ReadInputData+0xda>
 8002614:	2a00      	cmp	r2, #0
 8002616:	d05b      	beq.n	80026d0 <JPEG_ReadInputData+0xda>
    nBwords = nbBytes / 4UL;
 8002618:	0896      	lsrs	r6, r2, #2
    if (nBwords >= nbRequestWords)
 800261a:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 800261e:	d91b      	bls.n	8002658 <JPEG_ReadInputData+0x62>
      if (nBwords > 0UL)
 8002620:	2a03      	cmp	r2, #3
 8002622:	d82f      	bhi.n	8002684 <JPEG_ReadInputData+0x8e>
        Dataword = 0;
 8002624:	461d      	mov	r5, r3
 8002626:	e04f      	b.n	80026c8 <JPEG_ReadInputData+0xd2>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8002628:	6a02      	ldr	r2, [r0, #32]
 800262a:	4293      	cmp	r3, r2
 800262c:	d902      	bls.n	8002634 <JPEG_ReadInputData+0x3e>
    nbBytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800262e:	6a02      	ldr	r2, [r0, #32]
 8002630:	1a9a      	subs	r2, r3, r2
 8002632:	e7eb      	b.n	800260c <JPEG_ReadInputData+0x16>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8002634:	6a02      	ldr	r2, [r0, #32]
 8002636:	4293      	cmp	r3, r2
 8002638:	d001      	beq.n	800263e <JPEG_ReadInputData+0x48>
  uint32_t nbBytes = 0, nBwords, index, Dataword, inputCount;
 800263a:	2200      	movs	r2, #0
 800263c:	e7e6      	b.n	800260c <JPEG_ReadInputData+0x16>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800263e:	6a01      	ldr	r1, [r0, #32]
 8002640:	f005 f946 	bl	80078d0 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8002644:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002646:	2b04      	cmp	r3, #4
 8002648:	d902      	bls.n	8002650 <JPEG_ReadInputData+0x5a>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800264a:	f023 0303 	bic.w	r3, r3, #3
 800264e:	62a3      	str	r3, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	6223      	str	r3, [r4, #32]
    nbBytes = hjpeg->InDataLength;
 8002654:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002656:	e7d9      	b.n	800260c <JPEG_ReadInputData+0x16>
      for (index = 0; index < nbRequestWords; index++)
 8002658:	42ab      	cmp	r3, r5
 800265a:	d239      	bcs.n	80026d0 <JPEG_ReadInputData+0xda>
        inputCount = hjpeg->JpegInCount;
 800265c:	6a21      	ldr	r1, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 800265e:	69a0      	ldr	r0, [r4, #24]
 8002660:	5c42      	ldrb	r2, [r0, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8002662:	4408      	add	r0, r1
 8002664:	7841      	ldrb	r1, [r0, #1]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8002666:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 800266a:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 800266c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 3UL])) << 24));
 8002670:	78c0      	ldrb	r0, [r0, #3]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8002672:	6821      	ldr	r1, [r4, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 8002674:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8002678:	640a      	str	r2, [r1, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
 800267a:	6a22      	ldr	r2, [r4, #32]
 800267c:	3204      	adds	r2, #4
 800267e:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8002680:	3301      	adds	r3, #1
 8002682:	e7e9      	b.n	8002658 <JPEG_ReadInputData+0x62>
        for (index = 0; index < nBwords; index++)
 8002684:	42b3      	cmp	r3, r6
 8002686:	d223      	bcs.n	80026d0 <JPEG_ReadInputData+0xda>
          inputCount = hjpeg->JpegInCount;
 8002688:	6a20      	ldr	r0, [r4, #32]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 800268a:	69a1      	ldr	r1, [r4, #24]
 800268c:	5c0a      	ldrb	r2, [r1, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 800268e:	4401      	add	r1, r0
 8002690:	7848      	ldrb	r0, [r1, #1]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8002692:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 8002696:	7888      	ldrb	r0, [r1, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8002698:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 3UL])) << 24));
 800269c:	78c8      	ldrb	r0, [r1, #3]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 800269e:	6821      	ldr	r1, [r4, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 80026a0:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 80026a4:	640a      	str	r2, [r1, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 80026a6:	6a22      	ldr	r2, [r4, #32]
 80026a8:	3204      	adds	r2, #4
 80026aa:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nBwords; index++)
 80026ac:	3301      	adds	r3, #1
 80026ae:	e7e9      	b.n	8002684 <JPEG_ReadInputData+0x8e>
          Dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80026b0:	69a0      	ldr	r0, [r4, #24]
 80026b2:	6a21      	ldr	r1, [r4, #32]
 80026b4:	5c41      	ldrb	r1, [r0, r1]
 80026b6:	f003 0003 	and.w	r0, r3, #3
 80026ba:	00c0      	lsls	r0, r0, #3
 80026bc:	4081      	lsls	r1, r0
 80026be:	430d      	orrs	r5, r1
          hjpeg->JpegInCount++;
 80026c0:	6a21      	ldr	r1, [r4, #32]
 80026c2:	3101      	adds	r1, #1
 80026c4:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nbBytes; index++)
 80026c6:	3301      	adds	r3, #1
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d8f1      	bhi.n	80026b0 <JPEG_ReadInputData+0xba>
        hjpeg->Instance->DIR = Dataword;
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	641d      	str	r5, [r3, #64]	; 0x40
}
 80026d0:	bd70      	pop	{r4, r5, r6, pc}

080026d2 <JPEG_StoreOutputData>:
{
 80026d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d4:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80026d6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80026d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026da:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80026de:	4298      	cmp	r0, r3
 80026e0:	d223      	bcs.n	800272a <JPEG_StoreOutputData+0x58>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80026e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026e4:	4298      	cmp	r0, r3
 80026e6:	d942      	bls.n	800276e <JPEG_StoreOutputData+0x9c>
    nBwords = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80026e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026ea:	1ac0      	subs	r0, r0, r3
 80026ec:	0880      	lsrs	r0, r0, #2
    for (index = 0; index < nBwords; index++)
 80026ee:	2100      	movs	r1, #0
 80026f0:	4281      	cmp	r1, r0
 80026f2:	d245      	bcs.n	8002780 <JPEG_StoreOutputData+0xae>
      dataword = hjpeg->Instance->DOR;
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80026f8:	69e5      	ldr	r5, [r4, #28]
 80026fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026fc:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80026fe:	69e5      	ldr	r5, [r4, #28]
 8002700:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002702:	3201      	adds	r2, #1
 8002704:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8002708:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800270a:	69e5      	ldr	r5, [r4, #28]
 800270c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800270e:	3202      	adds	r2, #2
 8002710:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8002714:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8002716:	69e5      	ldr	r5, [r4, #28]
 8002718:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800271a:	3203      	adds	r2, #3
 800271c:	0e1b      	lsrs	r3, r3, #24
 800271e:	54ab      	strb	r3, [r5, r2]
      hjpeg->JpegOutCount += 4UL;
 8002720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002722:	3304      	adds	r3, #4
 8002724:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nBwords; index++)
 8002726:	3101      	adds	r1, #1
 8002728:	e7e2      	b.n	80026f0 <JPEG_StoreOutputData+0x1e>
    for (index = 0; index < nbOutputWords; index++)
 800272a:	2000      	movs	r0, #0
 800272c:	4288      	cmp	r0, r1
 800272e:	d21a      	bcs.n	8002766 <JPEG_StoreOutputData+0x94>
      dataword = hjpeg->Instance->DOR;
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8002734:	69e5      	ldr	r5, [r4, #28]
 8002736:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002738:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800273a:	69e5      	ldr	r5, [r4, #28]
 800273c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800273e:	3201      	adds	r2, #1
 8002740:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8002744:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8002746:	69e5      	ldr	r5, [r4, #28]
 8002748:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800274a:	3202      	adds	r2, #2
 800274c:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8002750:	54ae      	strb	r6, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8002752:	69e5      	ldr	r5, [r4, #28]
 8002754:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002756:	3203      	adds	r2, #3
 8002758:	0e1b      	lsrs	r3, r3, #24
 800275a:	54ab      	strb	r3, [r5, r2]
      hjpeg->JpegOutCount += 4UL;
 800275c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800275e:	3304      	adds	r3, #4
 8002760:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 8002762:	3001      	adds	r0, #1
 8002764:	e7e2      	b.n	800272c <JPEG_StoreOutputData+0x5a>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8002766:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800276a:	429a      	cmp	r2, r3
 800276c:	d000      	beq.n	8002770 <JPEG_StoreOutputData+0x9e>
}
 800276e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002770:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002772:	69e1      	ldr	r1, [r4, #28]
 8002774:	4620      	mov	r0, r4
 8002776:	f005 f8bd 	bl	80078f4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	6263      	str	r3, [r4, #36]	; 0x24
 800277e:	e7f6      	b.n	800276e <JPEG_StoreOutputData+0x9c>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8002780:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002784:	429f      	cmp	r7, r3
 8002786:	d006      	beq.n	8002796 <JPEG_StoreOutputData+0xc4>
      nbBytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8002788:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800278a:	eba7 0c05 	sub.w	ip, r7, r5
      dataword = hjpeg->Instance->DOR;
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	6c5e      	ldr	r6, [r3, #68]	; 0x44
      for (index = 0; index < nbBytes; index++)
 8002792:	2200      	movs	r2, #0
 8002794:	e013      	b.n	80027be <JPEG_StoreOutputData+0xec>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002796:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002798:	69e1      	ldr	r1, [r4, #28]
 800279a:	4620      	mov	r0, r4
 800279c:	f005 f8aa 	bl	80078f4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	6263      	str	r3, [r4, #36]	; 0x24
 80027a4:	e7e3      	b.n	800276e <JPEG_StoreOutputData+0x9c>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80027a6:	f002 0303 	and.w	r3, r2, #3
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	fa26 f303 	lsr.w	r3, r6, r3
 80027b0:	69e0      	ldr	r0, [r4, #28]
 80027b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80027b4:	5443      	strb	r3, [r0, r1]
        hjpeg->JpegOutCount++;
 80027b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027b8:	3301      	adds	r3, #1
 80027ba:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nbBytes; index++)
 80027bc:	3201      	adds	r2, #1
 80027be:	4562      	cmp	r2, ip
 80027c0:	d3f1      	bcc.n	80027a6 <JPEG_StoreOutputData+0xd4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80027c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027c4:	69e1      	ldr	r1, [r4, #28]
 80027c6:	4620      	mov	r0, r4
 80027c8:	f005 f894 	bl	80078f4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	6263      	str	r3, [r4, #36]	; 0x24
      nbBytes = 4UL - nbBytes;
 80027d0:	1bed      	subs	r5, r5, r7
 80027d2:	3504      	adds	r5, #4
      for (index = nbBytes; index < 4UL; index++)
 80027d4:	e009      	b.n	80027ea <JPEG_StoreOutputData+0x118>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80027d6:	00eb      	lsls	r3, r5, #3
 80027d8:	fa26 f303 	lsr.w	r3, r6, r3
 80027dc:	69e1      	ldr	r1, [r4, #28]
 80027de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027e0:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
 80027e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027e4:	3301      	adds	r3, #1
 80027e6:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nbBytes; index < 4UL; index++)
 80027e8:	3501      	adds	r5, #1
 80027ea:	2d03      	cmp	r5, #3
 80027ec:	d9f3      	bls.n	80027d6 <JPEG_StoreOutputData+0x104>
 80027ee:	e7be      	b.n	800276e <JPEG_StoreOutputData+0x9c>

080027f0 <JPEG_Process>:
{
 80027f0:	b538      	push	{r3, r4, r5, lr}
 80027f2:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80027f4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d021      	beq.n	8002842 <JPEG_Process+0x52>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 80027fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002800:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002804:	d108      	bne.n	8002818 <JPEG_Process+0x28>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800280a:	f012 0f02 	tst.w	r2, #2
 800280e:	d132      	bne.n	8002876 <JPEG_Process+0x86>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8002810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002812:	f013 0f04 	tst.w	r3, #4
 8002816:	d133      	bne.n	8002880 <JPEG_Process+0x90>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8002818:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800281a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800281e:	d108      	bne.n	8002832 <JPEG_Process+0x42>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002824:	f012 0f08 	tst.w	r2, #8
 8002828:	d12f      	bne.n	800288a <JPEG_Process+0x9a>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800282a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282c:	f013 0f10 	tst.w	r3, #16
 8002830:	d130      	bne.n	8002894 <JPEG_Process+0xa4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8002832:	6822      	ldr	r2, [r4, #0]
 8002834:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800283a:	2b20      	cmp	r3, #32
 800283c:	d02f      	beq.n	800289e <JPEG_Process+0xae>
  return JPEG_PROCESS_ONGOING;
 800283e:	2000      	movs	r0, #0
}
 8002840:	bd38      	pop	{r3, r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8002842:	6803      	ldr	r3, [r0, #0]
 8002844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002846:	f013 0f40 	tst.w	r3, #64	; 0x40
 800284a:	d0d8      	beq.n	80027fe <JPEG_Process+0xe>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800284c:	1d05      	adds	r5, r0, #4
 800284e:	4629      	mov	r1, r5
 8002850:	f7ff fe24 	bl	800249c <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8002858:	4629      	mov	r1, r5
 800285a:	4620      	mov	r0, r4
 800285c:	f005 f85c 	bl	8007918 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8002860:	6822      	ldr	r2, [r4, #0]
 8002862:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002868:	6313      	str	r3, [r2, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800286a:	6822      	ldr	r2, [r4, #0]
 800286c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800286e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002872:	6393      	str	r3, [r2, #56]	; 0x38
 8002874:	e7c3      	b.n	80027fe <JPEG_Process+0xe>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8002876:	2104      	movs	r1, #4
 8002878:	4620      	mov	r0, r4
 800287a:	f7ff febc 	bl	80025f6 <JPEG_ReadInputData>
 800287e:	e7cb      	b.n	8002818 <JPEG_Process+0x28>
      JPEG_ReadInputData(hjpeg, 1);
 8002880:	2101      	movs	r1, #1
 8002882:	4620      	mov	r0, r4
 8002884:	f7ff feb7 	bl	80025f6 <JPEG_ReadInputData>
 8002888:	e7c6      	b.n	8002818 <JPEG_Process+0x28>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800288a:	2104      	movs	r1, #4
 800288c:	4620      	mov	r0, r4
 800288e:	f7ff ff20 	bl	80026d2 <JPEG_StoreOutputData>
 8002892:	e7ce      	b.n	8002832 <JPEG_Process+0x42>
      JPEG_StoreOutputData(hjpeg, 1);
 8002894:	2101      	movs	r1, #1
 8002896:	4620      	mov	r0, r4
 8002898:	f7ff ff1b 	bl	80026d2 <JPEG_StoreOutputData>
 800289c:	e7c9      	b.n	8002832 <JPEG_Process+0x42>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800289e:	6813      	ldr	r3, [r2, #0]
 80028a0:	f023 0301 	bic.w	r3, r3, #1
 80028a4:	6013      	str	r3, [r2, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80028a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d01a      	beq.n	80028e6 <JPEG_Process+0xf6>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80028b0:	6822      	ldr	r2, [r4, #0]
 80028b2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80028b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028b8:	6393      	str	r3, [r2, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
 80028ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028bc:	b9cb      	cbnz	r3, 80028f2 <JPEG_Process+0x102>
    tmpContext = hjpeg->Context;
 80028be:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80028c0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80028c2:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
 80028c6:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 80028c8:	2200      	movs	r2, #0
 80028ca:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80028ce:	2201      	movs	r2, #1
 80028d0:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d012      	beq.n	8002902 <JPEG_Process+0x112>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80028dc:	4620      	mov	r0, r4
 80028de:	f7ff fe89 	bl	80025f4 <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
 80028e2:	2001      	movs	r0, #1
 80028e4:	e7ac      	b.n	8002840 <JPEG_Process+0x50>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80028e6:	6822      	ldr	r2, [r4, #0]
 80028e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80028ea:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 80028ee:	6313      	str	r3, [r2, #48]	; 0x30
 80028f0:	e7de      	b.n	80028b0 <JPEG_Process+0xc0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80028f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028f4:	69e1      	ldr	r1, [r4, #28]
 80028f6:	4620      	mov	r0, r4
 80028f8:	f004 fffc 	bl	80078f4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	6263      	str	r3, [r4, #36]	; 0x24
 8002900:	e7dd      	b.n	80028be <JPEG_Process+0xce>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8002902:	4620      	mov	r0, r4
 8002904:	f005 f802 	bl	800790c <HAL_JPEG_DecodeCpltCallback>
 8002908:	e7eb      	b.n	80028e2 <JPEG_Process+0xf2>

0800290a <JPEG_DMA_PollResidualData>:
{
 800290a:	b538      	push	{r3, r4, r5, lr}
 800290c:	4604      	mov	r4, r0
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800290e:	2510      	movs	r5, #16
 8002910:	e007      	b.n	8002922 <JPEG_DMA_PollResidualData+0x18>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002912:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002914:	69e1      	ldr	r1, [r4, #28]
 8002916:	4620      	mov	r0, r4
 8002918:	f004 ffec 	bl	80078f4 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	6263      	str	r3, [r4, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8002920:	3d01      	subs	r5, #1
 8002922:	b32d      	cbz	r5, 8002970 <JPEG_DMA_PollResidualData+0x66>
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8002924:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002926:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800292a:	d1f9      	bne.n	8002920 <JPEG_DMA_PollResidualData+0x16>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002930:	f012 0f10 	tst.w	r2, #16
 8002934:	d0f4      	beq.n	8002920 <JPEG_DMA_PollResidualData+0x16>
        dataOut = hjpeg->Instance->DOR;
 8002936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8002938:	69e1      	ldr	r1, [r4, #28]
 800293a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800293c:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800293e:	69e1      	ldr	r1, [r4, #28]
 8002940:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002942:	3201      	adds	r2, #1
 8002944:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8002948:	5488      	strb	r0, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800294a:	69e1      	ldr	r1, [r4, #28]
 800294c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800294e:	3202      	adds	r2, #2
 8002950:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8002954:	5488      	strb	r0, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8002956:	69e1      	ldr	r1, [r4, #28]
 8002958:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800295a:	3203      	adds	r2, #3
 800295c:	0e1b      	lsrs	r3, r3, #24
 800295e:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount += 4UL;
 8002960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002962:	3304      	adds	r3, #4
 8002964:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8002966:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002968:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800296a:	429a      	cmp	r2, r3
 800296c:	d1d8      	bne.n	8002920 <JPEG_DMA_PollResidualData+0x16>
 800296e:	e7d0      	b.n	8002912 <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
 8002970:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002976:	f012 0f10 	tst.w	r2, #16
 800297a:	d002      	beq.n	8002982 <JPEG_DMA_PollResidualData+0x78>
 800297c:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8002980:	d117      	bne.n	80029b2 <JPEG_DMA_PollResidualData+0xa8>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	f022 0201 	bic.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800298a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800298c:	b993      	cbnz	r3, 80029b4 <JPEG_DMA_PollResidualData+0xaa>
    tmpContext = hjpeg->Context;
 800298e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8002990:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002992:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
 8002996:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 8002998:	2200      	movs	r2, #0
 800299a:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800299e:	2201      	movs	r2, #1
 80029a0:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d00b      	beq.n	80029c4 <JPEG_DMA_PollResidualData+0xba>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80029ac:	4620      	mov	r0, r4
 80029ae:	f7ff fe21 	bl	80025f4 <HAL_JPEG_EncodeCpltCallback>
}
 80029b2:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80029b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80029b6:	69e1      	ldr	r1, [r4, #28]
 80029b8:	4620      	mov	r0, r4
 80029ba:	f004 ff9b 	bl	80078f4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	6263      	str	r3, [r4, #36]	; 0x24
 80029c2:	e7e4      	b.n	800298e <JPEG_DMA_PollResidualData+0x84>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80029c4:	4620      	mov	r0, r4
 80029c6:	f004 ffa1 	bl	800790c <HAL_JPEG_DecodeCpltCallback>
 80029ca:	e7f2      	b.n	80029b2 <JPEG_DMA_PollResidualData+0xa8>

080029cc <JPEG_DMA_EndProcess>:
{
 80029cc:	b510      	push	{r4, lr}
 80029ce:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 80029d0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80029d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <JPEG_DMA_EndProcess+0x94>)
 80029da:	ea03 0381 	and.w	r3, r3, r1, lsl #2
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	6243      	str	r3, [r0, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80029e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d01e      	beq.n	8002a26 <JPEG_DMA_EndProcess+0x5a>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ec:	f013 0f10 	tst.w	r3, #16
 80029f0:	d12c      	bne.n	8002a4c <JPEG_DMA_EndProcess+0x80>
    if (hjpeg->JpegOutCount > 0UL)
 80029f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029f4:	b9f3      	cbnz	r3, 8002a34 <JPEG_DMA_EndProcess+0x68>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80029f6:	6822      	ldr	r2, [r4, #0]
 80029f8:	6813      	ldr	r3, [r2, #0]
 80029fa:	f023 0301 	bic.w	r3, r3, #1
 80029fe:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8002a00:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8002a02:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002a04:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
 8002a08:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8002a10:	2201      	movs	r2, #1
 8002a12:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d012      	beq.n	8002a44 <JPEG_DMA_EndProcess+0x78>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8002a1e:	4620      	mov	r0, r4
 8002a20:	f7ff fde8 	bl	80025f4 <HAL_JPEG_EncodeCpltCallback>
 8002a24:	e016      	b.n	8002a54 <JPEG_DMA_EndProcess+0x88>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002a26:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002a28:	69c1      	ldr	r1, [r0, #28]
 8002a2a:	f004 ff63 	bl	80078f4 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	6263      	str	r3, [r4, #36]	; 0x24
 8002a32:	e7d9      	b.n	80029e8 <JPEG_DMA_EndProcess+0x1c>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002a34:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a36:	69e1      	ldr	r1, [r4, #28]
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f004 ff5b 	bl	80078f4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	6263      	str	r3, [r4, #36]	; 0x24
 8002a42:	e7d8      	b.n	80029f6 <JPEG_DMA_EndProcess+0x2a>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8002a44:	4620      	mov	r0, r4
 8002a46:	f004 ff61 	bl	800790c <HAL_JPEG_DecodeCpltCallback>
 8002a4a:	e003      	b.n	8002a54 <JPEG_DMA_EndProcess+0x88>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8002a4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a4e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002a52:	d000      	beq.n	8002a56 <JPEG_DMA_EndProcess+0x8a>
}
 8002a54:	bd10      	pop	{r4, pc}
    JPEG_DMA_PollResidualData(hjpeg);
 8002a56:	4620      	mov	r0, r4
 8002a58:	f7ff ff57 	bl	800290a <JPEG_DMA_PollResidualData>
}
 8002a5c:	e7fa      	b.n	8002a54 <JPEG_DMA_EndProcess+0x88>
 8002a5e:	bf00      	nop
 8002a60:	0003fffc 	.word	0x0003fffc

08002a64 <JPEG_DMA_ContinueProcess>:
{
 8002a64:	b538      	push	{r3, r4, r5, lr}
 8002a66:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002a68:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d02b      	beq.n	8002aca <JPEG_DMA_ContinueProcess+0x66>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8002a72:	6823      	ldr	r3, [r4, #0]
 8002a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a76:	f012 0f20 	tst.w	r2, #32
 8002a7a:	d025      	beq.n	8002ac8 <JPEG_DMA_ContinueProcess+0x64>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 8002a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a7e:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8002a84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8a:	6563      	str	r3, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002a8c:	6822      	ldr	r2, [r4, #0]
 8002a8e:	6813      	ldr	r3, [r2, #0]
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	6013      	str	r3, [r2, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002a96:	6822      	ldr	r2, [r4, #0]
 8002a98:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a9a:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8002a9e:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002aa0:	6822      	ldr	r2, [r4, #0]
 8002aa2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002aa4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002aa8:	6393      	str	r3, [r2, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 8002aaa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002aac:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d023      	beq.n	8002afe <JPEG_DMA_ContinueProcess+0x9a>
    if (hjpeg->hdmaout->State == HAL_DMA_STATE_BUSY)
 8002ab6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002ab8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d020      	beq.n	8002b04 <JPEG_DMA_ContinueProcess+0xa0>
      JPEG_DMA_EndProcess(hjpeg);
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	f7ff ff82 	bl	80029cc <JPEG_DMA_EndProcess>
}
 8002ac8:	bd38      	pop	{r3, r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8002aca:	6803      	ldr	r3, [r0, #0]
 8002acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ace:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ad2:	d0ce      	beq.n	8002a72 <JPEG_DMA_ContinueProcess+0xe>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8002ad4:	1d05      	adds	r5, r0, #4
 8002ad6:	4629      	mov	r1, r5
 8002ad8:	f7ff fce0 	bl	800249c <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8002ae0:	4629      	mov	r1, r5
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	f004 ff18 	bl	8007918 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8002ae8:	6822      	ldr	r2, [r4, #0]
 8002aea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8002af2:	6822      	ldr	r2, [r4, #0]
 8002af4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002afa:	6393      	str	r3, [r2, #56]	; 0x38
 8002afc:	e7b9      	b.n	8002a72 <JPEG_DMA_ContinueProcess+0xe>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmain);
 8002afe:	f7fe fee6 	bl	80018ce <HAL_DMA_Abort_IT>
 8002b02:	e7d8      	b.n	8002ab6 <JPEG_DMA_ContinueProcess+0x52>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmaout);
 8002b04:	f7fe fee3 	bl	80018ce <HAL_DMA_Abort_IT>
 8002b08:	e7de      	b.n	8002ac8 <JPEG_DMA_ContinueProcess+0x64>

08002b0a <HAL_JPEG_IRQHandler>:
{
 8002b0a:	b508      	push	{r3, lr}
  switch (hjpeg->State)
 8002b0c:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 8002b10:	3b03      	subs	r3, #3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d900      	bls.n	8002b18 <HAL_JPEG_IRQHandler+0xe>
}
 8002b16:	bd08      	pop	{r3, pc}
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002b18:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d007      	beq.n	8002b32 <HAL_JPEG_IRQHandler+0x28>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8002b22:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002b24:	f003 030c 	and.w	r3, r3, #12
 8002b28:	2b0c      	cmp	r3, #12
 8002b2a:	d1f4      	bne.n	8002b16 <HAL_JPEG_IRQHandler+0xc>
        JPEG_DMA_ContinueProcess(hjpeg);
 8002b2c:	f7ff ff9a 	bl	8002a64 <JPEG_DMA_ContinueProcess>
}
 8002b30:	e7f1      	b.n	8002b16 <HAL_JPEG_IRQHandler+0xc>
        (void) JPEG_Process(hjpeg);
 8002b32:	f7ff fe5d 	bl	80027f0 <JPEG_Process>
 8002b36:	e7ee      	b.n	8002b16 <HAL_JPEG_IRQHandler+0xc>

08002b38 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b3c:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b3e:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8002b42:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8002b46:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002b4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d855      	bhi.n	8002bfe <PCD_WriteEmptyTxFifo+0xc6>
 8002b52:	4607      	mov	r7, r0
 8002b54:	460c      	mov	r4, r1
 8002b56:	46c1      	mov	r9, r8
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b58:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8002b5a:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8002b5e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002b62:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d300      	bcc.n	8002b6a <PCD_WriteEmptyTxFifo+0x32>
  len = ep->xfer_len - ep->xfer_count;
 8002b68:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8002b6a:	f102 0a03 	add.w	sl, r2, #3
 8002b6e:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b72:	e015      	b.n	8002ba0 <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8002b74:	f106 0a03 	add.w	sl, r6, #3
 8002b78:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b7c:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8002b80:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8002b84:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8002b86:	7c3b      	ldrb	r3, [r7, #16]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	b2b3      	uxth	r3, r6
 8002b8c:	b2e2      	uxtb	r2, r4
 8002b8e:	4640      	mov	r0, r8
 8002b90:	f002 ffa6 	bl	8005ae0 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8002b94:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8002b96:	4433      	add	r3, r6
 8002b98:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8002b9a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8002b9c:	441e      	add	r6, r3
 8002b9e:	656e      	str	r6, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ba0:	eb09 1344 	add.w	r3, r9, r4, lsl #5
 8002ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	4553      	cmp	r3, sl
 8002bae:	d312      	bcc.n	8002bd6 <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bb0:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8002bb4:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8002bb8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8002bba:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bbc:	4299      	cmp	r1, r3
 8002bbe:	d20a      	bcs.n	8002bd6 <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bc0:	b14b      	cbz	r3, 8002bd6 <PCD_WriteEmptyTxFifo+0x9e>
    len = ep->xfer_len - ep->xfer_count;
 8002bc2:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 8002bc4:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8002bc8:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8002bcc:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8002bce:	429e      	cmp	r6, r3
 8002bd0:	d3d0      	bcc.n	8002b74 <PCD_WriteEmptyTxFifo+0x3c>
    len = ep->xfer_len - ep->xfer_count;
 8002bd2:	461e      	mov	r6, r3
 8002bd4:	e7ce      	b.n	8002b74 <PCD_WriteEmptyTxFifo+0x3c>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002bd6:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 8002bda:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8002bde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d80f      	bhi.n	8002c06 <PCD_WriteEmptyTxFifo+0xce>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002be6:	f004 040f 	and.w	r4, r4, #15
 8002bea:	2301      	movs	r3, #1
 8002bec:	40a3      	lsls	r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bee:	f8d8 4834 	ldr.w	r4, [r8, #2100]	; 0x834
 8002bf2:	ea24 0403 	bic.w	r4, r4, r3
 8002bf6:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	e000      	b.n	8002c00 <PCD_WriteEmptyTxFifo+0xc8>
    return HAL_ERROR;
 8002bfe:	2001      	movs	r0, #1
}
 8002c00:	b002      	add	sp, #8
 8002c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 8002c06:	2000      	movs	r0, #0
 8002c08:	e7fa      	b.n	8002c00 <PCD_WriteEmptyTxFifo+0xc8>

08002c0a <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 8002c0a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d00e      	beq.n	8002c30 <HAL_PCD_Start+0x26>
{
 8002c12:	b510      	push	{r4, lr}
 8002c14:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002c16:	2301      	movs	r3, #1
 8002c18:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8002c1c:	6800      	ldr	r0, [r0, #0]
 8002c1e:	f003 f8f9 	bl	8005e14 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002c22:	6820      	ldr	r0, [r4, #0]
 8002c24:	f002 fdf0 	bl	8005808 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002c2e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002c30:	2002      	movs	r0, #2
}
 8002c32:	4770      	bx	lr

08002c34 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c34:	b570      	push	{r4, r5, r6, lr}
 8002c36:	4604      	mov	r4, r0
 8002c38:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c3a:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c3c:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c3e:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c46:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002c48:	6921      	ldr	r1, [r4, #16]
 8002c4a:	2901      	cmp	r1, #1
 8002c4c:	d011      	beq.n	8002c72 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c4e:	4935      	ldr	r1, [pc, #212]	; (8002d24 <PCD_EP_OutXfrComplete_int+0xf0>)
 8002c50:	428e      	cmp	r6, r1
 8002c52:	d050      	beq.n	8002cf6 <PCD_EP_OutXfrComplete_int+0xc2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c54:	b93d      	cbnz	r5, 8002c66 <PCD_EP_OutXfrComplete_int+0x32>
 8002c56:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8002c5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002c5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d058      	beq.n	8002d18 <PCD_EP_OutXfrComplete_int+0xe4>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c66:	b2e9      	uxtb	r1, r5
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f004 ff14 	bl	8007a96 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8002c6e:	2000      	movs	r0, #0
 8002c70:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c72:	f012 0f08 	tst.w	r2, #8
 8002c76:	d009      	beq.n	8002c8c <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c78:	492b      	ldr	r1, [pc, #172]	; (8002d28 <PCD_EP_OutXfrComplete_int+0xf4>)
 8002c7a:	428e      	cmp	r6, r1
 8002c7c:	d9f7      	bls.n	8002c6e <PCD_EP_OutXfrComplete_int+0x3a>
 8002c7e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002c82:	d0f4      	beq.n	8002c6e <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c88:	609a      	str	r2, [r3, #8]
 8002c8a:	e7f0      	b.n	8002c6e <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c8c:	f012 0f20 	tst.w	r2, #32
 8002c90:	d002      	beq.n	8002c98 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c92:	2220      	movs	r2, #32
 8002c94:	609a      	str	r2, [r3, #8]
 8002c96:	e7ea      	b.n	8002c6e <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c98:	f012 0f28 	tst.w	r2, #40	; 0x28
 8002c9c:	d1e7      	bne.n	8002c6e <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c9e:	4922      	ldr	r1, [pc, #136]	; (8002d28 <PCD_EP_OutXfrComplete_int+0xf4>)
 8002ca0:	428e      	cmp	r6, r1
 8002ca2:	d906      	bls.n	8002cb2 <PCD_EP_OutXfrComplete_int+0x7e>
 8002ca4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002ca8:	d003      	beq.n	8002cb2 <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002caa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	e7dd      	b.n	8002c6e <PCD_EP_OutXfrComplete_int+0x3a>
          hpcd->OUT_ep[epnum].maxpacket -
 8002cb2:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8002cb6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002cba:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002cc4:	1ac9      	subs	r1, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002cc6:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002cca:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8002cce:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8002cd2:	440b      	add	r3, r1
 8002cd4:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002cd8:	b915      	cbnz	r5, 8002ce0 <PCD_EP_OutXfrComplete_int+0xac>
 8002cda:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8002cde:	b123      	cbz	r3, 8002cea <PCD_EP_OutXfrComplete_int+0xb6>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ce0:	b2e9      	uxtb	r1, r5
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	f004 fed7 	bl	8007a96 <HAL_PCD_DataOutStageCallback>
 8002ce8:	e7c1      	b.n	8002c6e <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cea:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002cee:	2101      	movs	r1, #1
 8002cf0:	f003 f8e2 	bl	8005eb8 <USB_EP0_OutStart>
 8002cf4:	e7f4      	b.n	8002ce0 <PCD_EP_OutXfrComplete_int+0xac>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002cf6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002cfa:	d003      	beq.n	8002d04 <PCD_EP_OutXfrComplete_int+0xd0>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cfc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	e7b4      	b.n	8002c6e <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d04:	f012 0f20 	tst.w	r2, #32
 8002d08:	d001      	beq.n	8002d0e <PCD_EP_OutXfrComplete_int+0xda>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d0e:	b2e9      	uxtb	r1, r5
 8002d10:	4620      	mov	r0, r4
 8002d12:	f004 fec0 	bl	8007a96 <HAL_PCD_DataOutStageCallback>
 8002d16:	e7aa      	b.n	8002c6e <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d18:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	f003 f8cb 	bl	8005eb8 <USB_EP0_OutStart>
 8002d22:	e7a0      	b.n	8002c66 <PCD_EP_OutXfrComplete_int+0x32>
 8002d24:	4f54310a 	.word	0x4f54310a
 8002d28:	4f54300a 	.word	0x4f54300a

08002d2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d2c:	b538      	push	{r3, r4, r5, lr}
 8002d2e:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d30:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d32:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d34:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8002d38:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d3c:	4a0e      	ldr	r2, [pc, #56]	; (8002d78 <PCD_EP_OutSetupPacket_int+0x4c>)
 8002d3e:	4295      	cmp	r5, r2
 8002d40:	d907      	bls.n	8002d52 <PCD_EP_OutSetupPacket_int+0x26>
 8002d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d46:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8002d4a:	d002      	beq.n	8002d52 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d50:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d52:	4620      	mov	r0, r4
 8002d54:	f004 fe97 	bl	8007a86 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <PCD_EP_OutSetupPacket_int+0x4c>)
 8002d5a:	429d      	cmp	r5, r3
 8002d5c:	d902      	bls.n	8002d64 <PCD_EP_OutSetupPacket_int+0x38>
 8002d5e:	6923      	ldr	r3, [r4, #16]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d001      	beq.n	8002d68 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8002d64:	2000      	movs	r0, #0
 8002d66:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d68:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	6820      	ldr	r0, [r4, #0]
 8002d70:	f003 f8a2 	bl	8005eb8 <USB_EP0_OutStart>
 8002d74:	e7f6      	b.n	8002d64 <PCD_EP_OutSetupPacket_int+0x38>
 8002d76:	bf00      	nop
 8002d78:	4f54300a 	.word	0x4f54300a

08002d7c <HAL_PCD_IRQHandler>:
{
 8002d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d80:	b083      	sub	sp, #12
 8002d82:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d84:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d86:	4628      	mov	r0, r5
 8002d88:	f003 f881 	bl	8005e8e <USB_GetMode>
 8002d8c:	b110      	cbz	r0, 8002d94 <HAL_PCD_IRQHandler+0x18>
}
 8002d8e:	b003      	add	sp, #12
 8002d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d94:	462f      	mov	r7, r5
 8002d96:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d98:	6820      	ldr	r0, [r4, #0]
 8002d9a:	f003 f847 	bl	8005e2c <USB_ReadInterrupts>
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d0f5      	beq.n	8002d8e <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002da2:	6820      	ldr	r0, [r4, #0]
 8002da4:	f003 f842 	bl	8005e2c <USB_ReadInterrupts>
 8002da8:	f010 0f02 	tst.w	r0, #2
 8002dac:	d004      	beq.n	8002db8 <HAL_PCD_IRQHandler+0x3c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002dae:	6822      	ldr	r2, [r4, #0]
 8002db0:	6953      	ldr	r3, [r2, #20]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002db8:	6820      	ldr	r0, [r4, #0]
 8002dba:	f003 f837 	bl	8005e2c <USB_ReadInterrupts>
 8002dbe:	f010 0f10 	tst.w	r0, #16
 8002dc2:	d015      	beq.n	8002df0 <HAL_PCD_IRQHandler+0x74>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dc4:	6822      	ldr	r2, [r4, #0]
 8002dc6:	6993      	ldr	r3, [r2, #24]
 8002dc8:	f023 0310 	bic.w	r3, r3, #16
 8002dcc:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8002dce:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002dd2:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002dd6:	f3c8 4343 	ubfx	r3, r8, #17, #4
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	f000 8085 	beq.w	8002eea <HAL_PCD_IRQHandler+0x16e>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002de0:	2b06      	cmp	r3, #6
 8002de2:	f000 80aa 	beq.w	8002f3a <HAL_PCD_IRQHandler+0x1be>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002de6:	6822      	ldr	r2, [r4, #0]
 8002de8:	6993      	ldr	r3, [r2, #24]
 8002dea:	f043 0310 	orr.w	r3, r3, #16
 8002dee:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002df0:	6820      	ldr	r0, [r4, #0]
 8002df2:	f003 f81b 	bl	8005e2c <USB_ReadInterrupts>
 8002df6:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8002dfa:	f040 80b0 	bne.w	8002f5e <HAL_PCD_IRQHandler+0x1e2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002dfe:	6820      	ldr	r0, [r4, #0]
 8002e00:	f003 f814 	bl	8005e2c <USB_ReadInterrupts>
 8002e04:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8002e08:	f040 80f4 	bne.w	8002ff4 <HAL_PCD_IRQHandler+0x278>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e0c:	6820      	ldr	r0, [r4, #0]
 8002e0e:	f003 f80d 	bl	8005e2c <USB_ReadInterrupts>
 8002e12:	2800      	cmp	r0, #0
 8002e14:	f2c0 8160 	blt.w	80030d8 <HAL_PCD_IRQHandler+0x35c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e18:	6820      	ldr	r0, [r4, #0]
 8002e1a:	f003 f807 	bl	8005e2c <USB_ReadInterrupts>
 8002e1e:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8002e22:	d00a      	beq.n	8002e3a <HAL_PCD_IRQHandler+0xbe>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e24:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8002e28:	f013 0f01 	tst.w	r3, #1
 8002e2c:	f040 816e 	bne.w	800310c <HAL_PCD_IRQHandler+0x390>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e30:	6822      	ldr	r2, [r4, #0]
 8002e32:	6953      	ldr	r3, [r2, #20]
 8002e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e38:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002e3a:	6820      	ldr	r0, [r4, #0]
 8002e3c:	f002 fff6 	bl	8005e2c <USB_ReadInterrupts>
 8002e40:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8002e44:	d015      	beq.n	8002e72 <HAL_PCD_IRQHandler+0xf6>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002e46:	6822      	ldr	r2, [r4, #0]
 8002e48:	6953      	ldr	r3, [r2, #20]
 8002e4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e4e:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8002e50:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 815d 	bne.w	8003114 <HAL_PCD_IRQHandler+0x398>
        hpcd->LPM_State = LPM_L1;
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e64:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8002e68:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f000 fb6e 	bl	800354e <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e72:	6820      	ldr	r0, [r4, #0]
 8002e74:	f002 ffda 	bl	8005e2c <USB_ReadInterrupts>
 8002e78:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8002e7c:	f040 814e 	bne.w	800311c <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e80:	6820      	ldr	r0, [r4, #0]
 8002e82:	f002 ffd3 	bl	8005e2c <USB_ReadInterrupts>
 8002e86:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8002e8a:	f040 81ac 	bne.w	80031e6 <HAL_PCD_IRQHandler+0x46a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e8e:	6820      	ldr	r0, [r4, #0]
 8002e90:	f002 ffcc 	bl	8005e2c <USB_ReadInterrupts>
 8002e94:	f010 0f08 	tst.w	r0, #8
 8002e98:	f040 81bd 	bne.w	8003216 <HAL_PCD_IRQHandler+0x49a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e9c:	6820      	ldr	r0, [r4, #0]
 8002e9e:	f002 ffc5 	bl	8005e2c <USB_ReadInterrupts>
 8002ea2:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8002ea6:	f040 81bf 	bne.w	8003228 <HAL_PCD_IRQHandler+0x4ac>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002eaa:	6820      	ldr	r0, [r4, #0]
 8002eac:	f002 ffbe 	bl	8005e2c <USB_ReadInterrupts>
 8002eb0:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8002eb4:	f040 81c2 	bne.w	800323c <HAL_PCD_IRQHandler+0x4c0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002eb8:	6820      	ldr	r0, [r4, #0]
 8002eba:	f002 ffb7 	bl	8005e2c <USB_ReadInterrupts>
 8002ebe:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8002ec2:	f040 81c5 	bne.w	8003250 <HAL_PCD_IRQHandler+0x4d4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ec6:	6820      	ldr	r0, [r4, #0]
 8002ec8:	f002 ffb0 	bl	8005e2c <USB_ReadInterrupts>
 8002ecc:	f010 0f04 	tst.w	r0, #4
 8002ed0:	f43f af5d 	beq.w	8002d8e <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ed8:	f015 0f04 	tst.w	r5, #4
 8002edc:	f040 81c1 	bne.w	8003262 <HAL_PCD_IRQHandler+0x4e6>
      hpcd->Instance->GOTGINT |= temp;
 8002ee0:	6822      	ldr	r2, [r4, #0]
 8002ee2:	6853      	ldr	r3, [r2, #4]
 8002ee4:	432b      	orrs	r3, r5
 8002ee6:	6053      	str	r3, [r2, #4]
 8002ee8:	e751      	b.n	8002d8e <HAL_PCD_IRQHandler+0x12>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002eea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002eee:	ea18 0f03 	tst.w	r8, r3
 8002ef2:	f43f af78 	beq.w	8002de6 <HAL_PCD_IRQHandler+0x6a>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ef6:	ea4f 1b18 	mov.w	fp, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002efa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002efe:	9301      	str	r3, [sp, #4]
 8002f00:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
 8002f04:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8002f08:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8002f0c:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 8002f10:	4628      	mov	r0, r5
 8002f12:	f002 ff03 	bl	8005d1c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f16:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 8002f1a:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 8002f1e:	445b      	add	r3, fp
 8002f20:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f24:	9b01      	ldr	r3, [sp, #4]
 8002f26:	eba3 0309 	sub.w	r3, r3, r9
 8002f2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002f2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002f32:	445b      	add	r3, fp
 8002f34:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 8002f38:	e755      	b.n	8002de6 <HAL_PCD_IRQHandler+0x6a>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f3a:	2208      	movs	r2, #8
 8002f3c:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8002f40:	4628      	mov	r0, r5
 8002f42:	f002 feeb 	bl	8005d1c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f46:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8002f4a:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 8002f4e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002f52:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8002f56:	4443      	add	r3, r8
 8002f58:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8002f5c:	e743      	b.n	8002de6 <HAL_PCD_IRQHandler+0x6a>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f5e:	6820      	ldr	r0, [r4, #0]
 8002f60:	f002 ff68 	bl	8005e34 <USB_ReadDevAllOutEpInterrupt>
 8002f64:	4680      	mov	r8, r0
      epnum = 0U;
 8002f66:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8002f68:	e017      	b.n	8002f9a <HAL_PCD_IRQHandler+0x21e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f6a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f74:	4649      	mov	r1, r9
 8002f76:	4620      	mov	r0, r4
 8002f78:	f7ff fe5c 	bl	8002c34 <PCD_EP_OutXfrComplete_int>
 8002f7c:	e01d      	b.n	8002fba <HAL_PCD_IRQHandler+0x23e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f7e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002f82:	2208      	movs	r2, #8
 8002f84:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f88:	4649      	mov	r1, r9
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f7ff fece 	bl	8002d2c <PCD_EP_OutSetupPacket_int>
 8002f90:	e016      	b.n	8002fc0 <HAL_PCD_IRQHandler+0x244>
        epnum++;
 8002f92:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8002f96:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8002f9a:	f1b8 0f00 	cmp.w	r8, #0
 8002f9e:	f43f af2e 	beq.w	8002dfe <HAL_PCD_IRQHandler+0x82>
        if ((ep_intr & 0x1U) != 0U)
 8002fa2:	f018 0f01 	tst.w	r8, #1
 8002fa6:	d0f4      	beq.n	8002f92 <HAL_PCD_IRQHandler+0x216>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fa8:	fa5f f189 	uxtb.w	r1, r9
 8002fac:	6820      	ldr	r0, [r4, #0]
 8002fae:	f002 ff51 	bl	8005e54 <USB_ReadDevOutEPInterrupt>
 8002fb2:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002fb4:	f010 0f01 	tst.w	r0, #1
 8002fb8:	d1d7      	bne.n	8002f6a <HAL_PCD_IRQHandler+0x1ee>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002fba:	f01a 0f08 	tst.w	sl, #8
 8002fbe:	d1de      	bne.n	8002f7e <HAL_PCD_IRQHandler+0x202>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fc0:	f01a 0f10 	tst.w	sl, #16
 8002fc4:	d004      	beq.n	8002fd0 <HAL_PCD_IRQHandler+0x254>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fc6:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002fca:	2210      	movs	r2, #16
 8002fcc:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fd0:	f01a 0f20 	tst.w	sl, #32
 8002fd4:	d004      	beq.n	8002fe0 <HAL_PCD_IRQHandler+0x264>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fd6:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002fe0:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8002fe4:	d0d5      	beq.n	8002f92 <HAL_PCD_IRQHandler+0x216>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002fe6:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002fea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fee:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8002ff2:	e7ce      	b.n	8002f92 <HAL_PCD_IRQHandler+0x216>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ff4:	6820      	ldr	r0, [r4, #0]
 8002ff6:	f002 ff25 	bl	8005e44 <USB_ReadDevAllInEpInterrupt>
 8002ffa:	4680      	mov	r8, r0
      epnum = 0U;
 8002ffc:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8002ffe:	e02a      	b.n	8003056 <HAL_PCD_IRQHandler+0x2da>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003000:	4659      	mov	r1, fp
 8003002:	4620      	mov	r0, r4
 8003004:	f004 fd53 	bl	8007aae <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003008:	f01a 0f08 	tst.w	sl, #8
 800300c:	d004      	beq.n	8003018 <HAL_PCD_IRQHandler+0x29c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800300e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8003012:	2208      	movs	r2, #8
 8003014:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003018:	f01a 0f10 	tst.w	sl, #16
 800301c:	d004      	beq.n	8003028 <HAL_PCD_IRQHandler+0x2ac>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800301e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8003022:	2210      	movs	r2, #16
 8003024:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003028:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800302c:	d004      	beq.n	8003038 <HAL_PCD_IRQHandler+0x2bc>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800302e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8003032:	2240      	movs	r2, #64	; 0x40
 8003034:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003038:	f01a 0f02 	tst.w	sl, #2
 800303c:	d004      	beq.n	8003048 <HAL_PCD_IRQHandler+0x2cc>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800303e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8003042:	2202      	movs	r2, #2
 8003044:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003048:	f01a 0f80 	tst.w	sl, #128	; 0x80
 800304c:	d13f      	bne.n	80030ce <HAL_PCD_IRQHandler+0x352>
        epnum++;
 800304e:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8003052:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8003056:	f1b8 0f00 	cmp.w	r8, #0
 800305a:	f43f aed7 	beq.w	8002e0c <HAL_PCD_IRQHandler+0x90>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800305e:	f018 0f01 	tst.w	r8, #1
 8003062:	d0f4      	beq.n	800304e <HAL_PCD_IRQHandler+0x2d2>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003064:	fa5f fb89 	uxtb.w	fp, r9
 8003068:	4659      	mov	r1, fp
 800306a:	6820      	ldr	r0, [r4, #0]
 800306c:	f002 fefb 	bl	8005e66 <USB_ReadDevInEPInterrupt>
 8003070:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003072:	f010 0f01 	tst.w	r0, #1
 8003076:	d0c7      	beq.n	8003008 <HAL_PCD_IRQHandler+0x28c>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003078:	f009 030f 	and.w	r3, r9, #15
 800307c:	2101      	movs	r1, #1
 800307e:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003082:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8003086:	ea23 0302 	bic.w	r3, r3, r2
 800308a:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800308e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8003092:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 8003096:	6923      	ldr	r3, [r4, #16]
 8003098:	428b      	cmp	r3, r1
 800309a:	d1b1      	bne.n	8003000 <HAL_PCD_IRQHandler+0x284>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800309c:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 80030a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80030a4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80030a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030a8:	440a      	add	r2, r1
 80030aa:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80030ac:	f1b9 0f00 	cmp.w	r9, #0
 80030b0:	d1a6      	bne.n	8003000 <HAL_PCD_IRQHandler+0x284>
 80030b2:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 80030b6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80030ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d19f      	bne.n	8003000 <HAL_PCD_IRQHandler+0x284>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030c0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80030c4:	2101      	movs	r1, #1
 80030c6:	6820      	ldr	r0, [r4, #0]
 80030c8:	f002 fef6 	bl	8005eb8 <USB_EP0_OutStart>
 80030cc:	e798      	b.n	8003000 <HAL_PCD_IRQHandler+0x284>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030ce:	4649      	mov	r1, r9
 80030d0:	4620      	mov	r0, r4
 80030d2:	f7ff fd31 	bl	8002b38 <PCD_WriteEmptyTxFifo>
 80030d6:	e7ba      	b.n	800304e <HAL_PCD_IRQHandler+0x2d2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030d8:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 80030dc:	f023 0301 	bic.w	r3, r3, #1
 80030e0:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80030e4:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d008      	beq.n	80030fe <HAL_PCD_IRQHandler+0x382>
        HAL_PCD_ResumeCallback(hpcd);
 80030ec:	4620      	mov	r0, r4
 80030ee:	f004 fd06 	bl	8007afe <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80030f2:	6822      	ldr	r2, [r4, #0]
 80030f4:	6953      	ldr	r3, [r2, #20]
 80030f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030fa:	6153      	str	r3, [r2, #20]
 80030fc:	e68c      	b.n	8002e18 <HAL_PCD_IRQHandler+0x9c>
        hpcd->LPM_State = LPM_L0;
 80030fe:	2100      	movs	r1, #0
 8003100:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003104:	4620      	mov	r0, r4
 8003106:	f000 fa22 	bl	800354e <HAL_PCDEx_LPM_Callback>
 800310a:	e7f2      	b.n	80030f2 <HAL_PCD_IRQHandler+0x376>
        HAL_PCD_SuspendCallback(hpcd);
 800310c:	4620      	mov	r0, r4
 800310e:	f004 fcf0 	bl	8007af2 <HAL_PCD_SuspendCallback>
 8003112:	e68d      	b.n	8002e30 <HAL_PCD_IRQHandler+0xb4>
        HAL_PCD_SuspendCallback(hpcd);
 8003114:	4620      	mov	r0, r4
 8003116:	f004 fcec 	bl	8007af2 <HAL_PCD_SuspendCallback>
 800311a:	e6aa      	b.n	8002e72 <HAL_PCD_IRQHandler+0xf6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800311c:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 8003120:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003124:	f023 0301 	bic.w	r3, r3, #1
 8003128:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800312c:	2110      	movs	r1, #16
 800312e:	6820      	ldr	r0, [r4, #0]
 8003130:	f002 fb70 	bl	8005814 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003134:	e020      	b.n	8003178 <HAL_PCD_IRQHandler+0x3fc>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003136:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 800313a:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800313e:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003142:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003146:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800314a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800314e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003152:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003156:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800315a:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800315e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003162:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003166:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800316a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800316e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003172:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003176:	3601      	adds	r6, #1
 8003178:	6863      	ldr	r3, [r4, #4]
 800317a:	42b3      	cmp	r3, r6
 800317c:	d8db      	bhi.n	8003136 <HAL_PCD_IRQHandler+0x3ba>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800317e:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8003182:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003186:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800318a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800318c:	b1eb      	cbz	r3, 80031ca <HAL_PCD_IRQHandler+0x44e>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800318e:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 8003192:	f043 030b 	orr.w	r3, r3, #11
 8003196:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800319a:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800319e:	f043 030b 	orr.w	r3, r3, #11
 80031a2:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031a6:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 80031aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80031ae:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031b2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80031b6:	7c21      	ldrb	r1, [r4, #16]
 80031b8:	6820      	ldr	r0, [r4, #0]
 80031ba:	f002 fe7d 	bl	8005eb8 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031be:	6822      	ldr	r2, [r4, #0]
 80031c0:	6953      	ldr	r3, [r2, #20]
 80031c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c6:	6153      	str	r3, [r2, #20]
 80031c8:	e65a      	b.n	8002e80 <HAL_PCD_IRQHandler+0x104>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80031ca:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80031ce:	f242 032b 	movw	r3, #8235	; 0x202b
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031d8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80031dc:	f043 030b 	orr.w	r3, r3, #11
 80031e0:	f8c8 3010 	str.w	r3, [r8, #16]
 80031e4:	e7df      	b.n	80031a6 <HAL_PCD_IRQHandler+0x42a>
      (void)USB_ActivateSetup(hpcd->Instance);
 80031e6:	6820      	ldr	r0, [r4, #0]
 80031e8:	f002 fe56 	bl	8005e98 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031ec:	6820      	ldr	r0, [r4, #0]
 80031ee:	f002 fb25 	bl	800583c <USB_GetDevSpeed>
 80031f2:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031f4:	6825      	ldr	r5, [r4, #0]
 80031f6:	f000 fd05 	bl	8003c04 <HAL_RCC_GetHCLKFreq>
 80031fa:	4601      	mov	r1, r0
 80031fc:	7b22      	ldrb	r2, [r4, #12]
 80031fe:	4628      	mov	r0, r5
 8003200:	f002 fa90 	bl	8005724 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8003204:	4620      	mov	r0, r4
 8003206:	f004 fc63 	bl	8007ad0 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800320a:	6822      	ldr	r2, [r4, #0]
 800320c:	6953      	ldr	r3, [r2, #20]
 800320e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003212:	6153      	str	r3, [r2, #20]
 8003214:	e63b      	b.n	8002e8e <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SOFCallback(hpcd);
 8003216:	4620      	mov	r0, r4
 8003218:	f004 fc54 	bl	8007ac4 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800321c:	6822      	ldr	r2, [r4, #0]
 800321e:	6953      	ldr	r3, [r2, #20]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	6153      	str	r3, [r2, #20]
 8003226:	e639      	b.n	8002e9c <HAL_PCD_IRQHandler+0x120>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003228:	2100      	movs	r1, #0
 800322a:	4620      	mov	r0, r4
 800322c:	f004 fc73 	bl	8007b16 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003230:	6822      	ldr	r2, [r4, #0]
 8003232:	6953      	ldr	r3, [r2, #20]
 8003234:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003238:	6153      	str	r3, [r2, #20]
 800323a:	e636      	b.n	8002eaa <HAL_PCD_IRQHandler+0x12e>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800323c:	2100      	movs	r1, #0
 800323e:	4620      	mov	r0, r4
 8003240:	f004 fc63 	bl	8007b0a <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003244:	6822      	ldr	r2, [r4, #0]
 8003246:	6953      	ldr	r3, [r2, #20]
 8003248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800324c:	6153      	str	r3, [r2, #20]
 800324e:	e633      	b.n	8002eb8 <HAL_PCD_IRQHandler+0x13c>
      HAL_PCD_ConnectCallback(hpcd);
 8003250:	4620      	mov	r0, r4
 8003252:	f004 fc66 	bl	8007b22 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003256:	6822      	ldr	r2, [r4, #0]
 8003258:	6953      	ldr	r3, [r2, #20]
 800325a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800325e:	6153      	str	r3, [r2, #20]
 8003260:	e631      	b.n	8002ec6 <HAL_PCD_IRQHandler+0x14a>
        HAL_PCD_DisconnectCallback(hpcd);
 8003262:	4620      	mov	r0, r4
 8003264:	f004 fc63 	bl	8007b2e <HAL_PCD_DisconnectCallback>
 8003268:	e63a      	b.n	8002ee0 <HAL_PCD_IRQHandler+0x164>

0800326a <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800326a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800326e:	2b01      	cmp	r3, #1
 8003270:	d00d      	beq.n	800328e <HAL_PCD_SetAddress+0x24>
{
 8003272:	b510      	push	{r4, lr}
 8003274:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003276:	2301      	movs	r3, #1
 8003278:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800327c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003280:	6800      	ldr	r0, [r0, #0]
 8003282:	f002 fdb7 	bl	8005df4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003286:	2000      	movs	r0, #0
 8003288:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800328c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800328e:	2002      	movs	r0, #2
}
 8003290:	4770      	bx	lr

08003292 <HAL_PCD_EP_Open>:
{
 8003292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003294:	4607      	mov	r7, r0
 8003296:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003298:	f011 0f80 	tst.w	r1, #128	; 0x80
 800329c:	d127      	bne.n	80032ee <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800329e:	f001 050f 	and.w	r5, r1, #15
 80032a2:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 80032a6:	00b6      	lsls	r6, r6, #2
 80032a8:	f506 76fc 	add.w	r6, r6, #504	; 0x1f8
 80032ac:	4406      	add	r6, r0
 80032ae:	1d31      	adds	r1, r6, #4
    ep->is_in = 0U;
 80032b0:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 80032b4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80032b8:	2000      	movs	r0, #0
 80032ba:	f885 01fd 	strb.w	r0, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80032be:	f004 040f 	and.w	r4, r4, #15
 80032c2:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 80032c4:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80032c6:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80032c8:	784a      	ldrb	r2, [r1, #1]
 80032ca:	b102      	cbz	r2, 80032ce <HAL_PCD_EP_Open+0x3c>
    ep->tx_fifo_num = ep->num;
 80032cc:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d01d      	beq.n	800330e <HAL_PCD_EP_Open+0x7c>
  __HAL_LOCK(hpcd);
 80032d2:	f897 33bc 	ldrb.w	r3, [r7, #956]	; 0x3bc
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d01c      	beq.n	8003314 <HAL_PCD_EP_Open+0x82>
 80032da:	2301      	movs	r3, #1
 80032dc:	f887 33bc 	strb.w	r3, [r7, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032e0:	6838      	ldr	r0, [r7, #0]
 80032e2:	f002 fabb 	bl	800585c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032e6:	2000      	movs	r0, #0
 80032e8:	f887 03bc 	strb.w	r0, [r7, #956]	; 0x3bc
}
 80032ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ee:	f001 000f 	and.w	r0, r1, #15
 80032f2:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 80032f6:	0089      	lsls	r1, r1, #2
 80032f8:	3138      	adds	r1, #56	; 0x38
 80032fa:	4439      	add	r1, r7
 80032fc:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80032fe:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8003302:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8003306:	2501      	movs	r5, #1
 8003308:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
 800330c:	e7d7      	b.n	80032be <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	710b      	strb	r3, [r1, #4]
 8003312:	e7de      	b.n	80032d2 <HAL_PCD_EP_Open+0x40>
  __HAL_LOCK(hpcd);
 8003314:	2002      	movs	r0, #2
 8003316:	e7e9      	b.n	80032ec <HAL_PCD_EP_Open+0x5a>

08003318 <HAL_PCD_EP_Close>:
{
 8003318:	b510      	push	{r4, lr}
 800331a:	4604      	mov	r4, r0
 800331c:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800331e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003322:	d120      	bne.n	8003366 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003324:	f001 000f 	and.w	r0, r1, #15
 8003328:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003332:	4423      	add	r3, r4
 8003334:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8003336:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800333a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800333e:	2300      	movs	r3, #0
 8003340:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003344:	f002 020f 	and.w	r2, r2, #15
 8003348:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800334a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800334e:	2b01      	cmp	r3, #1
 8003350:	d019      	beq.n	8003386 <HAL_PCD_EP_Close+0x6e>
 8003352:	2301      	movs	r3, #1
 8003354:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003358:	6820      	ldr	r0, [r4, #0]
 800335a:	f002 fac7 	bl	80058ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800335e:	2000      	movs	r0, #0
 8003360:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8003364:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003366:	f001 000f 	and.w	r0, r1, #15
 800336a:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	3338      	adds	r3, #56	; 0x38
 8003372:	4423      	add	r3, r4
 8003374:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8003376:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800337a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800337e:	2301      	movs	r3, #1
 8003380:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8003384:	e7de      	b.n	8003344 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8003386:	2002      	movs	r0, #2
 8003388:	e7ec      	b.n	8003364 <HAL_PCD_EP_Close+0x4c>

0800338a <HAL_PCD_EP_Receive>:
{
 800338a:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800338c:	f001 040f 	and.w	r4, r1, #15
 8003390:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8003394:	0089      	lsls	r1, r1, #2
 8003396:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 800339a:	4401      	add	r1, r0
 800339c:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 800339e:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80033a2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80033a6:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
  ep->xfer_len = len;
 80033aa:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
  ep->xfer_count = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  ep->is_in = 0U;
 80033b4:	f885 31fd 	strb.w	r3, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80033b8:	f885 41fc 	strb.w	r4, [r5, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 80033bc:	6903      	ldr	r3, [r0, #16]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d006      	beq.n	80033d0 <HAL_PCD_EP_Receive+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033c2:	b964      	cbnz	r4, 80033de <HAL_PCD_EP_Receive+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	6800      	ldr	r0, [r0, #0]
 80033c8:	f002 fafe 	bl	80059c8 <USB_EP0StartXfer>
}
 80033cc:	2000      	movs	r0, #0
 80033ce:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80033d0:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80033d4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80033d8:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
 80033dc:	e7f1      	b.n	80033c2 <HAL_PCD_EP_Receive+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	6800      	ldr	r0, [r0, #0]
 80033e2:	f002 fb91 	bl	8005b08 <USB_EPStartXfer>
 80033e6:	e7f1      	b.n	80033cc <HAL_PCD_EP_Receive+0x42>

080033e8 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033e8:	f001 010f 	and.w	r1, r1, #15
 80033ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80033f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 80033f4:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 80033f8:	4770      	bx	lr

080033fa <HAL_PCD_EP_Transmit>:
{
 80033fa:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033fc:	f001 040f 	and.w	r4, r1, #15
 8003400:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8003404:	0089      	lsls	r1, r1, #2
 8003406:	3138      	adds	r1, #56	; 0x38
 8003408:	4401      	add	r1, r0
 800340a:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 800340c:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8003410:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8003414:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 8003416:	652b      	str	r3, [r5, #80]	; 0x50
  ep->xfer_count = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1U;
 800341c:	2301      	movs	r3, #1
 800341e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8003422:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8003426:	6903      	ldr	r3, [r0, #16]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d006      	beq.n	800343a <HAL_PCD_EP_Transmit+0x40>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800342c:	b95c      	cbnz	r4, 8003446 <HAL_PCD_EP_Transmit+0x4c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800342e:	b2da      	uxtb	r2, r3
 8003430:	6800      	ldr	r0, [r0, #0]
 8003432:	f002 fac9 	bl	80059c8 <USB_EP0StartXfer>
}
 8003436:	2000      	movs	r0, #0
 8003438:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800343a:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 800343e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8003442:	64ea      	str	r2, [r5, #76]	; 0x4c
 8003444:	e7f2      	b.n	800342c <HAL_PCD_EP_Transmit+0x32>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003446:	b2da      	uxtb	r2, r3
 8003448:	6800      	ldr	r0, [r0, #0]
 800344a:	f002 fb5d 	bl	8005b08 <USB_EPStartXfer>
 800344e:	e7f2      	b.n	8003436 <HAL_PCD_EP_Transmit+0x3c>

08003450 <HAL_PCD_EP_SetStall>:
{
 8003450:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003452:	f001 050f 	and.w	r5, r1, #15
 8003456:	6842      	ldr	r2, [r0, #4]
 8003458:	4295      	cmp	r5, r2
 800345a:	d839      	bhi.n	80034d0 <HAL_PCD_EP_SetStall+0x80>
 800345c:	4604      	mov	r4, r0
 800345e:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8003460:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003464:	d11f      	bne.n	80034a6 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8003466:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800346a:	0089      	lsls	r1, r1, #2
 800346c:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8003470:	4401      	add	r1, r0
 8003472:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8003474:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003478:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800347c:	2200      	movs	r2, #0
 800347e:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8003482:	2301      	movs	r3, #1
 8003484:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003486:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8003488:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800348c:	2b01      	cmp	r3, #1
 800348e:	d021      	beq.n	80034d4 <HAL_PCD_EP_SetStall+0x84>
 8003490:	2301      	movs	r3, #1
 8003492:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003496:	6820      	ldr	r0, [r4, #0]
 8003498:	f002 fc51 	bl	8005d3e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800349c:	b18d      	cbz	r5, 80034c2 <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 800349e:	2000      	movs	r0, #0
 80034a0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80034a4:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a6:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 80034aa:	0089      	lsls	r1, r1, #2
 80034ac:	3138      	adds	r1, #56	; 0x38
 80034ae:	4401      	add	r1, r0
 80034b0:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80034b2:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80034b6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80034c0:	e7df      	b.n	8003482 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034c2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80034c6:	7c21      	ldrb	r1, [r4, #16]
 80034c8:	6820      	ldr	r0, [r4, #0]
 80034ca:	f002 fcf5 	bl	8005eb8 <USB_EP0_OutStart>
 80034ce:	e7e6      	b.n	800349e <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 80034d0:	2001      	movs	r0, #1
 80034d2:	e7e7      	b.n	80034a4 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 80034d4:	2002      	movs	r0, #2
 80034d6:	e7e5      	b.n	80034a4 <HAL_PCD_EP_SetStall+0x54>

080034d8 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034d8:	f001 030f 	and.w	r3, r1, #15
 80034dc:	6842      	ldr	r2, [r0, #4]
 80034de:	4293      	cmp	r3, r2
 80034e0:	d831      	bhi.n	8003546 <HAL_PCD_EP_ClrStall+0x6e>
{
 80034e2:	b510      	push	{r4, lr}
 80034e4:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80034e6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80034ea:	d11e      	bne.n	800352a <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ec:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80034f0:	0089      	lsls	r1, r1, #2
 80034f2:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 80034f6:	4401      	add	r1, r0
 80034f8:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80034fa:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80034fe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003502:	2000      	movs	r0, #0
 8003504:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 8003508:	2200      	movs	r2, #0
 800350a:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800350c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800350e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003512:	2b01      	cmp	r3, #1
 8003514:	d019      	beq.n	800354a <HAL_PCD_EP_ClrStall+0x72>
 8003516:	2301      	movs	r3, #1
 8003518:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800351c:	6820      	ldr	r0, [r4, #0]
 800351e:	f002 fc3b 	bl	8005d98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003522:	2000      	movs	r0, #0
 8003524:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8003528:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800352a:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800352e:	0089      	lsls	r1, r1, #2
 8003530:	3138      	adds	r1, #56	; 0x38
 8003532:	4401      	add	r1, r0
 8003534:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8003536:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800353a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800353e:	2001      	movs	r0, #1
 8003540:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 8003544:	e7e0      	b.n	8003508 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8003546:	2001      	movs	r0, #1
}
 8003548:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 800354a:	2002      	movs	r0, #2
 800354c:	e7ec      	b.n	8003528 <HAL_PCD_EP_ClrStall+0x50>

0800354e <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800354e:	4770      	bx	lr

08003550 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003550:	b510      	push	{r4, lr}
 8003552:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003554:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <HAL_PWREx_EnableOverDrive+0x74>)
 8003556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003558:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800355c:	641a      	str	r2, [r3, #64]	; 0x40
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003564:	9301      	str	r3, [sp, #4]
 8003566:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003568:	4a17      	ldr	r2, [pc, #92]	; (80035c8 <HAL_PWREx_EnableOverDrive+0x78>)
 800356a:	6813      	ldr	r3, [r2, #0]
 800356c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003570:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003572:	f7fd ff9f 	bl	80014b4 <HAL_GetTick>
 8003576:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003578:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <HAL_PWREx_EnableOverDrive+0x78>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003580:	d108      	bne.n	8003594 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003582:	f7fd ff97 	bl	80014b4 <HAL_GetTick>
 8003586:	1b00      	subs	r0, r0, r4
 8003588:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800358c:	d9f4      	bls.n	8003578 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800358e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8003590:	b002      	add	sp, #8
 8003592:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003594:	4a0c      	ldr	r2, [pc, #48]	; (80035c8 <HAL_PWREx_EnableOverDrive+0x78>)
 8003596:	6813      	ldr	r3, [r2, #0]
 8003598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800359c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800359e:	f7fd ff89 	bl	80014b4 <HAL_GetTick>
 80035a2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035a4:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <HAL_PWREx_EnableOverDrive+0x78>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80035ac:	d107      	bne.n	80035be <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035ae:	f7fd ff81 	bl	80014b4 <HAL_GetTick>
 80035b2:	1b00      	subs	r0, r0, r4
 80035b4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80035b8:	d9f4      	bls.n	80035a4 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 80035ba:	2003      	movs	r0, #3
 80035bc:	e7e8      	b.n	8003590 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 80035be:	2000      	movs	r0, #0
 80035c0:	e7e6      	b.n	8003590 <HAL_PWREx_EnableOverDrive+0x40>
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800
 80035c8:	40007000 	.word	0x40007000

080035cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035cc:	b570      	push	{r4, r5, r6, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d2:	6803      	ldr	r3, [r0, #0]
 80035d4:	f013 0f01 	tst.w	r3, #1
 80035d8:	d029      	beq.n	800362e <HAL_RCC_OscConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80035da:	4ba8      	ldr	r3, [pc, #672]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d01a      	beq.n	800361c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035e6:	4ba5      	ldr	r3, [pc, #660]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d00f      	beq.n	8003612 <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035f2:	6863      	ldr	r3, [r4, #4]
 80035f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f8:	d040      	beq.n	800367c <HAL_RCC_OscConfig+0xb0>
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d154      	bne.n	80036a8 <HAL_RCC_OscConfig+0xdc>
 80035fe:	4b9f      	ldr	r3, [pc, #636]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e039      	b.n	8003686 <HAL_RCC_OscConfig+0xba>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003612:	4b9a      	ldr	r3, [pc, #616]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800361a:	d0ea      	beq.n	80035f2 <HAL_RCC_OscConfig+0x26>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	4b97      	ldr	r3, [pc, #604]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003624:	d003      	beq.n	800362e <HAL_RCC_OscConfig+0x62>
 8003626:	6863      	ldr	r3, [r4, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 81d1 	beq.w	80039d0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	f013 0f02 	tst.w	r3, #2
 8003634:	d07a      	beq.n	800372c <HAL_RCC_OscConfig+0x160>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003636:	4b91      	ldr	r3, [pc, #580]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f013 0f0c 	tst.w	r3, #12
 800363e:	d05e      	beq.n	80036fe <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003640:	4b8e      	ldr	r3, [pc, #568]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 030c 	and.w	r3, r3, #12
 8003648:	2b08      	cmp	r3, #8
 800364a:	d053      	beq.n	80036f4 <HAL_RCC_OscConfig+0x128>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800364c:	68e3      	ldr	r3, [r4, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 8096 	beq.w	8003780 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003654:	4a89      	ldr	r2, [pc, #548]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 8003656:	6813      	ldr	r3, [r2, #0]
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365e:	f7fd ff29 	bl	80014b4 <HAL_GetTick>
 8003662:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003664:	4b85      	ldr	r3, [pc, #532]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f013 0f02 	tst.w	r3, #2
 800366c:	d179      	bne.n	8003762 <HAL_RCC_OscConfig+0x196>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800366e:	f7fd ff21 	bl	80014b4 <HAL_GetTick>
 8003672:	1b40      	subs	r0, r0, r5
 8003674:	2802      	cmp	r0, #2
 8003676:	d9f5      	bls.n	8003664 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003678:	2003      	movs	r0, #3
 800367a:	e1ae      	b.n	80039da <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800367c:	4a7f      	ldr	r2, [pc, #508]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 800367e:	6813      	ldr	r3, [r2, #0]
 8003680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003684:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003686:	6863      	ldr	r3, [r4, #4]
 8003688:	b32b      	cbz	r3, 80036d6 <HAL_RCC_OscConfig+0x10a>
        tickstart = HAL_GetTick();
 800368a:	f7fd ff13 	bl	80014b4 <HAL_GetTick>
 800368e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003690:	4b7a      	ldr	r3, [pc, #488]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003698:	d1c9      	bne.n	800362e <HAL_RCC_OscConfig+0x62>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800369a:	f7fd ff0b 	bl	80014b4 <HAL_GetTick>
 800369e:	1b40      	subs	r0, r0, r5
 80036a0:	2864      	cmp	r0, #100	; 0x64
 80036a2:	d9f5      	bls.n	8003690 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 80036a4:	2003      	movs	r0, #3
 80036a6:	e198      	b.n	80039da <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ac:	d009      	beq.n	80036c2 <HAL_RCC_OscConfig+0xf6>
 80036ae:	4b73      	ldr	r3, [pc, #460]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	e7e1      	b.n	8003686 <HAL_RCC_OscConfig+0xba>
 80036c2:	4b6e      	ldr	r3, [pc, #440]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	e7d7      	b.n	8003686 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 80036d6:	f7fd feed 	bl	80014b4 <HAL_GetTick>
 80036da:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036dc:	4b67      	ldr	r3, [pc, #412]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80036e4:	d0a3      	beq.n	800362e <HAL_RCC_OscConfig+0x62>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e6:	f7fd fee5 	bl	80014b4 <HAL_GetTick>
 80036ea:	1b40      	subs	r0, r0, r5
 80036ec:	2864      	cmp	r0, #100	; 0x64
 80036ee:	d9f5      	bls.n	80036dc <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 80036f0:	2003      	movs	r0, #3
 80036f2:	e172      	b.n	80039da <HAL_RCC_OscConfig+0x40e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036f4:	4b61      	ldr	r3, [pc, #388]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80036fc:	d1a6      	bne.n	800364c <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fe:	4b5f      	ldr	r3, [pc, #380]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f013 0f02 	tst.w	r3, #2
 8003706:	d003      	beq.n	8003710 <HAL_RCC_OscConfig+0x144>
 8003708:	68e3      	ldr	r3, [r4, #12]
 800370a:	2b01      	cmp	r3, #1
 800370c:	f040 8162 	bne.w	80039d4 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003710:	485a      	ldr	r0, [pc, #360]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 8003712:	6803      	ldr	r3, [r0, #0]
 8003714:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003718:	6921      	ldr	r1, [r4, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	22f8      	movs	r2, #248	; 0xf8
 800371c:	fa92 f2a2 	rbit	r2, r2
 8003720:	fab2 f282 	clz	r2, r2
 8003724:	fa01 f202 	lsl.w	r2, r1, r2
 8003728:	4313      	orrs	r3, r2
 800372a:	6003      	str	r3, [r0, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	f013 0f08 	tst.w	r3, #8
 8003732:	d04d      	beq.n	80037d0 <HAL_RCC_OscConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003734:	6963      	ldr	r3, [r4, #20]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d036      	beq.n	80037a8 <HAL_RCC_OscConfig+0x1dc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373a:	4a50      	ldr	r2, [pc, #320]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 800373c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003744:	f7fd feb6 	bl	80014b4 <HAL_GetTick>
 8003748:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374a:	4b4c      	ldr	r3, [pc, #304]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 800374c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374e:	f013 0f02 	tst.w	r3, #2
 8003752:	d13d      	bne.n	80037d0 <HAL_RCC_OscConfig+0x204>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003754:	f7fd feae 	bl	80014b4 <HAL_GetTick>
 8003758:	1b40      	subs	r0, r0, r5
 800375a:	2802      	cmp	r0, #2
 800375c:	d9f5      	bls.n	800374a <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 800375e:	2003      	movs	r0, #3
 8003760:	e13b      	b.n	80039da <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003762:	4846      	ldr	r0, [pc, #280]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 8003764:	6803      	ldr	r3, [r0, #0]
 8003766:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800376a:	6921      	ldr	r1, [r4, #16]
 800376c:	22f8      	movs	r2, #248	; 0xf8
 800376e:	fa92 f2a2 	rbit	r2, r2
 8003772:	fab2 f282 	clz	r2, r2
 8003776:	fa01 f202 	lsl.w	r2, r1, r2
 800377a:	4313      	orrs	r3, r2
 800377c:	6003      	str	r3, [r0, #0]
 800377e:	e7d5      	b.n	800372c <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_DISABLE();
 8003780:	4a3e      	ldr	r2, [pc, #248]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 8003782:	6813      	ldr	r3, [r2, #0]
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800378a:	f7fd fe93 	bl	80014b4 <HAL_GetTick>
 800378e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003790:	4b3a      	ldr	r3, [pc, #232]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f013 0f02 	tst.w	r3, #2
 8003798:	d0c8      	beq.n	800372c <HAL_RCC_OscConfig+0x160>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800379a:	f7fd fe8b 	bl	80014b4 <HAL_GetTick>
 800379e:	1b40      	subs	r0, r0, r5
 80037a0:	2802      	cmp	r0, #2
 80037a2:	d9f5      	bls.n	8003790 <HAL_RCC_OscConfig+0x1c4>
            return HAL_TIMEOUT;
 80037a4:	2003      	movs	r0, #3
 80037a6:	e118      	b.n	80039da <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a8:	4a34      	ldr	r2, [pc, #208]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 80037aa:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80037ac:	f023 0301 	bic.w	r3, r3, #1
 80037b0:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b2:	f7fd fe7f 	bl	80014b4 <HAL_GetTick>
 80037b6:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b8:	4b30      	ldr	r3, [pc, #192]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 80037ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037bc:	f013 0f02 	tst.w	r3, #2
 80037c0:	d006      	beq.n	80037d0 <HAL_RCC_OscConfig+0x204>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037c2:	f7fd fe77 	bl	80014b4 <HAL_GetTick>
 80037c6:	1b40      	subs	r0, r0, r5
 80037c8:	2802      	cmp	r0, #2
 80037ca:	d9f5      	bls.n	80037b8 <HAL_RCC_OscConfig+0x1ec>
        {
          return HAL_TIMEOUT;
 80037cc:	2003      	movs	r0, #3
 80037ce:	e104      	b.n	80039da <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	f013 0f04 	tst.w	r3, #4
 80037d6:	d07d      	beq.n	80038d4 <HAL_RCC_OscConfig+0x308>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037d8:	4b28      	ldr	r3, [pc, #160]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80037e0:	d10b      	bne.n	80037fa <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e2:	4b26      	ldr	r3, [pc, #152]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 80037e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037ea:	641a      	str	r2, [r3, #64]	; 0x40
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80037f6:	2501      	movs	r5, #1
 80037f8:	e000      	b.n	80037fc <HAL_RCC_OscConfig+0x230>
  FlagStatus pwrclkchanged = RESET;
 80037fa:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037fc:	4b20      	ldr	r3, [pc, #128]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003804:	d00e      	beq.n	8003824 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003806:	68a3      	ldr	r3, [r4, #8]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d01f      	beq.n	800384c <HAL_RCC_OscConfig+0x280>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d139      	bne.n	8003884 <HAL_RCC_OscConfig+0x2b8>
 8003810:	4b1a      	ldr	r3, [pc, #104]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 8003812:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003814:	f022 0201 	bic.w	r2, r2, #1
 8003818:	671a      	str	r2, [r3, #112]	; 0x70
 800381a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800381c:	f022 0204 	bic.w	r2, r2, #4
 8003820:	671a      	str	r2, [r3, #112]	; 0x70
 8003822:	e018      	b.n	8003856 <HAL_RCC_OscConfig+0x28a>
      PWR->CR1 |= PWR_CR1_DBP;
 8003824:	4a16      	ldr	r2, [pc, #88]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 8003826:	6813      	ldr	r3, [r2, #0]
 8003828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800382e:	f7fd fe41 	bl	80014b4 <HAL_GetTick>
 8003832:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003834:	4b12      	ldr	r3, [pc, #72]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f413 7f80 	tst.w	r3, #256	; 0x100
 800383c:	d1e3      	bne.n	8003806 <HAL_RCC_OscConfig+0x23a>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800383e:	f7fd fe39 	bl	80014b4 <HAL_GetTick>
 8003842:	1b80      	subs	r0, r0, r6
 8003844:	2864      	cmp	r0, #100	; 0x64
 8003846:	d9f5      	bls.n	8003834 <HAL_RCC_OscConfig+0x268>
          return HAL_TIMEOUT;
 8003848:	2003      	movs	r0, #3
 800384a:	e0c6      	b.n	80039da <HAL_RCC_OscConfig+0x40e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800384c:	4a0b      	ldr	r2, [pc, #44]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 800384e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003856:	68a3      	ldr	r3, [r4, #8]
 8003858:	b353      	cbz	r3, 80038b0 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385a:	f7fd fe2b 	bl	80014b4 <HAL_GetTick>
 800385e:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	f013 0f02 	tst.w	r3, #2
 8003868:	d133      	bne.n	80038d2 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800386a:	f7fd fe23 	bl	80014b4 <HAL_GetTick>
 800386e:	1b80      	subs	r0, r0, r6
 8003870:	f241 3388 	movw	r3, #5000	; 0x1388
 8003874:	4298      	cmp	r0, r3
 8003876:	d9f3      	bls.n	8003860 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8003878:	2003      	movs	r0, #3
 800387a:	e0ae      	b.n	80039da <HAL_RCC_OscConfig+0x40e>
 800387c:	40023800 	.word	0x40023800
 8003880:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003884:	2b05      	cmp	r3, #5
 8003886:	d009      	beq.n	800389c <HAL_RCC_OscConfig+0x2d0>
 8003888:	4b56      	ldr	r3, [pc, #344]	; (80039e4 <HAL_RCC_OscConfig+0x418>)
 800388a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800388c:	f022 0201 	bic.w	r2, r2, #1
 8003890:	671a      	str	r2, [r3, #112]	; 0x70
 8003892:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003894:	f022 0204 	bic.w	r2, r2, #4
 8003898:	671a      	str	r2, [r3, #112]	; 0x70
 800389a:	e7dc      	b.n	8003856 <HAL_RCC_OscConfig+0x28a>
 800389c:	4b51      	ldr	r3, [pc, #324]	; (80039e4 <HAL_RCC_OscConfig+0x418>)
 800389e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038a0:	f042 0204 	orr.w	r2, r2, #4
 80038a4:	671a      	str	r2, [r3, #112]	; 0x70
 80038a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038a8:	f042 0201 	orr.w	r2, r2, #1
 80038ac:	671a      	str	r2, [r3, #112]	; 0x70
 80038ae:	e7d2      	b.n	8003856 <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fd fe00 	bl	80014b4 <HAL_GetTick>
 80038b4:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b6:	4b4b      	ldr	r3, [pc, #300]	; (80039e4 <HAL_RCC_OscConfig+0x418>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	f013 0f02 	tst.w	r3, #2
 80038be:	d008      	beq.n	80038d2 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038c0:	f7fd fdf8 	bl	80014b4 <HAL_GetTick>
 80038c4:	1b80      	subs	r0, r0, r6
 80038c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80038ca:	4298      	cmp	r0, r3
 80038cc:	d9f3      	bls.n	80038b6 <HAL_RCC_OscConfig+0x2ea>
        {
          return HAL_TIMEOUT;
 80038ce:	2003      	movs	r0, #3
 80038d0:	e083      	b.n	80039da <HAL_RCC_OscConfig+0x40e>
        }       
      }
    }
    
    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038d2:	b9f5      	cbnz	r5, 8003912 <HAL_RCC_OscConfig+0x346>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038d4:	69a3      	ldr	r3, [r4, #24]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d07e      	beq.n	80039d8 <HAL_RCC_OscConfig+0x40c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038da:	4a42      	ldr	r2, [pc, #264]	; (80039e4 <HAL_RCC_OscConfig+0x418>)
 80038dc:	6892      	ldr	r2, [r2, #8]
 80038de:	f002 020c 	and.w	r2, r2, #12
 80038e2:	2a08      	cmp	r2, #8
 80038e4:	d07b      	beq.n	80039de <HAL_RCC_OscConfig+0x412>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d019      	beq.n	800391e <HAL_RCC_OscConfig+0x352>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ea:	4a3e      	ldr	r2, [pc, #248]	; (80039e4 <HAL_RCC_OscConfig+0x418>)
 80038ec:	6813      	ldr	r3, [r2, #0]
 80038ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f4:	f7fd fdde 	bl	80014b4 <HAL_GetTick>
 80038f8:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fa:	4b3a      	ldr	r3, [pc, #232]	; (80039e4 <HAL_RCC_OscConfig+0x418>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003902:	d063      	beq.n	80039cc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003904:	f7fd fdd6 	bl	80014b4 <HAL_GetTick>
 8003908:	1b00      	subs	r0, r0, r4
 800390a:	2802      	cmp	r0, #2
 800390c:	d9f5      	bls.n	80038fa <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800390e:	2003      	movs	r0, #3
 8003910:	e063      	b.n	80039da <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003912:	4a34      	ldr	r2, [pc, #208]	; (80039e4 <HAL_RCC_OscConfig+0x418>)
 8003914:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391a:	6413      	str	r3, [r2, #64]	; 0x40
 800391c:	e7da      	b.n	80038d4 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 800391e:	4a31      	ldr	r2, [pc, #196]	; (80039e4 <HAL_RCC_OscConfig+0x418>)
 8003920:	6813      	ldr	r3, [r2, #0]
 8003922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003926:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003928:	f7fd fdc4 	bl	80014b4 <HAL_GetTick>
 800392c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <HAL_RCC_OscConfig+0x418>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003936:	d006      	beq.n	8003946 <HAL_RCC_OscConfig+0x37a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003938:	f7fd fdbc 	bl	80014b4 <HAL_GetTick>
 800393c:	1b40      	subs	r0, r0, r5
 800393e:	2802      	cmp	r0, #2
 8003940:	d9f5      	bls.n	800392e <HAL_RCC_OscConfig+0x362>
            return HAL_TIMEOUT;
 8003942:	2003      	movs	r0, #3
 8003944:	e049      	b.n	80039da <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003946:	69e3      	ldr	r3, [r4, #28]
 8003948:	6a22      	ldr	r2, [r4, #32]
 800394a:	4313      	orrs	r3, r2
 800394c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800394e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003952:	fa92 f2a2 	rbit	r2, r2
 8003956:	fab2 f282 	clz	r2, r2
 800395a:	fa01 f202 	lsl.w	r2, r1, r2
 800395e:	4313      	orrs	r3, r2
 8003960:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003962:	0852      	lsrs	r2, r2, #1
 8003964:	3a01      	subs	r2, #1
 8003966:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800396a:	fa91 f1a1 	rbit	r1, r1
 800396e:	fab1 f181 	clz	r1, r1
 8003972:	408a      	lsls	r2, r1
 8003974:	4313      	orrs	r3, r2
 8003976:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003978:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800397c:	fa92 f2a2 	rbit	r2, r2
 8003980:	fab2 f282 	clz	r2, r2
 8003984:	fa01 f202 	lsl.w	r2, r1, r2
 8003988:	4313      	orrs	r3, r2
 800398a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800398c:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003990:	fa92 f2a2 	rbit	r2, r2
 8003994:	fab2 f282 	clz	r2, r2
 8003998:	fa01 f202 	lsl.w	r2, r1, r2
 800399c:	4313      	orrs	r3, r2
 800399e:	4a11      	ldr	r2, [pc, #68]	; (80039e4 <HAL_RCC_OscConfig+0x418>)
 80039a0:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80039a2:	6813      	ldr	r3, [r2, #0]
 80039a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039a8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80039aa:	f7fd fd83 	bl	80014b4 <HAL_GetTick>
 80039ae:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b0:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <HAL_RCC_OscConfig+0x418>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80039b8:	d106      	bne.n	80039c8 <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ba:	f7fd fd7b 	bl	80014b4 <HAL_GetTick>
 80039be:	1b00      	subs	r0, r0, r4
 80039c0:	2802      	cmp	r0, #2
 80039c2:	d9f5      	bls.n	80039b0 <HAL_RCC_OscConfig+0x3e4>
            return HAL_TIMEOUT;
 80039c4:	2003      	movs	r0, #3
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x40e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80039c8:	2000      	movs	r0, #0
 80039ca:	e006      	b.n	80039da <HAL_RCC_OscConfig+0x40e>
 80039cc:	2000      	movs	r0, #0
 80039ce:	e004      	b.n	80039da <HAL_RCC_OscConfig+0x40e>
        return HAL_ERROR;
 80039d0:	2001      	movs	r0, #1
 80039d2:	e002      	b.n	80039da <HAL_RCC_OscConfig+0x40e>
        return HAL_ERROR;
 80039d4:	2001      	movs	r0, #1
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x40e>
  return HAL_OK;
 80039d8:	2000      	movs	r0, #0
}
 80039da:	b002      	add	sp, #8
 80039dc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80039de:	2001      	movs	r0, #1
 80039e0:	e7fb      	b.n	80039da <HAL_RCC_OscConfig+0x40e>
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800

080039e8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039e8:	4b21      	ldr	r3, [pc, #132]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x88>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d038      	beq.n	8003a66 <HAL_RCC_GetSysClockFreq+0x7e>
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d138      	bne.n	8003a6a <HAL_RCC_GetSysClockFreq+0x82>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f8:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x88>)
 80039fa:	6858      	ldr	r0, [r3, #4]
 80039fc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003a06:	d01e      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0x5e>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8003a08:	4a1a      	ldr	r2, [pc, #104]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003a0a:	fbb2 f2f0 	udiv	r2, r2, r0
 8003a0e:	4b18      	ldr	r3, [pc, #96]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x88>)
 8003a10:	6858      	ldr	r0, [r3, #4]
 8003a12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a16:	4018      	ands	r0, r3
 8003a18:	fa93 f3a3 	rbit	r3, r3
 8003a1c:	fab3 f383 	clz	r3, r3
 8003a20:	40d8      	lsrs	r0, r3
 8003a22:	fb00 f002 	mul.w	r0, r0, r2
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8003a26:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x88>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a2e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003a32:	fa92 f2a2 	rbit	r2, r2
 8003a36:	fab2 f282 	clz	r2, r2
 8003a3a:	40d3      	lsrs	r3, r2
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 8003a40:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003a44:	4770      	bx	lr
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8003a46:	4a0c      	ldr	r2, [pc, #48]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x90>)
 8003a48:	fbb2 f2f0 	udiv	r2, r2, r0
 8003a4c:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x88>)
 8003a4e:	6858      	ldr	r0, [r3, #4]
 8003a50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a54:	4018      	ands	r0, r3
 8003a56:	fa93 f3a3 	rbit	r3, r3
 8003a5a:	fab3 f383 	clz	r3, r3
 8003a5e:	40d8      	lsrs	r0, r3
 8003a60:	fb00 f002 	mul.w	r0, r0, r2
 8003a64:	e7df      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x3e>
      sysclockfreq = HSE_VALUE;
 8003a66:	4803      	ldr	r0, [pc, #12]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003a68:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a6a:	4803      	ldr	r0, [pc, #12]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x90>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800
 8003a74:	017d7840 	.word	0x017d7840
 8003a78:	00f42400 	.word	0x00f42400

08003a7c <HAL_RCC_ClockConfig>:
{
 8003a7c:	b570      	push	{r4, r5, r6, lr}
 8003a7e:	4604      	mov	r4, r0
 8003a80:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003a82:	4b5c      	ldr	r3, [pc, #368]	; (8003bf4 <HAL_RCC_ClockConfig+0x178>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	428b      	cmp	r3, r1
 8003a8c:	d20b      	bcs.n	8003aa6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8e:	4a59      	ldr	r2, [pc, #356]	; (8003bf4 <HAL_RCC_ClockConfig+0x178>)
 8003a90:	6813      	ldr	r3, [r2, #0]
 8003a92:	f023 030f 	bic.w	r3, r3, #15
 8003a96:	430b      	orrs	r3, r1
 8003a98:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a9a:	6813      	ldr	r3, [r2, #0]
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	428b      	cmp	r3, r1
 8003aa2:	f040 80a0 	bne.w	8003be6 <HAL_RCC_ClockConfig+0x16a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	f013 0f02 	tst.w	r3, #2
 8003aac:	d006      	beq.n	8003abc <HAL_RCC_ClockConfig+0x40>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aae:	4a52      	ldr	r2, [pc, #328]	; (8003bf8 <HAL_RCC_ClockConfig+0x17c>)
 8003ab0:	6893      	ldr	r3, [r2, #8]
 8003ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ab6:	68a1      	ldr	r1, [r4, #8]
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	f013 0f01 	tst.w	r3, #1
 8003ac2:	d052      	beq.n	8003b6a <HAL_RCC_ClockConfig+0xee>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ac4:	6863      	ldr	r3, [r4, #4]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d023      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x96>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d028      	beq.n	8003b20 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ace:	4a4a      	ldr	r2, [pc, #296]	; (8003bf8 <HAL_RCC_ClockConfig+0x17c>)
 8003ad0:	6812      	ldr	r2, [r2, #0]
 8003ad2:	f012 0f02 	tst.w	r2, #2
 8003ad6:	f000 8088 	beq.w	8003bea <HAL_RCC_ClockConfig+0x16e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ada:	4947      	ldr	r1, [pc, #284]	; (8003bf8 <HAL_RCC_ClockConfig+0x17c>)
 8003adc:	688a      	ldr	r2, [r1, #8]
 8003ade:	f022 0203 	bic.w	r2, r2, #3
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003ae6:	f7fd fce5 	bl	80014b4 <HAL_GetTick>
 8003aea:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aec:	6863      	ldr	r3, [r4, #4]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d01d      	beq.n	8003b2e <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d02a      	beq.n	8003b4c <HAL_RCC_ClockConfig+0xd0>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003af6:	4b40      	ldr	r3, [pc, #256]	; (8003bf8 <HAL_RCC_ClockConfig+0x17c>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f013 0f0c 	tst.w	r3, #12
 8003afe:	d034      	beq.n	8003b6a <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b00:	f7fd fcd8 	bl	80014b4 <HAL_GetTick>
 8003b04:	1b83      	subs	r3, r0, r6
 8003b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d9f3      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x7a>
          return HAL_TIMEOUT;
 8003b0e:	2003      	movs	r0, #3
 8003b10:	e068      	b.n	8003be4 <HAL_RCC_ClockConfig+0x168>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b12:	4a39      	ldr	r2, [pc, #228]	; (8003bf8 <HAL_RCC_ClockConfig+0x17c>)
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003b1a:	d1de      	bne.n	8003ada <HAL_RCC_ClockConfig+0x5e>
        return HAL_ERROR;
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	e061      	b.n	8003be4 <HAL_RCC_ClockConfig+0x168>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b20:	4a35      	ldr	r2, [pc, #212]	; (8003bf8 <HAL_RCC_ClockConfig+0x17c>)
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003b28:	d1d7      	bne.n	8003ada <HAL_RCC_ClockConfig+0x5e>
        return HAL_ERROR;
 8003b2a:	2001      	movs	r0, #1
 8003b2c:	e05a      	b.n	8003be4 <HAL_RCC_ClockConfig+0x168>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b2e:	4b32      	ldr	r3, [pc, #200]	; (8003bf8 <HAL_RCC_ClockConfig+0x17c>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d017      	beq.n	8003b6a <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b3a:	f7fd fcbb 	bl	80014b4 <HAL_GetTick>
 8003b3e:	1b83      	subs	r3, r0, r6
 8003b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d9f2      	bls.n	8003b2e <HAL_RCC_ClockConfig+0xb2>
          return HAL_TIMEOUT;
 8003b48:	2003      	movs	r0, #3
 8003b4a:	e04b      	b.n	8003be4 <HAL_RCC_ClockConfig+0x168>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b4c:	4b2a      	ldr	r3, [pc, #168]	; (8003bf8 <HAL_RCC_ClockConfig+0x17c>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 030c 	and.w	r3, r3, #12
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d008      	beq.n	8003b6a <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b58:	f7fd fcac 	bl	80014b4 <HAL_GetTick>
 8003b5c:	1b80      	subs	r0, r0, r6
 8003b5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b62:	4298      	cmp	r0, r3
 8003b64:	d9f2      	bls.n	8003b4c <HAL_RCC_ClockConfig+0xd0>
          return HAL_TIMEOUT;
 8003b66:	2003      	movs	r0, #3
 8003b68:	e03c      	b.n	8003be4 <HAL_RCC_ClockConfig+0x168>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003b6a:	4b22      	ldr	r3, [pc, #136]	; (8003bf4 <HAL_RCC_ClockConfig+0x178>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	42ab      	cmp	r3, r5
 8003b74:	d90a      	bls.n	8003b8c <HAL_RCC_ClockConfig+0x110>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b76:	4a1f      	ldr	r2, [pc, #124]	; (8003bf4 <HAL_RCC_ClockConfig+0x178>)
 8003b78:	6813      	ldr	r3, [r2, #0]
 8003b7a:	f023 030f 	bic.w	r3, r3, #15
 8003b7e:	432b      	orrs	r3, r5
 8003b80:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b82:	6813      	ldr	r3, [r2, #0]
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	42ab      	cmp	r3, r5
 8003b8a:	d130      	bne.n	8003bee <HAL_RCC_ClockConfig+0x172>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	f013 0f04 	tst.w	r3, #4
 8003b92:	d006      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b94:	4a18      	ldr	r2, [pc, #96]	; (8003bf8 <HAL_RCC_ClockConfig+0x17c>)
 8003b96:	6893      	ldr	r3, [r2, #8]
 8003b98:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003b9c:	68e1      	ldr	r1, [r4, #12]
 8003b9e:	430b      	orrs	r3, r1
 8003ba0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	f013 0f08 	tst.w	r3, #8
 8003ba8:	d007      	beq.n	8003bba <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003baa:	4a13      	ldr	r2, [pc, #76]	; (8003bf8 <HAL_RCC_ClockConfig+0x17c>)
 8003bac:	6893      	ldr	r3, [r2, #8]
 8003bae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003bb2:	6921      	ldr	r1, [r4, #16]
 8003bb4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003bb8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003bba:	f7ff ff15 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 8003bbe:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <HAL_RCC_ClockConfig+0x17c>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bc6:	22f0      	movs	r2, #240	; 0xf0
 8003bc8:	fa92 f2a2 	rbit	r2, r2
 8003bcc:	fab2 f282 	clz	r2, r2
 8003bd0:	40d3      	lsrs	r3, r2
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <HAL_RCC_ClockConfig+0x180>)
 8003bd4:	5cd3      	ldrb	r3, [r2, r3]
 8003bd6:	40d8      	lsrs	r0, r3
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <HAL_RCC_ClockConfig+0x184>)
 8003bda:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f7fd fc3f 	bl	8001460 <HAL_InitTick>
  return HAL_OK;
 8003be2:	2000      	movs	r0, #0
}
 8003be4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003be6:	2001      	movs	r0, #1
 8003be8:	e7fc      	b.n	8003be4 <HAL_RCC_ClockConfig+0x168>
        return HAL_ERROR;
 8003bea:	2001      	movs	r0, #1
 8003bec:	e7fa      	b.n	8003be4 <HAL_RCC_ClockConfig+0x168>
      return HAL_ERROR;
 8003bee:	2001      	movs	r0, #1
 8003bf0:	e7f8      	b.n	8003be4 <HAL_RCC_ClockConfig+0x168>
 8003bf2:	bf00      	nop
 8003bf4:	40023c00 	.word	0x40023c00
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	08009650 	.word	0x08009650
 8003c00:	200000e4 	.word	0x200000e4

08003c04 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003c04:	4b01      	ldr	r3, [pc, #4]	; (8003c0c <HAL_RCC_GetHCLKFreq+0x8>)
 8003c06:	6818      	ldr	r0, [r3, #0]
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	200000e4 	.word	0x200000e4

08003c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8003c10:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003c12:	f7ff fff7 	bl	8003c04 <HAL_RCC_GetHCLKFreq>
 8003c16:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003c1e:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8003c22:	fa92 f2a2 	rbit	r2, r2
 8003c26:	fab2 f282 	clz	r2, r2
 8003c2a:	40d3      	lsrs	r3, r2
 8003c2c:	4a02      	ldr	r2, [pc, #8]	; (8003c38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c2e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003c30:	40d8      	lsrs	r0, r3
 8003c32:	bd08      	pop	{r3, pc}
 8003c34:	40023800 	.word	0x40023800
 8003c38:	08009660 	.word	0x08009660

08003c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c3c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8003c3e:	f7ff ffe1 	bl	8003c04 <HAL_RCC_GetHCLKFreq>
 8003c42:	4b07      	ldr	r3, [pc, #28]	; (8003c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003c4a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003c4e:	fa92 f2a2 	rbit	r2, r2
 8003c52:	fab2 f282 	clz	r2, r2
 8003c56:	40d3      	lsrs	r3, r2
 8003c58:	4a02      	ldr	r2, [pc, #8]	; (8003c64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c5a:	5cd3      	ldrb	r3, [r2, r3]
} 
 8003c5c:	40d8      	lsrs	r0, r3
 8003c5e:	bd08      	pop	{r3, pc}
 8003c60:	40023800 	.word	0x40023800
 8003c64:	08009660 	.word	0x08009660

08003c68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c6e:	6806      	ldr	r6, [r0, #0]
 8003c70:	f016 0601 	ands.w	r6, r6, #1
 8003c74:	d00d      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c76:	4bb5      	ldr	r3, [pc, #724]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003c7e:	609a      	str	r2, [r3, #8]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003c84:	430a      	orrs	r2, r1
 8003c86:	609a      	str	r2, [r3, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c88:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 8155 	beq.w	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  uint32_t plli2sused = 0;
 8003c90:	2600      	movs	r6, #0
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c92:	6825      	ldr	r5, [r4, #0]
 8003c94:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8003c98:	d011      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c9a:	4aac      	ldr	r2, [pc, #688]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c9c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003ca0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003ca4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003ca6:	430b      	orrs	r3, r1
 8003ca8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003cac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cb2:	f000 8144 	beq.w	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 8143 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  uint32_t pllsaiused = 0;
 8003cbc:	2500      	movs	r5, #0
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003cc4:	d00f      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cc6:	4aa1      	ldr	r2, [pc, #644]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cc8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003ccc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003cd0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003cd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cde:	f000 8132 	beq.w	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ce2:	b903      	cbnz	r3, 8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1; 
 8003ce4:	2501      	movs	r5, #1
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003cec:	d000      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {    
      plli2sused = 1; 
 8003cee:	2601      	movs	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cf0:	f013 0f20 	tst.w	r3, #32
 8003cf4:	f040 812c 	bne.w	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cf8:	6823      	ldr	r3, [r4, #0]
 8003cfa:	f013 0f10 	tst.w	r3, #16
 8003cfe:	d00c      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d00:	4b92      	ldr	r3, [pc, #584]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d02:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d06:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003d0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003d0e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003d14:	430a      	orrs	r2, r1
 8003d16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003d20:	d008      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d22:	4a8a      	ldr	r2, [pc, #552]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d24:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003d28:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003d2c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d3c:	4a83      	ldr	r2, [pc, #524]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d3e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003d42:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003d46:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003d54:	d008      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d56:	4a7d      	ldr	r2, [pc, #500]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d58:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003d5c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003d60:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003d62:	430b      	orrs	r3, r1
 8003d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003d6e:	d008      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d70:	4a76      	ldr	r2, [pc, #472]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d72:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003d76:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003d7a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003d88:	d008      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d8a:	4a70      	ldr	r2, [pc, #448]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d8c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003d90:	f023 0303 	bic.w	r3, r3, #3
 8003d94:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003d96:	430b      	orrs	r3, r1
 8003d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003da2:	d008      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003da4:	4a69      	ldr	r2, [pc, #420]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003da6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003daa:	f023 030c 	bic.w	r3, r3, #12
 8003dae:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003db0:	430b      	orrs	r3, r1
 8003db2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003dbc:	d008      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dbe:	4a63      	ldr	r2, [pc, #396]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003dc0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003dc4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003dc8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003dd6:	d008      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dd8:	4a5c      	ldr	r2, [pc, #368]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003dda:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003dde:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003de2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003de4:	430b      	orrs	r3, r1
 8003de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003df0:	d008      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003df2:	4a56      	ldr	r2, [pc, #344]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003df4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dfc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e04:	6823      	ldr	r3, [r4, #0]
 8003e06:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003e0a:	d008      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e0c:	4a4f      	ldr	r2, [pc, #316]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e0e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e12:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e16:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003e24:	d008      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e26:	4a49      	ldr	r2, [pc, #292]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e28:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e30:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003e32:	430b      	orrs	r3, r1
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003e3e:	d008      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e40:	4a42      	ldr	r2, [pc, #264]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e42:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e46:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003e4a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003e58:	d008      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e5a:	4a3c      	ldr	r2, [pc, #240]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e5c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e64:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003e66:	430b      	orrs	r3, r1
 8003e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003e72:	d00d      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e74:	4a35      	ldr	r2, [pc, #212]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e76:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e7a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003e7e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003e80:	430b      	orrs	r3, r1
 8003e82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e86:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003e88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e8c:	f000 80c6 	beq.w	800401c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	f013 0f08 	tst.w	r3, #8
 8003e96:	d000      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1; 
 8003e98:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e9a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003e9e:	d008      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ea0:	4a2a      	ldr	r2, [pc, #168]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ea2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003ea6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003eaa:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003eac:	430b      	orrs	r3, r1
 8003eae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003eb8:	d009      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003eba:	4a24      	ldr	r2, [pc, #144]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ebc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8003ed4:	d009      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ed6:	4a1d      	ldr	r2, [pc, #116]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ed8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003edc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003ee0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003ef0:	d009      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ef2:	4a16      	ldr	r2, [pc, #88]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ef4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003ef8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003efc:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8003f00:	430b      	orrs	r3, r1
 8003f02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003f0c:	d009      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f0e:	4a0f      	ldr	r2, [pc, #60]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f10:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003f14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f18:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003f22:	2e00      	cmp	r6, #0
 8003f24:	d17c      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f2c:	d078      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f2e:	2d01      	cmp	r5, #1
 8003f30:	f000 819e 	beq.w	8004270 <HAL_RCCEx_PeriphCLKConfig+0x608>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003f34:	2000      	movs	r0, #0
}
 8003f36:	b003      	add	sp, #12
 8003f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1; 
 8003f3a:	2601      	movs	r6, #1
 8003f3c:	e6a9      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1; 
 8003f3e:	2601      	movs	r6, #1
 8003f40:	e6b9      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1; 
 8003f42:	2501      	movs	r5, #1
 8003f44:	e6bb      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1; 
 8003f46:	2601      	movs	r6, #1
 8003f48:	e6cb      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f4a:	bf00      	nop
 8003f4c:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f50:	4bc4      	ldr	r3, [pc, #784]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003f64:	4ac0      	ldr	r2, [pc, #768]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8003f66:	6813      	ldr	r3, [r2, #0]
 8003f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f6c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003f6e:	f7fd faa1 	bl	80014b4 <HAL_GetTick>
 8003f72:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f74:	4bbc      	ldr	r3, [pc, #752]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f7c:	d106      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x324>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7e:	f7fd fa99 	bl	80014b4 <HAL_GetTick>
 8003f82:	1bc0      	subs	r0, r0, r7
 8003f84:	2864      	cmp	r0, #100	; 0x64
 8003f86:	d9f5      	bls.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
 8003f88:	2003      	movs	r0, #3
 8003f8a:	e7d4      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f8c:	4bb5      	ldr	r3, [pc, #724]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f90:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003f94:	d015      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003f96:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003f98:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d010      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fa0:	4bb0      	ldr	r3, [pc, #704]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003fa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fa4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fa8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003faa:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003fae:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003fb2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003fb6:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003fb8:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	f013 0f01 	tst.w	r3, #1
 8003fc0:	d112      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x380>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003fc4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003fc8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003fcc:	d01d      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8003fce:	4aa5      	ldr	r2, [pc, #660]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003fd0:	6893      	ldr	r3, [r2, #8]
 8003fd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003fd6:	6093      	str	r3, [r2, #8]
 8003fd8:	49a2      	ldr	r1, [pc, #648]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003fda:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003fdc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003fde:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	670b      	str	r3, [r1, #112]	; 0x70
 8003fe6:	e687      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8003fe8:	f7fd fa64 	bl	80014b4 <HAL_GetTick>
 8003fec:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fee:	4b9d      	ldr	r3, [pc, #628]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	f013 0f02 	tst.w	r3, #2
 8003ff6:	d1e4      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff8:	f7fd fa5c 	bl	80014b4 <HAL_GetTick>
 8003ffc:	1bc0      	subs	r0, r0, r7
 8003ffe:	f241 3388 	movw	r3, #5000	; 0x1388
 8004002:	4298      	cmp	r0, r3
 8004004:	d9f3      	bls.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x386>
            return HAL_TIMEOUT;
 8004006:	2003      	movs	r0, #3
 8004008:	e795      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800400a:	4896      	ldr	r0, [pc, #600]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 800400c:	6882      	ldr	r2, [r0, #8]
 800400e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004012:	4996      	ldr	r1, [pc, #600]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8004014:	4019      	ands	r1, r3
 8004016:	430a      	orrs	r2, r1
 8004018:	6082      	str	r2, [r0, #8]
 800401a:	e7dd      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      pllsaiused = 1; 
 800401c:	2501      	movs	r5, #1
 800401e:	e737      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_PLLI2S_DISABLE();  
 8004020:	4a90      	ldr	r2, [pc, #576]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8004022:	6813      	ldr	r3, [r2, #0]
 8004024:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004028:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800402a:	f7fd fa43 	bl	80014b4 <HAL_GetTick>
 800402e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004030:	4b8c      	ldr	r3, [pc, #560]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004038:	d006      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800403a:	f7fd fa3b 	bl	80014b4 <HAL_GetTick>
 800403e:	1b80      	subs	r0, r0, r6
 8004040:	2864      	cmp	r0, #100	; 0x64
 8004042:	d9f5      	bls.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
 8004044:	2003      	movs	r0, #3
 8004046:	e776      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	f013 0f01 	tst.w	r3, #1
 800404e:	d03a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8004050:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004052:	bbc3      	cbnz	r3, 80040c6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8004054:	4e83      	ldr	r6, [pc, #524]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8004056:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 800405a:	f403 3c40 	and.w	ip, r3, #196608	; 0x30000
 800405e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8004062:	fa90 f3a0 	rbit	r3, r0
 8004066:	fab3 f383 	clz	r3, r3
 800406a:	fa2c fc03 	lsr.w	ip, ip, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 800406e:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8004072:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8004076:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800407a:	fa91 f3a1 	rbit	r3, r1
 800407e:	fab3 f383 	clz	r3, r3
 8004082:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004084:	6863      	ldr	r3, [r4, #4]
 8004086:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 800408a:	fa97 f7a7 	rbit	r7, r7
 800408e:	fab7 f787 	clz	r7, r7
 8004092:	40bb      	lsls	r3, r7
 8004094:	fa90 f0a0 	rbit	r0, r0
 8004098:	fab0 f080 	clz	r0, r0
 800409c:	fa0c f000 	lsl.w	r0, ip, r0
 80040a0:	4303      	orrs	r3, r0
 80040a2:	fa91 f1a1 	rbit	r1, r1
 80040a6:	fab1 f181 	clz	r1, r1
 80040aa:	408a      	lsls	r2, r1
 80040ac:	4313      	orrs	r3, r2
 80040ae:	68a1      	ldr	r1, [r4, #8]
 80040b0:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80040b4:	fa92 f2a2 	rbit	r2, r2
 80040b8:	fab2 f282 	clz	r2, r2
 80040bc:	fa01 f202 	lsl.w	r2, r1, r2
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80040cc:	d003      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
 80040ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80040d0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80040d4:	d006      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80040d6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80040da:	d045      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x500>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80040dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e2:	d141      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x500>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80040e4:	4e5f      	ldr	r6, [pc, #380]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 80040e6:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
 80040ea:	f400 3c40 	and.w	ip, r0, #196608	; 0x30000
 80040ee:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80040f2:	fa90 f3a0 	rbit	r3, r0
 80040f6:	fab3 f383 	clz	r3, r3
 80040fa:	fa2c fc03 	lsr.w	ip, ip, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80040fe:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8004102:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8004106:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800410a:	fa91 f3a1 	rbit	r3, r1
 800410e:	fab3 f383 	clz	r3, r3
 8004112:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004114:	6863      	ldr	r3, [r4, #4]
 8004116:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 800411a:	fa97 f7a7 	rbit	r7, r7
 800411e:	fab7 f787 	clz	r7, r7
 8004122:	40bb      	lsls	r3, r7
 8004124:	fa90 f0a0 	rbit	r0, r0
 8004128:	fab0 f080 	clz	r0, r0
 800412c:	fa0c f000 	lsl.w	r0, ip, r0
 8004130:	4303      	orrs	r3, r0
 8004132:	68e7      	ldr	r7, [r4, #12]
 8004134:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8004138:	fa90 f0a0 	rbit	r0, r0
 800413c:	fab0 f080 	clz	r0, r0
 8004140:	fa07 f000 	lsl.w	r0, r7, r0
 8004144:	4303      	orrs	r3, r0
 8004146:	fa91 f1a1 	rbit	r1, r1
 800414a:	fab1 f181 	clz	r1, r1
 800414e:	408a      	lsls	r2, r1
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8004156:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 800415a:	f023 031f 	bic.w	r3, r3, #31
 800415e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004160:	3a01      	subs	r2, #1
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800416e:	d037      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8004170:	4e3c      	ldr	r6, [pc, #240]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8004172:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
 8004176:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800417a:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 800417e:	fa9c f3ac 	rbit	r3, ip
 8004182:	fab3 f383 	clz	r3, r3
 8004186:	40d9      	lsrs	r1, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8004188:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 800418c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8004190:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 8004194:	fa90 f3a0 	rbit	r3, r0
 8004198:	fab3 f383 	clz	r3, r3
 800419c:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800419e:	6863      	ldr	r3, [r4, #4]
 80041a0:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 80041a4:	fa97 f7a7 	rbit	r7, r7
 80041a8:	fab7 f787 	clz	r7, r7
 80041ac:	40bb      	lsls	r3, r7
 80041ae:	6927      	ldr	r7, [r4, #16]
 80041b0:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
 80041b4:	fa9e feae 	rbit	lr, lr
 80041b8:	fabe fe8e 	clz	lr, lr
 80041bc:	fa07 f70e 	lsl.w	r7, r7, lr
 80041c0:	433b      	orrs	r3, r7
 80041c2:	fa9c fcac 	rbit	ip, ip
 80041c6:	fabc fc8c 	clz	ip, ip
 80041ca:	fa01 f10c 	lsl.w	r1, r1, ip
 80041ce:	430b      	orrs	r3, r1
 80041d0:	fa90 f0a0 	rbit	r0, r0
 80041d4:	fab0 f080 	clz	r0, r0
 80041d8:	4082      	lsls	r2, r0
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80041e6:	d028      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80041e8:	6863      	ldr	r3, [r4, #4]
 80041ea:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80041ee:	fa92 f2a2 	rbit	r2, r2
 80041f2:	fab2 f282 	clz	r2, r2
 80041f6:	4093      	lsls	r3, r2
 80041f8:	6921      	ldr	r1, [r4, #16]
 80041fa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80041fe:	fa92 f2a2 	rbit	r2, r2
 8004202:	fab2 f282 	clz	r2, r2
 8004206:	fa01 f202 	lsl.w	r2, r1, r2
 800420a:	4313      	orrs	r3, r2
 800420c:	68e1      	ldr	r1, [r4, #12]
 800420e:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8004212:	fa92 f2a2 	rbit	r2, r2
 8004216:	fab2 f282 	clz	r2, r2
 800421a:	fa01 f202 	lsl.w	r2, r1, r2
 800421e:	4313      	orrs	r3, r2
 8004220:	68a1      	ldr	r1, [r4, #8]
 8004222:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8004226:	fa92 f2a2 	rbit	r2, r2
 800422a:	fab2 f282 	clz	r2, r2
 800422e:	fa01 f202 	lsl.w	r2, r1, r2
 8004232:	4313      	orrs	r3, r2
 8004234:	4a0b      	ldr	r2, [pc, #44]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8004236:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800423a:	4a0a      	ldr	r2, [pc, #40]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 800423c:	6813      	ldr	r3, [r2, #0]
 800423e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004242:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004244:	f7fd f936 	bl	80014b4 <HAL_GetTick>
 8004248:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004252:	f47f ae6c 	bne.w	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004256:	f7fd f92d 	bl	80014b4 <HAL_GetTick>
 800425a:	1b80      	subs	r0, r0, r6
 800425c:	2864      	cmp	r0, #100	; 0x64
 800425e:	d9f4      	bls.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x5e2>
        return HAL_TIMEOUT;
 8004260:	2003      	movs	r0, #3
 8004262:	e668      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004264:	40023800 	.word	0x40023800
 8004268:	40007000 	.word	0x40007000
 800426c:	0ffffcff 	.word	0x0ffffcff
    __HAL_RCC_PLLSAI_DISABLE(); 
 8004270:	4a7d      	ldr	r2, [pc, #500]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004272:	6813      	ldr	r3, [r2, #0]
 8004274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004278:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800427a:	f7fd f91b 	bl	80014b4 <HAL_GetTick>
 800427e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004280:	4b79      	ldr	r3, [pc, #484]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004288:	d006      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x630>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800428a:	f7fd f913 	bl	80014b4 <HAL_GetTick>
 800428e:	1b40      	subs	r0, r0, r5
 8004290:	2864      	cmp	r0, #100	; 0x64
 8004292:	d9f5      	bls.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x618>
        return HAL_TIMEOUT;
 8004294:	2003      	movs	r0, #3
 8004296:	e64e      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800429e:	d001      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80042a0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80042a2:	b12a      	cbz	r2, 80042b0 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80042a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80042a8:	d044      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d141      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80042b0:	4d6d      	ldr	r5, [pc, #436]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80042b2:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
 80042b6:	f407 3740 	and.w	r7, r7, #196608	; 0x30000
 80042ba:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80042be:	fa90 f3a0 	rbit	r3, r0
 80042c2:	fab3 f383 	clz	r3, r3
 80042c6:	40df      	lsrs	r7, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80042c8:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 80042cc:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80042d0:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80042d4:	fa91 f3a1 	rbit	r3, r1
 80042d8:	fab3 f383 	clz	r3, r3
 80042dc:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042de:	6963      	ldr	r3, [r4, #20]
 80042e0:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 80042e4:	fa96 f6a6 	rbit	r6, r6
 80042e8:	fab6 f686 	clz	r6, r6
 80042ec:	40b3      	lsls	r3, r6
 80042ee:	fa90 f0a0 	rbit	r0, r0
 80042f2:	fab0 f080 	clz	r0, r0
 80042f6:	fa07 f000 	lsl.w	r0, r7, r0
 80042fa:	4303      	orrs	r3, r0
 80042fc:	69a6      	ldr	r6, [r4, #24]
 80042fe:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8004302:	fa90 f0a0 	rbit	r0, r0
 8004306:	fab0 f080 	clz	r0, r0
 800430a:	fa06 f000 	lsl.w	r0, r6, r0
 800430e:	4303      	orrs	r3, r0
 8004310:	fa91 f1a1 	rbit	r1, r1
 8004314:	fab1 f181 	clz	r1, r1
 8004318:	408a      	lsls	r2, r1
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004320:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8004324:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004328:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800432a:	3a01      	subs	r2, #1
 800432c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004330:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800433a:	d003      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800433c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800433e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004342:	d056      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	f013 0f08 	tst.w	r3, #8
 800434a:	d03e      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x762>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 800434c:	4d46      	ldr	r5, [pc, #280]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800434e:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8004352:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8004356:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 800435a:	fa90 f3a0 	rbit	r3, r0
 800435e:	fab3 f383 	clz	r3, r3
 8004362:	40da      	lsrs	r2, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8004364:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8004368:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 800436c:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 8004370:	fa96 f3a6 	rbit	r3, r6
 8004374:	fab3 f383 	clz	r3, r3
 8004378:	40d9      	lsrs	r1, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800437a:	6963      	ldr	r3, [r4, #20]
 800437c:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8004380:	fa97 f7a7 	rbit	r7, r7
 8004384:	fab7 f787 	clz	r7, r7
 8004388:	40bb      	lsls	r3, r7
 800438a:	fa96 f6a6 	rbit	r6, r6
 800438e:	fab6 f686 	clz	r6, r6
 8004392:	40b1      	lsls	r1, r6
 8004394:	430b      	orrs	r3, r1
 8004396:	fa90 f1a0 	rbit	r1, r0
 800439a:	fab1 f181 	clz	r1, r1
 800439e:	408a      	lsls	r2, r1
 80043a0:	4313      	orrs	r3, r2
 80043a2:	69e1      	ldr	r1, [r4, #28]
 80043a4:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80043a8:	fa92 f2a2 	rbit	r2, r2
 80043ac:	fab2 f282 	clz	r2, r2
 80043b0:	fa01 f202 	lsl.w	r2, r1, r2
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80043ba:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80043be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80043c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80043ca:	4a27      	ldr	r2, [pc, #156]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80043cc:	6813      	ldr	r3, [r2, #0]
 80043ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80043d4:	f7fd f86e 	bl	80014b4 <HAL_GetTick>
 80043d8:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043da:	4b23      	ldr	r3, [pc, #140]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80043e2:	d13e      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043e4:	f7fd f866 	bl	80014b4 <HAL_GetTick>
 80043e8:	1b00      	subs	r0, r0, r4
 80043ea:	2864      	cmp	r0, #100	; 0x64
 80043ec:	d9f5      	bls.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x772>
        return HAL_TIMEOUT;
 80043ee:	2003      	movs	r0, #3
 80043f0:	e5a1      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80043f2:	4e1d      	ldr	r6, [pc, #116]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80043f4:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 80043f8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80043fc:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 8004400:	fa95 f3a5 	rbit	r3, r5
 8004404:	fab3 f383 	clz	r3, r3
 8004408:	40d9      	lsrs	r1, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 800440a:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 800440e:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8004412:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 8004416:	fa90 f3a0 	rbit	r3, r0
 800441a:	fab3 f383 	clz	r3, r3
 800441e:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004420:	6963      	ldr	r3, [r4, #20]
 8004422:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8004426:	fa97 f7a7 	rbit	r7, r7
 800442a:	fab7 f787 	clz	r7, r7
 800442e:	40bb      	lsls	r3, r7
 8004430:	6a27      	ldr	r7, [r4, #32]
 8004432:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8004436:	fa9c fcac 	rbit	ip, ip
 800443a:	fabc fc8c 	clz	ip, ip
 800443e:	fa07 f70c 	lsl.w	r7, r7, ip
 8004442:	433b      	orrs	r3, r7
 8004444:	fa95 f5a5 	rbit	r5, r5
 8004448:	fab5 f585 	clz	r5, r5
 800444c:	40a9      	lsls	r1, r5
 800444e:	430b      	orrs	r3, r1
 8004450:	fa90 f1a0 	rbit	r1, r0
 8004454:	fab1 f181 	clz	r1, r1
 8004458:	408a      	lsls	r2, r1
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
 8004460:	e770      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  return HAL_OK;
 8004462:	2000      	movs	r0, #0
 8004464:	e567      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004466:	bf00      	nop
 8004468:	40023800 	.word	0x40023800

0800446c <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit: pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800446c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tempreg = 0;
  
  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800446e:	4b80      	ldr	r3, [pc, #512]	; (8004670 <HAL_RCCEx_GetPeriphCLKConfig+0x204>)
 8004470:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 8004472:	4b80      	ldr	r3, [pc, #512]	; (8004674 <HAL_RCCEx_GetPeriphCLKConfig+0x208>)
 8004474:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004478:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800447c:	4011      	ands	r1, r2
 800447e:	fa92 f4a2 	rbit	r4, r2
 8004482:	fab4 f484 	clz	r4, r4
 8004486:	40e1      	lsrs	r1, r4
 8004488:	6041      	str	r1, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 800448a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800448e:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
 8004492:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8004496:	fa91 f5a1 	rbit	r5, r1
 800449a:	fab5 f585 	clz	r5, r5
 800449e:	40ec      	lsrs	r4, r5
 80044a0:	6104      	str	r4, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80044a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80044a6:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
 80044aa:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 80044ae:	fa95 f6a5 	rbit	r6, r5
 80044b2:	fab6 f686 	clz	r6, r6
 80044b6:	40f4      	lsrs	r4, r6
 80044b8:	60c4      	str	r4, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80044ba:	f8d3 6084 	ldr.w	r6, [r3, #132]	; 0x84
 80044be:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 80044c2:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
 80044c6:	fa94 f7a4 	rbit	r7, r4
 80044ca:	fab7 f787 	clz	r7, r7
 80044ce:	40fe      	lsrs	r6, r7
 80044d0:	6086      	str	r6, [r0, #8]
  
  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
 80044d2:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 80044d6:	4016      	ands	r6, r2
 80044d8:	fa92 f2a2 	rbit	r2, r2
 80044dc:	fab2 f282 	clz	r2, r2
 80044e0:	fa26 f202 	lsr.w	r2, r6, r2
 80044e4:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80044e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044ea:	400a      	ands	r2, r1
 80044ec:	fa91 f6a1 	rbit	r6, r1
 80044f0:	fab6 f686 	clz	r6, r6
 80044f4:	40f2      	lsrs	r2, r6
 80044f6:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
 80044f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044fc:	402a      	ands	r2, r5
 80044fe:	fa95 f5a5 	rbit	r5, r5
 8004502:	fab5 f585 	clz	r5, r5
 8004506:	fa22 f505 	lsr.w	r5, r2, r5
 800450a:	6185      	str	r5, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR)); 
 800450c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004510:	4022      	ands	r2, r4
 8004512:	fa94 f4a4 	rbit	r4, r4
 8004516:	fab4 f484 	clz	r4, r4
 800451a:	fa22 f404 	lsr.w	r4, r2, r4
 800451e:	61c4      	str	r4, [r0, #28]
  
  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLI2SDIVQ));
 8004520:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004524:	f002 021f 	and.w	r2, r2, #31
 8004528:	241f      	movs	r4, #31
 800452a:	fa94 f4a4 	rbit	r4, r4
 800452e:	fab4 f484 	clz	r4, r4
 8004532:	40e2      	lsrs	r2, r4
 8004534:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVQ));
 8004536:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800453a:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 800453e:	f44f 54f8 	mov.w	r4, #7936	; 0x1f00
 8004542:	fa94 f4a4 	rbit	r4, r4
 8004546:	fab4 f484 	clz	r4, r4
 800454a:	40e2      	lsrs	r2, r4
 800454c:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVR));
 800454e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004552:	400a      	ands	r2, r1
 8004554:	fa91 f1a1 	rbit	r1, r1
 8004558:	fab1 f181 	clz	r1, r1
 800455c:	fa22 f101 	lsr.w	r1, r2, r1
 8004560:	62c1      	str	r1, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8004562:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004566:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800456a:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800456c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004570:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8004574:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 800457c:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800457e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004582:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8004586:	6642      	str	r2, [r0, #100]	; 0x64
  
  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8004588:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800458c:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8004590:	6682      	str	r2, [r0, #104]	; 0x68
  
  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8004592:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004596:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800459a:	66c2      	str	r2, [r0, #108]	; 0x6c
  
  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800459c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80045a0:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 80045a4:	6702      	str	r2, [r0, #112]	; 0x70
  
  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 80045a6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80045aa:	f002 0203 	and.w	r2, r2, #3
 80045ae:	6442      	str	r2, [r0, #68]	; 0x44
  
  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 80045b0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80045b4:	f002 020c 	and.w	r2, r2, #12
 80045b8:	6482      	str	r2, [r0, #72]	; 0x48
  
  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80045ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80045be:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80045c2:	64c2      	str	r2, [r0, #76]	; 0x4c
  
  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 80045c4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80045c8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80045cc:	6502      	str	r2, [r0, #80]	; 0x50
  
  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80045ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80045d2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80045d6:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80045d8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80045dc:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80045e0:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80045e2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80045e6:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80045ea:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80045ec:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80045f0:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80045f4:	6602      	str	r2, [r0, #96]	; 0x60
  
  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80045f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80045fa:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 80045fe:	6742      	str	r2, [r0, #116]	; 0x74
  
  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8004600:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004604:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8004608:	6782      	str	r2, [r0, #120]	; 0x78
  
  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800460a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800460e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004612:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8004614:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004618:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800461c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 8004620:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004624:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8004628:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
	
  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 800462c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004630:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8004634:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
 8004638:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800463c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8004640:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8004644:	6899      	ldr	r1, [r3, #8]
 8004646:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800464a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800464c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004650:	430a      	orrs	r2, r1
 8004652:	6302      	str	r2, [r0, #48]	; 0x30
  
  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8004654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004658:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800465c:	d103      	bne.n	8004666 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800465e:	2300      	movs	r3, #0
 8004660:	6383      	str	r3, [r0, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8004662:	bcf0      	pop	{r4, r5, r6, r7}
 8004664:	4770      	bx	lr
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8004666:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800466a:	6383      	str	r3, [r0, #56]	; 0x38
}
 800466c:	e7f9      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKConfig+0x1f6>
 800466e:	bf00      	nop
 8004670:	1cfffff1 	.word	0x1cfffff1
 8004674:	40023800 	.word	0x40023800

08004678 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004678:	b410      	push	{r4}
 800467a:	4603      	mov	r3, r0
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
  
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800467c:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8004680:	d006      	beq.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
  uint32_t frequency = 0;
 8004682:	2000      	movs	r0, #0
        break;
      }
    }
  }
  
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004684:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004688:	d073      	beq.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
      }
    }
  }
  
  return frequency;
}
 800468a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800468e:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;   
 8004690:	4a6f      	ldr	r2, [pc, #444]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004692:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004696:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 800469a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800469e:	d064      	beq.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80046a0:	d826      	bhi.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 80046a2:	b38a      	cbz	r2, 8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 80046a4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80046a8:	d120      	bne.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x74>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80046aa:	4a69      	ldr	r2, [pc, #420]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80046ac:	6852      	ldr	r2, [r2, #4]
 80046ae:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80046b2:	d152      	bne.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046b4:	4a66      	ldr	r2, [pc, #408]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80046b6:	6852      	ldr	r2, [r2, #4]
 80046b8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80046bc:	4865      	ldr	r0, [pc, #404]	; (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80046be:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80046c2:	4a63      	ldr	r2, [pc, #396]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80046c4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 80046c8:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80046cc:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
 80046d0:	f3c4 1488 	ubfx	r4, r4, #6, #9
 80046d4:	fb00 f004 	mul.w	r0, r0, r4
 80046d8:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 80046dc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80046e0:	f002 021f 	and.w	r2, r2, #31
 80046e4:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 80046e6:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 80046ea:	e7cb      	b.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
    switch (saiclocksource)
 80046ec:	2000      	movs	r0, #0
 80046ee:	e7c9      	b.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
 80046f0:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80046f4:	d106      	bne.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80046f6:	4a56      	ldr	r2, [pc, #344]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80046f8:	6852      	ldr	r2, [r2, #4]
 80046fa:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80046fe:	d136      	bne.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
          frequency = HSI_VALUE;
 8004700:	4854      	ldr	r0, [pc, #336]	; (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8004702:	e7bf      	b.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
    switch (saiclocksource)
 8004704:	2000      	movs	r0, #0
 8004706:	e7bd      	b.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004708:	4a51      	ldr	r2, [pc, #324]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800470a:	6852      	ldr	r2, [r2, #4]
 800470c:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8004710:	d11b      	bne.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004712:	4a4f      	ldr	r2, [pc, #316]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004714:	6852      	ldr	r2, [r2, #4]
 8004716:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800471a:	484e      	ldr	r0, [pc, #312]	; (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800471c:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004720:	4a4b      	ldr	r2, [pc, #300]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004722:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8004726:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800472a:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
 800472e:	f3c4 1488 	ubfx	r4, r4, #6, #9
 8004732:	fb00 f004 	mul.w	r0, r0, r4
 8004736:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800473a:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800473e:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8004742:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg); 
 8004744:	fbb0 f0f2 	udiv	r0, r0, r2
        break;       
 8004748:	e79c      	b.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800474a:	4a41      	ldr	r2, [pc, #260]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800474c:	6852      	ldr	r2, [r2, #4]
 800474e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004752:	4841      	ldr	r0, [pc, #260]	; (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8004754:	fbb0 f0f2 	udiv	r0, r0, r2
 8004758:	e7e2      	b.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800475a:	4a3d      	ldr	r2, [pc, #244]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800475c:	6852      	ldr	r2, [r2, #4]
 800475e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004762:	483d      	ldr	r0, [pc, #244]	; (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8004764:	fbb0 f0f2 	udiv	r0, r0, r2
 8004768:	e7ab      	b.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
        frequency = EXTERNAL_CLOCK_VALUE;
 800476a:	483c      	ldr	r0, [pc, #240]	; (800485c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 800476c:	e78a      	b.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
          frequency = HSE_VALUE;
 800476e:	483a      	ldr	r0, [pc, #232]	; (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8004770:	e788      	b.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
    saiclocksource = RCC->DCKCFGR1;   
 8004772:	4b37      	ldr	r3, [pc, #220]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004778:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (saiclocksource)
 800477c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004780:	d062      	beq.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8004782:	d825      	bhi.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004784:	b37b      	cbz	r3, 80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8004786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800478a:	f47f af7e 	bne.w	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800478e:	4b30      	ldr	r3, [pc, #192]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004796:	d14f      	bne.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004798:	4b2d      	ldr	r3, [pc, #180]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a0:	482c      	ldr	r0, [pc, #176]	; (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80047a2:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80047a6:	4b2a      	ldr	r3, [pc, #168]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80047a8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80047ac:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80047b0:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80047b4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80047b8:	fb00 f001 	mul.w	r0, r0, r1
 80047bc:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 80047c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 80047ca:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80047ce:	e75c      	b.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
    switch (saiclocksource)
 80047d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047d4:	f47f af59 	bne.w	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80047d8:	4b1d      	ldr	r3, [pc, #116]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80047e0:	d134      	bne.n	800484c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
          frequency = HSI_VALUE;
 80047e2:	481c      	ldr	r0, [pc, #112]	; (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80047e4:	e751      	b.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80047e6:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80047ee:	d11b      	bne.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047f0:	4b17      	ldr	r3, [pc, #92]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f8:	4816      	ldr	r0, [pc, #88]	; (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80047fa:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80047fe:	4b14      	ldr	r3, [pc, #80]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004800:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004804:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004808:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800480c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004810:	fb00 f001 	mul.w	r0, r0, r1
 8004814:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800481c:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8004820:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg); 
 8004822:	fbb0 f0f3 	udiv	r0, r0, r3
        break;       
 8004826:	e730      	b.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004828:	4b09      	ldr	r3, [pc, #36]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004830:	4809      	ldr	r0, [pc, #36]	; (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8004832:	fbb0 f0f3 	udiv	r0, r0, r3
 8004836:	e7e2      	b.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x186>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004840:	4805      	ldr	r0, [pc, #20]	; (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8004842:	fbb0 f0f3 	udiv	r0, r0, r3
 8004846:	e7ae      	b.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004848:	4804      	ldr	r0, [pc, #16]	; (800485c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 800484a:	e71e      	b.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
          frequency = HSE_VALUE;
 800484c:	4802      	ldr	r0, [pc, #8]	; (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
  return frequency;
 800484e:	e71c      	b.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8004850:	40023800 	.word	0x40023800
 8004854:	00f42400 	.word	0x00f42400
 8004858:	017d7840 	.word	0x017d7840
 800485c:	00bb8000 	.word	0x00bb8000

08004860 <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
  
  if(mode == SAI_MODE_IT)
 8004860:	2901      	cmp	r1, #1
 8004862:	d00a      	beq.n	800487a <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004864:	2301      	movs	r3, #1
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004866:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004868:	2a08      	cmp	r2, #8
 800486a:	d008      	beq.n	800487e <SAI_InterruptFlag+0x1e>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT|= SAI_IT_CNRDY;
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800486c:	6842      	ldr	r2, [r0, #4]
 800486e:	3a02      	subs	r2, #2
 8004870:	2a01      	cmp	r2, #1
 8004872:	d90c      	bls.n	800488e <SAI_InterruptFlag+0x2e>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 8004874:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 8004878:	4770      	bx	lr
    tmpIT|= SAI_IT_FREQ;
 800487a:	2309      	movs	r3, #9
 800487c:	e7f3      	b.n	8004866 <SAI_InterruptFlag+0x6>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800487e:	6842      	ldr	r2, [r0, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004880:	2a01      	cmp	r2, #1
 8004882:	bf18      	it	ne
 8004884:	2a03      	cmpne	r2, #3
 8004886:	d1f1      	bne.n	800486c <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_CNRDY;
 8004888:	f043 0310 	orr.w	r3, r3, #16
 800488c:	e7ee      	b.n	800486c <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800488e:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 8004892:	4770      	bx	lr

08004894 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8004894:	4b0e      	ldr	r3, [pc, #56]	; (80048d0 <SAI_Disable+0x3c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a0e      	ldr	r2, [pc, #56]	; (80048d4 <SAI_Disable+0x40>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	0b1b      	lsrs	r3, r3, #12
 80048a0:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80048a2:	6801      	ldr	r1, [r0, #0]
 80048a4:	680a      	ldr	r2, [r1, #0]
 80048a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80048aa:	600a      	str	r2, [r1, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80048ac:	461a      	mov	r2, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b132      	cbz	r2, 80048c0 <SAI_Disable+0x2c>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80048b2:	6802      	ldr	r2, [r0, #0]
 80048b4:	6812      	ldr	r2, [r2, #0]
 80048b6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80048ba:	d1f7      	bne.n	80048ac <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80048bc:	2000      	movs	r0, #0

  return status;
}
 80048be:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80048c0:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80048c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048c8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 80048cc:	2003      	movs	r0, #3
      break;
 80048ce:	4770      	bx	lr
 80048d0:	200000e4 	.word	0x200000e4
 80048d4:	95cbec1b 	.word	0x95cbec1b

080048d8 <HAL_SAI_MspInit>:
}
 80048d8:	4770      	bx	lr
	...

080048dc <HAL_SAI_Init>:
  if(hsai == NULL)
 80048dc:	2800      	cmp	r0, #0
 80048de:	f000 80eb 	beq.w	8004ab8 <HAL_SAI_Init+0x1dc>
{
 80048e2:	b570      	push	{r4, r5, r6, lr}
 80048e4:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_RESET)
 80048e6:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80b9 	beq.w	8004a62 <HAL_SAI_Init+0x186>
  hsai->State = HAL_SAI_STATE_BUSY;
 80048f0:	2302      	movs	r3, #2
 80048f2:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 80048f6:	4620      	mov	r0, r4
 80048f8:	f7ff ffcc 	bl	8004894 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 80048fc:	68e3      	ldr	r3, [r4, #12]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	f000 80b4 	beq.w	8004a6c <HAL_SAI_Init+0x190>
 8004904:	2b02      	cmp	r3, #2
 8004906:	f040 80b3 	bne.w	8004a70 <HAL_SAI_Init+0x194>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800490a:	2220      	movs	r2, #32
  switch(hsai->Init.Synchro)
 800490c:	68a3      	ldr	r3, [r4, #8]
 800490e:	2b02      	cmp	r3, #2
 8004910:	f000 80b8 	beq.w	8004a84 <HAL_SAI_Init+0x1a8>
 8004914:	2b03      	cmp	r3, #3
 8004916:	f000 80b0 	beq.w	8004a7a <HAL_SAI_Init+0x19e>
 800491a:	2b01      	cmp	r3, #1
 800491c:	f000 80aa 	beq.w	8004a74 <HAL_SAI_Init+0x198>
 8004920:	2500      	movs	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	4865      	ldr	r0, [pc, #404]	; (8004abc <HAL_SAI_Init+0x1e0>)
 8004926:	4966      	ldr	r1, [pc, #408]	; (8004ac0 <HAL_SAI_Init+0x1e4>)
 8004928:	428b      	cmp	r3, r1
 800492a:	bf18      	it	ne
 800492c:	4283      	cmpne	r3, r0
 800492e:	f040 80ac 	bne.w	8004a8a <HAL_SAI_Init+0x1ae>
    SAI1->GCR = tmpregisterGCR;
 8004932:	4b64      	ldr	r3, [pc, #400]	; (8004ac4 <HAL_SAI_Init+0x1e8>)
 8004934:	601a      	str	r2, [r3, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004936:	69e3      	ldr	r3, [r4, #28]
 8004938:	b323      	cbz	r3, 8004984 <HAL_SAI_Init+0xa8>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	495f      	ldr	r1, [pc, #380]	; (8004abc <HAL_SAI_Init+0x1e0>)
 800493e:	4a60      	ldr	r2, [pc, #384]	; (8004ac0 <HAL_SAI_Init+0x1e4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	bf18      	it	ne
 8004944:	428b      	cmpne	r3, r1
 8004946:	f000 80a3 	beq.w	8004a90 <HAL_SAI_Init+0x1b4>
    uint32_t freq = 0;
 800494a:	2000      	movs	r0, #0
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800494c:	6823      	ldr	r3, [r4, #0]
 800494e:	495e      	ldr	r1, [pc, #376]	; (8004ac8 <HAL_SAI_Init+0x1ec>)
 8004950:	4a5e      	ldr	r2, [pc, #376]	; (8004acc <HAL_SAI_Init+0x1f0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	bf18      	it	ne
 8004956:	428b      	cmpne	r3, r1
 8004958:	f000 809f 	beq.w	8004a9a <HAL_SAI_Init+0x1be>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800495c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004960:	0040      	lsls	r0, r0, #1
 8004962:	69e3      	ldr	r3, [r4, #28]
 8004964:	025b      	lsls	r3, r3, #9
 8004966:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 800496a:	4b59      	ldr	r3, [pc, #356]	; (8004ad0 <HAL_SAI_Init+0x1f4>)
 800496c:	fba3 2300 	umull	r2, r3, r3, r0
 8004970:	08db      	lsrs	r3, r3, #3
 8004972:	6223      	str	r3, [r4, #32]
    if((tmpval % 10) > 8)
 8004974:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004978:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 800497c:	2808      	cmp	r0, #8
 800497e:	d901      	bls.n	8004984 <HAL_SAI_Init+0xa8>
      hsai->Init.Mckdiv+= 1;
 8004980:	3301      	adds	r3, #1
 8004982:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004984:	6862      	ldr	r2, [r4, #4]
 8004986:	2a02      	cmp	r2, #2
 8004988:	bf14      	ite	ne
 800498a:	2300      	movne	r3, #0
 800498c:	2301      	moveq	r3, #1
 800498e:	2a00      	cmp	r2, #0
 8004990:	bf08      	it	eq
 8004992:	2301      	moveq	r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8087 	beq.w	8004aa8 <HAL_SAI_Init+0x1cc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800499a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800499c:	2b01      	cmp	r3, #1
 800499e:	f000 8081 	beq.w	8004aa4 <HAL_SAI_Init+0x1c8>
 80049a2:	f44f 7600 	mov.w	r6, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80049a6:	6821      	ldr	r1, [r4, #0]
 80049a8:	680b      	ldr	r3, [r1, #0]
 80049aa:	4a4a      	ldr	r2, [pc, #296]	; (8004ad4 <HAL_SAI_Init+0x1f8>)
 80049ac:	401a      	ands	r2, r3
 80049ae:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80049b0:	6822      	ldr	r2, [r4, #0]
 80049b2:	6811      	ldr	r1, [r2, #0]
 80049b4:	6863      	ldr	r3, [r4, #4]
 80049b6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80049b8:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80049ba:	6b60      	ldr	r0, [r4, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80049bc:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80049be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80049c0:	4303      	orrs	r3, r0
 80049c2:	4333      	orrs	r3, r6
                        ckstr_bits | syncen_bits |                               \
 80049c4:	432b      	orrs	r3, r5
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80049c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80049c8:	4303      	orrs	r3, r0
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80049ca:	6920      	ldr	r0, [r4, #16]
 80049cc:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80049ce:	6960      	ldr	r0, [r4, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80049d0:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80049d2:	6a20      	ldr	r0, [r4, #32]
 80049d4:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80049d8:	430b      	orrs	r3, r1
 80049da:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80049dc:	6822      	ldr	r2, [r4, #0]
 80049de:	6851      	ldr	r1, [r2, #4]
 80049e0:	4b3d      	ldr	r3, [pc, #244]	; (8004ad8 <HAL_SAI_Init+0x1fc>)
 80049e2:	400b      	ands	r3, r1
 80049e4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80049e6:	6821      	ldr	r1, [r4, #0]
 80049e8:	684a      	ldr	r2, [r1, #4]
 80049ea:	69a3      	ldr	r3, [r4, #24]
 80049ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80049ee:	4303      	orrs	r3, r0
 80049f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80049f2:	4303      	orrs	r3, r0
 80049f4:	4313      	orrs	r3, r2
 80049f6:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80049f8:	6822      	ldr	r2, [r4, #0]
 80049fa:	6891      	ldr	r1, [r2, #8]
 80049fc:	4b37      	ldr	r3, [pc, #220]	; (8004adc <HAL_SAI_Init+0x200>)
 80049fe:	400b      	ands	r3, r1
 8004a00:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a02:	6820      	ldr	r0, [r4, #0]
 8004a04:	6882      	ldr	r2, [r0, #8]
 8004a06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a08:	3b01      	subs	r3, #1
                          hsai->FrameInit.FSOffset |
 8004a0a:	6d21      	ldr	r1, [r4, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a0c:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSDefinition |
 8004a0e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8004a10:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSPolarity   |
 8004a12:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8004a14:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004a16:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004a18:	3901      	subs	r1, #1
                          hsai->FrameInit.FSPolarity   |
 8004a1a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	68d3      	ldr	r3, [r2, #12]
 8004a26:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8004a2a:	f023 030f 	bic.w	r3, r3, #15
 8004a2e:	041b      	lsls	r3, r3, #16
 8004a30:	0c1b      	lsrs	r3, r3, #16
 8004a32:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004a34:	6820      	ldr	r0, [r4, #0]
 8004a36:	68c2      	ldr	r2, [r0, #12]
 8004a38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004a3c:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004a3e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004a40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004a44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004a46:	3901      	subs	r1, #1
 8004a48:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004a50:	2000      	movs	r0, #0
 8004a52:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  hsai->State= HAL_SAI_STATE_READY;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8004a5c:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8004a60:	bd70      	pop	{r4, r5, r6, pc}
    hsai->Lock = HAL_UNLOCKED;
 8004a62:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8004a66:	f7ff ff37 	bl	80048d8 <HAL_SAI_MspInit>
 8004a6a:	e741      	b.n	80048f0 <HAL_SAI_Init+0x14>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004a6c:	2210      	movs	r2, #16
 8004a6e:	e74d      	b.n	800490c <HAL_SAI_Init+0x30>
  switch(hsai->Init.SynchroExt)
 8004a70:	2200      	movs	r2, #0
 8004a72:	e74b      	b.n	800490c <HAL_SAI_Init+0x30>
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8004a74:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8004a78:	e753      	b.n	8004922 <HAL_SAI_Init+0x46>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8004a7e:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 8004a82:	e74e      	b.n	8004922 <HAL_SAI_Init+0x46>
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8004a84:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8004a88:	e74b      	b.n	8004922 <HAL_SAI_Init+0x46>
    SAI2->GCR = tmpregisterGCR;
 8004a8a:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <HAL_SAI_Init+0x204>)
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	e752      	b.n	8004936 <HAL_SAI_Init+0x5a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004a90:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004a94:	f7ff fdf0 	bl	8004678 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a98:	e758      	b.n	800494c <HAL_SAI_Init+0x70>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004a9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004a9e:	f7ff fdeb 	bl	8004678 <HAL_RCCEx_GetPeriphCLKFreq>
 8004aa2:	e75b      	b.n	800495c <HAL_SAI_Init+0x80>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004aa4:	2600      	movs	r6, #0
 8004aa6:	e77e      	b.n	80049a6 <HAL_SAI_Init+0xca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004aa8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d001      	beq.n	8004ab2 <HAL_SAI_Init+0x1d6>
 8004aae:	2600      	movs	r6, #0
 8004ab0:	e779      	b.n	80049a6 <HAL_SAI_Init+0xca>
 8004ab2:	f44f 7600 	mov.w	r6, #512	; 0x200
 8004ab6:	e776      	b.n	80049a6 <HAL_SAI_Init+0xca>
    return HAL_ERROR;
 8004ab8:	2001      	movs	r0, #1
}
 8004aba:	4770      	bx	lr
 8004abc:	40015804 	.word	0x40015804
 8004ac0:	40015824 	.word	0x40015824
 8004ac4:	40015800 	.word	0x40015800
 8004ac8:	40015c04 	.word	0x40015c04
 8004acc:	40015c24 	.word	0x40015c24
 8004ad0:	cccccccd 	.word	0xcccccccd
 8004ad4:	ff05c010 	.word	0xff05c010
 8004ad8:	ffff1ff0 	.word	0xffff1ff0
 8004adc:	fff88000 	.word	0xfff88000
 8004ae0:	40015c00 	.word	0x40015c00

08004ae4 <HAL_SAI_MspDeInit>:
}
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_SAI_DeInit>:
  if(hsai == NULL)
 8004ae6:	b1e8      	cbz	r0, 8004b24 <HAL_SAI_DeInit+0x3e>
{
 8004ae8:	b538      	push	{r3, r4, r5, lr}
 8004aea:	4604      	mov	r4, r0
  hsai->State = HAL_SAI_STATE_BUSY;
 8004aec:	2302      	movs	r3, #2
 8004aee:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  hsai->Instance->IMR = 0;
 8004af2:	6803      	ldr	r3, [r0, #0]
 8004af4:	2500      	movs	r5, #0
 8004af6:	611d      	str	r5, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004af8:	6803      	ldr	r3, [r0, #0]
 8004afa:	f04f 32ff 	mov.w	r2, #4294967295
 8004afe:	619a      	str	r2, [r3, #24]
  SAI_Disable(hsai);
 8004b00:	f7ff fec8 	bl	8004894 <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004b04:	6822      	ldr	r2, [r4, #0]
 8004b06:	6853      	ldr	r3, [r2, #4]
 8004b08:	f043 0308 	orr.w	r3, r3, #8
 8004b0c:	6053      	str	r3, [r2, #4]
  HAL_SAI_MspDeInit(hsai);
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f7ff ffe8 	bl	8004ae4 <HAL_SAI_MspDeInit>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004b14:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  hsai->State = HAL_SAI_STATE_RESET;
 8004b18:	f884 507d 	strb.w	r5, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8004b1c:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
  return HAL_OK;
 8004b20:	4628      	mov	r0, r5
}
 8004b22:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004b24:	2001      	movs	r0, #1
}
 8004b26:	4770      	bx	lr

08004b28 <HAL_SAI_DMAStop>:
  __HAL_LOCK(hsai);
 8004b28:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d01d      	beq.n	8004b6c <HAL_SAI_DMAStop+0x44>
{
 8004b30:	b510      	push	{r4, lr}
 8004b32:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 8004b34:	2301      	movs	r3, #1
 8004b36:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004b3a:	6802      	ldr	r2, [r0, #0]
 8004b3c:	6813      	ldr	r3, [r2, #0]
 8004b3e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b42:	6013      	str	r3, [r2, #0]
  if(hsai->hdmatx != NULL)
 8004b44:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8004b46:	b110      	cbz	r0, 8004b4e <HAL_SAI_DMAStop+0x26>
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8004b48:	f7fc fe77 	bl	800183a <HAL_DMA_Abort>
 8004b4c:	b980      	cbnz	r0, 8004b70 <HAL_SAI_DMAStop+0x48>
  if(hsai->hdmarx != NULL)
 8004b4e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004b50:	b110      	cbz	r0, 8004b58 <HAL_SAI_DMAStop+0x30>
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8004b52:	f7fc fe72 	bl	800183a <HAL_DMA_Abort>
 8004b56:	b968      	cbnz	r0, 8004b74 <HAL_SAI_DMAStop+0x4c>
  SAI_Disable(hsai);
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f7ff fe9b 	bl	8004894 <SAI_Disable>
  hsai->State = HAL_SAI_STATE_READY;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8004b64:	2000      	movs	r0, #0
 8004b66:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8004b6a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hsai);
 8004b6c:	2002      	movs	r0, #2
}
 8004b6e:	4770      	bx	lr
      return HAL_ERROR;
 8004b70:	2001      	movs	r0, #1
 8004b72:	e7fa      	b.n	8004b6a <HAL_SAI_DMAStop+0x42>
      return HAL_ERROR;
 8004b74:	2001      	movs	r0, #1
 8004b76:	e7f8      	b.n	8004b6a <HAL_SAI_DMAStop+0x42>

08004b78 <HAL_SAI_Transmit_DMA>:
{
 8004b78:	b570      	push	{r4, r5, r6, lr}
  if((pData == NULL) || (Size == 0))
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	fab2 f282 	clz	r2, r2
 8004b80:	0952      	lsrs	r2, r2, #5
 8004b82:	2900      	cmp	r1, #0
 8004b84:	bf08      	it	eq
 8004b86:	2201      	moveq	r2, #1
 8004b88:	2a00      	cmp	r2, #0
 8004b8a:	d14b      	bne.n	8004c24 <HAL_SAI_Transmit_DMA+0xac>
 8004b8c:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_READY)
 8004b8e:	f894 507d 	ldrb.w	r5, [r4, #125]	; 0x7d
 8004b92:	b2ed      	uxtb	r5, r5
 8004b94:	2d01      	cmp	r5, #1
 8004b96:	d148      	bne.n	8004c2a <HAL_SAI_Transmit_DMA+0xb2>
    __HAL_LOCK(hsai);
 8004b98:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 8004b9c:	2a01      	cmp	r2, #1
 8004b9e:	d046      	beq.n	8004c2e <HAL_SAI_Transmit_DMA+0xb6>
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 8004ba6:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 8004ba8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 8004bac:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004bb6:	2212      	movs	r2, #18
 8004bb8:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004bbc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004bbe:	491d      	ldr	r1, [pc, #116]	; (8004c34 <HAL_SAI_Transmit_DMA+0xbc>)
 8004bc0:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004bc2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004bc4:	491c      	ldr	r1, [pc, #112]	; (8004c38 <HAL_SAI_Transmit_DMA+0xc0>)
 8004bc6:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004bc8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004bca:	491c      	ldr	r1, [pc, #112]	; (8004c3c <HAL_SAI_Transmit_DMA+0xc4>)
 8004bcc:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 8004bce:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004bd0:	6513      	str	r3, [r2, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004bd2:	6822      	ldr	r2, [r4, #0]
 8004bd4:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8004bd8:	321c      	adds	r2, #28
 8004bda:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004bdc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004bde:	f7fc fdf2 	bl	80017c6 <HAL_DMA_Start_IT>
 8004be2:	4606      	mov	r6, r0
 8004be4:	b118      	cbz	r0, 8004bee <HAL_SAI_Transmit_DMA+0x76>
      __HAL_UNLOCK(hsai);
 8004be6:	2300      	movs	r3, #0
 8004be8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
      return  HAL_ERROR;
 8004bec:	e01b      	b.n	8004c26 <HAL_SAI_Transmit_DMA+0xae>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004bf6:	d103      	bne.n	8004c00 <HAL_SAI_Transmit_DMA+0x88>
      __HAL_SAI_ENABLE(hsai);
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004bfe:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004c00:	2100      	movs	r1, #0
 8004c02:	4620      	mov	r0, r4
 8004c04:	f7ff fe2c 	bl	8004860 <SAI_InterruptFlag>
 8004c08:	6822      	ldr	r2, [r4, #0]
 8004c0a:	6913      	ldr	r3, [r2, #16]
 8004c0c:	4303      	orrs	r3, r0
 8004c0e:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004c10:	6822      	ldr	r2, [r4, #0]
 8004c12:	6813      	ldr	r3, [r2, #0]
 8004c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c18:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8004c20:	4635      	mov	r5, r6
 8004c22:	e000      	b.n	8004c26 <HAL_SAI_Transmit_DMA+0xae>
    return  HAL_ERROR;
 8004c24:	2501      	movs	r5, #1
}
 8004c26:	4628      	mov	r0, r5
 8004c28:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8004c2a:	2502      	movs	r5, #2
 8004c2c:	e7fb      	b.n	8004c26 <HAL_SAI_Transmit_DMA+0xae>
    __HAL_LOCK(hsai);
 8004c2e:	2502      	movs	r5, #2
 8004c30:	e7f9      	b.n	8004c26 <HAL_SAI_Transmit_DMA+0xae>
 8004c32:	bf00      	nop
 8004c34:	08004c7d 	.word	0x08004c7d
 8004c38:	08004c41 	.word	0x08004c41
 8004c3c:	08004c87 	.word	0x08004c87

08004c40 <SAI_DMATxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004c40:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 8004c42:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8004c44:	6803      	ldr	r3, [r0, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004c4c:	d112      	bne.n	8004c74 <SAI_DMATxCplt+0x34>
  {
    hsai->XferCount = 0;
 8004c4e:	2100      	movs	r1, #0
 8004c50:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    
    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004c54:	6822      	ldr	r2, [r4, #0]
 8004c56:	6813      	ldr	r3, [r2, #0]
 8004c58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004c5c:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f7ff fdfe 	bl	8004860 <SAI_InterruptFlag>
 8004c64:	6822      	ldr	r2, [r4, #0]
 8004c66:	6913      	ldr	r3, [r2, #16]
 8004c68:	ea23 0300 	bic.w	r3, r3, r0
 8004c6c:	6113      	str	r3, [r2, #16]
    
    hsai->State= HAL_SAI_STATE_READY;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_TxCpltCallback(hsai);
 8004c74:	4620      	mov	r0, r4
 8004c76:	f7fc fae5 	bl	8001244 <HAL_SAI_TxCpltCallback>
}
 8004c7a:	bd10      	pop	{r4, pc}

08004c7c <SAI_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c7c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_TxHalfCpltCallback(hsai);
 8004c7e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004c80:	f7fc fae4 	bl	800124c <HAL_SAI_TxHalfCpltCallback>
}
 8004c84:	bd08      	pop	{r3, pc}

08004c86 <SAI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c86:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c88:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004c8a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c92:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8004c96:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d007      	beq.n	8004cae <SAI_DMAError+0x28>
 8004c9e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d003      	beq.n	8004cae <SAI_DMAError+0x28>

    /* Initialize XferCount */
    hsai->XferCount = 0U;
  }
  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	f7fc fbca 	bl	8001440 <HAL_SAI_ErrorCallback>
}
 8004cac:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004cae:	6822      	ldr	r2, [r4, #0]
 8004cb0:	6813      	ldr	r3, [r2, #0]
 8004cb2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004cb6:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f7ff fdeb 	bl	8004894 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    hsai->XferCount = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8004cca:	e7ec      	b.n	8004ca6 <SAI_DMAError+0x20>

08004ccc <HAL_SAI_GetState>:
  return hsai->State;
 8004ccc:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 8004cd0:	4770      	bx	lr

08004cd2 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cd4:	6802      	ldr	r2, [r0, #0]
 8004cd6:	68d3      	ldr	r3, [r2, #12]
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	60d3      	str	r3, [r2, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004cde:	6802      	ldr	r2, [r0, #0]
 8004ce0:	6813      	ldr	r3, [r2, #0]
 8004ce2:	f043 0301 	orr.w	r3, r3, #1
 8004ce6:	6013      	str	r3, [r2, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8004ce8:	2000      	movs	r0, #0
 8004cea:	4770      	bx	lr

08004cec <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cec:	4770      	bx	lr

08004cee <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cee:	4770      	bx	lr

08004cf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_TIM_IRQHandler>:
{
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cf8:	6803      	ldr	r3, [r0, #0]
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	f012 0f02 	tst.w	r2, #2
 8004d00:	d011      	beq.n	8004d26 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	f012 0f02 	tst.w	r2, #2
 8004d08:	d00d      	beq.n	8004d26 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d0a:	f06f 0202 	mvn.w	r2, #2
 8004d0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d10:	2301      	movs	r3, #1
 8004d12:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8004d14:	6803      	ldr	r3, [r0, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	f013 0f03 	tst.w	r3, #3
 8004d1c:	d079      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004d1e:	f7ff ffe6 	bl	8004cee <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d22:	2300      	movs	r3, #0
 8004d24:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	f012 0f04 	tst.w	r2, #4
 8004d2e:	d012      	beq.n	8004d56 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	f012 0f04 	tst.w	r2, #4
 8004d36:	d00e      	beq.n	8004d56 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d38:	f06f 0204 	mvn.w	r2, #4
 8004d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d3e:	2302      	movs	r3, #2
 8004d40:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004d4a:	d068      	beq.n	8004e1e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f7ff ffce 	bl	8004cee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	2300      	movs	r3, #0
 8004d54:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	691a      	ldr	r2, [r3, #16]
 8004d5a:	f012 0f08 	tst.w	r2, #8
 8004d5e:	d012      	beq.n	8004d86 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	f012 0f08 	tst.w	r2, #8
 8004d66:	d00e      	beq.n	8004d86 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d68:	f06f 0208 	mvn.w	r2, #8
 8004d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d6e:	2304      	movs	r3, #4
 8004d70:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	f013 0f03 	tst.w	r3, #3
 8004d7a:	d057      	beq.n	8004e2c <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	f7ff ffb6 	bl	8004cee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d82:	2300      	movs	r3, #0
 8004d84:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	f012 0f10 	tst.w	r2, #16
 8004d8e:	d012      	beq.n	8004db6 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	f012 0f10 	tst.w	r2, #16
 8004d96:	d00e      	beq.n	8004db6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d98:	f06f 0210 	mvn.w	r2, #16
 8004d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d9e:	2308      	movs	r3, #8
 8004da0:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004daa:	d046      	beq.n	8004e3a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004dac:	4620      	mov	r0, r4
 8004dae:	f7ff ff9e 	bl	8004cee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db2:	2300      	movs	r3, #0
 8004db4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	f012 0f01 	tst.w	r2, #1
 8004dbe:	d003      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	f012 0f01 	tst.w	r2, #1
 8004dc6:	d13f      	bne.n	8004e48 <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004dd0:	d003      	beq.n	8004dda <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004dd8:	d13d      	bne.n	8004e56 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004de2:	d003      	beq.n	8004dec <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004dea:	d13b      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004df4:	d003      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004dfc:	d139      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	f012 0f20 	tst.w	r2, #32
 8004e06:	d003      	beq.n	8004e10 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	f012 0f20 	tst.w	r2, #32
 8004e0e:	d137      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x18c>
}
 8004e10:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e12:	f7ff ff6b 	bl	8004cec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e16:	4620      	mov	r0, r4
 8004e18:	f7ff ff6a 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e1c:	e781      	b.n	8004d22 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f7ff ff64 	bl	8004cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e24:	4620      	mov	r0, r4
 8004e26:	f7ff ff63 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e2a:	e792      	b.n	8004d52 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f7ff ff5d 	bl	8004cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8004e32:	4620      	mov	r0, r4
 8004e34:	f7ff ff5c 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e38:	e7a3      	b.n	8004d82 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f7ff ff56 	bl	8004cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e40:	4620      	mov	r0, r4
 8004e42:	f7ff ff55 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e46:	e7b4      	b.n	8004db2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e48:	f06f 0201 	mvn.w	r2, #1
 8004e4c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f002 fc4e 	bl	80076f0 <HAL_TIM_PeriodElapsedCallback>
 8004e54:	e7b8      	b.n	8004dc8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e5a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f000 f8b8 	bl	8004fd2 <HAL_TIMEx_BreakCallback>
 8004e62:	e7ba      	b.n	8004dda <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e68:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	f000 f8b1 	bl	8004fd2 <HAL_TIMEx_BreakCallback>
 8004e70:	e7bc      	b.n	8004dec <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e76:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f7ff ff3a 	bl	8004cf2 <HAL_TIM_TriggerCallback>
 8004e7e:	e7be      	b.n	8004dfe <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e80:	f06f 0220 	mvn.w	r2, #32
 8004e84:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004e86:	4620      	mov	r0, r4
 8004e88:	f000 f8a2 	bl	8004fd0 <HAL_TIMEx_CommutCallback>
}
 8004e8c:	e7c0      	b.n	8004e10 <HAL_TIM_IRQHandler+0x11c>
	...

08004e90 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e90:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8004e92:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004e94:	4c3a      	ldr	r4, [pc, #232]	; (8004f80 <TIM_Base_SetConfig+0xf0>)
 8004e96:	42a0      	cmp	r0, r4
 8004e98:	bf14      	ite	ne
 8004e9a:	2400      	movne	r4, #0
 8004e9c:	2401      	moveq	r4, #1
 8004e9e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004ea2:	bf14      	ite	ne
 8004ea4:	4622      	movne	r2, r4
 8004ea6:	f044 0201 	orreq.w	r2, r4, #1
 8004eaa:	b9aa      	cbnz	r2, 8004ed8 <TIM_Base_SetConfig+0x48>
 8004eac:	4d35      	ldr	r5, [pc, #212]	; (8004f84 <TIM_Base_SetConfig+0xf4>)
 8004eae:	42a8      	cmp	r0, r5
 8004eb0:	bf14      	ite	ne
 8004eb2:	2500      	movne	r5, #0
 8004eb4:	2501      	moveq	r5, #1
 8004eb6:	4e34      	ldr	r6, [pc, #208]	; (8004f88 <TIM_Base_SetConfig+0xf8>)
 8004eb8:	42b0      	cmp	r0, r6
 8004eba:	d00d      	beq.n	8004ed8 <TIM_Base_SetConfig+0x48>
 8004ebc:	b965      	cbnz	r5, 8004ed8 <TIM_Base_SetConfig+0x48>
 8004ebe:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8004ec2:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8004ec6:	42a8      	cmp	r0, r5
 8004ec8:	bf14      	ite	ne
 8004eca:	2500      	movne	r5, #0
 8004ecc:	2501      	moveq	r5, #1
 8004ece:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004ed2:	42b0      	cmp	r0, r6
 8004ed4:	d000      	beq.n	8004ed8 <TIM_Base_SetConfig+0x48>
 8004ed6:	b11d      	cbz	r5, 8004ee0 <TIM_Base_SetConfig+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004edc:	684d      	ldr	r5, [r1, #4]
 8004ede:	432b      	orrs	r3, r5
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004ee0:	2a00      	cmp	r2, #0
 8004ee2:	d133      	bne.n	8004f4c <TIM_Base_SetConfig+0xbc>
 8004ee4:	4a27      	ldr	r2, [pc, #156]	; (8004f84 <TIM_Base_SetConfig+0xf4>)
 8004ee6:	4290      	cmp	r0, r2
 8004ee8:	bf14      	ite	ne
 8004eea:	2200      	movne	r2, #0
 8004eec:	2201      	moveq	r2, #1
 8004eee:	4d26      	ldr	r5, [pc, #152]	; (8004f88 <TIM_Base_SetConfig+0xf8>)
 8004ef0:	42a8      	cmp	r0, r5
 8004ef2:	d02b      	beq.n	8004f4c <TIM_Base_SetConfig+0xbc>
 8004ef4:	bb52      	cbnz	r2, 8004f4c <TIM_Base_SetConfig+0xbc>
 8004ef6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004efa:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8004efe:	4290      	cmp	r0, r2
 8004f00:	bf14      	ite	ne
 8004f02:	2200      	movne	r2, #0
 8004f04:	2201      	moveq	r2, #1
 8004f06:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004f0a:	42a8      	cmp	r0, r5
 8004f0c:	d01e      	beq.n	8004f4c <TIM_Base_SetConfig+0xbc>
 8004f0e:	b9ea      	cbnz	r2, 8004f4c <TIM_Base_SetConfig+0xbc>
 8004f10:	4a1e      	ldr	r2, [pc, #120]	; (8004f8c <TIM_Base_SetConfig+0xfc>)
 8004f12:	4290      	cmp	r0, r2
 8004f14:	bf14      	ite	ne
 8004f16:	2200      	movne	r2, #0
 8004f18:	2201      	moveq	r2, #1
 8004f1a:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8004f1e:	42a8      	cmp	r0, r5
 8004f20:	d014      	beq.n	8004f4c <TIM_Base_SetConfig+0xbc>
 8004f22:	b99a      	cbnz	r2, 8004f4c <TIM_Base_SetConfig+0xbc>
 8004f24:	4a1a      	ldr	r2, [pc, #104]	; (8004f90 <TIM_Base_SetConfig+0x100>)
 8004f26:	4290      	cmp	r0, r2
 8004f28:	bf14      	ite	ne
 8004f2a:	2200      	movne	r2, #0
 8004f2c:	2201      	moveq	r2, #1
 8004f2e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004f32:	42a8      	cmp	r0, r5
 8004f34:	d00a      	beq.n	8004f4c <TIM_Base_SetConfig+0xbc>
 8004f36:	b94a      	cbnz	r2, 8004f4c <TIM_Base_SetConfig+0xbc>
 8004f38:	4a16      	ldr	r2, [pc, #88]	; (8004f94 <TIM_Base_SetConfig+0x104>)
 8004f3a:	4290      	cmp	r0, r2
 8004f3c:	bf14      	ite	ne
 8004f3e:	2200      	movne	r2, #0
 8004f40:	2201      	moveq	r2, #1
 8004f42:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8004f46:	42a8      	cmp	r0, r5
 8004f48:	d000      	beq.n	8004f4c <TIM_Base_SetConfig+0xbc>
 8004f4a:	b11a      	cbz	r2, 8004f54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f50:	68ca      	ldr	r2, [r1, #12]
 8004f52:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f58:	694a      	ldr	r2, [r1, #20]
 8004f5a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004f5c:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f5e:	688a      	ldr	r2, [r1, #8]
 8004f60:	62c2      	str	r2, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004f62:	680a      	ldr	r2, [r1, #0]
 8004f64:	6282      	str	r2, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8004f66:	4b0c      	ldr	r3, [pc, #48]	; (8004f98 <TIM_Base_SetConfig+0x108>)
 8004f68:	4298      	cmp	r0, r3
 8004f6a:	bf14      	ite	ne
 8004f6c:	4623      	movne	r3, r4
 8004f6e:	f044 0301 	orreq.w	r3, r4, #1
 8004f72:	b10b      	cbz	r3, 8004f78 <TIM_Base_SetConfig+0xe8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f74:	690b      	ldr	r3, [r1, #16]
 8004f76:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	6143      	str	r3, [r0, #20]
}
 8004f7c:	bc70      	pop	{r4, r5, r6}
 8004f7e:	4770      	bx	lr
 8004f80:	40010000 	.word	0x40010000
 8004f84:	40000800 	.word	0x40000800
 8004f88:	40000400 	.word	0x40000400
 8004f8c:	40014400 	.word	0x40014400
 8004f90:	40001800 	.word	0x40001800
 8004f94:	40002000 	.word	0x40002000
 8004f98:	40010400 	.word	0x40010400

08004f9c <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8004f9c:	b1b0      	cbz	r0, 8004fcc <HAL_TIM_Base_Init+0x30>
{ 
 8004f9e:	b510      	push	{r4, lr}
 8004fa0:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8004fa2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004fa6:	b163      	cbz	r3, 8004fc2 <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8004fa8:	2302      	movs	r3, #2
 8004faa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004fae:	4621      	mov	r1, r4
 8004fb0:	f851 0b04 	ldr.w	r0, [r1], #4
 8004fb4:	f7ff ff6c 	bl	8004e90 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004fbe:	2000      	movs	r0, #0
}
 8004fc0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004fc2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004fc6:	f7ff fe84 	bl	8004cd2 <HAL_TIM_Base_MspInit>
 8004fca:	e7ed      	b.n	8004fa8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004fcc:	2001      	movs	r0, #1
}
 8004fce:	4770      	bx	lr

08004fd0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004fd0:	4770      	bx	lr

08004fd2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fd2:	4770      	bx	lr

08004fd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fd8:	4605      	mov	r5, r0
 8004fda:	460f      	mov	r7, r1
 8004fdc:	4616      	mov	r6, r2
 8004fde:	4699      	mov	r9, r3
 8004fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe4:	682c      	ldr	r4, [r5, #0]
 8004fe6:	69e4      	ldr	r4, [r4, #28]
 8004fe8:	ea37 0304 	bics.w	r3, r7, r4
 8004fec:	bf0c      	ite	eq
 8004fee:	2401      	moveq	r4, #1
 8004ff0:	2400      	movne	r4, #0
 8004ff2:	42b4      	cmp	r4, r6
 8004ff4:	d11f      	bne.n	8005036 <UART_WaitOnFlagUntilTimeout+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004ff6:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004ffa:	d0f3      	beq.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004ffc:	f1b8 0f00 	cmp.w	r8, #0
 8005000:	d005      	beq.n	800500e <UART_WaitOnFlagUntilTimeout+0x3a>
 8005002:	f7fc fa57 	bl	80014b4 <HAL_GetTick>
 8005006:	eba0 0009 	sub.w	r0, r0, r9
 800500a:	4540      	cmp	r0, r8
 800500c:	d3ea      	bcc.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800500e:	682a      	ldr	r2, [r5, #0]
 8005010:	6813      	ldr	r3, [r2, #0]
 8005012:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005016:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005018:	682a      	ldr	r2, [r5, #0]
 800501a:	6893      	ldr	r3, [r2, #8]
 800501c:	f023 0301 	bic.w	r3, r3, #1
 8005020:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005022:	2320      	movs	r3, #32
 8005024:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8005028:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800502c:	2300      	movs	r3, #0
 800502e:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8005032:	2003      	movs	r0, #3
 8005034:	e000      	b.n	8005038 <UART_WaitOnFlagUntilTimeout+0x64>
      }
    }
  }
  return HAL_OK;
 8005036:	2000      	movs	r0, #0
}
 8005038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800503c <HAL_UART_Transmit>:
{
 800503c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8005044:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b20      	cmp	r3, #32
 800504c:	d152      	bne.n	80050f4 <HAL_UART_Transmit+0xb8>
 800504e:	4604      	mov	r4, r0
 8005050:	460d      	mov	r5, r1
 8005052:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8005054:	fab2 f382 	clz	r3, r2
 8005058:	095b      	lsrs	r3, r3, #5
 800505a:	2900      	cmp	r1, #0
 800505c:	bf08      	it	eq
 800505e:	2301      	moveq	r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d14b      	bne.n	80050fc <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8005064:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8005068:	2b01      	cmp	r3, #1
 800506a:	d049      	beq.n	8005100 <HAL_UART_Transmit+0xc4>
 800506c:	2301      	movs	r3, #1
 800506e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005072:	2300      	movs	r3, #0
 8005074:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005076:	2321      	movs	r3, #33	; 0x21
 8005078:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 800507c:	f7fc fa1a 	bl	80014b4 <HAL_GetTick>
 8005080:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8005082:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8005086:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800508a:	e003      	b.n	8005094 <HAL_UART_Transmit+0x58>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800508c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	629a      	str	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8005094:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005098:	b29b      	uxth	r3, r3
 800509a:	b1e3      	cbz	r3, 80050d6 <HAL_UART_Transmit+0x9a>
      huart->TxXferCount--;
 800509c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80050a0:	b292      	uxth	r2, r2
 80050a2:	3a01      	subs	r2, #1
 80050a4:	b292      	uxth	r2, r2
 80050a6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050aa:	9600      	str	r6, [sp, #0]
 80050ac:	463b      	mov	r3, r7
 80050ae:	2200      	movs	r2, #0
 80050b0:	2180      	movs	r1, #128	; 0x80
 80050b2:	4620      	mov	r0, r4
 80050b4:	f7ff ff8e 	bl	8004fd4 <UART_WaitOnFlagUntilTimeout>
 80050b8:	bb20      	cbnz	r0, 8005104 <HAL_UART_Transmit+0xc8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ba:	68a3      	ldr	r3, [r4, #8]
 80050bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c0:	d1e4      	bne.n	800508c <HAL_UART_Transmit+0x50>
 80050c2:	6923      	ldr	r3, [r4, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e1      	bne.n	800508c <HAL_UART_Transmit+0x50>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80050c8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80050cc:	6822      	ldr	r2, [r4, #0]
 80050ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d2:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 80050d4:	e7de      	b.n	8005094 <HAL_UART_Transmit+0x58>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050d6:	9600      	str	r6, [sp, #0]
 80050d8:	463b      	mov	r3, r7
 80050da:	2200      	movs	r2, #0
 80050dc:	2140      	movs	r1, #64	; 0x40
 80050de:	4620      	mov	r0, r4
 80050e0:	f7ff ff78 	bl	8004fd4 <UART_WaitOnFlagUntilTimeout>
 80050e4:	b980      	cbnz	r0, 8005108 <HAL_UART_Transmit+0xcc>
    huart->gState = HAL_UART_STATE_READY;
 80050e6:	2320      	movs	r3, #32
 80050e8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 80050ec:	2300      	movs	r3, #0
 80050ee:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    return HAL_OK;
 80050f2:	e000      	b.n	80050f6 <HAL_UART_Transmit+0xba>
    return HAL_BUSY;
 80050f4:	2002      	movs	r0, #2
}
 80050f6:	b002      	add	sp, #8
 80050f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80050fc:	2001      	movs	r0, #1
 80050fe:	e7fa      	b.n	80050f6 <HAL_UART_Transmit+0xba>
    __HAL_LOCK(huart);
 8005100:	2002      	movs	r0, #2
 8005102:	e7f8      	b.n	80050f6 <HAL_UART_Transmit+0xba>
        return HAL_TIMEOUT;
 8005104:	2003      	movs	r0, #3
 8005106:	e7f6      	b.n	80050f6 <HAL_UART_Transmit+0xba>
      return HAL_TIMEOUT;
 8005108:	2003      	movs	r0, #3
 800510a:	e7f4      	b.n	80050f6 <HAL_UART_Transmit+0xba>

0800510c <HAL_UART_Receive>:
{
 800510c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005110:	b082      	sub	sp, #8
 8005112:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8005114:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b20      	cmp	r3, #32
 800511c:	d176      	bne.n	800520c <HAL_UART_Receive+0x100>
 800511e:	4604      	mov	r4, r0
 8005120:	460d      	mov	r5, r1
 8005122:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8005124:	fab2 f382 	clz	r3, r2
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	2900      	cmp	r1, #0
 800512c:	bf08      	it	eq
 800512e:	2301      	moveq	r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d16f      	bne.n	8005214 <HAL_UART_Receive+0x108>
    __HAL_LOCK(huart);
 8005134:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8005138:	2b01      	cmp	r3, #1
 800513a:	d06d      	beq.n	8005218 <HAL_UART_Receive+0x10c>
 800513c:	2301      	movs	r3, #1
 800513e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005142:	2300      	movs	r3, #0
 8005144:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005146:	2322      	movs	r3, #34	; 0x22
 8005148:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 800514c:	f7fc f9b2 	bl	80014b4 <HAL_GetTick>
 8005150:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8005152:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8005156:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800515a:	68a3      	ldr	r3, [r4, #8]
 800515c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005160:	d006      	beq.n	8005170 <HAL_UART_Receive+0x64>
 8005162:	b9a3      	cbnz	r3, 800518e <HAL_UART_Receive+0x82>
 8005164:	6923      	ldr	r3, [r4, #16]
 8005166:	b973      	cbnz	r3, 8005186 <HAL_UART_Receive+0x7a>
 8005168:	23ff      	movs	r3, #255	; 0xff
 800516a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800516e:	e011      	b.n	8005194 <HAL_UART_Receive+0x88>
 8005170:	6923      	ldr	r3, [r4, #16]
 8005172:	b923      	cbnz	r3, 800517e <HAL_UART_Receive+0x72>
 8005174:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005178:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800517c:	e00a      	b.n	8005194 <HAL_UART_Receive+0x88>
 800517e:	23ff      	movs	r3, #255	; 0xff
 8005180:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8005184:	e006      	b.n	8005194 <HAL_UART_Receive+0x88>
 8005186:	237f      	movs	r3, #127	; 0x7f
 8005188:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800518c:	e002      	b.n	8005194 <HAL_UART_Receive+0x88>
 800518e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005192:	d002      	beq.n	800519a <HAL_UART_Receive+0x8e>
    uhMask = huart->Mask;
 8005194:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 8005198:	e010      	b.n	80051bc <HAL_UART_Receive+0xb0>
    UART_MASK_COMPUTATION(huart);
 800519a:	6923      	ldr	r3, [r4, #16]
 800519c:	b91b      	cbnz	r3, 80051a6 <HAL_UART_Receive+0x9a>
 800519e:	237f      	movs	r3, #127	; 0x7f
 80051a0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80051a4:	e7f6      	b.n	8005194 <HAL_UART_Receive+0x88>
 80051a6:	233f      	movs	r3, #63	; 0x3f
 80051a8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80051ac:	e7f2      	b.n	8005194 <HAL_UART_Receive+0x88>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80051ae:	6823      	ldr	r3, [r4, #0]
 80051b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051b2:	fa5f f388 	uxtb.w	r3, r8
 80051b6:	4013      	ands	r3, r2
 80051b8:	f805 3b01 	strb.w	r3, [r5], #1
    while(huart->RxXferCount > 0U)
 80051bc:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	b1e3      	cbz	r3, 80051fe <HAL_UART_Receive+0xf2>
      huart->RxXferCount--;
 80051c4:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 80051c8:	b292      	uxth	r2, r2
 80051ca:	3a01      	subs	r2, #1
 80051cc:	b292      	uxth	r2, r2
 80051ce:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80051d2:	9600      	str	r6, [sp, #0]
 80051d4:	463b      	mov	r3, r7
 80051d6:	2200      	movs	r2, #0
 80051d8:	2120      	movs	r1, #32
 80051da:	4620      	mov	r0, r4
 80051dc:	f7ff fefa 	bl	8004fd4 <UART_WaitOnFlagUntilTimeout>
 80051e0:	b9e0      	cbnz	r0, 800521c <HAL_UART_Receive+0x110>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e2:	68a3      	ldr	r3, [r4, #8]
 80051e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e8:	d1e1      	bne.n	80051ae <HAL_UART_Receive+0xa2>
 80051ea:	6923      	ldr	r3, [r4, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1de      	bne.n	80051ae <HAL_UART_Receive+0xa2>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	ea08 0303 	and.w	r3, r8, r3
 80051f8:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 80051fc:	e7de      	b.n	80051bc <HAL_UART_Receive+0xb0>
    huart->RxState = HAL_UART_STATE_READY;
 80051fe:	2320      	movs	r3, #32
 8005200:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8005204:	2000      	movs	r0, #0
 8005206:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 800520a:	e000      	b.n	800520e <HAL_UART_Receive+0x102>
    return HAL_BUSY;
 800520c:	2002      	movs	r0, #2
}
 800520e:	b002      	add	sp, #8
 8005210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8005214:	2001      	movs	r0, #1
 8005216:	e7fa      	b.n	800520e <HAL_UART_Receive+0x102>
    __HAL_LOCK(huart);
 8005218:	2002      	movs	r0, #2
 800521a:	e7f8      	b.n	800520e <HAL_UART_Receive+0x102>
        return HAL_TIMEOUT;
 800521c:	2003      	movs	r0, #3
 800521e:	e7f6      	b.n	800520e <HAL_UART_Receive+0x102>

08005220 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005224:	6883      	ldr	r3, [r0, #8]
 8005226:	6902      	ldr	r2, [r0, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	6942      	ldr	r2, [r0, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	69c2      	ldr	r2, [r0, #28]
 8005230:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005232:	6801      	ldr	r1, [r0, #0]
 8005234:	6808      	ldr	r0, [r1, #0]
 8005236:	4aa0      	ldr	r2, [pc, #640]	; (80054b8 <UART_SetConfig+0x298>)
 8005238:	4002      	ands	r2, r0
 800523a:	4313      	orrs	r3, r2
 800523c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800523e:	6822      	ldr	r2, [r4, #0]
 8005240:	6853      	ldr	r3, [r2, #4]
 8005242:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005246:	68e1      	ldr	r1, [r4, #12]
 8005248:	430b      	orrs	r3, r1
 800524a:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800524c:	69a3      	ldr	r3, [r4, #24]
 800524e:	6a22      	ldr	r2, [r4, #32]
 8005250:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005252:	6821      	ldr	r1, [r4, #0]
 8005254:	688b      	ldr	r3, [r1, #8]
 8005256:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800525a:	4313      	orrs	r3, r2
 800525c:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	4a96      	ldr	r2, [pc, #600]	; (80054bc <UART_SetConfig+0x29c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d019      	beq.n	800529a <UART_SetConfig+0x7a>
 8005266:	4a96      	ldr	r2, [pc, #600]	; (80054c0 <UART_SetConfig+0x2a0>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d02a      	beq.n	80052c2 <UART_SetConfig+0xa2>
 800526c:	4a95      	ldr	r2, [pc, #596]	; (80054c4 <UART_SetConfig+0x2a4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d040      	beq.n	80052f4 <UART_SetConfig+0xd4>
 8005272:	4a95      	ldr	r2, [pc, #596]	; (80054c8 <UART_SetConfig+0x2a8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d065      	beq.n	8005344 <UART_SetConfig+0x124>
 8005278:	4a94      	ldr	r2, [pc, #592]	; (80054cc <UART_SetConfig+0x2ac>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d075      	beq.n	800536a <UART_SetConfig+0x14a>
 800527e:	4a94      	ldr	r2, [pc, #592]	; (80054d0 <UART_SetConfig+0x2b0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	f000 8088 	beq.w	8005396 <UART_SetConfig+0x176>
 8005286:	4a93      	ldr	r2, [pc, #588]	; (80054d4 <UART_SetConfig+0x2b4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	f000 809a 	beq.w	80053c2 <UART_SetConfig+0x1a2>
 800528e:	4a92      	ldr	r2, [pc, #584]	; (80054d8 <UART_SetConfig+0x2b8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	f000 80ac 	beq.w	80053ee <UART_SetConfig+0x1ce>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005296:	2510      	movs	r5, #16
 8005298:	e03d      	b.n	8005316 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800529a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800529e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80052a2:	f002 0203 	and.w	r2, r2, #3
 80052a6:	2a03      	cmp	r2, #3
 80052a8:	d803      	bhi.n	80052b2 <UART_SetConfig+0x92>
 80052aa:	e8df f002 	tbb	[pc, r2]
 80052ae:	06b5      	.short	0x06b5
 80052b0:	0804      	.short	0x0804
 80052b2:	2510      	movs	r5, #16
 80052b4:	e02f      	b.n	8005316 <UART_SetConfig+0xf6>
 80052b6:	2502      	movs	r5, #2
 80052b8:	e02d      	b.n	8005316 <UART_SetConfig+0xf6>
 80052ba:	2504      	movs	r5, #4
 80052bc:	e02b      	b.n	8005316 <UART_SetConfig+0xf6>
 80052be:	2508      	movs	r5, #8
 80052c0:	e029      	b.n	8005316 <UART_SetConfig+0xf6>
 80052c2:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80052c6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80052ca:	f002 020c 	and.w	r2, r2, #12
 80052ce:	2a0c      	cmp	r2, #12
 80052d0:	d808      	bhi.n	80052e4 <UART_SetConfig+0xc4>
 80052d2:	e8df f002 	tbb	[pc, r2]
 80052d6:	07a3      	.short	0x07a3
 80052d8:	070b0707 	.word	0x070b0707
 80052dc:	07090707 	.word	0x07090707
 80052e0:	0707      	.short	0x0707
 80052e2:	0d          	.byte	0x0d
 80052e3:	00          	.byte	0x00
 80052e4:	2510      	movs	r5, #16
 80052e6:	e016      	b.n	8005316 <UART_SetConfig+0xf6>
 80052e8:	2502      	movs	r5, #2
 80052ea:	e014      	b.n	8005316 <UART_SetConfig+0xf6>
 80052ec:	2504      	movs	r5, #4
 80052ee:	e012      	b.n	8005316 <UART_SetConfig+0xf6>
 80052f0:	2508      	movs	r5, #8
 80052f2:	e010      	b.n	8005316 <UART_SetConfig+0xf6>
 80052f4:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 80052f8:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80052fc:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005300:	2a20      	cmp	r2, #32
 8005302:	f000 808d 	beq.w	8005420 <UART_SetConfig+0x200>
 8005306:	d819      	bhi.n	800533c <UART_SetConfig+0x11c>
 8005308:	2a00      	cmp	r2, #0
 800530a:	f000 808b 	beq.w	8005424 <UART_SetConfig+0x204>
 800530e:	2a10      	cmp	r2, #16
 8005310:	f040 808a 	bne.w	8005428 <UART_SetConfig+0x208>
 8005314:	2504      	movs	r5, #4

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005316:	69e2      	ldr	r2, [r4, #28]
 8005318:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800531c:	f000 80b0 	beq.w	8005480 <UART_SetConfig+0x260>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8005320:	2d08      	cmp	r5, #8
 8005322:	f200 813d 	bhi.w	80055a0 <UART_SetConfig+0x380>
 8005326:	e8df f015 	tbh	[pc, r5, lsl #1]
 800532a:	0104      	.short	0x0104
 800532c:	011b010f 	.word	0x011b010f
 8005330:	0125013b 	.word	0x0125013b
 8005334:	013b013b 	.word	0x013b013b
 8005338:	0131013b 	.word	0x0131013b
  UART_GETCLOCKSOURCE(huart, clocksource);
 800533c:	2a30      	cmp	r2, #48	; 0x30
 800533e:	d175      	bne.n	800542c <UART_SetConfig+0x20c>
 8005340:	2508      	movs	r5, #8
 8005342:	e7e8      	b.n	8005316 <UART_SetConfig+0xf6>
 8005344:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8005348:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800534c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8005350:	2a80      	cmp	r2, #128	; 0x80
 8005352:	d06d      	beq.n	8005430 <UART_SetConfig+0x210>
 8005354:	d805      	bhi.n	8005362 <UART_SetConfig+0x142>
 8005356:	2a00      	cmp	r2, #0
 8005358:	d06c      	beq.n	8005434 <UART_SetConfig+0x214>
 800535a:	2a40      	cmp	r2, #64	; 0x40
 800535c:	d16c      	bne.n	8005438 <UART_SetConfig+0x218>
 800535e:	2504      	movs	r5, #4
 8005360:	e7d9      	b.n	8005316 <UART_SetConfig+0xf6>
 8005362:	2ac0      	cmp	r2, #192	; 0xc0
 8005364:	d16a      	bne.n	800543c <UART_SetConfig+0x21c>
 8005366:	2508      	movs	r5, #8
 8005368:	e7d5      	b.n	8005316 <UART_SetConfig+0xf6>
 800536a:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 800536e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8005372:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005376:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800537a:	d061      	beq.n	8005440 <UART_SetConfig+0x220>
 800537c:	d806      	bhi.n	800538c <UART_SetConfig+0x16c>
 800537e:	2a00      	cmp	r2, #0
 8005380:	d060      	beq.n	8005444 <UART_SetConfig+0x224>
 8005382:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005386:	d15f      	bne.n	8005448 <UART_SetConfig+0x228>
 8005388:	2504      	movs	r5, #4
 800538a:	e7c4      	b.n	8005316 <UART_SetConfig+0xf6>
 800538c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005390:	d15c      	bne.n	800544c <UART_SetConfig+0x22c>
 8005392:	2508      	movs	r5, #8
 8005394:	e7bf      	b.n	8005316 <UART_SetConfig+0xf6>
 8005396:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 800539a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800539e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80053a2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80053a6:	d053      	beq.n	8005450 <UART_SetConfig+0x230>
 80053a8:	d806      	bhi.n	80053b8 <UART_SetConfig+0x198>
 80053aa:	2a00      	cmp	r2, #0
 80053ac:	d052      	beq.n	8005454 <UART_SetConfig+0x234>
 80053ae:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80053b2:	d151      	bne.n	8005458 <UART_SetConfig+0x238>
 80053b4:	2504      	movs	r5, #4
 80053b6:	e7ae      	b.n	8005316 <UART_SetConfig+0xf6>
 80053b8:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80053bc:	d14e      	bne.n	800545c <UART_SetConfig+0x23c>
 80053be:	2508      	movs	r5, #8
 80053c0:	e7a9      	b.n	8005316 <UART_SetConfig+0xf6>
 80053c2:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80053c6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80053ca:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80053ce:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80053d2:	d045      	beq.n	8005460 <UART_SetConfig+0x240>
 80053d4:	d806      	bhi.n	80053e4 <UART_SetConfig+0x1c4>
 80053d6:	2a00      	cmp	r2, #0
 80053d8:	d044      	beq.n	8005464 <UART_SetConfig+0x244>
 80053da:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80053de:	d143      	bne.n	8005468 <UART_SetConfig+0x248>
 80053e0:	2504      	movs	r5, #4
 80053e2:	e798      	b.n	8005316 <UART_SetConfig+0xf6>
 80053e4:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80053e8:	d140      	bne.n	800546c <UART_SetConfig+0x24c>
 80053ea:	2508      	movs	r5, #8
 80053ec:	e793      	b.n	8005316 <UART_SetConfig+0xf6>
 80053ee:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 80053f2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80053f6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80053fa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80053fe:	d037      	beq.n	8005470 <UART_SetConfig+0x250>
 8005400:	d805      	bhi.n	800540e <UART_SetConfig+0x1ee>
 8005402:	b3ba      	cbz	r2, 8005474 <UART_SetConfig+0x254>
 8005404:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005408:	d136      	bne.n	8005478 <UART_SetConfig+0x258>
 800540a:	2504      	movs	r5, #4
 800540c:	e783      	b.n	8005316 <UART_SetConfig+0xf6>
 800540e:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8005412:	d133      	bne.n	800547c <UART_SetConfig+0x25c>
 8005414:	2508      	movs	r5, #8
 8005416:	e77e      	b.n	8005316 <UART_SetConfig+0xf6>
 8005418:	2501      	movs	r5, #1
 800541a:	e77c      	b.n	8005316 <UART_SetConfig+0xf6>
 800541c:	2500      	movs	r5, #0
 800541e:	e77a      	b.n	8005316 <UART_SetConfig+0xf6>
 8005420:	2502      	movs	r5, #2
 8005422:	e778      	b.n	8005316 <UART_SetConfig+0xf6>
 8005424:	2500      	movs	r5, #0
 8005426:	e776      	b.n	8005316 <UART_SetConfig+0xf6>
 8005428:	2510      	movs	r5, #16
 800542a:	e774      	b.n	8005316 <UART_SetConfig+0xf6>
 800542c:	2510      	movs	r5, #16
 800542e:	e772      	b.n	8005316 <UART_SetConfig+0xf6>
 8005430:	2502      	movs	r5, #2
 8005432:	e770      	b.n	8005316 <UART_SetConfig+0xf6>
 8005434:	2500      	movs	r5, #0
 8005436:	e76e      	b.n	8005316 <UART_SetConfig+0xf6>
 8005438:	2510      	movs	r5, #16
 800543a:	e76c      	b.n	8005316 <UART_SetConfig+0xf6>
 800543c:	2510      	movs	r5, #16
 800543e:	e76a      	b.n	8005316 <UART_SetConfig+0xf6>
 8005440:	2502      	movs	r5, #2
 8005442:	e768      	b.n	8005316 <UART_SetConfig+0xf6>
 8005444:	2500      	movs	r5, #0
 8005446:	e766      	b.n	8005316 <UART_SetConfig+0xf6>
 8005448:	2510      	movs	r5, #16
 800544a:	e764      	b.n	8005316 <UART_SetConfig+0xf6>
 800544c:	2510      	movs	r5, #16
 800544e:	e762      	b.n	8005316 <UART_SetConfig+0xf6>
 8005450:	2502      	movs	r5, #2
 8005452:	e760      	b.n	8005316 <UART_SetConfig+0xf6>
 8005454:	2501      	movs	r5, #1
 8005456:	e75e      	b.n	8005316 <UART_SetConfig+0xf6>
 8005458:	2510      	movs	r5, #16
 800545a:	e75c      	b.n	8005316 <UART_SetConfig+0xf6>
 800545c:	2510      	movs	r5, #16
 800545e:	e75a      	b.n	8005316 <UART_SetConfig+0xf6>
 8005460:	2502      	movs	r5, #2
 8005462:	e758      	b.n	8005316 <UART_SetConfig+0xf6>
 8005464:	2500      	movs	r5, #0
 8005466:	e756      	b.n	8005316 <UART_SetConfig+0xf6>
 8005468:	2510      	movs	r5, #16
 800546a:	e754      	b.n	8005316 <UART_SetConfig+0xf6>
 800546c:	2510      	movs	r5, #16
 800546e:	e752      	b.n	8005316 <UART_SetConfig+0xf6>
 8005470:	2502      	movs	r5, #2
 8005472:	e750      	b.n	8005316 <UART_SetConfig+0xf6>
 8005474:	2500      	movs	r5, #0
 8005476:	e74e      	b.n	8005316 <UART_SetConfig+0xf6>
 8005478:	2510      	movs	r5, #16
 800547a:	e74c      	b.n	8005316 <UART_SetConfig+0xf6>
 800547c:	2510      	movs	r5, #16
 800547e:	e74a      	b.n	8005316 <UART_SetConfig+0xf6>
    switch (clocksource)
 8005480:	2d08      	cmp	r5, #8
 8005482:	d853      	bhi.n	800552c <UART_SetConfig+0x30c>
 8005484:	e8df f005 	tbb	[pc, r5]
 8005488:	52352a05 	.word	0x52352a05
 800548c:	5252523e 	.word	0x5252523e
 8005490:	49          	.byte	0x49
 8005491:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005492:	f7fe fbbd 	bl	8003c10 <HAL_RCC_GetPCLK1Freq>
 8005496:	6862      	ldr	r2, [r4, #4]
 8005498:	0853      	lsrs	r3, r2, #1
 800549a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800549e:	fbb3 f3f2 	udiv	r3, r3, r2
 80054a2:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 80054a4:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054a8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80054ac:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 80054ae:	6822      	ldr	r2, [r4, #0]
 80054b0:	60d3      	str	r3, [r2, #12]
    }
  }

  return ret;

}
 80054b2:	4628      	mov	r0, r5
 80054b4:	bd38      	pop	{r3, r4, r5, pc}
 80054b6:	bf00      	nop
 80054b8:	efff69f3 	.word	0xefff69f3
 80054bc:	40011000 	.word	0x40011000
 80054c0:	40004400 	.word	0x40004400
 80054c4:	40004800 	.word	0x40004800
 80054c8:	40004c00 	.word	0x40004c00
 80054cc:	40005000 	.word	0x40005000
 80054d0:	40011400 	.word	0x40011400
 80054d4:	40007800 	.word	0x40007800
 80054d8:	40007c00 	.word	0x40007c00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80054dc:	f7fe fbae 	bl	8003c3c <HAL_RCC_GetPCLK2Freq>
 80054e0:	6862      	ldr	r2, [r4, #4]
 80054e2:	0853      	lsrs	r3, r2, #1
 80054e4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80054e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80054ec:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80054ee:	2500      	movs	r5, #0
      break;
 80054f0:	e7d8      	b.n	80054a4 <UART_SetConfig+0x284>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80054f2:	6862      	ldr	r2, [r4, #4]
 80054f4:	4b2b      	ldr	r3, [pc, #172]	; (80055a4 <UART_SetConfig+0x384>)
 80054f6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80054fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80054fe:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005500:	2500      	movs	r5, #0
      break;
 8005502:	e7cf      	b.n	80054a4 <UART_SetConfig+0x284>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005504:	f7fe fa70 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 8005508:	6862      	ldr	r2, [r4, #4]
 800550a:	0853      	lsrs	r3, r2, #1
 800550c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005510:	fbb3 f3f2 	udiv	r3, r3, r2
 8005514:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005516:	2500      	movs	r5, #0
      break;
 8005518:	e7c4      	b.n	80054a4 <UART_SetConfig+0x284>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800551a:	6862      	ldr	r2, [r4, #4]
 800551c:	0853      	lsrs	r3, r2, #1
 800551e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005522:	fbb3 f3f2 	udiv	r3, r3, r2
 8005526:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005528:	2500      	movs	r5, #0
      break;
 800552a:	e7bb      	b.n	80054a4 <UART_SetConfig+0x284>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800552c:	2501      	movs	r5, #1
 800552e:	2300      	movs	r3, #0
 8005530:	e7b8      	b.n	80054a4 <UART_SetConfig+0x284>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005532:	f7fe fb6d 	bl	8003c10 <HAL_RCC_GetPCLK1Freq>
 8005536:	6862      	ldr	r2, [r4, #4]
 8005538:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800553c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005540:	6822      	ldr	r2, [r4, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	60d3      	str	r3, [r2, #12]
      break;
 8005546:	e7b4      	b.n	80054b2 <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005548:	f7fe fb78 	bl	8003c3c <HAL_RCC_GetPCLK2Freq>
 800554c:	6862      	ldr	r2, [r4, #4]
 800554e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005552:	fbb3 f3f2 	udiv	r3, r3, r2
 8005556:	6822      	ldr	r2, [r4, #0]
 8005558:	b29b      	uxth	r3, r3
 800555a:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800555c:	2500      	movs	r5, #0
      break;
 800555e:	e7a8      	b.n	80054b2 <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005560:	6861      	ldr	r1, [r4, #4]
 8005562:	4a11      	ldr	r2, [pc, #68]	; (80055a8 <UART_SetConfig+0x388>)
 8005564:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8005568:	fbb2 f2f1 	udiv	r2, r2, r1
 800556c:	b292      	uxth	r2, r2
 800556e:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005570:	2500      	movs	r5, #0
      break;
 8005572:	e79e      	b.n	80054b2 <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005574:	f7fe fa38 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 8005578:	6862      	ldr	r2, [r4, #4]
 800557a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800557e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005582:	6822      	ldr	r2, [r4, #0]
 8005584:	b29b      	uxth	r3, r3
 8005586:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005588:	2500      	movs	r5, #0
      break;
 800558a:	e792      	b.n	80054b2 <UART_SetConfig+0x292>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800558c:	6861      	ldr	r1, [r4, #4]
 800558e:	084a      	lsrs	r2, r1, #1
 8005590:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8005594:	fbb2 f2f1 	udiv	r2, r2, r1
 8005598:	b292      	uxth	r2, r2
 800559a:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800559c:	2500      	movs	r5, #0
      break;
 800559e:	e788      	b.n	80054b2 <UART_SetConfig+0x292>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a0:	2501      	movs	r5, #1
 80055a2:	e786      	b.n	80054b2 <UART_SetConfig+0x292>
 80055a4:	01e84800 	.word	0x01e84800
 80055a8:	00f42400 	.word	0x00f42400

080055ac <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80055ae:	f013 0f01 	tst.w	r3, #1
 80055b2:	d006      	beq.n	80055c2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055b4:	6802      	ldr	r2, [r0, #0]
 80055b6:	6853      	ldr	r3, [r2, #4]
 80055b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055bc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80055be:	430b      	orrs	r3, r1
 80055c0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80055c4:	f013 0f02 	tst.w	r3, #2
 80055c8:	d006      	beq.n	80055d8 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055ca:	6802      	ldr	r2, [r0, #0]
 80055cc:	6853      	ldr	r3, [r2, #4]
 80055ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80055d4:	430b      	orrs	r3, r1
 80055d6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80055da:	f013 0f04 	tst.w	r3, #4
 80055de:	d006      	beq.n	80055ee <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055e0:	6802      	ldr	r2, [r0, #0]
 80055e2:	6853      	ldr	r3, [r2, #4]
 80055e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055e8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80055ea:	430b      	orrs	r3, r1
 80055ec:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80055f0:	f013 0f08 	tst.w	r3, #8
 80055f4:	d006      	beq.n	8005604 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055f6:	6802      	ldr	r2, [r0, #0]
 80055f8:	6853      	ldr	r3, [r2, #4]
 80055fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055fe:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005600:	430b      	orrs	r3, r1
 8005602:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005604:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005606:	f013 0f10 	tst.w	r3, #16
 800560a:	d006      	beq.n	800561a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800560c:	6802      	ldr	r2, [r0, #0]
 800560e:	6893      	ldr	r3, [r2, #8]
 8005610:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005614:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005616:	430b      	orrs	r3, r1
 8005618:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800561a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800561c:	f013 0f20 	tst.w	r3, #32
 8005620:	d006      	beq.n	8005630 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005622:	6802      	ldr	r2, [r0, #0]
 8005624:	6893      	ldr	r3, [r2, #8]
 8005626:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800562a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800562c:	430b      	orrs	r3, r1
 800562e:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005630:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005632:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005636:	d00a      	beq.n	800564e <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005638:	6802      	ldr	r2, [r0, #0]
 800563a:	6853      	ldr	r3, [r2, #4]
 800563c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005640:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005642:	430b      	orrs	r3, r1
 8005644:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005646:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800564c:	d00b      	beq.n	8005666 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800564e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005650:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005654:	d006      	beq.n	8005664 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005656:	6802      	ldr	r2, [r0, #0]
 8005658:	6853      	ldr	r3, [r2, #4]
 800565a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800565e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005660:	430b      	orrs	r3, r1
 8005662:	6053      	str	r3, [r2, #4]
  }
}
 8005664:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005666:	6802      	ldr	r2, [r0, #0]
 8005668:	6853      	ldr	r3, [r2, #4]
 800566a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800566e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005670:	430b      	orrs	r3, r1
 8005672:	6053      	str	r3, [r2, #4]
 8005674:	e7eb      	b.n	800564e <UART_AdvFeatureConfig+0xa2>

08005676 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005676:	b510      	push	{r4, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567c:	2300      	movs	r3, #0
 800567e:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005680:	f7fb ff18 	bl	80014b4 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f013 0f08 	tst.w	r3, #8
 800568c:	d109      	bne.n	80056a2 <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800568e:	2320      	movs	r3, #32
 8005690:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8005694:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005698:	2000      	movs	r0, #0
 800569a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return HAL_OK;
}
 800569e:	b002      	add	sp, #8
 80056a0:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	4603      	mov	r3, r0
 80056aa:	2200      	movs	r2, #0
 80056ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056b0:	4620      	mov	r0, r4
 80056b2:	f7ff fc8f 	bl	8004fd4 <UART_WaitOnFlagUntilTimeout>
 80056b6:	2800      	cmp	r0, #0
 80056b8:	d0e9      	beq.n	800568e <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80056ba:	2003      	movs	r0, #3
 80056bc:	e7ef      	b.n	800569e <UART_CheckIdleState+0x28>

080056be <HAL_UART_Init>:
  if(huart == NULL)
 80056be:	b378      	cbz	r0, 8005720 <HAL_UART_Init+0x62>
{
 80056c0:	b510      	push	{r4, lr}
 80056c2:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80056c4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80056c8:	b30b      	cbz	r3, 800570e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80056ca:	2324      	movs	r3, #36	; 0x24
 80056cc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80056d0:	6822      	ldr	r2, [r4, #0]
 80056d2:	6813      	ldr	r3, [r2, #0]
 80056d4:	f023 0301 	bic.w	r3, r3, #1
 80056d8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056da:	4620      	mov	r0, r4
 80056dc:	f7ff fda0 	bl	8005220 <UART_SetConfig>
 80056e0:	2801      	cmp	r0, #1
 80056e2:	d013      	beq.n	800570c <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056e6:	b9bb      	cbnz	r3, 8005718 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056e8:	6822      	ldr	r2, [r4, #0]
 80056ea:	6853      	ldr	r3, [r2, #4]
 80056ec:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80056f0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056f2:	6822      	ldr	r2, [r4, #0]
 80056f4:	6893      	ldr	r3, [r2, #8]
 80056f6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80056fa:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80056fc:	6822      	ldr	r2, [r4, #0]
 80056fe:	6813      	ldr	r3, [r2, #0]
 8005700:	f043 0301 	orr.w	r3, r3, #1
 8005704:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005706:	4620      	mov	r0, r4
 8005708:	f7ff ffb5 	bl	8005676 <UART_CheckIdleState>
}
 800570c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800570e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8005712:	f002 f843 	bl	800779c <HAL_UART_MspInit>
 8005716:	e7d8      	b.n	80056ca <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8005718:	4620      	mov	r0, r4
 800571a:	f7ff ff47 	bl	80055ac <UART_AdvFeatureConfig>
 800571e:	e7e3      	b.n	80056e8 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8005720:	2001      	movs	r0, #1
}
 8005722:	4770      	bx	lr

08005724 <USB_SetTurnaroundTime>:

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005724:	2a02      	cmp	r2, #2
 8005726:	d00a      	beq.n	800573e <USB_SetTurnaroundTime+0x1a>
      UsbTrd = 0x6U;
    }
  }
  else if (speed == USBD_HS_SPEED)
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005728:	2109      	movs	r1, #9
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800572a:	68c2      	ldr	r2, [r0, #12]
 800572c:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8005730:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005732:	68c3      	ldr	r3, [r0, #12]
 8005734:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8005738:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 800573a:	2000      	movs	r0, #0
 800573c:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800573e:	4b20      	ldr	r3, [pc, #128]	; (80057c0 <USB_SetTurnaroundTime+0x9c>)
 8005740:	440b      	add	r3, r1
 8005742:	4a20      	ldr	r2, [pc, #128]	; (80057c4 <USB_SetTurnaroundTime+0xa0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d929      	bls.n	800579c <USB_SetTurnaroundTime+0x78>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005748:	4b1f      	ldr	r3, [pc, #124]	; (80057c8 <USB_SetTurnaroundTime+0xa4>)
 800574a:	440b      	add	r3, r1
 800574c:	4a1f      	ldr	r2, [pc, #124]	; (80057cc <USB_SetTurnaroundTime+0xa8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d926      	bls.n	80057a0 <USB_SetTurnaroundTime+0x7c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005752:	4b1f      	ldr	r3, [pc, #124]	; (80057d0 <USB_SetTurnaroundTime+0xac>)
 8005754:	440b      	add	r3, r1
 8005756:	4a1f      	ldr	r2, [pc, #124]	; (80057d4 <USB_SetTurnaroundTime+0xb0>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d923      	bls.n	80057a4 <USB_SetTurnaroundTime+0x80>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800575c:	4b1e      	ldr	r3, [pc, #120]	; (80057d8 <USB_SetTurnaroundTime+0xb4>)
 800575e:	440b      	add	r3, r1
 8005760:	4a1e      	ldr	r2, [pc, #120]	; (80057dc <USB_SetTurnaroundTime+0xb8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d320      	bcc.n	80057a8 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005766:	4b1e      	ldr	r3, [pc, #120]	; (80057e0 <USB_SetTurnaroundTime+0xbc>)
 8005768:	440b      	add	r3, r1
 800576a:	4a1e      	ldr	r2, [pc, #120]	; (80057e4 <USB_SetTurnaroundTime+0xc0>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d91d      	bls.n	80057ac <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005770:	4b1d      	ldr	r3, [pc, #116]	; (80057e8 <USB_SetTurnaroundTime+0xc4>)
 8005772:	440b      	add	r3, r1
 8005774:	4a1d      	ldr	r2, [pc, #116]	; (80057ec <USB_SetTurnaroundTime+0xc8>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d31a      	bcc.n	80057b0 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800577a:	4b1d      	ldr	r3, [pc, #116]	; (80057f0 <USB_SetTurnaroundTime+0xcc>)
 800577c:	440b      	add	r3, r1
 800577e:	4a1d      	ldr	r2, [pc, #116]	; (80057f4 <USB_SetTurnaroundTime+0xd0>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d317      	bcc.n	80057b4 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005784:	4b1c      	ldr	r3, [pc, #112]	; (80057f8 <USB_SetTurnaroundTime+0xd4>)
 8005786:	440b      	add	r3, r1
 8005788:	4a1c      	ldr	r2, [pc, #112]	; (80057fc <USB_SetTurnaroundTime+0xd8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d314      	bcc.n	80057b8 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800578e:	4b1c      	ldr	r3, [pc, #112]	; (8005800 <USB_SetTurnaroundTime+0xdc>)
 8005790:	440b      	add	r3, r1
 8005792:	4a1c      	ldr	r2, [pc, #112]	; (8005804 <USB_SetTurnaroundTime+0xe0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d211      	bcs.n	80057bc <USB_SetTurnaroundTime+0x98>
      UsbTrd = 0x7U;
 8005798:	2107      	movs	r1, #7
 800579a:	e7c6      	b.n	800572a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 800579c:	210f      	movs	r1, #15
 800579e:	e7c4      	b.n	800572a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 80057a0:	210e      	movs	r1, #14
 80057a2:	e7c2      	b.n	800572a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 80057a4:	210d      	movs	r1, #13
 80057a6:	e7c0      	b.n	800572a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 80057a8:	210c      	movs	r1, #12
 80057aa:	e7be      	b.n	800572a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 80057ac:	210b      	movs	r1, #11
 80057ae:	e7bc      	b.n	800572a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 80057b0:	210a      	movs	r1, #10
 80057b2:	e7ba      	b.n	800572a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 80057b4:	2109      	movs	r1, #9
 80057b6:	e7b8      	b.n	800572a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 80057b8:	2108      	movs	r1, #8
 80057ba:	e7b6      	b.n	800572a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 80057bc:	2106      	movs	r1, #6
 80057be:	e7b4      	b.n	800572a <USB_SetTurnaroundTime+0x6>
 80057c0:	ff275340 	.word	0xff275340
 80057c4:	000c34ff 	.word	0x000c34ff
 80057c8:	ff1b1e40 	.word	0xff1b1e40
 80057cc:	000f423f 	.word	0x000f423f
 80057d0:	ff0bdc00 	.word	0xff0bdc00
 80057d4:	00124f7f 	.word	0x00124f7f
 80057d8:	fef98c80 	.word	0xfef98c80
 80057dc:	0013d620 	.word	0x0013d620
 80057e0:	fee5b660 	.word	0xfee5b660
 80057e4:	0016e35f 	.word	0x0016e35f
 80057e8:	feced300 	.word	0xfeced300
 80057ec:	001b7740 	.word	0x001b7740
 80057f0:	feb35bc0 	.word	0xfeb35bc0
 80057f4:	002191c0 	.word	0x002191c0
 80057f8:	fe91ca00 	.word	0xfe91ca00
 80057fc:	00387520 	.word	0x00387520
 8005800:	fe5954e0 	.word	0xfe5954e0
 8005804:	00419ce0 	.word	0x00419ce0

08005808 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005808:	6883      	ldr	r3, [r0, #8]
 800580a:	f043 0301 	orr.w	r3, r3, #1
 800580e:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8005810:	2000      	movs	r0, #0
 8005812:	4770      	bx	lr

08005814 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005814:	0189      	lsls	r1, r1, #6
 8005816:	f041 0120 	orr.w	r1, r1, #32
 800581a:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 800581c:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 800581e:	3301      	adds	r3, #1
 8005820:	4a05      	ldr	r2, [pc, #20]	; (8005838 <USB_FlushTxFifo+0x24>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d805      	bhi.n	8005832 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005826:	6902      	ldr	r2, [r0, #16]
 8005828:	f012 0f20 	tst.w	r2, #32
 800582c:	d1f7      	bne.n	800581e <USB_FlushTxFifo+0xa>

  return HAL_OK;
 800582e:	2000      	movs	r0, #0
 8005830:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005832:	2003      	movs	r0, #3
}
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	00030d40 	.word	0x00030d40

0800583c <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800583c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005840:	f013 0306 	ands.w	r3, r3, #6
 8005844:	d005      	beq.n	8005852 <USB_GetDevSpeed+0x16>
  {
    speed = USBD_HS_SPEED;
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005846:	2b06      	cmp	r3, #6
 8005848:	bf18      	it	ne
 800584a:	2b02      	cmpne	r3, #2
 800584c:	d103      	bne.n	8005856 <USB_GetDevSpeed+0x1a>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800584e:	2002      	movs	r0, #2
 8005850:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 8005852:	2000      	movs	r0, #0
 8005854:	4770      	bx	lr
  }
  else
  {
    speed = 0xFU;
 8005856:	200f      	movs	r0, #15
  }

  return speed;
}
 8005858:	4770      	bx	lr
	...

0800585c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800585c:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 800585e:	780c      	ldrb	r4, [r1, #0]

  if (ep->is_in == 1U)
 8005860:	784b      	ldrb	r3, [r1, #1]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d020      	beq.n	80058a8 <USB_ActivateEndpoint+0x4c>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005866:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 800586a:	f004 060f 	and.w	r6, r4, #15
 800586e:	2201      	movs	r2, #1
 8005870:	40b2      	lsls	r2, r6
 8005872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005876:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800587a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800587e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005882:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005886:	d10c      	bne.n	80058a2 <USB_ActivateEndpoint+0x46>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005888:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800588c:	688b      	ldr	r3, [r1, #8]
 800588e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005892:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005894:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8005898:	4313      	orrs	r3, r2
 800589a:	4a13      	ldr	r2, [pc, #76]	; (80058e8 <USB_ActivateEndpoint+0x8c>)
 800589c:	431a      	orrs	r2, r3
 800589e:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
}
 80058a2:	2000      	movs	r0, #0
 80058a4:	bc70      	pop	{r4, r5, r6}
 80058a6:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80058a8:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80058ac:	f004 060f 	and.w	r6, r4, #15
 80058b0:	40b3      	lsls	r3, r6
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80058ba:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 80058be:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80058c2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80058c6:	d1ec      	bne.n	80058a2 <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058c8:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80058cc:	688b      	ldr	r3, [r1, #8]
 80058ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058d2:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058d4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058d8:	ea43 5484 	orr.w	r4, r3, r4, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058dc:	4314      	orrs	r4, r2
 80058de:	4b02      	ldr	r3, [pc, #8]	; (80058e8 <USB_ActivateEndpoint+0x8c>)
 80058e0:	4323      	orrs	r3, r4
 80058e2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80058e6:	e7dc      	b.n	80058a2 <USB_ActivateEndpoint+0x46>
 80058e8:	10008000 	.word	0x10008000

080058ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058ec:	b430      	push	{r4, r5}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 80058ee:	780b      	ldrb	r3, [r1, #0]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80058f0:	784a      	ldrb	r2, [r1, #1]
 80058f2:	2a01      	cmp	r2, #1
 80058f4:	d024      	beq.n	8005940 <USB_DeactivateEndpoint+0x54>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058f6:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80058fa:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80058fe:	2a00      	cmp	r2, #0
 8005900:	db50      	blt.n	80059a4 <USB_DeactivateEndpoint+0xb8>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005902:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8005906:	780a      	ldrb	r2, [r1, #0]
 8005908:	f002 020f 	and.w	r2, r2, #15
 800590c:	2401      	movs	r4, #1
 800590e:	fa04 f202 	lsl.w	r2, r4, r2
 8005912:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 8005916:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800591a:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800591e:	7809      	ldrb	r1, [r1, #0]
 8005920:	f001 010f 	and.w	r1, r1, #15
 8005924:	408c      	lsls	r4, r1
 8005926:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 800592a:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800592e:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8005932:	4a23      	ldr	r2, [pc, #140]	; (80059c0 <USB_DeactivateEndpoint+0xd4>)
 8005934:	400a      	ands	r2, r1
 8005936:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
}
 800593a:	2000      	movs	r0, #0
 800593c:	bc30      	pop	{r4, r5}
 800593e:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005940:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005944:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005948:	2a00      	cmp	r2, #0
 800594a:	db1e      	blt.n	800598a <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800594c:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8005950:	780a      	ldrb	r2, [r1, #0]
 8005952:	f002 020f 	and.w	r2, r2, #15
 8005956:	2401      	movs	r4, #1
 8005958:	fa04 f202 	lsl.w	r2, r4, r2
 800595c:	b292      	uxth	r2, r2
 800595e:	ea25 0202 	bic.w	r2, r5, r2
 8005962:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005966:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800596a:	7809      	ldrb	r1, [r1, #0]
 800596c:	f001 010f 	and.w	r1, r1, #15
 8005970:	408c      	lsls	r4, r1
 8005972:	b2a4      	uxth	r4, r4
 8005974:	ea22 0404 	bic.w	r4, r2, r4
 8005978:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800597c:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8005980:	4a10      	ldr	r2, [pc, #64]	; (80059c4 <USB_DeactivateEndpoint+0xd8>)
 8005982:	400a      	ands	r2, r1
 8005984:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8005988:	e7d7      	b.n	800593a <USB_DeactivateEndpoint+0x4e>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800598a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800598e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005992:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005996:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800599a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800599e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 80059a2:	e7d3      	b.n	800594c <USB_DeactivateEndpoint+0x60>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059a4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80059a8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80059ac:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80059b0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80059b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80059b8:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80059bc:	e7a1      	b.n	8005902 <USB_DeactivateEndpoint+0x16>
 80059be:	bf00      	nop
 80059c0:	eff37800 	.word	0xeff37800
 80059c4:	ec337800 	.word	0xec337800

080059c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059c8:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 80059ca:	780b      	ldrb	r3, [r1, #0]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059cc:	784c      	ldrb	r4, [r1, #1]
 80059ce:	2c01      	cmp	r4, #1
 80059d0:	d024      	beq.n	8005a1c <USB_EP0StartXfer+0x54>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059d2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80059d6:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80059da:	691d      	ldr	r5, [r3, #16]
 80059dc:	4c3e      	ldr	r4, [pc, #248]	; (8005ad8 <USB_EP0StartXfer+0x110>)
 80059de:	402c      	ands	r4, r5
 80059e0:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059e2:	691d      	ldr	r5, [r3, #16]
 80059e4:	4c3d      	ldr	r4, [pc, #244]	; (8005adc <USB_EP0StartXfer+0x114>)
 80059e6:	402c      	ands	r4, r5
 80059e8:	611c      	str	r4, [r3, #16]

    if (ep->xfer_len > 0U)
 80059ea:	694c      	ldr	r4, [r1, #20]
 80059ec:	b10c      	cbz	r4, 80059f2 <USB_EP0StartXfer+0x2a>
    {
      ep->xfer_len = ep->maxpacket;
 80059ee:	688c      	ldr	r4, [r1, #8]
 80059f0:	614c      	str	r4, [r1, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059f2:	691c      	ldr	r4, [r3, #16]
 80059f4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80059f8:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80059fa:	691c      	ldr	r4, [r3, #16]
 80059fc:	688d      	ldr	r5, [r1, #8]
 80059fe:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8005a02:	432c      	orrs	r4, r5
 8005a04:	611c      	str	r4, [r3, #16]

    if (dma == 1U)
 8005a06:	2a01      	cmp	r2, #1
 8005a08:	d061      	beq.n	8005ace <USB_EP0StartXfer+0x106>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a0a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005a0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a12:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 8005a16:	2000      	movs	r0, #0
 8005a18:	bc70      	pop	{r4, r5, r6}
 8005a1a:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 8005a1c:	694c      	ldr	r4, [r1, #20]
 8005a1e:	bb5c      	cbnz	r4, 8005a78 <USB_EP0StartXfer+0xb0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a20:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005a24:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005a28:	4d2c      	ldr	r5, [pc, #176]	; (8005adc <USB_EP0StartXfer+0x114>)
 8005a2a:	4035      	ands	r5, r6
 8005a2c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a30:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8005a34:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005a38:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a3c:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005a40:	4d25      	ldr	r5, [pc, #148]	; (8005ad8 <USB_EP0StartXfer+0x110>)
 8005a42:	4035      	ands	r5, r6
 8005a44:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8005a48:	2a01      	cmp	r2, #1
 8005a4a:	d031      	beq.n	8005ab0 <USB_EP0StartXfer+0xe8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a4c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005a50:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005a54:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005a58:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8005a5c:	694b      	ldr	r3, [r1, #20]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0d9      	beq.n	8005a16 <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a62:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8005a66:	780a      	ldrb	r2, [r1, #0]
 8005a68:	f002 010f 	and.w	r1, r2, #15
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	408a      	lsls	r2, r1
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8005a76:	e7ce      	b.n	8005a16 <USB_EP0StartXfer+0x4e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a78:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005a7c:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8005a80:	6926      	ldr	r6, [r4, #16]
 8005a82:	4d15      	ldr	r5, [pc, #84]	; (8005ad8 <USB_EP0StartXfer+0x110>)
 8005a84:	4035      	ands	r5, r6
 8005a86:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a88:	6926      	ldr	r6, [r4, #16]
 8005a8a:	4d14      	ldr	r5, [pc, #80]	; (8005adc <USB_EP0StartXfer+0x114>)
 8005a8c:	4035      	ands	r5, r6
 8005a8e:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 8005a90:	694e      	ldr	r6, [r1, #20]
 8005a92:	688d      	ldr	r5, [r1, #8]
 8005a94:	42ae      	cmp	r6, r5
 8005a96:	d900      	bls.n	8005a9a <USB_EP0StartXfer+0xd2>
        ep->xfer_len = ep->maxpacket;
 8005a98:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a9a:	6925      	ldr	r5, [r4, #16]
 8005a9c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005aa0:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005aa2:	6925      	ldr	r5, [r4, #16]
 8005aa4:	694e      	ldr	r6, [r1, #20]
 8005aa6:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8005aaa:	4335      	orrs	r5, r6
 8005aac:	6125      	str	r5, [r4, #16]
 8005aae:	e7cb      	b.n	8005a48 <USB_EP0StartXfer+0x80>
      if ((uint32_t)ep->dma_addr != 0U)
 8005ab0:	690a      	ldr	r2, [r1, #16]
 8005ab2:	b11a      	cbz	r2, 8005abc <USB_EP0StartXfer+0xf4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ab4:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8005ab8:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005abc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005ac0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005ac4:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005ac8:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8005acc:	e7a3      	b.n	8005a16 <USB_EP0StartXfer+0x4e>
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ace:	68ca      	ldr	r2, [r1, #12]
 8005ad0:	2a00      	cmp	r2, #0
 8005ad2:	d09a      	beq.n	8005a0a <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ad4:	615a      	str	r2, [r3, #20]
 8005ad6:	e798      	b.n	8005a0a <USB_EP0StartXfer+0x42>
 8005ad8:	fff80000 	.word	0xfff80000
 8005adc:	e007ffff 	.word	0xe007ffff

08005ae0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ae0:	b470      	push	{r4, r5, r6}
 8005ae2:	f89d 400c 	ldrb.w	r4, [sp, #12]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pSrc = (uint32_t *)src;
  uint32_t count32b, i;

  if (dma == 0U)
 8005ae6:	b964      	cbnz	r4, 8005b02 <USB_WritePacket+0x22>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ae8:	3303      	adds	r3, #3
 8005aea:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 8005aec:	42ac      	cmp	r4, r5
 8005aee:	d208      	bcs.n	8005b02 <USB_WritePacket+0x22>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005af0:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8005af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005af8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005afc:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8005afe:	3401      	adds	r4, #1
 8005b00:	e7f4      	b.n	8005aec <USB_WritePacket+0xc>
      pSrc++;
    }
  }

  return HAL_OK;
}
 8005b02:	2000      	movs	r0, #0
 8005b04:	bc70      	pop	{r4, r5, r6}
 8005b06:	4770      	bx	lr

08005b08 <USB_EPStartXfer>:
{
 8005b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b0a:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8005b0c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005b0e:	784c      	ldrb	r4, [r1, #1]
 8005b10:	2c01      	cmp	r4, #1
 8005b12:	d029      	beq.n	8005b68 <USB_EPStartXfer+0x60>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b14:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005b18:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8005b1c:	6926      	ldr	r6, [r4, #16]
 8005b1e:	4d7c      	ldr	r5, [pc, #496]	; (8005d10 <USB_EPStartXfer+0x208>)
 8005b20:	4035      	ands	r5, r6
 8005b22:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b24:	6926      	ldr	r6, [r4, #16]
 8005b26:	4d7b      	ldr	r5, [pc, #492]	; (8005d14 <USB_EPStartXfer+0x20c>)
 8005b28:	4035      	ands	r5, r6
 8005b2a:	6125      	str	r5, [r4, #16]
    if (ep->xfer_len == 0U)
 8005b2c:	694d      	ldr	r5, [r1, #20]
 8005b2e:	2d00      	cmp	r5, #0
 8005b30:	f040 80bf 	bne.w	8005cb2 <USB_EPStartXfer+0x1aa>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005b34:	6925      	ldr	r5, [r4, #16]
 8005b36:	688e      	ldr	r6, [r1, #8]
 8005b38:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8005b3c:	4335      	orrs	r5, r6
 8005b3e:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b40:	6925      	ldr	r5, [r4, #16]
 8005b42:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005b46:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 8005b48:	2a01      	cmp	r2, #1
 8005b4a:	f000 80c7 	beq.w	8005cdc <USB_EPStartXfer+0x1d4>
    if (ep->type == EP_TYPE_ISOC)
 8005b4e:	78ca      	ldrb	r2, [r1, #3]
 8005b50:	2a01      	cmp	r2, #1
 8005b52:	f000 80c9 	beq.w	8005ce8 <USB_EPStartXfer+0x1e0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b56:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8005b5a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005b5e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8005b62:	2000      	movs	r0, #0
 8005b64:	b003      	add	sp, #12
 8005b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8005b68:	694c      	ldr	r4, [r1, #20]
 8005b6a:	bb74      	cbnz	r4, 8005bca <USB_EPStartXfer+0xc2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b6c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005b70:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005b74:	4d67      	ldr	r5, [pc, #412]	; (8005d14 <USB_EPStartXfer+0x20c>)
 8005b76:	4035      	ands	r5, r6
 8005b78:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b7c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8005b80:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005b84:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b88:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005b8c:	4d60      	ldr	r5, [pc, #384]	; (8005d10 <USB_EPStartXfer+0x208>)
 8005b8e:	4035      	ands	r5, r6
 8005b90:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8005b94:	2a01      	cmp	r2, #1
 8005b96:	d04a      	beq.n	8005c2e <USB_EPStartXfer+0x126>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b98:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005b9c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8005ba0:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8005ba4:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8005ba8:	78cc      	ldrb	r4, [r1, #3]
 8005baa:	2c01      	cmp	r4, #1
 8005bac:	d068      	beq.n	8005c80 <USB_EPStartXfer+0x178>
        if (ep->xfer_len > 0U)
 8005bae:	694b      	ldr	r3, [r1, #20]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0d6      	beq.n	8005b62 <USB_EPStartXfer+0x5a>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005bb4:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8005bb8:	7809      	ldrb	r1, [r1, #0]
 8005bba:	f001 040f 	and.w	r4, r1, #15
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	40a1      	lsls	r1, r4
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8005bc8:	e7cb      	b.n	8005b62 <USB_EPStartXfer+0x5a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bca:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005bce:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005bd2:	4d4f      	ldr	r5, [pc, #316]	; (8005d10 <USB_EPStartXfer+0x208>)
 8005bd4:	4035      	ands	r5, r6
 8005bd6:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bda:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005bde:	4d4d      	ldr	r5, [pc, #308]	; (8005d14 <USB_EPStartXfer+0x20c>)
 8005be0:	4035      	ands	r5, r6
 8005be2:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005be6:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005bea:	694d      	ldr	r5, [r1, #20]
 8005bec:	688f      	ldr	r7, [r1, #8]
 8005bee:	443d      	add	r5, r7
 8005bf0:	3d01      	subs	r5, #1
 8005bf2:	fbb5 f5f7 	udiv	r5, r5, r7
 8005bf6:	4f48      	ldr	r7, [pc, #288]	; (8005d18 <USB_EPStartXfer+0x210>)
 8005bf8:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8005bfc:	4335      	orrs	r5, r6
 8005bfe:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c02:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8005c06:	694e      	ldr	r6, [r1, #20]
 8005c08:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8005c0c:	4335      	orrs	r5, r6
 8005c0e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c12:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8005c16:	78cd      	ldrb	r5, [r1, #3]
 8005c18:	2d01      	cmp	r5, #1
 8005c1a:	d1bb      	bne.n	8005b94 <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c1c:	6925      	ldr	r5, [r4, #16]
 8005c1e:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8005c22:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c24:	6925      	ldr	r5, [r4, #16]
 8005c26:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005c2a:	6125      	str	r5, [r4, #16]
 8005c2c:	e7b2      	b.n	8005b94 <USB_EPStartXfer+0x8c>
      if ((uint32_t)ep->dma_addr != 0U)
 8005c2e:	690a      	ldr	r2, [r1, #16]
 8005c30:	b11a      	cbz	r2, 8005c3a <USB_EPStartXfer+0x132>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c32:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005c36:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 8005c3a:	78ca      	ldrb	r2, [r1, #3]
 8005c3c:	2a01      	cmp	r2, #1
 8005c3e:	d008      	beq.n	8005c52 <USB_EPStartXfer+0x14a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c40:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005c44:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005c48:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005c4c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8005c50:	e787      	b.n	8005b62 <USB_EPStartXfer+0x5a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c52:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8005c56:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005c5a:	d108      	bne.n	8005c6e <USB_EPStartXfer+0x166>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c5c:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8005c60:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8005c64:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005c68:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8005c6c:	e7e8      	b.n	8005c40 <USB_EPStartXfer+0x138>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c6e:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8005c72:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8005c76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c7a:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8005c7e:	e7df      	b.n	8005c40 <USB_EPStartXfer+0x138>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c80:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8005c84:	f414 7f80 	tst.w	r4, #256	; 0x100
 8005c88:	d10c      	bne.n	8005ca4 <USB_EPStartXfer+0x19c>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c8a:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8005c8e:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8005c92:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c96:	9200      	str	r2, [sp, #0]
 8005c98:	8a8b      	ldrh	r3, [r1, #20]
 8005c9a:	780a      	ldrb	r2, [r1, #0]
 8005c9c:	68c9      	ldr	r1, [r1, #12]
 8005c9e:	f7ff ff1f 	bl	8005ae0 <USB_WritePacket>
 8005ca2:	e75e      	b.n	8005b62 <USB_EPStartXfer+0x5a>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ca4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8005ca8:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8005cac:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8005cb0:	e7f1      	b.n	8005c96 <USB_EPStartXfer+0x18e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005cb2:	688e      	ldr	r6, [r1, #8]
 8005cb4:	4435      	add	r5, r6
 8005cb6:	3d01      	subs	r5, #1
 8005cb8:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005cbc:	6926      	ldr	r6, [r4, #16]
 8005cbe:	4f16      	ldr	r7, [pc, #88]	; (8005d18 <USB_EPStartXfer+0x210>)
 8005cc0:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 8005cc4:	433e      	orrs	r6, r7
 8005cc6:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005cc8:	6927      	ldr	r7, [r4, #16]
 8005cca:	688e      	ldr	r6, [r1, #8]
 8005ccc:	b2ad      	uxth	r5, r5
 8005cce:	fb06 f505 	mul.w	r5, r6, r5
 8005cd2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8005cd6:	433d      	orrs	r5, r7
 8005cd8:	6125      	str	r5, [r4, #16]
 8005cda:	e735      	b.n	8005b48 <USB_EPStartXfer+0x40>
      if ((uint32_t)ep->xfer_buff != 0U)
 8005cdc:	68ca      	ldr	r2, [r1, #12]
 8005cde:	2a00      	cmp	r2, #0
 8005ce0:	f43f af35 	beq.w	8005b4e <USB_EPStartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ce4:	6162      	str	r2, [r4, #20]
 8005ce6:	e732      	b.n	8005b4e <USB_EPStartXfer+0x46>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ce8:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8005cec:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005cf0:	d106      	bne.n	8005d00 <USB_EPStartXfer+0x1f8>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005cf2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8005cf6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005cfa:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8005cfe:	e72a      	b.n	8005b56 <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d00:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8005d04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d08:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8005d0c:	e723      	b.n	8005b56 <USB_EPStartXfer+0x4e>
 8005d0e:	bf00      	nop
 8005d10:	fff80000 	.word	0xfff80000
 8005d14:	e007ffff 	.word	0xe007ffff
 8005d18:	1ff80000 	.word	0x1ff80000

08005d1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d1c:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005d1e:	3203      	adds	r2, #3
 8005d20:	0894      	lsrs	r4, r2, #2

  for (i = 0U; i < count32b; i++)
 8005d22:	2300      	movs	r3, #0
 8005d24:	42a3      	cmp	r3, r4
 8005d26:	d206      	bcs.n	8005d36 <USB_ReadPacket+0x1a>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d28:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0U; i < count32b; i++)
 8005d32:	3301      	adds	r3, #1
 8005d34:	e7f6      	b.n	8005d24 <USB_ReadPacket+0x8>
    pDest++;
  }

  return ((void *)pDest);
}
 8005d36:	4608      	mov	r0, r1
 8005d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <USB_EPSetStall>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8005d3e:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 8005d40:	784a      	ldrb	r2, [r1, #1]
 8005d42:	2a01      	cmp	r2, #1
 8005d44:	d014      	beq.n	8005d70 <USB_EPSetStall+0x32>
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d46:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005d4a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8005d4e:	2a00      	cmp	r2, #0
 8005d50:	db06      	blt.n	8005d60 <USB_EPSetStall+0x22>
 8005d52:	b12b      	cbz	r3, 8005d60 <USB_EPSetStall+0x22>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d54:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005d58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d5c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d60:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005d64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d68:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d70:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005d74:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005d78:	2a00      	cmp	r2, #0
 8005d7a:	db06      	blt.n	8005d8a <USB_EPSetStall+0x4c>
 8005d7c:	b12b      	cbz	r3, 8005d8a <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d7e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005d82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d86:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d8a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005d8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d92:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8005d96:	e7e9      	b.n	8005d6c <USB_EPSetStall+0x2e>

08005d98 <USB_EPClearStall>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 8005d98:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 8005d9a:	784a      	ldrb	r2, [r1, #1]
 8005d9c:	2a01      	cmp	r2, #1
 8005d9e:	d00e      	beq.n	8005dbe <USB_EPClearStall+0x26>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005da0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005da4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005da8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dac:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005db0:	78cb      	ldrb	r3, [r1, #3]
 8005db2:	3b02      	subs	r3, #2
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d915      	bls.n	8005de6 <USB_EPClearStall+0x4e>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }
  }
  return HAL_OK;
}
 8005dba:	2000      	movs	r0, #0
 8005dbc:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005dbe:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005dc2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005dc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dca:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005dce:	78cb      	ldrb	r3, [r1, #3]
 8005dd0:	3b02      	subs	r3, #2
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d8f0      	bhi.n	8005dba <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005dd8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005de0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8005de4:	e7e9      	b.n	8005dba <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005de6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dee:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8005df2:	e7e2      	b.n	8005dba <USB_EPClearStall+0x22>

08005df4 <USB_SetDevAddress>:
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005df4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8005df8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005dfc:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005e00:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8005e04:	0109      	lsls	r1, r1, #4
 8005e06:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8005e0a:	4319      	orrs	r1, r3
 8005e0c:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800

  return HAL_OK;
}
 8005e10:	2000      	movs	r0, #0
 8005e12:	4770      	bx	lr

08005e14 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e14:	b508      	push	{r3, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e16:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8005e1a:	f023 0302 	bic.w	r3, r3, #2
 8005e1e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8005e22:	2003      	movs	r0, #3
 8005e24:	f7fb fb4c 	bl	80014c0 <HAL_Delay>

  return HAL_OK;
}
 8005e28:	2000      	movs	r0, #0
 8005e2a:	bd08      	pop	{r3, pc}

08005e2c <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e2c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8005e2e:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
 8005e30:	4010      	ands	r0, r2
 8005e32:	4770      	bx	lr

08005e34 <USB_ReadDevAllOutEpInterrupt>:
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e34:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8005e38:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e3c:	69c0      	ldr	r0, [r0, #28]
 8005e3e:	4018      	ands	r0, r3

  return ((tmpreg & 0xffff0000U) >> 16);
}
 8005e40:	0c00      	lsrs	r0, r0, #16
 8005e42:	4770      	bx	lr

08005e44 <USB_ReadDevAllInEpInterrupt>:
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e44:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8005e48:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e4c:	69c0      	ldr	r0, [r0, #28]
 8005e4e:	4018      	ands	r0, r3

  return ((tmpreg & 0xFFFFU));
}
 8005e50:	b280      	uxth	r0, r0
 8005e52:	4770      	bx	lr

08005e54 <USB_ReadDevOutEPInterrupt>:
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e54:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8005e58:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e5c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8005e60:	6940      	ldr	r0, [r0, #20]

  return tmpreg;
}
 8005e62:	4010      	ands	r0, r2
 8005e64:	4770      	bx	lr

08005e66 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e66:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e68:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005e6c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e70:	f001 020f 	and.w	r2, r1, #15
 8005e74:	40d3      	lsrs	r3, r2
 8005e76:	01db      	lsls	r3, r3, #7
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e7c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8005e80:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8005e84:	6880      	ldr	r0, [r0, #8]

  return tmpreg;
}
 8005e86:	4018      	ands	r0, r3
 8005e88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
 8005e8e:	6940      	ldr	r0, [r0, #20]
}
 8005e90:	f000 0001 	and.w	r0, r0, #1
 8005e94:	4770      	bx	lr
	...

08005e98 <USB_ActivateSetup>:
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e98:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005e9c:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <USB_ActivateSetup+0x1c>)
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005ea4:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8005ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eac:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804

  return HAL_OK;
}
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	4770      	bx	lr
 8005eb4:	fffff800 	.word	0xfffff800

08005eb8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005eb8:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005eba:	6c04      	ldr	r4, [r0, #64]	; 0x40

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ebc:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <USB_EP0_OutStart+0x5c>)
 8005ebe:	429c      	cmp	r4, r3
 8005ec0:	d903      	bls.n	8005eca <USB_EP0_OutStart+0x12>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ec2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	db16      	blt.n	8005ef8 <USB_EP0_OutStart+0x40>
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005eca:	2400      	movs	r4, #0
 8005ecc:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ed0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8005ed4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8005ed8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005edc:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8005ee0:	f044 0418 	orr.w	r4, r4, #24
 8005ee4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ee8:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8005eec:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8005ef0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10

  if (dma == 1U)
 8005ef4:	2901      	cmp	r1, #1
 8005ef6:	d003      	beq.n	8005f00 <USB_EP0_OutStart+0x48>
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
  }

  return HAL_OK;
}
 8005ef8:	2000      	movs	r0, #0
 8005efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005efe:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f00:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f04:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005f08:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005f0c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8005f10:	e7f2      	b.n	8005ef8 <USB_EP0_OutStart+0x40>
 8005f12:	bf00      	nop
 8005f14:	4f54300a 	.word	0x4f54300a

08005f18 <USBD_AUDIO_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8005f18:	236d      	movs	r3, #109	; 0x6d
 8005f1a:	8003      	strh	r3, [r0, #0]

  return USBD_AUDIO_CfgDesc;
}
 8005f1c:	4800      	ldr	r0, [pc, #0]	; (8005f20 <USBD_AUDIO_GetCfgDesc+0x8>)
 8005f1e:	4770      	bx	lr
 8005f20:	20000030 	.word	0x20000030

08005f24 <USBD_AUDIO_DataIn>:
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
}
 8005f24:	2000      	movs	r0, #0
 8005f26:	4770      	bx	lr

08005f28 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f28:	b510      	push	{r4, lr}
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8005f2a:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8005f2e:	f643 430a 	movw	r3, #15370	; 0x3c0a
 8005f32:	5ce3      	ldrb	r3, [r4, r3]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d001      	beq.n	8005f3c <USBD_AUDIO_EP0_RxReady+0x14>
      haudio->control.len = 0U;
    }
  }

  return (uint8_t)USBD_OK;
}
 8005f38:	2000      	movs	r0, #0
 8005f3a:	bd10      	pop	{r4, pc}
    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8005f3c:	f643 434c 	movw	r3, #15436	; 0x3c4c
 8005f40:	5ce3      	ldrb	r3, [r4, r3]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d1f8      	bne.n	8005f38 <USBD_AUDIO_EP0_RxReady+0x10>
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 8005f46:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	f643 420b 	movw	r2, #15371	; 0x3c0b
 8005f50:	5ca0      	ldrb	r0, [r4, r2]
 8005f52:	4798      	blx	r3
      haudio->control.cmd = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	f643 420a 	movw	r2, #15370	; 0x3c0a
 8005f5a:	54a3      	strb	r3, [r4, r2]
      haudio->control.len = 0U;
 8005f5c:	f643 424b 	movw	r2, #15435	; 0x3c4b
 8005f60:	54a3      	strb	r3, [r4, r2]
 8005f62:	e7e9      	b.n	8005f38 <USBD_AUDIO_EP0_RxReady+0x10>

08005f64 <USBD_AUDIO_EP0_TxReady>:
{
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
}
 8005f64:	2000      	movs	r0, #0
 8005f66:	4770      	bx	lr

08005f68 <USBD_AUDIO_SOF>:
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
}
 8005f68:	2000      	movs	r0, #0
 8005f6a:	4770      	bx	lr

08005f6c <USBD_AUDIO_IsoINIncomplete>:
{
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
}
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	4770      	bx	lr

08005f70 <USBD_AUDIO_IsoOutIncomplete>:
{
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
}
 8005f70:	2000      	movs	r0, #0
 8005f72:	4770      	bx	lr

08005f74 <USBD_AUDIO_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8005f74:	230a      	movs	r3, #10
 8005f76:	8003      	strh	r3, [r0, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
}
 8005f78:	4800      	ldr	r0, [pc, #0]	; (8005f7c <USBD_AUDIO_GetDeviceQualifierDesc+0x8>)
 8005f7a:	4770      	bx	lr
 8005f7c:	200000a0 	.word	0x200000a0

08005f80 <USBD_AUDIO_DataOut>:
{
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8005f82:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (epnum == AUDIO_OUT_EP)
 8005f86:	2901      	cmp	r1, #1
 8005f88:	d001      	beq.n	8005f8e <USBD_AUDIO_DataOut+0xe>
}
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f8e:	4604      	mov	r4, r0
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8005f90:	f001 fe27 	bl	8007be2 <USBD_LL_GetRxDataSize>
 8005f94:	b286      	uxth	r6, r0
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8005f96:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	f643 4708 	movw	r7, #15368	; 0x3c08
 8005fa0:	5be8      	ldrh	r0, [r5, r7]
 8005fa2:	4428      	add	r0, r5
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	3004      	adds	r0, #4
 8005faa:	4798      	blx	r3
    haudio->wr_ptr += PacketSize;
 8005fac:	5be8      	ldrh	r0, [r5, r7]
 8005fae:	4406      	add	r6, r0
 8005fb0:	b2b6      	uxth	r6, r6
 8005fb2:	53ee      	strh	r6, [r5, r7]
    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8005fb4:	f5b6 5f70 	cmp.w	r6, #15360	; 0x3c00
 8005fb8:	d014      	beq.n	8005fe4 <USBD_AUDIO_DataOut+0x64>
    if (haudio->rd_enable == 0U)
 8005fba:	f643 4305 	movw	r3, #15365	; 0x3c05
 8005fbe:	5ceb      	ldrb	r3, [r5, r3]
 8005fc0:	b92b      	cbnz	r3, 8005fce <USBD_AUDIO_DataOut+0x4e>
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8005fc2:	f643 4308 	movw	r3, #15368	; 0x3c08
 8005fc6:	5aeb      	ldrh	r3, [r5, r3]
 8005fc8:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8005fcc:	d01e      	beq.n	800600c <USBD_AUDIO_DataOut+0x8c>
                                 &haudio->buffer[haudio->wr_ptr],
 8005fce:	f643 4308 	movw	r3, #15368	; 0x3c08
 8005fd2:	5aea      	ldrh	r2, [r5, r3]
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 8005fd4:	442a      	add	r2, r5
 8005fd6:	23c0      	movs	r3, #192	; 0xc0
 8005fd8:	3204      	adds	r2, #4
 8005fda:	2101      	movs	r1, #1
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f001 fdf9 	bl	8007bd4 <USBD_LL_PrepareReceive>
 8005fe2:	e7d2      	b.n	8005f8a <USBD_AUDIO_DataOut+0xa>
      haudio->wr_ptr = 0U;
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	53ea      	strh	r2, [r5, r7]
      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8005fe8:	f643 4304 	movw	r3, #15364	; 0x3c04
 8005fec:	5ceb      	ldrb	r3, [r5, r3]
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d1e3      	bne.n	8005fba <USBD_AUDIO_DataOut+0x3a>
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8005ff2:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8005ffe:	1d28      	adds	r0, r5, #4
 8006000:	4798      	blx	r3
        haudio->offset = AUDIO_OFFSET_NONE;
 8006002:	f643 4304 	movw	r3, #15364	; 0x3c04
 8006006:	2200      	movs	r2, #0
 8006008:	54ea      	strb	r2, [r5, r3]
 800600a:	e7d6      	b.n	8005fba <USBD_AUDIO_DataOut+0x3a>
        haudio->rd_enable = 1U;
 800600c:	f643 4305 	movw	r3, #15365	; 0x3c05
 8006010:	2201      	movs	r2, #1
 8006012:	54ea      	strb	r2, [r5, r3]
 8006014:	e7db      	b.n	8005fce <USBD_AUDIO_DataOut+0x4e>

08006016 <AUDIO_REQ_GetCurrent>:
{
 8006016:	b570      	push	{r4, r5, r6, lr}
 8006018:	4604      	mov	r4, r0
 800601a:	460e      	mov	r6, r1
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800601c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
  (void)USBD_memset(haudio->control.data, 0, 64U);
 8006020:	f643 450b 	movw	r5, #15371	; 0x3c0b
 8006024:	441d      	add	r5, r3
 8006026:	2240      	movs	r2, #64	; 0x40
 8006028:	2100      	movs	r1, #0
 800602a:	4628      	mov	r0, r5
 800602c:	f002 f8ae 	bl	800818c <memset>
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 8006030:	88f2      	ldrh	r2, [r6, #6]
 8006032:	4629      	mov	r1, r5
 8006034:	4620      	mov	r0, r4
 8006036:	f000 fe1b 	bl	8006c70 <USBD_CtlSendData>
}
 800603a:	bd70      	pop	{r4, r5, r6, pc}

0800603c <AUDIO_REQ_SetCurrent>:
{
 800603c:	b538      	push	{r3, r4, r5, lr}
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800603e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (req->wLength != 0U)
 8006042:	88ca      	ldrh	r2, [r1, #6]
 8006044:	b902      	cbnz	r2, 8006048 <AUDIO_REQ_SetCurrent+0xc>
}
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	460c      	mov	r4, r1
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 800604a:	f643 410b 	movw	r1, #15371	; 0x3c0b
 800604e:	4429      	add	r1, r5
 8006050:	f000 fe23 	bl	8006c9a <USBD_CtlPrepareRx>
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8006054:	f643 430a 	movw	r3, #15370	; 0x3c0a
 8006058:	2201      	movs	r2, #1
 800605a:	54ea      	strb	r2, [r5, r3]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 800605c:	79a2      	ldrb	r2, [r4, #6]
 800605e:	f643 434b 	movw	r3, #15435	; 0x3c4b
 8006062:	54ea      	strb	r2, [r5, r3]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8006064:	88a3      	ldrh	r3, [r4, #4]
 8006066:	0a1b      	lsrs	r3, r3, #8
 8006068:	f643 424c 	movw	r2, #15436	; 0x3c4c
 800606c:	54ab      	strb	r3, [r5, r2]
}
 800606e:	e7ea      	b.n	8006046 <AUDIO_REQ_SetCurrent+0xa>

08006070 <USBD_AUDIO_Setup>:
{
 8006070:	b530      	push	{r4, r5, lr}
 8006072:	b083      	sub	sp, #12
  uint16_t status_info = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	f8ad 3006 	strh.w	r3, [sp, #6]
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800607a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800607e:	780c      	ldrb	r4, [r1, #0]
 8006080:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 8006084:	d012      	beq.n	80060ac <USBD_AUDIO_Setup+0x3c>
 8006086:	2c20      	cmp	r4, #32
 8006088:	d158      	bne.n	800613c <USBD_AUDIO_Setup+0xcc>
    switch (req->bRequest)
 800608a:	784b      	ldrb	r3, [r1, #1]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d005      	beq.n	800609c <USBD_AUDIO_Setup+0x2c>
 8006090:	2b81      	cmp	r3, #129	; 0x81
 8006092:	d107      	bne.n	80060a4 <USBD_AUDIO_Setup+0x34>
      AUDIO_REQ_GetCurrent(pdev, req);
 8006094:	f7ff ffbf 	bl	8006016 <AUDIO_REQ_GetCurrent>
  USBD_StatusTypeDef ret = USBD_OK;
 8006098:	2400      	movs	r4, #0
      break;
 800609a:	e052      	b.n	8006142 <USBD_AUDIO_Setup+0xd2>
      AUDIO_REQ_SetCurrent(pdev, req);
 800609c:	f7ff ffce 	bl	800603c <AUDIO_REQ_SetCurrent>
  USBD_StatusTypeDef ret = USBD_OK;
 80060a0:	2400      	movs	r4, #0
      break;
 80060a2:	e04e      	b.n	8006142 <USBD_AUDIO_Setup+0xd2>
      USBD_CtlError(pdev, req);
 80060a4:	f000 faad 	bl	8006602 <USBD_CtlError>
      ret = USBD_FAIL;
 80060a8:	2403      	movs	r4, #3
      break;
 80060aa:	e04a      	b.n	8006142 <USBD_AUDIO_Setup+0xd2>
    switch (req->bRequest)
 80060ac:	784d      	ldrb	r5, [r1, #1]
 80060ae:	2d0b      	cmp	r5, #11
 80060b0:	d840      	bhi.n	8006134 <USBD_AUDIO_Setup+0xc4>
 80060b2:	e8df f005 	tbb	[pc, r5]
 80060b6:	4606      	.short	0x4606
 80060b8:	3f3f3f3f 	.word	0x3f3f3f3f
 80060bc:	3f3f3f15 	.word	0x3f3f3f15
 80060c0:	2e21      	.short	0x2e21
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d003      	beq.n	80060d2 <USBD_AUDIO_Setup+0x62>
        USBD_CtlError(pdev, req);
 80060ca:	f000 fa9a 	bl	8006602 <USBD_CtlError>
        ret = USBD_FAIL;
 80060ce:	2403      	movs	r4, #3
 80060d0:	e037      	b.n	8006142 <USBD_AUDIO_Setup+0xd2>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80060d2:	2202      	movs	r2, #2
 80060d4:	f10d 0106 	add.w	r1, sp, #6
 80060d8:	f000 fdca 	bl	8006c70 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80060dc:	462c      	mov	r4, r5
 80060de:	e030      	b.n	8006142 <USBD_AUDIO_Setup+0xd2>
      if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 80060e0:	884b      	ldrh	r3, [r1, #2]
 80060e2:	0a1b      	lsrs	r3, r3, #8
 80060e4:	2b21      	cmp	r3, #33	; 0x21
 80060e6:	d12c      	bne.n	8006142 <USBD_AUDIO_Setup+0xd2>
        len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 80060e8:	88ca      	ldrh	r2, [r1, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80060ea:	2a09      	cmp	r2, #9
 80060ec:	bf28      	it	cs
 80060ee:	2209      	movcs	r2, #9
 80060f0:	4915      	ldr	r1, [pc, #84]	; (8006148 <USBD_AUDIO_Setup+0xd8>)
 80060f2:	f000 fdbd 	bl	8006c70 <USBD_CtlSendData>
 80060f6:	e024      	b.n	8006142 <USBD_AUDIO_Setup+0xd2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80060fc:	2a03      	cmp	r2, #3
 80060fe:	d003      	beq.n	8006108 <USBD_AUDIO_Setup+0x98>
        USBD_CtlError(pdev, req);
 8006100:	f000 fa7f 	bl	8006602 <USBD_CtlError>
        ret = USBD_FAIL;
 8006104:	2403      	movs	r4, #3
 8006106:	e01c      	b.n	8006142 <USBD_AUDIO_Setup+0xd2>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8006108:	2201      	movs	r2, #1
 800610a:	4619      	mov	r1, r3
 800610c:	f000 fdb0 	bl	8006c70 <USBD_CtlSendData>
 8006110:	e017      	b.n	8006142 <USBD_AUDIO_Setup+0xd2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006112:	f890 529c 	ldrb.w	r5, [r0, #668]	; 0x29c
 8006116:	2d03      	cmp	r5, #3
 8006118:	d108      	bne.n	800612c <USBD_AUDIO_Setup+0xbc>
        if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800611a:	788a      	ldrb	r2, [r1, #2]
 800611c:	2a01      	cmp	r2, #1
 800611e:	d801      	bhi.n	8006124 <USBD_AUDIO_Setup+0xb4>
          haudio->alt_setting = (uint8_t)(req->wValue);
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	e00e      	b.n	8006142 <USBD_AUDIO_Setup+0xd2>
          USBD_CtlError(pdev, req);
 8006124:	f000 fa6d 	bl	8006602 <USBD_CtlError>
          ret = USBD_FAIL;
 8006128:	462c      	mov	r4, r5
 800612a:	e00a      	b.n	8006142 <USBD_AUDIO_Setup+0xd2>
        USBD_CtlError(pdev, req);
 800612c:	f000 fa69 	bl	8006602 <USBD_CtlError>
        ret = USBD_FAIL;
 8006130:	2403      	movs	r4, #3
 8006132:	e006      	b.n	8006142 <USBD_AUDIO_Setup+0xd2>
      USBD_CtlError(pdev, req);
 8006134:	f000 fa65 	bl	8006602 <USBD_CtlError>
      ret = USBD_FAIL;
 8006138:	2403      	movs	r4, #3
      break;
 800613a:	e002      	b.n	8006142 <USBD_AUDIO_Setup+0xd2>
    USBD_CtlError(pdev, req);
 800613c:	f000 fa61 	bl	8006602 <USBD_CtlError>
    ret = USBD_FAIL;
 8006140:	2403      	movs	r4, #3
}
 8006142:	4620      	mov	r0, r4
 8006144:	b003      	add	sp, #12
 8006146:	bd30      	pop	{r4, r5, pc}
 8006148:	20000042 	.word	0x20000042

0800614c <USBD_AUDIO_DeInit>:
{
 800614c:	b510      	push	{r4, lr}
 800614e:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 8006150:	2101      	movs	r1, #1
 8006152:	f001 fd05 	bl	8007b60 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 800615c:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
  if (pdev->pClassData != NULL)
 8006160:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8006164:	b15b      	cbz	r3, 800617e <USBD_AUDIO_DeInit+0x32>
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 8006166:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	2000      	movs	r0, #0
 800616e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006170:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8006174:	f001 fff4 	bl	8008160 <free>
    pdev->pClassData = NULL;
 8006178:	2300      	movs	r3, #0
 800617a:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
}
 800617e:	2000      	movs	r0, #0
 8006180:	bd10      	pop	{r4, pc}

08006182 <USBD_AUDIO_Init>:
{
 8006182:	b538      	push	{r3, r4, r5, lr}
 8006184:	4604      	mov	r4, r0
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8006186:	f643 4050 	movw	r0, #15440	; 0x3c50
 800618a:	f001 ffe1 	bl	8008150 <malloc>
  if (haudio == NULL)
 800618e:	b378      	cbz	r0, 80061f0 <USBD_AUDIO_Init+0x6e>
 8006190:	4605      	mov	r5, r0
  pdev->pClassData = (void *)haudio;
 8006192:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006196:	7c23      	ldrb	r3, [r4, #16]
 8006198:	bb7b      	cbnz	r3, 80061fa <USBD_AUDIO_Init+0x78>
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 800619a:	2301      	movs	r3, #1
 800619c:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
  (void)USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 80061a0:	23c0      	movs	r3, #192	; 0xc0
 80061a2:	2201      	movs	r2, #1
 80061a4:	4611      	mov	r1, r2
 80061a6:	4620      	mov	r0, r4
 80061a8:	f001 fcd0 	bl	8007b4c <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
  haudio->alt_setting = 0U;
 80061b2:	2200      	movs	r2, #0
 80061b4:	602a      	str	r2, [r5, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 80061b6:	f643 4304 	movw	r3, #15364	; 0x3c04
 80061ba:	2103      	movs	r1, #3
 80061bc:	54e9      	strb	r1, [r5, r3]
  haudio->wr_ptr = 0U;
 80061be:	f643 4308 	movw	r3, #15368	; 0x3c08
 80061c2:	52ea      	strh	r2, [r5, r3]
  haudio->rd_ptr = 0U;
 80061c4:	f643 4306 	movw	r3, #15366	; 0x3c06
 80061c8:	52ea      	strh	r2, [r5, r3]
  haudio->rd_enable = 0U;
 80061ca:	f643 4305 	movw	r3, #15365	; 0x3c05
 80061ce:	54ea      	strb	r2, [r5, r3]
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 80061d0:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2146      	movs	r1, #70	; 0x46
 80061d8:	f64b 3080 	movw	r0, #48000	; 0xbb80
 80061dc:	4798      	blx	r3
 80061de:	b980      	cbnz	r0, 8006202 <USBD_AUDIO_Init+0x80>
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 80061e0:	23c0      	movs	r3, #192	; 0xc0
 80061e2:	1d2a      	adds	r2, r5, #4
 80061e4:	2101      	movs	r1, #1
 80061e6:	4620      	mov	r0, r4
 80061e8:	f001 fcf4 	bl	8007bd4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80061ec:	2000      	movs	r0, #0
}
 80061ee:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClassData = NULL;
 80061f0:	2300      	movs	r3, #0
 80061f2:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80061f6:	2002      	movs	r0, #2
 80061f8:	e7f9      	b.n	80061ee <USBD_AUDIO_Init+0x6c>
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 80061fa:	2301      	movs	r3, #1
 80061fc:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
 8006200:	e7ce      	b.n	80061a0 <USBD_AUDIO_Init+0x1e>
    return (uint8_t)USBD_FAIL;
 8006202:	2003      	movs	r0, #3
 8006204:	e7f3      	b.n	80061ee <USBD_AUDIO_Init+0x6c>

08006206 <USBD_AUDIO_Sync>:
{
 8006206:	b510      	push	{r4, lr}
  if (pdev->pClassData == NULL)
 8006208:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
 800620c:	b3a4      	cbz	r4, 8006278 <USBD_AUDIO_Sync+0x72>
 800620e:	460b      	mov	r3, r1
  haudio->offset = offset;
 8006210:	f643 4204 	movw	r2, #15364	; 0x3c04
 8006214:	54a1      	strb	r1, [r4, r2]
  if (haudio->rd_enable == 1U)
 8006216:	f643 4205 	movw	r2, #15365	; 0x3c05
 800621a:	5ca2      	ldrb	r2, [r4, r2]
 800621c:	2a01      	cmp	r2, #1
 800621e:	d010      	beq.n	8006242 <USBD_AUDIO_Sync+0x3c>
  if (haudio->rd_ptr > haudio->wr_ptr)
 8006220:	f643 4206 	movw	r2, #15366	; 0x3c06
 8006224:	5aa1      	ldrh	r1, [r4, r2]
 8006226:	f643 4208 	movw	r2, #15368	; 0x3c08
 800622a:	5aa2      	ldrh	r2, [r4, r2]
 800622c:	4291      	cmp	r1, r2
 800622e:	d916      	bls.n	800625e <USBD_AUDIO_Sync+0x58>
    if ((haudio->rd_ptr - haudio->wr_ptr) < AUDIO_OUT_PACKET)
 8006230:	1a8a      	subs	r2, r1, r2
 8006232:	2abf      	cmp	r2, #191	; 0xbf
 8006234:	dd1c      	ble.n	8006270 <USBD_AUDIO_Sync+0x6a>
      if ((haudio->rd_ptr - haudio->wr_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 8006236:	f5b2 5f6d 	cmp.w	r2, #15168	; 0x3b40
 800623a:	dc1e      	bgt.n	800627a <USBD_AUDIO_Sync+0x74>
  uint32_t BufferSize = AUDIO_TOTAL_BUF_SIZE / 2U;
 800623c:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8006240:	e018      	b.n	8006274 <USBD_AUDIO_Sync+0x6e>
    haudio->rd_ptr += (uint16_t)BufferSize;
 8006242:	f643 4106 	movw	r1, #15366	; 0x3c06
 8006246:	5a62      	ldrh	r2, [r4, r1]
 8006248:	f502 52f0 	add.w	r2, r2, #7680	; 0x1e00
 800624c:	b292      	uxth	r2, r2
 800624e:	5262      	strh	r2, [r4, r1]
    if (haudio->rd_ptr == AUDIO_TOTAL_BUF_SIZE)
 8006250:	f5b2 5f70 	cmp.w	r2, #15360	; 0x3c00
 8006254:	d1e4      	bne.n	8006220 <USBD_AUDIO_Sync+0x1a>
      haudio->rd_ptr = 0U;
 8006256:	460a      	mov	r2, r1
 8006258:	2100      	movs	r1, #0
 800625a:	52a1      	strh	r1, [r4, r2]
 800625c:	e7e0      	b.n	8006220 <USBD_AUDIO_Sync+0x1a>
    if ((haudio->wr_ptr - haudio->rd_ptr) < AUDIO_OUT_PACKET)
 800625e:	1a52      	subs	r2, r2, r1
 8006260:	2abf      	cmp	r2, #191	; 0xbf
 8006262:	dd0d      	ble.n	8006280 <USBD_AUDIO_Sync+0x7a>
      if ((haudio->wr_ptr - haudio->rd_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 8006264:	f5b2 5f6d 	cmp.w	r2, #15168	; 0x3b40
 8006268:	dc0d      	bgt.n	8006286 <USBD_AUDIO_Sync+0x80>
  uint32_t BufferSize = AUDIO_TOTAL_BUF_SIZE / 2U;
 800626a:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 800626e:	e001      	b.n	8006274 <USBD_AUDIO_Sync+0x6e>
      BufferSize += 4U;
 8006270:	f641 6104 	movw	r1, #7684	; 0x1e04
  if (haudio->offset == AUDIO_OFFSET_FULL)
 8006274:	2b02      	cmp	r3, #2
 8006276:	d009      	beq.n	800628c <USBD_AUDIO_Sync+0x86>
}
 8006278:	bd10      	pop	{r4, pc}
        BufferSize -= 4U;
 800627a:	f641 51fc 	movw	r1, #7676	; 0x1dfc
 800627e:	e7f9      	b.n	8006274 <USBD_AUDIO_Sync+0x6e>
       BufferSize -= 4U;
 8006280:	f641 51fc 	movw	r1, #7676	; 0x1dfc
 8006284:	e7f6      	b.n	8006274 <USBD_AUDIO_Sync+0x6e>
         BufferSize += 4U;
 8006286:	f641 6104 	movw	r1, #7684	; 0x1e04
 800628a:	e7f3      	b.n	8006274 <USBD_AUDIO_Sync+0x6e>
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 800628c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2202      	movs	r2, #2
 8006294:	1d20      	adds	r0, r4, #4
 8006296:	4798      	blx	r3
    haudio->offset = AUDIO_OFFSET_NONE;
 8006298:	f643 4304 	movw	r3, #15364	; 0x3c04
 800629c:	2200      	movs	r2, #0
 800629e:	54e2      	strb	r2, [r4, r3]
 80062a0:	e7ea      	b.n	8006278 <USBD_AUDIO_Sync+0x72>

080062a2 <USBD_AUDIO_RegisterInterface>:
* @retval status
*/
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
  if (fops == NULL)
 80062a2:	b119      	cbz	r1, 80062ac <USBD_AUDIO_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 80062a4:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80062a8:	2000      	movs	r0, #0
 80062aa:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80062ac:	2003      	movs	r0, #3
}
 80062ae:	4770      	bx	lr

080062b0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80062b0:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80062b2:	b1b8      	cbz	r0, 80062e4 <USBD_Init+0x34>
 80062b4:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80062b6:	f8d0 02b8 	ldr.w	r0, [r0, #696]	; 0x2b8
 80062ba:	b110      	cbz	r0, 80062c2 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 80062bc:	2000      	movs	r0, #0
 80062be:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80062c2:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 80062c6:	b110      	cbz	r0, 80062ce <USBD_Init+0x1e>
  {
    pdev->pConfDesc = NULL;
 80062c8:	2000      	movs	r0, #0
 80062ca:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062ce:	b109      	cbz	r1, 80062d4 <USBD_Init+0x24>
  {
    pdev->pDesc = pdesc;
 80062d0:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062d4:	2101      	movs	r1, #1
 80062d6:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 80062da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062dc:	4618      	mov	r0, r3
 80062de:	f001 fc2c 	bl	8007b3a <USBD_LL_Init>

  return ret;
}
 80062e2:	bd08      	pop	{r3, pc}
    USBD_ErrLog("Invalid Device handle");
 80062e4:	4805      	ldr	r0, [pc, #20]	; (80062fc <USBD_Init+0x4c>)
 80062e6:	f002 f803 	bl	80082f0 <iprintf>
 80062ea:	4805      	ldr	r0, [pc, #20]	; (8006300 <USBD_Init+0x50>)
 80062ec:	f002 f800 	bl	80082f0 <iprintf>
 80062f0:	200a      	movs	r0, #10
 80062f2:	f002 f815 	bl	8008320 <putchar>
    return USBD_FAIL;
 80062f6:	2003      	movs	r0, #3
 80062f8:	e7f3      	b.n	80062e2 <USBD_Init+0x32>
 80062fa:	bf00      	nop
 80062fc:	08009668 	.word	0x08009668
 8006300:	08009670 	.word	0x08009670

08006304 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006304:	b510      	push	{r4, lr}
 8006306:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800630e:	b159      	cbz	r1, 8006328 <USBD_RegisterClass+0x24>
 8006310:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006312:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006316:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006318:	f10d 0006 	add.w	r0, sp, #6
 800631c:	4798      	blx	r3
 800631e:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006322:	2000      	movs	r0, #0
}
 8006324:	b002      	add	sp, #8
 8006326:	bd10      	pop	{r4, pc}
    USBD_ErrLog("Invalid Class handle");
 8006328:	4805      	ldr	r0, [pc, #20]	; (8006340 <USBD_RegisterClass+0x3c>)
 800632a:	f001 ffe1 	bl	80082f0 <iprintf>
 800632e:	4805      	ldr	r0, [pc, #20]	; (8006344 <USBD_RegisterClass+0x40>)
 8006330:	f001 ffde 	bl	80082f0 <iprintf>
 8006334:	200a      	movs	r0, #10
 8006336:	f001 fff3 	bl	8008320 <putchar>
    return USBD_FAIL;
 800633a:	2003      	movs	r0, #3
 800633c:	e7f2      	b.n	8006324 <USBD_RegisterClass+0x20>
 800633e:	bf00      	nop
 8006340:	08009668 	.word	0x08009668
 8006344:	08009688 	.word	0x08009688

08006348 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006348:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800634a:	f001 fbf8 	bl	8007b3e <USBD_LL_Start>
}
 800634e:	bd08      	pop	{r3, pc}

08006350 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006350:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8006352:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006356:	b113      	cbz	r3, 800635e <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4798      	blx	r3
  }

  return ret;
}
 800635c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800635e:	2003      	movs	r0, #3
 8006360:	e7fc      	b.n	800635c <USBD_SetClassConfig+0xc>

08006362 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006362:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006364:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006368:	b10b      	cbz	r3, 800636e <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	4798      	blx	r3
  }

  return USBD_OK;
}
 800636e:	2000      	movs	r0, #0
 8006370:	bd08      	pop	{r3, pc}

08006372 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006372:	b538      	push	{r3, r4, r5, lr}
 8006374:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006376:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800637a:	4628      	mov	r0, r5
 800637c:	f000 f92d 	bl	80065da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006380:	2301      	movs	r3, #1
 8006382:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006386:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800638a:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800638e:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 8006392:	f001 031f 	and.w	r3, r1, #31
 8006396:	2b01      	cmp	r3, #1
 8006398:	d00d      	beq.n	80063b6 <USBD_LL_SetupStage+0x44>
 800639a:	2b02      	cmp	r3, #2
 800639c:	d010      	beq.n	80063c0 <USBD_LL_SetupStage+0x4e>
 800639e:	b12b      	cbz	r3, 80063ac <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80063a0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80063a4:	4620      	mov	r0, r4
 80063a6:	f001 fbe2 	bl	8007b6e <USBD_LL_StallEP>
      break;
 80063aa:	e003      	b.n	80063b4 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80063ac:	4629      	mov	r1, r5
 80063ae:	4620      	mov	r0, r4
 80063b0:	f000 face 	bl	8006950 <USBD_StdDevReq>
  }

  return ret;
}
 80063b4:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80063b6:	4629      	mov	r1, r5
 80063b8:	4620      	mov	r0, r4
 80063ba:	f000 fb01 	bl	80069c0 <USBD_StdItfReq>
      break;
 80063be:	e7f9      	b.n	80063b4 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80063c0:	4629      	mov	r1, r5
 80063c2:	4620      	mov	r0, r4
 80063c4:	f000 fb30 	bl	8006a28 <USBD_StdEPReq>
      break;
 80063c8:	e7f4      	b.n	80063b4 <USBD_LL_SetupStage+0x42>

080063ca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80063ca:	b538      	push	{r3, r4, r5, lr}
 80063cc:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80063ce:	460d      	mov	r5, r1
 80063d0:	bb31      	cbnz	r1, 8006420 <USBD_LL_DataOutStage+0x56>
 80063d2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063d4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80063d8:	2a03      	cmp	r2, #3
 80063da:	d001      	beq.n	80063e0 <USBD_LL_DataOutStage+0x16>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80063dc:	4608      	mov	r0, r1
}
 80063de:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80063e0:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 80063e4:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 80063e8:	4291      	cmp	r1, r2
 80063ea:	d80c      	bhi.n	8006406 <USBD_LL_DataOutStage+0x3c>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80063ec:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	b11b      	cbz	r3, 80063fc <USBD_LL_DataOutStage+0x32>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80063f4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80063f8:	2a03      	cmp	r2, #3
 80063fa:	d00f      	beq.n	800641c <USBD_LL_DataOutStage+0x52>
        (void)USBD_CtlSendStatus(pdev);
 80063fc:	4620      	mov	r0, r4
 80063fe:	f000 fc63 	bl	8006cc8 <USBD_CtlSendStatus>
  return USBD_OK;
 8006402:	4628      	mov	r0, r5
 8006404:	e7eb      	b.n	80063de <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8006406:	1a89      	subs	r1, r1, r2
 8006408:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800640c:	428a      	cmp	r2, r1
 800640e:	bf28      	it	cs
 8006410:	460a      	movcs	r2, r1
 8006412:	4619      	mov	r1, r3
 8006414:	f000 fc50 	bl	8006cb8 <USBD_CtlContinueRx>
  return USBD_OK;
 8006418:	4628      	mov	r0, r5
 800641a:	e7e0      	b.n	80063de <USBD_LL_DataOutStage+0x14>
          pdev->pClass->EP0_RxReady(pdev);
 800641c:	4798      	blx	r3
 800641e:	e7ed      	b.n	80063fc <USBD_LL_DataOutStage+0x32>
  else if ((pdev->pClass->DataOut != NULL) &&
 8006420:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	b12b      	cbz	r3, 8006434 <USBD_LL_DataOutStage+0x6a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006428:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800642c:	2a03      	cmp	r2, #3
 800642e:	d103      	bne.n	8006438 <USBD_LL_DataOutStage+0x6e>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006430:	4798      	blx	r3
    if (ret != USBD_OK)
 8006432:	e7d4      	b.n	80063de <USBD_LL_DataOutStage+0x14>
    return USBD_FAIL;
 8006434:	2003      	movs	r0, #3
 8006436:	e7d2      	b.n	80063de <USBD_LL_DataOutStage+0x14>
 8006438:	2003      	movs	r0, #3
 800643a:	e7d0      	b.n	80063de <USBD_LL_DataOutStage+0x14>

0800643c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800643c:	b538      	push	{r3, r4, r5, lr}
 800643e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006440:	460d      	mov	r5, r1
 8006442:	2900      	cmp	r1, #0
 8006444:	d148      	bne.n	80064d8 <USBD_LL_DataInStage+0x9c>
 8006446:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006448:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800644c:	2a02      	cmp	r2, #2
 800644e:	d005      	beq.n	800645c <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006450:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8006454:	2b01      	cmp	r3, #1
 8006456:	d03a      	beq.n	80064ce <USBD_LL_DataInStage+0x92>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8006458:	4628      	mov	r0, r5
}
 800645a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800645c:	69c2      	ldr	r2, [r0, #28]
 800645e:	6a01      	ldr	r1, [r0, #32]
 8006460:	428a      	cmp	r2, r1
 8006462:	d811      	bhi.n	8006488 <USBD_LL_DataInStage+0x4c>
        if ((pep->maxpacket == pep->rem_length) &&
 8006464:	428a      	cmp	r2, r1
 8006466:	d01b      	beq.n	80064a0 <USBD_LL_DataInStage+0x64>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006468:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	b11b      	cbz	r3, 8006478 <USBD_LL_DataInStage+0x3c>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006470:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006474:	2a03      	cmp	r2, #3
 8006476:	d027      	beq.n	80064c8 <USBD_LL_DataInStage+0x8c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006478:	2180      	movs	r1, #128	; 0x80
 800647a:	4620      	mov	r0, r4
 800647c:	f001 fb77 	bl	8007b6e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006480:	4620      	mov	r0, r4
 8006482:	f000 fc2c 	bl	8006cde <USBD_CtlReceiveStatus>
 8006486:	e7e3      	b.n	8006450 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8006488:	1a52      	subs	r2, r2, r1
 800648a:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800648c:	4619      	mov	r1, r3
 800648e:	f000 fbfc 	bl	8006c8a <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006492:	2300      	movs	r3, #0
 8006494:	461a      	mov	r2, r3
 8006496:	4619      	mov	r1, r3
 8006498:	4620      	mov	r0, r4
 800649a:	f001 fb9b 	bl	8007bd4 <USBD_LL_PrepareReceive>
 800649e:	e7d7      	b.n	8006450 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 80064a0:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80064a2:	4299      	cmp	r1, r3
 80064a4:	d8e0      	bhi.n	8006468 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 80064a6:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d2dc      	bcs.n	8006468 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80064ae:	2200      	movs	r2, #0
 80064b0:	4611      	mov	r1, r2
 80064b2:	f000 fbea 	bl	8006c8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80064b6:	2100      	movs	r1, #0
 80064b8:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064bc:	460b      	mov	r3, r1
 80064be:	460a      	mov	r2, r1
 80064c0:	4620      	mov	r0, r4
 80064c2:	f001 fb87 	bl	8007bd4 <USBD_LL_PrepareReceive>
 80064c6:	e7c3      	b.n	8006450 <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev);
 80064c8:	4620      	mov	r0, r4
 80064ca:	4798      	blx	r3
 80064cc:	e7d4      	b.n	8006478 <USBD_LL_DataInStage+0x3c>
      pdev->dev_test_mode = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 80064d4:	4628      	mov	r0, r5
 80064d6:	e7c0      	b.n	800645a <USBD_LL_DataInStage+0x1e>
  else if ((pdev->pClass->DataIn != NULL) &&
 80064d8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	b12b      	cbz	r3, 80064ec <USBD_LL_DataInStage+0xb0>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064e0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80064e4:	2a03      	cmp	r2, #3
 80064e6:	d103      	bne.n	80064f0 <USBD_LL_DataInStage+0xb4>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80064e8:	4798      	blx	r3
    if (ret != USBD_OK)
 80064ea:	e7b6      	b.n	800645a <USBD_LL_DataInStage+0x1e>
    return USBD_FAIL;
 80064ec:	2003      	movs	r0, #3
 80064ee:	e7b4      	b.n	800645a <USBD_LL_DataInStage+0x1e>
 80064f0:	2003      	movs	r0, #3
 80064f2:	e7b2      	b.n	800645a <USBD_LL_DataInStage+0x1e>

080064f4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80064f4:	b570      	push	{r4, r5, r6, lr}
 80064f6:	4604      	mov	r4, r0
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064f8:	2301      	movs	r3, #1
 80064fa:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80064fe:	2300      	movs	r3, #0
 8006500:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8006504:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8006506:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800650a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800650e:	b123      	cbz	r3, 800651a <USBD_LL_Reset+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006510:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2100      	movs	r1, #0
 8006518:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800651a:	2340      	movs	r3, #64	; 0x40
 800651c:	2200      	movs	r2, #0
 800651e:	4611      	mov	r1, r2
 8006520:	4620      	mov	r0, r4
 8006522:	f001 fb13 	bl	8007b4c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006526:	2601      	movs	r6, #1
 8006528:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800652c:	2540      	movs	r5, #64	; 0x40
 800652e:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006532:	462b      	mov	r3, r5
 8006534:	2200      	movs	r2, #0
 8006536:	2180      	movs	r1, #128	; 0x80
 8006538:	4620      	mov	r0, r4
 800653a:	f001 fb07 	bl	8007b4c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800653e:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006540:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 8006542:	2000      	movs	r0, #0
 8006544:	bd70      	pop	{r4, r5, r6, pc}

08006546 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8006546:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8006548:	2000      	movs	r0, #0
 800654a:	4770      	bx	lr

0800654c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800654c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006550:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006554:	2304      	movs	r3, #4
 8006556:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800655a:	2000      	movs	r0, #0
 800655c:	4770      	bx	lr

0800655e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800655e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006562:	2b04      	cmp	r3, #4
 8006564:	d001      	beq.n	800656a <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8006566:	2000      	movs	r0, #0
 8006568:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800656a:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800656e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8006572:	e7f8      	b.n	8006566 <USBD_LL_Resume+0x8>

08006574 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006574:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006576:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800657a:	2b03      	cmp	r3, #3
 800657c:	d001      	beq.n	8006582 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 800657e:	2000      	movs	r0, #0
 8006580:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8006582:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0f8      	beq.n	800657e <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 800658c:	4798      	blx	r3
 800658e:	e7f6      	b.n	800657e <USBD_LL_SOF+0xa>

08006590 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8006590:	2000      	movs	r0, #0
 8006592:	4770      	bx	lr

08006594 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8006594:	2000      	movs	r0, #0
 8006596:	4770      	bx	lr

08006598 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8006598:	2000      	movs	r0, #0
 800659a:	4770      	bx	lr

0800659c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800659c:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800659e:	2301      	movs	r3, #1
 80065a0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80065a4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80065a8:	b113      	cbz	r3, 80065b0 <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	7901      	ldrb	r1, [r0, #4]
 80065ae:	4798      	blx	r3
  }

  return USBD_OK;
}
 80065b0:	2000      	movs	r0, #0
 80065b2:	bd08      	pop	{r3, pc}

080065b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80065b4:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 80065b6:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	b11a      	cbz	r2, 80065c4 <USBD_GetLen+0x10>
  {
    len++;
 80065bc:	3001      	adds	r0, #1
 80065be:	b2c0      	uxtb	r0, r0
    pbuff++;
 80065c0:	3301      	adds	r3, #1
 80065c2:	e7f9      	b.n	80065b8 <USBD_GetLen+0x4>
  }

  return len;
}
 80065c4:	4770      	bx	lr

080065c6 <USBD_SetFeature>:
{
 80065c6:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065c8:	884b      	ldrh	r3, [r1, #2]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d000      	beq.n	80065d0 <USBD_SetFeature+0xa>
}
 80065ce:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80065d0:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80065d4:	f000 fb78 	bl	8006cc8 <USBD_CtlSendStatus>
}
 80065d8:	e7f9      	b.n	80065ce <USBD_SetFeature+0x8>

080065da <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80065da:	780b      	ldrb	r3, [r1, #0]
 80065dc:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80065de:	784b      	ldrb	r3, [r1, #1]
 80065e0:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 80065e2:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 80065e4:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80065e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 80065ea:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 80065ec:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 80065ee:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80065f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 80065f4:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 80065f6:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 80065f8:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80065fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 80065fe:	80c3      	strh	r3, [r0, #6]
}
 8006600:	4770      	bx	lr

08006602 <USBD_CtlError>:
{
 8006602:	b510      	push	{r4, lr}
 8006604:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006606:	2180      	movs	r1, #128	; 0x80
 8006608:	f001 fab1 	bl	8007b6e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800660c:	2100      	movs	r1, #0
 800660e:	4620      	mov	r0, r4
 8006610:	f001 faad 	bl	8007b6e <USBD_LL_StallEP>
}
 8006614:	bd10      	pop	{r4, pc}

08006616 <USBD_GetDescriptor>:
{
 8006616:	b530      	push	{r4, r5, lr}
 8006618:	b083      	sub	sp, #12
 800661a:	4604      	mov	r4, r0
 800661c:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8006624:	884a      	ldrh	r2, [r1, #2]
 8006626:	0a13      	lsrs	r3, r2, #8
 8006628:	3b01      	subs	r3, #1
 800662a:	2b06      	cmp	r3, #6
 800662c:	f200 80ab 	bhi.w	8006786 <USBD_GetDescriptor+0x170>
 8006630:	e8df f003 	tbb	[pc, r3]
 8006634:	a9331f04 	.word	0xa9331f04
 8006638:	8da9      	.short	0x8da9
 800663a:	9a          	.byte	0x9a
 800663b:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800663c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f10d 0106 	add.w	r1, sp, #6
 8006646:	7c00      	ldrb	r0, [r0, #16]
 8006648:	4798      	blx	r3
    if (req->wLength != 0U)
 800664a:	88ea      	ldrh	r2, [r5, #6]
 800664c:	2a00      	cmp	r2, #0
 800664e:	f000 80a3 	beq.w	8006798 <USBD_GetDescriptor+0x182>
      if (len != 0U)
 8006652:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 8099 	beq.w	800678e <USBD_GetDescriptor+0x178>
        len = MIN(len, req->wLength);
 800665c:	429a      	cmp	r2, r3
 800665e:	bf28      	it	cs
 8006660:	461a      	movcs	r2, r3
 8006662:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006666:	4601      	mov	r1, r0
 8006668:	4620      	mov	r0, r4
 800666a:	f000 fb01 	bl	8006c70 <USBD_CtlSendData>
}
 800666e:	b003      	add	sp, #12
 8006670:	bd30      	pop	{r4, r5, pc}
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006672:	7c03      	ldrb	r3, [r0, #16]
 8006674:	b943      	cbnz	r3, 8006688 <USBD_GetDescriptor+0x72>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006676:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667c:	f10d 0006 	add.w	r0, sp, #6
 8006680:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006682:	2302      	movs	r3, #2
 8006684:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006686:	e7e0      	b.n	800664a <USBD_GetDescriptor+0x34>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006688:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800668c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668e:	f10d 0006 	add.w	r0, sp, #6
 8006692:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006694:	2302      	movs	r3, #2
 8006696:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006698:	e7d7      	b.n	800664a <USBD_GetDescriptor+0x34>
    switch ((uint8_t)(req->wValue))
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	2a05      	cmp	r2, #5
 800669e:	d852      	bhi.n	8006746 <USBD_GetDescriptor+0x130>
 80066a0:	e8df f002 	tbb	[pc, r2]
 80066a4:	2a1d1003 	.word	0x2a1d1003
 80066a8:	4437      	.short	0x4437
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80066aa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	b123      	cbz	r3, 80066bc <USBD_GetDescriptor+0xa6>
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066b2:	f10d 0106 	add.w	r1, sp, #6
 80066b6:	7c00      	ldrb	r0, [r0, #16]
 80066b8:	4798      	blx	r3
  if (err != 0U)
 80066ba:	e7c6      	b.n	800664a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80066bc:	4629      	mov	r1, r5
 80066be:	f7ff ffa0 	bl	8006602 <USBD_CtlError>
  if (err != 0U)
 80066c2:	e7d4      	b.n	800666e <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066c4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	b123      	cbz	r3, 80066d6 <USBD_GetDescriptor+0xc0>
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066cc:	f10d 0106 	add.w	r1, sp, #6
 80066d0:	7c00      	ldrb	r0, [r0, #16]
 80066d2:	4798      	blx	r3
  if (err != 0U)
 80066d4:	e7b9      	b.n	800664a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80066d6:	4629      	mov	r1, r5
 80066d8:	f7ff ff93 	bl	8006602 <USBD_CtlError>
  if (err != 0U)
 80066dc:	e7c7      	b.n	800666e <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066de:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	b123      	cbz	r3, 80066f0 <USBD_GetDescriptor+0xda>
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066e6:	f10d 0106 	add.w	r1, sp, #6
 80066ea:	7c00      	ldrb	r0, [r0, #16]
 80066ec:	4798      	blx	r3
  if (err != 0U)
 80066ee:	e7ac      	b.n	800664a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80066f0:	4629      	mov	r1, r5
 80066f2:	f7ff ff86 	bl	8006602 <USBD_CtlError>
  if (err != 0U)
 80066f6:	e7ba      	b.n	800666e <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80066f8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	b123      	cbz	r3, 800670a <USBD_GetDescriptor+0xf4>
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006700:	f10d 0106 	add.w	r1, sp, #6
 8006704:	7c00      	ldrb	r0, [r0, #16]
 8006706:	4798      	blx	r3
  if (err != 0U)
 8006708:	e79f      	b.n	800664a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800670a:	4629      	mov	r1, r5
 800670c:	f7ff ff79 	bl	8006602 <USBD_CtlError>
  if (err != 0U)
 8006710:	e7ad      	b.n	800666e <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006712:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	b123      	cbz	r3, 8006724 <USBD_GetDescriptor+0x10e>
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800671a:	f10d 0106 	add.w	r1, sp, #6
 800671e:	7c00      	ldrb	r0, [r0, #16]
 8006720:	4798      	blx	r3
  if (err != 0U)
 8006722:	e792      	b.n	800664a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8006724:	4629      	mov	r1, r5
 8006726:	f7ff ff6c 	bl	8006602 <USBD_CtlError>
  if (err != 0U)
 800672a:	e7a0      	b.n	800666e <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800672c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	b123      	cbz	r3, 800673e <USBD_GetDescriptor+0x128>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006734:	f10d 0106 	add.w	r1, sp, #6
 8006738:	7c00      	ldrb	r0, [r0, #16]
 800673a:	4798      	blx	r3
  if (err != 0U)
 800673c:	e785      	b.n	800664a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800673e:	4629      	mov	r1, r5
 8006740:	f7ff ff5f 	bl	8006602 <USBD_CtlError>
  if (err != 0U)
 8006744:	e793      	b.n	800666e <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8006746:	4629      	mov	r1, r5
 8006748:	f7ff ff5b 	bl	8006602 <USBD_CtlError>
  if (err != 0U)
 800674c:	e78f      	b.n	800666e <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800674e:	7c03      	ldrb	r3, [r0, #16]
 8006750:	b933      	cbnz	r3, 8006760 <USBD_GetDescriptor+0x14a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006752:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006758:	f10d 0006 	add.w	r0, sp, #6
 800675c:	4798      	blx	r3
  if (err != 0U)
 800675e:	e774      	b.n	800664a <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 8006760:	4629      	mov	r1, r5
 8006762:	f7ff ff4e 	bl	8006602 <USBD_CtlError>
  if (err != 0U)
 8006766:	e782      	b.n	800666e <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006768:	7c03      	ldrb	r3, [r0, #16]
 800676a:	b943      	cbnz	r3, 800677e <USBD_GetDescriptor+0x168>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800676c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006772:	f10d 0006 	add.w	r0, sp, #6
 8006776:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006778:	2307      	movs	r3, #7
 800677a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800677c:	e765      	b.n	800664a <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 800677e:	4629      	mov	r1, r5
 8006780:	f7ff ff3f 	bl	8006602 <USBD_CtlError>
  if (err != 0U)
 8006784:	e773      	b.n	800666e <USBD_GetDescriptor+0x58>
    USBD_CtlError(pdev, req);
 8006786:	4629      	mov	r1, r5
 8006788:	f7ff ff3b 	bl	8006602 <USBD_CtlError>
    return;
 800678c:	e76f      	b.n	800666e <USBD_GetDescriptor+0x58>
        USBD_CtlError(pdev, req);
 800678e:	4629      	mov	r1, r5
 8006790:	4620      	mov	r0, r4
 8006792:	f7ff ff36 	bl	8006602 <USBD_CtlError>
 8006796:	e76a      	b.n	800666e <USBD_GetDescriptor+0x58>
      (void)USBD_CtlSendStatus(pdev);
 8006798:	4620      	mov	r0, r4
 800679a:	f000 fa95 	bl	8006cc8 <USBD_CtlSendStatus>
 800679e:	e766      	b.n	800666e <USBD_GetDescriptor+0x58>

080067a0 <USBD_SetAddress>:
{
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80067a4:	888b      	ldrh	r3, [r1, #4]
 80067a6:	b9f3      	cbnz	r3, 80067e6 <USBD_SetAddress+0x46>
 80067a8:	88cb      	ldrh	r3, [r1, #6]
 80067aa:	b9e3      	cbnz	r3, 80067e6 <USBD_SetAddress+0x46>
 80067ac:	884b      	ldrh	r3, [r1, #2]
 80067ae:	2b7f      	cmp	r3, #127	; 0x7f
 80067b0:	d819      	bhi.n	80067e6 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80067b2:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067b6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	d00c      	beq.n	80067d8 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 80067be:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80067c2:	4629      	mov	r1, r5
 80067c4:	f001 f9f8 	bl	8007bb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80067c8:	4620      	mov	r0, r4
 80067ca:	f000 fa7d 	bl	8006cc8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80067ce:	b135      	cbz	r5, 80067de <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80067d0:	2302      	movs	r3, #2
 80067d2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80067d6:	e009      	b.n	80067ec <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 80067d8:	f7ff ff13 	bl	8006602 <USBD_CtlError>
 80067dc:	e006      	b.n	80067ec <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80067de:	2301      	movs	r3, #1
 80067e0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80067e4:	e002      	b.n	80067ec <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 80067e6:	4620      	mov	r0, r4
 80067e8:	f7ff ff0b 	bl	8006602 <USBD_CtlError>
}
 80067ec:	bd38      	pop	{r3, r4, r5, pc}
	...

080067f0 <USBD_SetConfig>:
{
 80067f0:	b570      	push	{r4, r5, r6, lr}
 80067f2:	4604      	mov	r4, r0
 80067f4:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 80067f6:	788d      	ldrb	r5, [r1, #2]
 80067f8:	4b2d      	ldr	r3, [pc, #180]	; (80068b0 <USBD_SetConfig+0xc0>)
 80067fa:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80067fc:	2d01      	cmp	r5, #1
 80067fe:	d80f      	bhi.n	8006820 <USBD_SetConfig+0x30>
  switch (pdev->dev_state)
 8006800:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006804:	2b02      	cmp	r3, #2
 8006806:	d00f      	beq.n	8006828 <USBD_SetConfig+0x38>
 8006808:	2b03      	cmp	r3, #3
 800680a:	d023      	beq.n	8006854 <USBD_SetConfig+0x64>
    USBD_CtlError(pdev, req);
 800680c:	f7ff fef9 	bl	8006602 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006810:	4b27      	ldr	r3, [pc, #156]	; (80068b0 <USBD_SetConfig+0xc0>)
 8006812:	7819      	ldrb	r1, [r3, #0]
 8006814:	4620      	mov	r0, r4
 8006816:	f7ff fda4 	bl	8006362 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800681a:	2503      	movs	r5, #3
}
 800681c:	4628      	mov	r0, r5
 800681e:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8006820:	f7ff feef 	bl	8006602 <USBD_CtlError>
    return USBD_FAIL;
 8006824:	2503      	movs	r5, #3
 8006826:	e7f9      	b.n	800681c <USBD_SetConfig+0x2c>
    if (cfgidx != 0U)
 8006828:	b18d      	cbz	r5, 800684e <USBD_SetConfig+0x5e>
      pdev->dev_config = cfgidx;
 800682a:	6045      	str	r5, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800682c:	4629      	mov	r1, r5
 800682e:	f7ff fd8f 	bl	8006350 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8006832:	4605      	mov	r5, r0
 8006834:	b120      	cbz	r0, 8006840 <USBD_SetConfig+0x50>
        USBD_CtlError(pdev, req);
 8006836:	4631      	mov	r1, r6
 8006838:	4620      	mov	r0, r4
 800683a:	f7ff fee2 	bl	8006602 <USBD_CtlError>
 800683e:	e7ed      	b.n	800681c <USBD_SetConfig+0x2c>
        (void)USBD_CtlSendStatus(pdev);
 8006840:	4620      	mov	r0, r4
 8006842:	f000 fa41 	bl	8006cc8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006846:	2303      	movs	r3, #3
 8006848:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800684c:	e7e6      	b.n	800681c <USBD_SetConfig+0x2c>
      (void)USBD_CtlSendStatus(pdev);
 800684e:	f000 fa3b 	bl	8006cc8 <USBD_CtlSendStatus>
 8006852:	e7e3      	b.n	800681c <USBD_SetConfig+0x2c>
    if (cfgidx == 0U)
 8006854:	b1cd      	cbz	r5, 800688a <USBD_SetConfig+0x9a>
    else if (cfgidx != pdev->dev_config)
 8006856:	6841      	ldr	r1, [r0, #4]
 8006858:	428d      	cmp	r5, r1
 800685a:	d025      	beq.n	80068a8 <USBD_SetConfig+0xb8>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800685c:	b2c9      	uxtb	r1, r1
 800685e:	f7ff fd80 	bl	8006362 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006862:	4b13      	ldr	r3, [pc, #76]	; (80068b0 <USBD_SetConfig+0xc0>)
 8006864:	7819      	ldrb	r1, [r3, #0]
 8006866:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006868:	4620      	mov	r0, r4
 800686a:	f7ff fd71 	bl	8006350 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800686e:	4605      	mov	r5, r0
 8006870:	b1b0      	cbz	r0, 80068a0 <USBD_SetConfig+0xb0>
        USBD_CtlError(pdev, req);
 8006872:	4631      	mov	r1, r6
 8006874:	4620      	mov	r0, r4
 8006876:	f7ff fec4 	bl	8006602 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800687a:	7921      	ldrb	r1, [r4, #4]
 800687c:	4620      	mov	r0, r4
 800687e:	f7ff fd70 	bl	8006362 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006882:	2302      	movs	r3, #2
 8006884:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006888:	e7c8      	b.n	800681c <USBD_SetConfig+0x2c>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800688a:	2302      	movs	r3, #2
 800688c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006890:	6045      	str	r5, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006892:	4629      	mov	r1, r5
 8006894:	f7ff fd65 	bl	8006362 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006898:	4620      	mov	r0, r4
 800689a:	f000 fa15 	bl	8006cc8 <USBD_CtlSendStatus>
 800689e:	e7bd      	b.n	800681c <USBD_SetConfig+0x2c>
        (void)USBD_CtlSendStatus(pdev);
 80068a0:	4620      	mov	r0, r4
 80068a2:	f000 fa11 	bl	8006cc8 <USBD_CtlSendStatus>
 80068a6:	e7b9      	b.n	800681c <USBD_SetConfig+0x2c>
      (void)USBD_CtlSendStatus(pdev);
 80068a8:	f000 fa0e 	bl	8006cc8 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80068ac:	2500      	movs	r5, #0
 80068ae:	e7b5      	b.n	800681c <USBD_SetConfig+0x2c>
 80068b0:	20000398 	.word	0x20000398

080068b4 <USBD_GetConfig>:
{
 80068b4:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80068b6:	88cb      	ldrh	r3, [r1, #6]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d10a      	bne.n	80068d2 <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 80068bc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d909      	bls.n	80068d8 <USBD_GetConfig+0x24>
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d109      	bne.n	80068dc <USBD_GetConfig+0x28>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80068c8:	2201      	movs	r2, #1
 80068ca:	1d01      	adds	r1, r0, #4
 80068cc:	f000 f9d0 	bl	8006c70 <USBD_CtlSendData>
      break;
 80068d0:	e001      	b.n	80068d6 <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 80068d2:	f7ff fe96 	bl	8006602 <USBD_CtlError>
}
 80068d6:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 80068d8:	b25b      	sxtb	r3, r3
 80068da:	b913      	cbnz	r3, 80068e2 <USBD_GetConfig+0x2e>
      USBD_CtlError(pdev, req);
 80068dc:	f7ff fe91 	bl	8006602 <USBD_CtlError>
}
 80068e0:	e7f9      	b.n	80068d6 <USBD_GetConfig+0x22>
      pdev->dev_default_config = 0U;
 80068e2:	4601      	mov	r1, r0
 80068e4:	2300      	movs	r3, #0
 80068e6:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80068ea:	2201      	movs	r2, #1
 80068ec:	f000 f9c0 	bl	8006c70 <USBD_CtlSendData>
      break;
 80068f0:	e7f1      	b.n	80068d6 <USBD_GetConfig+0x22>

080068f2 <USBD_GetStatus>:
{
 80068f2:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80068f4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80068f8:	3b01      	subs	r3, #1
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d812      	bhi.n	8006924 <USBD_GetStatus+0x32>
    if (req->wLength != 0x2U)
 80068fe:	88cb      	ldrh	r3, [r1, #6]
 8006900:	2b02      	cmp	r3, #2
 8006902:	d10c      	bne.n	800691e <USBD_GetStatus+0x2c>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006904:	2301      	movs	r3, #1
 8006906:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8006908:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800690c:	b10b      	cbz	r3, 8006912 <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800690e:	2303      	movs	r3, #3
 8006910:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006912:	2202      	movs	r2, #2
 8006914:	f100 010c 	add.w	r1, r0, #12
 8006918:	f000 f9aa 	bl	8006c70 <USBD_CtlSendData>
}
 800691c:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 800691e:	f7ff fe70 	bl	8006602 <USBD_CtlError>
      break;
 8006922:	e7fb      	b.n	800691c <USBD_GetStatus+0x2a>
    USBD_CtlError(pdev, req);
 8006924:	f7ff fe6d 	bl	8006602 <USBD_CtlError>
}
 8006928:	e7f8      	b.n	800691c <USBD_GetStatus+0x2a>

0800692a <USBD_ClrFeature>:
{
 800692a:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800692c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006930:	3b01      	subs	r3, #1
 8006932:	2b02      	cmp	r3, #2
 8006934:	d809      	bhi.n	800694a <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006936:	884b      	ldrh	r3, [r1, #2]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d000      	beq.n	800693e <USBD_ClrFeature+0x14>
}
 800693c:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006944:	f000 f9c0 	bl	8006cc8 <USBD_CtlSendStatus>
 8006948:	e7f8      	b.n	800693c <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800694a:	f7ff fe5a 	bl	8006602 <USBD_CtlError>
}
 800694e:	e7f5      	b.n	800693c <USBD_ClrFeature+0x12>

08006950 <USBD_StdDevReq>:
{
 8006950:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006952:	780c      	ldrb	r4, [r1, #0]
 8006954:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8006958:	2c20      	cmp	r4, #32
 800695a:	d006      	beq.n	800696a <USBD_StdDevReq+0x1a>
 800695c:	2c40      	cmp	r4, #64	; 0x40
 800695e:	d004      	beq.n	800696a <USBD_StdDevReq+0x1a>
 8006960:	b154      	cbz	r4, 8006978 <USBD_StdDevReq+0x28>
    USBD_CtlError(pdev, req);
 8006962:	f7ff fe4e 	bl	8006602 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006966:	2400      	movs	r4, #0
    break;
 8006968:	e004      	b.n	8006974 <USBD_StdDevReq+0x24>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800696a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	4798      	blx	r3
 8006972:	4604      	mov	r4, r0
}
 8006974:	4620      	mov	r0, r4
 8006976:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 8006978:	784d      	ldrb	r5, [r1, #1]
 800697a:	2d09      	cmp	r5, #9
 800697c:	d81d      	bhi.n	80069ba <USBD_StdDevReq+0x6a>
 800697e:	e8df f005 	tbb	[pc, r5]
 8006982:	1912      	.short	0x1912
 8006984:	081c161c 	.word	0x081c161c
 8006988:	0b0f1c05 	.word	0x0b0f1c05
      USBD_GetDescriptor(pdev, req);
 800698c:	f7ff fe43 	bl	8006616 <USBD_GetDescriptor>
      break;
 8006990:	e7f0      	b.n	8006974 <USBD_StdDevReq+0x24>
      USBD_SetAddress(pdev, req);
 8006992:	f7ff ff05 	bl	80067a0 <USBD_SetAddress>
      break;
 8006996:	e7ed      	b.n	8006974 <USBD_StdDevReq+0x24>
      ret = USBD_SetConfig(pdev, req);
 8006998:	f7ff ff2a 	bl	80067f0 <USBD_SetConfig>
 800699c:	4604      	mov	r4, r0
      break;
 800699e:	e7e9      	b.n	8006974 <USBD_StdDevReq+0x24>
      USBD_GetConfig(pdev, req);
 80069a0:	f7ff ff88 	bl	80068b4 <USBD_GetConfig>
      break;
 80069a4:	e7e6      	b.n	8006974 <USBD_StdDevReq+0x24>
      USBD_GetStatus(pdev, req);
 80069a6:	f7ff ffa4 	bl	80068f2 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80069aa:	462c      	mov	r4, r5
      break;
 80069ac:	e7e2      	b.n	8006974 <USBD_StdDevReq+0x24>
      USBD_SetFeature(pdev, req);
 80069ae:	f7ff fe0a 	bl	80065c6 <USBD_SetFeature>
      break;
 80069b2:	e7df      	b.n	8006974 <USBD_StdDevReq+0x24>
      USBD_ClrFeature(pdev, req);
 80069b4:	f7ff ffb9 	bl	800692a <USBD_ClrFeature>
      break;
 80069b8:	e7dc      	b.n	8006974 <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 80069ba:	f7ff fe22 	bl	8006602 <USBD_CtlError>
      break;
 80069be:	e7d9      	b.n	8006974 <USBD_StdDevReq+0x24>

080069c0 <USBD_StdItfReq>:
{
 80069c0:	b570      	push	{r4, r5, r6, lr}
 80069c2:	4605      	mov	r5, r0
 80069c4:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069c6:	780b      	ldrb	r3, [r1, #0]
 80069c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069cc:	2b20      	cmp	r3, #32
 80069ce:	d007      	beq.n	80069e0 <USBD_StdItfReq+0x20>
 80069d0:	2b40      	cmp	r3, #64	; 0x40
 80069d2:	d005      	beq.n	80069e0 <USBD_StdItfReq+0x20>
 80069d4:	b123      	cbz	r3, 80069e0 <USBD_StdItfReq+0x20>
    USBD_CtlError(pdev, req);
 80069d6:	f7ff fe14 	bl	8006602 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80069da:	2600      	movs	r6, #0
}
 80069dc:	4630      	mov	r0, r6
 80069de:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 80069e0:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 80069e4:	3b01      	subs	r3, #1
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d818      	bhi.n	8006a1c <USBD_StdItfReq+0x5c>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069ea:	7923      	ldrb	r3, [r4, #4]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d80f      	bhi.n	8006a10 <USBD_StdItfReq+0x50>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069f0:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	4621      	mov	r1, r4
 80069f8:	4628      	mov	r0, r5
 80069fa:	4798      	blx	r3
 80069fc:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80069fe:	88e3      	ldrh	r3, [r4, #6]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1eb      	bne.n	80069dc <USBD_StdItfReq+0x1c>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d1e9      	bne.n	80069dc <USBD_StdItfReq+0x1c>
          (void)USBD_CtlSendStatus(pdev);
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f000 f95d 	bl	8006cc8 <USBD_CtlSendStatus>
 8006a0e:	e7e5      	b.n	80069dc <USBD_StdItfReq+0x1c>
        USBD_CtlError(pdev, req);
 8006a10:	4621      	mov	r1, r4
 8006a12:	4628      	mov	r0, r5
 8006a14:	f7ff fdf5 	bl	8006602 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006a18:	2600      	movs	r6, #0
 8006a1a:	e7df      	b.n	80069dc <USBD_StdItfReq+0x1c>
      USBD_CtlError(pdev, req);
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	4628      	mov	r0, r5
 8006a20:	f7ff fdef 	bl	8006602 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006a24:	2600      	movs	r6, #0
      break;
 8006a26:	e7d9      	b.n	80069dc <USBD_StdItfReq+0x1c>

08006a28 <USBD_StdEPReq>:
{
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	4606      	mov	r6, r0
 8006a2c:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8006a2e:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a30:	780c      	ldrb	r4, [r1, #0]
 8006a32:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8006a36:	2c20      	cmp	r4, #32
 8006a38:	d008      	beq.n	8006a4c <USBD_StdEPReq+0x24>
 8006a3a:	b2d9      	uxtb	r1, r3
 8006a3c:	2c40      	cmp	r4, #64	; 0x40
 8006a3e:	d005      	beq.n	8006a4c <USBD_StdEPReq+0x24>
 8006a40:	b16c      	cbz	r4, 8006a5e <USBD_StdEPReq+0x36>
    USBD_CtlError(pdev, req);
 8006a42:	4629      	mov	r1, r5
 8006a44:	f7ff fddd 	bl	8006602 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006a48:	2400      	movs	r4, #0
    break;
 8006a4a:	e006      	b.n	8006a5a <USBD_StdEPReq+0x32>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a4c:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	4629      	mov	r1, r5
 8006a54:	4630      	mov	r0, r6
 8006a56:	4798      	blx	r3
 8006a58:	4604      	mov	r4, r0
}
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (req->bRequest)
 8006a5e:	786f      	ldrb	r7, [r5, #1]
 8006a60:	2f01      	cmp	r7, #1
 8006a62:	d037      	beq.n	8006ad4 <USBD_StdEPReq+0xac>
 8006a64:	2f03      	cmp	r7, #3
 8006a66:	d005      	beq.n	8006a74 <USBD_StdEPReq+0x4c>
 8006a68:	2f00      	cmp	r7, #0
 8006a6a:	d063      	beq.n	8006b34 <USBD_StdEPReq+0x10c>
      USBD_CtlError(pdev, req);
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	f7ff fdc8 	bl	8006602 <USBD_CtlError>
      break;
 8006a72:	e7f2      	b.n	8006a5a <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8006a74:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d005      	beq.n	8006a88 <USBD_StdEPReq+0x60>
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d016      	beq.n	8006aae <USBD_StdEPReq+0x86>
        USBD_CtlError(pdev, req);
 8006a80:	4629      	mov	r1, r5
 8006a82:	f7ff fdbe 	bl	8006602 <USBD_CtlError>
        break;
 8006a86:	e7e8      	b.n	8006a5a <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a88:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8006a8c:	bf18      	it	ne
 8006a8e:	2301      	movne	r3, #1
 8006a90:	2900      	cmp	r1, #0
 8006a92:	bf08      	it	eq
 8006a94:	2300      	moveq	r3, #0
 8006a96:	b133      	cbz	r3, 8006aa6 <USBD_StdEPReq+0x7e>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a98:	f001 f869 	bl	8007b6e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a9c:	2180      	movs	r1, #128	; 0x80
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	f001 f865 	bl	8007b6e <USBD_LL_StallEP>
 8006aa4:	e7d9      	b.n	8006a5a <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	f7ff fdab 	bl	8006602 <USBD_CtlError>
 8006aac:	e7d5      	b.n	8006a5a <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006aae:	886b      	ldrh	r3, [r5, #2]
 8006ab0:	b94b      	cbnz	r3, 8006ac6 <USBD_StdEPReq+0x9e>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ab2:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8006ab6:	bf18      	it	ne
 8006ab8:	2301      	movne	r3, #1
 8006aba:	2900      	cmp	r1, #0
 8006abc:	bf08      	it	eq
 8006abe:	2300      	moveq	r3, #0
 8006ac0:	b10b      	cbz	r3, 8006ac6 <USBD_StdEPReq+0x9e>
 8006ac2:	88eb      	ldrh	r3, [r5, #6]
 8006ac4:	b11b      	cbz	r3, 8006ace <USBD_StdEPReq+0xa6>
        (void)USBD_CtlSendStatus(pdev);
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	f000 f8fe 	bl	8006cc8 <USBD_CtlSendStatus>
        break;
 8006acc:	e7c5      	b.n	8006a5a <USBD_StdEPReq+0x32>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ace:	f001 f84e 	bl	8007b6e <USBD_LL_StallEP>
 8006ad2:	e7f8      	b.n	8006ac6 <USBD_StdEPReq+0x9e>
      switch (pdev->dev_state)
 8006ad4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d005      	beq.n	8006ae8 <USBD_StdEPReq+0xc0>
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d016      	beq.n	8006b0e <USBD_StdEPReq+0xe6>
        USBD_CtlError(pdev, req);
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	f7ff fd8e 	bl	8006602 <USBD_CtlError>
        break;
 8006ae6:	e7b8      	b.n	8006a5a <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ae8:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8006aec:	bf18      	it	ne
 8006aee:	2301      	movne	r3, #1
 8006af0:	2900      	cmp	r1, #0
 8006af2:	bf08      	it	eq
 8006af4:	2300      	moveq	r3, #0
 8006af6:	b133      	cbz	r3, 8006b06 <USBD_StdEPReq+0xde>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006af8:	f001 f839 	bl	8007b6e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006afc:	2180      	movs	r1, #128	; 0x80
 8006afe:	4630      	mov	r0, r6
 8006b00:	f001 f835 	bl	8007b6e <USBD_LL_StallEP>
 8006b04:	e7a9      	b.n	8006a5a <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 8006b06:	4629      	mov	r1, r5
 8006b08:	f7ff fd7b 	bl	8006602 <USBD_CtlError>
 8006b0c:	e7a5      	b.n	8006a5a <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006b0e:	886b      	ldrh	r3, [r5, #2]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1a2      	bne.n	8006a5a <USBD_StdEPReq+0x32>
          if ((ep_addr & 0x7FU) != 0x00U)
 8006b14:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8006b18:	d109      	bne.n	8006b2e <USBD_StdEPReq+0x106>
          (void)USBD_CtlSendStatus(pdev);
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f000 f8d4 	bl	8006cc8 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b20:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	4629      	mov	r1, r5
 8006b28:	4630      	mov	r0, r6
 8006b2a:	4798      	blx	r3
 8006b2c:	e795      	b.n	8006a5a <USBD_StdEPReq+0x32>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b2e:	f001 f825 	bl	8007b7c <USBD_LL_ClearStallEP>
 8006b32:	e7f2      	b.n	8006b1a <USBD_StdEPReq+0xf2>
      switch (pdev->dev_state)
 8006b34:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006b38:	2a02      	cmp	r2, #2
 8006b3a:	d006      	beq.n	8006b4a <USBD_StdEPReq+0x122>
 8006b3c:	2a03      	cmp	r2, #3
 8006b3e:	d02e      	beq.n	8006b9e <USBD_StdEPReq+0x176>
        USBD_CtlError(pdev, req);
 8006b40:	4629      	mov	r1, r5
 8006b42:	f7ff fd5e 	bl	8006602 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006b46:	463c      	mov	r4, r7
        break;
 8006b48:	e787      	b.n	8006a5a <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b4a:	f1b1 0280 	subs.w	r2, r1, #128	; 0x80
 8006b4e:	bf18      	it	ne
 8006b50:	2201      	movne	r2, #1
 8006b52:	2900      	cmp	r1, #0
 8006b54:	bf08      	it	eq
 8006b56:	2200      	moveq	r2, #0
 8006b58:	b99a      	cbnz	r2, 8006b82 <USBD_StdEPReq+0x15a>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b5a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b5e:	d115      	bne.n	8006b8c <USBD_StdEPReq+0x164>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006b60:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b64:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006b68:	0089      	lsls	r1, r1, #2
 8006b6a:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8006b6e:	4401      	add	r1, r0
 8006b70:	3104      	adds	r1, #4
        pep->status = 0x0000U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b76:	2202      	movs	r2, #2
 8006b78:	4630      	mov	r0, r6
 8006b7a:	f000 f879 	bl	8006c70 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006b7e:	463c      	mov	r4, r7
        break;
 8006b80:	e76b      	b.n	8006a5a <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 8006b82:	4629      	mov	r1, r5
 8006b84:	f7ff fd3d 	bl	8006602 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006b88:	463c      	mov	r4, r7
          break;
 8006b8a:	e766      	b.n	8006a5a <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b8c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006b90:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006b94:	0089      	lsls	r1, r1, #2
 8006b96:	3110      	adds	r1, #16
 8006b98:	4401      	add	r1, r0
 8006b9a:	3104      	adds	r1, #4
 8006b9c:	e7e9      	b.n	8006b72 <USBD_StdEPReq+0x14a>
        if ((ep_addr & 0x80U) == 0x80U)
 8006b9e:	b25b      	sxtb	r3, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	db24      	blt.n	8006bee <USBD_StdEPReq+0x1c6>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ba4:	f001 020f 	and.w	r2, r1, #15
 8006ba8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006bac:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006bb0:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 8006bb4:	b34a      	cbz	r2, 8006c0a <USBD_StdEPReq+0x1e2>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	db2c      	blt.n	8006c14 <USBD_StdEPReq+0x1ec>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006bba:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bbe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006bc2:	009c      	lsls	r4, r3, #2
 8006bc4:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8006bc8:	4434      	add	r4, r6
 8006bca:	3404      	adds	r4, #4
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006bcc:	2980      	cmp	r1, #128	; 0x80
 8006bce:	bf14      	ite	ne
 8006bd0:	2300      	movne	r3, #0
 8006bd2:	2301      	moveq	r3, #1
 8006bd4:	2900      	cmp	r1, #0
 8006bd6:	bf08      	it	eq
 8006bd8:	2301      	moveq	r3, #1
 8006bda:	b323      	cbz	r3, 8006c26 <USBD_StdEPReq+0x1fe>
            pep->status = 0x0000U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006be0:	2202      	movs	r2, #2
 8006be2:	4621      	mov	r1, r4
 8006be4:	4630      	mov	r0, r6
 8006be6:	f000 f843 	bl	8006c70 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006bea:	463c      	mov	r4, r7
          break;
 8006bec:	e735      	b.n	8006a5a <USBD_StdEPReq+0x32>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006bee:	f001 020f 	and.w	r2, r1, #15
 8006bf2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006bf6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006bfa:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006bfc:	2a00      	cmp	r2, #0
 8006bfe:	d1da      	bne.n	8006bb6 <USBD_StdEPReq+0x18e>
            USBD_CtlError(pdev, req);
 8006c00:	4629      	mov	r1, r5
 8006c02:	f7ff fcfe 	bl	8006602 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006c06:	463c      	mov	r4, r7
            break;
 8006c08:	e727      	b.n	8006a5a <USBD_StdEPReq+0x32>
            USBD_CtlError(pdev, req);
 8006c0a:	4629      	mov	r1, r5
 8006c0c:	f7ff fcf9 	bl	8006602 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006c10:	463c      	mov	r4, r7
            break;
 8006c12:	e722      	b.n	8006a5a <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c14:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8006c18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006c1c:	009c      	lsls	r4, r3, #2
 8006c1e:	3410      	adds	r4, #16
 8006c20:	4434      	add	r4, r6
 8006c22:	3404      	adds	r4, #4
 8006c24:	e7d2      	b.n	8006bcc <USBD_StdEPReq+0x1a4>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c26:	4630      	mov	r0, r6
 8006c28:	f000 ffaf 	bl	8007b8a <USBD_LL_IsStallEP>
 8006c2c:	b110      	cbz	r0, 8006c34 <USBD_StdEPReq+0x20c>
            pep->status = 0x0001U;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	e7d5      	b.n	8006be0 <USBD_StdEPReq+0x1b8>
            pep->status = 0x0000U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	6023      	str	r3, [r4, #0]
 8006c38:	e7d2      	b.n	8006be0 <USBD_StdEPReq+0x1b8>

08006c3a <USBD_GetString>:
  if (desc == NULL)
 8006c3a:	b1c0      	cbz	r0, 8006c6e <USBD_GetString+0x34>
{
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	460d      	mov	r5, r1
 8006c40:	4616      	mov	r6, r2
 8006c42:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c44:	f7ff fcb6 	bl	80065b4 <USBD_GetLen>
 8006c48:	3001      	adds	r0, #1
 8006c4a:	0040      	lsls	r0, r0, #1
 8006c4c:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8006c4e:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c50:	2303      	movs	r3, #3
 8006c52:	706b      	strb	r3, [r5, #1]
  idx++;
 8006c54:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8006c56:	7822      	ldrb	r2, [r4, #0]
 8006c58:	b142      	cbz	r2, 8006c6c <USBD_GetString+0x32>
    unicode[idx] = *pdesc;
 8006c5a:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8006c5c:	3401      	adds	r4, #1
    idx++;
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8006c62:	2100      	movs	r1, #0
 8006c64:	54a9      	strb	r1, [r5, r2]
    idx++;
 8006c66:	3302      	adds	r3, #2
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	e7f4      	b.n	8006c56 <USBD_GetString+0x1c>
}
 8006c6c:	bd70      	pop	{r4, r5, r6, pc}
 8006c6e:	4770      	bx	lr

08006c70 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006c70:	b510      	push	{r4, lr}
 8006c72:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c74:	2202      	movs	r2, #2
 8006c76:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006c7a:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length = len;
 8006c7c:	61c3      	str	r3, [r0, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c7e:	460a      	mov	r2, r1
 8006c80:	2100      	movs	r1, #0
 8006c82:	f000 ffa0 	bl	8007bc6 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006c86:	2000      	movs	r0, #0
 8006c88:	bd10      	pop	{r4, pc}

08006c8a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006c8a:	b508      	push	{r3, lr}
 8006c8c:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c8e:	460a      	mov	r2, r1
 8006c90:	2100      	movs	r1, #0
 8006c92:	f000 ff98 	bl	8007bc6 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006c96:	2000      	movs	r0, #0
 8006c98:	bd08      	pop	{r3, pc}

08006c9a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006c9a:	b510      	push	{r4, lr}
 8006c9c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c9e:	2203      	movs	r2, #3
 8006ca0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006ca4:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006ca8:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006cac:	460a      	mov	r2, r1
 8006cae:	2100      	movs	r1, #0
 8006cb0:	f000 ff90 	bl	8007bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	bd10      	pop	{r4, pc}

08006cb8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006cb8:	b508      	push	{r3, lr}
 8006cba:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006cbc:	460a      	mov	r2, r1
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	f000 ff88 	bl	8007bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	bd08      	pop	{r3, pc}

08006cc8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006cc8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006cca:	2304      	movs	r3, #4
 8006ccc:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	f000 ff76 	bl	8007bc6 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006cda:	2000      	movs	r0, #0
 8006cdc:	bd08      	pop	{r3, pc}

08006cde <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006cde:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ce0:	2305      	movs	r3, #5
 8006ce2:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	461a      	mov	r2, r3
 8006cea:	4619      	mov	r1, r3
 8006cec:	f000 ff72 	bl	8007bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	bd08      	pop	{r3, pc}

08006cf4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8006cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf8:	b089      	sub	sp, #36	; 0x24
 8006cfa:	9003      	str	r0, [sp, #12]
 8006cfc:	9105      	str	r1, [sp, #20]
 8006cfe:	4611      	mov	r1, r2
 8006d00:	9207      	str	r2, [sp, #28]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8006d02:	4a67      	ldr	r2, [pc, #412]	; (8006ea0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ac>)
 8006d04:	fba2 2303 	umull	r2, r3, r2, r3
 8006d08:	0a1b      	lsrs	r3, r3, #8
 8006d0a:	9306      	str	r3, [sp, #24]
  currentMCU = BlockIndex;
 8006d0c:	9104      	str	r1, [sp, #16]
  

  while(currentMCU < (numberMCU + BlockIndex))
 8006d0e:	e0a4      	b.n	8006e5a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x166>
    
    for(i= 0; i <  16; i+=2)
    {
      if(i == 8)
      {
        pLum = pInBuffer + 128;
 8006d10:	9b03      	ldr	r3, [sp, #12]
 8006d12:	f103 0780 	add.w	r7, r3, #128	; 0x80
 8006d16:	e08e      	b.n	8006e36 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x142>
        
        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
          {           
            cbcomp = (int32_t)(*(pChrom));
 8006d18:	f898 5000 	ldrb.w	r5, [r8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8006d1c:	4b61      	ldr	r3, [pc, #388]	; (8006ea4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b0>)
 8006d1e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006d22:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
            
            crcomp = (int32_t)(*(pChrom + 64));
 8006d26:	f898 2040 	ldrb.w	r2, [r8, #64]	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 8006d2a:	f503 6188 	add.w	r1, r3, #1088	; 0x440
 8006d2e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8006d32:	f503 6604 	add.w	r6, r3, #2112	; 0x840
 8006d36:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8006d3a:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8006d3e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006d42:	441a      	add	r2, r3
          
            
            
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
            ycomp = (int32_t)(*(pLum +j));
 8006d44:	5d3e      	ldrb	r6, [r7, r4]
            
            *(__IO uint32_t *)pOutAddr = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8006d46:	198d      	adds	r5, r1, r6
 8006d48:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8006d4c:	4b56      	ldr	r3, [pc, #344]	; (8006ea8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b4>)
 8006d4e:	f813 9005 	ldrb.w	r9, [r3, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8006d52:	eb06 4522 	add.w	r5, r6, r2, asr #16
 8006d56:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8006d5a:	5d5d      	ldrb	r5, [r3, r5]
 8006d5c:	022d      	lsls	r5, r5, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8006d5e:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 8006d62:	4406      	add	r6, r0
 8006d64:	f506 7680 	add.w	r6, r6, #256	; 0x100
 8006d68:	5d9e      	ldrb	r6, [r3, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8006d6a:	4335      	orrs	r5, r6
            *(__IO uint32_t *)pOutAddr = 
 8006d6c:	f8cc 5000 	str.w	r5, [ip]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8006d70:	1c65      	adds	r5, r4, #1
 8006d72:	5d7e      	ldrb	r6, [r7, r5]
            
            *((__IO uint32_t *)(pOutAddr + 4)) = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8006d74:	198d      	adds	r5, r1, r6
 8006d76:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8006d7a:	f813 9005 	ldrb.w	r9, [r3, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8006d7e:	eb06 4522 	add.w	r5, r6, r2, asr #16
 8006d82:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8006d86:	5d5d      	ldrb	r5, [r3, r5]
 8006d88:	022d      	lsls	r5, r5, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8006d8a:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 8006d8e:	4406      	add	r6, r0
 8006d90:	f506 7680 	add.w	r6, r6, #256	; 0x100
 8006d94:	5d9e      	ldrb	r6, [r3, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8006d96:	4335      	orrs	r5, r6
            *((__IO uint32_t *)(pOutAddr + 4)) = 
 8006d98:	f8cc 5004 	str.w	r5, [ip, #4]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 8006d9c:	f104 0508 	add.w	r5, r4, #8
 8006da0:	5d7e      	ldrb	r6, [r7, r5]
            
            *(__IO uint32_t *)pOutAddr2 = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8006da2:	198d      	adds	r5, r1, r6
 8006da4:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8006da8:	f813 9005 	ldrb.w	r9, [r3, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8006dac:	eb06 4522 	add.w	r5, r6, r2, asr #16
 8006db0:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8006db4:	5d5d      	ldrb	r5, [r3, r5]
 8006db6:	022d      	lsls	r5, r5, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8006db8:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 8006dbc:	4406      	add	r6, r0
 8006dbe:	f506 7680 	add.w	r6, r6, #256	; 0x100
 8006dc2:	5d9e      	ldrb	r6, [r3, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8006dc4:	4335      	orrs	r5, r6
            *(__IO uint32_t *)pOutAddr2 = 
 8006dc6:	f8ce 5000 	str.w	r5, [lr]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 8006dca:	f104 0509 	add.w	r5, r4, #9
 8006dce:	5d7d      	ldrb	r5, [r7, r5]
            
            *((__IO uint32_t *)(pOutAddr2 +4)) = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8006dd0:	4429      	add	r1, r5
 8006dd2:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8006dd6:	5c5e      	ldrb	r6, [r3, r1]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8006dd8:	eb05 4122 	add.w	r1, r5, r2, asr #16
 8006ddc:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8006de0:	5c59      	ldrb	r1, [r3, r1]
 8006de2:	0209      	lsls	r1, r1, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8006de4:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 8006de8:	1942      	adds	r2, r0, r5
 8006dea:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006dee:	5c9b      	ldrb	r3, [r3, r2]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8006df0:	430b      	orrs	r3, r1
            *((__IO uint32_t *)(pOutAddr2 +4)) = 
 8006df2:	f8ce 3004 	str.w	r3, [lr, #4]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8006df6:	f10c 0c08 	add.w	ip, ip, #8
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 8006dfa:	f10e 0e08 	add.w	lr, lr, #8
          
            pChrom++;
 8006dfe:	f108 0801 	add.w	r8, r8, #1
          for(j=0; j < 8; j+=2)
 8006e02:	3402      	adds	r4, #2
 8006e04:	2c07      	cmp	r4, #7
 8006e06:	d987      	bls.n	8006d18 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x24>
          }
          pLum += 64;                      
 8006e08:	3740      	adds	r7, #64	; 0x40
        for(k= 0; k<2; k++)
 8006e0a:	f10b 0b01 	add.w	fp, fp, #1
 8006e0e:	f1bb 0f01 	cmp.w	fp, #1
 8006e12:	d801      	bhi.n	8006e18 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x124>
          for(j=0; j < 8; j+=2)
 8006e14:	2400      	movs	r4, #0
 8006e16:	e7f5      	b.n	8006e04 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x110>
        }

        pLum = pLum - 128 + 16;
 8006e18:	3f70      	subs	r7, #112	; 0x70
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 8006e1a:	9b01      	ldr	r3, [sp, #4]
 8006e1c:	9a02      	ldr	r2, [sp, #8]
 8006e1e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8006e22:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
 8006e24:	f10a 0a02 	add.w	sl, sl, #2
 8006e28:	f1ba 0f0f 	cmp.w	sl, #15
 8006e2c:	d811      	bhi.n	8006e52 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x15e>
      if(i == 8)
 8006e2e:	f1ba 0f08 	cmp.w	sl, #8
 8006e32:	f43f af6d 	beq.w	8006d10 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1c>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8006e36:	4b1b      	ldr	r3, [pc, #108]	; (8006ea4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b0>)
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	9a01      	ldr	r2, [sp, #4]
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d9f1      	bls.n	8006e24 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x130>
        pOutAddr = pOutBuffer + refline;
 8006e40:	9b05      	ldr	r3, [sp, #20]
 8006e42:	eb03 0c02 	add.w	ip, r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 8006e46:	9b02      	ldr	r3, [sp, #8]
 8006e48:	eb0c 0e03 	add.w	lr, ip, r3
        for(k= 0; k<2; k++)
 8006e4c:	f04f 0b00 	mov.w	fp, #0
 8006e50:	e7dd      	b.n	8006e0e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x11a>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 8006e52:	9b03      	ldr	r3, [sp, #12]
 8006e54:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006e58:	9303      	str	r3, [sp, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8006e5a:	9b06      	ldr	r3, [sp, #24]
 8006e5c:	9a07      	ldr	r2, [sp, #28]
 8006e5e:	4413      	add	r3, r2
 8006e60:	9a04      	ldr	r2, [sp, #16]
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d917      	bls.n	8006e96 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1a2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8006e66:	9c04      	ldr	r4, [sp, #16]
 8006e68:	0120      	lsls	r0, r4, #4
 8006e6a:	490e      	ldr	r1, [pc, #56]	; (8006ea4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b0>)
 8006e6c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8006e6e:	fbb0 f2f3 	udiv	r2, r0, r3
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8006e72:	fb03 0312 	mls	r3, r3, r2, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8006e76:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8006e78:	9102      	str	r1, [sp, #8]
 8006e7a:	fb01 f202 	mul.w	r2, r1, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8006e84:	9301      	str	r3, [sp, #4]
    currentMCU++;
 8006e86:	1c63      	adds	r3, r4, #1
 8006e88:	9304      	str	r3, [sp, #16]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 8006e8a:	9f03      	ldr	r7, [sp, #12]
 8006e8c:	f507 7880 	add.w	r8, r7, #256	; 0x100
    for(i= 0; i <  16; i+=2)
 8006e90:	f04f 0a00 	mov.w	sl, #0
 8006e94:	e7c8      	b.n	8006e28 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x134>
  }
  return numberMCU;
}
 8006e96:	9806      	ldr	r0, [sp, #24]
 8006e98:	b009      	add	sp, #36	; 0x24
 8006e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e9e:	bf00      	nop
 8006ea0:	aaaaaaab 	.word	0xaaaaaaab
 8006ea4:	2000039c 	.word	0x2000039c
 8006ea8:	08009158 	.word	0x08009158

08006eac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8006eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb0:	b087      	sub	sp, #28
 8006eb2:	9002      	str	r0, [sp, #8]
 8006eb4:	9103      	str	r1, [sp, #12]
 8006eb6:	9205      	str	r2, [sp, #20]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8006eb8:	0a1b      	lsrs	r3, r3, #8
 8006eba:	9304      	str	r3, [sp, #16]
  currentMCU = BlockIndex;
 8006ebc:	9200      	str	r2, [sp, #0]
  

  while(currentMCU < (numberMCU + BlockIndex))
 8006ebe:	e066      	b.n	8006f8e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xe2>
        
        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
          {           
            cbcomp = (int32_t)(*(pChrom));
 8006ec0:	f89c 4000 	ldrb.w	r4, [ip]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8006ec4:	4a44      	ldr	r2, [pc, #272]	; (8006fd8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x12c>)
 8006ec6:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8006eca:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            
            crcomp = (int32_t)(*(pChrom + 64));
 8006ece:	f89c 3040 	ldrb.w	r3, [ip, #64]	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 8006ed2:	f502 6588 	add.w	r5, r2, #1088	; 0x440
 8006ed6:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8006eda:	f502 6504 	add.w	r5, r2, #2112	; 0x840
 8006ede:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8006ee2:	f502 6244 	add.w	r2, r2, #3136	; 0xc40
 8006ee6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8006eea:	442b      	add	r3, r5
          
            
            
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888) 
          
            ycomp = (int32_t)(*(pLum +j));
 8006eec:	f81e 5000 	ldrb.w	r5, [lr, r0]
            
            *(__IO uint32_t *)pOutAddr = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8006ef0:	1972      	adds	r2, r6, r5
 8006ef2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006ef6:	4c39      	ldr	r4, [pc, #228]	; (8006fdc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x130>)
 8006ef8:	f814 8002 	ldrb.w	r8, [r4, r2]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8006efc:	eb05 4223 	add.w	r2, r5, r3, asr #16
 8006f00:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006f04:	5ca2      	ldrb	r2, [r4, r2]
 8006f06:	0212      	lsls	r2, r2, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8006f08:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);
 8006f0c:	440d      	add	r5, r1
 8006f0e:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8006f12:	5d65      	ldrb	r5, [r4, r5]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8006f14:	432a      	orrs	r2, r5
            *(__IO uint32_t *)pOutAddr = 
 8006f16:	603a      	str	r2, [r7, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8006f18:	1c42      	adds	r2, r0, #1
 8006f1a:	f81e 2002 	ldrb.w	r2, [lr, r2]
            
            *((__IO uint32_t *)(pOutAddr + 4)) = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8006f1e:	4416      	add	r6, r2
 8006f20:	f506 7680 	add.w	r6, r6, #256	; 0x100
 8006f24:	5da5      	ldrb	r5, [r4, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8006f26:	eb02 4323 	add.w	r3, r2, r3, asr #16
 8006f2a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006f2e:	5ce3      	ldrb	r3, [r4, r3]
 8006f30:	021b      	lsls	r3, r3, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8006f32:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);         
 8006f36:	4411      	add	r1, r2
 8006f38:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8006f3c:	5c62      	ldrb	r2, [r4, r1]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8006f3e:	4313      	orrs	r3, r2
            *((__IO uint32_t *)(pOutAddr + 4)) = 
 8006f40:	607b      	str	r3, [r7, #4]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
          
#endif /* JPEG_RGB_FORMAT*/          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8006f42:	3708      	adds	r7, #8
          
            pChrom++;
 8006f44:	f10c 0c01 	add.w	ip, ip, #1
          for(j=0; j < 8; j+=2)
 8006f48:	3002      	adds	r0, #2
 8006f4a:	2807      	cmp	r0, #7
 8006f4c:	d9b8      	bls.n	8006ec0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14>
          }
          pLum += 64;                      
 8006f4e:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
        for(k= 0; k<2; k++)
 8006f52:	f10b 0b01 	add.w	fp, fp, #1
 8006f56:	f1bb 0f01 	cmp.w	fp, #1
 8006f5a:	d801      	bhi.n	8006f60 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xb4>
          for(j=0; j < 8; j+=2)
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	e7f4      	b.n	8006f4a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9e>
        }
        
        pLum = pLum - 128 + 8;
 8006f60:	f1ae 0e78 	sub.w	lr, lr, #120	; 0x78
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
 8006f64:	9b01      	ldr	r3, [sp, #4]
 8006f66:	449a      	add	sl, r3
    for(i= 0; i <  8; i++)
 8006f68:	f109 0901 	add.w	r9, r9, #1
 8006f6c:	f1b9 0f07 	cmp.w	r9, #7
 8006f70:	d809      	bhi.n	8006f86 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xda>
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8006f72:	4b19      	ldr	r3, [pc, #100]	; (8006fd8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x12c>)
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	4553      	cmp	r3, sl
 8006f78:	d9f6      	bls.n	8006f68 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xbc>
        pOutAddr = pOutBuffer + refline;
 8006f7a:	9b03      	ldr	r3, [sp, #12]
 8006f7c:	eb03 070a 	add.w	r7, r3, sl
        for(k= 0; k<2; k++)
 8006f80:	f04f 0b00 	mov.w	fp, #0
 8006f84:	e7e7      	b.n	8006f56 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xaa>
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8006f86:	9b02      	ldr	r3, [sp, #8]
 8006f88:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006f8c:	9302      	str	r3, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 8006f8e:	9b04      	ldr	r3, [sp, #16]
 8006f90:	9a05      	ldr	r2, [sp, #20]
 8006f92:	4413      	add	r3, r2
 8006f94:	9a00      	ldr	r2, [sp, #0]
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d919      	bls.n	8006fce <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x122>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8006f9a:	9800      	ldr	r0, [sp, #0]
 8006f9c:	ea4f 1a00 	mov.w	sl, r0, lsl #4
 8006fa0:	490d      	ldr	r1, [pc, #52]	; (8006fd8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x12c>)
 8006fa2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8006fa4:	fbba f2f3 	udiv	r2, sl, r3
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8006fa8:	fb03 aa12 	mls	sl, r3, r2, sl
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8006fac:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006fae:	9301      	str	r3, [sp, #4]
 8006fb0:	fb03 f202 	mul.w	r2, r3, r2
 8006fb4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8006fb8:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
    currentMCU++;
 8006fbc:	1c43      	adds	r3, r0, #1
 8006fbe:	9300      	str	r3, [sp, #0]
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8006fc0:	9b02      	ldr	r3, [sp, #8]
 8006fc2:	f103 0c80 	add.w	ip, r3, #128	; 0x80
    pLum = pInBuffer;
 8006fc6:	469e      	mov	lr, r3
    for(i= 0; i <  8; i++)
 8006fc8:	f04f 0900 	mov.w	r9, #0
 8006fcc:	e7ce      	b.n	8006f6c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0xc0>
  }
  return numberMCU;
}
 8006fce:	9804      	ldr	r0, [sp, #16]
 8006fd0:	b007      	add	sp, #28
 8006fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd6:	bf00      	nop
 8006fd8:	2000039c 	.word	0x2000039c
 8006fdc:	08009158 	.word	0x08009158

08006fe0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8006fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe4:	b085      	sub	sp, #20
 8006fe6:	9000      	str	r0, [sp, #0]
 8006fe8:	9101      	str	r1, [sp, #4]
 8006fea:	4692      	mov	sl, r2
 8006fec:	9203      	str	r2, [sp, #12]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8006fee:	4a35      	ldr	r2, [pc, #212]	; (80070c4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe4>)
 8006ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff4:	09db      	lsrs	r3, r3, #7
 8006ff6:	9302      	str	r3, [sp, #8]
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
 8006ff8:	e042      	b.n	8007080 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xa0>
        pOutAddr = pOutBuffer+ refline;
        

          for(j=0; j < 8; j++)
          {           
            cbcomp = (int32_t)(*pChrom);
 8006ffa:	7825      	ldrb	r5, [r4, #0]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8006ffc:	4b32      	ldr	r3, [pc, #200]	; (80070c8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
 8006ffe:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007002:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
            
            crcomp = (int32_t)(*(pChrom + 64));
 8007006:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800700a:	f503 6688 	add.w	r6, r3, #1088	; 0x440
 800700e:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8007012:	f503 6c04 	add.w	ip, r3, #2112	; 0x840
 8007016:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 800701a:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 800701e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007022:	441a      	add	r2, r3
                      
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
            ycomp = (int32_t)(*(pLum +j));
 8007024:	f818 3000 	ldrb.w	r3, [r8, r0]
            
            *(__IO uint32_t *)pOutAddr = 
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 8007028:	441e      	add	r6, r3
 800702a:	f506 7680 	add.w	r6, r6, #256	; 0x100
 800702e:	4d27      	ldr	r5, [pc, #156]	; (80070cc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
 8007030:	5dae      	ldrb	r6, [r5, r6]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 8007032:	eb03 4222 	add.w	r2, r3, r2, asr #16
 8007036:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800703a:	5caa      	ldrb	r2, [r5, r2]
 800703c:	0212      	lsls	r2, r2, #8
              (CLAMP(ycomp + c_red) << JPEG_RED_OFFSET)     | \
 800703e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
              (CLAMP(ycomp + c_blue) << JPEG_BLUE_OFFSET);       
 8007042:	440b      	add	r3, r1
 8007044:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007048:	5ceb      	ldrb	r3, [r5, r3]
              (CLAMP( ycomp + c_green) << JPEG_GREEN_OFFSET) | \
 800704a:	431e      	orrs	r6, r3
            *(__IO uint32_t *)pOutAddr = 
 800704c:	f847 6b04 	str.w	r6, [r7], #4
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
          
            pChrom++;
 8007050:	3401      	adds	r4, #1
          for(j=0; j < 8; j++)
 8007052:	3001      	adds	r0, #1
 8007054:	2807      	cmp	r0, #7
 8007056:	d9d0      	bls.n	8006ffa <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x1a>
          }
          pLum += 8;
 8007058:	f108 0808 	add.w	r8, r8, #8

        refline += JPEG_ConvertorParams.ScaledWidth;          
 800705c:	44d9      	add	r9, fp
    for(i= 0; i <  8; i++)
 800705e:	f10e 0e01 	add.w	lr, lr, #1
 8007062:	f1be 0f07 	cmp.w	lr, #7
 8007066:	d808      	bhi.n	800707a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x9a>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8007068:	4b17      	ldr	r3, [pc, #92]	; (80070c8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	454b      	cmp	r3, r9
 800706e:	d9f6      	bls.n	800705e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7e>
        pOutAddr = pOutBuffer+ refline;
 8007070:	9b01      	ldr	r3, [sp, #4]
 8007072:	eb03 0709 	add.w	r7, r3, r9
          for(j=0; j < 8; j++)
 8007076:	2000      	movs	r0, #0
 8007078:	e7ec      	b.n	8007054 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x74>
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 800707a:	9b00      	ldr	r3, [sp, #0]
 800707c:	33c0      	adds	r3, #192	; 0xc0
 800707e:	9300      	str	r3, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 8007080:	9b02      	ldr	r3, [sp, #8]
 8007082:	9a03      	ldr	r2, [sp, #12]
 8007084:	4413      	add	r3, r2
 8007086:	4553      	cmp	r3, sl
 8007088:	d918      	bls.n	80070bc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xdc>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800708a:	ea4f 09ca 	mov.w	r9, sl, lsl #3
 800708e:	490e      	ldr	r1, [pc, #56]	; (80070c8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
 8007090:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8007092:	fbb9 f2f3 	udiv	r2, r9, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8007096:	fb03 9912 	mls	r9, r3, r2, r9
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800709a:	f8d1 b028 	ldr.w	fp, [r1, #40]	; 0x28
 800709e:	fb0b f202 	mul.w	r2, fp, r2
 80070a2:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80070a6:	eb09 09c2 	add.w	r9, r9, r2, lsl #3
    currentMCU++;   
 80070aa:	f10a 0a01 	add.w	sl, sl, #1
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 80070ae:	9b00      	ldr	r3, [sp, #0]
 80070b0:	f103 0440 	add.w	r4, r3, #64	; 0x40
    pLum = pInBuffer;
 80070b4:	4698      	mov	r8, r3
    for(i= 0; i <  8; i++)
 80070b6:	f04f 0e00 	mov.w	lr, #0
 80070ba:	e7d2      	b.n	8007062 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x82>
  }
  return numberMCU;
}
 80070bc:	9802      	ldr	r0, [sp, #8]
 80070be:	b005      	add	sp, #20
 80070c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c4:	aaaaaaab 	.word	0xaaaaaaab
 80070c8:	2000039c 	.word	0x2000039c
 80070cc:	08009158 	.word	0x08009158

080070d0 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80070d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070d4:	4681      	mov	r9, r0
 80070d6:	4692      	mov	sl, r2

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 80070d8:	0998      	lsrs	r0, r3, #6
  currentMCU = BlockIndex;
 80070da:	4690      	mov	r8, r2
  
  while(currentMCU < (numberMCU + BlockIndex))
 80070dc:	e01a      	b.n	8007114 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x44>
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
      {  
        for(j=0; j < 8; j++)
        { 
          ySample =   (uint32_t)(*pLum);
 80070de:	f817 4b01 	ldrb.w	r4, [r7], #1

#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
          *(__IO uint32_t *)pOutAddr = ySample |  (ySample << 8) | (ySample << 16);
 80070e2:	ea44 2304 	orr.w	r3, r4, r4, lsl #8
 80070e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80070ea:	f846 3b04 	str.w	r3, [r6], #4
        for(j=0; j < 8; j++)
 80070ee:	3501      	adds	r5, #1
 80070f0:	2d07      	cmp	r5, #7
 80070f2:	d9f4      	bls.n	80070de <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xe>
          
          pOutAddr += JPEG_BYTES_PER_PIXEL;
          pLum++;
        }

        refline += JPEG_ConvertorParams.ScaledWidth;        
 80070f4:	4494      	add	ip, r2
    for(i= 0; i <  8; i++)
 80070f6:	f10e 0e01 	add.w	lr, lr, #1
 80070fa:	f1be 0f07 	cmp.w	lr, #7
 80070fe:	d807      	bhi.n	8007110 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x40>
      pOutAddr = pOutBuffer + refline;
 8007100:	eb01 060c 	add.w	r6, r1, ip
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8007104:	4b11      	ldr	r3, [pc, #68]	; (800714c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	4563      	cmp	r3, ip
 800710a:	d9f4      	bls.n	80070f6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
        for(j=0; j < 8; j++)
 800710c:	2500      	movs	r5, #0
 800710e:	e7ef      	b.n	80070f0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x20>
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 8007110:	f109 0940 	add.w	r9, r9, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
 8007114:	eb00 030a 	add.w	r3, r0, sl
 8007118:	4543      	cmp	r3, r8
 800711a:	d914      	bls.n	8007146 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x76>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800711c:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 8007120:	4a0a      	ldr	r2, [pc, #40]	; (800714c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
 8007122:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007124:	fbbc f4f3 	udiv	r4, ip, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8007128:	fb03 cc14 	mls	ip, r3, r4, ip
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800712c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800712e:	fb02 f404 	mul.w	r4, r2, r4
 8007132:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007136:	eb0c 0cc4 	add.w	ip, ip, r4, lsl #3
    currentMCU++;
 800713a:	f108 0801 	add.w	r8, r8, #1
    pLum = pInBuffer;
 800713e:	464f      	mov	r7, r9
    for(i= 0; i <  8; i++)
 8007140:	f04f 0e00 	mov.w	lr, #0
 8007144:	e7d9      	b.n	80070fa <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
 8007146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800714a:	bf00      	nop
 800714c:	2000039c 	.word	0x2000039c

08007150 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8007150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007154:	b085      	sub	sp, #20
 8007156:	9203      	str	r2, [sp, #12]
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8007158:	0a1b      	lsrs	r3, r3, #8
 800715a:	9302      	str	r3, [sp, #8]
  currentMCU = BlockIndex;
 800715c:	4691      	mov	r9, r2
 800715e:	468a      	mov	sl, r1
  

  while(currentMCU < (numberMCU + BlockIndex))
 8007160:	e035      	b.n	80071ce <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7e>
      {
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
 8007162:	f894 c0c0 	ldrb.w	ip, [r4, #192]	; 0xc0
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8007166:	7823      	ldrb	r3, [r4, #0]
 8007168:	fb0c f303 	mul.w	r3, ip, r3
 800716c:	4a27      	ldr	r2, [pc, #156]	; (800720c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xbc>)
 800716e:	fb82 b703 	smull	fp, r7, r2, r3
 8007172:	443b      	add	r3, r7
 8007174:	11df      	asrs	r7, r3, #7
            
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8007176:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800717a:	fb0c f303 	mul.w	r3, ip, r3
 800717e:	fb82 1b03 	smull	r1, fp, r2, r3
 8007182:	445b      	add	r3, fp
 8007184:	11db      	asrs	r3, r3, #7
            
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 8007186:	f894 b080 	ldrb.w	fp, [r4, #128]	; 0x80
 800718a:	fb0c fc0b 	mul.w	ip, ip, fp
 800718e:	fb82 120c 	smull	r1, r2, r2, ip
 8007192:	4462      	add	r2, ip
                      
#if (JPEG_RGB_FORMAT == JPEG_ARGB8888)
          
          *(__IO uint32_t *)pOutAddr = 
            (c_red << JPEG_RED_OFFSET) | \
            (c_green << JPEG_GREEN_OFFSET) | \
 8007194:	021b      	lsls	r3, r3, #8
            (c_red << JPEG_RED_OFFSET) | \
 8007196:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
            (c_green << JPEG_GREEN_OFFSET) | \
 800719a:	ea43 13e2 	orr.w	r3, r3, r2, asr #7
          *(__IO uint32_t *)pOutAddr = 
 800719e:	f846 3b04 	str.w	r3, [r6], #4
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
          
            pChrom++;
 80071a2:	3401      	adds	r4, #1
          for(j=0; j < 8; j++)
 80071a4:	3501      	adds	r5, #1
 80071a6:	2d07      	cmp	r5, #7
 80071a8:	d9db      	bls.n	8007162 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x12>
 80071aa:	9901      	ldr	r1, [sp, #4]
          }

        refline += JPEG_ConvertorParams.ScaledWidth;          
 80071ac:	4488      	add	r8, r1
    for(i= 0; i <  8; i++)
 80071ae:	f10e 0e01 	add.w	lr, lr, #1
 80071b2:	f1be 0f07 	cmp.w	lr, #7
 80071b6:	d808      	bhi.n	80071ca <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x7a>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80071b8:	4b15      	ldr	r3, [pc, #84]	; (8007210 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xc0>)
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	4543      	cmp	r3, r8
 80071be:	d9f6      	bls.n	80071ae <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x5e>
        pOutAddr = pOutBuffer+ refline;        
 80071c0:	eb0a 0608 	add.w	r6, sl, r8
          for(j=0; j < 8; j++)
 80071c4:	2500      	movs	r5, #0
 80071c6:	9101      	str	r1, [sp, #4]
 80071c8:	e7ed      	b.n	80071a6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x56>
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 80071ca:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
 80071ce:	9b02      	ldr	r3, [sp, #8]
 80071d0:	9a03      	ldr	r2, [sp, #12]
 80071d2:	4413      	add	r3, r2
 80071d4:	454b      	cmp	r3, r9
 80071d6:	d914      	bls.n	8007202 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb2>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80071d8:	ea4f 08c9 	mov.w	r8, r9, lsl #3
 80071dc:	490c      	ldr	r1, [pc, #48]	; (8007210 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xc0>)
 80071de:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80071e0:	fbb8 f2f3 	udiv	r2, r8, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80071e4:	fb03 8812 	mls	r8, r3, r2, r8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80071e8:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80071ea:	fb01 f202 	mul.w	r2, r1, r2
 80071ee:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80071f2:	eb08 08c2 	add.w	r8, r8, r2, lsl #3
    currentMCU++;
 80071f6:	f109 0901 	add.w	r9, r9, #1
    pChrom = pInBuffer;
 80071fa:	4604      	mov	r4, r0
    for(i= 0; i <  8; i++)
 80071fc:	f04f 0e00 	mov.w	lr, #0
 8007200:	e7d7      	b.n	80071b2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x62>
  }
  return numberMCU;
}
 8007202:	9802      	ldr	r0, [sp, #8]
 8007204:	b005      	add	sp, #20
 8007206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720a:	bf00      	nop
 800720c:	80808081 	.word	0x80808081
 8007210:	2000039c 	.word	0x2000039c

08007214 <JPEG_InitPostProcColorTables>:
  */
void JPEG_InitPostProcColorTables(void)
{
  int32_t index, i; 
    
  for (i = 0; i <= 255; i++) 
 8007214:	2100      	movs	r1, #0
 8007216:	29ff      	cmp	r1, #255	; 0xff
 8007218:	dc1f      	bgt.n	800725a <JPEG_InitPostProcColorTables+0x46>
  {
    index = (i * 2) - 256;
 800721a:	f1a1 0080 	sub.w	r0, r1, #128	; 0x80
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800721e:	4b0f      	ldr	r3, [pc, #60]	; (800725c <JPEG_InitPostProcColorTables+0x48>)
 8007220:	fb03 f300 	mul.w	r3, r3, r0
 8007224:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007228:	141b      	asrs	r3, r3, #16
 800722a:	4a0d      	ldr	r2, [pc, #52]	; (8007260 <JPEG_InitPostProcColorTables+0x4c>)
 800722c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007230:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8007234:	4b0b      	ldr	r3, [pc, #44]	; (8007264 <JPEG_InitPostProcColorTables+0x50>)
 8007236:	fb03 f300 	mul.w	r3, r3, r0
 800723a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800723e:	141b      	asrs	r3, r3, #16
 8007240:	6413      	str	r3, [r2, #64]	; 0x40
    
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8007242:	4b09      	ldr	r3, [pc, #36]	; (8007268 <JPEG_InitPostProcColorTables+0x54>)
 8007244:	fb03 f300 	mul.w	r3, r3, r0
 8007248:	f8c2 3840 	str.w	r3, [r2, #2112]	; 0x840
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800724c:	4b07      	ldr	r3, [pc, #28]	; (800726c <JPEG_InitPostProcColorTables+0x58>)
 800724e:	fb03 f000 	mul.w	r0, r3, r0
 8007252:	f8c2 0c40 	str.w	r0, [r2, #3136]	; 0xc40
  for (i = 0; i <= 255; i++) 
 8007256:	3101      	adds	r1, #1
 8007258:	e7dd      	b.n	8007216 <JPEG_InitPostProcColorTables+0x2>
  }  
}
 800725a:	4770      	bx	lr
 800725c:	000166e8 	.word	0x000166e8
 8007260:	2000039c 	.word	0x2000039c
 8007264:	0001c5a0 	.word	0x0001c5a0
 8007268:	ffff4930 	.word	0xffff4930
 800726c:	ffffa7e8 	.word	0xffffa7e8

08007270 <JPEG_GetDecodeColorConvertFunc>:
{
 8007270:	b4f0      	push	{r4, r5, r6, r7}
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8007272:	6807      	ldr	r7, [r0, #0]
 8007274:	4c3f      	ldr	r4, [pc, #252]	; (8007374 <JPEG_GetDecodeColorConvertFunc+0x104>)
 8007276:	6027      	str	r7, [r4, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8007278:	68c3      	ldr	r3, [r0, #12]
 800727a:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800727c:	6885      	ldr	r5, [r0, #8]
 800727e:	60e5      	str	r5, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8007280:	fb05 f603 	mul.w	r6, r5, r3
 8007284:	00b6      	lsls	r6, r6, #2
 8007286:	6126      	str	r6, [r4, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 8007288:	6840      	ldr	r0, [r0, #4]
 800728a:	6060      	str	r0, [r4, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800728c:	2f10      	cmp	r7, #16
 800728e:	d02c      	beq.n	80072ea <JPEG_GetDecodeColorConvertFunc+0x7a>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8007290:	2f00      	cmp	r7, #0
 8007292:	d15b      	bne.n	800734c <JPEG_GetDecodeColorConvertFunc+0xdc>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8007294:	4838      	ldr	r0, [pc, #224]	; (8007378 <JPEG_GetDecodeColorConvertFunc+0x108>)
 8007296:	6008      	str	r0, [r1, #0]
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8007298:	f003 0107 	and.w	r1, r3, #7
 800729c:	4835      	ldr	r0, [pc, #212]	; (8007374 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800729e:	6141      	str	r1, [r0, #20]
    if(JPEG_ConvertorParams.LineOffset != 0)
 80072a0:	b111      	cbz	r1, 80072a8 <JPEG_GetDecodeColorConvertFunc+0x38>
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 80072a2:	f1c1 0108 	rsb	r1, r1, #8
 80072a6:	6141      	str	r1, [r0, #20]
    JPEG_ConvertorParams.H_factor = 8;
 80072a8:	4932      	ldr	r1, [pc, #200]	; (8007374 <JPEG_GetDecodeColorConvertFunc+0x104>)
 80072aa:	2008      	movs	r0, #8
 80072ac:	61c8      	str	r0, [r1, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 80072ae:	6208      	str	r0, [r1, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 80072b0:	4930      	ldr	r1, [pc, #192]	; (8007374 <JPEG_GetDecodeColorConvertFunc+0x104>)
 80072b2:	6948      	ldr	r0, [r1, #20]
 80072b4:	4418      	add	r0, r3
 80072b6:	6248      	str	r0, [r1, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 80072b8:	0098      	lsls	r0, r3, #2
 80072ba:	6288      	str	r0, [r1, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 80072bc:	69c9      	ldr	r1, [r1, #28]
 80072be:	fbb3 f0f1 	udiv	r0, r3, r1
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 80072c2:	fb01 3110 	mls	r1, r1, r0, r3
 80072c6:	b101      	cbz	r1, 80072ca <JPEG_GetDecodeColorConvertFunc+0x5a>
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 80072c8:	3001      	adds	r0, #1
  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 80072ca:	4b2a      	ldr	r3, [pc, #168]	; (8007374 <JPEG_GetDecodeColorConvertFunc+0x104>)
 80072cc:	6a19      	ldr	r1, [r3, #32]
 80072ce:	fbb5 f3f1 	udiv	r3, r5, r1
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 80072d2:	fb01 5513 	mls	r5, r1, r3, r5
 80072d6:	b105      	cbz	r5, 80072da <JPEG_GetDecodeColorConvertFunc+0x6a>
    vMCU++; /*+1 for vertical incomplete MCU */                
 80072d8:	3301      	adds	r3, #1
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 80072da:	fb03 f300 	mul.w	r3, r3, r0
 80072de:	4925      	ldr	r1, [pc, #148]	; (8007374 <JPEG_GetDecodeColorConvertFunc+0x104>)
 80072e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 80072e2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80072e4:	2000      	movs	r0, #0
}
 80072e6:	bcf0      	pop	{r4, r5, r6, r7}
 80072e8:	4770      	bx	lr
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80072ea:	2801      	cmp	r0, #1
 80072ec:	d010      	beq.n	8007310 <JPEG_GetDecodeColorConvertFunc+0xa0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80072ee:	2802      	cmp	r0, #2
 80072f0:	d01c      	beq.n	800732c <JPEG_GetDecodeColorConvertFunc+0xbc>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 80072f2:	4822      	ldr	r0, [pc, #136]	; (800737c <JPEG_GetDecodeColorConvertFunc+0x10c>)
 80072f4:	6008      	str	r0, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 80072f6:	f003 0107 	and.w	r1, r3, #7
 80072fa:	481e      	ldr	r0, [pc, #120]	; (8007374 <JPEG_GetDecodeColorConvertFunc+0x104>)
 80072fc:	6141      	str	r1, [r0, #20]
      if(JPEG_ConvertorParams.LineOffset != 0)
 80072fe:	b111      	cbz	r1, 8007306 <JPEG_GetDecodeColorConvertFunc+0x96>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8007300:	f1c1 0108 	rsb	r1, r1, #8
 8007304:	6141      	str	r1, [r0, #20]
      JPEG_ConvertorParams.H_factor = 8;
 8007306:	491b      	ldr	r1, [pc, #108]	; (8007374 <JPEG_GetDecodeColorConvertFunc+0x104>)
 8007308:	2008      	movs	r0, #8
 800730a:	61c8      	str	r0, [r1, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800730c:	6208      	str	r0, [r1, #32]
 800730e:	e7cf      	b.n	80072b0 <JPEG_GetDecodeColorConvertFunc+0x40>
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8007310:	481b      	ldr	r0, [pc, #108]	; (8007380 <JPEG_GetDecodeColorConvertFunc+0x110>)
 8007312:	6008      	str	r0, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8007314:	f003 010f 	and.w	r1, r3, #15
 8007318:	6161      	str	r1, [r4, #20]
      if(JPEG_ConvertorParams.LineOffset != 0)
 800731a:	b111      	cbz	r1, 8007322 <JPEG_GetDecodeColorConvertFunc+0xb2>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800731c:	f1c1 0110 	rsb	r1, r1, #16
 8007320:	6161      	str	r1, [r4, #20]
      JPEG_ConvertorParams.H_factor = 16;
 8007322:	4914      	ldr	r1, [pc, #80]	; (8007374 <JPEG_GetDecodeColorConvertFunc+0x104>)
 8007324:	2010      	movs	r0, #16
 8007326:	61c8      	str	r0, [r1, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 8007328:	6208      	str	r0, [r1, #32]
 800732a:	e7c1      	b.n	80072b0 <JPEG_GetDecodeColorConvertFunc+0x40>
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 800732c:	4815      	ldr	r0, [pc, #84]	; (8007384 <JPEG_GetDecodeColorConvertFunc+0x114>)
 800732e:	6008      	str	r0, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8007330:	f003 010f 	and.w	r1, r3, #15
 8007334:	480f      	ldr	r0, [pc, #60]	; (8007374 <JPEG_GetDecodeColorConvertFunc+0x104>)
 8007336:	6141      	str	r1, [r0, #20]
      if(JPEG_ConvertorParams.LineOffset != 0)
 8007338:	b111      	cbz	r1, 8007340 <JPEG_GetDecodeColorConvertFunc+0xd0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800733a:	f1c1 0110 	rsb	r1, r1, #16
 800733e:	6141      	str	r1, [r0, #20]
      JPEG_ConvertorParams.H_factor = 16;
 8007340:	490c      	ldr	r1, [pc, #48]	; (8007374 <JPEG_GetDecodeColorConvertFunc+0x104>)
 8007342:	2010      	movs	r0, #16
 8007344:	61c8      	str	r0, [r1, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8007346:	2008      	movs	r0, #8
 8007348:	6208      	str	r0, [r1, #32]
 800734a:	e7b1      	b.n	80072b0 <JPEG_GetDecodeColorConvertFunc+0x40>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 800734c:	2f30      	cmp	r7, #48	; 0x30
 800734e:	d10e      	bne.n	800736e <JPEG_GetDecodeColorConvertFunc+0xfe>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8007350:	480d      	ldr	r0, [pc, #52]	; (8007388 <JPEG_GetDecodeColorConvertFunc+0x118>)
 8007352:	6008      	str	r0, [r1, #0]
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8007354:	f003 0107 	and.w	r1, r3, #7
 8007358:	4806      	ldr	r0, [pc, #24]	; (8007374 <JPEG_GetDecodeColorConvertFunc+0x104>)
 800735a:	6141      	str	r1, [r0, #20]
    if(JPEG_ConvertorParams.LineOffset != 0)
 800735c:	b111      	cbz	r1, 8007364 <JPEG_GetDecodeColorConvertFunc+0xf4>
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800735e:	f1c1 0108 	rsb	r1, r1, #8
 8007362:	6141      	str	r1, [r0, #20]
    JPEG_ConvertorParams.H_factor = 8;
 8007364:	4903      	ldr	r1, [pc, #12]	; (8007374 <JPEG_GetDecodeColorConvertFunc+0x104>)
 8007366:	2008      	movs	r0, #8
 8007368:	61c8      	str	r0, [r1, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 800736a:	6208      	str	r0, [r1, #32]
 800736c:	e7a0      	b.n	80072b0 <JPEG_GetDecodeColorConvertFunc+0x40>
    return HAL_ERROR; /* Color space Not supported*/
 800736e:	2001      	movs	r0, #1
 8007370:	e7b9      	b.n	80072e6 <JPEG_GetDecodeColorConvertFunc+0x76>
 8007372:	bf00      	nop
 8007374:	2000039c 	.word	0x2000039c
 8007378:	080070d1 	.word	0x080070d1
 800737c:	08006fe1 	.word	0x08006fe1
 8007380:	08006cf5 	.word	0x08006cf5
 8007384:	08006ead 	.word	0x08006ead
 8007388:	08007151 	.word	0x08007151

0800738c <JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitColorTables(void)
{
 800738c:	b508      	push	{r3, lr}
  JPEG_InitPreProcColorTables();
  JPEG_Init_MCU_LUT();
#endif

#if (USE_JPEG_DECODER == 1)
  JPEG_InitPostProcColorTables();
 800738e:	f7ff ff41 	bl	8007214 <JPEG_InitPostProcColorTables>
#endif

}
 8007392:	bd08      	pop	{r3, pc}

08007394 <USB_Audio_Init>:
#include "filter.h"
#include "usb.h"
#include "ui.h"
#include "usbd_audio.h"

void USB_Audio_Init(void){
 8007394:	b508      	push	{r3, lr}
	USBD_Setup();
 8007396:	f000 fb09 	bl	80079ac <USBD_Setup>

}
 800739a:	bd08      	pop	{r3, pc}

0800739c <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Manages the DMA full Transfer complete event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 800739c:	b508      	push	{r3, lr}
	if(ui_data.usb_selection_state == USB_STATE_OFF){
 800739e:	4b06      	ldr	r3, [pc, #24]	; (80073b8 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x1c>)
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	b91b      	cbnz	r3, 80073ac <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>
		 audio_line_out_buffer_state = BUFFER_OFFSET_FULL;
 80073a4:	4b05      	ldr	r3, [pc, #20]	; (80073bc <BSP_AUDIO_OUT_TransferComplete_CallBack+0x20>)
 80073a6:	2202      	movs	r2, #2
 80073a8:	601a      	str	r2, [r3, #0]
	} else {
		USBD_AUDIO_Sync(&USBD_Device, AUDIO_OFFSET_FULL);

	}
}
 80073aa:	bd08      	pop	{r3, pc}
		USBD_AUDIO_Sync(&USBD_Device, AUDIO_OFFSET_FULL);
 80073ac:	2102      	movs	r1, #2
 80073ae:	4804      	ldr	r0, [pc, #16]	; (80073c0 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x24>)
 80073b0:	f7fe ff29 	bl	8006206 <USBD_AUDIO_Sync>
}
 80073b4:	e7f9      	b.n	80073aa <BSP_AUDIO_OUT_TransferComplete_CallBack+0xe>
 80073b6:	bf00      	nop
 80073b8:	20001ad0 	.word	0x20001ad0
 80073bc:	20003e1c 	.word	0x20003e1c
 80073c0:	20003b4c 	.word	0x20003b4c

080073c4 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 80073c4:	b508      	push	{r3, lr}
	if(ui_data.usb_selection_state == USB_STATE_OFF){
 80073c6:	4b06      	ldr	r3, [pc, #24]	; (80073e0 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x1c>)
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	b91b      	cbnz	r3, 80073d4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x10>
		 audio_line_out_buffer_state = BUFFER_OFFSET_FULL;
 80073cc:	4b05      	ldr	r3, [pc, #20]	; (80073e4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 80073ce:	2202      	movs	r2, #2
 80073d0:	601a      	str	r2, [r3, #0]
	} else {
		USBD_AUDIO_Sync(&USBD_Device, AUDIO_OFFSET_HALF);
	}
}
 80073d2:	bd08      	pop	{r3, pc}
		USBD_AUDIO_Sync(&USBD_Device, AUDIO_OFFSET_HALF);
 80073d4:	2101      	movs	r1, #1
 80073d6:	4804      	ldr	r0, [pc, #16]	; (80073e8 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 80073d8:	f7fe ff15 	bl	8006206 <USBD_AUDIO_Sync>
}
 80073dc:	e7f9      	b.n	80073d2 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0xe>
 80073de:	bf00      	nop
 80073e0:	20001ad0 	.word	0x20001ad0
 80073e4:	20003e1c 	.word	0x20003e1c
 80073e8:	20003b4c 	.word	0x20003b4c

080073ec <BSP_AUDIO_IN_Error_CallBack>:
   * @param  None
   * @retval None
   */
void BSP_AUDIO_IN_Error_CallBack(void){
	/* handle errors */
 }
 80073ec:	4770      	bx	lr
	...

080073f0 <Calc_FX1_Sample>:
    for (int i = 0; i < Buffer_Size; i++) {
    	pBuffer[i] = Calc_FX1_Sample(pBuffer[i]);
    }
}

int Calc_FX1_Sample(int inSample) {
 80073f0:	ee04 0a90 	vmov	s9, r0
    float inSampleF = (float)inSample;
 80073f4:	eef8 4ae4 	vcvt.f32.s32	s9, s9
    float outdata = 0;

    for (int i=0;i < FILTER_TAP_NUM_FX1; i++) {
 80073f8:	2100      	movs	r1, #0
    float outdata = 0;
 80073fa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007464 <Calc_FX1_Sample+0x74>
    for (int i=0;i < FILTER_TAP_NUM_FX1; i++) {
 80073fe:	e017      	b.n	8007430 <Calc_FX1_Sample+0x40>
        outdata += (firdata_fx1[i]*filter_taps_fx1[firptr_fx1[i]]);
 8007400:	4b19      	ldr	r3, [pc, #100]	; (8007468 <Calc_FX1_Sample+0x78>)
 8007402:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007406:	ed93 6a00 	vldr	s12, [r3]
 800740a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 800740e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8007412:	4816      	ldr	r0, [pc, #88]	; (800746c <Calc_FX1_Sample+0x7c>)
 8007414:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8007418:	ed90 5b00 	vldr	d5, [r0]
 800741c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8007420:	ee06 7b05 	vmla.f64	d7, d6, d5
 8007424:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        firptr_fx1[i]++;
 8007428:	3201      	adds	r2, #1
 800742a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    for (int i=0;i < FILTER_TAP_NUM_FX1; i++) {
 800742e:	3101      	adds	r1, #1
 8007430:	293e      	cmp	r1, #62	; 0x3e
 8007432:	dde5      	ble.n	8007400 <Calc_FX1_Sample+0x10>
    }

    firdata_fx1[fir_w_ptr_fx1] = inSampleF;
 8007434:	4a0c      	ldr	r2, [pc, #48]	; (8007468 <Calc_FX1_Sample+0x78>)
 8007436:	f8d2 31f8 	ldr.w	r3, [r2, #504]	; 0x1f8
 800743a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800743e:	edc1 4a00 	vstr	s9, [r1]
    firptr_fx1[fir_w_ptr_fx1] = 0;
 8007442:	2000      	movs	r0, #0
 8007444:	f8c1 00fc 	str.w	r0, [r1, #252]	; 0xfc
    fir_w_ptr_fx1++;
 8007448:	3301      	adds	r3, #1
 800744a:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
    if (fir_w_ptr_fx1 == FILTER_TAP_NUM_FX1) fir_w_ptr_fx1=0;
 800744e:	2b3f      	cmp	r3, #63	; 0x3f
 8007450:	d004      	beq.n	800745c <Calc_FX1_Sample+0x6c>

    return (int) outdata;
}
 8007452:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8007456:	ee17 0a90 	vmov	r0, s15
 800745a:	4770      	bx	lr
    if (fir_w_ptr_fx1 == FILTER_TAP_NUM_FX1) fir_w_ptr_fx1=0;
 800745c:	f8c2 01f8 	str.w	r0, [r2, #504]	; 0x1f8
 8007460:	e7f7      	b.n	8007452 <Calc_FX1_Sample+0x62>
 8007462:	bf00      	nop
 8007464:	00000000 	.word	0x00000000
 8007468:	200013dc 	.word	0x200013dc
 800746c:	08009458 	.word	0x08009458

08007470 <Calc_FX1_Buffer>:
void Calc_FX1_Buffer(uint16_t* pBuffer, uint16_t Buffer_Size) {
 8007470:	b570      	push	{r4, r5, r6, lr}
 8007472:	4605      	mov	r5, r0
 8007474:	460e      	mov	r6, r1
    for (int i = 0; i < Buffer_Size; i++) {
 8007476:	2400      	movs	r4, #0
 8007478:	42a6      	cmp	r6, r4
 800747a:	dd07      	ble.n	800748c <Calc_FX1_Buffer+0x1c>
    	pBuffer[i] = Calc_FX1_Sample(pBuffer[i]);
 800747c:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
 8007480:	f7ff ffb6 	bl	80073f0 <Calc_FX1_Sample>
 8007484:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
    for (int i = 0; i < Buffer_Size; i++) {
 8007488:	3401      	adds	r4, #1
 800748a:	e7f5      	b.n	8007478 <Calc_FX1_Buffer+0x8>
}
 800748c:	bd70      	pop	{r4, r5, r6, pc}

0800748e <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 800748e:	b500      	push	{lr}
 8007490:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007492:	2301      	movs	r3, #1
 8007494:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800749a:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800749c:	2302      	movs	r3, #2
 800749e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80074a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80074a4:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 80074a6:	2219      	movs	r2, #25
 80074a8:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 80074aa:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80074ae:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80074b0:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80074b2:	2309      	movs	r3, #9
 80074b4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 80074b6:	2307      	movs	r3, #7
 80074b8:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80074ba:	4668      	mov	r0, sp
 80074bc:	f7fc f886 	bl	80035cc <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 80074c0:	b100      	cbz	r0, 80074c4 <SystemClock_Config+0x36>
    while(1) { ; }
 80074c2:	e7fe      	b.n	80074c2 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 80074c4:	f7fc f844 	bl	8003550 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 80074c8:	b100      	cbz	r0, 80074cc <SystemClock_Config+0x3e>
    while(1) { ; }
 80074ca:	e7fe      	b.n	80074ca <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80074cc:	230f      	movs	r3, #15
 80074ce:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80074d0:	2302      	movs	r3, #2
 80074d2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80074d4:	2300      	movs	r3, #0
 80074d6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80074d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80074dc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80074de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074e2:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80074e4:	2107      	movs	r1, #7
 80074e6:	a80d      	add	r0, sp, #52	; 0x34
 80074e8:	f7fc fac8 	bl	8003a7c <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 80074ec:	b100      	cbz	r0, 80074f0 <SystemClock_Config+0x62>
    while(1) { ; }
 80074ee:	e7fe      	b.n	80074ee <SystemClock_Config+0x60>
  }
}
 80074f0:	b013      	add	sp, #76	; 0x4c
 80074f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080074f8 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 80074f8:	b410      	push	{r4}
  __ASM volatile ("dsb 0xF":::"memory");
 80074fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80074fe:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8007502:	4b1a      	ldr	r3, [pc, #104]	; (800756c <CPU_CACHE_Enable+0x74>)
 8007504:	2100      	movs	r1, #0
 8007506:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800750a:	695a      	ldr	r2, [r3, #20]
 800750c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007510:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007512:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007516:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 800751a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800751e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8007522:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8007526:	f3c0 324e 	ubfx	r2, r0, #13, #15
 800752a:	e000      	b.n	800752e <CPU_CACHE_Enable+0x36>
    } while(sets--);
 800752c:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800752e:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007532:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8007536:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 800753a:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 800753e:	4c0b      	ldr	r4, [pc, #44]	; (800756c <CPU_CACHE_Enable+0x74>)
 8007540:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
 8007544:	460b      	mov	r3, r1
 8007546:	3901      	subs	r1, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1f2      	bne.n	8007532 <CPU_CACHE_Enable+0x3a>
    } while(sets--);
 800754c:	1e53      	subs	r3, r2, #1
 800754e:	2a00      	cmp	r2, #0
 8007550:	d1ec      	bne.n	800752c <CPU_CACHE_Enable+0x34>
 8007552:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8007556:	6963      	ldr	r3, [r4, #20]
 8007558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800755c:	6163      	str	r3, [r4, #20]
 800755e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007562:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8007566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	e000ed00 	.word	0xe000ed00

08007570 <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 8007570:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 8007572:	f7ff ffc1 	bl	80074f8 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 8007576:	f7f9 ff89 	bl	800148c <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 800757a:	f7ff ff88 	bl	800748e <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 800757e:	4a04      	ldr	r2, [pc, #16]	; (8007590 <Sys_Init+0x20>)
 8007580:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8007584:	4803      	ldr	r0, [pc, #12]	; (8007594 <Sys_Init+0x24>)
 8007586:	f000 f973 	bl	8007870 <initUart>

	/* Initialization for setting up JPEG Color Conversion */
	JPEG_InitColorTables();
 800758a:	f7ff feff 	bl	800738c <JPEG_InitColorTables>

}
 800758e:	bd08      	pop	{r3, pc}
 8007590:	40011000 	.word	0x40011000
 8007594:	20001adc 	.word	0x20001adc

08007598 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 8007598:	b508      	push	{r3, lr}
  HAL_IncTick();
 800759a:	f7f9 ff83 	bl	80014a4 <HAL_IncTick>
}
 800759e:	bd08      	pop	{r3, pc}

080075a0 <Timer_Init>:

//
//
// -- Timer Initialization and Callbacks --
//
void Timer_Init() {
 80075a0:	b510      	push	{r4, lr}
 80075a2:	b082      	sub	sp, #8
	__HAL_RCC_TIM7_CLK_ENABLE(); // Clock Enable
 80075a4:	4b0e      	ldr	r3, [pc, #56]	; (80075e0 <Timer_Init+0x40>)
 80075a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075a8:	f042 0220 	orr.w	r2, r2, #32
 80075ac:	641a      	str	r2, [r3, #64]	; 0x40
 80075ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b0:	f003 0320 	and.w	r3, r3, #32
 80075b4:	9301      	str	r3, [sp, #4]
 80075b6:	9b01      	ldr	r3, [sp, #4]
	htim.Instance = TIM7;
 80075b8:	4c0a      	ldr	r4, [pc, #40]	; (80075e4 <Timer_Init+0x44>)
 80075ba:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <Timer_Init+0x48>)
 80075bc:	6023      	str	r3, [r4, #0]
	htim.Init.Prescaler = 1079U; //108MHz/1080 = 100000Hz
 80075be:	f240 4337 	movw	r3, #1079	; 0x437
 80075c2:	6063      	str	r3, [r4, #4]
	htim.Init.Period = 4999U; //100000Hz/5000 = 20Hz
 80075c4:	f241 3387 	movw	r3, #4999	; 0x1387
 80075c8:	60e3      	str	r3, [r4, #12]
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80075ca:	2037      	movs	r0, #55	; 0x37
 80075cc:	f7f9 ffca 	bl	8001564 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Init(&htim);
 80075d0:	4620      	mov	r0, r4
 80075d2:	f7fd fce3 	bl	8004f9c <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim);
 80075d6:	4620      	mov	r0, r4
 80075d8:	f7fd fb7c 	bl	8004cd4 <HAL_TIM_Base_Start_IT>
}
 80075dc:	b002      	add	sp, #8
 80075de:	bd10      	pop	{r4, pc}
 80075e0:	40023800 	.word	0x40023800
 80075e4:	20005e2c 	.word	0x20005e2c
 80075e8:	40001400 	.word	0x40001400

080075ec <main>:
int main(void) {
 80075ec:	b508      	push	{r3, lr}
	Sys_Init(); // Initialize STM32 System
 80075ee:	f7ff ffbf 	bl	8007570 <Sys_Init>
	Timer_Init(); // Initialize Program Timer
 80075f2:	f7ff ffd5 	bl	80075a0 <Timer_Init>
	USB_Audio_Init();
 80075f6:	f7ff fecd 	bl	8007394 <USB_Audio_Init>
	usb_state = USB_STATE_ON;
 80075fa:	2301      	movs	r3, #1
 80075fc:	4a2d      	ldr	r2, [pc, #180]	; (80076b4 <main+0xc8>)
 80075fe:	6013      	str	r3, [r2, #0]
	ui_data.usb_selection_state = USB_STATE_ON;
 8007600:	4a2d      	ldr	r2, [pc, #180]	; (80076b8 <main+0xcc>)
 8007602:	6053      	str	r3, [r2, #4]
 8007604:	e01f      	b.n	8007646 <main+0x5a>
			fx_state = ui_data.fx_selection_state;
 8007606:	4a2c      	ldr	r2, [pc, #176]	; (80076b8 <main+0xcc>)
 8007608:	6811      	ldr	r1, [r2, #0]
 800760a:	4b2a      	ldr	r3, [pc, #168]	; (80076b4 <main+0xc8>)
 800760c:	6099      	str	r1, [r3, #8]
			usb_state = ui_data.usb_selection_state;
 800760e:	6851      	ldr	r1, [r2, #4]
 8007610:	6019      	str	r1, [r3, #0]
			sv_state = ui_data.sv_selection_state;
 8007612:	6892      	ldr	r2, [r2, #8]
 8007614:	60da      	str	r2, [r3, #12]
			TIM_TICK = 0;
 8007616:	2200      	movs	r2, #0
 8007618:	605a      	str	r2, [r3, #4]
 800761a:	e018      	b.n	800764e <main+0x62>
				if (fx_state == FX_STATE_1) {
 800761c:	4b25      	ldr	r3, [pc, #148]	; (80076b4 <main+0xc8>)
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d02b      	beq.n	800767c <main+0x90>
				if (usb_state == USB_STATE_OFF) {
 8007624:	4b23      	ldr	r3, [pc, #140]	; (80076b4 <main+0xc8>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d02d      	beq.n	8007688 <main+0x9c>
			audio_line_in_buffer_state = BUFFER_OFFSET_NONE;
 800762c:	4b23      	ldr	r3, [pc, #140]	; (80076bc <main+0xd0>)
 800762e:	2200      	movs	r2, #0
 8007630:	601a      	str	r2, [r3, #0]
		if(audio_usb_in_buffer_state != BUFFER_OFFSET_NONE){
 8007632:	4b23      	ldr	r3, [pc, #140]	; (80076c0 <main+0xd4>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d133      	bne.n	80076a2 <main+0xb6>
		if (audio_line_out_buffer_state)
 800763a:	4b22      	ldr	r3, [pc, #136]	; (80076c4 <main+0xd8>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	b113      	cbz	r3, 8007646 <main+0x5a>
			audio_line_out_buffer_state = 0;
 8007640:	4b20      	ldr	r3, [pc, #128]	; (80076c4 <main+0xd8>)
 8007642:	2200      	movs	r2, #0
 8007644:	601a      	str	r2, [r3, #0]
		if (TIM_TICK == 1) {
 8007646:	4b1b      	ldr	r3, [pc, #108]	; (80076b4 <main+0xc8>)
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d0db      	beq.n	8007606 <main+0x1a>
		if (audio_line_in_buffer_state != BUFFER_OFFSET_NONE)
 800764e:	4b1b      	ldr	r3, [pc, #108]	; (80076bc <main+0xd0>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d0ed      	beq.n	8007632 <main+0x46>
			if (audio_line_in_buffer_state == BUFFER_OFFSET_HALF)
 8007656:	4b19      	ldr	r3, [pc, #100]	; (80076bc <main+0xd0>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d0de      	beq.n	800761c <main+0x30>
				if (fx_state == FX_STATE_1) {
 800765e:	4b15      	ldr	r3, [pc, #84]	; (80076b4 <main+0xc8>)
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d017      	beq.n	8007696 <main+0xaa>
				if (usb_state == USB_STATE_OFF) {
 8007666:	4b13      	ldr	r3, [pc, #76]	; (80076b4 <main+0xc8>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1de      	bne.n	800762c <main+0x40>
					memcpy(&audio_out_buffer[RECORD_BUFFER_SIZE / 2],
 800766e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007672:	4915      	ldr	r1, [pc, #84]	; (80076c8 <main+0xdc>)
 8007674:	4815      	ldr	r0, [pc, #84]	; (80076cc <main+0xe0>)
 8007676:	f000 fd7b 	bl	8008170 <memcpy>
 800767a:	e7d7      	b.n	800762c <main+0x40>
					Calc_FX1_Buffer((uint16_t *)&audio_out_buffer[0], RECORD_BUFFER_SIZE/2);
 800767c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007680:	4813      	ldr	r0, [pc, #76]	; (80076d0 <main+0xe4>)
 8007682:	f7ff fef5 	bl	8007470 <Calc_FX1_Buffer>
 8007686:	e7cd      	b.n	8007624 <main+0x38>
					memcpy(&audio_out_buffer[0], &audio_in_buffer[0], RECORD_BUFFER_SIZE);
 8007688:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800768c:	4911      	ldr	r1, [pc, #68]	; (80076d4 <main+0xe8>)
 800768e:	4810      	ldr	r0, [pc, #64]	; (80076d0 <main+0xe4>)
 8007690:	f000 fd6e 	bl	8008170 <memcpy>
 8007694:	e7ca      	b.n	800762c <main+0x40>
					Calc_FX1_Buffer((uint16_t *)&audio_out_buffer[RECORD_BUFFER_SIZE/2], RECORD_BUFFER_SIZE/2);
 8007696:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800769a:	480c      	ldr	r0, [pc, #48]	; (80076cc <main+0xe0>)
 800769c:	f7ff fee8 	bl	8007470 <Calc_FX1_Buffer>
 80076a0:	e7e1      	b.n	8007666 <main+0x7a>
			printf("we got some data\r\n");
 80076a2:	480d      	ldr	r0, [pc, #52]	; (80076d8 <main+0xec>)
 80076a4:	f000 fec0 	bl	8008428 <puts>
			fflush(stdout);
 80076a8:	4b0c      	ldr	r3, [pc, #48]	; (80076dc <main+0xf0>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6898      	ldr	r0, [r3, #8]
 80076ae:	f000 fc1f 	bl	8007ef0 <fflush>
 80076b2:	e7c2      	b.n	800763a <main+0x4e>
 80076b4:	200015d8 	.word	0x200015d8
 80076b8:	20001ad0 	.word	0x20001ad0
 80076bc:	20005e24 	.word	0x20005e24
 80076c0:	20003e20 	.word	0x20003e20
 80076c4:	20003e1c 	.word	0x20003e1c
 80076c8:	20004e24 	.word	0x20004e24
 80076cc:	20002b4c 	.word	0x20002b4c
 80076d0:	20001b4c 	.word	0x20001b4c
 80076d4:	20003e24 	.word	0x20003e24
 80076d8:	080096a0 	.word	0x080096a0
 80076dc:	20000178 	.word	0x20000178

080076e0 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void) {
 80076e0:	b508      	push	{r3, lr}
	HAL_TIM_IRQHandler(&htim);
 80076e2:	4802      	ldr	r0, [pc, #8]	; (80076ec <TIM7_IRQHandler+0xc>)
 80076e4:	f7fd fb06 	bl	8004cf4 <HAL_TIM_IRQHandler>
}
 80076e8:	bd08      	pop	{r3, pc}
 80076ea:	bf00      	nop
 80076ec:	20005e2c 	.word	0x20005e2c

080076f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim->Instance == TIM7) {
 80076f0:	6802      	ldr	r2, [r0, #0]
 80076f2:	4b04      	ldr	r3, [pc, #16]	; (8007704 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d000      	beq.n	80076fa <HAL_TIM_PeriodElapsedCallback+0xa>
		TIM_TICK = 1;
	}
}
 80076f8:	4770      	bx	lr
		TIM_TICK = 1;
 80076fa:	4b03      	ldr	r3, [pc, #12]	; (8007708 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80076fc:	2201      	movs	r2, #1
 80076fe:	605a      	str	r2, [r3, #4]
}
 8007700:	e7fa      	b.n	80076f8 <HAL_TIM_PeriodElapsedCallback+0x8>
 8007702:	bf00      	nop
 8007704:	40001400 	.word	0x40001400
 8007708:	200015d8 	.word	0x200015d8

0800770c <DMA2_Stream4_IRQHandler>:
/******************************************************************************/


/* ISR Handlers */
void DMA2_Stream4_IRQHandler(void)
{
 800770c:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800770e:	4b02      	ldr	r3, [pc, #8]	; (8007718 <DMA2_Stream4_IRQHandler+0xc>)
 8007710:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007712:	f7fa f8ef 	bl	80018f4 <HAL_DMA_IRQHandler>
}
 8007716:	bd08      	pop	{r3, pc}
 8007718:	2000165c 	.word	0x2000165c

0800771c <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800771c:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800771e:	4b02      	ldr	r3, [pc, #8]	; (8007728 <DMA2_Stream1_IRQHandler+0xc>)
 8007720:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007722:	f7fa f8e7 	bl	80018f4 <HAL_DMA_IRQHandler>
}
 8007726:	bd08      	pop	{r3, pc}
 8007728:	20001740 	.word	0x20001740

0800772c <OTG_HS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
 800772c:	b508      	push	{r3, lr}
  HAL_PCD_IRQHandler(&hpcd);
 800772e:	4802      	ldr	r0, [pc, #8]	; (8007738 <OTG_HS_IRQHandler+0xc>)
 8007730:	f7fb fb24 	bl	8002d7c <HAL_PCD_IRQHandler>
}
 8007734:	bd08      	pop	{r3, pc}
 8007736:	bf00      	nop
 8007738:	200464d0 	.word	0x200464d0

0800773c <DMA2_Stream6_IRQHandler>:
  * @brief This function handles DMA2 Stream 5 interrupt request.
  * @param None
  * @retval None
  */
void DMA2_Stream6_IRQHandler(void)
{
 800773c:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800773e:	4b02      	ldr	r3, [pc, #8]	; (8007748 <DMA2_Stream6_IRQHandler+0xc>)
 8007740:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007742:	f7fa f8d7 	bl	80018f4 <HAL_DMA_IRQHandler>
}
 8007746:	bd08      	pop	{r3, pc}
 8007748:	20001740 	.word	0x20001740

0800774c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800774c:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800774e:	4a0f      	ldr	r2, [pc, #60]	; (800778c <SystemInit+0x40>)
 8007750:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800775c:	4b0c      	ldr	r3, [pc, #48]	; (8007790 <SystemInit+0x44>)
 800775e:	6819      	ldr	r1, [r3, #0]
 8007760:	f041 0101 	orr.w	r1, r1, #1
 8007764:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007766:	2000      	movs	r0, #0
 8007768:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800776a:	681c      	ldr	r4, [r3, #0]
 800776c:	4909      	ldr	r1, [pc, #36]	; (8007794 <SystemInit+0x48>)
 800776e:	4021      	ands	r1, r4
 8007770:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007772:	4909      	ldr	r1, [pc, #36]	; (8007798 <SystemInit+0x4c>)
 8007774:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007776:	6819      	ldr	r1, [r3, #0]
 8007778:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800777c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800777e:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007780:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007784:	6093      	str	r3, [r2, #8]
#endif
}
 8007786:	f85d 4b04 	ldr.w	r4, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	e000ed00 	.word	0xe000ed00
 8007790:	40023800 	.word	0x40023800
 8007794:	fef6ffff 	.word	0xfef6ffff
 8007798:	24003010 	.word	0x24003010

0800779c <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 800779c:	b530      	push	{r4, r5, lr}
 800779e:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 80077a0:	6803      	ldr	r3, [r0, #0]
 80077a2:	4a2e      	ldr	r2, [pc, #184]	; (800785c <HAL_UART_MspInit+0xc0>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d004      	beq.n	80077b2 <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 80077a8:	4a2d      	ldr	r2, [pc, #180]	; (8007860 <HAL_UART_MspInit+0xc4>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d02c      	beq.n	8007808 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 80077ae:	b00b      	add	sp, #44	; 0x2c
 80077b0:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 80077b2:	4c2c      	ldr	r4, [pc, #176]	; (8007864 <HAL_UART_MspInit+0xc8>)
 80077b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80077b6:	f043 0301 	orr.w	r3, r3, #1
 80077ba:	6323      	str	r3, [r4, #48]	; 0x30
 80077bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	9301      	str	r3, [sp, #4]
 80077c4:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 80077c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077ca:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80077cc:	2302      	movs	r3, #2
 80077ce:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80077d0:	2301      	movs	r3, #1
 80077d2:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80077d4:	2303      	movs	r3, #3
 80077d6:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80077d8:	2307      	movs	r3, #7
 80077da:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 80077dc:	4d22      	ldr	r5, [pc, #136]	; (8007868 <HAL_UART_MspInit+0xcc>)
 80077de:	a905      	add	r1, sp, #20
 80077e0:	4628      	mov	r0, r5
 80077e2:	f7fa f979 	bl	8001ad8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80077e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077ea:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 80077ec:	a905      	add	r1, sp, #20
 80077ee:	4628      	mov	r0, r5
 80077f0:	f7fa f972 	bl	8001ad8 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 80077f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80077f6:	f043 0310 	orr.w	r3, r3, #16
 80077fa:	6463      	str	r3, [r4, #68]	; 0x44
 80077fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80077fe:	f003 0310 	and.w	r3, r3, #16
 8007802:	9302      	str	r3, [sp, #8]
 8007804:	9b02      	ldr	r3, [sp, #8]
 8007806:	e7d2      	b.n	80077ae <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8007808:	4c16      	ldr	r4, [pc, #88]	; (8007864 <HAL_UART_MspInit+0xc8>)
 800780a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800780c:	f043 0304 	orr.w	r3, r3, #4
 8007810:	6323      	str	r3, [r4, #48]	; 0x30
 8007812:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007814:	f003 0304 	and.w	r3, r3, #4
 8007818:	9303      	str	r3, [sp, #12]
 800781a:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 800781c:	2340      	movs	r3, #64	; 0x40
 800781e:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007820:	2302      	movs	r3, #2
 8007822:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8007824:	2301      	movs	r3, #1
 8007826:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8007828:	2303      	movs	r3, #3
 800782a:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800782c:	2308      	movs	r3, #8
 800782e:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8007830:	4d0e      	ldr	r5, [pc, #56]	; (800786c <HAL_UART_MspInit+0xd0>)
 8007832:	a905      	add	r1, sp, #20
 8007834:	4628      	mov	r0, r5
 8007836:	f7fa f94f 	bl	8001ad8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 800783a:	2380      	movs	r3, #128	; 0x80
 800783c:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 800783e:	a905      	add	r1, sp, #20
 8007840:	4628      	mov	r0, r5
 8007842:	f7fa f949 	bl	8001ad8 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8007846:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007848:	f043 0320 	orr.w	r3, r3, #32
 800784c:	6463      	str	r3, [r4, #68]	; 0x44
 800784e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007850:	f003 0320 	and.w	r3, r3, #32
 8007854:	9304      	str	r3, [sp, #16]
 8007856:	9b04      	ldr	r3, [sp, #16]
}
 8007858:	e7a9      	b.n	80077ae <HAL_UART_MspInit+0x12>
 800785a:	bf00      	nop
 800785c:	40011000 	.word	0x40011000
 8007860:	40011400 	.word	0x40011400
 8007864:	40023800 	.word	0x40023800
 8007868:	40020000 	.word	0x40020000
 800786c:	40020800 	.word	0x40020800

08007870 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8007870:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8007872:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8007874:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8007876:	2200      	movs	r2, #0
 8007878:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 800787a:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 800787c:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 800787e:	210c      	movs	r1, #12
 8007880:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8007882:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8007884:	f7fd ff1b 	bl	80056be <HAL_UART_Init>
}
 8007888:	bd08      	pop	{r3, pc}
	...

0800788c <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 800788c:	b510      	push	{r4, lr}
 800788e:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8007890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007894:	b292      	uxth	r2, r2
 8007896:	4802      	ldr	r0, [pc, #8]	; (80078a0 <_write+0x14>)
 8007898:	f7fd fbd0 	bl	800503c <HAL_UART_Transmit>
	return len;
}
 800789c:	4620      	mov	r0, r4
 800789e:	bd10      	pop	{r4, pc}
 80078a0:	20001adc 	.word	0x20001adc

080078a4 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 80078a4:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 80078a6:	2200      	movs	r2, #0
 80078a8:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80078aa:	f04f 33ff 	mov.w	r3, #4294967295
 80078ae:	2201      	movs	r2, #1
 80078b0:	4802      	ldr	r0, [pc, #8]	; (80078bc <_read+0x18>)
 80078b2:	f7fd fc2b 	bl	800510c <HAL_UART_Receive>
	return len;
}
 80078b6:	2001      	movs	r0, #1
 80078b8:	bd08      	pop	{r3, pc}
 80078ba:	bf00      	nop
 80078bc:	20001adc 	.word	0x20001adc

080078c0 <JPEG_IRQHandler>:

//
//
// -- Interrupt & Callback FUnctions -----
//
void JPEG_IRQHandler(void) {
 80078c0:	b508      	push	{r3, lr}
	HAL_JPEG_IRQHandler(&hjpeg); // Pass to HAL
 80078c2:	4802      	ldr	r0, [pc, #8]	; (80078cc <JPEG_IRQHandler+0xc>)
 80078c4:	f7fb f921 	bl	8002b0a <HAL_JPEG_IRQHandler>
}
 80078c8:	bd08      	pop	{r3, pc}
 80078ca:	bf00      	nop
 80078cc:	2000632c 	.word	0x2000632c

080078d0 <HAL_JPEG_GetDataCallback>:

void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData) {
 80078d0:	b570      	push	{r4, r5, r6, lr}
 80078d2:	4604      	mov	r4, r0
	bzero(jpeg_input_buffer, JPEG_BUFFER_SIZE);
 80078d4:	4d06      	ldr	r5, [pc, #24]	; (80078f0 <HAL_JPEG_GetDataCallback+0x20>)
 80078d6:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80078da:	4632      	mov	r2, r6
 80078dc:	2100      	movs	r1, #0
 80078de:	4628      	mov	r0, r5
 80078e0:	f000 fc54 	bl	800818c <memset>
	HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)jpeg_input_buffer, JPEG_BUFFER_SIZE);
 80078e4:	4632      	mov	r2, r6
 80078e6:	4629      	mov	r1, r5
 80078e8:	4620      	mov	r0, r4
 80078ea:	f7fa fe7d 	bl	80025e8 <HAL_JPEG_ConfigInputBuffer>
}
 80078ee:	bd70      	pop	{r4, r5, r6, pc}
 80078f0:	2000638c 	.word	0x2000638c

080078f4 <HAL_JPEG_DataReadyCallback>:

void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength) {
 80078f4:	b508      	push	{r3, lr}
	OutputBufferAddress = JPEG_OUTPUT_DATA_BUFFER;
 80078f6:	4b03      	ldr	r3, [pc, #12]	; (8007904 <HAL_JPEG_DataReadyCallback+0x10>)
 80078f8:	4a03      	ldr	r2, [pc, #12]	; (8007908 <HAL_JPEG_DataReadyCallback+0x14>)
 80078fa:	621a      	str	r2, [r3, #32]
	HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)jpeg_output_buffer, OutputBufferAddress);
 80078fc:	6859      	ldr	r1, [r3, #4]
 80078fe:	f7fa fe76 	bl	80025ee <HAL_JPEG_ConfigOutputBuffer>
}
 8007902:	bd08      	pop	{r3, pc}
 8007904:	200000e8 	.word	0x200000e8
 8007908:	c0200000 	.word	0xc0200000

0800790c <HAL_JPEG_DecodeCpltCallback>:

void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg) {
	JPEG_DECODE_COMPLETE = 1;
 800790c:	4b01      	ldr	r3, [pc, #4]	; (8007914 <HAL_JPEG_DecodeCpltCallback+0x8>)
 800790e:	2201      	movs	r2, #1
 8007910:	605a      	str	r2, [r3, #4]
}
 8007912:	4770      	bx	lr
 8007914:	200015e8 	.word	0x200015e8

08007918 <HAL_JPEG_InfoReadyCallback>:
		printf("\r\nError Code: Unknown");
	fflush(stdout);
}

/* Adjust the width to be a multiple of 8 or 16 when JPEG header has been parsed */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo) {
 8007918:	b508      	push	{r3, lr}
 800791a:	4608      	mov	r0, r1
	// Have to add padding for DMA2D
	if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING) {
 800791c:	684a      	ldr	r2, [r1, #4]
 800791e:	2a01      	cmp	r2, #1
 8007920:	d018      	beq.n	8007954 <HAL_JPEG_InfoReadyCallback+0x3c>

		if((pInfo->ImageHeight % 16) != 0)
			pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
	}

	if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING) {
 8007922:	2a02      	cmp	r2, #2
 8007924:	d027      	beq.n	8007976 <HAL_JPEG_InfoReadyCallback+0x5e>

		if((pInfo->ImageHeight % 8) != 0)
			pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
	}

	if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING) {
 8007926:	b97a      	cbnz	r2, 8007948 <HAL_JPEG_InfoReadyCallback+0x30>
		if((pInfo->ImageWidth % 8) != 0)
 8007928:	68c3      	ldr	r3, [r0, #12]
 800792a:	f013 0f07 	tst.w	r3, #7
 800792e:	d003      	beq.n	8007938 <HAL_JPEG_InfoReadyCallback+0x20>
			pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8007930:	f023 0307 	bic.w	r3, r3, #7
 8007934:	3308      	adds	r3, #8
 8007936:	60c3      	str	r3, [r0, #12]

		if((pInfo->ImageHeight % 8) != 0)
 8007938:	6883      	ldr	r3, [r0, #8]
 800793a:	f013 0f07 	tst.w	r3, #7
 800793e:	d003      	beq.n	8007948 <HAL_JPEG_InfoReadyCallback+0x30>
			pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8007940:	f023 0307 	bic.w	r3, r3, #7
 8007944:	3308      	adds	r3, #8
 8007946:	6083      	str	r3, [r0, #8]
	}

	if(JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb) != HAL_OK) {
 8007948:	4a15      	ldr	r2, [pc, #84]	; (80079a0 <HAL_JPEG_InfoReadyCallback+0x88>)
 800794a:	4916      	ldr	r1, [pc, #88]	; (80079a4 <HAL_JPEG_InfoReadyCallback+0x8c>)
 800794c:	f7ff fc90 	bl	8007270 <JPEG_GetDecodeColorConvertFunc>
 8007950:	bb10      	cbnz	r0, 8007998 <HAL_JPEG_InfoReadyCallback+0x80>
		printf("Error getting DecodeColorConvertFunct\r\n");
		while(1);
	}
}
 8007952:	bd08      	pop	{r3, pc}
		if((pInfo->ImageWidth % 16) != 0)
 8007954:	68cb      	ldr	r3, [r1, #12]
 8007956:	f013 0f0f 	tst.w	r3, #15
 800795a:	d003      	beq.n	8007964 <HAL_JPEG_InfoReadyCallback+0x4c>
			pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800795c:	f023 030f 	bic.w	r3, r3, #15
 8007960:	3310      	adds	r3, #16
 8007962:	60cb      	str	r3, [r1, #12]
		if((pInfo->ImageHeight % 16) != 0)
 8007964:	6883      	ldr	r3, [r0, #8]
 8007966:	f013 0f0f 	tst.w	r3, #15
 800796a:	d0da      	beq.n	8007922 <HAL_JPEG_InfoReadyCallback+0xa>
			pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 800796c:	f023 030f 	bic.w	r3, r3, #15
 8007970:	3310      	adds	r3, #16
 8007972:	6083      	str	r3, [r0, #8]
 8007974:	e7d5      	b.n	8007922 <HAL_JPEG_InfoReadyCallback+0xa>
		if((pInfo->ImageWidth % 16) != 0)
 8007976:	68c3      	ldr	r3, [r0, #12]
 8007978:	f013 0f0f 	tst.w	r3, #15
 800797c:	d003      	beq.n	8007986 <HAL_JPEG_InfoReadyCallback+0x6e>
			pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800797e:	f023 030f 	bic.w	r3, r3, #15
 8007982:	3310      	adds	r3, #16
 8007984:	60c3      	str	r3, [r0, #12]
		if((pInfo->ImageHeight % 8) != 0)
 8007986:	6883      	ldr	r3, [r0, #8]
 8007988:	f013 0f07 	tst.w	r3, #7
 800798c:	d0cb      	beq.n	8007926 <HAL_JPEG_InfoReadyCallback+0xe>
			pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 800798e:	f023 0307 	bic.w	r3, r3, #7
 8007992:	3308      	adds	r3, #8
 8007994:	6083      	str	r3, [r0, #8]
 8007996:	e7c6      	b.n	8007926 <HAL_JPEG_InfoReadyCallback+0xe>
		printf("Error getting DecodeColorConvertFunct\r\n");
 8007998:	4803      	ldr	r0, [pc, #12]	; (80079a8 <HAL_JPEG_InfoReadyCallback+0x90>)
 800799a:	f000 fd45 	bl	8008428 <puts>
		while(1);
 800799e:	e7fe      	b.n	800799e <HAL_JPEG_InfoReadyCallback+0x86>
 80079a0:	200015f4 	.word	0x200015f4
 80079a4:	2004638c 	.word	0x2004638c
 80079a8:	08009804 	.word	0x08009804

080079ac <USBD_Setup>:
#ifdef USB_DEVICE_ENABLE

#include "usbd_desc.h"
#include "usbd_audio.h"

void USBD_Setup(){
 80079ac:	b538      	push	{r3, r4, r5, lr}

	// Application Initializations
	printf("\033[2J\033[HInitialize USBD\r\n");
 80079ae:	4815      	ldr	r0, [pc, #84]	; (8007a04 <USBD_Setup+0x58>)
 80079b0:	f000 fd3a 	bl	8008428 <puts>
	fflush(stdout);
 80079b4:	4d14      	ldr	r5, [pc, #80]	; (8007a08 <USBD_Setup+0x5c>)
 80079b6:	682b      	ldr	r3, [r5, #0]
 80079b8:	6898      	ldr	r0, [r3, #8]
 80079ba:	f000 fa99 	bl	8007ef0 <fflush>
	USBD_Init(&USBD_Device, &AUDIO_Desc, 0);
 80079be:	4c13      	ldr	r4, [pc, #76]	; (8007a0c <USBD_Setup+0x60>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	4913      	ldr	r1, [pc, #76]	; (8007a10 <USBD_Setup+0x64>)
 80079c4:	4620      	mov	r0, r4
 80079c6:	f7fe fc73 	bl	80062b0 <USBD_Init>

	// USBH Driver Initialization
	printf("Registering Class\r\n");
 80079ca:	4812      	ldr	r0, [pc, #72]	; (8007a14 <USBD_Setup+0x68>)
 80079cc:	f000 fd2c 	bl	8008428 <puts>
	fflush(stdout);
 80079d0:	682b      	ldr	r3, [r5, #0]
 80079d2:	6898      	ldr	r0, [r3, #8]
 80079d4:	f000 fa8c 	bl	8007ef0 <fflush>
	USBD_RegisterClass(&USBD_Device, USBD_AUDIO_CLASS);
 80079d8:	490f      	ldr	r1, [pc, #60]	; (8007a18 <USBD_Setup+0x6c>)
 80079da:	4620      	mov	r0, r4
 80079dc:	f7fe fc92 	bl	8006304 <USBD_RegisterClass>


	/* Add Interface callbacks for AUDIO Class */
	printf("Adding USB Interface\r\n");
 80079e0:	480e      	ldr	r0, [pc, #56]	; (8007a1c <USBD_Setup+0x70>)
 80079e2:	f000 fd21 	bl	8008428 <puts>
	USBD_AUDIO_RegisterInterface(&USBD_Device, &USBD_AUDIO_fops);
 80079e6:	490e      	ldr	r1, [pc, #56]	; (8007a20 <USBD_Setup+0x74>)
 80079e8:	4620      	mov	r0, r4
 80079ea:	f7fe fc5a 	bl	80062a2 <USBD_AUDIO_RegisterInterface>

	// USB Driver Class Registrations: Add device types to handle.
	// Start USBH Driver
	printf("Starting USB Device\r\n");
 80079ee:	480d      	ldr	r0, [pc, #52]	; (8007a24 <USBD_Setup+0x78>)
 80079f0:	f000 fd1a 	bl	8008428 <puts>
	fflush(stdout);
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	6898      	ldr	r0, [r3, #8]
 80079f8:	f000 fa7a 	bl	8007ef0 <fflush>
	USBD_Start(&USBD_Device);
 80079fc:	4620      	mov	r0, r4
 80079fe:	f7fe fca3 	bl	8006348 <USBD_Start>

}
 8007a02:	bd38      	pop	{r3, r4, r5, pc}
 8007a04:	08009870 	.word	0x08009870
 8007a08:	20000178 	.word	0x20000178
 8007a0c:	20003b4c 	.word	0x20003b4c
 8007a10:	2000015c 	.word	0x2000015c
 8007a14:	08009888 	.word	0x08009888
 8007a18:	200000ac 	.word	0x200000ac
 8007a1c:	0800989c 	.word	0x0800989c
 8007a20:	2000010c 	.word	0x2000010c
 8007a24:	080098b4 	.word	0x080098b4

08007a28 <Audio_PeriodicTC>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t Audio_PeriodicTC(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
  return 0;
}
 8007a28:	2000      	movs	r0, #0
 8007a2a:	4770      	bx	lr

08007a2c <Audio_GetState>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t Audio_GetState(void)
{
  return 0;
}
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	4770      	bx	lr

08007a30 <Audio_MuteCtl>:
{
 8007a30:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_SetMute(cmd);
 8007a32:	f7f9 fbe5 	bl	8001200 <BSP_AUDIO_OUT_SetMute>
}
 8007a36:	2000      	movs	r0, #0
 8007a38:	bd08      	pop	{r3, pc}

08007a3a <Audio_VolumeCtl>:
{
 8007a3a:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_SetVolume(vol);
 8007a3c:	f7f9 fbd2 	bl	80011e4 <BSP_AUDIO_OUT_SetVolume>
}
 8007a40:	2000      	movs	r0, #0
 8007a42:	bd08      	pop	{r3, pc}

08007a44 <Audio_PlaybackCmd>:
{
 8007a44:	b508      	push	{r3, lr}
  switch(cmd)
 8007a46:	2a01      	cmp	r2, #1
 8007a48:	d003      	beq.n	8007a52 <Audio_PlaybackCmd+0xe>
 8007a4a:	2a02      	cmp	r2, #2
 8007a4c:	d005      	beq.n	8007a5a <Audio_PlaybackCmd+0x16>
}
 8007a4e:	2000      	movs	r0, #0
 8007a50:	bd08      	pop	{r3, pc}
    BSP_AUDIO_OUT_Play((uint16_t *)pbuf, 2*size);
 8007a52:	0049      	lsls	r1, r1, #1
 8007a54:	f7f9 fb82 	bl	800115c <BSP_AUDIO_OUT_Play>
    break;
 8007a58:	e7f9      	b.n	8007a4e <Audio_PlaybackCmd+0xa>
    BSP_AUDIO_OUT_ChangeBuffer((uint16_t *)pbuf, 2*size);
 8007a5a:	0049      	lsls	r1, r1, #1
 8007a5c:	b289      	uxth	r1, r1
 8007a5e:	f7f9 fb9d 	bl	800119c <BSP_AUDIO_OUT_ChangeBuffer>
    break;
 8007a62:	e7f4      	b.n	8007a4e <Audio_PlaybackCmd+0xa>

08007a64 <Audio_DeInit>:
{
 8007a64:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8007a66:	2002      	movs	r0, #2
 8007a68:	f7f9 fba2 	bl	80011b0 <BSP_AUDIO_OUT_Stop>
}
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	bd08      	pop	{r3, pc}

08007a70 <Audio_Init>:
{
 8007a70:	b508      	push	{r3, lr}
 8007a72:	4602      	mov	r2, r0
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, Volume, AudioFreq);
 8007a74:	b2c9      	uxtb	r1, r1
 8007a76:	2004      	movs	r0, #4
 8007a78:	f7f9 fca8 	bl	80013cc <BSP_AUDIO_OUT_Init>
  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8007a7c:	2005      	movs	r0, #5
 8007a7e:	f7f9 fbcd 	bl	800121c <BSP_AUDIO_OUT_SetAudioFrameSlot>
}
 8007a82:	2000      	movs	r0, #0
 8007a84:	bd08      	pop	{r3, pc}

08007a86 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8007a86:	b508      	push	{r3, lr}
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a88:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8007a8c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007a90:	f7fe fc6f 	bl	8006372 <USBD_LL_SetupStage>
}
 8007a94:	bd08      	pop	{r3, pc}

08007a96 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007a96:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a98:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8007a9c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007aa0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007aa4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007aa8:	f7fe fc8f 	bl	80063ca <USBD_LL_DataOutStage>
}
 8007aac:	bd08      	pop	{r3, pc}

08007aae <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007aae:	b508      	push	{r3, lr}
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ab0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8007ab4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007ab8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007aba:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007abe:	f7fe fcbd 	bl	800643c <USBD_LL_DataInStage>
}
 8007ac2:	bd08      	pop	{r3, pc}

08007ac4 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8007ac4:	b508      	push	{r3, lr}
  USBD_LL_SOF(hpcd->pData);
 8007ac6:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007aca:	f7fe fd53 	bl	8006574 <USBD_LL_SOF>
}
 8007ace:	bd08      	pop	{r3, pc}

08007ad0 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
  
  /* Set USB Current Speed */
  switch(hpcd->Init.speed)
 8007ad4:	68c3      	ldr	r3, [r0, #12]
 8007ad6:	b153      	cbz	r3, 8007aee <HAL_PCD_ResetCallback+0x1e>
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
    break;
    
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8007ad8:	2501      	movs	r5, #1
    speed = USBD_SPEED_FULL;
    break;
  }
  
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8007ada:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8007ade:	f7fe fd09 	bl	80064f4 <USBD_LL_Reset>
  
  USBD_LL_SetSpeed(hpcd->pData, speed);
 8007ae2:	4629      	mov	r1, r5
 8007ae4:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8007ae8:	f7fe fd2d 	bl	8006546 <USBD_LL_SetSpeed>
}
 8007aec:	bd38      	pop	{r3, r4, r5, pc}
  switch(hpcd->Init.speed)
 8007aee:	2500      	movs	r5, #0
 8007af0:	e7f3      	b.n	8007ada <HAL_PCD_ResetCallback+0xa>

08007af2 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8007af2:	b508      	push	{r3, lr}
  USBD_LL_Suspend(hpcd->pData);
 8007af4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007af8:	f7fe fd28 	bl	800654c <USBD_LL_Suspend>
}
 8007afc:	bd08      	pop	{r3, pc}

08007afe <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8007afe:	b508      	push	{r3, lr}
  USBD_LL_Resume(hpcd->pData);
 8007b00:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007b04:	f7fe fd2b 	bl	800655e <USBD_LL_Resume>
}
 8007b08:	bd08      	pop	{r3, pc}

08007b0a <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007b0a:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8007b0c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007b10:	f7fe fd40 	bl	8006594 <USBD_LL_IsoOUTIncomplete>
}
 8007b14:	bd08      	pop	{r3, pc}

08007b16 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007b16:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8007b18:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007b1c:	f7fe fd38 	bl	8006590 <USBD_LL_IsoINIncomplete>
}
 8007b20:	bd08      	pop	{r3, pc}

08007b22 <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8007b22:	b508      	push	{r3, lr}
  USBD_LL_DevConnected(hpcd->pData);
 8007b24:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007b28:	f7fe fd36 	bl	8006598 <USBD_LL_DevConnected>
}
 8007b2c:	bd08      	pop	{r3, pc}

08007b2e <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8007b2e:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected(hpcd->pData);
 8007b30:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8007b34:	f7fe fd32 	bl	800659c <USBD_LL_DevDisconnected>
}
 8007b38:	bd08      	pop	{r3, pc}

08007b3a <USBD_LL_Init>:
  HAL_PCDEx_SetRxFiFo(&hpcd, 0x100);
  HAL_PCDEx_SetTxFiFo(&hpcd, 0, 0x200);
#endif 
  
  return USBD_OK;
}
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	4770      	bx	lr

08007b3e <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b3e:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8007b40:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007b44:	f7fb f861 	bl	8002c0a <HAL_PCD_Start>
  return USBD_OK;
}
 8007b48:	2000      	movs	r0, #0
 8007b4a:	bd08      	pop	{r3, pc}

08007b4c <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	4614      	mov	r4, r2
 8007b50:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData,
 8007b52:	4623      	mov	r3, r4
 8007b54:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007b58:	f7fb fb9b 	bl	8003292 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	bd10      	pop	{r4, pc}

08007b60 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b60:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b62:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007b66:	f7fb fbd7 	bl	8003318 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	bd08      	pop	{r3, pc}

08007b6e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b6e:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b70:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007b74:	f7fb fc6c 	bl	8003450 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8007b78:	2000      	movs	r0, #0
 8007b7a:	bd08      	pop	{r3, pc}

08007b7c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b7c:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b7e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007b82:	f7fb fca9 	bl	80034d8 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8007b86:	2000      	movs	r0, #0
 8007b88:	bd08      	pop	{r3, pc}

08007b8a <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b8a:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  
  if((ep_addr & 0x80) == 0x80)
 8007b8e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007b92:	d108      	bne.n	8007ba6 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007b94:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8007b98:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007b9c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8007ba0:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 8007ba4:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ba6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8007baa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007bae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8007bb2:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8007bb6:	4770      	bx	lr

08007bb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007bb8:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007bba:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007bbe:	f7fb fb54 	bl	800326a <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	bd08      	pop	{r3, pc}

08007bc6 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint32_t size)
{
 8007bc6:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007bc8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007bcc:	f7fb fc15 	bl	80033fa <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	bd08      	pop	{r3, pc}

08007bd4 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint32_t size)
{
 8007bd4:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007bd6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007bda:	f7fb fbd6 	bl	800338a <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8007bde:	2000      	movs	r0, #0
 8007be0:	bd08      	pop	{r3, pc}

08007be2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007be2:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8007be4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007be8:	f7fb fbfe 	bl	80033e8 <HAL_PCD_EP_GetRxCount>
}
 8007bec:	bd08      	pop	{r3, pc}
	...

08007bf0 <USBD_AUDIO_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 8007bf0:	2312      	movs	r3, #18
 8007bf2:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc;
}
 8007bf4:	4800      	ldr	r0, [pc, #0]	; (8007bf8 <USBD_AUDIO_DeviceDescriptor+0x8>)
 8007bf6:	4770      	bx	lr
 8007bf8:	20000128 	.word	0x20000128

08007bfc <USBD_AUDIO_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 8007bfc:	2304      	movs	r3, #4
 8007bfe:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 8007c00:	4800      	ldr	r0, [pc, #0]	; (8007c04 <USBD_AUDIO_LangIDStrDescriptor+0x8>)
 8007c02:	4770      	bx	lr
 8007c04:	2000013c 	.word	0x2000013c

08007c08 <IntToUnicode>:
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0; idx < len; idx ++)
 8007c08:	2300      	movs	r3, #0
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d217      	bcs.n	8007c3e <IntToUnicode+0x36>
{
 8007c0e:	b430      	push	{r4, r5}
 8007c10:	e00b      	b.n	8007c2a <IntToUnicode+0x22>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8007c12:	3437      	adds	r4, #55	; 0x37
 8007c14:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }
    
    value = value << 4;
 8007c18:	0100      	lsls	r0, r0, #4
    
    pbuf[ 2* idx + 1] = 0;
 8007c1a:	005c      	lsls	r4, r3, #1
 8007c1c:	3401      	adds	r4, #1
 8007c1e:	2500      	movs	r5, #0
 8007c20:	550d      	strb	r5, [r1, r4]
  for( idx = 0; idx < len; idx ++)
 8007c22:	3301      	adds	r3, #1
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d207      	bcs.n	8007c3a <IntToUnicode+0x32>
    if( ((value >> 28)) < 0xA )
 8007c2a:	0f04      	lsrs	r4, r0, #28
 8007c2c:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8007c30:	d2ef      	bcs.n	8007c12 <IntToUnicode+0xa>
      pbuf[ 2* idx] = (value >> 28) + '0';
 8007c32:	3430      	adds	r4, #48	; 0x30
 8007c34:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8007c38:	e7ee      	b.n	8007c18 <IntToUnicode+0x10>
  }
}
 8007c3a:	bc30      	pop	{r4, r5}
 8007c3c:	4770      	bx	lr
 8007c3e:	4770      	bx	lr

08007c40 <Get_SerialNum>:
{
 8007c40:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8007c42:	4b0b      	ldr	r3, [pc, #44]	; (8007c70 <Get_SerialNum+0x30>)
 8007c44:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8007c46:	3304      	adds	r3, #4
 8007c48:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8007c4e:	18c0      	adds	r0, r0, r3
 8007c50:	d100      	bne.n	8007c54 <Get_SerialNum+0x14>
}
 8007c52:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8007c54:	4d07      	ldr	r5, [pc, #28]	; (8007c74 <Get_SerialNum+0x34>)
 8007c56:	2208      	movs	r2, #8
 8007c58:	f105 011a 	add.w	r1, r5, #26
 8007c5c:	f7ff ffd4 	bl	8007c08 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 8007c60:	2204      	movs	r2, #4
 8007c62:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 8007c66:	4620      	mov	r0, r4
 8007c68:	f7ff ffce 	bl	8007c08 <IntToUnicode>
}
 8007c6c:	e7f1      	b.n	8007c52 <Get_SerialNum+0x12>
 8007c6e:	bf00      	nop
 8007c70:	1fff7a10 	.word	0x1fff7a10
 8007c74:	20000128 	.word	0x20000128

08007c78 <USBD_AUDIO_SerialStrDescriptor>:
{
 8007c78:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8007c7a:	231a      	movs	r3, #26
 8007c7c:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8007c7e:	f7ff ffdf 	bl	8007c40 <Get_SerialNum>
}
 8007c82:	4801      	ldr	r0, [pc, #4]	; (8007c88 <USBD_AUDIO_SerialStrDescriptor+0x10>)
 8007c84:	bd08      	pop	{r3, pc}
 8007c86:	bf00      	nop
 8007c88:	20000140 	.word	0x20000140

08007c8c <USBD_AUDIO_ProductStrDescriptor>:
{
 8007c8c:	b508      	push	{r3, lr}
 8007c8e:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8007c90:	b928      	cbnz	r0, 8007c9e <USBD_AUDIO_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8007c92:	4905      	ldr	r1, [pc, #20]	; (8007ca8 <USBD_AUDIO_ProductStrDescriptor+0x1c>)
 8007c94:	4805      	ldr	r0, [pc, #20]	; (8007cac <USBD_AUDIO_ProductStrDescriptor+0x20>)
 8007c96:	f7fe ffd0 	bl	8006c3a <USBD_GetString>
}
 8007c9a:	4803      	ldr	r0, [pc, #12]	; (8007ca8 <USBD_AUDIO_ProductStrDescriptor+0x1c>)
 8007c9c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8007c9e:	4902      	ldr	r1, [pc, #8]	; (8007ca8 <USBD_AUDIO_ProductStrDescriptor+0x1c>)
 8007ca0:	4803      	ldr	r0, [pc, #12]	; (8007cb0 <USBD_AUDIO_ProductStrDescriptor+0x24>)
 8007ca2:	f7fe ffca 	bl	8006c3a <USBD_GetString>
 8007ca6:	e7f8      	b.n	8007c9a <USBD_AUDIO_ProductStrDescriptor+0xe>
 8007ca8:	200468d4 	.word	0x200468d4
 8007cac:	080098cc 	.word	0x080098cc
 8007cb0:	080098f0 	.word	0x080098f0

08007cb4 <USBD_AUDIO_ManufacturerStrDescriptor>:
{
 8007cb4:	b510      	push	{r4, lr}
 8007cb6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007cb8:	4c03      	ldr	r4, [pc, #12]	; (8007cc8 <USBD_AUDIO_ManufacturerStrDescriptor+0x14>)
 8007cba:	4621      	mov	r1, r4
 8007cbc:	4803      	ldr	r0, [pc, #12]	; (8007ccc <USBD_AUDIO_ManufacturerStrDescriptor+0x18>)
 8007cbe:	f7fe ffbc 	bl	8006c3a <USBD_GetString>
}
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	bd10      	pop	{r4, pc}
 8007cc6:	bf00      	nop
 8007cc8:	200468d4 	.word	0x200468d4
 8007ccc:	08009914 	.word	0x08009914

08007cd0 <USBD_AUDIO_ConfigStrDescriptor>:
{
 8007cd0:	b508      	push	{r3, lr}
 8007cd2:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8007cd4:	b928      	cbnz	r0, 8007ce2 <USBD_AUDIO_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8007cd6:	4905      	ldr	r1, [pc, #20]	; (8007cec <USBD_AUDIO_ConfigStrDescriptor+0x1c>)
 8007cd8:	4805      	ldr	r0, [pc, #20]	; (8007cf0 <USBD_AUDIO_ConfigStrDescriptor+0x20>)
 8007cda:	f7fe ffae 	bl	8006c3a <USBD_GetString>
}
 8007cde:	4803      	ldr	r0, [pc, #12]	; (8007cec <USBD_AUDIO_ConfigStrDescriptor+0x1c>)
 8007ce0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 8007ce2:	4902      	ldr	r1, [pc, #8]	; (8007cec <USBD_AUDIO_ConfigStrDescriptor+0x1c>)
 8007ce4:	4802      	ldr	r0, [pc, #8]	; (8007cf0 <USBD_AUDIO_ConfigStrDescriptor+0x20>)
 8007ce6:	f7fe ffa8 	bl	8006c3a <USBD_GetString>
 8007cea:	e7f8      	b.n	8007cde <USBD_AUDIO_ConfigStrDescriptor+0xe>
 8007cec:	200468d4 	.word	0x200468d4
 8007cf0:	08009928 	.word	0x08009928

08007cf4 <USBD_AUDIO_InterfaceStrDescriptor>:
{
 8007cf4:	b508      	push	{r3, lr}
 8007cf6:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8007cf8:	b928      	cbnz	r0, 8007d06 <USBD_AUDIO_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 8007cfa:	4905      	ldr	r1, [pc, #20]	; (8007d10 <USBD_AUDIO_InterfaceStrDescriptor+0x1c>)
 8007cfc:	4805      	ldr	r0, [pc, #20]	; (8007d14 <USBD_AUDIO_InterfaceStrDescriptor+0x20>)
 8007cfe:	f7fe ff9c 	bl	8006c3a <USBD_GetString>
}
 8007d02:	4803      	ldr	r0, [pc, #12]	; (8007d10 <USBD_AUDIO_InterfaceStrDescriptor+0x1c>)
 8007d04:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8007d06:	4902      	ldr	r1, [pc, #8]	; (8007d10 <USBD_AUDIO_InterfaceStrDescriptor+0x1c>)
 8007d08:	4802      	ldr	r0, [pc, #8]	; (8007d14 <USBD_AUDIO_InterfaceStrDescriptor+0x20>)
 8007d0a:	f7fe ff96 	bl	8006c3a <USBD_GetString>
 8007d0e:	e7f8      	b.n	8007d02 <USBD_AUDIO_InterfaceStrDescriptor+0xe>
 8007d10:	200468d4 	.word	0x200468d4
 8007d14:	08009938 	.word	0x08009938

08007d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007d50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007d1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007d1e:	e003      	b.n	8007d28 <LoopCopyDataInit>

08007d20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007d20:	4b0c      	ldr	r3, [pc, #48]	; (8007d54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007d22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007d24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007d26:	3104      	adds	r1, #4

08007d28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007d28:	480b      	ldr	r0, [pc, #44]	; (8007d58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007d2a:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007d2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007d2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007d30:	d3f6      	bcc.n	8007d20 <CopyDataInit>
  ldr  r2, =_sbss
 8007d32:	4a0b      	ldr	r2, [pc, #44]	; (8007d60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007d34:	e002      	b.n	8007d3c <LoopFillZerobss>

08007d36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007d36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007d38:	f842 3b04 	str.w	r3, [r2], #4

08007d3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007d3c:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007d3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007d40:	d3f9      	bcc.n	8007d36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007d42:	f7ff fd03 	bl	800774c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007d46:	f000 f9db 	bl	8008100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007d4a:	f7ff fc4f 	bl	80075ec <main>
  bx  lr    
 8007d4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007d50:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8007d54:	080099e8 	.word	0x080099e8
  ldr  r0, =_sdata
 8007d58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007d5c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8007d60:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8007d64:	200469e4 	.word	0x200469e4

08007d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007d68:	e7fe      	b.n	8007d68 <ADC_IRQHandler>
	...

08007d6c <__sflush_r>:
 8007d6c:	898a      	ldrh	r2, [r1, #12]
 8007d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d72:	4605      	mov	r5, r0
 8007d74:	0710      	lsls	r0, r2, #28
 8007d76:	460c      	mov	r4, r1
 8007d78:	d458      	bmi.n	8007e2c <__sflush_r+0xc0>
 8007d7a:	684b      	ldr	r3, [r1, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	dc05      	bgt.n	8007d8c <__sflush_r+0x20>
 8007d80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	dc02      	bgt.n	8007d8c <__sflush_r+0x20>
 8007d86:	2000      	movs	r0, #0
 8007d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d8e:	2e00      	cmp	r6, #0
 8007d90:	d0f9      	beq.n	8007d86 <__sflush_r+0x1a>
 8007d92:	2300      	movs	r3, #0
 8007d94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d98:	682f      	ldr	r7, [r5, #0]
 8007d9a:	602b      	str	r3, [r5, #0]
 8007d9c:	d032      	beq.n	8007e04 <__sflush_r+0x98>
 8007d9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	075a      	lsls	r2, r3, #29
 8007da4:	d505      	bpl.n	8007db2 <__sflush_r+0x46>
 8007da6:	6863      	ldr	r3, [r4, #4]
 8007da8:	1ac0      	subs	r0, r0, r3
 8007daa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dac:	b10b      	cbz	r3, 8007db2 <__sflush_r+0x46>
 8007dae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007db0:	1ac0      	subs	r0, r0, r3
 8007db2:	2300      	movs	r3, #0
 8007db4:	4602      	mov	r2, r0
 8007db6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007db8:	6a21      	ldr	r1, [r4, #32]
 8007dba:	4628      	mov	r0, r5
 8007dbc:	47b0      	blx	r6
 8007dbe:	1c43      	adds	r3, r0, #1
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	d106      	bne.n	8007dd2 <__sflush_r+0x66>
 8007dc4:	6829      	ldr	r1, [r5, #0]
 8007dc6:	291d      	cmp	r1, #29
 8007dc8:	d82c      	bhi.n	8007e24 <__sflush_r+0xb8>
 8007dca:	4a2a      	ldr	r2, [pc, #168]	; (8007e74 <__sflush_r+0x108>)
 8007dcc:	40ca      	lsrs	r2, r1
 8007dce:	07d6      	lsls	r6, r2, #31
 8007dd0:	d528      	bpl.n	8007e24 <__sflush_r+0xb8>
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	6062      	str	r2, [r4, #4]
 8007dd6:	04d9      	lsls	r1, r3, #19
 8007dd8:	6922      	ldr	r2, [r4, #16]
 8007dda:	6022      	str	r2, [r4, #0]
 8007ddc:	d504      	bpl.n	8007de8 <__sflush_r+0x7c>
 8007dde:	1c42      	adds	r2, r0, #1
 8007de0:	d101      	bne.n	8007de6 <__sflush_r+0x7a>
 8007de2:	682b      	ldr	r3, [r5, #0]
 8007de4:	b903      	cbnz	r3, 8007de8 <__sflush_r+0x7c>
 8007de6:	6560      	str	r0, [r4, #84]	; 0x54
 8007de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dea:	602f      	str	r7, [r5, #0]
 8007dec:	2900      	cmp	r1, #0
 8007dee:	d0ca      	beq.n	8007d86 <__sflush_r+0x1a>
 8007df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007df4:	4299      	cmp	r1, r3
 8007df6:	d002      	beq.n	8007dfe <__sflush_r+0x92>
 8007df8:	4628      	mov	r0, r5
 8007dfa:	f000 f9cf 	bl	800819c <_free_r>
 8007dfe:	2000      	movs	r0, #0
 8007e00:	6360      	str	r0, [r4, #52]	; 0x34
 8007e02:	e7c1      	b.n	8007d88 <__sflush_r+0x1c>
 8007e04:	6a21      	ldr	r1, [r4, #32]
 8007e06:	2301      	movs	r3, #1
 8007e08:	4628      	mov	r0, r5
 8007e0a:	47b0      	blx	r6
 8007e0c:	1c41      	adds	r1, r0, #1
 8007e0e:	d1c7      	bne.n	8007da0 <__sflush_r+0x34>
 8007e10:	682b      	ldr	r3, [r5, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0c4      	beq.n	8007da0 <__sflush_r+0x34>
 8007e16:	2b1d      	cmp	r3, #29
 8007e18:	d001      	beq.n	8007e1e <__sflush_r+0xb2>
 8007e1a:	2b16      	cmp	r3, #22
 8007e1c:	d101      	bne.n	8007e22 <__sflush_r+0xb6>
 8007e1e:	602f      	str	r7, [r5, #0]
 8007e20:	e7b1      	b.n	8007d86 <__sflush_r+0x1a>
 8007e22:	89a3      	ldrh	r3, [r4, #12]
 8007e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e28:	81a3      	strh	r3, [r4, #12]
 8007e2a:	e7ad      	b.n	8007d88 <__sflush_r+0x1c>
 8007e2c:	690f      	ldr	r7, [r1, #16]
 8007e2e:	2f00      	cmp	r7, #0
 8007e30:	d0a9      	beq.n	8007d86 <__sflush_r+0x1a>
 8007e32:	0793      	lsls	r3, r2, #30
 8007e34:	680e      	ldr	r6, [r1, #0]
 8007e36:	bf08      	it	eq
 8007e38:	694b      	ldreq	r3, [r1, #20]
 8007e3a:	600f      	str	r7, [r1, #0]
 8007e3c:	bf18      	it	ne
 8007e3e:	2300      	movne	r3, #0
 8007e40:	eba6 0807 	sub.w	r8, r6, r7
 8007e44:	608b      	str	r3, [r1, #8]
 8007e46:	f1b8 0f00 	cmp.w	r8, #0
 8007e4a:	dd9c      	ble.n	8007d86 <__sflush_r+0x1a>
 8007e4c:	6a21      	ldr	r1, [r4, #32]
 8007e4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e50:	4643      	mov	r3, r8
 8007e52:	463a      	mov	r2, r7
 8007e54:	4628      	mov	r0, r5
 8007e56:	47b0      	blx	r6
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	dc06      	bgt.n	8007e6a <__sflush_r+0xfe>
 8007e5c:	89a3      	ldrh	r3, [r4, #12]
 8007e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e62:	81a3      	strh	r3, [r4, #12]
 8007e64:	f04f 30ff 	mov.w	r0, #4294967295
 8007e68:	e78e      	b.n	8007d88 <__sflush_r+0x1c>
 8007e6a:	4407      	add	r7, r0
 8007e6c:	eba8 0800 	sub.w	r8, r8, r0
 8007e70:	e7e9      	b.n	8007e46 <__sflush_r+0xda>
 8007e72:	bf00      	nop
 8007e74:	20400001 	.word	0x20400001

08007e78 <_fflush_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	690b      	ldr	r3, [r1, #16]
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	460c      	mov	r4, r1
 8007e80:	b913      	cbnz	r3, 8007e88 <_fflush_r+0x10>
 8007e82:	2500      	movs	r5, #0
 8007e84:	4628      	mov	r0, r5
 8007e86:	bd38      	pop	{r3, r4, r5, pc}
 8007e88:	b118      	cbz	r0, 8007e92 <_fflush_r+0x1a>
 8007e8a:	6983      	ldr	r3, [r0, #24]
 8007e8c:	b90b      	cbnz	r3, 8007e92 <_fflush_r+0x1a>
 8007e8e:	f000 f899 	bl	8007fc4 <__sinit>
 8007e92:	4b14      	ldr	r3, [pc, #80]	; (8007ee4 <_fflush_r+0x6c>)
 8007e94:	429c      	cmp	r4, r3
 8007e96:	d11b      	bne.n	8007ed0 <_fflush_r+0x58>
 8007e98:	686c      	ldr	r4, [r5, #4]
 8007e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0ef      	beq.n	8007e82 <_fflush_r+0xa>
 8007ea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ea4:	07d0      	lsls	r0, r2, #31
 8007ea6:	d404      	bmi.n	8007eb2 <_fflush_r+0x3a>
 8007ea8:	0599      	lsls	r1, r3, #22
 8007eaa:	d402      	bmi.n	8007eb2 <_fflush_r+0x3a>
 8007eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eae:	f000 f94c 	bl	800814a <__retarget_lock_acquire_recursive>
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	f7ff ff59 	bl	8007d6c <__sflush_r>
 8007eba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ebc:	07da      	lsls	r2, r3, #31
 8007ebe:	4605      	mov	r5, r0
 8007ec0:	d4e0      	bmi.n	8007e84 <_fflush_r+0xc>
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	059b      	lsls	r3, r3, #22
 8007ec6:	d4dd      	bmi.n	8007e84 <_fflush_r+0xc>
 8007ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eca:	f000 f93f 	bl	800814c <__retarget_lock_release_recursive>
 8007ece:	e7d9      	b.n	8007e84 <_fflush_r+0xc>
 8007ed0:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <_fflush_r+0x70>)
 8007ed2:	429c      	cmp	r4, r3
 8007ed4:	d101      	bne.n	8007eda <_fflush_r+0x62>
 8007ed6:	68ac      	ldr	r4, [r5, #8]
 8007ed8:	e7df      	b.n	8007e9a <_fflush_r+0x22>
 8007eda:	4b04      	ldr	r3, [pc, #16]	; (8007eec <_fflush_r+0x74>)
 8007edc:	429c      	cmp	r4, r3
 8007ede:	bf08      	it	eq
 8007ee0:	68ec      	ldreq	r4, [r5, #12]
 8007ee2:	e7da      	b.n	8007e9a <_fflush_r+0x22>
 8007ee4:	08009968 	.word	0x08009968
 8007ee8:	08009988 	.word	0x08009988
 8007eec:	08009948 	.word	0x08009948

08007ef0 <fflush>:
 8007ef0:	4601      	mov	r1, r0
 8007ef2:	b920      	cbnz	r0, 8007efe <fflush+0xe>
 8007ef4:	4b04      	ldr	r3, [pc, #16]	; (8007f08 <fflush+0x18>)
 8007ef6:	4905      	ldr	r1, [pc, #20]	; (8007f0c <fflush+0x1c>)
 8007ef8:	6818      	ldr	r0, [r3, #0]
 8007efa:	f000 b8e1 	b.w	80080c0 <_fwalk_reent>
 8007efe:	4b04      	ldr	r3, [pc, #16]	; (8007f10 <fflush+0x20>)
 8007f00:	6818      	ldr	r0, [r3, #0]
 8007f02:	f7ff bfb9 	b.w	8007e78 <_fflush_r>
 8007f06:	bf00      	nop
 8007f08:	080099a8 	.word	0x080099a8
 8007f0c:	08007e79 	.word	0x08007e79
 8007f10:	20000178 	.word	0x20000178

08007f14 <std>:
 8007f14:	2300      	movs	r3, #0
 8007f16:	b510      	push	{r4, lr}
 8007f18:	4604      	mov	r4, r0
 8007f1a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f22:	6083      	str	r3, [r0, #8]
 8007f24:	8181      	strh	r1, [r0, #12]
 8007f26:	6643      	str	r3, [r0, #100]	; 0x64
 8007f28:	81c2      	strh	r2, [r0, #14]
 8007f2a:	6183      	str	r3, [r0, #24]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	2208      	movs	r2, #8
 8007f30:	305c      	adds	r0, #92	; 0x5c
 8007f32:	f000 f92b 	bl	800818c <memset>
 8007f36:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <std+0x38>)
 8007f38:	6263      	str	r3, [r4, #36]	; 0x24
 8007f3a:	4b05      	ldr	r3, [pc, #20]	; (8007f50 <std+0x3c>)
 8007f3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f3e:	4b05      	ldr	r3, [pc, #20]	; (8007f54 <std+0x40>)
 8007f40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f42:	4b05      	ldr	r3, [pc, #20]	; (8007f58 <std+0x44>)
 8007f44:	6224      	str	r4, [r4, #32]
 8007f46:	6323      	str	r3, [r4, #48]	; 0x30
 8007f48:	bd10      	pop	{r4, pc}
 8007f4a:	bf00      	nop
 8007f4c:	08008459 	.word	0x08008459
 8007f50:	0800847b 	.word	0x0800847b
 8007f54:	080084b3 	.word	0x080084b3
 8007f58:	080084d7 	.word	0x080084d7

08007f5c <_cleanup_r>:
 8007f5c:	4901      	ldr	r1, [pc, #4]	; (8007f64 <_cleanup_r+0x8>)
 8007f5e:	f000 b8af 	b.w	80080c0 <_fwalk_reent>
 8007f62:	bf00      	nop
 8007f64:	08007e79 	.word	0x08007e79

08007f68 <__sfmoreglue>:
 8007f68:	b570      	push	{r4, r5, r6, lr}
 8007f6a:	1e4a      	subs	r2, r1, #1
 8007f6c:	2568      	movs	r5, #104	; 0x68
 8007f6e:	4355      	muls	r5, r2
 8007f70:	460e      	mov	r6, r1
 8007f72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f76:	f000 f961 	bl	800823c <_malloc_r>
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	b140      	cbz	r0, 8007f90 <__sfmoreglue+0x28>
 8007f7e:	2100      	movs	r1, #0
 8007f80:	e9c0 1600 	strd	r1, r6, [r0]
 8007f84:	300c      	adds	r0, #12
 8007f86:	60a0      	str	r0, [r4, #8]
 8007f88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f8c:	f000 f8fe 	bl	800818c <memset>
 8007f90:	4620      	mov	r0, r4
 8007f92:	bd70      	pop	{r4, r5, r6, pc}

08007f94 <__sfp_lock_acquire>:
 8007f94:	4801      	ldr	r0, [pc, #4]	; (8007f9c <__sfp_lock_acquire+0x8>)
 8007f96:	f000 b8d8 	b.w	800814a <__retarget_lock_acquire_recursive>
 8007f9a:	bf00      	nop
 8007f9c:	200469dc 	.word	0x200469dc

08007fa0 <__sfp_lock_release>:
 8007fa0:	4801      	ldr	r0, [pc, #4]	; (8007fa8 <__sfp_lock_release+0x8>)
 8007fa2:	f000 b8d3 	b.w	800814c <__retarget_lock_release_recursive>
 8007fa6:	bf00      	nop
 8007fa8:	200469dc 	.word	0x200469dc

08007fac <__sinit_lock_acquire>:
 8007fac:	4801      	ldr	r0, [pc, #4]	; (8007fb4 <__sinit_lock_acquire+0x8>)
 8007fae:	f000 b8cc 	b.w	800814a <__retarget_lock_acquire_recursive>
 8007fb2:	bf00      	nop
 8007fb4:	200469d7 	.word	0x200469d7

08007fb8 <__sinit_lock_release>:
 8007fb8:	4801      	ldr	r0, [pc, #4]	; (8007fc0 <__sinit_lock_release+0x8>)
 8007fba:	f000 b8c7 	b.w	800814c <__retarget_lock_release_recursive>
 8007fbe:	bf00      	nop
 8007fc0:	200469d7 	.word	0x200469d7

08007fc4 <__sinit>:
 8007fc4:	b510      	push	{r4, lr}
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	f7ff fff0 	bl	8007fac <__sinit_lock_acquire>
 8007fcc:	69a3      	ldr	r3, [r4, #24]
 8007fce:	b11b      	cbz	r3, 8007fd8 <__sinit+0x14>
 8007fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fd4:	f7ff bff0 	b.w	8007fb8 <__sinit_lock_release>
 8007fd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007fdc:	6523      	str	r3, [r4, #80]	; 0x50
 8007fde:	4b13      	ldr	r3, [pc, #76]	; (800802c <__sinit+0x68>)
 8007fe0:	4a13      	ldr	r2, [pc, #76]	; (8008030 <__sinit+0x6c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007fe6:	42a3      	cmp	r3, r4
 8007fe8:	bf04      	itt	eq
 8007fea:	2301      	moveq	r3, #1
 8007fec:	61a3      	streq	r3, [r4, #24]
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f000 f820 	bl	8008034 <__sfp>
 8007ff4:	6060      	str	r0, [r4, #4]
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f000 f81c 	bl	8008034 <__sfp>
 8007ffc:	60a0      	str	r0, [r4, #8]
 8007ffe:	4620      	mov	r0, r4
 8008000:	f000 f818 	bl	8008034 <__sfp>
 8008004:	2200      	movs	r2, #0
 8008006:	60e0      	str	r0, [r4, #12]
 8008008:	2104      	movs	r1, #4
 800800a:	6860      	ldr	r0, [r4, #4]
 800800c:	f7ff ff82 	bl	8007f14 <std>
 8008010:	68a0      	ldr	r0, [r4, #8]
 8008012:	2201      	movs	r2, #1
 8008014:	2109      	movs	r1, #9
 8008016:	f7ff ff7d 	bl	8007f14 <std>
 800801a:	68e0      	ldr	r0, [r4, #12]
 800801c:	2202      	movs	r2, #2
 800801e:	2112      	movs	r1, #18
 8008020:	f7ff ff78 	bl	8007f14 <std>
 8008024:	2301      	movs	r3, #1
 8008026:	61a3      	str	r3, [r4, #24]
 8008028:	e7d2      	b.n	8007fd0 <__sinit+0xc>
 800802a:	bf00      	nop
 800802c:	080099a8 	.word	0x080099a8
 8008030:	08007f5d 	.word	0x08007f5d

08008034 <__sfp>:
 8008034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008036:	4607      	mov	r7, r0
 8008038:	f7ff ffac 	bl	8007f94 <__sfp_lock_acquire>
 800803c:	4b1e      	ldr	r3, [pc, #120]	; (80080b8 <__sfp+0x84>)
 800803e:	681e      	ldr	r6, [r3, #0]
 8008040:	69b3      	ldr	r3, [r6, #24]
 8008042:	b913      	cbnz	r3, 800804a <__sfp+0x16>
 8008044:	4630      	mov	r0, r6
 8008046:	f7ff ffbd 	bl	8007fc4 <__sinit>
 800804a:	3648      	adds	r6, #72	; 0x48
 800804c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008050:	3b01      	subs	r3, #1
 8008052:	d503      	bpl.n	800805c <__sfp+0x28>
 8008054:	6833      	ldr	r3, [r6, #0]
 8008056:	b30b      	cbz	r3, 800809c <__sfp+0x68>
 8008058:	6836      	ldr	r6, [r6, #0]
 800805a:	e7f7      	b.n	800804c <__sfp+0x18>
 800805c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008060:	b9d5      	cbnz	r5, 8008098 <__sfp+0x64>
 8008062:	4b16      	ldr	r3, [pc, #88]	; (80080bc <__sfp+0x88>)
 8008064:	60e3      	str	r3, [r4, #12]
 8008066:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800806a:	6665      	str	r5, [r4, #100]	; 0x64
 800806c:	f000 f86c 	bl	8008148 <__retarget_lock_init_recursive>
 8008070:	f7ff ff96 	bl	8007fa0 <__sfp_lock_release>
 8008074:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008078:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800807c:	6025      	str	r5, [r4, #0]
 800807e:	61a5      	str	r5, [r4, #24]
 8008080:	2208      	movs	r2, #8
 8008082:	4629      	mov	r1, r5
 8008084:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008088:	f000 f880 	bl	800818c <memset>
 800808c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008090:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008094:	4620      	mov	r0, r4
 8008096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008098:	3468      	adds	r4, #104	; 0x68
 800809a:	e7d9      	b.n	8008050 <__sfp+0x1c>
 800809c:	2104      	movs	r1, #4
 800809e:	4638      	mov	r0, r7
 80080a0:	f7ff ff62 	bl	8007f68 <__sfmoreglue>
 80080a4:	4604      	mov	r4, r0
 80080a6:	6030      	str	r0, [r6, #0]
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d1d5      	bne.n	8008058 <__sfp+0x24>
 80080ac:	f7ff ff78 	bl	8007fa0 <__sfp_lock_release>
 80080b0:	230c      	movs	r3, #12
 80080b2:	603b      	str	r3, [r7, #0]
 80080b4:	e7ee      	b.n	8008094 <__sfp+0x60>
 80080b6:	bf00      	nop
 80080b8:	080099a8 	.word	0x080099a8
 80080bc:	ffff0001 	.word	0xffff0001

080080c0 <_fwalk_reent>:
 80080c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080c4:	4606      	mov	r6, r0
 80080c6:	4688      	mov	r8, r1
 80080c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080cc:	2700      	movs	r7, #0
 80080ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080d2:	f1b9 0901 	subs.w	r9, r9, #1
 80080d6:	d505      	bpl.n	80080e4 <_fwalk_reent+0x24>
 80080d8:	6824      	ldr	r4, [r4, #0]
 80080da:	2c00      	cmp	r4, #0
 80080dc:	d1f7      	bne.n	80080ce <_fwalk_reent+0xe>
 80080de:	4638      	mov	r0, r7
 80080e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080e4:	89ab      	ldrh	r3, [r5, #12]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d907      	bls.n	80080fa <_fwalk_reent+0x3a>
 80080ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080ee:	3301      	adds	r3, #1
 80080f0:	d003      	beq.n	80080fa <_fwalk_reent+0x3a>
 80080f2:	4629      	mov	r1, r5
 80080f4:	4630      	mov	r0, r6
 80080f6:	47c0      	blx	r8
 80080f8:	4307      	orrs	r7, r0
 80080fa:	3568      	adds	r5, #104	; 0x68
 80080fc:	e7e9      	b.n	80080d2 <_fwalk_reent+0x12>
	...

08008100 <__libc_init_array>:
 8008100:	b570      	push	{r4, r5, r6, lr}
 8008102:	4d0d      	ldr	r5, [pc, #52]	; (8008138 <__libc_init_array+0x38>)
 8008104:	4c0d      	ldr	r4, [pc, #52]	; (800813c <__libc_init_array+0x3c>)
 8008106:	1b64      	subs	r4, r4, r5
 8008108:	10a4      	asrs	r4, r4, #2
 800810a:	2600      	movs	r6, #0
 800810c:	42a6      	cmp	r6, r4
 800810e:	d109      	bne.n	8008124 <__libc_init_array+0x24>
 8008110:	4d0b      	ldr	r5, [pc, #44]	; (8008140 <__libc_init_array+0x40>)
 8008112:	4c0c      	ldr	r4, [pc, #48]	; (8008144 <__libc_init_array+0x44>)
 8008114:	f000 fee0 	bl	8008ed8 <_init>
 8008118:	1b64      	subs	r4, r4, r5
 800811a:	10a4      	asrs	r4, r4, #2
 800811c:	2600      	movs	r6, #0
 800811e:	42a6      	cmp	r6, r4
 8008120:	d105      	bne.n	800812e <__libc_init_array+0x2e>
 8008122:	bd70      	pop	{r4, r5, r6, pc}
 8008124:	f855 3b04 	ldr.w	r3, [r5], #4
 8008128:	4798      	blx	r3
 800812a:	3601      	adds	r6, #1
 800812c:	e7ee      	b.n	800810c <__libc_init_array+0xc>
 800812e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008132:	4798      	blx	r3
 8008134:	3601      	adds	r6, #1
 8008136:	e7f2      	b.n	800811e <__libc_init_array+0x1e>
 8008138:	080099e0 	.word	0x080099e0
 800813c:	080099e0 	.word	0x080099e0
 8008140:	080099e0 	.word	0x080099e0
 8008144:	080099e4 	.word	0x080099e4

08008148 <__retarget_lock_init_recursive>:
 8008148:	4770      	bx	lr

0800814a <__retarget_lock_acquire_recursive>:
 800814a:	4770      	bx	lr

0800814c <__retarget_lock_release_recursive>:
 800814c:	4770      	bx	lr
	...

08008150 <malloc>:
 8008150:	4b02      	ldr	r3, [pc, #8]	; (800815c <malloc+0xc>)
 8008152:	4601      	mov	r1, r0
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	f000 b871 	b.w	800823c <_malloc_r>
 800815a:	bf00      	nop
 800815c:	20000178 	.word	0x20000178

08008160 <free>:
 8008160:	4b02      	ldr	r3, [pc, #8]	; (800816c <free+0xc>)
 8008162:	4601      	mov	r1, r0
 8008164:	6818      	ldr	r0, [r3, #0]
 8008166:	f000 b819 	b.w	800819c <_free_r>
 800816a:	bf00      	nop
 800816c:	20000178 	.word	0x20000178

08008170 <memcpy>:
 8008170:	440a      	add	r2, r1
 8008172:	4291      	cmp	r1, r2
 8008174:	f100 33ff 	add.w	r3, r0, #4294967295
 8008178:	d100      	bne.n	800817c <memcpy+0xc>
 800817a:	4770      	bx	lr
 800817c:	b510      	push	{r4, lr}
 800817e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008182:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008186:	4291      	cmp	r1, r2
 8008188:	d1f9      	bne.n	800817e <memcpy+0xe>
 800818a:	bd10      	pop	{r4, pc}

0800818c <memset>:
 800818c:	4402      	add	r2, r0
 800818e:	4603      	mov	r3, r0
 8008190:	4293      	cmp	r3, r2
 8008192:	d100      	bne.n	8008196 <memset+0xa>
 8008194:	4770      	bx	lr
 8008196:	f803 1b01 	strb.w	r1, [r3], #1
 800819a:	e7f9      	b.n	8008190 <memset+0x4>

0800819c <_free_r>:
 800819c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800819e:	2900      	cmp	r1, #0
 80081a0:	d048      	beq.n	8008234 <_free_r+0x98>
 80081a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081a6:	9001      	str	r0, [sp, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f1a1 0404 	sub.w	r4, r1, #4
 80081ae:	bfb8      	it	lt
 80081b0:	18e4      	addlt	r4, r4, r3
 80081b2:	f000 faed 	bl	8008790 <__malloc_lock>
 80081b6:	4a20      	ldr	r2, [pc, #128]	; (8008238 <_free_r+0x9c>)
 80081b8:	9801      	ldr	r0, [sp, #4]
 80081ba:	6813      	ldr	r3, [r2, #0]
 80081bc:	4615      	mov	r5, r2
 80081be:	b933      	cbnz	r3, 80081ce <_free_r+0x32>
 80081c0:	6063      	str	r3, [r4, #4]
 80081c2:	6014      	str	r4, [r2, #0]
 80081c4:	b003      	add	sp, #12
 80081c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081ca:	f000 bae7 	b.w	800879c <__malloc_unlock>
 80081ce:	42a3      	cmp	r3, r4
 80081d0:	d90b      	bls.n	80081ea <_free_r+0x4e>
 80081d2:	6821      	ldr	r1, [r4, #0]
 80081d4:	1862      	adds	r2, r4, r1
 80081d6:	4293      	cmp	r3, r2
 80081d8:	bf04      	itt	eq
 80081da:	681a      	ldreq	r2, [r3, #0]
 80081dc:	685b      	ldreq	r3, [r3, #4]
 80081de:	6063      	str	r3, [r4, #4]
 80081e0:	bf04      	itt	eq
 80081e2:	1852      	addeq	r2, r2, r1
 80081e4:	6022      	streq	r2, [r4, #0]
 80081e6:	602c      	str	r4, [r5, #0]
 80081e8:	e7ec      	b.n	80081c4 <_free_r+0x28>
 80081ea:	461a      	mov	r2, r3
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	b10b      	cbz	r3, 80081f4 <_free_r+0x58>
 80081f0:	42a3      	cmp	r3, r4
 80081f2:	d9fa      	bls.n	80081ea <_free_r+0x4e>
 80081f4:	6811      	ldr	r1, [r2, #0]
 80081f6:	1855      	adds	r5, r2, r1
 80081f8:	42a5      	cmp	r5, r4
 80081fa:	d10b      	bne.n	8008214 <_free_r+0x78>
 80081fc:	6824      	ldr	r4, [r4, #0]
 80081fe:	4421      	add	r1, r4
 8008200:	1854      	adds	r4, r2, r1
 8008202:	42a3      	cmp	r3, r4
 8008204:	6011      	str	r1, [r2, #0]
 8008206:	d1dd      	bne.n	80081c4 <_free_r+0x28>
 8008208:	681c      	ldr	r4, [r3, #0]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	6053      	str	r3, [r2, #4]
 800820e:	4421      	add	r1, r4
 8008210:	6011      	str	r1, [r2, #0]
 8008212:	e7d7      	b.n	80081c4 <_free_r+0x28>
 8008214:	d902      	bls.n	800821c <_free_r+0x80>
 8008216:	230c      	movs	r3, #12
 8008218:	6003      	str	r3, [r0, #0]
 800821a:	e7d3      	b.n	80081c4 <_free_r+0x28>
 800821c:	6825      	ldr	r5, [r4, #0]
 800821e:	1961      	adds	r1, r4, r5
 8008220:	428b      	cmp	r3, r1
 8008222:	bf04      	itt	eq
 8008224:	6819      	ldreq	r1, [r3, #0]
 8008226:	685b      	ldreq	r3, [r3, #4]
 8008228:	6063      	str	r3, [r4, #4]
 800822a:	bf04      	itt	eq
 800822c:	1949      	addeq	r1, r1, r5
 800822e:	6021      	streq	r1, [r4, #0]
 8008230:	6054      	str	r4, [r2, #4]
 8008232:	e7c7      	b.n	80081c4 <_free_r+0x28>
 8008234:	b003      	add	sp, #12
 8008236:	bd30      	pop	{r4, r5, pc}
 8008238:	200015fc 	.word	0x200015fc

0800823c <_malloc_r>:
 800823c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823e:	1ccd      	adds	r5, r1, #3
 8008240:	f025 0503 	bic.w	r5, r5, #3
 8008244:	3508      	adds	r5, #8
 8008246:	2d0c      	cmp	r5, #12
 8008248:	bf38      	it	cc
 800824a:	250c      	movcc	r5, #12
 800824c:	2d00      	cmp	r5, #0
 800824e:	4606      	mov	r6, r0
 8008250:	db01      	blt.n	8008256 <_malloc_r+0x1a>
 8008252:	42a9      	cmp	r1, r5
 8008254:	d903      	bls.n	800825e <_malloc_r+0x22>
 8008256:	230c      	movs	r3, #12
 8008258:	6033      	str	r3, [r6, #0]
 800825a:	2000      	movs	r0, #0
 800825c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800825e:	f000 fa97 	bl	8008790 <__malloc_lock>
 8008262:	4921      	ldr	r1, [pc, #132]	; (80082e8 <_malloc_r+0xac>)
 8008264:	680a      	ldr	r2, [r1, #0]
 8008266:	4614      	mov	r4, r2
 8008268:	b99c      	cbnz	r4, 8008292 <_malloc_r+0x56>
 800826a:	4f20      	ldr	r7, [pc, #128]	; (80082ec <_malloc_r+0xb0>)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	b923      	cbnz	r3, 800827a <_malloc_r+0x3e>
 8008270:	4621      	mov	r1, r4
 8008272:	4630      	mov	r0, r6
 8008274:	f000 f8e0 	bl	8008438 <_sbrk_r>
 8008278:	6038      	str	r0, [r7, #0]
 800827a:	4629      	mov	r1, r5
 800827c:	4630      	mov	r0, r6
 800827e:	f000 f8db 	bl	8008438 <_sbrk_r>
 8008282:	1c43      	adds	r3, r0, #1
 8008284:	d123      	bne.n	80082ce <_malloc_r+0x92>
 8008286:	230c      	movs	r3, #12
 8008288:	6033      	str	r3, [r6, #0]
 800828a:	4630      	mov	r0, r6
 800828c:	f000 fa86 	bl	800879c <__malloc_unlock>
 8008290:	e7e3      	b.n	800825a <_malloc_r+0x1e>
 8008292:	6823      	ldr	r3, [r4, #0]
 8008294:	1b5b      	subs	r3, r3, r5
 8008296:	d417      	bmi.n	80082c8 <_malloc_r+0x8c>
 8008298:	2b0b      	cmp	r3, #11
 800829a:	d903      	bls.n	80082a4 <_malloc_r+0x68>
 800829c:	6023      	str	r3, [r4, #0]
 800829e:	441c      	add	r4, r3
 80082a0:	6025      	str	r5, [r4, #0]
 80082a2:	e004      	b.n	80082ae <_malloc_r+0x72>
 80082a4:	6863      	ldr	r3, [r4, #4]
 80082a6:	42a2      	cmp	r2, r4
 80082a8:	bf0c      	ite	eq
 80082aa:	600b      	streq	r3, [r1, #0]
 80082ac:	6053      	strne	r3, [r2, #4]
 80082ae:	4630      	mov	r0, r6
 80082b0:	f000 fa74 	bl	800879c <__malloc_unlock>
 80082b4:	f104 000b 	add.w	r0, r4, #11
 80082b8:	1d23      	adds	r3, r4, #4
 80082ba:	f020 0007 	bic.w	r0, r0, #7
 80082be:	1ac2      	subs	r2, r0, r3
 80082c0:	d0cc      	beq.n	800825c <_malloc_r+0x20>
 80082c2:	1a1b      	subs	r3, r3, r0
 80082c4:	50a3      	str	r3, [r4, r2]
 80082c6:	e7c9      	b.n	800825c <_malloc_r+0x20>
 80082c8:	4622      	mov	r2, r4
 80082ca:	6864      	ldr	r4, [r4, #4]
 80082cc:	e7cc      	b.n	8008268 <_malloc_r+0x2c>
 80082ce:	1cc4      	adds	r4, r0, #3
 80082d0:	f024 0403 	bic.w	r4, r4, #3
 80082d4:	42a0      	cmp	r0, r4
 80082d6:	d0e3      	beq.n	80082a0 <_malloc_r+0x64>
 80082d8:	1a21      	subs	r1, r4, r0
 80082da:	4630      	mov	r0, r6
 80082dc:	f000 f8ac 	bl	8008438 <_sbrk_r>
 80082e0:	3001      	adds	r0, #1
 80082e2:	d1dd      	bne.n	80082a0 <_malloc_r+0x64>
 80082e4:	e7cf      	b.n	8008286 <_malloc_r+0x4a>
 80082e6:	bf00      	nop
 80082e8:	200015fc 	.word	0x200015fc
 80082ec:	20001600 	.word	0x20001600

080082f0 <iprintf>:
 80082f0:	b40f      	push	{r0, r1, r2, r3}
 80082f2:	4b0a      	ldr	r3, [pc, #40]	; (800831c <iprintf+0x2c>)
 80082f4:	b513      	push	{r0, r1, r4, lr}
 80082f6:	681c      	ldr	r4, [r3, #0]
 80082f8:	b124      	cbz	r4, 8008304 <iprintf+0x14>
 80082fa:	69a3      	ldr	r3, [r4, #24]
 80082fc:	b913      	cbnz	r3, 8008304 <iprintf+0x14>
 80082fe:	4620      	mov	r0, r4
 8008300:	f7ff fe60 	bl	8007fc4 <__sinit>
 8008304:	ab05      	add	r3, sp, #20
 8008306:	9a04      	ldr	r2, [sp, #16]
 8008308:	68a1      	ldr	r1, [r4, #8]
 800830a:	9301      	str	r3, [sp, #4]
 800830c:	4620      	mov	r0, r4
 800830e:	f000 fa75 	bl	80087fc <_vfiprintf_r>
 8008312:	b002      	add	sp, #8
 8008314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008318:	b004      	add	sp, #16
 800831a:	4770      	bx	lr
 800831c:	20000178 	.word	0x20000178

08008320 <putchar>:
 8008320:	4b09      	ldr	r3, [pc, #36]	; (8008348 <putchar+0x28>)
 8008322:	b513      	push	{r0, r1, r4, lr}
 8008324:	681c      	ldr	r4, [r3, #0]
 8008326:	4601      	mov	r1, r0
 8008328:	b134      	cbz	r4, 8008338 <putchar+0x18>
 800832a:	69a3      	ldr	r3, [r4, #24]
 800832c:	b923      	cbnz	r3, 8008338 <putchar+0x18>
 800832e:	9001      	str	r0, [sp, #4]
 8008330:	4620      	mov	r0, r4
 8008332:	f7ff fe47 	bl	8007fc4 <__sinit>
 8008336:	9901      	ldr	r1, [sp, #4]
 8008338:	68a2      	ldr	r2, [r4, #8]
 800833a:	4620      	mov	r0, r4
 800833c:	b002      	add	sp, #8
 800833e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008342:	f000 bd1f 	b.w	8008d84 <_putc_r>
 8008346:	bf00      	nop
 8008348:	20000178 	.word	0x20000178

0800834c <_puts_r>:
 800834c:	b570      	push	{r4, r5, r6, lr}
 800834e:	460e      	mov	r6, r1
 8008350:	4605      	mov	r5, r0
 8008352:	b118      	cbz	r0, 800835c <_puts_r+0x10>
 8008354:	6983      	ldr	r3, [r0, #24]
 8008356:	b90b      	cbnz	r3, 800835c <_puts_r+0x10>
 8008358:	f7ff fe34 	bl	8007fc4 <__sinit>
 800835c:	69ab      	ldr	r3, [r5, #24]
 800835e:	68ac      	ldr	r4, [r5, #8]
 8008360:	b913      	cbnz	r3, 8008368 <_puts_r+0x1c>
 8008362:	4628      	mov	r0, r5
 8008364:	f7ff fe2e 	bl	8007fc4 <__sinit>
 8008368:	4b2c      	ldr	r3, [pc, #176]	; (800841c <_puts_r+0xd0>)
 800836a:	429c      	cmp	r4, r3
 800836c:	d120      	bne.n	80083b0 <_puts_r+0x64>
 800836e:	686c      	ldr	r4, [r5, #4]
 8008370:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008372:	07db      	lsls	r3, r3, #31
 8008374:	d405      	bmi.n	8008382 <_puts_r+0x36>
 8008376:	89a3      	ldrh	r3, [r4, #12]
 8008378:	0598      	lsls	r0, r3, #22
 800837a:	d402      	bmi.n	8008382 <_puts_r+0x36>
 800837c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800837e:	f7ff fee4 	bl	800814a <__retarget_lock_acquire_recursive>
 8008382:	89a3      	ldrh	r3, [r4, #12]
 8008384:	0719      	lsls	r1, r3, #28
 8008386:	d51d      	bpl.n	80083c4 <_puts_r+0x78>
 8008388:	6923      	ldr	r3, [r4, #16]
 800838a:	b1db      	cbz	r3, 80083c4 <_puts_r+0x78>
 800838c:	3e01      	subs	r6, #1
 800838e:	68a3      	ldr	r3, [r4, #8]
 8008390:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008394:	3b01      	subs	r3, #1
 8008396:	60a3      	str	r3, [r4, #8]
 8008398:	bb39      	cbnz	r1, 80083ea <_puts_r+0x9e>
 800839a:	2b00      	cmp	r3, #0
 800839c:	da38      	bge.n	8008410 <_puts_r+0xc4>
 800839e:	4622      	mov	r2, r4
 80083a0:	210a      	movs	r1, #10
 80083a2:	4628      	mov	r0, r5
 80083a4:	f000 f89c 	bl	80084e0 <__swbuf_r>
 80083a8:	3001      	adds	r0, #1
 80083aa:	d011      	beq.n	80083d0 <_puts_r+0x84>
 80083ac:	250a      	movs	r5, #10
 80083ae:	e011      	b.n	80083d4 <_puts_r+0x88>
 80083b0:	4b1b      	ldr	r3, [pc, #108]	; (8008420 <_puts_r+0xd4>)
 80083b2:	429c      	cmp	r4, r3
 80083b4:	d101      	bne.n	80083ba <_puts_r+0x6e>
 80083b6:	68ac      	ldr	r4, [r5, #8]
 80083b8:	e7da      	b.n	8008370 <_puts_r+0x24>
 80083ba:	4b1a      	ldr	r3, [pc, #104]	; (8008424 <_puts_r+0xd8>)
 80083bc:	429c      	cmp	r4, r3
 80083be:	bf08      	it	eq
 80083c0:	68ec      	ldreq	r4, [r5, #12]
 80083c2:	e7d5      	b.n	8008370 <_puts_r+0x24>
 80083c4:	4621      	mov	r1, r4
 80083c6:	4628      	mov	r0, r5
 80083c8:	f000 f8ee 	bl	80085a8 <__swsetup_r>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d0dd      	beq.n	800838c <_puts_r+0x40>
 80083d0:	f04f 35ff 	mov.w	r5, #4294967295
 80083d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083d6:	07da      	lsls	r2, r3, #31
 80083d8:	d405      	bmi.n	80083e6 <_puts_r+0x9a>
 80083da:	89a3      	ldrh	r3, [r4, #12]
 80083dc:	059b      	lsls	r3, r3, #22
 80083de:	d402      	bmi.n	80083e6 <_puts_r+0x9a>
 80083e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083e2:	f7ff feb3 	bl	800814c <__retarget_lock_release_recursive>
 80083e6:	4628      	mov	r0, r5
 80083e8:	bd70      	pop	{r4, r5, r6, pc}
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	da04      	bge.n	80083f8 <_puts_r+0xac>
 80083ee:	69a2      	ldr	r2, [r4, #24]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	dc06      	bgt.n	8008402 <_puts_r+0xb6>
 80083f4:	290a      	cmp	r1, #10
 80083f6:	d004      	beq.n	8008402 <_puts_r+0xb6>
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	1c5a      	adds	r2, r3, #1
 80083fc:	6022      	str	r2, [r4, #0]
 80083fe:	7019      	strb	r1, [r3, #0]
 8008400:	e7c5      	b.n	800838e <_puts_r+0x42>
 8008402:	4622      	mov	r2, r4
 8008404:	4628      	mov	r0, r5
 8008406:	f000 f86b 	bl	80084e0 <__swbuf_r>
 800840a:	3001      	adds	r0, #1
 800840c:	d1bf      	bne.n	800838e <_puts_r+0x42>
 800840e:	e7df      	b.n	80083d0 <_puts_r+0x84>
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	250a      	movs	r5, #10
 8008414:	1c5a      	adds	r2, r3, #1
 8008416:	6022      	str	r2, [r4, #0]
 8008418:	701d      	strb	r5, [r3, #0]
 800841a:	e7db      	b.n	80083d4 <_puts_r+0x88>
 800841c:	08009968 	.word	0x08009968
 8008420:	08009988 	.word	0x08009988
 8008424:	08009948 	.word	0x08009948

08008428 <puts>:
 8008428:	4b02      	ldr	r3, [pc, #8]	; (8008434 <puts+0xc>)
 800842a:	4601      	mov	r1, r0
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	f7ff bf8d 	b.w	800834c <_puts_r>
 8008432:	bf00      	nop
 8008434:	20000178 	.word	0x20000178

08008438 <_sbrk_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4d06      	ldr	r5, [pc, #24]	; (8008454 <_sbrk_r+0x1c>)
 800843c:	2300      	movs	r3, #0
 800843e:	4604      	mov	r4, r0
 8008440:	4608      	mov	r0, r1
 8008442:	602b      	str	r3, [r5, #0]
 8008444:	f000 fd3a 	bl	8008ebc <_sbrk>
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	d102      	bne.n	8008452 <_sbrk_r+0x1a>
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	b103      	cbz	r3, 8008452 <_sbrk_r+0x1a>
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	200469e0 	.word	0x200469e0

08008458 <__sread>:
 8008458:	b510      	push	{r4, lr}
 800845a:	460c      	mov	r4, r1
 800845c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008460:	f000 fcd8 	bl	8008e14 <_read_r>
 8008464:	2800      	cmp	r0, #0
 8008466:	bfab      	itete	ge
 8008468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800846a:	89a3      	ldrhlt	r3, [r4, #12]
 800846c:	181b      	addge	r3, r3, r0
 800846e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008472:	bfac      	ite	ge
 8008474:	6563      	strge	r3, [r4, #84]	; 0x54
 8008476:	81a3      	strhlt	r3, [r4, #12]
 8008478:	bd10      	pop	{r4, pc}

0800847a <__swrite>:
 800847a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800847e:	461f      	mov	r7, r3
 8008480:	898b      	ldrh	r3, [r1, #12]
 8008482:	05db      	lsls	r3, r3, #23
 8008484:	4605      	mov	r5, r0
 8008486:	460c      	mov	r4, r1
 8008488:	4616      	mov	r6, r2
 800848a:	d505      	bpl.n	8008498 <__swrite+0x1e>
 800848c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008490:	2302      	movs	r3, #2
 8008492:	2200      	movs	r2, #0
 8008494:	f000 f906 	bl	80086a4 <_lseek_r>
 8008498:	89a3      	ldrh	r3, [r4, #12]
 800849a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800849e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084a2:	81a3      	strh	r3, [r4, #12]
 80084a4:	4632      	mov	r2, r6
 80084a6:	463b      	mov	r3, r7
 80084a8:	4628      	mov	r0, r5
 80084aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084ae:	f000 b869 	b.w	8008584 <_write_r>

080084b2 <__sseek>:
 80084b2:	b510      	push	{r4, lr}
 80084b4:	460c      	mov	r4, r1
 80084b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ba:	f000 f8f3 	bl	80086a4 <_lseek_r>
 80084be:	1c43      	adds	r3, r0, #1
 80084c0:	89a3      	ldrh	r3, [r4, #12]
 80084c2:	bf15      	itete	ne
 80084c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80084c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80084ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084ce:	81a3      	strheq	r3, [r4, #12]
 80084d0:	bf18      	it	ne
 80084d2:	81a3      	strhne	r3, [r4, #12]
 80084d4:	bd10      	pop	{r4, pc}

080084d6 <__sclose>:
 80084d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084da:	f000 b8d3 	b.w	8008684 <_close_r>
	...

080084e0 <__swbuf_r>:
 80084e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e2:	460e      	mov	r6, r1
 80084e4:	4614      	mov	r4, r2
 80084e6:	4605      	mov	r5, r0
 80084e8:	b118      	cbz	r0, 80084f2 <__swbuf_r+0x12>
 80084ea:	6983      	ldr	r3, [r0, #24]
 80084ec:	b90b      	cbnz	r3, 80084f2 <__swbuf_r+0x12>
 80084ee:	f7ff fd69 	bl	8007fc4 <__sinit>
 80084f2:	4b21      	ldr	r3, [pc, #132]	; (8008578 <__swbuf_r+0x98>)
 80084f4:	429c      	cmp	r4, r3
 80084f6:	d12b      	bne.n	8008550 <__swbuf_r+0x70>
 80084f8:	686c      	ldr	r4, [r5, #4]
 80084fa:	69a3      	ldr	r3, [r4, #24]
 80084fc:	60a3      	str	r3, [r4, #8]
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	071a      	lsls	r2, r3, #28
 8008502:	d52f      	bpl.n	8008564 <__swbuf_r+0x84>
 8008504:	6923      	ldr	r3, [r4, #16]
 8008506:	b36b      	cbz	r3, 8008564 <__swbuf_r+0x84>
 8008508:	6923      	ldr	r3, [r4, #16]
 800850a:	6820      	ldr	r0, [r4, #0]
 800850c:	1ac0      	subs	r0, r0, r3
 800850e:	6963      	ldr	r3, [r4, #20]
 8008510:	b2f6      	uxtb	r6, r6
 8008512:	4283      	cmp	r3, r0
 8008514:	4637      	mov	r7, r6
 8008516:	dc04      	bgt.n	8008522 <__swbuf_r+0x42>
 8008518:	4621      	mov	r1, r4
 800851a:	4628      	mov	r0, r5
 800851c:	f7ff fcac 	bl	8007e78 <_fflush_r>
 8008520:	bb30      	cbnz	r0, 8008570 <__swbuf_r+0x90>
 8008522:	68a3      	ldr	r3, [r4, #8]
 8008524:	3b01      	subs	r3, #1
 8008526:	60a3      	str	r3, [r4, #8]
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	6022      	str	r2, [r4, #0]
 800852e:	701e      	strb	r6, [r3, #0]
 8008530:	6963      	ldr	r3, [r4, #20]
 8008532:	3001      	adds	r0, #1
 8008534:	4283      	cmp	r3, r0
 8008536:	d004      	beq.n	8008542 <__swbuf_r+0x62>
 8008538:	89a3      	ldrh	r3, [r4, #12]
 800853a:	07db      	lsls	r3, r3, #31
 800853c:	d506      	bpl.n	800854c <__swbuf_r+0x6c>
 800853e:	2e0a      	cmp	r6, #10
 8008540:	d104      	bne.n	800854c <__swbuf_r+0x6c>
 8008542:	4621      	mov	r1, r4
 8008544:	4628      	mov	r0, r5
 8008546:	f7ff fc97 	bl	8007e78 <_fflush_r>
 800854a:	b988      	cbnz	r0, 8008570 <__swbuf_r+0x90>
 800854c:	4638      	mov	r0, r7
 800854e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008550:	4b0a      	ldr	r3, [pc, #40]	; (800857c <__swbuf_r+0x9c>)
 8008552:	429c      	cmp	r4, r3
 8008554:	d101      	bne.n	800855a <__swbuf_r+0x7a>
 8008556:	68ac      	ldr	r4, [r5, #8]
 8008558:	e7cf      	b.n	80084fa <__swbuf_r+0x1a>
 800855a:	4b09      	ldr	r3, [pc, #36]	; (8008580 <__swbuf_r+0xa0>)
 800855c:	429c      	cmp	r4, r3
 800855e:	bf08      	it	eq
 8008560:	68ec      	ldreq	r4, [r5, #12]
 8008562:	e7ca      	b.n	80084fa <__swbuf_r+0x1a>
 8008564:	4621      	mov	r1, r4
 8008566:	4628      	mov	r0, r5
 8008568:	f000 f81e 	bl	80085a8 <__swsetup_r>
 800856c:	2800      	cmp	r0, #0
 800856e:	d0cb      	beq.n	8008508 <__swbuf_r+0x28>
 8008570:	f04f 37ff 	mov.w	r7, #4294967295
 8008574:	e7ea      	b.n	800854c <__swbuf_r+0x6c>
 8008576:	bf00      	nop
 8008578:	08009968 	.word	0x08009968
 800857c:	08009988 	.word	0x08009988
 8008580:	08009948 	.word	0x08009948

08008584 <_write_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	4d07      	ldr	r5, [pc, #28]	; (80085a4 <_write_r+0x20>)
 8008588:	4604      	mov	r4, r0
 800858a:	4608      	mov	r0, r1
 800858c:	4611      	mov	r1, r2
 800858e:	2200      	movs	r2, #0
 8008590:	602a      	str	r2, [r5, #0]
 8008592:	461a      	mov	r2, r3
 8008594:	f7ff f97a 	bl	800788c <_write>
 8008598:	1c43      	adds	r3, r0, #1
 800859a:	d102      	bne.n	80085a2 <_write_r+0x1e>
 800859c:	682b      	ldr	r3, [r5, #0]
 800859e:	b103      	cbz	r3, 80085a2 <_write_r+0x1e>
 80085a0:	6023      	str	r3, [r4, #0]
 80085a2:	bd38      	pop	{r3, r4, r5, pc}
 80085a4:	200469e0 	.word	0x200469e0

080085a8 <__swsetup_r>:
 80085a8:	4b32      	ldr	r3, [pc, #200]	; (8008674 <__swsetup_r+0xcc>)
 80085aa:	b570      	push	{r4, r5, r6, lr}
 80085ac:	681d      	ldr	r5, [r3, #0]
 80085ae:	4606      	mov	r6, r0
 80085b0:	460c      	mov	r4, r1
 80085b2:	b125      	cbz	r5, 80085be <__swsetup_r+0x16>
 80085b4:	69ab      	ldr	r3, [r5, #24]
 80085b6:	b913      	cbnz	r3, 80085be <__swsetup_r+0x16>
 80085b8:	4628      	mov	r0, r5
 80085ba:	f7ff fd03 	bl	8007fc4 <__sinit>
 80085be:	4b2e      	ldr	r3, [pc, #184]	; (8008678 <__swsetup_r+0xd0>)
 80085c0:	429c      	cmp	r4, r3
 80085c2:	d10f      	bne.n	80085e4 <__swsetup_r+0x3c>
 80085c4:	686c      	ldr	r4, [r5, #4]
 80085c6:	89a3      	ldrh	r3, [r4, #12]
 80085c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085cc:	0719      	lsls	r1, r3, #28
 80085ce:	d42c      	bmi.n	800862a <__swsetup_r+0x82>
 80085d0:	06dd      	lsls	r5, r3, #27
 80085d2:	d411      	bmi.n	80085f8 <__swsetup_r+0x50>
 80085d4:	2309      	movs	r3, #9
 80085d6:	6033      	str	r3, [r6, #0]
 80085d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085dc:	81a3      	strh	r3, [r4, #12]
 80085de:	f04f 30ff 	mov.w	r0, #4294967295
 80085e2:	e03e      	b.n	8008662 <__swsetup_r+0xba>
 80085e4:	4b25      	ldr	r3, [pc, #148]	; (800867c <__swsetup_r+0xd4>)
 80085e6:	429c      	cmp	r4, r3
 80085e8:	d101      	bne.n	80085ee <__swsetup_r+0x46>
 80085ea:	68ac      	ldr	r4, [r5, #8]
 80085ec:	e7eb      	b.n	80085c6 <__swsetup_r+0x1e>
 80085ee:	4b24      	ldr	r3, [pc, #144]	; (8008680 <__swsetup_r+0xd8>)
 80085f0:	429c      	cmp	r4, r3
 80085f2:	bf08      	it	eq
 80085f4:	68ec      	ldreq	r4, [r5, #12]
 80085f6:	e7e6      	b.n	80085c6 <__swsetup_r+0x1e>
 80085f8:	0758      	lsls	r0, r3, #29
 80085fa:	d512      	bpl.n	8008622 <__swsetup_r+0x7a>
 80085fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085fe:	b141      	cbz	r1, 8008612 <__swsetup_r+0x6a>
 8008600:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008604:	4299      	cmp	r1, r3
 8008606:	d002      	beq.n	800860e <__swsetup_r+0x66>
 8008608:	4630      	mov	r0, r6
 800860a:	f7ff fdc7 	bl	800819c <_free_r>
 800860e:	2300      	movs	r3, #0
 8008610:	6363      	str	r3, [r4, #52]	; 0x34
 8008612:	89a3      	ldrh	r3, [r4, #12]
 8008614:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008618:	81a3      	strh	r3, [r4, #12]
 800861a:	2300      	movs	r3, #0
 800861c:	6063      	str	r3, [r4, #4]
 800861e:	6923      	ldr	r3, [r4, #16]
 8008620:	6023      	str	r3, [r4, #0]
 8008622:	89a3      	ldrh	r3, [r4, #12]
 8008624:	f043 0308 	orr.w	r3, r3, #8
 8008628:	81a3      	strh	r3, [r4, #12]
 800862a:	6923      	ldr	r3, [r4, #16]
 800862c:	b94b      	cbnz	r3, 8008642 <__swsetup_r+0x9a>
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008638:	d003      	beq.n	8008642 <__swsetup_r+0x9a>
 800863a:	4621      	mov	r1, r4
 800863c:	4630      	mov	r0, r6
 800863e:	f000 f867 	bl	8008710 <__smakebuf_r>
 8008642:	89a0      	ldrh	r0, [r4, #12]
 8008644:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008648:	f010 0301 	ands.w	r3, r0, #1
 800864c:	d00a      	beq.n	8008664 <__swsetup_r+0xbc>
 800864e:	2300      	movs	r3, #0
 8008650:	60a3      	str	r3, [r4, #8]
 8008652:	6963      	ldr	r3, [r4, #20]
 8008654:	425b      	negs	r3, r3
 8008656:	61a3      	str	r3, [r4, #24]
 8008658:	6923      	ldr	r3, [r4, #16]
 800865a:	b943      	cbnz	r3, 800866e <__swsetup_r+0xc6>
 800865c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008660:	d1ba      	bne.n	80085d8 <__swsetup_r+0x30>
 8008662:	bd70      	pop	{r4, r5, r6, pc}
 8008664:	0781      	lsls	r1, r0, #30
 8008666:	bf58      	it	pl
 8008668:	6963      	ldrpl	r3, [r4, #20]
 800866a:	60a3      	str	r3, [r4, #8]
 800866c:	e7f4      	b.n	8008658 <__swsetup_r+0xb0>
 800866e:	2000      	movs	r0, #0
 8008670:	e7f7      	b.n	8008662 <__swsetup_r+0xba>
 8008672:	bf00      	nop
 8008674:	20000178 	.word	0x20000178
 8008678:	08009968 	.word	0x08009968
 800867c:	08009988 	.word	0x08009988
 8008680:	08009948 	.word	0x08009948

08008684 <_close_r>:
 8008684:	b538      	push	{r3, r4, r5, lr}
 8008686:	4d06      	ldr	r5, [pc, #24]	; (80086a0 <_close_r+0x1c>)
 8008688:	2300      	movs	r3, #0
 800868a:	4604      	mov	r4, r0
 800868c:	4608      	mov	r0, r1
 800868e:	602b      	str	r3, [r5, #0]
 8008690:	f000 fbf4 	bl	8008e7c <_close>
 8008694:	1c43      	adds	r3, r0, #1
 8008696:	d102      	bne.n	800869e <_close_r+0x1a>
 8008698:	682b      	ldr	r3, [r5, #0]
 800869a:	b103      	cbz	r3, 800869e <_close_r+0x1a>
 800869c:	6023      	str	r3, [r4, #0]
 800869e:	bd38      	pop	{r3, r4, r5, pc}
 80086a0:	200469e0 	.word	0x200469e0

080086a4 <_lseek_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	4d07      	ldr	r5, [pc, #28]	; (80086c4 <_lseek_r+0x20>)
 80086a8:	4604      	mov	r4, r0
 80086aa:	4608      	mov	r0, r1
 80086ac:	4611      	mov	r1, r2
 80086ae:	2200      	movs	r2, #0
 80086b0:	602a      	str	r2, [r5, #0]
 80086b2:	461a      	mov	r2, r3
 80086b4:	f000 fbfa 	bl	8008eac <_lseek>
 80086b8:	1c43      	adds	r3, r0, #1
 80086ba:	d102      	bne.n	80086c2 <_lseek_r+0x1e>
 80086bc:	682b      	ldr	r3, [r5, #0]
 80086be:	b103      	cbz	r3, 80086c2 <_lseek_r+0x1e>
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	bd38      	pop	{r3, r4, r5, pc}
 80086c4:	200469e0 	.word	0x200469e0

080086c8 <__swhatbuf_r>:
 80086c8:	b570      	push	{r4, r5, r6, lr}
 80086ca:	460e      	mov	r6, r1
 80086cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d0:	2900      	cmp	r1, #0
 80086d2:	b096      	sub	sp, #88	; 0x58
 80086d4:	4614      	mov	r4, r2
 80086d6:	461d      	mov	r5, r3
 80086d8:	da07      	bge.n	80086ea <__swhatbuf_r+0x22>
 80086da:	2300      	movs	r3, #0
 80086dc:	602b      	str	r3, [r5, #0]
 80086de:	89b3      	ldrh	r3, [r6, #12]
 80086e0:	061a      	lsls	r2, r3, #24
 80086e2:	d410      	bmi.n	8008706 <__swhatbuf_r+0x3e>
 80086e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086e8:	e00e      	b.n	8008708 <__swhatbuf_r+0x40>
 80086ea:	466a      	mov	r2, sp
 80086ec:	f000 fba4 	bl	8008e38 <_fstat_r>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	dbf2      	blt.n	80086da <__swhatbuf_r+0x12>
 80086f4:	9a01      	ldr	r2, [sp, #4]
 80086f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80086fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80086fe:	425a      	negs	r2, r3
 8008700:	415a      	adcs	r2, r3
 8008702:	602a      	str	r2, [r5, #0]
 8008704:	e7ee      	b.n	80086e4 <__swhatbuf_r+0x1c>
 8008706:	2340      	movs	r3, #64	; 0x40
 8008708:	2000      	movs	r0, #0
 800870a:	6023      	str	r3, [r4, #0]
 800870c:	b016      	add	sp, #88	; 0x58
 800870e:	bd70      	pop	{r4, r5, r6, pc}

08008710 <__smakebuf_r>:
 8008710:	898b      	ldrh	r3, [r1, #12]
 8008712:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008714:	079d      	lsls	r5, r3, #30
 8008716:	4606      	mov	r6, r0
 8008718:	460c      	mov	r4, r1
 800871a:	d507      	bpl.n	800872c <__smakebuf_r+0x1c>
 800871c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	6123      	str	r3, [r4, #16]
 8008724:	2301      	movs	r3, #1
 8008726:	6163      	str	r3, [r4, #20]
 8008728:	b002      	add	sp, #8
 800872a:	bd70      	pop	{r4, r5, r6, pc}
 800872c:	ab01      	add	r3, sp, #4
 800872e:	466a      	mov	r2, sp
 8008730:	f7ff ffca 	bl	80086c8 <__swhatbuf_r>
 8008734:	9900      	ldr	r1, [sp, #0]
 8008736:	4605      	mov	r5, r0
 8008738:	4630      	mov	r0, r6
 800873a:	f7ff fd7f 	bl	800823c <_malloc_r>
 800873e:	b948      	cbnz	r0, 8008754 <__smakebuf_r+0x44>
 8008740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008744:	059a      	lsls	r2, r3, #22
 8008746:	d4ef      	bmi.n	8008728 <__smakebuf_r+0x18>
 8008748:	f023 0303 	bic.w	r3, r3, #3
 800874c:	f043 0302 	orr.w	r3, r3, #2
 8008750:	81a3      	strh	r3, [r4, #12]
 8008752:	e7e3      	b.n	800871c <__smakebuf_r+0xc>
 8008754:	4b0d      	ldr	r3, [pc, #52]	; (800878c <__smakebuf_r+0x7c>)
 8008756:	62b3      	str	r3, [r6, #40]	; 0x28
 8008758:	89a3      	ldrh	r3, [r4, #12]
 800875a:	6020      	str	r0, [r4, #0]
 800875c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008760:	81a3      	strh	r3, [r4, #12]
 8008762:	9b00      	ldr	r3, [sp, #0]
 8008764:	6163      	str	r3, [r4, #20]
 8008766:	9b01      	ldr	r3, [sp, #4]
 8008768:	6120      	str	r0, [r4, #16]
 800876a:	b15b      	cbz	r3, 8008784 <__smakebuf_r+0x74>
 800876c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008770:	4630      	mov	r0, r6
 8008772:	f000 fb73 	bl	8008e5c <_isatty_r>
 8008776:	b128      	cbz	r0, 8008784 <__smakebuf_r+0x74>
 8008778:	89a3      	ldrh	r3, [r4, #12]
 800877a:	f023 0303 	bic.w	r3, r3, #3
 800877e:	f043 0301 	orr.w	r3, r3, #1
 8008782:	81a3      	strh	r3, [r4, #12]
 8008784:	89a0      	ldrh	r0, [r4, #12]
 8008786:	4305      	orrs	r5, r0
 8008788:	81a5      	strh	r5, [r4, #12]
 800878a:	e7cd      	b.n	8008728 <__smakebuf_r+0x18>
 800878c:	08007f5d 	.word	0x08007f5d

08008790 <__malloc_lock>:
 8008790:	4801      	ldr	r0, [pc, #4]	; (8008798 <__malloc_lock+0x8>)
 8008792:	f7ff bcda 	b.w	800814a <__retarget_lock_acquire_recursive>
 8008796:	bf00      	nop
 8008798:	200469d8 	.word	0x200469d8

0800879c <__malloc_unlock>:
 800879c:	4801      	ldr	r0, [pc, #4]	; (80087a4 <__malloc_unlock+0x8>)
 800879e:	f7ff bcd5 	b.w	800814c <__retarget_lock_release_recursive>
 80087a2:	bf00      	nop
 80087a4:	200469d8 	.word	0x200469d8

080087a8 <__sfputc_r>:
 80087a8:	6893      	ldr	r3, [r2, #8]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	b410      	push	{r4}
 80087b0:	6093      	str	r3, [r2, #8]
 80087b2:	da08      	bge.n	80087c6 <__sfputc_r+0x1e>
 80087b4:	6994      	ldr	r4, [r2, #24]
 80087b6:	42a3      	cmp	r3, r4
 80087b8:	db01      	blt.n	80087be <__sfputc_r+0x16>
 80087ba:	290a      	cmp	r1, #10
 80087bc:	d103      	bne.n	80087c6 <__sfputc_r+0x1e>
 80087be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087c2:	f7ff be8d 	b.w	80084e0 <__swbuf_r>
 80087c6:	6813      	ldr	r3, [r2, #0]
 80087c8:	1c58      	adds	r0, r3, #1
 80087ca:	6010      	str	r0, [r2, #0]
 80087cc:	7019      	strb	r1, [r3, #0]
 80087ce:	4608      	mov	r0, r1
 80087d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <__sfputs_r>:
 80087d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087d8:	4606      	mov	r6, r0
 80087da:	460f      	mov	r7, r1
 80087dc:	4614      	mov	r4, r2
 80087de:	18d5      	adds	r5, r2, r3
 80087e0:	42ac      	cmp	r4, r5
 80087e2:	d101      	bne.n	80087e8 <__sfputs_r+0x12>
 80087e4:	2000      	movs	r0, #0
 80087e6:	e007      	b.n	80087f8 <__sfputs_r+0x22>
 80087e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ec:	463a      	mov	r2, r7
 80087ee:	4630      	mov	r0, r6
 80087f0:	f7ff ffda 	bl	80087a8 <__sfputc_r>
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	d1f3      	bne.n	80087e0 <__sfputs_r+0xa>
 80087f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087fc <_vfiprintf_r>:
 80087fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008800:	460d      	mov	r5, r1
 8008802:	b09d      	sub	sp, #116	; 0x74
 8008804:	4614      	mov	r4, r2
 8008806:	4698      	mov	r8, r3
 8008808:	4606      	mov	r6, r0
 800880a:	b118      	cbz	r0, 8008814 <_vfiprintf_r+0x18>
 800880c:	6983      	ldr	r3, [r0, #24]
 800880e:	b90b      	cbnz	r3, 8008814 <_vfiprintf_r+0x18>
 8008810:	f7ff fbd8 	bl	8007fc4 <__sinit>
 8008814:	4b89      	ldr	r3, [pc, #548]	; (8008a3c <_vfiprintf_r+0x240>)
 8008816:	429d      	cmp	r5, r3
 8008818:	d11b      	bne.n	8008852 <_vfiprintf_r+0x56>
 800881a:	6875      	ldr	r5, [r6, #4]
 800881c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800881e:	07d9      	lsls	r1, r3, #31
 8008820:	d405      	bmi.n	800882e <_vfiprintf_r+0x32>
 8008822:	89ab      	ldrh	r3, [r5, #12]
 8008824:	059a      	lsls	r2, r3, #22
 8008826:	d402      	bmi.n	800882e <_vfiprintf_r+0x32>
 8008828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800882a:	f7ff fc8e 	bl	800814a <__retarget_lock_acquire_recursive>
 800882e:	89ab      	ldrh	r3, [r5, #12]
 8008830:	071b      	lsls	r3, r3, #28
 8008832:	d501      	bpl.n	8008838 <_vfiprintf_r+0x3c>
 8008834:	692b      	ldr	r3, [r5, #16]
 8008836:	b9eb      	cbnz	r3, 8008874 <_vfiprintf_r+0x78>
 8008838:	4629      	mov	r1, r5
 800883a:	4630      	mov	r0, r6
 800883c:	f7ff feb4 	bl	80085a8 <__swsetup_r>
 8008840:	b1c0      	cbz	r0, 8008874 <_vfiprintf_r+0x78>
 8008842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008844:	07dc      	lsls	r4, r3, #31
 8008846:	d50e      	bpl.n	8008866 <_vfiprintf_r+0x6a>
 8008848:	f04f 30ff 	mov.w	r0, #4294967295
 800884c:	b01d      	add	sp, #116	; 0x74
 800884e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008852:	4b7b      	ldr	r3, [pc, #492]	; (8008a40 <_vfiprintf_r+0x244>)
 8008854:	429d      	cmp	r5, r3
 8008856:	d101      	bne.n	800885c <_vfiprintf_r+0x60>
 8008858:	68b5      	ldr	r5, [r6, #8]
 800885a:	e7df      	b.n	800881c <_vfiprintf_r+0x20>
 800885c:	4b79      	ldr	r3, [pc, #484]	; (8008a44 <_vfiprintf_r+0x248>)
 800885e:	429d      	cmp	r5, r3
 8008860:	bf08      	it	eq
 8008862:	68f5      	ldreq	r5, [r6, #12]
 8008864:	e7da      	b.n	800881c <_vfiprintf_r+0x20>
 8008866:	89ab      	ldrh	r3, [r5, #12]
 8008868:	0598      	lsls	r0, r3, #22
 800886a:	d4ed      	bmi.n	8008848 <_vfiprintf_r+0x4c>
 800886c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800886e:	f7ff fc6d 	bl	800814c <__retarget_lock_release_recursive>
 8008872:	e7e9      	b.n	8008848 <_vfiprintf_r+0x4c>
 8008874:	2300      	movs	r3, #0
 8008876:	9309      	str	r3, [sp, #36]	; 0x24
 8008878:	2320      	movs	r3, #32
 800887a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800887e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008882:	2330      	movs	r3, #48	; 0x30
 8008884:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a48 <_vfiprintf_r+0x24c>
 8008888:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800888c:	f04f 0901 	mov.w	r9, #1
 8008890:	4623      	mov	r3, r4
 8008892:	469a      	mov	sl, r3
 8008894:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008898:	b10a      	cbz	r2, 800889e <_vfiprintf_r+0xa2>
 800889a:	2a25      	cmp	r2, #37	; 0x25
 800889c:	d1f9      	bne.n	8008892 <_vfiprintf_r+0x96>
 800889e:	ebba 0b04 	subs.w	fp, sl, r4
 80088a2:	d00b      	beq.n	80088bc <_vfiprintf_r+0xc0>
 80088a4:	465b      	mov	r3, fp
 80088a6:	4622      	mov	r2, r4
 80088a8:	4629      	mov	r1, r5
 80088aa:	4630      	mov	r0, r6
 80088ac:	f7ff ff93 	bl	80087d6 <__sfputs_r>
 80088b0:	3001      	adds	r0, #1
 80088b2:	f000 80aa 	beq.w	8008a0a <_vfiprintf_r+0x20e>
 80088b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088b8:	445a      	add	r2, fp
 80088ba:	9209      	str	r2, [sp, #36]	; 0x24
 80088bc:	f89a 3000 	ldrb.w	r3, [sl]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f000 80a2 	beq.w	8008a0a <_vfiprintf_r+0x20e>
 80088c6:	2300      	movs	r3, #0
 80088c8:	f04f 32ff 	mov.w	r2, #4294967295
 80088cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088d0:	f10a 0a01 	add.w	sl, sl, #1
 80088d4:	9304      	str	r3, [sp, #16]
 80088d6:	9307      	str	r3, [sp, #28]
 80088d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088dc:	931a      	str	r3, [sp, #104]	; 0x68
 80088de:	4654      	mov	r4, sl
 80088e0:	2205      	movs	r2, #5
 80088e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e6:	4858      	ldr	r0, [pc, #352]	; (8008a48 <_vfiprintf_r+0x24c>)
 80088e8:	f7f7 fcaa 	bl	8000240 <memchr>
 80088ec:	9a04      	ldr	r2, [sp, #16]
 80088ee:	b9d8      	cbnz	r0, 8008928 <_vfiprintf_r+0x12c>
 80088f0:	06d1      	lsls	r1, r2, #27
 80088f2:	bf44      	itt	mi
 80088f4:	2320      	movmi	r3, #32
 80088f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088fa:	0713      	lsls	r3, r2, #28
 80088fc:	bf44      	itt	mi
 80088fe:	232b      	movmi	r3, #43	; 0x2b
 8008900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008904:	f89a 3000 	ldrb.w	r3, [sl]
 8008908:	2b2a      	cmp	r3, #42	; 0x2a
 800890a:	d015      	beq.n	8008938 <_vfiprintf_r+0x13c>
 800890c:	9a07      	ldr	r2, [sp, #28]
 800890e:	4654      	mov	r4, sl
 8008910:	2000      	movs	r0, #0
 8008912:	f04f 0c0a 	mov.w	ip, #10
 8008916:	4621      	mov	r1, r4
 8008918:	f811 3b01 	ldrb.w	r3, [r1], #1
 800891c:	3b30      	subs	r3, #48	; 0x30
 800891e:	2b09      	cmp	r3, #9
 8008920:	d94e      	bls.n	80089c0 <_vfiprintf_r+0x1c4>
 8008922:	b1b0      	cbz	r0, 8008952 <_vfiprintf_r+0x156>
 8008924:	9207      	str	r2, [sp, #28]
 8008926:	e014      	b.n	8008952 <_vfiprintf_r+0x156>
 8008928:	eba0 0308 	sub.w	r3, r0, r8
 800892c:	fa09 f303 	lsl.w	r3, r9, r3
 8008930:	4313      	orrs	r3, r2
 8008932:	9304      	str	r3, [sp, #16]
 8008934:	46a2      	mov	sl, r4
 8008936:	e7d2      	b.n	80088de <_vfiprintf_r+0xe2>
 8008938:	9b03      	ldr	r3, [sp, #12]
 800893a:	1d19      	adds	r1, r3, #4
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	9103      	str	r1, [sp, #12]
 8008940:	2b00      	cmp	r3, #0
 8008942:	bfbb      	ittet	lt
 8008944:	425b      	neglt	r3, r3
 8008946:	f042 0202 	orrlt.w	r2, r2, #2
 800894a:	9307      	strge	r3, [sp, #28]
 800894c:	9307      	strlt	r3, [sp, #28]
 800894e:	bfb8      	it	lt
 8008950:	9204      	strlt	r2, [sp, #16]
 8008952:	7823      	ldrb	r3, [r4, #0]
 8008954:	2b2e      	cmp	r3, #46	; 0x2e
 8008956:	d10c      	bne.n	8008972 <_vfiprintf_r+0x176>
 8008958:	7863      	ldrb	r3, [r4, #1]
 800895a:	2b2a      	cmp	r3, #42	; 0x2a
 800895c:	d135      	bne.n	80089ca <_vfiprintf_r+0x1ce>
 800895e:	9b03      	ldr	r3, [sp, #12]
 8008960:	1d1a      	adds	r2, r3, #4
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	9203      	str	r2, [sp, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	bfb8      	it	lt
 800896a:	f04f 33ff 	movlt.w	r3, #4294967295
 800896e:	3402      	adds	r4, #2
 8008970:	9305      	str	r3, [sp, #20]
 8008972:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a58 <_vfiprintf_r+0x25c>
 8008976:	7821      	ldrb	r1, [r4, #0]
 8008978:	2203      	movs	r2, #3
 800897a:	4650      	mov	r0, sl
 800897c:	f7f7 fc60 	bl	8000240 <memchr>
 8008980:	b140      	cbz	r0, 8008994 <_vfiprintf_r+0x198>
 8008982:	2340      	movs	r3, #64	; 0x40
 8008984:	eba0 000a 	sub.w	r0, r0, sl
 8008988:	fa03 f000 	lsl.w	r0, r3, r0
 800898c:	9b04      	ldr	r3, [sp, #16]
 800898e:	4303      	orrs	r3, r0
 8008990:	3401      	adds	r4, #1
 8008992:	9304      	str	r3, [sp, #16]
 8008994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008998:	482c      	ldr	r0, [pc, #176]	; (8008a4c <_vfiprintf_r+0x250>)
 800899a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800899e:	2206      	movs	r2, #6
 80089a0:	f7f7 fc4e 	bl	8000240 <memchr>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d03f      	beq.n	8008a28 <_vfiprintf_r+0x22c>
 80089a8:	4b29      	ldr	r3, [pc, #164]	; (8008a50 <_vfiprintf_r+0x254>)
 80089aa:	bb1b      	cbnz	r3, 80089f4 <_vfiprintf_r+0x1f8>
 80089ac:	9b03      	ldr	r3, [sp, #12]
 80089ae:	3307      	adds	r3, #7
 80089b0:	f023 0307 	bic.w	r3, r3, #7
 80089b4:	3308      	adds	r3, #8
 80089b6:	9303      	str	r3, [sp, #12]
 80089b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ba:	443b      	add	r3, r7
 80089bc:	9309      	str	r3, [sp, #36]	; 0x24
 80089be:	e767      	b.n	8008890 <_vfiprintf_r+0x94>
 80089c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80089c4:	460c      	mov	r4, r1
 80089c6:	2001      	movs	r0, #1
 80089c8:	e7a5      	b.n	8008916 <_vfiprintf_r+0x11a>
 80089ca:	2300      	movs	r3, #0
 80089cc:	3401      	adds	r4, #1
 80089ce:	9305      	str	r3, [sp, #20]
 80089d0:	4619      	mov	r1, r3
 80089d2:	f04f 0c0a 	mov.w	ip, #10
 80089d6:	4620      	mov	r0, r4
 80089d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089dc:	3a30      	subs	r2, #48	; 0x30
 80089de:	2a09      	cmp	r2, #9
 80089e0:	d903      	bls.n	80089ea <_vfiprintf_r+0x1ee>
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d0c5      	beq.n	8008972 <_vfiprintf_r+0x176>
 80089e6:	9105      	str	r1, [sp, #20]
 80089e8:	e7c3      	b.n	8008972 <_vfiprintf_r+0x176>
 80089ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80089ee:	4604      	mov	r4, r0
 80089f0:	2301      	movs	r3, #1
 80089f2:	e7f0      	b.n	80089d6 <_vfiprintf_r+0x1da>
 80089f4:	ab03      	add	r3, sp, #12
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	462a      	mov	r2, r5
 80089fa:	4b16      	ldr	r3, [pc, #88]	; (8008a54 <_vfiprintf_r+0x258>)
 80089fc:	a904      	add	r1, sp, #16
 80089fe:	4630      	mov	r0, r6
 8008a00:	f3af 8000 	nop.w
 8008a04:	4607      	mov	r7, r0
 8008a06:	1c78      	adds	r0, r7, #1
 8008a08:	d1d6      	bne.n	80089b8 <_vfiprintf_r+0x1bc>
 8008a0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a0c:	07d9      	lsls	r1, r3, #31
 8008a0e:	d405      	bmi.n	8008a1c <_vfiprintf_r+0x220>
 8008a10:	89ab      	ldrh	r3, [r5, #12]
 8008a12:	059a      	lsls	r2, r3, #22
 8008a14:	d402      	bmi.n	8008a1c <_vfiprintf_r+0x220>
 8008a16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a18:	f7ff fb98 	bl	800814c <__retarget_lock_release_recursive>
 8008a1c:	89ab      	ldrh	r3, [r5, #12]
 8008a1e:	065b      	lsls	r3, r3, #25
 8008a20:	f53f af12 	bmi.w	8008848 <_vfiprintf_r+0x4c>
 8008a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a26:	e711      	b.n	800884c <_vfiprintf_r+0x50>
 8008a28:	ab03      	add	r3, sp, #12
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	462a      	mov	r2, r5
 8008a2e:	4b09      	ldr	r3, [pc, #36]	; (8008a54 <_vfiprintf_r+0x258>)
 8008a30:	a904      	add	r1, sp, #16
 8008a32:	4630      	mov	r0, r6
 8008a34:	f000 f880 	bl	8008b38 <_printf_i>
 8008a38:	e7e4      	b.n	8008a04 <_vfiprintf_r+0x208>
 8008a3a:	bf00      	nop
 8008a3c:	08009968 	.word	0x08009968
 8008a40:	08009988 	.word	0x08009988
 8008a44:	08009948 	.word	0x08009948
 8008a48:	080099ac 	.word	0x080099ac
 8008a4c:	080099b6 	.word	0x080099b6
 8008a50:	00000000 	.word	0x00000000
 8008a54:	080087d7 	.word	0x080087d7
 8008a58:	080099b2 	.word	0x080099b2

08008a5c <_printf_common>:
 8008a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a60:	4616      	mov	r6, r2
 8008a62:	4699      	mov	r9, r3
 8008a64:	688a      	ldr	r2, [r1, #8]
 8008a66:	690b      	ldr	r3, [r1, #16]
 8008a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	bfb8      	it	lt
 8008a70:	4613      	movlt	r3, r2
 8008a72:	6033      	str	r3, [r6, #0]
 8008a74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a78:	4607      	mov	r7, r0
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	b10a      	cbz	r2, 8008a82 <_printf_common+0x26>
 8008a7e:	3301      	adds	r3, #1
 8008a80:	6033      	str	r3, [r6, #0]
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	0699      	lsls	r1, r3, #26
 8008a86:	bf42      	ittt	mi
 8008a88:	6833      	ldrmi	r3, [r6, #0]
 8008a8a:	3302      	addmi	r3, #2
 8008a8c:	6033      	strmi	r3, [r6, #0]
 8008a8e:	6825      	ldr	r5, [r4, #0]
 8008a90:	f015 0506 	ands.w	r5, r5, #6
 8008a94:	d106      	bne.n	8008aa4 <_printf_common+0x48>
 8008a96:	f104 0a19 	add.w	sl, r4, #25
 8008a9a:	68e3      	ldr	r3, [r4, #12]
 8008a9c:	6832      	ldr	r2, [r6, #0]
 8008a9e:	1a9b      	subs	r3, r3, r2
 8008aa0:	42ab      	cmp	r3, r5
 8008aa2:	dc26      	bgt.n	8008af2 <_printf_common+0x96>
 8008aa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008aa8:	1e13      	subs	r3, r2, #0
 8008aaa:	6822      	ldr	r2, [r4, #0]
 8008aac:	bf18      	it	ne
 8008aae:	2301      	movne	r3, #1
 8008ab0:	0692      	lsls	r2, r2, #26
 8008ab2:	d42b      	bmi.n	8008b0c <_printf_common+0xb0>
 8008ab4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ab8:	4649      	mov	r1, r9
 8008aba:	4638      	mov	r0, r7
 8008abc:	47c0      	blx	r8
 8008abe:	3001      	adds	r0, #1
 8008ac0:	d01e      	beq.n	8008b00 <_printf_common+0xa4>
 8008ac2:	6823      	ldr	r3, [r4, #0]
 8008ac4:	68e5      	ldr	r5, [r4, #12]
 8008ac6:	6832      	ldr	r2, [r6, #0]
 8008ac8:	f003 0306 	and.w	r3, r3, #6
 8008acc:	2b04      	cmp	r3, #4
 8008ace:	bf08      	it	eq
 8008ad0:	1aad      	subeq	r5, r5, r2
 8008ad2:	68a3      	ldr	r3, [r4, #8]
 8008ad4:	6922      	ldr	r2, [r4, #16]
 8008ad6:	bf0c      	ite	eq
 8008ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008adc:	2500      	movne	r5, #0
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	bfc4      	itt	gt
 8008ae2:	1a9b      	subgt	r3, r3, r2
 8008ae4:	18ed      	addgt	r5, r5, r3
 8008ae6:	2600      	movs	r6, #0
 8008ae8:	341a      	adds	r4, #26
 8008aea:	42b5      	cmp	r5, r6
 8008aec:	d11a      	bne.n	8008b24 <_printf_common+0xc8>
 8008aee:	2000      	movs	r0, #0
 8008af0:	e008      	b.n	8008b04 <_printf_common+0xa8>
 8008af2:	2301      	movs	r3, #1
 8008af4:	4652      	mov	r2, sl
 8008af6:	4649      	mov	r1, r9
 8008af8:	4638      	mov	r0, r7
 8008afa:	47c0      	blx	r8
 8008afc:	3001      	adds	r0, #1
 8008afe:	d103      	bne.n	8008b08 <_printf_common+0xac>
 8008b00:	f04f 30ff 	mov.w	r0, #4294967295
 8008b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b08:	3501      	adds	r5, #1
 8008b0a:	e7c6      	b.n	8008a9a <_printf_common+0x3e>
 8008b0c:	18e1      	adds	r1, r4, r3
 8008b0e:	1c5a      	adds	r2, r3, #1
 8008b10:	2030      	movs	r0, #48	; 0x30
 8008b12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b16:	4422      	add	r2, r4
 8008b18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b20:	3302      	adds	r3, #2
 8008b22:	e7c7      	b.n	8008ab4 <_printf_common+0x58>
 8008b24:	2301      	movs	r3, #1
 8008b26:	4622      	mov	r2, r4
 8008b28:	4649      	mov	r1, r9
 8008b2a:	4638      	mov	r0, r7
 8008b2c:	47c0      	blx	r8
 8008b2e:	3001      	adds	r0, #1
 8008b30:	d0e6      	beq.n	8008b00 <_printf_common+0xa4>
 8008b32:	3601      	adds	r6, #1
 8008b34:	e7d9      	b.n	8008aea <_printf_common+0x8e>
	...

08008b38 <_printf_i>:
 8008b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b3c:	460c      	mov	r4, r1
 8008b3e:	4691      	mov	r9, r2
 8008b40:	7e27      	ldrb	r7, [r4, #24]
 8008b42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b44:	2f78      	cmp	r7, #120	; 0x78
 8008b46:	4680      	mov	r8, r0
 8008b48:	469a      	mov	sl, r3
 8008b4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b4e:	d807      	bhi.n	8008b60 <_printf_i+0x28>
 8008b50:	2f62      	cmp	r7, #98	; 0x62
 8008b52:	d80a      	bhi.n	8008b6a <_printf_i+0x32>
 8008b54:	2f00      	cmp	r7, #0
 8008b56:	f000 80d8 	beq.w	8008d0a <_printf_i+0x1d2>
 8008b5a:	2f58      	cmp	r7, #88	; 0x58
 8008b5c:	f000 80a3 	beq.w	8008ca6 <_printf_i+0x16e>
 8008b60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b68:	e03a      	b.n	8008be0 <_printf_i+0xa8>
 8008b6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b6e:	2b15      	cmp	r3, #21
 8008b70:	d8f6      	bhi.n	8008b60 <_printf_i+0x28>
 8008b72:	a001      	add	r0, pc, #4	; (adr r0, 8008b78 <_printf_i+0x40>)
 8008b74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008b78:	08008bd1 	.word	0x08008bd1
 8008b7c:	08008be5 	.word	0x08008be5
 8008b80:	08008b61 	.word	0x08008b61
 8008b84:	08008b61 	.word	0x08008b61
 8008b88:	08008b61 	.word	0x08008b61
 8008b8c:	08008b61 	.word	0x08008b61
 8008b90:	08008be5 	.word	0x08008be5
 8008b94:	08008b61 	.word	0x08008b61
 8008b98:	08008b61 	.word	0x08008b61
 8008b9c:	08008b61 	.word	0x08008b61
 8008ba0:	08008b61 	.word	0x08008b61
 8008ba4:	08008cf1 	.word	0x08008cf1
 8008ba8:	08008c15 	.word	0x08008c15
 8008bac:	08008cd3 	.word	0x08008cd3
 8008bb0:	08008b61 	.word	0x08008b61
 8008bb4:	08008b61 	.word	0x08008b61
 8008bb8:	08008d13 	.word	0x08008d13
 8008bbc:	08008b61 	.word	0x08008b61
 8008bc0:	08008c15 	.word	0x08008c15
 8008bc4:	08008b61 	.word	0x08008b61
 8008bc8:	08008b61 	.word	0x08008b61
 8008bcc:	08008cdb 	.word	0x08008cdb
 8008bd0:	680b      	ldr	r3, [r1, #0]
 8008bd2:	1d1a      	adds	r2, r3, #4
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	600a      	str	r2, [r1, #0]
 8008bd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008bdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008be0:	2301      	movs	r3, #1
 8008be2:	e0a3      	b.n	8008d2c <_printf_i+0x1f4>
 8008be4:	6825      	ldr	r5, [r4, #0]
 8008be6:	6808      	ldr	r0, [r1, #0]
 8008be8:	062e      	lsls	r6, r5, #24
 8008bea:	f100 0304 	add.w	r3, r0, #4
 8008bee:	d50a      	bpl.n	8008c06 <_printf_i+0xce>
 8008bf0:	6805      	ldr	r5, [r0, #0]
 8008bf2:	600b      	str	r3, [r1, #0]
 8008bf4:	2d00      	cmp	r5, #0
 8008bf6:	da03      	bge.n	8008c00 <_printf_i+0xc8>
 8008bf8:	232d      	movs	r3, #45	; 0x2d
 8008bfa:	426d      	negs	r5, r5
 8008bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c00:	485e      	ldr	r0, [pc, #376]	; (8008d7c <_printf_i+0x244>)
 8008c02:	230a      	movs	r3, #10
 8008c04:	e019      	b.n	8008c3a <_printf_i+0x102>
 8008c06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008c0a:	6805      	ldr	r5, [r0, #0]
 8008c0c:	600b      	str	r3, [r1, #0]
 8008c0e:	bf18      	it	ne
 8008c10:	b22d      	sxthne	r5, r5
 8008c12:	e7ef      	b.n	8008bf4 <_printf_i+0xbc>
 8008c14:	680b      	ldr	r3, [r1, #0]
 8008c16:	6825      	ldr	r5, [r4, #0]
 8008c18:	1d18      	adds	r0, r3, #4
 8008c1a:	6008      	str	r0, [r1, #0]
 8008c1c:	0628      	lsls	r0, r5, #24
 8008c1e:	d501      	bpl.n	8008c24 <_printf_i+0xec>
 8008c20:	681d      	ldr	r5, [r3, #0]
 8008c22:	e002      	b.n	8008c2a <_printf_i+0xf2>
 8008c24:	0669      	lsls	r1, r5, #25
 8008c26:	d5fb      	bpl.n	8008c20 <_printf_i+0xe8>
 8008c28:	881d      	ldrh	r5, [r3, #0]
 8008c2a:	4854      	ldr	r0, [pc, #336]	; (8008d7c <_printf_i+0x244>)
 8008c2c:	2f6f      	cmp	r7, #111	; 0x6f
 8008c2e:	bf0c      	ite	eq
 8008c30:	2308      	moveq	r3, #8
 8008c32:	230a      	movne	r3, #10
 8008c34:	2100      	movs	r1, #0
 8008c36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c3a:	6866      	ldr	r6, [r4, #4]
 8008c3c:	60a6      	str	r6, [r4, #8]
 8008c3e:	2e00      	cmp	r6, #0
 8008c40:	bfa2      	ittt	ge
 8008c42:	6821      	ldrge	r1, [r4, #0]
 8008c44:	f021 0104 	bicge.w	r1, r1, #4
 8008c48:	6021      	strge	r1, [r4, #0]
 8008c4a:	b90d      	cbnz	r5, 8008c50 <_printf_i+0x118>
 8008c4c:	2e00      	cmp	r6, #0
 8008c4e:	d04d      	beq.n	8008cec <_printf_i+0x1b4>
 8008c50:	4616      	mov	r6, r2
 8008c52:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c56:	fb03 5711 	mls	r7, r3, r1, r5
 8008c5a:	5dc7      	ldrb	r7, [r0, r7]
 8008c5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c60:	462f      	mov	r7, r5
 8008c62:	42bb      	cmp	r3, r7
 8008c64:	460d      	mov	r5, r1
 8008c66:	d9f4      	bls.n	8008c52 <_printf_i+0x11a>
 8008c68:	2b08      	cmp	r3, #8
 8008c6a:	d10b      	bne.n	8008c84 <_printf_i+0x14c>
 8008c6c:	6823      	ldr	r3, [r4, #0]
 8008c6e:	07df      	lsls	r7, r3, #31
 8008c70:	d508      	bpl.n	8008c84 <_printf_i+0x14c>
 8008c72:	6923      	ldr	r3, [r4, #16]
 8008c74:	6861      	ldr	r1, [r4, #4]
 8008c76:	4299      	cmp	r1, r3
 8008c78:	bfde      	ittt	le
 8008c7a:	2330      	movle	r3, #48	; 0x30
 8008c7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c84:	1b92      	subs	r2, r2, r6
 8008c86:	6122      	str	r2, [r4, #16]
 8008c88:	f8cd a000 	str.w	sl, [sp]
 8008c8c:	464b      	mov	r3, r9
 8008c8e:	aa03      	add	r2, sp, #12
 8008c90:	4621      	mov	r1, r4
 8008c92:	4640      	mov	r0, r8
 8008c94:	f7ff fee2 	bl	8008a5c <_printf_common>
 8008c98:	3001      	adds	r0, #1
 8008c9a:	d14c      	bne.n	8008d36 <_printf_i+0x1fe>
 8008c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca0:	b004      	add	sp, #16
 8008ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca6:	4835      	ldr	r0, [pc, #212]	; (8008d7c <_printf_i+0x244>)
 8008ca8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008cac:	6823      	ldr	r3, [r4, #0]
 8008cae:	680e      	ldr	r6, [r1, #0]
 8008cb0:	061f      	lsls	r7, r3, #24
 8008cb2:	f856 5b04 	ldr.w	r5, [r6], #4
 8008cb6:	600e      	str	r6, [r1, #0]
 8008cb8:	d514      	bpl.n	8008ce4 <_printf_i+0x1ac>
 8008cba:	07d9      	lsls	r1, r3, #31
 8008cbc:	bf44      	itt	mi
 8008cbe:	f043 0320 	orrmi.w	r3, r3, #32
 8008cc2:	6023      	strmi	r3, [r4, #0]
 8008cc4:	b91d      	cbnz	r5, 8008cce <_printf_i+0x196>
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	f023 0320 	bic.w	r3, r3, #32
 8008ccc:	6023      	str	r3, [r4, #0]
 8008cce:	2310      	movs	r3, #16
 8008cd0:	e7b0      	b.n	8008c34 <_printf_i+0xfc>
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	f043 0320 	orr.w	r3, r3, #32
 8008cd8:	6023      	str	r3, [r4, #0]
 8008cda:	2378      	movs	r3, #120	; 0x78
 8008cdc:	4828      	ldr	r0, [pc, #160]	; (8008d80 <_printf_i+0x248>)
 8008cde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ce2:	e7e3      	b.n	8008cac <_printf_i+0x174>
 8008ce4:	065e      	lsls	r6, r3, #25
 8008ce6:	bf48      	it	mi
 8008ce8:	b2ad      	uxthmi	r5, r5
 8008cea:	e7e6      	b.n	8008cba <_printf_i+0x182>
 8008cec:	4616      	mov	r6, r2
 8008cee:	e7bb      	b.n	8008c68 <_printf_i+0x130>
 8008cf0:	680b      	ldr	r3, [r1, #0]
 8008cf2:	6826      	ldr	r6, [r4, #0]
 8008cf4:	6960      	ldr	r0, [r4, #20]
 8008cf6:	1d1d      	adds	r5, r3, #4
 8008cf8:	600d      	str	r5, [r1, #0]
 8008cfa:	0635      	lsls	r5, r6, #24
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	d501      	bpl.n	8008d04 <_printf_i+0x1cc>
 8008d00:	6018      	str	r0, [r3, #0]
 8008d02:	e002      	b.n	8008d0a <_printf_i+0x1d2>
 8008d04:	0671      	lsls	r1, r6, #25
 8008d06:	d5fb      	bpl.n	8008d00 <_printf_i+0x1c8>
 8008d08:	8018      	strh	r0, [r3, #0]
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	6123      	str	r3, [r4, #16]
 8008d0e:	4616      	mov	r6, r2
 8008d10:	e7ba      	b.n	8008c88 <_printf_i+0x150>
 8008d12:	680b      	ldr	r3, [r1, #0]
 8008d14:	1d1a      	adds	r2, r3, #4
 8008d16:	600a      	str	r2, [r1, #0]
 8008d18:	681e      	ldr	r6, [r3, #0]
 8008d1a:	6862      	ldr	r2, [r4, #4]
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	4630      	mov	r0, r6
 8008d20:	f7f7 fa8e 	bl	8000240 <memchr>
 8008d24:	b108      	cbz	r0, 8008d2a <_printf_i+0x1f2>
 8008d26:	1b80      	subs	r0, r0, r6
 8008d28:	6060      	str	r0, [r4, #4]
 8008d2a:	6863      	ldr	r3, [r4, #4]
 8008d2c:	6123      	str	r3, [r4, #16]
 8008d2e:	2300      	movs	r3, #0
 8008d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d34:	e7a8      	b.n	8008c88 <_printf_i+0x150>
 8008d36:	6923      	ldr	r3, [r4, #16]
 8008d38:	4632      	mov	r2, r6
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	4640      	mov	r0, r8
 8008d3e:	47d0      	blx	sl
 8008d40:	3001      	adds	r0, #1
 8008d42:	d0ab      	beq.n	8008c9c <_printf_i+0x164>
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	079b      	lsls	r3, r3, #30
 8008d48:	d413      	bmi.n	8008d72 <_printf_i+0x23a>
 8008d4a:	68e0      	ldr	r0, [r4, #12]
 8008d4c:	9b03      	ldr	r3, [sp, #12]
 8008d4e:	4298      	cmp	r0, r3
 8008d50:	bfb8      	it	lt
 8008d52:	4618      	movlt	r0, r3
 8008d54:	e7a4      	b.n	8008ca0 <_printf_i+0x168>
 8008d56:	2301      	movs	r3, #1
 8008d58:	4632      	mov	r2, r6
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	4640      	mov	r0, r8
 8008d5e:	47d0      	blx	sl
 8008d60:	3001      	adds	r0, #1
 8008d62:	d09b      	beq.n	8008c9c <_printf_i+0x164>
 8008d64:	3501      	adds	r5, #1
 8008d66:	68e3      	ldr	r3, [r4, #12]
 8008d68:	9903      	ldr	r1, [sp, #12]
 8008d6a:	1a5b      	subs	r3, r3, r1
 8008d6c:	42ab      	cmp	r3, r5
 8008d6e:	dcf2      	bgt.n	8008d56 <_printf_i+0x21e>
 8008d70:	e7eb      	b.n	8008d4a <_printf_i+0x212>
 8008d72:	2500      	movs	r5, #0
 8008d74:	f104 0619 	add.w	r6, r4, #25
 8008d78:	e7f5      	b.n	8008d66 <_printf_i+0x22e>
 8008d7a:	bf00      	nop
 8008d7c:	080099bd 	.word	0x080099bd
 8008d80:	080099ce 	.word	0x080099ce

08008d84 <_putc_r>:
 8008d84:	b570      	push	{r4, r5, r6, lr}
 8008d86:	460d      	mov	r5, r1
 8008d88:	4614      	mov	r4, r2
 8008d8a:	4606      	mov	r6, r0
 8008d8c:	b118      	cbz	r0, 8008d96 <_putc_r+0x12>
 8008d8e:	6983      	ldr	r3, [r0, #24]
 8008d90:	b90b      	cbnz	r3, 8008d96 <_putc_r+0x12>
 8008d92:	f7ff f917 	bl	8007fc4 <__sinit>
 8008d96:	4b1c      	ldr	r3, [pc, #112]	; (8008e08 <_putc_r+0x84>)
 8008d98:	429c      	cmp	r4, r3
 8008d9a:	d124      	bne.n	8008de6 <_putc_r+0x62>
 8008d9c:	6874      	ldr	r4, [r6, #4]
 8008d9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008da0:	07d8      	lsls	r0, r3, #31
 8008da2:	d405      	bmi.n	8008db0 <_putc_r+0x2c>
 8008da4:	89a3      	ldrh	r3, [r4, #12]
 8008da6:	0599      	lsls	r1, r3, #22
 8008da8:	d402      	bmi.n	8008db0 <_putc_r+0x2c>
 8008daa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dac:	f7ff f9cd 	bl	800814a <__retarget_lock_acquire_recursive>
 8008db0:	68a3      	ldr	r3, [r4, #8]
 8008db2:	3b01      	subs	r3, #1
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	60a3      	str	r3, [r4, #8]
 8008db8:	da05      	bge.n	8008dc6 <_putc_r+0x42>
 8008dba:	69a2      	ldr	r2, [r4, #24]
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	db1c      	blt.n	8008dfa <_putc_r+0x76>
 8008dc0:	b2eb      	uxtb	r3, r5
 8008dc2:	2b0a      	cmp	r3, #10
 8008dc4:	d019      	beq.n	8008dfa <_putc_r+0x76>
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	1c5a      	adds	r2, r3, #1
 8008dca:	6022      	str	r2, [r4, #0]
 8008dcc:	701d      	strb	r5, [r3, #0]
 8008dce:	b2ed      	uxtb	r5, r5
 8008dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dd2:	07da      	lsls	r2, r3, #31
 8008dd4:	d405      	bmi.n	8008de2 <_putc_r+0x5e>
 8008dd6:	89a3      	ldrh	r3, [r4, #12]
 8008dd8:	059b      	lsls	r3, r3, #22
 8008dda:	d402      	bmi.n	8008de2 <_putc_r+0x5e>
 8008ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dde:	f7ff f9b5 	bl	800814c <__retarget_lock_release_recursive>
 8008de2:	4628      	mov	r0, r5
 8008de4:	bd70      	pop	{r4, r5, r6, pc}
 8008de6:	4b09      	ldr	r3, [pc, #36]	; (8008e0c <_putc_r+0x88>)
 8008de8:	429c      	cmp	r4, r3
 8008dea:	d101      	bne.n	8008df0 <_putc_r+0x6c>
 8008dec:	68b4      	ldr	r4, [r6, #8]
 8008dee:	e7d6      	b.n	8008d9e <_putc_r+0x1a>
 8008df0:	4b07      	ldr	r3, [pc, #28]	; (8008e10 <_putc_r+0x8c>)
 8008df2:	429c      	cmp	r4, r3
 8008df4:	bf08      	it	eq
 8008df6:	68f4      	ldreq	r4, [r6, #12]
 8008df8:	e7d1      	b.n	8008d9e <_putc_r+0x1a>
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	4622      	mov	r2, r4
 8008dfe:	4630      	mov	r0, r6
 8008e00:	f7ff fb6e 	bl	80084e0 <__swbuf_r>
 8008e04:	4605      	mov	r5, r0
 8008e06:	e7e3      	b.n	8008dd0 <_putc_r+0x4c>
 8008e08:	08009968 	.word	0x08009968
 8008e0c:	08009988 	.word	0x08009988
 8008e10:	08009948 	.word	0x08009948

08008e14 <_read_r>:
 8008e14:	b538      	push	{r3, r4, r5, lr}
 8008e16:	4d07      	ldr	r5, [pc, #28]	; (8008e34 <_read_r+0x20>)
 8008e18:	4604      	mov	r4, r0
 8008e1a:	4608      	mov	r0, r1
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	2200      	movs	r2, #0
 8008e20:	602a      	str	r2, [r5, #0]
 8008e22:	461a      	mov	r2, r3
 8008e24:	f7fe fd3e 	bl	80078a4 <_read>
 8008e28:	1c43      	adds	r3, r0, #1
 8008e2a:	d102      	bne.n	8008e32 <_read_r+0x1e>
 8008e2c:	682b      	ldr	r3, [r5, #0]
 8008e2e:	b103      	cbz	r3, 8008e32 <_read_r+0x1e>
 8008e30:	6023      	str	r3, [r4, #0]
 8008e32:	bd38      	pop	{r3, r4, r5, pc}
 8008e34:	200469e0 	.word	0x200469e0

08008e38 <_fstat_r>:
 8008e38:	b538      	push	{r3, r4, r5, lr}
 8008e3a:	4d07      	ldr	r5, [pc, #28]	; (8008e58 <_fstat_r+0x20>)
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	4604      	mov	r4, r0
 8008e40:	4608      	mov	r0, r1
 8008e42:	4611      	mov	r1, r2
 8008e44:	602b      	str	r3, [r5, #0]
 8008e46:	f000 f821 	bl	8008e8c <_fstat>
 8008e4a:	1c43      	adds	r3, r0, #1
 8008e4c:	d102      	bne.n	8008e54 <_fstat_r+0x1c>
 8008e4e:	682b      	ldr	r3, [r5, #0]
 8008e50:	b103      	cbz	r3, 8008e54 <_fstat_r+0x1c>
 8008e52:	6023      	str	r3, [r4, #0]
 8008e54:	bd38      	pop	{r3, r4, r5, pc}
 8008e56:	bf00      	nop
 8008e58:	200469e0 	.word	0x200469e0

08008e5c <_isatty_r>:
 8008e5c:	b538      	push	{r3, r4, r5, lr}
 8008e5e:	4d06      	ldr	r5, [pc, #24]	; (8008e78 <_isatty_r+0x1c>)
 8008e60:	2300      	movs	r3, #0
 8008e62:	4604      	mov	r4, r0
 8008e64:	4608      	mov	r0, r1
 8008e66:	602b      	str	r3, [r5, #0]
 8008e68:	f000 f818 	bl	8008e9c <_isatty>
 8008e6c:	1c43      	adds	r3, r0, #1
 8008e6e:	d102      	bne.n	8008e76 <_isatty_r+0x1a>
 8008e70:	682b      	ldr	r3, [r5, #0]
 8008e72:	b103      	cbz	r3, 8008e76 <_isatty_r+0x1a>
 8008e74:	6023      	str	r3, [r4, #0]
 8008e76:	bd38      	pop	{r3, r4, r5, pc}
 8008e78:	200469e0 	.word	0x200469e0

08008e7c <_close>:
 8008e7c:	4b02      	ldr	r3, [pc, #8]	; (8008e88 <_close+0xc>)
 8008e7e:	2258      	movs	r2, #88	; 0x58
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	f04f 30ff 	mov.w	r0, #4294967295
 8008e86:	4770      	bx	lr
 8008e88:	200469e0 	.word	0x200469e0

08008e8c <_fstat>:
 8008e8c:	4b02      	ldr	r3, [pc, #8]	; (8008e98 <_fstat+0xc>)
 8008e8e:	2258      	movs	r2, #88	; 0x58
 8008e90:	601a      	str	r2, [r3, #0]
 8008e92:	f04f 30ff 	mov.w	r0, #4294967295
 8008e96:	4770      	bx	lr
 8008e98:	200469e0 	.word	0x200469e0

08008e9c <_isatty>:
 8008e9c:	4b02      	ldr	r3, [pc, #8]	; (8008ea8 <_isatty+0xc>)
 8008e9e:	2258      	movs	r2, #88	; 0x58
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	200469e0 	.word	0x200469e0

08008eac <_lseek>:
 8008eac:	4b02      	ldr	r3, [pc, #8]	; (8008eb8 <_lseek+0xc>)
 8008eae:	2258      	movs	r2, #88	; 0x58
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb6:	4770      	bx	lr
 8008eb8:	200469e0 	.word	0x200469e0

08008ebc <_sbrk>:
 8008ebc:	4b04      	ldr	r3, [pc, #16]	; (8008ed0 <_sbrk+0x14>)
 8008ebe:	6819      	ldr	r1, [r3, #0]
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	b909      	cbnz	r1, 8008ec8 <_sbrk+0xc>
 8008ec4:	4903      	ldr	r1, [pc, #12]	; (8008ed4 <_sbrk+0x18>)
 8008ec6:	6019      	str	r1, [r3, #0]
 8008ec8:	6818      	ldr	r0, [r3, #0]
 8008eca:	4402      	add	r2, r0
 8008ecc:	601a      	str	r2, [r3, #0]
 8008ece:	4770      	bx	lr
 8008ed0:	20001604 	.word	0x20001604
 8008ed4:	200469e8 	.word	0x200469e8

08008ed8 <_init>:
 8008ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eda:	bf00      	nop
 8008edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ede:	bc08      	pop	{r3}
 8008ee0:	469e      	mov	lr, r3
 8008ee2:	4770      	bx	lr

08008ee4 <_fini>:
 8008ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee6:	bf00      	nop
 8008ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eea:	bc08      	pop	{r3}
 8008eec:	469e      	mov	lr, r3
 8008eee:	4770      	bx	lr
